
UART_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e7c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  08006fc0  08006fc0  00016fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800748c  0800748c  0001748c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007494  08007494  00017494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007498  08007498  00017498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001d4  20000004  0800749c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000260  200001d8  08007670  000201d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000438  08007670  00020438  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 11 .debug_info   000124e3  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002ca8  00000000  00000000  0003272e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000013d0  00000000  00000000  000353d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000f04  00000000  00000000  000367a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001e54c  00000000  00000000  000376ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012f2b  00000000  00000000  00055bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000bb654  00000000  00000000  00068b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006270  00000000  00000000  00124178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  0012a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d8 	.word	0x200001d8
 800015c:	00000000 	.word	0x00000000
 8000160:	08006fa4 	.word	0x08006fa4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001dc 	.word	0x200001dc
 800017c:	08006fa4 	.word	0x08006fa4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b970 	b.w	8000e50 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	460d      	mov	r5, r1
 8000b90:	4604      	mov	r4, r0
 8000b92:	460f      	mov	r7, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14a      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4694      	mov	ip, r2
 8000b9c:	d965      	bls.n	8000c6a <__udivmoddi4+0xe2>
 8000b9e:	fab2 f382 	clz	r3, r2
 8000ba2:	b143      	cbz	r3, 8000bb6 <__udivmoddi4+0x2e>
 8000ba4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba8:	f1c3 0220 	rsb	r2, r3, #32
 8000bac:	409f      	lsls	r7, r3
 8000bae:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb2:	4317      	orrs	r7, r2
 8000bb4:	409c      	lsls	r4, r3
 8000bb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bba:	fa1f f58c 	uxth.w	r5, ip
 8000bbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bc2:	0c22      	lsrs	r2, r4, #16
 8000bc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bcc:	fb01 f005 	mul.w	r0, r1, r5
 8000bd0:	4290      	cmp	r0, r2
 8000bd2:	d90a      	bls.n	8000bea <__udivmoddi4+0x62>
 8000bd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000bd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bdc:	f080 811c 	bcs.w	8000e18 <__udivmoddi4+0x290>
 8000be0:	4290      	cmp	r0, r2
 8000be2:	f240 8119 	bls.w	8000e18 <__udivmoddi4+0x290>
 8000be6:	3902      	subs	r1, #2
 8000be8:	4462      	add	r2, ip
 8000bea:	1a12      	subs	r2, r2, r0
 8000bec:	b2a4      	uxth	r4, r4
 8000bee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bfa:	fb00 f505 	mul.w	r5, r0, r5
 8000bfe:	42a5      	cmp	r5, r4
 8000c00:	d90a      	bls.n	8000c18 <__udivmoddi4+0x90>
 8000c02:	eb1c 0404 	adds.w	r4, ip, r4
 8000c06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c0a:	f080 8107 	bcs.w	8000e1c <__udivmoddi4+0x294>
 8000c0e:	42a5      	cmp	r5, r4
 8000c10:	f240 8104 	bls.w	8000e1c <__udivmoddi4+0x294>
 8000c14:	4464      	add	r4, ip
 8000c16:	3802      	subs	r0, #2
 8000c18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c1c:	1b64      	subs	r4, r4, r5
 8000c1e:	2100      	movs	r1, #0
 8000c20:	b11e      	cbz	r6, 8000c2a <__udivmoddi4+0xa2>
 8000c22:	40dc      	lsrs	r4, r3
 8000c24:	2300      	movs	r3, #0
 8000c26:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0xbc>
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	f000 80ed 	beq.w	8000e12 <__udivmoddi4+0x28a>
 8000c38:	2100      	movs	r1, #0
 8000c3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c44:	fab3 f183 	clz	r1, r3
 8000c48:	2900      	cmp	r1, #0
 8000c4a:	d149      	bne.n	8000ce0 <__udivmoddi4+0x158>
 8000c4c:	42ab      	cmp	r3, r5
 8000c4e:	d302      	bcc.n	8000c56 <__udivmoddi4+0xce>
 8000c50:	4282      	cmp	r2, r0
 8000c52:	f200 80f8 	bhi.w	8000e46 <__udivmoddi4+0x2be>
 8000c56:	1a84      	subs	r4, r0, r2
 8000c58:	eb65 0203 	sbc.w	r2, r5, r3
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	4617      	mov	r7, r2
 8000c60:	2e00      	cmp	r6, #0
 8000c62:	d0e2      	beq.n	8000c2a <__udivmoddi4+0xa2>
 8000c64:	e9c6 4700 	strd	r4, r7, [r6]
 8000c68:	e7df      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c6a:	b902      	cbnz	r2, 8000c6e <__udivmoddi4+0xe6>
 8000c6c:	deff      	udf	#255	; 0xff
 8000c6e:	fab2 f382 	clz	r3, r2
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f040 8090 	bne.w	8000d98 <__udivmoddi4+0x210>
 8000c78:	1a8a      	subs	r2, r1, r2
 8000c7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c7e:	fa1f fe8c 	uxth.w	lr, ip
 8000c82:	2101      	movs	r1, #1
 8000c84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c88:	fb07 2015 	mls	r0, r7, r5, r2
 8000c8c:	0c22      	lsrs	r2, r4, #16
 8000c8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c92:	fb0e f005 	mul.w	r0, lr, r5
 8000c96:	4290      	cmp	r0, r2
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x124>
 8000c9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x122>
 8000ca4:	4290      	cmp	r0, r2
 8000ca6:	f200 80cb 	bhi.w	8000e40 <__udivmoddi4+0x2b8>
 8000caa:	4645      	mov	r5, r8
 8000cac:	1a12      	subs	r2, r2, r0
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cb4:	fb07 2210 	mls	r2, r7, r0, r2
 8000cb8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc0:	45a6      	cmp	lr, r4
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x14e>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ccc:	d202      	bcs.n	8000cd4 <__udivmoddi4+0x14c>
 8000cce:	45a6      	cmp	lr, r4
 8000cd0:	f200 80bb 	bhi.w	8000e4a <__udivmoddi4+0x2c2>
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	eba4 040e 	sub.w	r4, r4, lr
 8000cda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cde:	e79f      	b.n	8000c20 <__udivmoddi4+0x98>
 8000ce0:	f1c1 0720 	rsb	r7, r1, #32
 8000ce4:	408b      	lsls	r3, r1
 8000ce6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cee:	fa05 f401 	lsl.w	r4, r5, r1
 8000cf2:	fa20 f307 	lsr.w	r3, r0, r7
 8000cf6:	40fd      	lsrs	r5, r7
 8000cf8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cfc:	4323      	orrs	r3, r4
 8000cfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d02:	fa1f fe8c 	uxth.w	lr, ip
 8000d06:	fb09 5518 	mls	r5, r9, r8, r5
 8000d0a:	0c1c      	lsrs	r4, r3, #16
 8000d0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d10:	fb08 f50e 	mul.w	r5, r8, lr
 8000d14:	42a5      	cmp	r5, r4
 8000d16:	fa02 f201 	lsl.w	r2, r2, r1
 8000d1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d1e:	d90b      	bls.n	8000d38 <__udivmoddi4+0x1b0>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d28:	f080 8088 	bcs.w	8000e3c <__udivmoddi4+0x2b4>
 8000d2c:	42a5      	cmp	r5, r4
 8000d2e:	f240 8085 	bls.w	8000e3c <__udivmoddi4+0x2b4>
 8000d32:	f1a8 0802 	sub.w	r8, r8, #2
 8000d36:	4464      	add	r4, ip
 8000d38:	1b64      	subs	r4, r4, r5
 8000d3a:	b29d      	uxth	r5, r3
 8000d3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d40:	fb09 4413 	mls	r4, r9, r3, r4
 8000d44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x1da>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d58:	d26c      	bcs.n	8000e34 <__udivmoddi4+0x2ac>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	d96a      	bls.n	8000e34 <__udivmoddi4+0x2ac>
 8000d5e:	3b02      	subs	r3, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d66:	fba3 9502 	umull	r9, r5, r3, r2
 8000d6a:	eba4 040e 	sub.w	r4, r4, lr
 8000d6e:	42ac      	cmp	r4, r5
 8000d70:	46c8      	mov	r8, r9
 8000d72:	46ae      	mov	lr, r5
 8000d74:	d356      	bcc.n	8000e24 <__udivmoddi4+0x29c>
 8000d76:	d053      	beq.n	8000e20 <__udivmoddi4+0x298>
 8000d78:	b156      	cbz	r6, 8000d90 <__udivmoddi4+0x208>
 8000d7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000d7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000d82:	fa04 f707 	lsl.w	r7, r4, r7
 8000d86:	40ca      	lsrs	r2, r1
 8000d88:	40cc      	lsrs	r4, r1
 8000d8a:	4317      	orrs	r7, r2
 8000d8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000d90:	4618      	mov	r0, r3
 8000d92:	2100      	movs	r1, #0
 8000d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d98:	f1c3 0120 	rsb	r1, r3, #32
 8000d9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da0:	fa20 f201 	lsr.w	r2, r0, r1
 8000da4:	fa25 f101 	lsr.w	r1, r5, r1
 8000da8:	409d      	lsls	r5, r3
 8000daa:	432a      	orrs	r2, r5
 8000dac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db8:	fb07 1510 	mls	r5, r7, r0, r1
 8000dbc:	0c11      	lsrs	r1, r2, #16
 8000dbe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dc2:	fb00 f50e 	mul.w	r5, r0, lr
 8000dc6:	428d      	cmp	r5, r1
 8000dc8:	fa04 f403 	lsl.w	r4, r4, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x258>
 8000dce:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dd6:	d22f      	bcs.n	8000e38 <__udivmoddi4+0x2b0>
 8000dd8:	428d      	cmp	r5, r1
 8000dda:	d92d      	bls.n	8000e38 <__udivmoddi4+0x2b0>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1b49      	subs	r1, r1, r5
 8000de2:	b292      	uxth	r2, r2
 8000de4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000de8:	fb07 1115 	mls	r1, r7, r5, r1
 8000dec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000df0:	fb05 f10e 	mul.w	r1, r5, lr
 8000df4:	4291      	cmp	r1, r2
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x282>
 8000df8:	eb1c 0202 	adds.w	r2, ip, r2
 8000dfc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e00:	d216      	bcs.n	8000e30 <__udivmoddi4+0x2a8>
 8000e02:	4291      	cmp	r1, r2
 8000e04:	d914      	bls.n	8000e30 <__udivmoddi4+0x2a8>
 8000e06:	3d02      	subs	r5, #2
 8000e08:	4462      	add	r2, ip
 8000e0a:	1a52      	subs	r2, r2, r1
 8000e0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e10:	e738      	b.n	8000c84 <__udivmoddi4+0xfc>
 8000e12:	4631      	mov	r1, r6
 8000e14:	4630      	mov	r0, r6
 8000e16:	e708      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000e18:	4639      	mov	r1, r7
 8000e1a:	e6e6      	b.n	8000bea <__udivmoddi4+0x62>
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	e6fb      	b.n	8000c18 <__udivmoddi4+0x90>
 8000e20:	4548      	cmp	r0, r9
 8000e22:	d2a9      	bcs.n	8000d78 <__udivmoddi4+0x1f0>
 8000e24:	ebb9 0802 	subs.w	r8, r9, r2
 8000e28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	e7a3      	b.n	8000d78 <__udivmoddi4+0x1f0>
 8000e30:	4645      	mov	r5, r8
 8000e32:	e7ea      	b.n	8000e0a <__udivmoddi4+0x282>
 8000e34:	462b      	mov	r3, r5
 8000e36:	e794      	b.n	8000d62 <__udivmoddi4+0x1da>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7d1      	b.n	8000de0 <__udivmoddi4+0x258>
 8000e3c:	46d0      	mov	r8, sl
 8000e3e:	e77b      	b.n	8000d38 <__udivmoddi4+0x1b0>
 8000e40:	3d02      	subs	r5, #2
 8000e42:	4462      	add	r2, ip
 8000e44:	e732      	b.n	8000cac <__udivmoddi4+0x124>
 8000e46:	4608      	mov	r0, r1
 8000e48:	e70a      	b.n	8000c60 <__udivmoddi4+0xd8>
 8000e4a:	4464      	add	r4, ip
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	e742      	b.n	8000cd6 <__udivmoddi4+0x14e>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e64:	f023 0218 	bic.w	r2, r3, #24
 8000e68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
}
 8000ea6:	bf00      	nop
 8000ea8:	3714      	adds	r7, #20
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ebc:	1d39      	adds	r1, r7, #4
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <__io_putchar+0x20>)
 8000ec6:	f002 fe27 	bl	8003b18 <HAL_UART_Transmit>
  return ch;
 8000eca:	687b      	ldr	r3, [r7, #4]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000254 	.word	0x20000254

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000edc:	f000 fc32 	bl	8001744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee0:	f000 f830 	bl	8000f44 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ee4:	f000 f87a 	bl	8000fdc <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8000ee8:	f000 f898 	bl	800101c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eec:	f000 f924 	bl	8001138 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ef0:	f000 f8d6 	bl	80010a0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000ef4:	f000 f8ae 	bl	8001054 <MX_RTC_Init>
  MX_RF_Init();
 8000ef8:	f000 f8a4 	bl	8001044 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  //HAL_GPIO_WritePin(GPIOB, green_Pin, 0x01);
  printf("Ready to sleep in 5s\n\r");
 8000efc:	480d      	ldr	r0, [pc, #52]	; (8000f34 <main+0x5c>)
 8000efe:	f004 f8a7 	bl	8005050 <iprintf>
  HAL_Delay(5000);
 8000f02:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f06:	f000 fca3 	bl	8001850 <HAL_Delay>
	//printf("No error\n\r");
   // Error_Handler();
  //}
 // HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);

  HAL_SuspendTick();
 8000f0a:	f000 fcc5 	bl	8001898 <HAL_SuspendTick>
  //HAL_PWR_EnableSleepOnExit();
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000f0e:	2101      	movs	r1, #1
 8000f10:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f14:	f001 f8de 	bl	80020d4 <HAL_PWR_EnterSTOPMode>



  printf("MCU Awake in Main. \n\r");
 8000f18:	4807      	ldr	r0, [pc, #28]	; (8000f38 <main+0x60>)
 8000f1a:	f004 f899 	bl	8005050 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Working\n\r");
 8000f1e:	4807      	ldr	r0, [pc, #28]	; (8000f3c <main+0x64>)
 8000f20:	f004 f896 	bl	8005050 <iprintf>
	  HAL_GPIO_TogglePin(GPIOB, green_Pin);
 8000f24:	2101      	movs	r1, #1
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <main+0x68>)
 8000f28:	f000 ff66 	bl	8001df8 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 8000f2c:	20fa      	movs	r0, #250	; 0xfa
 8000f2e:	f000 fc8f 	bl	8001850 <HAL_Delay>
	  printf("Working\n\r");
 8000f32:	e7f4      	b.n	8000f1e <main+0x46>
 8000f34:	08006fc0 	.word	0x08006fc0
 8000f38:	08006fd8 	.word	0x08006fd8
 8000f3c:	08006ff0 	.word	0x08006ff0
 8000f40:	48000400 	.word	0x48000400

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b098      	sub	sp, #96	; 0x60
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	2244      	movs	r2, #68	; 0x44
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f004 f8d1 	bl	80050fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]
 8000f66:	615a      	str	r2, [r3, #20]
 8000f68:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f6a:	f001 f8a3 	bl	80020b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff ff70 	bl	8000e54 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000f74:	2307      	movs	r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f7c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f88:	2340      	movs	r3, #64	; 0x40
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f90:	f107 031c 	add.w	r3, r7, #28
 8000f94:	4618      	mov	r0, r3
 8000f96:	f001 fc4d 	bl	8002834 <HAL_RCC_OscConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000fa0:	f000 f90e 	bl	80011c0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000fa4:	236f      	movs	r3, #111	; 0x6f
 8000fa6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f001 ff6b 	bl	8002ea0 <HAL_RCC_ClockConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000fd0:	f000 f8f6 	bl	80011c0 <Error_Handler>
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	3760      	adds	r7, #96	; 0x60
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	; 0x30
 8000fe0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2230      	movs	r2, #48	; 0x30
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f004 f886 	bl	80050fa <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8000fee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ff2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8000ff4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000ffe:	2310      	movs	r3, #16
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001002:	463b      	mov	r3, r7
 8001004:	4618      	mov	r0, r3
 8001006:	f002 fb0d 	bl	8003624 <HAL_RCCEx_PeriphCLKConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001010:	f000 f8d6 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001014:	bf00      	nop
 8001016:	3730      	adds	r7, #48	; 0x30
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_IPCC_Init+0x20>)
 8001022:	4a07      	ldr	r2, [pc, #28]	; (8001040 <MX_IPCC_Init+0x24>)
 8001024:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_IPCC_Init+0x20>)
 8001028:	f000 ff24 	bl	8001e74 <HAL_IPCC_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001032:	f000 f8c5 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200001f4 	.word	0x200001f4
 8001040:	58000c00 	.word	0x58000c00

08001044 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_RTC_Init+0x44>)
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <MX_RTC_Init+0x48>)
 800105c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_RTC_Init+0x44>)
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_RTC_Init+0x44>)
 8001066:	227f      	movs	r2, #127	; 0x7f
 8001068:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <MX_RTC_Init+0x44>)
 800106c:	22ff      	movs	r2, #255	; 0xff
 800106e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_RTC_Init+0x44>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <MX_RTC_Init+0x44>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_RTC_Init+0x44>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_RTC_Init+0x44>)
 8001084:	f002 fbc4 	bl	8003810 <HAL_RTC_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800108e:	f000 f897 	bl	80011c0 <Error_Handler>
 // }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000230 	.word	0x20000230
 800109c:	40002800 	.word	0x40002800

080010a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010a4:	4b22      	ldr	r3, [pc, #136]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010a6:	4a23      	ldr	r2, [pc, #140]	; (8001134 <MX_USART1_UART_Init+0x94>)
 80010a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010aa:	4b21      	ldr	r3, [pc, #132]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010be:	4b1c      	ldr	r3, [pc, #112]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010e8:	4811      	ldr	r0, [pc, #68]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010ea:	f002 fcc5 	bl	8003a78 <HAL_UART_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010f4:	f000 f864 	bl	80011c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f8:	2100      	movs	r1, #0
 80010fa:	480d      	ldr	r0, [pc, #52]	; (8001130 <MX_USART1_UART_Init+0x90>)
 80010fc:	f003 f9b6 	bl	800446c <HAL_UARTEx_SetTxFifoThreshold>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001106:	f000 f85b 	bl	80011c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800110a:	2100      	movs	r1, #0
 800110c:	4808      	ldr	r0, [pc, #32]	; (8001130 <MX_USART1_UART_Init+0x90>)
 800110e:	f003 f9eb 	bl	80044e8 <HAL_UARTEx_SetRxFifoThreshold>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001118:	f000 f852 	bl	80011c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <MX_USART1_UART_Init+0x90>)
 800111e:	f003 f96c 	bl	80043fa <HAL_UARTEx_DisableFifoMode>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001128:	f000 f84a 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000254 	.word	0x20000254
 8001134:	40013800 	.word	0x40013800

08001138 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	1d3b      	adds	r3, r7, #4
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114c:	2004      	movs	r0, #4
 800114e:	f7ff fe97 	bl	8000e80 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2001      	movs	r0, #1
 8001154:	f7ff fe94 	bl	8000e80 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001158:	2002      	movs	r0, #2
 800115a:	f7ff fe91 	bl	8000e80 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, green_Pin|red_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2103      	movs	r1, #3
 8001162:	480a      	ldr	r0, [pc, #40]	; (800118c <MX_GPIO_Init+0x54>)
 8001164:	f000 fe30 	bl	8001dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : green_Pin red_Pin */
  GPIO_InitStruct.Pin = green_Pin|red_Pin;
 8001168:	2303      	movs	r3, #3
 800116a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4803      	ldr	r0, [pc, #12]	; (800118c <MX_GPIO_Init+0x54>)
 800117e:	f000 fcbb 	bl	8001af8 <HAL_GPIO_Init>

}
 8001182:	bf00      	nop
 8001184:	3718      	adds	r7, #24
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	48000400 	.word	0x48000400

08001190 <HAL_RTCEx_WakeUpTimerEventCallback>:
		HAL_GPIO_WritePin(GPIOB, red_Pin, 0x00);
		//HAL_PWR_DisableSleepOnExit();
	}
}

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 8001198:	f7ff fed4 	bl	8000f44 <SystemClock_Config>
	HAL_ResumeTick();
 800119c:	f000 fb8c 	bl	80018b8 <HAL_ResumeTick>
	HAL_GPIO_WritePin(GPIOB, green_Pin, 0x01);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2101      	movs	r1, #1
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 80011a6:	f000 fe0f 	bl	8001dc8 <HAL_GPIO_WritePin>
	printf("Awake from RTC\n\r");
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 80011ac:	f003 ff50 	bl	8005050 <iprintf>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	48000400 	.word	0x48000400
 80011bc:	0800701c 	.word	0x0800701c

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <Error_Handler+0x8>

080011ca <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80011ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_AHB2_GRP1_EnableClock>:
{
 80011ec:	b480      	push	{r7}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4313      	orrs	r3, r2
 8001202:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001208:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4013      	ands	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001210:	68fb      	ldr	r3, [r7, #12]
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800121e:	b480      	push	{r7}
 8001220:	b085      	sub	sp, #20
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800122c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4313      	orrs	r3, r2
 8001234:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800123a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4013      	ands	r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001242:	68fb      	ldr	r3, [r7, #12]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800125c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800125e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4313      	orrs	r3, r2
 8001266:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800126c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4013      	ands	r3, r2
 8001272:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001274:	68fb      	ldr	r3, [r7, #12]
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001282:	b480      	push	{r7}
 8001284:	b085      	sub	sp, #20
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800128a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001290:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4313      	orrs	r3, r2
 8001298:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800129a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4013      	ands	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012a6:	68fb      	ldr	r3, [r7, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80012b8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012bc:	f7ff ffaf 	bl	800121e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	202e      	movs	r0, #46	; 0x2e
 80012c6:	f000 fbe2 	bl	8001a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80012ca:	202e      	movs	r0, #46	; 0x2e
 80012cc:	f000 fbf9 	bl	8001ac2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a0d      	ldr	r2, [pc, #52]	; (8001318 <HAL_IPCC_MspInit+0x44>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d113      	bne.n	800130e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80012e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80012ea:	f7ff ff98 	bl	800121e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	202c      	movs	r0, #44	; 0x2c
 80012f4:	f000 fbcb 	bl	8001a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80012f8:	202c      	movs	r0, #44	; 0x2c
 80012fa:	f000 fbe2 	bl	8001ac2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	202d      	movs	r0, #45	; 0x2d
 8001304:	f000 fbc3 	bl	8001a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001308:	202d      	movs	r0, #45	; 0x2d
 800130a:	f000 fbda 	bl	8001ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	58000c00 	.word	0x58000c00

0800131c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	; 0x38
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	2230      	movs	r2, #48	; 0x30
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f003 fee4 	bl	80050fa <memset>
  if(hrtc->Instance==RTC)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a12      	ldr	r2, [pc, #72]	; (8001380 <HAL_RTC_MspInit+0x64>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d11d      	bne.n	8001378 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800133c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001340:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001342:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001348:	f107 0308 	add.w	r3, r7, #8
 800134c:	4618      	mov	r0, r3
 800134e:	f002 f969 	bl	8003624 <HAL_RCCEx_PeriphCLKConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001358:	f7ff ff32 	bl	80011c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800135c:	f7ff ff35 	bl	80011ca <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001360:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001364:	f7ff ff74 	bl	8001250 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	2003      	movs	r0, #3
 800136e:	f000 fb8e 	bl	8001a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001372:	2003      	movs	r0, #3
 8001374:	f000 fba5 	bl	8001ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001378:	bf00      	nop
 800137a:	3738      	adds	r7, #56	; 0x38
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40002800 	.word	0x40002800

08001384 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b094      	sub	sp, #80	; 0x50
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	2230      	movs	r2, #48	; 0x30
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f003 fea8 	bl	80050fa <memset>
  if(huart->Instance==USART1)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a17      	ldr	r2, [pc, #92]	; (800140c <HAL_UART_MspInit+0x88>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d126      	bne.n	8001402 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013b8:	2300      	movs	r3, #0
 80013ba:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 f92f 	bl	8003624 <HAL_RCCEx_PeriphCLKConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80013cc:	f7ff fef8 	bl	80011c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013d0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013d4:	f7ff ff55 	bl	8001282 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d8:	2001      	movs	r0, #1
 80013da:	f7ff ff07 	bl	80011ec <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013f0:	2307      	movs	r3, #7
 80013f2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013f8:	4619      	mov	r1, r3
 80013fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fe:	f000 fb7b 	bl	8001af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3750      	adds	r7, #80	; 0x50
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40013800 	.word	0x40013800

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <NMI_Handler+0x4>

08001416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141a:	e7fe      	b.n	800141a <HardFault_Handler+0x4>

0800141c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <MemManage_Handler+0x4>

08001422 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <UsageFault_Handler+0x4>

0800142e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145c:	f000 f9cc 	bl	80017f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}

08001464 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <RTC_WKUP_IRQHandler+0x10>)
 800146a:	f002 fabf 	bl	80039ec <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000230 	.word	0x20000230

08001478 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <IPCC_C1_RX_IRQHandler+0x10>)
 800147e:	f000 fd79 	bl	8001f74 <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200001f4 	.word	0x200001f4

0800148c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <IPCC_C1_TX_IRQHandler+0x10>)
 8001492:	f000 fd21 	bl	8001ed8 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200001f4 	.word	0x200001f4

080014a0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80014a4:	f000 fcc2 	bl	8001e2c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
	return 1;
 80014b0:	2301      	movs	r3, #1
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <_kill>:

int _kill(int pid, int sig)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014c6:	f003 fe6b 	bl	80051a0 <__errno>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2216      	movs	r2, #22
 80014ce:	601a      	str	r2, [r3, #0]
	return -1;
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <_exit>:

void _exit (int status)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff ffe7 	bl	80014bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80014ee:	e7fe      	b.n	80014ee <_exit+0x12>

080014f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e00a      	b.n	8001518 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001502:	f3af 8000 	nop.w
 8001506:	4601      	mov	r1, r0
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	60ba      	str	r2, [r7, #8]
 800150e:	b2ca      	uxtb	r2, r1
 8001510:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	429a      	cmp	r2, r3
 800151e:	dbf0      	blt.n	8001502 <_read+0x12>
	}

return len;
 8001520:	687b      	ldr	r3, [r7, #4]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	e009      	b.n	8001550 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	60ba      	str	r2, [r7, #8]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fcb5 	bl	8000eb4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	dbf1      	blt.n	800153c <_write+0x12>
	}
	return len;
 8001558:	687b      	ldr	r3, [r7, #4]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_close>:

int _close(int file)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
	return -1;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800158a:	605a      	str	r2, [r3, #4]
	return 0;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_isatty>:

int _isatty(int file)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
	return 1;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
	return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d4:	4a14      	ldr	r2, [pc, #80]	; (8001628 <_sbrk+0x5c>)
 80015d6:	4b15      	ldr	r3, [pc, #84]	; (800162c <_sbrk+0x60>)
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <_sbrk+0x64>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <_sbrk+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d207      	bcs.n	800160c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015fc:	f003 fdd0 	bl	80051a0 <__errno>
 8001600:	4603      	mov	r3, r0
 8001602:	220c      	movs	r2, #12
 8001604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	e009      	b.n	8001620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <_sbrk+0x64>)
 800161c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20003000 	.word	0x20003000
 800162c:	00000400 	.word	0x00000400
 8001630:	200002e4 	.word	0x200002e4
 8001634:	20000438 	.word	0x20000438

08001638 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800163c:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <SystemInit+0x90>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001642:	4a21      	ldr	r2, [pc, #132]	; (80016c8 <SystemInit+0x90>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800164c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800165c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001660:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001664:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <SystemInit+0x94>)
 8001672:	4013      	ands	r3, r2
 8001674:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800167e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001682:	f023 0305 	bic.w	r3, r3, #5
 8001686:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800168a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001696:	f023 0301 	bic.w	r3, r3, #1
 800169a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800169e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a2:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <SystemInit+0x98>)
 80016a4:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ba:	2200      	movs	r2, #0
 80016bc:	619a      	str	r2, [r3, #24]
}
 80016be:	bf00      	nop
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00
 80016cc:	faf6fefb 	.word	0xfaf6fefb
 80016d0:	22041000 	.word	0x22041000

080016d4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80016d4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d8:	3304      	adds	r3, #4

080016da <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016da:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016dc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80016de:	d3f9      	bcc.n	80016d4 <CopyDataInit>
  bx lr
 80016e0:	4770      	bx	lr

080016e2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80016e2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80016e4:	3004      	adds	r0, #4

080016e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80016e6:	4288      	cmp	r0, r1
  bcc FillZerobss
 80016e8:	d3fb      	bcc.n	80016e2 <FillZerobss>
  bx lr
 80016ea:	4770      	bx	lr

080016ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016ec:	480c      	ldr	r0, [pc, #48]	; (8001720 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80016ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016f0:	f7ff ffa2 	bl	8001638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80016f4:	480b      	ldr	r0, [pc, #44]	; (8001724 <LoopForever+0x8>)
 80016f6:	490c      	ldr	r1, [pc, #48]	; (8001728 <LoopForever+0xc>)
 80016f8:	4a0c      	ldr	r2, [pc, #48]	; (800172c <LoopForever+0x10>)
 80016fa:	2300      	movs	r3, #0
 80016fc:	f7ff ffed 	bl	80016da <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001700:	480b      	ldr	r0, [pc, #44]	; (8001730 <LoopForever+0x14>)
 8001702:	490c      	ldr	r1, [pc, #48]	; (8001734 <LoopForever+0x18>)
 8001704:	2300      	movs	r3, #0
 8001706:	f7ff ffee 	bl	80016e6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800170a:	480b      	ldr	r0, [pc, #44]	; (8001738 <LoopForever+0x1c>)
 800170c:	490b      	ldr	r1, [pc, #44]	; (800173c <LoopForever+0x20>)
 800170e:	2300      	movs	r3, #0
 8001710:	f7ff ffe9 	bl	80016e6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001714:	f003 fd4a 	bl	80051ac <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001718:	f7ff fbde 	bl	8000ed8 <main>

0800171c <LoopForever>:

LoopForever:
  b LoopForever
 800171c:	e7fe      	b.n	800171c <LoopForever>
 800171e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001720:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8001724:	20000004 	.word	0x20000004
 8001728:	200001d8 	.word	0x200001d8
 800172c:	0800749c 	.word	0x0800749c
  INIT_BSS _sbss, _ebss
 8001730:	200001d8 	.word	0x200001d8
 8001734:	20000438 	.word	0x20000438
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001738:	20030000 	.word	0x20030000
 800173c:	20030000 	.word	0x20030000

08001740 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC1_IRQHandler>
	...

08001744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <HAL_Init+0x3c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <HAL_Init+0x3c>)
 8001754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001758:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800175a:	2003      	movs	r0, #3
 800175c:	f000 f98c 	bl	8001a78 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001760:	200f      	movs	r0, #15
 8001762:	f000 f80f 	bl	8001784 <HAL_InitTick>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	71fb      	strb	r3, [r7, #7]
 8001770:	e001      	b.n	8001776 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001772:	f7ff fd9f 	bl	80012b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001776:	79fb      	ldrb	r3, [r7, #7]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	58004000 	.word	0x58004000

08001784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_InitTick+0x6c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d024      	beq.n	80017e2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001798:	f001 fd2e 	bl	80031f8 <HAL_RCC_GetHCLKFreq>
 800179c:	4602      	mov	r2, r0
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <HAL_InitTick+0x6c>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	4619      	mov	r1, r3
 80017a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 f994 	bl	8001ade <HAL_SYSTICK_Config>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d10f      	bne.n	80017dc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b0f      	cmp	r3, #15
 80017c0:	d809      	bhi.n	80017d6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c2:	2200      	movs	r2, #0
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	f04f 30ff 	mov.w	r0, #4294967295
 80017ca:	f000 f960 	bl	8001a8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017ce:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <HAL_InitTick+0x70>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	e007      	b.n	80017e6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	73fb      	strb	r3, [r7, #15]
 80017da:	e004      	b.n	80017e6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
 80017e0:	e001      	b.n	80017e6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	2000000c 	.word	0x2000000c
 80017f4:	20000008 	.word	0x20000008

080017f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_IncTick+0x20>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_IncTick+0x24>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a04      	ldr	r2, [pc, #16]	; (800181c <HAL_IncTick+0x24>)
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	2000000c 	.word	0x2000000c
 800181c:	200002e8 	.word	0x200002e8

08001820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_GetTick+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	200002e8 	.word	0x200002e8

08001838 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <HAL_GetTickPrio+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000008 	.word	0x20000008

08001850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001858:	f7ff ffe2 	bl	8001820 <HAL_GetTick>
 800185c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001868:	d005      	beq.n	8001876 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_Delay+0x44>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001876:	bf00      	nop
 8001878:	f7ff ffd2 	bl	8001820 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	429a      	cmp	r2, r3
 8001886:	d8f7      	bhi.n	8001878 <HAL_Delay+0x28>
    {
    }
  }
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	2000000c 	.word	0x2000000c

08001898 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_SuspendTick+0x1c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <HAL_SuspendTick+0x1c>)
 80018a2:	f023 0302 	bic.w	r3, r3, #2
 80018a6:	6013      	str	r3, [r2, #0]
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000e010 	.word	0xe000e010

080018b8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <HAL_ResumeTick+0x1c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_ResumeTick+0x1c>)
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	6013      	str	r3, [r2, #0]
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000e010 	.word	0xe000e010

080018d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <__NVIC_SetPriorityGrouping+0x44>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f4:	4013      	ands	r3, r2
 80018f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190a:	4a04      	ldr	r2, [pc, #16]	; (800191c <__NVIC_SetPriorityGrouping+0x44>)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	60d3      	str	r3, [r2, #12]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <__NVIC_GetPriorityGrouping+0x18>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	f003 0307 	and.w	r3, r3, #7
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	2b00      	cmp	r3, #0
 800194c:	db0b      	blt.n	8001966 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	f003 021f 	and.w	r2, r3, #31
 8001954:	4907      	ldr	r1, [pc, #28]	; (8001974 <__NVIC_EnableIRQ+0x38>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	2001      	movs	r0, #1
 800195e:	fa00 f202 	lsl.w	r2, r0, r2
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000e100 	.word	0xe000e100

08001978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	2b00      	cmp	r3, #0
 800198a:	db0a      	blt.n	80019a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	490c      	ldr	r1, [pc, #48]	; (80019c4 <__NVIC_SetPriority+0x4c>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	0112      	lsls	r2, r2, #4
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	440b      	add	r3, r1
 800199c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a0:	e00a      	b.n	80019b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4908      	ldr	r1, [pc, #32]	; (80019c8 <__NVIC_SetPriority+0x50>)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	3b04      	subs	r3, #4
 80019b0:	0112      	lsls	r2, r2, #4
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	440b      	add	r3, r1
 80019b6:	761a      	strb	r2, [r3, #24]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f1c3 0307 	rsb	r3, r3, #7
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	bf28      	it	cs
 80019ea:	2304      	movcs	r3, #4
 80019ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3304      	adds	r3, #4
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d902      	bls.n	80019fc <NVIC_EncodePriority+0x30>
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3b03      	subs	r3, #3
 80019fa:	e000      	b.n	80019fe <NVIC_EncodePriority+0x32>
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	401a      	ands	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43d9      	mvns	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	4313      	orrs	r3, r2
         );
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3724      	adds	r7, #36	; 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a44:	d301      	bcc.n	8001a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00f      	b.n	8001a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <SysTick_Config+0x40>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a52:	210f      	movs	r1, #15
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f7ff ff8e 	bl	8001978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <SysTick_Config+0x40>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <SysTick_Config+0x40>)
 8001a64:	2207      	movs	r2, #7
 8001a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	e000e010 	.word	0xe000e010

08001a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ff29 	bl	80018d8 <__NVIC_SetPriorityGrouping>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a9c:	f7ff ff40 	bl	8001920 <__NVIC_GetPriorityGrouping>
 8001aa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	6978      	ldr	r0, [r7, #20]
 8001aa8:	f7ff ff90 	bl	80019cc <NVIC_EncodePriority>
 8001aac:	4602      	mov	r2, r0
 8001aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff5f 	bl	8001978 <__NVIC_SetPriority>
}
 8001aba:	bf00      	nop
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff33 	bl	800193c <__NVIC_EnableIRQ>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ffa4 	bl	8001a34 <SysTick_Config>
 8001aec:	4603      	mov	r3, r0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b02:	2300      	movs	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b06:	e146      	b.n	8001d96 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	fa01 f303 	lsl.w	r3, r1, r3
 8001b14:	4013      	ands	r3, r2
 8001b16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 8138 	beq.w	8001d90 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d005      	beq.n	8001b38 <HAL_GPIO_Init+0x40>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d130      	bne.n	8001b9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b6e:	2201      	movs	r2, #1
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	f003 0201 	and.w	r2, r3, #1
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d017      	beq.n	8001bd6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d123      	bne.n	8001c2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	08da      	lsrs	r2, r3, #3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3208      	adds	r2, #8
 8001bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	691a      	ldr	r2, [r3, #16]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	08da      	lsrs	r2, r3, #3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3208      	adds	r2, #8
 8001c24:	6939      	ldr	r1, [r7, #16]
 8001c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	2203      	movs	r2, #3
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0203 	and.w	r2, r3, #3
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 8092 	beq.w	8001d90 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001c6c:	4a51      	ldr	r2, [pc, #324]	; (8001db4 <HAL_GPIO_Init+0x2bc>)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	220f      	movs	r2, #15
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c96:	d013      	beq.n	8001cc0 <HAL_GPIO_Init+0x1c8>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a47      	ldr	r2, [pc, #284]	; (8001db8 <HAL_GPIO_Init+0x2c0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00d      	beq.n	8001cbc <HAL_GPIO_Init+0x1c4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a46      	ldr	r2, [pc, #280]	; (8001dbc <HAL_GPIO_Init+0x2c4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d007      	beq.n	8001cb8 <HAL_GPIO_Init+0x1c0>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a45      	ldr	r2, [pc, #276]	; (8001dc0 <HAL_GPIO_Init+0x2c8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d101      	bne.n	8001cb4 <HAL_GPIO_Init+0x1bc>
 8001cb0:	2304      	movs	r3, #4
 8001cb2:	e006      	b.n	8001cc2 <HAL_GPIO_Init+0x1ca>
 8001cb4:	2307      	movs	r3, #7
 8001cb6:	e004      	b.n	8001cc2 <HAL_GPIO_Init+0x1ca>
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e002      	b.n	8001cc2 <HAL_GPIO_Init+0x1ca>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <HAL_GPIO_Init+0x1ca>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	f002 0203 	and.w	r2, r2, #3
 8001cc8:	0092      	lsls	r2, r2, #2
 8001cca:	4093      	lsls	r3, r2
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cd2:	4938      	ldr	r1, [pc, #224]	; (8001db4 <HAL_GPIO_Init+0x2bc>)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	089b      	lsrs	r3, r3, #2
 8001cd8:	3302      	adds	r3, #2
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ce0:	4b38      	ldr	r3, [pc, #224]	; (8001dc4 <HAL_GPIO_Init+0x2cc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	4013      	ands	r3, r2
 8001cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d04:	4a2f      	ldr	r2, [pc, #188]	; (8001dc4 <HAL_GPIO_Init+0x2cc>)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <HAL_GPIO_Init+0x2cc>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	43db      	mvns	r3, r3
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	4013      	ands	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d2e:	4a25      	ldr	r2, [pc, #148]	; (8001dc4 <HAL_GPIO_Init+0x2cc>)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d34:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <HAL_GPIO_Init+0x2cc>)
 8001d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d5a:	4a1a      	ldr	r2, [pc, #104]	; (8001dc4 <HAL_GPIO_Init+0x2cc>)
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001d62:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <HAL_GPIO_Init+0x2cc>)
 8001d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d88:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <HAL_GPIO_Init+0x2cc>)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	3301      	adds	r3, #1
 8001d94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f47f aeb1 	bne.w	8001b08 <HAL_GPIO_Init+0x10>
  }
}
 8001da6:	bf00      	nop
 8001da8:	bf00      	nop
 8001daa:	371c      	adds	r7, #28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	40010000 	.word	0x40010000
 8001db8:	48000400 	.word	0x48000400
 8001dbc:	48000800 	.word	0x48000800
 8001dc0:	48001000 	.word	0x48001000
 8001dc4:	58000800 	.word	0x58000800

08001dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	807b      	strh	r3, [r7, #2]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dd8:	787b      	ldrb	r3, [r7, #1]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dde:	887a      	ldrh	r2, [r7, #2]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001de4:	e002      	b.n	8001dec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e0a:	887a      	ldrh	r2, [r7, #2]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	041a      	lsls	r2, r3, #16
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	43d9      	mvns	r1, r3
 8001e16:	887b      	ldrh	r3, [r7, #2]
 8001e18:	400b      	ands	r3, r1
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	619a      	str	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_HSEM_IRQHandler+0x30>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <HAL_HSEM_IRQHandler+0x30>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	4906      	ldr	r1, [pc, #24]	; (8001e5c <HAL_HSEM_IRQHandler+0x30>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <HAL_HSEM_IRQHandler+0x30>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f807 	bl	8001e60 <HAL_HSEM_FreeCallback>
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	58001500 	.word	0x58001500

08001e60 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d01e      	beq.n	8001ec4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001e86:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_IPCC_Init+0x60>)
 8001e88:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d102      	bne.n	8001e9c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fa1c 	bl	80012d4 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8001e9c:	68b8      	ldr	r0, [r7, #8]
 8001e9e:	f000 f8f5 	bl	800208c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f8c6 	bl	8002040 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8001ec2:	e001      	b.n	8001ec8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8001ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	58000c00 	.word	0x58000c00

08001ed8 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001ee4:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <HAL_IPCC_TX_IRQHandler+0x98>)
 8001ee6:	60fb      	str	r3, [r7, #12]

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8001ef2:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	041b      	lsls	r3, r3, #16
 8001efa:	43db      	mvns	r3, r3
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	4013      	ands	r3, r2
 8001f00:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001f02:	e02c      	b.n	8001f5e <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_Msk));
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3310      	adds	r3, #16
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d01c      	beq.n	8001f58 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	431a      	orrs	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	3306      	adds	r3, #6
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d009      	beq.n	8001f4e <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	3306      	adds	r3, #6
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	6939      	ldr	r1, [r7, #16]
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4013      	ands	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1cf      	bne.n	8001f04 <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 8001f64:	bf00      	nop
 8001f66:	bf00      	nop
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	58000c00 	.word	0x58000c00

08001f74 <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8001f80:	4b20      	ldr	r3, [pc, #128]	; (8002004 <HAL_IPCC_RX_IRQHandler+0x90>)
 8001f82:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 8001f84:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_IPCC_RX_IRQHandler+0x94>)
 8001f86:	613b      	str	r3, [r7, #16]

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f92:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001f9e:	e029      	b.n	8001ff4 <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_Msk);
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01a      	beq.n	8001fee <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d008      	beq.n	8001fe4 <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	4413      	add	r3, r2
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	69b9      	ldr	r1, [r7, #24]
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69fa      	ldr	r2, [r7, #28]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1d2      	bne.n	8001fa0 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 8001ffa:	bf00      	nop
 8001ffc:	bf00      	nop
 8001ffe:	3720      	adds	r7, #32
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	58000c00 	.word	0x58000c00
 8002008:	58000c10 	.word	0x58000c10

0800200c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	4613      	mov	r3, r2
 8002018:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002026:	b480      	push	{r7}
 8002028:	b085      	sub	sp, #20
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	4613      	mov	r3, r2
 8002032:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	3714      	adds	r7, #20
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	e00f      	b.n	800206e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	4a0b      	ldr	r2, [pc, #44]	; (8002084 <IPCC_SetDefaultCallbacks+0x44>)
 8002058:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3306      	adds	r3, #6
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	4a08      	ldr	r2, [pc, #32]	; (8002088 <IPCC_SetDefaultCallbacks+0x48>)
 8002066:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3301      	adds	r3, #1
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b05      	cmp	r3, #5
 8002072:	d9ec      	bls.n	800204e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	0800200d 	.word	0x0800200d
 8002088:	08002027 	.word	0x08002027

0800208c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80020a0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	223f      	movs	r2, #63	; 0x3f
 80020a6:	609a      	str	r2, [r3, #8]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b8:	4b05      	ldr	r3, [pc, #20]	; (80020d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c2:	6013      	str	r3, [r2, #0]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	58000400 	.word	0x58000400

080020d4 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  
  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80020e6:	d104      	bne.n	80020f2 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 80020e8:	78fb      	ldrb	r3, [r7, #3]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f834 	bl	8002158 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 80020f0:	e003      	b.n	80020fa <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80020f2:	78fb      	ldrb	r3, [r7, #3]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 f805 	bl	8002104 <HAL_PWREx_EnterSTOP0Mode>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a0f      	ldr	r2, [pc, #60]	; (8002150 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002114:	f023 0307 	bic.w	r3, r3, #7
 8002118:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	4a0d      	ldr	r2, [pc, #52]	; (8002154 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002126:	79fb      	ldrb	r3, [r7, #7]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800212c:	bf30      	wfi
 800212e:	e002      	b.n	8002136 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002130:	bf40      	sev
    __WFE();
 8002132:	bf20      	wfe
    __WFE();
 8002134:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002136:	4b07      	ldr	r3, [pc, #28]	; (8002154 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	4a06      	ldr	r2, [pc, #24]	; (8002154 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800213c:	f023 0304 	bic.w	r3, r3, #4
 8002140:	6113      	str	r3, [r2, #16]
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	58000400 	.word	0x58000400
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
    
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 0307 	bic.w	r3, r3, #7
 800216a:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	4a0d      	ldr	r2, [pc, #52]	; (80021ac <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002178:	f043 0304 	orr.w	r3, r3, #4
 800217c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002184:	bf30      	wfi
 8002186:	e002      	b.n	800218e <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002188:	bf40      	sev
    __WFE();
 800218a:	bf20      	wfe
    __WFE();
 800218c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800218e:	4b07      	ldr	r3, [pc, #28]	; (80021ac <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	4a06      	ldr	r2, [pc, #24]	; (80021ac <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002194:	f023 0304 	bic.w	r3, r3, #4
 8002198:	6113      	str	r3, [r2, #16]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	58000400 	.word	0x58000400
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80021b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021c2:	d101      	bne.n	80021c8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e000      	b.n	80021ca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <LL_RCC_HSE_Enable>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80021d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <LL_RCC_HSE_Disable>:
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80021f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002204:	6013      	str	r3, [r2, #0]
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_RCC_HSE_IsReady>:
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002222:	d101      	bne.n	8002228 <LL_RCC_HSE_IsReady+0x18>
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <LL_RCC_HSE_IsReady+0x1a>
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_RCC_HSI_Enable>:
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <LL_RCC_HSI_Disable>:
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002264:	6013      	str	r3, [r2, #0]
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_RCC_HSI_IsReady>:
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002282:	d101      	bne.n	8002288 <LL_RCC_HSI_IsReady+0x18>
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <LL_RCC_HSI_IsReady+0x1a>
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800229c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	061b      	lsls	r3, r3, #24
 80022aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <LL_RCC_LSE_Enable>:
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80022c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_RCC_LSE_Disable>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022f0:	f023 0301 	bic.w	r3, r3, #1
 80022f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_RCC_LSE_EnableBypass>:
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002312:	f043 0304 	orr.w	r3, r3, #4
 8002316:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800231a:	bf00      	nop
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_RCC_LSE_DisableBypass>:
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002330:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <LL_RCC_LSE_IsReady>:
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800234a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800234e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b02      	cmp	r3, #2
 8002358:	d101      	bne.n	800235e <LL_RCC_LSE_IsReady+0x18>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <LL_RCC_LSE_IsReady+0x1a>
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <LL_RCC_LSI1_Enable>:
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800236e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002376:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_RCC_LSI1_Disable>:
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002398:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <LL_RCC_LSI1_IsReady>:
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80023b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d101      	bne.n	80023c6 <LL_RCC_LSI1_IsReady+0x18>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <LL_RCC_LSI1_IsReady+0x1a>
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <LL_RCC_LSI2_Enable>:
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80023d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80023ea:	bf00      	nop
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_RCC_LSI2_Disable>:
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80023f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002404:	f023 0304 	bic.w	r3, r3, #4
 8002408:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <LL_RCC_LSI2_IsReady>:
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800241a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800241e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b08      	cmp	r3, #8
 8002428:	d101      	bne.n	800242e <LL_RCC_LSI2_IsReady+0x18>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <LL_RCC_LSI2_IsReady+0x1a>
 800242e:	2300      	movs	r3, #0
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <LL_RCC_LSI2_SetTrimming>:
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800244a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_RCC_MSI_Enable>:
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800246c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6013      	str	r3, [r2, #0]
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <LL_RCC_MSI_Disable>:
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800248a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002494:	f023 0301 	bic.w	r3, r3, #1
 8002498:	6013      	str	r3, [r2, #0]
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <LL_RCC_MSI_IsReady>:
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80024a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d101      	bne.n	80024ba <LL_RCC_MSI_IsReady+0x16>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <LL_RCC_MSI_IsReady+0x18>
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <LL_RCC_MSI_SetRange>:
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80024ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4313      	orrs	r3, r2
 80024e0:	600b      	str	r3, [r1, #0]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <LL_RCC_MSI_GetRange>:
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80024f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024fe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2bb0      	cmp	r3, #176	; 0xb0
 8002504:	d901      	bls.n	800250a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002506:	23b0      	movs	r3, #176	; 0xb0
 8002508:	607b      	str	r3, [r7, #4]
  return msiRange;
 800250a:	687b      	ldr	r3, [r7, #4]
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002520:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <LL_RCC_SetSysClkSource>:
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800254a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f023 0203 	bic.w	r2, r3, #3
 8002554:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <LL_RCC_GetSysClkSource>:
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800256e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 030c 	and.w	r3, r3, #12
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <LL_RCC_SetAHBPrescaler>:
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800258a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002594:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4313      	orrs	r3, r2
 800259c:	608b      	str	r3, [r1, #8]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <LL_C2_RCC_SetAHBPrescaler>:
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80025b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <LL_RCC_SetAHB4Prescaler>:
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80025de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025e6:	f023 020f 	bic.w	r2, r3, #15
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	091b      	lsrs	r3, r3, #4
 80025ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_RCC_SetAPB1Prescaler>:
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800260c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002616:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4313      	orrs	r3, r2
 800261e:	608b      	str	r3, [r1, #8]
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <LL_RCC_SetAPB2Prescaler>:
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800263e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4313      	orrs	r3, r2
 8002646:	608b      	str	r3, [r1, #8]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <LL_RCC_GetAHBPrescaler>:
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002658:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_RCC_GetAHB4Prescaler>:
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002674:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800267e:	4618      	mov	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <LL_RCC_GetAPB1Prescaler>:
{
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800268c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002696:	4618      	mov	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <LL_RCC_GetAPB2Prescaler>:
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80026a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80026bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ca:	6013      	str	r3, [r2, #0]
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80026d6:	b480      	push	{r7}
 80026d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80026da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026e8:	6013      	str	r3, [r2, #0]
}
 80026ea:	bf00      	nop
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80026f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002706:	d101      	bne.n	800270c <LL_RCC_PLL_IsReady+0x18>
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <LL_RCC_PLL_IsReady+0x1a>
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800271c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	0a1b      	lsrs	r3, r3, #8
 8002724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800274e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0303 	and.w	r3, r3, #3
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr

0800277a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800277a:	b480      	push	{r7}
 800277c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800277e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278c:	d101      	bne.n	8002792 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80027a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027b2:	d101      	bne.n	80027b8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80027c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80027d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d8:	d101      	bne.n	80027de <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80027ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027fc:	d101      	bne.n	8002802 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002820:	d101      	bne.n	8002826 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
	...

08002834 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002834:	b590      	push	{r4, r7, lr}
 8002836:	b08d      	sub	sp, #52	; 0x34
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e324      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0320 	and.w	r3, r3, #32
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 808d 	beq.w	800296e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002854:	f7ff fe89 	bl	800256a <LL_RCC_GetSysClkSource>
 8002858:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800285a:	f7ff ff82 	bl	8002762 <LL_RCC_PLL_GetMainSource>
 800285e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_RCC_OscConfig+0x3e>
 8002866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002868:	2b0c      	cmp	r3, #12
 800286a:	d147      	bne.n	80028fc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	2b01      	cmp	r3, #1
 8002870:	d144      	bne.n	80028fc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e308      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002882:	f7ff fe34 	bl	80024ee <LL_RCC_MSI_GetRange>
 8002886:	4603      	mov	r3, r0
 8002888:	429c      	cmp	r4, r3
 800288a:	d914      	bls.n	80028b6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fcf1 	bl	8003278 <RCC_SetFlashLatencyFromMSIRange>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e2f7      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fe0e 	bl	80024c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fe32 	bl	8002518 <LL_RCC_MSI_SetCalibTrimming>
 80028b4:	e013      	b.n	80028de <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7ff fe03 	bl	80024c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fe27 	bl	8002518 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fcd2 	bl	8003278 <RCC_SetFlashLatencyFromMSIRange>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e2d8      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80028de:	f000 fc8b 	bl	80031f8 <HAL_RCC_GetHCLKFreq>
 80028e2:	4603      	mov	r3, r0
 80028e4:	4aa4      	ldr	r2, [pc, #656]	; (8002b78 <HAL_RCC_OscConfig+0x344>)
 80028e6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028e8:	4ba4      	ldr	r3, [pc, #656]	; (8002b7c <HAL_RCC_OscConfig+0x348>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fe ff49 	bl	8001784 <HAL_InitTick>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d039      	beq.n	800296c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e2c9      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01e      	beq.n	8002942 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002904:	f7ff fdb0 	bl	8002468 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002908:	f7fe ff8a 	bl	8001820 <HAL_GetTick>
 800290c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002910:	f7fe ff86 	bl	8001820 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e2b6      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002922:	f7ff fdbf 	bl	80024a4 <LL_RCC_MSI_IsReady>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f1      	beq.n	8002910 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fdc8 	bl	80024c6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fdec 	bl	8002518 <LL_RCC_MSI_SetCalibTrimming>
 8002940:	e015      	b.n	800296e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002942:	f7ff fda0 	bl	8002486 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002946:	f7fe ff6b 	bl	8001820 <HAL_GetTick>
 800294a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800294e:	f7fe ff67 	bl	8001820 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e297      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002960:	f7ff fda0 	bl	80024a4 <LL_RCC_MSI_IsReady>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f1      	bne.n	800294e <HAL_RCC_OscConfig+0x11a>
 800296a:	e000      	b.n	800296e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800296c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d047      	beq.n	8002a0a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297a:	f7ff fdf6 	bl	800256a <LL_RCC_GetSysClkSource>
 800297e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002980:	f7ff feef 	bl	8002762 <LL_RCC_PLL_GetMainSource>
 8002984:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	2b08      	cmp	r3, #8
 800298a:	d005      	beq.n	8002998 <HAL_RCC_OscConfig+0x164>
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	2b0c      	cmp	r3, #12
 8002990:	d108      	bne.n	80029a4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	2b03      	cmp	r3, #3
 8002996:	d105      	bne.n	80029a4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d134      	bne.n	8002a0a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e275      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ac:	d102      	bne.n	80029b4 <HAL_RCC_OscConfig+0x180>
 80029ae:	f7ff fc11 	bl	80021d4 <LL_RCC_HSE_Enable>
 80029b2:	e001      	b.n	80029b8 <HAL_RCC_OscConfig+0x184>
 80029b4:	f7ff fc1d 	bl	80021f2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d012      	beq.n	80029e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c0:	f7fe ff2e 	bl	8001820 <HAL_GetTick>
 80029c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c8:	f7fe ff2a 	bl	8001820 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e25a      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 80029da:	f7ff fc19 	bl	8002210 <LL_RCC_HSE_IsReady>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f1      	beq.n	80029c8 <HAL_RCC_OscConfig+0x194>
 80029e4:	e011      	b.n	8002a0a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e6:	f7fe ff1b 	bl	8001820 <HAL_GetTick>
 80029ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ee:	f7fe ff17 	bl	8001820 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b64      	cmp	r3, #100	; 0x64
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e247      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002a00:	f7ff fc06 	bl	8002210 <LL_RCC_HSE_IsReady>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f1      	bne.n	80029ee <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d04c      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a16:	f7ff fda8 	bl	800256a <LL_RCC_GetSysClkSource>
 8002a1a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a1c:	f7ff fea1 	bl	8002762 <LL_RCC_PLL_GetMainSource>
 8002a20:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_OscConfig+0x200>
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2b0c      	cmp	r3, #12
 8002a2c:	d10e      	bne.n	8002a4c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d10b      	bne.n	8002a4c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e227      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fc25 	bl	8002294 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002a4a:	e031      	b.n	8002ab0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d019      	beq.n	8002a88 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a54:	f7ff fbee 	bl	8002234 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7fe fee2 	bl	8001820 <HAL_GetTick>
 8002a5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a60:	f7fe fede 	bl	8001820 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e20e      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002a72:	f7ff fbfd 	bl	8002270 <LL_RCC_HSI_IsReady>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f1      	beq.n	8002a60 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fc07 	bl	8002294 <LL_RCC_HSI_SetCalibTrimming>
 8002a86:	e013      	b.n	8002ab0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a88:	f7ff fbe3 	bl	8002252 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fec8 	bl	8001820 <HAL_GetTick>
 8002a90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a94:	f7fe fec4 	bl	8001820 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e1f4      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002aa6:	f7ff fbe3 	bl	8002270 <LL_RCC_HSI_IsReady>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f1      	bne.n	8002a94 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d106      	bne.n	8002aca <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80a3 	beq.w	8002c10 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d076      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d046      	beq.n	8002b6c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002ade:	f7ff fc66 	bl	80023ae <LL_RCC_LSI1_IsReady>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d113      	bne.n	8002b10 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002ae8:	f7ff fc3f 	bl	800236a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aec:	f7fe fe98 	bl	8001820 <HAL_GetTick>
 8002af0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002af4:	f7fe fe94 	bl	8001820 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e1c4      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002b06:	f7ff fc52 	bl	80023ae <LL_RCC_LSI1_IsReady>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f1      	beq.n	8002af4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002b10:	f7ff fc5f 	bl	80023d2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe fe84 	bl	8001820 <HAL_GetTick>
 8002b18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002b1c:	f7fe fe80 	bl	8001820 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e1b0      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002b2e:	f7ff fc72 	bl	8002416 <LL_RCC_LSI2_IsReady>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f1      	beq.n	8002b1c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fc7c 	bl	800243a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002b42:	f7ff fc23 	bl	800238c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7fe fe6b 	bl	8001820 <HAL_GetTick>
 8002b4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002b4e:	f7fe fe67 	bl	8001820 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e197      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002b60:	f7ff fc25 	bl	80023ae <LL_RCC_LSI1_IsReady>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f1      	bne.n	8002b4e <HAL_RCC_OscConfig+0x31a>
 8002b6a:	e051      	b.n	8002c10 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002b6c:	f7ff fbfd 	bl	800236a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b70:	f7fe fe56 	bl	8001820 <HAL_GetTick>
 8002b74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002b76:	e00c      	b.n	8002b92 <HAL_RCC_OscConfig+0x35e>
 8002b78:	20000004 	.word	0x20000004
 8002b7c:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002b80:	f7fe fe4e 	bl	8001820 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e17e      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002b92:	f7ff fc0c 	bl	80023ae <LL_RCC_LSI1_IsReady>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0f1      	beq.n	8002b80 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002b9c:	f7ff fc2a 	bl	80023f4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002ba2:	f7fe fe3d 	bl	8001820 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e16d      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002bb4:	f7ff fc2f 	bl	8002416 <LL_RCC_LSI2_IsReady>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f1      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x36e>
 8002bbe:	e027      	b.n	8002c10 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002bc0:	f7ff fc18 	bl	80023f4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7fe fe2c 	bl	8001820 <HAL_GetTick>
 8002bc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002bcc:	f7fe fe28 	bl	8001820 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e158      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002bde:	f7ff fc1a 	bl	8002416 <LL_RCC_LSI2_IsReady>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f1      	bne.n	8002bcc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002be8:	f7ff fbd0 	bl	800238c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bec:	f7fe fe18 	bl	8001820 <HAL_GetTick>
 8002bf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002bf4:	f7fe fe14 	bl	8001820 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e144      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002c06:	f7ff fbd2 	bl	80023ae <LL_RCC_LSI1_IsReady>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1f1      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d05b      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1c:	4b9e      	ldr	r3, [pc, #632]	; (8002e98 <HAL_RCC_OscConfig+0x664>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d114      	bne.n	8002c52 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002c28:	f7ff fa44 	bl	80020b4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c2c:	f7fe fdf8 	bl	8001820 <HAL_GetTick>
 8002c30:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c34:	f7fe fdf4 	bl	8001820 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e124      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c46:	4b94      	ldr	r3, [pc, #592]	; (8002e98 <HAL_RCC_OscConfig+0x664>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d102      	bne.n	8002c60 <HAL_RCC_OscConfig+0x42c>
 8002c5a:	f7ff fb30 	bl	80022be <LL_RCC_LSE_Enable>
 8002c5e:	e00c      	b.n	8002c7a <HAL_RCC_OscConfig+0x446>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d104      	bne.n	8002c72 <HAL_RCC_OscConfig+0x43e>
 8002c68:	f7ff fb4b 	bl	8002302 <LL_RCC_LSE_EnableBypass>
 8002c6c:	f7ff fb27 	bl	80022be <LL_RCC_LSE_Enable>
 8002c70:	e003      	b.n	8002c7a <HAL_RCC_OscConfig+0x446>
 8002c72:	f7ff fb35 	bl	80022e0 <LL_RCC_LSE_Disable>
 8002c76:	f7ff fb55 	bl	8002324 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d014      	beq.n	8002cac <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c82:	f7fe fdcd 	bl	8001820 <HAL_GetTick>
 8002c86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8a:	f7fe fdc9 	bl	8001820 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e0f7      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002ca0:	f7ff fb51 	bl	8002346 <LL_RCC_LSE_IsReady>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0ef      	beq.n	8002c8a <HAL_RCC_OscConfig+0x456>
 8002caa:	e013      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cac:	f7fe fdb8 	bl	8001820 <HAL_GetTick>
 8002cb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb4:	f7fe fdb4 	bl	8001820 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e0e2      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002cca:	f7ff fb3c 	bl	8002346 <LL_RCC_LSE_IsReady>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1ef      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80d8 	beq.w	8002e8e <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cde:	f7ff fc44 	bl	800256a <LL_RCC_GetSysClkSource>
 8002ce2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	f040 80a6 	bne.w	8002e42 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f003 0203 	and.w	r2, r3, #3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d123      	bne.n	8002d4c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d11c      	bne.n	8002d4c <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d114      	bne.n	8002d4c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d10d      	bne.n	8002d4c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d106      	bne.n	8002d4c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d054      	beq.n	8002df6 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	2b0c      	cmp	r3, #12
 8002d50:	d04f      	beq.n	8002df2 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d52:	f7ff fcc0 	bl	80026d6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d56:	f7fe fd63 	bl	8001820 <HAL_GetTick>
 8002d5a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d5c:	e008      	b.n	8002d70 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5e:	f7fe fd5f 	bl	8001820 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d901      	bls.n	8002d70 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e08f      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1ef      	bne.n	8002d5e <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	4b45      	ldr	r3, [pc, #276]	; (8002e9c <HAL_RCC_OscConfig+0x668>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d90:	4311      	orrs	r1, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d96:	0212      	lsls	r2, r2, #8
 8002d98:	4311      	orrs	r1, r2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d9e:	4311      	orrs	r1, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002da4:	4311      	orrs	r1, r2
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002daa:	430a      	orrs	r2, r1
 8002dac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002db4:	f7ff fc80 	bl	80026b8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dc8:	f7fe fd2a 	bl	8001820 <HAL_GetTick>
 8002dcc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd0:	f7fe fd26 	bl	8001820 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e056      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ef      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df0:	e04d      	b.n	8002e8e <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e04c      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d144      	bne.n	8002e8e <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e04:	f7ff fc58 	bl	80026b8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e18:	f7fe fd02 	bl	8001820 <HAL_GetTick>
 8002e1c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e20:	f7fe fcfe 	bl	8001820 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e02e      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0ef      	beq.n	8002e20 <HAL_RCC_OscConfig+0x5ec>
 8002e40:	e025      	b.n	8002e8e <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	2b0c      	cmp	r3, #12
 8002e46:	d020      	beq.n	8002e8a <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e48:	f7ff fc45 	bl	80026d6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fce8 	bl	8001820 <HAL_GetTick>
 8002e50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e54:	f7fe fce4 	bl	8001820 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e014      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1ef      	bne.n	8002e54 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8002e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e82:	f023 0303 	bic.w	r3, r3, #3
 8002e86:	60d3      	str	r3, [r2, #12]
 8002e88:	e001      	b.n	8002e8e <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3734      	adds	r7, #52	; 0x34
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd90      	pop	{r4, r7, pc}
 8002e98:	58000400 	.word	0x58000400
 8002e9c:	11c1808c 	.word	0x11c1808c

08002ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e12d      	b.n	8003110 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002eb4:	4b98      	ldr	r3, [pc, #608]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d91b      	bls.n	8002efa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ec2:	4b95      	ldr	r3, [pc, #596]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 0207 	bic.w	r2, r3, #7
 8002eca:	4993      	ldr	r1, [pc, #588]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed2:	f7fe fca5 	bl	8001820 <HAL_GetTick>
 8002ed6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002eda:	f7fe fca1 	bl	8001820 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e111      	b.n	8003110 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eec:	4b8a      	ldr	r3, [pc, #552]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d1ef      	bne.n	8002eda <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d016      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fb39 	bl	8002582 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f10:	f7fe fc86 	bl	8001820 <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f18:	f7fe fc82 	bl	8001820 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e0f2      	b.n	8003110 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002f2a:	f7ff fc26 	bl	800277a <LL_RCC_IsActiveFlag_HPRE>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f1      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d016      	beq.n	8002f6e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fb30 	bl	80025aa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f4a:	f7fe fc69 	bl	8001820 <HAL_GetTick>
 8002f4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f52:	f7fe fc65 	bl	8001820 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0d5      	b.n	8003110 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002f64:	f7ff fc1b 	bl	800279e <LL_RCC_IsActiveFlag_C2HPRE>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f1      	beq.n	8002f52 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d016      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fb29 	bl	80025d6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002f84:	f7fe fc4c 	bl	8001820 <HAL_GetTick>
 8002f88:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002f8c:	f7fe fc48 	bl	8001820 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e0b8      	b.n	8003110 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002f9e:	f7ff fc11 	bl	80027c4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0f1      	beq.n	8002f8c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d016      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff fb23 	bl	8002604 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002fbe:	f7fe fc2f 	bl	8001820 <HAL_GetTick>
 8002fc2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002fc6:	f7fe fc2b 	bl	8001820 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e09b      	b.n	8003110 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002fd8:	f7ff fc07 	bl	80027ea <LL_RCC_IsActiveFlag_PPRE1>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f1      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d017      	beq.n	800301e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fb19 	bl	800262c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ffa:	f7fe fc11 	bl	8001820 <HAL_GetTick>
 8002ffe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003002:	f7fe fc0d 	bl	8001820 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e07d      	b.n	8003110 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003014:	f7ff fbfb 	bl	800280e <LL_RCC_IsActiveFlag_PPRE2>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0f1      	beq.n	8003002 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d043      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d106      	bne.n	8003040 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003032:	f7ff f8ed 	bl	8002210 <LL_RCC_HSE_IsReady>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d11e      	bne.n	800307a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e067      	b.n	8003110 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d106      	bne.n	8003056 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003048:	f7ff fb54 	bl	80026f4 <LL_RCC_PLL_IsReady>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d113      	bne.n	800307a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e05c      	b.n	8003110 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800305e:	f7ff fa21 	bl	80024a4 <LL_RCC_MSI_IsReady>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d108      	bne.n	800307a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e051      	b.n	8003110 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800306c:	f7ff f900 	bl	8002270 <LL_RCC_HSI_IsReady>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e04a      	b.n	8003110 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fa5f 	bl	8002542 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003084:	f7fe fbcc 	bl	8001820 <HAL_GetTick>
 8003088:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308a:	e00a      	b.n	80030a2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800308c:	f7fe fbc8 	bl	8001820 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	; 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e036      	b.n	8003110 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a2:	f7ff fa62 	bl	800256a <LL_RCC_GetSysClkSource>
 80030a6:	4602      	mov	r2, r0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d1ec      	bne.n	800308c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030b2:	4b19      	ldr	r3, [pc, #100]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d21b      	bcs.n	80030f8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c0:	4b15      	ldr	r3, [pc, #84]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f023 0207 	bic.w	r2, r3, #7
 80030c8:	4913      	ldr	r1, [pc, #76]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030d0:	f7fe fba6 	bl	8001820 <HAL_GetTick>
 80030d4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80030d8:	f7fe fba2 	bl	8001820 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e012      	b.n	8003110 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_RCC_ClockConfig+0x278>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d1ef      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80030f8:	f000 f87e 	bl	80031f8 <HAL_RCC_GetHCLKFreq>
 80030fc:	4603      	mov	r3, r0
 80030fe:	4a07      	ldr	r2, [pc, #28]	; (800311c <HAL_RCC_ClockConfig+0x27c>)
 8003100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003102:	f7fe fb99 	bl	8001838 <HAL_GetTickPrio>
 8003106:	4603      	mov	r3, r0
 8003108:	4618      	mov	r0, r3
 800310a:	f7fe fb3b 	bl	8001784 <HAL_InitTick>
 800310e:	4603      	mov	r3, r0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	58004000 	.word	0x58004000
 800311c:	20000004 	.word	0x20000004

08003120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003126:	f7ff fa20 	bl	800256a <LL_RCC_GetSysClkSource>
 800312a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10a      	bne.n	8003148 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003132:	f7ff f9dc 	bl	80024ee <LL_RCC_MSI_GetRange>
 8003136:	4603      	mov	r3, r0
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	4a2b      	ldr	r2, [pc, #172]	; (80031ec <HAL_RCC_GetSysClockFreq+0xcc>)
 8003140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	e04b      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b04      	cmp	r3, #4
 800314c:	d102      	bne.n	8003154 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800314e:	4b28      	ldr	r3, [pc, #160]	; (80031f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	e045      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b08      	cmp	r3, #8
 8003158:	d10a      	bne.n	8003170 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800315a:	f7ff f829 	bl	80021b0 <LL_RCC_HSE_IsEnabledDiv2>
 800315e:	4603      	mov	r3, r0
 8003160:	2b01      	cmp	r3, #1
 8003162:	d102      	bne.n	800316a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003164:	4b22      	ldr	r3, [pc, #136]	; (80031f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	e03a      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800316a:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800316c:	60fb      	str	r3, [r7, #12]
 800316e:	e037      	b.n	80031e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003170:	f7ff faf7 	bl	8002762 <LL_RCC_PLL_GetMainSource>
 8003174:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b02      	cmp	r3, #2
 800317a:	d003      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x64>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2b03      	cmp	r3, #3
 8003180:	d003      	beq.n	800318a <HAL_RCC_GetSysClockFreq+0x6a>
 8003182:	e00d      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003184:	4b1a      	ldr	r3, [pc, #104]	; (80031f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003186:	60bb      	str	r3, [r7, #8]
        break;
 8003188:	e015      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800318a:	f7ff f811 	bl	80021b0 <LL_RCC_HSE_IsEnabledDiv2>
 800318e:	4603      	mov	r3, r0
 8003190:	2b01      	cmp	r3, #1
 8003192:	d102      	bne.n	800319a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003194:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003196:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003198:	e00d      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800319a:	4b16      	ldr	r3, [pc, #88]	; (80031f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800319c:	60bb      	str	r3, [r7, #8]
        break;
 800319e:	e00a      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80031a0:	f7ff f9a5 	bl	80024ee <LL_RCC_MSI_GetRange>
 80031a4:	4603      	mov	r3, r0
 80031a6:	091b      	lsrs	r3, r3, #4
 80031a8:	f003 030f 	and.w	r3, r3, #15
 80031ac:	4a0f      	ldr	r2, [pc, #60]	; (80031ec <HAL_RCC_GetSysClockFreq+0xcc>)
 80031ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b2:	60bb      	str	r3, [r7, #8]
        break;
 80031b4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80031b6:	f7ff faaf 	bl	8002718 <LL_RCC_PLL_GetN>
 80031ba:	4602      	mov	r2, r0
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	fb03 f402 	mul.w	r4, r3, r2
 80031c2:	f7ff fac2 	bl	800274a <LL_RCC_PLL_GetDivider>
 80031c6:	4603      	mov	r3, r0
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	3301      	adds	r3, #1
 80031cc:	fbb4 f4f3 	udiv	r4, r4, r3
 80031d0:	f7ff faaf 	bl	8002732 <LL_RCC_PLL_GetR>
 80031d4:	4603      	mov	r3, r0
 80031d6:	0f5b      	lsrs	r3, r3, #29
 80031d8:	3301      	adds	r3, #1
 80031da:	fbb4 f3f3 	udiv	r3, r4, r3
 80031de:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80031e0:	68fb      	ldr	r3, [r7, #12]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd90      	pop	{r4, r7, pc}
 80031ea:	bf00      	nop
 80031ec:	080070b0 	.word	0x080070b0
 80031f0:	00f42400 	.word	0x00f42400
 80031f4:	01e84800 	.word	0x01e84800

080031f8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f8:	b598      	push	{r3, r4, r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80031fc:	f7ff ff90 	bl	8003120 <HAL_RCC_GetSysClockFreq>
 8003200:	4604      	mov	r4, r0
 8003202:	f7ff fa27 	bl	8002654 <LL_RCC_GetAHBPrescaler>
 8003206:	4603      	mov	r3, r0
 8003208:	091b      	lsrs	r3, r3, #4
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	4a03      	ldr	r2, [pc, #12]	; (800321c <HAL_RCC_GetHCLKFreq+0x24>)
 8003210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003214:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd98      	pop	{r3, r4, r7, pc}
 800321c:	08007050 	.word	0x08007050

08003220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003220:	b598      	push	{r3, r4, r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003224:	f7ff ffe8 	bl	80031f8 <HAL_RCC_GetHCLKFreq>
 8003228:	4604      	mov	r4, r0
 800322a:	f7ff fa2d 	bl	8002688 <LL_RCC_GetAPB1Prescaler>
 800322e:	4603      	mov	r3, r0
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	4a04      	ldr	r2, [pc, #16]	; (8003248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003244:	4618      	mov	r0, r3
 8003246:	bd98      	pop	{r3, r4, r7, pc}
 8003248:	08007090 	.word	0x08007090

0800324c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800324c:	b598      	push	{r3, r4, r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003250:	f7ff ffd2 	bl	80031f8 <HAL_RCC_GetHCLKFreq>
 8003254:	4604      	mov	r4, r0
 8003256:	f7ff fa23 	bl	80026a0 <LL_RCC_GetAPB2Prescaler>
 800325a:	4603      	mov	r3, r0
 800325c:	0adb      	lsrs	r3, r3, #11
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	4a04      	ldr	r2, [pc, #16]	; (8003274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd98      	pop	{r3, r4, r7, pc}
 8003274:	08007090 	.word	0x08007090

08003278 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2bb0      	cmp	r3, #176	; 0xb0
 8003284:	d903      	bls.n	800328e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003286:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	60fb      	str	r3, [r7, #12]
 800328c:	e007      	b.n	800329e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	091b      	lsrs	r3, r3, #4
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	4a10      	ldr	r2, [pc, #64]	; (80032d8 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800329e:	f7ff f9e5 	bl	800266c <LL_RCC_GetAHB4Prescaler>
 80032a2:	4603      	mov	r3, r0
 80032a4:	091b      	lsrs	r3, r3, #4
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	4a0c      	ldr	r2, [pc, #48]	; (80032dc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80032ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80032bc:	fba2 2303 	umull	r2, r3, r2, r3
 80032c0:	0c9b      	lsrs	r3, r3, #18
 80032c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 f80c 	bl	80032e4 <RCC_SetFlashLatency>
 80032cc:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	080070b0 	.word	0x080070b0
 80032dc:	08007050 	.word	0x08007050
 80032e0:	431bde83 	.word	0x431bde83

080032e4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80032e4:	b590      	push	{r4, r7, lr}
 80032e6:	b08f      	sub	sp, #60	; 0x3c
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80032ee:	4b24      	ldr	r3, [pc, #144]	; (8003380 <RCC_SetFlashLatency+0x9c>)
 80032f0:	f107 041c 	add.w	r4, r7, #28
 80032f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80032fa:	4b22      	ldr	r3, [pc, #136]	; (8003384 <RCC_SetFlashLatency+0xa0>)
 80032fc:	f107 040c 	add.w	r4, r7, #12
 8003300:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003302:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003306:	2300      	movs	r3, #0
 8003308:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800330a:	2300      	movs	r3, #0
 800330c:	633b      	str	r3, [r7, #48]	; 0x30
 800330e:	e013      	b.n	8003338 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	3338      	adds	r3, #56	; 0x38
 8003316:	443b      	add	r3, r7
 8003318:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	429a      	cmp	r2, r3
 8003320:	d807      	bhi.n	8003332 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8003322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	3338      	adds	r3, #56	; 0x38
 8003328:	443b      	add	r3, r7
 800332a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800332e:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8003330:	e005      	b.n	800333e <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	3301      	adds	r3, #1
 8003336:	633b      	str	r3, [r7, #48]	; 0x30
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	2b03      	cmp	r3, #3
 800333c:	d9e8      	bls.n	8003310 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <RCC_SetFlashLatency+0xa4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f023 0207 	bic.w	r2, r3, #7
 8003346:	4910      	ldr	r1, [pc, #64]	; (8003388 <RCC_SetFlashLatency+0xa4>)
 8003348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334a:	4313      	orrs	r3, r2
 800334c:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800334e:	f7fe fa67 	bl	8001820 <HAL_GetTick>
 8003352:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003354:	e008      	b.n	8003368 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003356:	f7fe fa63 	bl	8001820 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e007      	b.n	8003378 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003368:	4b07      	ldr	r3, [pc, #28]	; (8003388 <RCC_SetFlashLatency+0xa4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003372:	429a      	cmp	r2, r3
 8003374:	d1ef      	bne.n	8003356 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	373c      	adds	r7, #60	; 0x3c
 800337c:	46bd      	mov	sp, r7
 800337e:	bd90      	pop	{r4, r7, pc}
 8003380:	08007030 	.word	0x08007030
 8003384:	08007040 	.word	0x08007040
 8003388:	58004000 	.word	0x58004000

0800338c <LL_RCC_LSE_IsEnabled>:
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <LL_RCC_LSE_IsEnabled+0x18>
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <LL_RCC_LSE_IsEnabled+0x1a>
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <LL_RCC_LSE_IsReady>:
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80033b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d101      	bne.n	80033c8 <LL_RCC_LSE_IsReady+0x18>
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <LL_RCC_LSE_IsReady+0x1a>
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <LL_RCC_SetRFWKPClockSource>:
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80033dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <LL_RCC_SetSMPSClockSource>:
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	f023 0203 	bic.w	r2, r3, #3
 8003412:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4313      	orrs	r3, r2
 800341a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <LL_RCC_SetSMPSPrescaler>:
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800343a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4313      	orrs	r3, r2
 8003442:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <LL_RCC_SetUSARTClockSource>:
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	f023 0203 	bic.w	r2, r3, #3
 8003464:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <LL_RCC_SetLPUARTClockSource>:
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <LL_RCC_SetI2CClockSource>:
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80034b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	091b      	lsrs	r3, r3, #4
 80034bc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80034c0:	43db      	mvns	r3, r3
 80034c2:	401a      	ands	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80034cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <LL_RCC_SetLPTIMClockSource>:
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80034ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	0c1b      	lsrs	r3, r3, #16
 80034f6:	041b      	lsls	r3, r3, #16
 80034f8:	43db      	mvns	r3, r3
 80034fa:	401a      	ands	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	041b      	lsls	r3, r3, #16
 8003500:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <LL_RCC_SetRNGClockSource>:
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800351e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800352a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <LL_RCC_SetCLK48ClockSource>:
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800354a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003556:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <LL_RCC_SetADCClockSource>:
{
 800356e:	b480      	push	{r7}
 8003570:	b083      	sub	sp, #12
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003582:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <LL_RCC_SetRTCClockSource>:
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80035a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <LL_RCC_GetRTCClockSource>:
{
 80035c6:	b480      	push	{r7}
 80035c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80035ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <LL_RCC_ForceBackupDomainReset>:
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80035e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003602:	b480      	push	{r7}
 8003604:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800361a:	bf00      	nop
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b088      	sub	sp, #32
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800362c:	2300      	movs	r3, #0
 800362e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003630:	2300      	movs	r3, #0
 8003632:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800363c:	2b00      	cmp	r3, #0
 800363e:	d046      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003640:	f7ff ffc1 	bl	80035c6 <LL_RCC_GetRTCClockSource>
 8003644:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	429a      	cmp	r2, r3
 800364e:	d03c      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003650:	f7fe fd30 	bl	80020b4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d105      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff ff9b 	bl	800359a <LL_RCC_SetRTCClockSource>
 8003664:	e02e      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003670:	f7ff ffb6 	bl	80035e0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003674:	f7ff ffc5 	bl	8003602 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003690:	f7ff fe7c 	bl	800338c <LL_RCC_LSE_IsEnabled>
 8003694:	4603      	mov	r3, r0
 8003696:	2b01      	cmp	r3, #1
 8003698:	d114      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800369a:	f7fe f8c1 	bl	8001820 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80036a0:	e00b      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f7fe f8bd 	bl	8001820 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d902      	bls.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	77fb      	strb	r3, [r7, #31]
              break;
 80036b8:	e004      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 80036ba:	f7ff fe79 	bl	80033b0 <LL_RCC_LSE_IsReady>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d1ee      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80036c4:	7ffb      	ldrb	r3, [r7, #31]
 80036c6:	77bb      	strb	r3, [r7, #30]
 80036c8:	e001      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ca:	7ffb      	ldrb	r3, [r7, #31]
 80036cc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d004      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff feb6 	bl	8003450 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0302 	and.w	r3, r3, #2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d004      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7ff fec1 	bl	800347c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	2b00      	cmp	r3, #0
 8003704:	d004      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff fee9 	bl	80034e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0320 	and.w	r3, r3, #32
 8003718:	2b00      	cmp	r3, #0
 800371a:	d004      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fede 	bl	80034e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0304 	and.w	r3, r3, #4
 800372e:	2b00      	cmp	r3, #0
 8003730:	d004      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff feb6 	bl	80034a8 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003744:	2b00      	cmp	r3, #0
 8003746:	d02b      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003750:	d008      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800375a:	d003      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d105      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff fed4 	bl	8003516 <LL_RCC_SetRNGClockSource>
 800376e:	e00a      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	2000      	movs	r0, #0
 800377c:	f7ff fecb 	bl	8003516 <LL_RCC_SetRNGClockSource>
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7ff fede 	bl	8003542 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800378e:	d107      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800379a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800379e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d011      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff fedc 	bl	800356e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037be:	d107      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80037c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ce:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d004      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fdf7 	bl	80033d4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d009      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff fe16 	bl	8003428 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff fdfd 	bl	8003400 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003806:	7fbb      	ldrb	r3, [r7, #30]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3720      	adds	r7, #32
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e090      	b.n	8003944 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fd fd70 	bl	800131c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	22ca      	movs	r2, #202	; 0xca
 800384a:	625a      	str	r2, [r3, #36]	; 0x24
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2253      	movs	r2, #83	; 0x53
 8003852:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f89f 	bl	8003998 <RTC_EnterInitMode>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d009      	beq.n	8003874 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	22ff      	movs	r2, #255	; 0xff
 8003866:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2204      	movs	r2, #4
 800386c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e067      	b.n	8003944 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003886:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6899      	ldr	r1, [r3, #8]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	68d2      	ldr	r2, [r2, #12]
 80038ae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6919      	ldr	r1, [r3, #16]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	041a      	lsls	r2, r3, #16
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038d2:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0202 	bic.w	r2, r2, #2
 80038e2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69da      	ldr	r2, [r3, #28]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d113      	bne.n	8003932 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f81e 	bl	800394c <HAL_RTC_WaitForSynchro>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00d      	beq.n	8003932 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	22ff      	movs	r2, #255	; 0xff
 800391c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2204      	movs	r2, #4
 8003922:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e008      	b.n	8003944 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	22ff      	movs	r2, #255	; 0xff
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8003942:	2300      	movs	r3, #0
  }
}
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003962:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003964:	f7fd ff5c 	bl	8001820 <HAL_GetTick>
 8003968:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800396a:	e009      	b.n	8003980 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800396c:	f7fd ff58 	bl	8001820 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800397a:	d901      	bls.n	8003980 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e007      	b.n	8003990 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b00      	cmp	r3, #0
 800398c:	d0ee      	beq.n	800396c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d119      	bne.n	80039e2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f04f 32ff 	mov.w	r2, #4294967295
 80039b6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80039b8:	f7fd ff32 	bl	8001820 <HAL_GetTick>
 80039bc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80039be:	e009      	b.n	80039d4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80039c0:	f7fd ff2e 	bl	8001820 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039ce:	d901      	bls.n	80039d4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e007      	b.n	80039e4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0ee      	beq.n	80039c0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fd fbc4 	bl	8001190 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003a18:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003a1c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003a20:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	58000800 	.word	0x58000800

08003a38 <LL_RCC_GetUSARTClockSource>:
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4013      	ands	r3, r2
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <LL_RCC_GetLPUARTClockSource>:
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4013      	ands	r3, r2
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e042      	b.n	8003b10 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d106      	bne.n	8003aa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7fd fc71 	bl	8001384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2224      	movs	r2, #36	; 0x24
 8003aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f022 0201 	bic.w	r2, r2, #1
 8003ab8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f8c2 	bl	8003c44 <UART_SetConfig>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e022      	b.n	8003b10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fadc 	bl	8004090 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ae6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003af6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0201 	orr.w	r2, r2, #1
 8003b06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fb63 	bl	80041d4 <UART_CheckIdleState>
 8003b0e:	4603      	mov	r3, r0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	; 0x28
 8003b1c:	af02      	add	r7, sp, #8
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	4613      	mov	r3, r2
 8003b26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2e:	2b20      	cmp	r3, #32
 8003b30:	f040 8083 	bne.w	8003c3a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d002      	beq.n	8003b40 <HAL_UART_Transmit+0x28>
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e07b      	b.n	8003c3c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_UART_Transmit+0x3a>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e074      	b.n	8003c3c <HAL_UART_Transmit+0x124>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2221      	movs	r2, #33	; 0x21
 8003b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b6a:	f7fd fe59 	bl	8001820 <HAL_GetTick>
 8003b6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	88fa      	ldrh	r2, [r7, #6]
 8003b74:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	88fa      	ldrh	r2, [r7, #6]
 8003b7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b88:	d108      	bne.n	8003b9c <HAL_UART_Transmit+0x84>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d104      	bne.n	8003b9c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	e003      	b.n	8003ba4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003bac:	e02c      	b.n	8003c08 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2180      	movs	r1, #128	; 0x80
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 fb56 	bl	800426a <UART_WaitOnFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e039      	b.n	8003c3c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10b      	bne.n	8003be6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bdc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	3302      	adds	r3, #2
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	e007      	b.n	8003bf6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	781a      	ldrb	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1cc      	bne.n	8003bae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	2140      	movs	r1, #64	; 0x40
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 fb23 	bl	800426a <UART_WaitOnFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e006      	b.n	8003c3c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e000      	b.n	8003c3c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
  }
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3720      	adds	r7, #32
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c48:	b08c      	sub	sp, #48	; 0x30
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4baf      	ldr	r3, [pc, #700]	; (8003f30 <UART_SetConfig+0x2ec>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4aa4      	ldr	r2, [pc, #656]	; (8003f34 <UART_SetConfig+0x2f0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d004      	beq.n	8003cb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cac:	4313      	orrs	r3, r2
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003cba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	f023 010f 	bic.w	r1, r3, #15
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a95      	ldr	r2, [pc, #596]	; (8003f38 <UART_SetConfig+0x2f4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d125      	bne.n	8003d34 <UART_SetConfig+0xf0>
 8003ce8:	2003      	movs	r0, #3
 8003cea:	f7ff fea5 	bl	8003a38 <LL_RCC_GetUSARTClockSource>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b03      	cmp	r3, #3
 8003cf2:	d81b      	bhi.n	8003d2c <UART_SetConfig+0xe8>
 8003cf4:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <UART_SetConfig+0xb8>)
 8003cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfa:	bf00      	nop
 8003cfc:	08003d0d 	.word	0x08003d0d
 8003d00:	08003d1d 	.word	0x08003d1d
 8003d04:	08003d15 	.word	0x08003d15
 8003d08:	08003d25 	.word	0x08003d25
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d12:	e042      	b.n	8003d9a <UART_SetConfig+0x156>
 8003d14:	2302      	movs	r3, #2
 8003d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1a:	e03e      	b.n	8003d9a <UART_SetConfig+0x156>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d22:	e03a      	b.n	8003d9a <UART_SetConfig+0x156>
 8003d24:	2308      	movs	r3, #8
 8003d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d2a:	e036      	b.n	8003d9a <UART_SetConfig+0x156>
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d32:	e032      	b.n	8003d9a <UART_SetConfig+0x156>
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a7e      	ldr	r2, [pc, #504]	; (8003f34 <UART_SetConfig+0x2f0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d12a      	bne.n	8003d94 <UART_SetConfig+0x150>
 8003d3e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003d42:	f7ff fe89 	bl	8003a58 <LL_RCC_GetLPUARTClockSource>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d4c:	d01a      	beq.n	8003d84 <UART_SetConfig+0x140>
 8003d4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d52:	d81b      	bhi.n	8003d8c <UART_SetConfig+0x148>
 8003d54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d58:	d00c      	beq.n	8003d74 <UART_SetConfig+0x130>
 8003d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5e:	d815      	bhi.n	8003d8c <UART_SetConfig+0x148>
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <UART_SetConfig+0x128>
 8003d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d68:	d008      	beq.n	8003d7c <UART_SetConfig+0x138>
 8003d6a:	e00f      	b.n	8003d8c <UART_SetConfig+0x148>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d72:	e012      	b.n	8003d9a <UART_SetConfig+0x156>
 8003d74:	2302      	movs	r3, #2
 8003d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d7a:	e00e      	b.n	8003d9a <UART_SetConfig+0x156>
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d82:	e00a      	b.n	8003d9a <UART_SetConfig+0x156>
 8003d84:	2308      	movs	r3, #8
 8003d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d8a:	e006      	b.n	8003d9a <UART_SetConfig+0x156>
 8003d8c:	2310      	movs	r3, #16
 8003d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d92:	e002      	b.n	8003d9a <UART_SetConfig+0x156>
 8003d94:	2310      	movs	r3, #16
 8003d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a65      	ldr	r2, [pc, #404]	; (8003f34 <UART_SetConfig+0x2f0>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	f040 8097 	bne.w	8003ed4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003da6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d823      	bhi.n	8003df6 <UART_SetConfig+0x1b2>
 8003dae:	a201      	add	r2, pc, #4	; (adr r2, 8003db4 <UART_SetConfig+0x170>)
 8003db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db4:	08003dd9 	.word	0x08003dd9
 8003db8:	08003df7 	.word	0x08003df7
 8003dbc:	08003de1 	.word	0x08003de1
 8003dc0:	08003df7 	.word	0x08003df7
 8003dc4:	08003de7 	.word	0x08003de7
 8003dc8:	08003df7 	.word	0x08003df7
 8003dcc:	08003df7 	.word	0x08003df7
 8003dd0:	08003df7 	.word	0x08003df7
 8003dd4:	08003def 	.word	0x08003def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dd8:	f7ff fa22 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 8003ddc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003dde:	e010      	b.n	8003e02 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003de0:	4b56      	ldr	r3, [pc, #344]	; (8003f3c <UART_SetConfig+0x2f8>)
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003de4:	e00d      	b.n	8003e02 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003de6:	f7ff f99b 	bl	8003120 <HAL_RCC_GetSysClockFreq>
 8003dea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003dec:	e009      	b.n	8003e02 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003df4:	e005      	b.n	8003e02 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 812a 	beq.w	800405e <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	4a4c      	ldr	r2, [pc, #304]	; (8003f40 <UART_SetConfig+0x2fc>)
 8003e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e14:	461a      	mov	r2, r3
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	4413      	add	r3, r2
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d305      	bcc.n	8003e3a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d903      	bls.n	8003e42 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e40:	e10d      	b.n	800405e <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e44:	2200      	movs	r2, #0
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	60fa      	str	r2, [r7, #12]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	4a3c      	ldr	r2, [pc, #240]	; (8003f40 <UART_SetConfig+0x2fc>)
 8003e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2200      	movs	r2, #0
 8003e58:	603b      	str	r3, [r7, #0]
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e64:	f7fc fe78 	bl	8000b58 <__aeabi_uldivmod>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	4619      	mov	r1, r3
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	f04f 0300 	mov.w	r3, #0
 8003e78:	020b      	lsls	r3, r1, #8
 8003e7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e7e:	0202      	lsls	r2, r0, #8
 8003e80:	6979      	ldr	r1, [r7, #20]
 8003e82:	6849      	ldr	r1, [r1, #4]
 8003e84:	0849      	lsrs	r1, r1, #1
 8003e86:	2000      	movs	r0, #0
 8003e88:	460c      	mov	r4, r1
 8003e8a:	4605      	mov	r5, r0
 8003e8c:	eb12 0804 	adds.w	r8, r2, r4
 8003e90:	eb43 0905 	adc.w	r9, r3, r5
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	469a      	mov	sl, r3
 8003e9c:	4693      	mov	fp, r2
 8003e9e:	4652      	mov	r2, sl
 8003ea0:	465b      	mov	r3, fp
 8003ea2:	4640      	mov	r0, r8
 8003ea4:	4649      	mov	r1, r9
 8003ea6:	f7fc fe57 	bl	8000b58 <__aeabi_uldivmod>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	4613      	mov	r3, r2
 8003eb0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eb8:	d308      	bcc.n	8003ecc <UART_SetConfig+0x288>
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ec0:	d204      	bcs.n	8003ecc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6a3a      	ldr	r2, [r7, #32]
 8003ec8:	60da      	str	r2, [r3, #12]
 8003eca:	e0c8      	b.n	800405e <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ed2:	e0c4      	b.n	800405e <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003edc:	d16d      	bne.n	8003fba <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003ede:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	2b07      	cmp	r3, #7
 8003ee6:	d82d      	bhi.n	8003f44 <UART_SetConfig+0x300>
 8003ee8:	a201      	add	r2, pc, #4	; (adr r2, 8003ef0 <UART_SetConfig+0x2ac>)
 8003eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eee:	bf00      	nop
 8003ef0:	08003f11 	.word	0x08003f11
 8003ef4:	08003f19 	.word	0x08003f19
 8003ef8:	08003f45 	.word	0x08003f45
 8003efc:	08003f1f 	.word	0x08003f1f
 8003f00:	08003f45 	.word	0x08003f45
 8003f04:	08003f45 	.word	0x08003f45
 8003f08:	08003f45 	.word	0x08003f45
 8003f0c:	08003f27 	.word	0x08003f27
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f10:	f7ff f99c 	bl	800324c <HAL_RCC_GetPCLK2Freq>
 8003f14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f16:	e01b      	b.n	8003f50 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f18:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <UART_SetConfig+0x2f8>)
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f1c:	e018      	b.n	8003f50 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f1e:	f7ff f8ff 	bl	8003120 <HAL_RCC_GetSysClockFreq>
 8003f22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f24:	e014      	b.n	8003f50 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f2c:	e010      	b.n	8003f50 <UART_SetConfig+0x30c>
 8003f2e:	bf00      	nop
 8003f30:	cfff69f3 	.word	0xcfff69f3
 8003f34:	40008000 	.word	0x40008000
 8003f38:	40013800 	.word	0x40013800
 8003f3c:	00f42400 	.word	0x00f42400
 8003f40:	080070f0 	.word	0x080070f0
      default:
        pclk = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 8083 	beq.w	800405e <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	4a4a      	ldr	r2, [pc, #296]	; (8004088 <UART_SetConfig+0x444>)
 8003f5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f62:	461a      	mov	r2, r3
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f6a:	005a      	lsls	r2, r3, #1
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	085b      	lsrs	r3, r3, #1
 8003f72:	441a      	add	r2, r3
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	2b0f      	cmp	r3, #15
 8003f82:	d916      	bls.n	8003fb2 <UART_SetConfig+0x36e>
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8a:	d212      	bcs.n	8003fb2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	f023 030f 	bic.w	r3, r3, #15
 8003f94:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	f003 0307 	and.w	r3, r3, #7
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	8bfb      	ldrh	r3, [r7, #30]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	8bfa      	ldrh	r2, [r7, #30]
 8003fae:	60da      	str	r2, [r3, #12]
 8003fb0:	e055      	b.n	800405e <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003fb8:	e051      	b.n	800405e <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	2b07      	cmp	r3, #7
 8003fc2:	d822      	bhi.n	800400a <UART_SetConfig+0x3c6>
 8003fc4:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <UART_SetConfig+0x388>)
 8003fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fca:	bf00      	nop
 8003fcc:	08003fed 	.word	0x08003fed
 8003fd0:	08003ff5 	.word	0x08003ff5
 8003fd4:	0800400b 	.word	0x0800400b
 8003fd8:	08003ffb 	.word	0x08003ffb
 8003fdc:	0800400b 	.word	0x0800400b
 8003fe0:	0800400b 	.word	0x0800400b
 8003fe4:	0800400b 	.word	0x0800400b
 8003fe8:	08004003 	.word	0x08004003
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fec:	f7ff f92e 	bl	800324c <HAL_RCC_GetPCLK2Freq>
 8003ff0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ff2:	e010      	b.n	8004016 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ff4:	4b25      	ldr	r3, [pc, #148]	; (800408c <UART_SetConfig+0x448>)
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ff8:	e00d      	b.n	8004016 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ffa:	f7ff f891 	bl	8003120 <HAL_RCC_GetSysClockFreq>
 8003ffe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004000:	e009      	b.n	8004016 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004008:	e005      	b.n	8004016 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004014:	bf00      	nop
    }

    if (pclk != 0U)
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	2b00      	cmp	r3, #0
 800401a:	d020      	beq.n	800405e <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	4a19      	ldr	r2, [pc, #100]	; (8004088 <UART_SetConfig+0x444>)
 8004022:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004026:	461a      	mov	r2, r3
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	fbb3 f2f2 	udiv	r2, r3, r2
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	085b      	lsrs	r3, r3, #1
 8004034:	441a      	add	r2, r3
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	fbb2 f3f3 	udiv	r3, r2, r3
 800403e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	2b0f      	cmp	r3, #15
 8004044:	d908      	bls.n	8004058 <UART_SetConfig+0x414>
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800404c:	d204      	bcs.n	8004058 <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	6a3a      	ldr	r2, [r7, #32]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	e002      	b.n	800405e <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2201      	movs	r2, #1
 8004062:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2201      	movs	r2, #1
 800406a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2200      	movs	r2, #0
 8004072:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2200      	movs	r2, #0
 8004078:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800407a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800407e:	4618      	mov	r0, r3
 8004080:	3730      	adds	r7, #48	; 0x30
 8004082:	46bd      	mov	sp, r7
 8004084:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004088:	080070f0 	.word	0x080070f0
 800408c:	00f42400 	.word	0x00f42400

08004090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01a      	beq.n	80041a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800418e:	d10a      	bne.n	80041a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	605a      	str	r2, [r3, #4]
  }
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af02      	add	r7, sp, #8
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041e4:	f7fd fb1c 	bl	8001820 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d10e      	bne.n	8004216 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f82f 	bl	800426a <UART_WaitOnFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e025      	b.n	8004262 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b04      	cmp	r3, #4
 8004222:	d10e      	bne.n	8004242 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f819 	bl	800426a <UART_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e00f      	b.n	8004262 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b09c      	sub	sp, #112	; 0x70
 800426e:	af00      	add	r7, sp, #0
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	603b      	str	r3, [r7, #0]
 8004276:	4613      	mov	r3, r2
 8004278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800427a:	e0a9      	b.n	80043d0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800427e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004282:	f000 80a5 	beq.w	80043d0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004286:	f7fd facb 	bl	8001820 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004292:	429a      	cmp	r2, r3
 8004294:	d302      	bcc.n	800429c <UART_WaitOnFlagUntilTimeout+0x32>
 8004296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004298:	2b00      	cmp	r3, #0
 800429a:	d140      	bne.n	800431e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a4:	e853 3f00 	ldrex	r3, [r3]
 80042a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042b0:	667b      	str	r3, [r7, #100]	; 0x64
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e6      	bne.n	800429c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3308      	adds	r3, #8
 80042d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	663b      	str	r3, [r7, #96]	; 0x60
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3308      	adds	r3, #8
 80042ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80042f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042f6:	e841 2300 	strex	r3, r2, [r1]
 80042fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1e5      	bne.n	80042ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2220      	movs	r2, #32
 8004306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2220      	movs	r2, #32
 800430e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e069      	b.n	80043f2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d051      	beq.n	80043d0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800433a:	d149      	bne.n	80043d0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004344:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800435a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004364:	637b      	str	r3, [r7, #52]	; 0x34
 8004366:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800436a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e6      	bne.n	8004346 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3308      	adds	r3, #8
 800437e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	e853 3f00 	ldrex	r3, [r3]
 8004386:	613b      	str	r3, [r7, #16]
   return(result);
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f023 0301 	bic.w	r3, r3, #1
 800438e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3308      	adds	r3, #8
 8004396:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004398:	623a      	str	r2, [r7, #32]
 800439a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439c:	69f9      	ldr	r1, [r7, #28]
 800439e:	6a3a      	ldr	r2, [r7, #32]
 80043a0:	e841 2300 	strex	r3, r2, [r1]
 80043a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e5      	bne.n	8004378 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e010      	b.n	80043f2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69da      	ldr	r2, [r3, #28]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	4013      	ands	r3, r2
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	429a      	cmp	r2, r3
 80043de:	bf0c      	ite	eq
 80043e0:	2301      	moveq	r3, #1
 80043e2:	2300      	movne	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	f43f af46 	beq.w	800427c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3770      	adds	r7, #112	; 0x70
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b085      	sub	sp, #20
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_UARTEx_DisableFifoMode+0x16>
 800440c:	2302      	movs	r3, #2
 800440e:	e027      	b.n	8004460 <HAL_UARTEx_DisableFifoMode+0x66>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2224      	movs	r2, #36	; 0x24
 800441c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f022 0201 	bic.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800443e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004480:	2302      	movs	r3, #2
 8004482:	e02d      	b.n	80044e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2224      	movs	r2, #36	; 0x24
 8004490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0201 	bic.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f84f 	bl	8004564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e02d      	b.n	800455c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2224      	movs	r2, #36	; 0x24
 800450c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f022 0201 	bic.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	430a      	orrs	r2, r1
 800453a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f811 	bl	8004564 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2220      	movs	r2, #32
 800454e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004570:	2b00      	cmp	r3, #0
 8004572:	d108      	bne.n	8004586 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004584:	e031      	b.n	80045ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004586:	2308      	movs	r3, #8
 8004588:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800458a:	2308      	movs	r3, #8
 800458c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	0e5b      	lsrs	r3, r3, #25
 8004596:	b2db      	uxtb	r3, r3
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	0f5b      	lsrs	r3, r3, #29
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045ae:	7bbb      	ldrb	r3, [r7, #14]
 80045b0:	7b3a      	ldrb	r2, [r7, #12]
 80045b2:	4911      	ldr	r1, [pc, #68]	; (80045f8 <UARTEx_SetNbDataToProcess+0x94>)
 80045b4:	5c8a      	ldrb	r2, [r1, r2]
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80045ba:	7b3a      	ldrb	r2, [r7, #12]
 80045bc:	490f      	ldr	r1, [pc, #60]	; (80045fc <UARTEx_SetNbDataToProcess+0x98>)
 80045be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	7b7a      	ldrb	r2, [r7, #13]
 80045d0:	4909      	ldr	r1, [pc, #36]	; (80045f8 <UARTEx_SetNbDataToProcess+0x94>)
 80045d2:	5c8a      	ldrb	r2, [r1, r2]
 80045d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80045d8:	7b7a      	ldrb	r2, [r7, #13]
 80045da:	4908      	ldr	r1, [pc, #32]	; (80045fc <UARTEx_SetNbDataToProcess+0x98>)
 80045dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80045de:	fb93 f3f2 	sdiv	r3, r3, r2
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	08007108 	.word	0x08007108
 80045fc:	08007110 	.word	0x08007110

08004600 <__cvt>:
 8004600:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004604:	ec55 4b10 	vmov	r4, r5, d0
 8004608:	2d00      	cmp	r5, #0
 800460a:	460e      	mov	r6, r1
 800460c:	4619      	mov	r1, r3
 800460e:	462b      	mov	r3, r5
 8004610:	bfbb      	ittet	lt
 8004612:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004616:	461d      	movlt	r5, r3
 8004618:	2300      	movge	r3, #0
 800461a:	232d      	movlt	r3, #45	; 0x2d
 800461c:	700b      	strb	r3, [r1, #0]
 800461e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004620:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004624:	4691      	mov	r9, r2
 8004626:	f023 0820 	bic.w	r8, r3, #32
 800462a:	bfbc      	itt	lt
 800462c:	4622      	movlt	r2, r4
 800462e:	4614      	movlt	r4, r2
 8004630:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004634:	d005      	beq.n	8004642 <__cvt+0x42>
 8004636:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800463a:	d100      	bne.n	800463e <__cvt+0x3e>
 800463c:	3601      	adds	r6, #1
 800463e:	2102      	movs	r1, #2
 8004640:	e000      	b.n	8004644 <__cvt+0x44>
 8004642:	2103      	movs	r1, #3
 8004644:	ab03      	add	r3, sp, #12
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	ab02      	add	r3, sp, #8
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	ec45 4b10 	vmov	d0, r4, r5
 8004650:	4653      	mov	r3, sl
 8004652:	4632      	mov	r2, r6
 8004654:	f000 fe5c 	bl	8005310 <_dtoa_r>
 8004658:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800465c:	4607      	mov	r7, r0
 800465e:	d102      	bne.n	8004666 <__cvt+0x66>
 8004660:	f019 0f01 	tst.w	r9, #1
 8004664:	d022      	beq.n	80046ac <__cvt+0xac>
 8004666:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800466a:	eb07 0906 	add.w	r9, r7, r6
 800466e:	d110      	bne.n	8004692 <__cvt+0x92>
 8004670:	783b      	ldrb	r3, [r7, #0]
 8004672:	2b30      	cmp	r3, #48	; 0x30
 8004674:	d10a      	bne.n	800468c <__cvt+0x8c>
 8004676:	2200      	movs	r2, #0
 8004678:	2300      	movs	r3, #0
 800467a:	4620      	mov	r0, r4
 800467c:	4629      	mov	r1, r5
 800467e:	f7fc f9fb 	bl	8000a78 <__aeabi_dcmpeq>
 8004682:	b918      	cbnz	r0, 800468c <__cvt+0x8c>
 8004684:	f1c6 0601 	rsb	r6, r6, #1
 8004688:	f8ca 6000 	str.w	r6, [sl]
 800468c:	f8da 3000 	ldr.w	r3, [sl]
 8004690:	4499      	add	r9, r3
 8004692:	2200      	movs	r2, #0
 8004694:	2300      	movs	r3, #0
 8004696:	4620      	mov	r0, r4
 8004698:	4629      	mov	r1, r5
 800469a:	f7fc f9ed 	bl	8000a78 <__aeabi_dcmpeq>
 800469e:	b108      	cbz	r0, 80046a4 <__cvt+0xa4>
 80046a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80046a4:	2230      	movs	r2, #48	; 0x30
 80046a6:	9b03      	ldr	r3, [sp, #12]
 80046a8:	454b      	cmp	r3, r9
 80046aa:	d307      	bcc.n	80046bc <__cvt+0xbc>
 80046ac:	9b03      	ldr	r3, [sp, #12]
 80046ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046b0:	1bdb      	subs	r3, r3, r7
 80046b2:	4638      	mov	r0, r7
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	b004      	add	sp, #16
 80046b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046bc:	1c59      	adds	r1, r3, #1
 80046be:	9103      	str	r1, [sp, #12]
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	e7f0      	b.n	80046a6 <__cvt+0xa6>

080046c4 <__exponent>:
 80046c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046c6:	4603      	mov	r3, r0
 80046c8:	2900      	cmp	r1, #0
 80046ca:	bfb8      	it	lt
 80046cc:	4249      	neglt	r1, r1
 80046ce:	f803 2b02 	strb.w	r2, [r3], #2
 80046d2:	bfb4      	ite	lt
 80046d4:	222d      	movlt	r2, #45	; 0x2d
 80046d6:	222b      	movge	r2, #43	; 0x2b
 80046d8:	2909      	cmp	r1, #9
 80046da:	7042      	strb	r2, [r0, #1]
 80046dc:	dd2a      	ble.n	8004734 <__exponent+0x70>
 80046de:	f10d 0207 	add.w	r2, sp, #7
 80046e2:	4617      	mov	r7, r2
 80046e4:	260a      	movs	r6, #10
 80046e6:	4694      	mov	ip, r2
 80046e8:	fb91 f5f6 	sdiv	r5, r1, r6
 80046ec:	fb06 1415 	mls	r4, r6, r5, r1
 80046f0:	3430      	adds	r4, #48	; 0x30
 80046f2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80046f6:	460c      	mov	r4, r1
 80046f8:	2c63      	cmp	r4, #99	; 0x63
 80046fa:	f102 32ff 	add.w	r2, r2, #4294967295
 80046fe:	4629      	mov	r1, r5
 8004700:	dcf1      	bgt.n	80046e6 <__exponent+0x22>
 8004702:	3130      	adds	r1, #48	; 0x30
 8004704:	f1ac 0402 	sub.w	r4, ip, #2
 8004708:	f802 1c01 	strb.w	r1, [r2, #-1]
 800470c:	1c41      	adds	r1, r0, #1
 800470e:	4622      	mov	r2, r4
 8004710:	42ba      	cmp	r2, r7
 8004712:	d30a      	bcc.n	800472a <__exponent+0x66>
 8004714:	f10d 0209 	add.w	r2, sp, #9
 8004718:	eba2 020c 	sub.w	r2, r2, ip
 800471c:	42bc      	cmp	r4, r7
 800471e:	bf88      	it	hi
 8004720:	2200      	movhi	r2, #0
 8004722:	4413      	add	r3, r2
 8004724:	1a18      	subs	r0, r3, r0
 8004726:	b003      	add	sp, #12
 8004728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800472a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800472e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004732:	e7ed      	b.n	8004710 <__exponent+0x4c>
 8004734:	2330      	movs	r3, #48	; 0x30
 8004736:	3130      	adds	r1, #48	; 0x30
 8004738:	7083      	strb	r3, [r0, #2]
 800473a:	70c1      	strb	r1, [r0, #3]
 800473c:	1d03      	adds	r3, r0, #4
 800473e:	e7f1      	b.n	8004724 <__exponent+0x60>

08004740 <_printf_float>:
 8004740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004744:	ed2d 8b02 	vpush	{d8}
 8004748:	b08d      	sub	sp, #52	; 0x34
 800474a:	460c      	mov	r4, r1
 800474c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004750:	4616      	mov	r6, r2
 8004752:	461f      	mov	r7, r3
 8004754:	4605      	mov	r5, r0
 8004756:	f000 fcd9 	bl	800510c <_localeconv_r>
 800475a:	f8d0 a000 	ldr.w	sl, [r0]
 800475e:	4650      	mov	r0, sl
 8004760:	f7fb fd5e 	bl	8000220 <strlen>
 8004764:	2300      	movs	r3, #0
 8004766:	930a      	str	r3, [sp, #40]	; 0x28
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	9305      	str	r3, [sp, #20]
 800476c:	f8d8 3000 	ldr.w	r3, [r8]
 8004770:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004774:	3307      	adds	r3, #7
 8004776:	f023 0307 	bic.w	r3, r3, #7
 800477a:	f103 0208 	add.w	r2, r3, #8
 800477e:	f8c8 2000 	str.w	r2, [r8]
 8004782:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004786:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800478a:	9307      	str	r3, [sp, #28]
 800478c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004790:	ee08 0a10 	vmov	s16, r0
 8004794:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004798:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800479c:	4b9e      	ldr	r3, [pc, #632]	; (8004a18 <_printf_float+0x2d8>)
 800479e:	f04f 32ff 	mov.w	r2, #4294967295
 80047a2:	f7fc f99b 	bl	8000adc <__aeabi_dcmpun>
 80047a6:	bb88      	cbnz	r0, 800480c <_printf_float+0xcc>
 80047a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047ac:	4b9a      	ldr	r3, [pc, #616]	; (8004a18 <_printf_float+0x2d8>)
 80047ae:	f04f 32ff 	mov.w	r2, #4294967295
 80047b2:	f7fc f975 	bl	8000aa0 <__aeabi_dcmple>
 80047b6:	bb48      	cbnz	r0, 800480c <_printf_float+0xcc>
 80047b8:	2200      	movs	r2, #0
 80047ba:	2300      	movs	r3, #0
 80047bc:	4640      	mov	r0, r8
 80047be:	4649      	mov	r1, r9
 80047c0:	f7fc f964 	bl	8000a8c <__aeabi_dcmplt>
 80047c4:	b110      	cbz	r0, 80047cc <_printf_float+0x8c>
 80047c6:	232d      	movs	r3, #45	; 0x2d
 80047c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047cc:	4a93      	ldr	r2, [pc, #588]	; (8004a1c <_printf_float+0x2dc>)
 80047ce:	4b94      	ldr	r3, [pc, #592]	; (8004a20 <_printf_float+0x2e0>)
 80047d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80047d4:	bf94      	ite	ls
 80047d6:	4690      	movls	r8, r2
 80047d8:	4698      	movhi	r8, r3
 80047da:	2303      	movs	r3, #3
 80047dc:	6123      	str	r3, [r4, #16]
 80047de:	9b05      	ldr	r3, [sp, #20]
 80047e0:	f023 0304 	bic.w	r3, r3, #4
 80047e4:	6023      	str	r3, [r4, #0]
 80047e6:	f04f 0900 	mov.w	r9, #0
 80047ea:	9700      	str	r7, [sp, #0]
 80047ec:	4633      	mov	r3, r6
 80047ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80047f0:	4621      	mov	r1, r4
 80047f2:	4628      	mov	r0, r5
 80047f4:	f000 f9da 	bl	8004bac <_printf_common>
 80047f8:	3001      	adds	r0, #1
 80047fa:	f040 8090 	bne.w	800491e <_printf_float+0x1de>
 80047fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004802:	b00d      	add	sp, #52	; 0x34
 8004804:	ecbd 8b02 	vpop	{d8}
 8004808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800480c:	4642      	mov	r2, r8
 800480e:	464b      	mov	r3, r9
 8004810:	4640      	mov	r0, r8
 8004812:	4649      	mov	r1, r9
 8004814:	f7fc f962 	bl	8000adc <__aeabi_dcmpun>
 8004818:	b140      	cbz	r0, 800482c <_printf_float+0xec>
 800481a:	464b      	mov	r3, r9
 800481c:	2b00      	cmp	r3, #0
 800481e:	bfbc      	itt	lt
 8004820:	232d      	movlt	r3, #45	; 0x2d
 8004822:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004826:	4a7f      	ldr	r2, [pc, #508]	; (8004a24 <_printf_float+0x2e4>)
 8004828:	4b7f      	ldr	r3, [pc, #508]	; (8004a28 <_printf_float+0x2e8>)
 800482a:	e7d1      	b.n	80047d0 <_printf_float+0x90>
 800482c:	6863      	ldr	r3, [r4, #4]
 800482e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004832:	9206      	str	r2, [sp, #24]
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	d13f      	bne.n	80048b8 <_printf_float+0x178>
 8004838:	2306      	movs	r3, #6
 800483a:	6063      	str	r3, [r4, #4]
 800483c:	9b05      	ldr	r3, [sp, #20]
 800483e:	6861      	ldr	r1, [r4, #4]
 8004840:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004844:	2300      	movs	r3, #0
 8004846:	9303      	str	r3, [sp, #12]
 8004848:	ab0a      	add	r3, sp, #40	; 0x28
 800484a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800484e:	ab09      	add	r3, sp, #36	; 0x24
 8004850:	ec49 8b10 	vmov	d0, r8, r9
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	6022      	str	r2, [r4, #0]
 8004858:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800485c:	4628      	mov	r0, r5
 800485e:	f7ff fecf 	bl	8004600 <__cvt>
 8004862:	9b06      	ldr	r3, [sp, #24]
 8004864:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004866:	2b47      	cmp	r3, #71	; 0x47
 8004868:	4680      	mov	r8, r0
 800486a:	d108      	bne.n	800487e <_printf_float+0x13e>
 800486c:	1cc8      	adds	r0, r1, #3
 800486e:	db02      	blt.n	8004876 <_printf_float+0x136>
 8004870:	6863      	ldr	r3, [r4, #4]
 8004872:	4299      	cmp	r1, r3
 8004874:	dd41      	ble.n	80048fa <_printf_float+0x1ba>
 8004876:	f1ab 0302 	sub.w	r3, fp, #2
 800487a:	fa5f fb83 	uxtb.w	fp, r3
 800487e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004882:	d820      	bhi.n	80048c6 <_printf_float+0x186>
 8004884:	3901      	subs	r1, #1
 8004886:	465a      	mov	r2, fp
 8004888:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800488c:	9109      	str	r1, [sp, #36]	; 0x24
 800488e:	f7ff ff19 	bl	80046c4 <__exponent>
 8004892:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004894:	1813      	adds	r3, r2, r0
 8004896:	2a01      	cmp	r2, #1
 8004898:	4681      	mov	r9, r0
 800489a:	6123      	str	r3, [r4, #16]
 800489c:	dc02      	bgt.n	80048a4 <_printf_float+0x164>
 800489e:	6822      	ldr	r2, [r4, #0]
 80048a0:	07d2      	lsls	r2, r2, #31
 80048a2:	d501      	bpl.n	80048a8 <_printf_float+0x168>
 80048a4:	3301      	adds	r3, #1
 80048a6:	6123      	str	r3, [r4, #16]
 80048a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d09c      	beq.n	80047ea <_printf_float+0xaa>
 80048b0:	232d      	movs	r3, #45	; 0x2d
 80048b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048b6:	e798      	b.n	80047ea <_printf_float+0xaa>
 80048b8:	9a06      	ldr	r2, [sp, #24]
 80048ba:	2a47      	cmp	r2, #71	; 0x47
 80048bc:	d1be      	bne.n	800483c <_printf_float+0xfc>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1bc      	bne.n	800483c <_printf_float+0xfc>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e7b9      	b.n	800483a <_printf_float+0xfa>
 80048c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80048ca:	d118      	bne.n	80048fe <_printf_float+0x1be>
 80048cc:	2900      	cmp	r1, #0
 80048ce:	6863      	ldr	r3, [r4, #4]
 80048d0:	dd0b      	ble.n	80048ea <_printf_float+0x1aa>
 80048d2:	6121      	str	r1, [r4, #16]
 80048d4:	b913      	cbnz	r3, 80048dc <_printf_float+0x19c>
 80048d6:	6822      	ldr	r2, [r4, #0]
 80048d8:	07d0      	lsls	r0, r2, #31
 80048da:	d502      	bpl.n	80048e2 <_printf_float+0x1a2>
 80048dc:	3301      	adds	r3, #1
 80048de:	440b      	add	r3, r1
 80048e0:	6123      	str	r3, [r4, #16]
 80048e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80048e4:	f04f 0900 	mov.w	r9, #0
 80048e8:	e7de      	b.n	80048a8 <_printf_float+0x168>
 80048ea:	b913      	cbnz	r3, 80048f2 <_printf_float+0x1b2>
 80048ec:	6822      	ldr	r2, [r4, #0]
 80048ee:	07d2      	lsls	r2, r2, #31
 80048f0:	d501      	bpl.n	80048f6 <_printf_float+0x1b6>
 80048f2:	3302      	adds	r3, #2
 80048f4:	e7f4      	b.n	80048e0 <_printf_float+0x1a0>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e7f2      	b.n	80048e0 <_printf_float+0x1a0>
 80048fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80048fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004900:	4299      	cmp	r1, r3
 8004902:	db05      	blt.n	8004910 <_printf_float+0x1d0>
 8004904:	6823      	ldr	r3, [r4, #0]
 8004906:	6121      	str	r1, [r4, #16]
 8004908:	07d8      	lsls	r0, r3, #31
 800490a:	d5ea      	bpl.n	80048e2 <_printf_float+0x1a2>
 800490c:	1c4b      	adds	r3, r1, #1
 800490e:	e7e7      	b.n	80048e0 <_printf_float+0x1a0>
 8004910:	2900      	cmp	r1, #0
 8004912:	bfd4      	ite	le
 8004914:	f1c1 0202 	rsble	r2, r1, #2
 8004918:	2201      	movgt	r2, #1
 800491a:	4413      	add	r3, r2
 800491c:	e7e0      	b.n	80048e0 <_printf_float+0x1a0>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	055a      	lsls	r2, r3, #21
 8004922:	d407      	bmi.n	8004934 <_printf_float+0x1f4>
 8004924:	6923      	ldr	r3, [r4, #16]
 8004926:	4642      	mov	r2, r8
 8004928:	4631      	mov	r1, r6
 800492a:	4628      	mov	r0, r5
 800492c:	47b8      	blx	r7
 800492e:	3001      	adds	r0, #1
 8004930:	d12c      	bne.n	800498c <_printf_float+0x24c>
 8004932:	e764      	b.n	80047fe <_printf_float+0xbe>
 8004934:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004938:	f240 80e0 	bls.w	8004afc <_printf_float+0x3bc>
 800493c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004940:	2200      	movs	r2, #0
 8004942:	2300      	movs	r3, #0
 8004944:	f7fc f898 	bl	8000a78 <__aeabi_dcmpeq>
 8004948:	2800      	cmp	r0, #0
 800494a:	d034      	beq.n	80049b6 <_printf_float+0x276>
 800494c:	4a37      	ldr	r2, [pc, #220]	; (8004a2c <_printf_float+0x2ec>)
 800494e:	2301      	movs	r3, #1
 8004950:	4631      	mov	r1, r6
 8004952:	4628      	mov	r0, r5
 8004954:	47b8      	blx	r7
 8004956:	3001      	adds	r0, #1
 8004958:	f43f af51 	beq.w	80047fe <_printf_float+0xbe>
 800495c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004960:	429a      	cmp	r2, r3
 8004962:	db02      	blt.n	800496a <_printf_float+0x22a>
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	07d8      	lsls	r0, r3, #31
 8004968:	d510      	bpl.n	800498c <_printf_float+0x24c>
 800496a:	ee18 3a10 	vmov	r3, s16
 800496e:	4652      	mov	r2, sl
 8004970:	4631      	mov	r1, r6
 8004972:	4628      	mov	r0, r5
 8004974:	47b8      	blx	r7
 8004976:	3001      	adds	r0, #1
 8004978:	f43f af41 	beq.w	80047fe <_printf_float+0xbe>
 800497c:	f04f 0800 	mov.w	r8, #0
 8004980:	f104 091a 	add.w	r9, r4, #26
 8004984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004986:	3b01      	subs	r3, #1
 8004988:	4543      	cmp	r3, r8
 800498a:	dc09      	bgt.n	80049a0 <_printf_float+0x260>
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	079b      	lsls	r3, r3, #30
 8004990:	f100 8107 	bmi.w	8004ba2 <_printf_float+0x462>
 8004994:	68e0      	ldr	r0, [r4, #12]
 8004996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004998:	4298      	cmp	r0, r3
 800499a:	bfb8      	it	lt
 800499c:	4618      	movlt	r0, r3
 800499e:	e730      	b.n	8004802 <_printf_float+0xc2>
 80049a0:	2301      	movs	r3, #1
 80049a2:	464a      	mov	r2, r9
 80049a4:	4631      	mov	r1, r6
 80049a6:	4628      	mov	r0, r5
 80049a8:	47b8      	blx	r7
 80049aa:	3001      	adds	r0, #1
 80049ac:	f43f af27 	beq.w	80047fe <_printf_float+0xbe>
 80049b0:	f108 0801 	add.w	r8, r8, #1
 80049b4:	e7e6      	b.n	8004984 <_printf_float+0x244>
 80049b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	dc39      	bgt.n	8004a30 <_printf_float+0x2f0>
 80049bc:	4a1b      	ldr	r2, [pc, #108]	; (8004a2c <_printf_float+0x2ec>)
 80049be:	2301      	movs	r3, #1
 80049c0:	4631      	mov	r1, r6
 80049c2:	4628      	mov	r0, r5
 80049c4:	47b8      	blx	r7
 80049c6:	3001      	adds	r0, #1
 80049c8:	f43f af19 	beq.w	80047fe <_printf_float+0xbe>
 80049cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80049d0:	4313      	orrs	r3, r2
 80049d2:	d102      	bne.n	80049da <_printf_float+0x29a>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	07d9      	lsls	r1, r3, #31
 80049d8:	d5d8      	bpl.n	800498c <_printf_float+0x24c>
 80049da:	ee18 3a10 	vmov	r3, s16
 80049de:	4652      	mov	r2, sl
 80049e0:	4631      	mov	r1, r6
 80049e2:	4628      	mov	r0, r5
 80049e4:	47b8      	blx	r7
 80049e6:	3001      	adds	r0, #1
 80049e8:	f43f af09 	beq.w	80047fe <_printf_float+0xbe>
 80049ec:	f04f 0900 	mov.w	r9, #0
 80049f0:	f104 0a1a 	add.w	sl, r4, #26
 80049f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049f6:	425b      	negs	r3, r3
 80049f8:	454b      	cmp	r3, r9
 80049fa:	dc01      	bgt.n	8004a00 <_printf_float+0x2c0>
 80049fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049fe:	e792      	b.n	8004926 <_printf_float+0x1e6>
 8004a00:	2301      	movs	r3, #1
 8004a02:	4652      	mov	r2, sl
 8004a04:	4631      	mov	r1, r6
 8004a06:	4628      	mov	r0, r5
 8004a08:	47b8      	blx	r7
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	f43f aef7 	beq.w	80047fe <_printf_float+0xbe>
 8004a10:	f109 0901 	add.w	r9, r9, #1
 8004a14:	e7ee      	b.n	80049f4 <_printf_float+0x2b4>
 8004a16:	bf00      	nop
 8004a18:	7fefffff 	.word	0x7fefffff
 8004a1c:	08007118 	.word	0x08007118
 8004a20:	0800711c 	.word	0x0800711c
 8004a24:	08007120 	.word	0x08007120
 8004a28:	08007124 	.word	0x08007124
 8004a2c:	08007128 	.word	0x08007128
 8004a30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a34:	429a      	cmp	r2, r3
 8004a36:	bfa8      	it	ge
 8004a38:	461a      	movge	r2, r3
 8004a3a:	2a00      	cmp	r2, #0
 8004a3c:	4691      	mov	r9, r2
 8004a3e:	dc37      	bgt.n	8004ab0 <_printf_float+0x370>
 8004a40:	f04f 0b00 	mov.w	fp, #0
 8004a44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a48:	f104 021a 	add.w	r2, r4, #26
 8004a4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a4e:	9305      	str	r3, [sp, #20]
 8004a50:	eba3 0309 	sub.w	r3, r3, r9
 8004a54:	455b      	cmp	r3, fp
 8004a56:	dc33      	bgt.n	8004ac0 <_printf_float+0x380>
 8004a58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	db3b      	blt.n	8004ad8 <_printf_float+0x398>
 8004a60:	6823      	ldr	r3, [r4, #0]
 8004a62:	07da      	lsls	r2, r3, #31
 8004a64:	d438      	bmi.n	8004ad8 <_printf_float+0x398>
 8004a66:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004a6a:	eba2 0903 	sub.w	r9, r2, r3
 8004a6e:	9b05      	ldr	r3, [sp, #20]
 8004a70:	1ad2      	subs	r2, r2, r3
 8004a72:	4591      	cmp	r9, r2
 8004a74:	bfa8      	it	ge
 8004a76:	4691      	movge	r9, r2
 8004a78:	f1b9 0f00 	cmp.w	r9, #0
 8004a7c:	dc35      	bgt.n	8004aea <_printf_float+0x3aa>
 8004a7e:	f04f 0800 	mov.w	r8, #0
 8004a82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a86:	f104 0a1a 	add.w	sl, r4, #26
 8004a8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a8e:	1a9b      	subs	r3, r3, r2
 8004a90:	eba3 0309 	sub.w	r3, r3, r9
 8004a94:	4543      	cmp	r3, r8
 8004a96:	f77f af79 	ble.w	800498c <_printf_float+0x24c>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	4652      	mov	r2, sl
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	47b8      	blx	r7
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	f43f aeaa 	beq.w	80047fe <_printf_float+0xbe>
 8004aaa:	f108 0801 	add.w	r8, r8, #1
 8004aae:	e7ec      	b.n	8004a8a <_printf_float+0x34a>
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	4631      	mov	r1, r6
 8004ab4:	4642      	mov	r2, r8
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	47b8      	blx	r7
 8004aba:	3001      	adds	r0, #1
 8004abc:	d1c0      	bne.n	8004a40 <_printf_float+0x300>
 8004abe:	e69e      	b.n	80047fe <_printf_float+0xbe>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	4631      	mov	r1, r6
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	9205      	str	r2, [sp, #20]
 8004ac8:	47b8      	blx	r7
 8004aca:	3001      	adds	r0, #1
 8004acc:	f43f ae97 	beq.w	80047fe <_printf_float+0xbe>
 8004ad0:	9a05      	ldr	r2, [sp, #20]
 8004ad2:	f10b 0b01 	add.w	fp, fp, #1
 8004ad6:	e7b9      	b.n	8004a4c <_printf_float+0x30c>
 8004ad8:	ee18 3a10 	vmov	r3, s16
 8004adc:	4652      	mov	r2, sl
 8004ade:	4631      	mov	r1, r6
 8004ae0:	4628      	mov	r0, r5
 8004ae2:	47b8      	blx	r7
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	d1be      	bne.n	8004a66 <_printf_float+0x326>
 8004ae8:	e689      	b.n	80047fe <_printf_float+0xbe>
 8004aea:	9a05      	ldr	r2, [sp, #20]
 8004aec:	464b      	mov	r3, r9
 8004aee:	4442      	add	r2, r8
 8004af0:	4631      	mov	r1, r6
 8004af2:	4628      	mov	r0, r5
 8004af4:	47b8      	blx	r7
 8004af6:	3001      	adds	r0, #1
 8004af8:	d1c1      	bne.n	8004a7e <_printf_float+0x33e>
 8004afa:	e680      	b.n	80047fe <_printf_float+0xbe>
 8004afc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004afe:	2a01      	cmp	r2, #1
 8004b00:	dc01      	bgt.n	8004b06 <_printf_float+0x3c6>
 8004b02:	07db      	lsls	r3, r3, #31
 8004b04:	d53a      	bpl.n	8004b7c <_printf_float+0x43c>
 8004b06:	2301      	movs	r3, #1
 8004b08:	4642      	mov	r2, r8
 8004b0a:	4631      	mov	r1, r6
 8004b0c:	4628      	mov	r0, r5
 8004b0e:	47b8      	blx	r7
 8004b10:	3001      	adds	r0, #1
 8004b12:	f43f ae74 	beq.w	80047fe <_printf_float+0xbe>
 8004b16:	ee18 3a10 	vmov	r3, s16
 8004b1a:	4652      	mov	r2, sl
 8004b1c:	4631      	mov	r1, r6
 8004b1e:	4628      	mov	r0, r5
 8004b20:	47b8      	blx	r7
 8004b22:	3001      	adds	r0, #1
 8004b24:	f43f ae6b 	beq.w	80047fe <_printf_float+0xbe>
 8004b28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004b34:	f7fb ffa0 	bl	8000a78 <__aeabi_dcmpeq>
 8004b38:	b9d8      	cbnz	r0, 8004b72 <_printf_float+0x432>
 8004b3a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004b3e:	f108 0201 	add.w	r2, r8, #1
 8004b42:	4631      	mov	r1, r6
 8004b44:	4628      	mov	r0, r5
 8004b46:	47b8      	blx	r7
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d10e      	bne.n	8004b6a <_printf_float+0x42a>
 8004b4c:	e657      	b.n	80047fe <_printf_float+0xbe>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	4652      	mov	r2, sl
 8004b52:	4631      	mov	r1, r6
 8004b54:	4628      	mov	r0, r5
 8004b56:	47b8      	blx	r7
 8004b58:	3001      	adds	r0, #1
 8004b5a:	f43f ae50 	beq.w	80047fe <_printf_float+0xbe>
 8004b5e:	f108 0801 	add.w	r8, r8, #1
 8004b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b64:	3b01      	subs	r3, #1
 8004b66:	4543      	cmp	r3, r8
 8004b68:	dcf1      	bgt.n	8004b4e <_printf_float+0x40e>
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004b70:	e6da      	b.n	8004928 <_printf_float+0x1e8>
 8004b72:	f04f 0800 	mov.w	r8, #0
 8004b76:	f104 0a1a 	add.w	sl, r4, #26
 8004b7a:	e7f2      	b.n	8004b62 <_printf_float+0x422>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	4642      	mov	r2, r8
 8004b80:	e7df      	b.n	8004b42 <_printf_float+0x402>
 8004b82:	2301      	movs	r3, #1
 8004b84:	464a      	mov	r2, r9
 8004b86:	4631      	mov	r1, r6
 8004b88:	4628      	mov	r0, r5
 8004b8a:	47b8      	blx	r7
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	f43f ae36 	beq.w	80047fe <_printf_float+0xbe>
 8004b92:	f108 0801 	add.w	r8, r8, #1
 8004b96:	68e3      	ldr	r3, [r4, #12]
 8004b98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004b9a:	1a5b      	subs	r3, r3, r1
 8004b9c:	4543      	cmp	r3, r8
 8004b9e:	dcf0      	bgt.n	8004b82 <_printf_float+0x442>
 8004ba0:	e6f8      	b.n	8004994 <_printf_float+0x254>
 8004ba2:	f04f 0800 	mov.w	r8, #0
 8004ba6:	f104 0919 	add.w	r9, r4, #25
 8004baa:	e7f4      	b.n	8004b96 <_printf_float+0x456>

08004bac <_printf_common>:
 8004bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb0:	4616      	mov	r6, r2
 8004bb2:	4699      	mov	r9, r3
 8004bb4:	688a      	ldr	r2, [r1, #8]
 8004bb6:	690b      	ldr	r3, [r1, #16]
 8004bb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	bfb8      	it	lt
 8004bc0:	4613      	movlt	r3, r2
 8004bc2:	6033      	str	r3, [r6, #0]
 8004bc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bc8:	4607      	mov	r7, r0
 8004bca:	460c      	mov	r4, r1
 8004bcc:	b10a      	cbz	r2, 8004bd2 <_printf_common+0x26>
 8004bce:	3301      	adds	r3, #1
 8004bd0:	6033      	str	r3, [r6, #0]
 8004bd2:	6823      	ldr	r3, [r4, #0]
 8004bd4:	0699      	lsls	r1, r3, #26
 8004bd6:	bf42      	ittt	mi
 8004bd8:	6833      	ldrmi	r3, [r6, #0]
 8004bda:	3302      	addmi	r3, #2
 8004bdc:	6033      	strmi	r3, [r6, #0]
 8004bde:	6825      	ldr	r5, [r4, #0]
 8004be0:	f015 0506 	ands.w	r5, r5, #6
 8004be4:	d106      	bne.n	8004bf4 <_printf_common+0x48>
 8004be6:	f104 0a19 	add.w	sl, r4, #25
 8004bea:	68e3      	ldr	r3, [r4, #12]
 8004bec:	6832      	ldr	r2, [r6, #0]
 8004bee:	1a9b      	subs	r3, r3, r2
 8004bf0:	42ab      	cmp	r3, r5
 8004bf2:	dc26      	bgt.n	8004c42 <_printf_common+0x96>
 8004bf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bf8:	1e13      	subs	r3, r2, #0
 8004bfa:	6822      	ldr	r2, [r4, #0]
 8004bfc:	bf18      	it	ne
 8004bfe:	2301      	movne	r3, #1
 8004c00:	0692      	lsls	r2, r2, #26
 8004c02:	d42b      	bmi.n	8004c5c <_printf_common+0xb0>
 8004c04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c08:	4649      	mov	r1, r9
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	47c0      	blx	r8
 8004c0e:	3001      	adds	r0, #1
 8004c10:	d01e      	beq.n	8004c50 <_printf_common+0xa4>
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	6922      	ldr	r2, [r4, #16]
 8004c16:	f003 0306 	and.w	r3, r3, #6
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	bf02      	ittt	eq
 8004c1e:	68e5      	ldreq	r5, [r4, #12]
 8004c20:	6833      	ldreq	r3, [r6, #0]
 8004c22:	1aed      	subeq	r5, r5, r3
 8004c24:	68a3      	ldr	r3, [r4, #8]
 8004c26:	bf0c      	ite	eq
 8004c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c2c:	2500      	movne	r5, #0
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	bfc4      	itt	gt
 8004c32:	1a9b      	subgt	r3, r3, r2
 8004c34:	18ed      	addgt	r5, r5, r3
 8004c36:	2600      	movs	r6, #0
 8004c38:	341a      	adds	r4, #26
 8004c3a:	42b5      	cmp	r5, r6
 8004c3c:	d11a      	bne.n	8004c74 <_printf_common+0xc8>
 8004c3e:	2000      	movs	r0, #0
 8004c40:	e008      	b.n	8004c54 <_printf_common+0xa8>
 8004c42:	2301      	movs	r3, #1
 8004c44:	4652      	mov	r2, sl
 8004c46:	4649      	mov	r1, r9
 8004c48:	4638      	mov	r0, r7
 8004c4a:	47c0      	blx	r8
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d103      	bne.n	8004c58 <_printf_common+0xac>
 8004c50:	f04f 30ff 	mov.w	r0, #4294967295
 8004c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c58:	3501      	adds	r5, #1
 8004c5a:	e7c6      	b.n	8004bea <_printf_common+0x3e>
 8004c5c:	18e1      	adds	r1, r4, r3
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	2030      	movs	r0, #48	; 0x30
 8004c62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c66:	4422      	add	r2, r4
 8004c68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c70:	3302      	adds	r3, #2
 8004c72:	e7c7      	b.n	8004c04 <_printf_common+0x58>
 8004c74:	2301      	movs	r3, #1
 8004c76:	4622      	mov	r2, r4
 8004c78:	4649      	mov	r1, r9
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	47c0      	blx	r8
 8004c7e:	3001      	adds	r0, #1
 8004c80:	d0e6      	beq.n	8004c50 <_printf_common+0xa4>
 8004c82:	3601      	adds	r6, #1
 8004c84:	e7d9      	b.n	8004c3a <_printf_common+0x8e>
	...

08004c88 <_printf_i>:
 8004c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c8c:	7e0f      	ldrb	r7, [r1, #24]
 8004c8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c90:	2f78      	cmp	r7, #120	; 0x78
 8004c92:	4691      	mov	r9, r2
 8004c94:	4680      	mov	r8, r0
 8004c96:	460c      	mov	r4, r1
 8004c98:	469a      	mov	sl, r3
 8004c9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c9e:	d807      	bhi.n	8004cb0 <_printf_i+0x28>
 8004ca0:	2f62      	cmp	r7, #98	; 0x62
 8004ca2:	d80a      	bhi.n	8004cba <_printf_i+0x32>
 8004ca4:	2f00      	cmp	r7, #0
 8004ca6:	f000 80d4 	beq.w	8004e52 <_printf_i+0x1ca>
 8004caa:	2f58      	cmp	r7, #88	; 0x58
 8004cac:	f000 80c0 	beq.w	8004e30 <_printf_i+0x1a8>
 8004cb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cb4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cb8:	e03a      	b.n	8004d30 <_printf_i+0xa8>
 8004cba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cbe:	2b15      	cmp	r3, #21
 8004cc0:	d8f6      	bhi.n	8004cb0 <_printf_i+0x28>
 8004cc2:	a101      	add	r1, pc, #4	; (adr r1, 8004cc8 <_printf_i+0x40>)
 8004cc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cc8:	08004d21 	.word	0x08004d21
 8004ccc:	08004d35 	.word	0x08004d35
 8004cd0:	08004cb1 	.word	0x08004cb1
 8004cd4:	08004cb1 	.word	0x08004cb1
 8004cd8:	08004cb1 	.word	0x08004cb1
 8004cdc:	08004cb1 	.word	0x08004cb1
 8004ce0:	08004d35 	.word	0x08004d35
 8004ce4:	08004cb1 	.word	0x08004cb1
 8004ce8:	08004cb1 	.word	0x08004cb1
 8004cec:	08004cb1 	.word	0x08004cb1
 8004cf0:	08004cb1 	.word	0x08004cb1
 8004cf4:	08004e39 	.word	0x08004e39
 8004cf8:	08004d61 	.word	0x08004d61
 8004cfc:	08004df3 	.word	0x08004df3
 8004d00:	08004cb1 	.word	0x08004cb1
 8004d04:	08004cb1 	.word	0x08004cb1
 8004d08:	08004e5b 	.word	0x08004e5b
 8004d0c:	08004cb1 	.word	0x08004cb1
 8004d10:	08004d61 	.word	0x08004d61
 8004d14:	08004cb1 	.word	0x08004cb1
 8004d18:	08004cb1 	.word	0x08004cb1
 8004d1c:	08004dfb 	.word	0x08004dfb
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	1d1a      	adds	r2, r3, #4
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	602a      	str	r2, [r5, #0]
 8004d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d30:	2301      	movs	r3, #1
 8004d32:	e09f      	b.n	8004e74 <_printf_i+0x1ec>
 8004d34:	6820      	ldr	r0, [r4, #0]
 8004d36:	682b      	ldr	r3, [r5, #0]
 8004d38:	0607      	lsls	r7, r0, #24
 8004d3a:	f103 0104 	add.w	r1, r3, #4
 8004d3e:	6029      	str	r1, [r5, #0]
 8004d40:	d501      	bpl.n	8004d46 <_printf_i+0xbe>
 8004d42:	681e      	ldr	r6, [r3, #0]
 8004d44:	e003      	b.n	8004d4e <_printf_i+0xc6>
 8004d46:	0646      	lsls	r6, r0, #25
 8004d48:	d5fb      	bpl.n	8004d42 <_printf_i+0xba>
 8004d4a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004d4e:	2e00      	cmp	r6, #0
 8004d50:	da03      	bge.n	8004d5a <_printf_i+0xd2>
 8004d52:	232d      	movs	r3, #45	; 0x2d
 8004d54:	4276      	negs	r6, r6
 8004d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d5a:	485a      	ldr	r0, [pc, #360]	; (8004ec4 <_printf_i+0x23c>)
 8004d5c:	230a      	movs	r3, #10
 8004d5e:	e012      	b.n	8004d86 <_printf_i+0xfe>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	6820      	ldr	r0, [r4, #0]
 8004d64:	1d19      	adds	r1, r3, #4
 8004d66:	6029      	str	r1, [r5, #0]
 8004d68:	0605      	lsls	r5, r0, #24
 8004d6a:	d501      	bpl.n	8004d70 <_printf_i+0xe8>
 8004d6c:	681e      	ldr	r6, [r3, #0]
 8004d6e:	e002      	b.n	8004d76 <_printf_i+0xee>
 8004d70:	0641      	lsls	r1, r0, #25
 8004d72:	d5fb      	bpl.n	8004d6c <_printf_i+0xe4>
 8004d74:	881e      	ldrh	r6, [r3, #0]
 8004d76:	4853      	ldr	r0, [pc, #332]	; (8004ec4 <_printf_i+0x23c>)
 8004d78:	2f6f      	cmp	r7, #111	; 0x6f
 8004d7a:	bf0c      	ite	eq
 8004d7c:	2308      	moveq	r3, #8
 8004d7e:	230a      	movne	r3, #10
 8004d80:	2100      	movs	r1, #0
 8004d82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d86:	6865      	ldr	r5, [r4, #4]
 8004d88:	60a5      	str	r5, [r4, #8]
 8004d8a:	2d00      	cmp	r5, #0
 8004d8c:	bfa2      	ittt	ge
 8004d8e:	6821      	ldrge	r1, [r4, #0]
 8004d90:	f021 0104 	bicge.w	r1, r1, #4
 8004d94:	6021      	strge	r1, [r4, #0]
 8004d96:	b90e      	cbnz	r6, 8004d9c <_printf_i+0x114>
 8004d98:	2d00      	cmp	r5, #0
 8004d9a:	d04b      	beq.n	8004e34 <_printf_i+0x1ac>
 8004d9c:	4615      	mov	r5, r2
 8004d9e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004da2:	fb03 6711 	mls	r7, r3, r1, r6
 8004da6:	5dc7      	ldrb	r7, [r0, r7]
 8004da8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004dac:	4637      	mov	r7, r6
 8004dae:	42bb      	cmp	r3, r7
 8004db0:	460e      	mov	r6, r1
 8004db2:	d9f4      	bls.n	8004d9e <_printf_i+0x116>
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d10b      	bne.n	8004dd0 <_printf_i+0x148>
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	07de      	lsls	r6, r3, #31
 8004dbc:	d508      	bpl.n	8004dd0 <_printf_i+0x148>
 8004dbe:	6923      	ldr	r3, [r4, #16]
 8004dc0:	6861      	ldr	r1, [r4, #4]
 8004dc2:	4299      	cmp	r1, r3
 8004dc4:	bfde      	ittt	le
 8004dc6:	2330      	movle	r3, #48	; 0x30
 8004dc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004dcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004dd0:	1b52      	subs	r2, r2, r5
 8004dd2:	6122      	str	r2, [r4, #16]
 8004dd4:	f8cd a000 	str.w	sl, [sp]
 8004dd8:	464b      	mov	r3, r9
 8004dda:	aa03      	add	r2, sp, #12
 8004ddc:	4621      	mov	r1, r4
 8004dde:	4640      	mov	r0, r8
 8004de0:	f7ff fee4 	bl	8004bac <_printf_common>
 8004de4:	3001      	adds	r0, #1
 8004de6:	d14a      	bne.n	8004e7e <_printf_i+0x1f6>
 8004de8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dec:	b004      	add	sp, #16
 8004dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	f043 0320 	orr.w	r3, r3, #32
 8004df8:	6023      	str	r3, [r4, #0]
 8004dfa:	4833      	ldr	r0, [pc, #204]	; (8004ec8 <_printf_i+0x240>)
 8004dfc:	2778      	movs	r7, #120	; 0x78
 8004dfe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	6829      	ldr	r1, [r5, #0]
 8004e06:	061f      	lsls	r7, r3, #24
 8004e08:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e0c:	d402      	bmi.n	8004e14 <_printf_i+0x18c>
 8004e0e:	065f      	lsls	r7, r3, #25
 8004e10:	bf48      	it	mi
 8004e12:	b2b6      	uxthmi	r6, r6
 8004e14:	07df      	lsls	r7, r3, #31
 8004e16:	bf48      	it	mi
 8004e18:	f043 0320 	orrmi.w	r3, r3, #32
 8004e1c:	6029      	str	r1, [r5, #0]
 8004e1e:	bf48      	it	mi
 8004e20:	6023      	strmi	r3, [r4, #0]
 8004e22:	b91e      	cbnz	r6, 8004e2c <_printf_i+0x1a4>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	f023 0320 	bic.w	r3, r3, #32
 8004e2a:	6023      	str	r3, [r4, #0]
 8004e2c:	2310      	movs	r3, #16
 8004e2e:	e7a7      	b.n	8004d80 <_printf_i+0xf8>
 8004e30:	4824      	ldr	r0, [pc, #144]	; (8004ec4 <_printf_i+0x23c>)
 8004e32:	e7e4      	b.n	8004dfe <_printf_i+0x176>
 8004e34:	4615      	mov	r5, r2
 8004e36:	e7bd      	b.n	8004db4 <_printf_i+0x12c>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	6826      	ldr	r6, [r4, #0]
 8004e3c:	6961      	ldr	r1, [r4, #20]
 8004e3e:	1d18      	adds	r0, r3, #4
 8004e40:	6028      	str	r0, [r5, #0]
 8004e42:	0635      	lsls	r5, r6, #24
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	d501      	bpl.n	8004e4c <_printf_i+0x1c4>
 8004e48:	6019      	str	r1, [r3, #0]
 8004e4a:	e002      	b.n	8004e52 <_printf_i+0x1ca>
 8004e4c:	0670      	lsls	r0, r6, #25
 8004e4e:	d5fb      	bpl.n	8004e48 <_printf_i+0x1c0>
 8004e50:	8019      	strh	r1, [r3, #0]
 8004e52:	2300      	movs	r3, #0
 8004e54:	6123      	str	r3, [r4, #16]
 8004e56:	4615      	mov	r5, r2
 8004e58:	e7bc      	b.n	8004dd4 <_printf_i+0x14c>
 8004e5a:	682b      	ldr	r3, [r5, #0]
 8004e5c:	1d1a      	adds	r2, r3, #4
 8004e5e:	602a      	str	r2, [r5, #0]
 8004e60:	681d      	ldr	r5, [r3, #0]
 8004e62:	6862      	ldr	r2, [r4, #4]
 8004e64:	2100      	movs	r1, #0
 8004e66:	4628      	mov	r0, r5
 8004e68:	f7fb f98a 	bl	8000180 <memchr>
 8004e6c:	b108      	cbz	r0, 8004e72 <_printf_i+0x1ea>
 8004e6e:	1b40      	subs	r0, r0, r5
 8004e70:	6060      	str	r0, [r4, #4]
 8004e72:	6863      	ldr	r3, [r4, #4]
 8004e74:	6123      	str	r3, [r4, #16]
 8004e76:	2300      	movs	r3, #0
 8004e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e7c:	e7aa      	b.n	8004dd4 <_printf_i+0x14c>
 8004e7e:	6923      	ldr	r3, [r4, #16]
 8004e80:	462a      	mov	r2, r5
 8004e82:	4649      	mov	r1, r9
 8004e84:	4640      	mov	r0, r8
 8004e86:	47d0      	blx	sl
 8004e88:	3001      	adds	r0, #1
 8004e8a:	d0ad      	beq.n	8004de8 <_printf_i+0x160>
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	079b      	lsls	r3, r3, #30
 8004e90:	d413      	bmi.n	8004eba <_printf_i+0x232>
 8004e92:	68e0      	ldr	r0, [r4, #12]
 8004e94:	9b03      	ldr	r3, [sp, #12]
 8004e96:	4298      	cmp	r0, r3
 8004e98:	bfb8      	it	lt
 8004e9a:	4618      	movlt	r0, r3
 8004e9c:	e7a6      	b.n	8004dec <_printf_i+0x164>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	4632      	mov	r2, r6
 8004ea2:	4649      	mov	r1, r9
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	47d0      	blx	sl
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	d09d      	beq.n	8004de8 <_printf_i+0x160>
 8004eac:	3501      	adds	r5, #1
 8004eae:	68e3      	ldr	r3, [r4, #12]
 8004eb0:	9903      	ldr	r1, [sp, #12]
 8004eb2:	1a5b      	subs	r3, r3, r1
 8004eb4:	42ab      	cmp	r3, r5
 8004eb6:	dcf2      	bgt.n	8004e9e <_printf_i+0x216>
 8004eb8:	e7eb      	b.n	8004e92 <_printf_i+0x20a>
 8004eba:	2500      	movs	r5, #0
 8004ebc:	f104 0619 	add.w	r6, r4, #25
 8004ec0:	e7f5      	b.n	8004eae <_printf_i+0x226>
 8004ec2:	bf00      	nop
 8004ec4:	0800712a 	.word	0x0800712a
 8004ec8:	0800713b 	.word	0x0800713b

08004ecc <std>:
 8004ecc:	2300      	movs	r3, #0
 8004ece:	b510      	push	{r4, lr}
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004eda:	6083      	str	r3, [r0, #8]
 8004edc:	8181      	strh	r1, [r0, #12]
 8004ede:	6643      	str	r3, [r0, #100]	; 0x64
 8004ee0:	81c2      	strh	r2, [r0, #14]
 8004ee2:	6183      	str	r3, [r0, #24]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	2208      	movs	r2, #8
 8004ee8:	305c      	adds	r0, #92	; 0x5c
 8004eea:	f000 f906 	bl	80050fa <memset>
 8004eee:	4b0d      	ldr	r3, [pc, #52]	; (8004f24 <std+0x58>)
 8004ef0:	6263      	str	r3, [r4, #36]	; 0x24
 8004ef2:	4b0d      	ldr	r3, [pc, #52]	; (8004f28 <std+0x5c>)
 8004ef4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <std+0x60>)
 8004ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004efa:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <std+0x64>)
 8004efc:	6323      	str	r3, [r4, #48]	; 0x30
 8004efe:	4b0d      	ldr	r3, [pc, #52]	; (8004f34 <std+0x68>)
 8004f00:	6224      	str	r4, [r4, #32]
 8004f02:	429c      	cmp	r4, r3
 8004f04:	d006      	beq.n	8004f14 <std+0x48>
 8004f06:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004f0a:	4294      	cmp	r4, r2
 8004f0c:	d002      	beq.n	8004f14 <std+0x48>
 8004f0e:	33d0      	adds	r3, #208	; 0xd0
 8004f10:	429c      	cmp	r4, r3
 8004f12:	d105      	bne.n	8004f20 <std+0x54>
 8004f14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f1c:	f000 b96a 	b.w	80051f4 <__retarget_lock_init_recursive>
 8004f20:	bd10      	pop	{r4, pc}
 8004f22:	bf00      	nop
 8004f24:	08005075 	.word	0x08005075
 8004f28:	08005097 	.word	0x08005097
 8004f2c:	080050cf 	.word	0x080050cf
 8004f30:	080050f3 	.word	0x080050f3
 8004f34:	200002ec 	.word	0x200002ec

08004f38 <stdio_exit_handler>:
 8004f38:	4a02      	ldr	r2, [pc, #8]	; (8004f44 <stdio_exit_handler+0xc>)
 8004f3a:	4903      	ldr	r1, [pc, #12]	; (8004f48 <stdio_exit_handler+0x10>)
 8004f3c:	4803      	ldr	r0, [pc, #12]	; (8004f4c <stdio_exit_handler+0x14>)
 8004f3e:	f000 b869 	b.w	8005014 <_fwalk_sglue>
 8004f42:	bf00      	nop
 8004f44:	20000010 	.word	0x20000010
 8004f48:	08006b81 	.word	0x08006b81
 8004f4c:	2000001c 	.word	0x2000001c

08004f50 <cleanup_stdio>:
 8004f50:	6841      	ldr	r1, [r0, #4]
 8004f52:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <cleanup_stdio+0x34>)
 8004f54:	4299      	cmp	r1, r3
 8004f56:	b510      	push	{r4, lr}
 8004f58:	4604      	mov	r4, r0
 8004f5a:	d001      	beq.n	8004f60 <cleanup_stdio+0x10>
 8004f5c:	f001 fe10 	bl	8006b80 <_fflush_r>
 8004f60:	68a1      	ldr	r1, [r4, #8]
 8004f62:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <cleanup_stdio+0x38>)
 8004f64:	4299      	cmp	r1, r3
 8004f66:	d002      	beq.n	8004f6e <cleanup_stdio+0x1e>
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f001 fe09 	bl	8006b80 <_fflush_r>
 8004f6e:	68e1      	ldr	r1, [r4, #12]
 8004f70:	4b06      	ldr	r3, [pc, #24]	; (8004f8c <cleanup_stdio+0x3c>)
 8004f72:	4299      	cmp	r1, r3
 8004f74:	d004      	beq.n	8004f80 <cleanup_stdio+0x30>
 8004f76:	4620      	mov	r0, r4
 8004f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f7c:	f001 be00 	b.w	8006b80 <_fflush_r>
 8004f80:	bd10      	pop	{r4, pc}
 8004f82:	bf00      	nop
 8004f84:	200002ec 	.word	0x200002ec
 8004f88:	20000354 	.word	0x20000354
 8004f8c:	200003bc 	.word	0x200003bc

08004f90 <global_stdio_init.part.0>:
 8004f90:	b510      	push	{r4, lr}
 8004f92:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <global_stdio_init.part.0+0x30>)
 8004f94:	4c0b      	ldr	r4, [pc, #44]	; (8004fc4 <global_stdio_init.part.0+0x34>)
 8004f96:	4a0c      	ldr	r2, [pc, #48]	; (8004fc8 <global_stdio_init.part.0+0x38>)
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2104      	movs	r1, #4
 8004fa0:	f7ff ff94 	bl	8004ecc <std>
 8004fa4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004fa8:	2201      	movs	r2, #1
 8004faa:	2109      	movs	r1, #9
 8004fac:	f7ff ff8e 	bl	8004ecc <std>
 8004fb0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fba:	2112      	movs	r1, #18
 8004fbc:	f7ff bf86 	b.w	8004ecc <std>
 8004fc0:	20000424 	.word	0x20000424
 8004fc4:	200002ec 	.word	0x200002ec
 8004fc8:	08004f39 	.word	0x08004f39

08004fcc <__sfp_lock_acquire>:
 8004fcc:	4801      	ldr	r0, [pc, #4]	; (8004fd4 <__sfp_lock_acquire+0x8>)
 8004fce:	f000 b912 	b.w	80051f6 <__retarget_lock_acquire_recursive>
 8004fd2:	bf00      	nop
 8004fd4:	2000042d 	.word	0x2000042d

08004fd8 <__sfp_lock_release>:
 8004fd8:	4801      	ldr	r0, [pc, #4]	; (8004fe0 <__sfp_lock_release+0x8>)
 8004fda:	f000 b90d 	b.w	80051f8 <__retarget_lock_release_recursive>
 8004fde:	bf00      	nop
 8004fe0:	2000042d 	.word	0x2000042d

08004fe4 <__sinit>:
 8004fe4:	b510      	push	{r4, lr}
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	f7ff fff0 	bl	8004fcc <__sfp_lock_acquire>
 8004fec:	6a23      	ldr	r3, [r4, #32]
 8004fee:	b11b      	cbz	r3, 8004ff8 <__sinit+0x14>
 8004ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ff4:	f7ff bff0 	b.w	8004fd8 <__sfp_lock_release>
 8004ff8:	4b04      	ldr	r3, [pc, #16]	; (800500c <__sinit+0x28>)
 8004ffa:	6223      	str	r3, [r4, #32]
 8004ffc:	4b04      	ldr	r3, [pc, #16]	; (8005010 <__sinit+0x2c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1f5      	bne.n	8004ff0 <__sinit+0xc>
 8005004:	f7ff ffc4 	bl	8004f90 <global_stdio_init.part.0>
 8005008:	e7f2      	b.n	8004ff0 <__sinit+0xc>
 800500a:	bf00      	nop
 800500c:	08004f51 	.word	0x08004f51
 8005010:	20000424 	.word	0x20000424

08005014 <_fwalk_sglue>:
 8005014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005018:	4607      	mov	r7, r0
 800501a:	4688      	mov	r8, r1
 800501c:	4614      	mov	r4, r2
 800501e:	2600      	movs	r6, #0
 8005020:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005024:	f1b9 0901 	subs.w	r9, r9, #1
 8005028:	d505      	bpl.n	8005036 <_fwalk_sglue+0x22>
 800502a:	6824      	ldr	r4, [r4, #0]
 800502c:	2c00      	cmp	r4, #0
 800502e:	d1f7      	bne.n	8005020 <_fwalk_sglue+0xc>
 8005030:	4630      	mov	r0, r6
 8005032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005036:	89ab      	ldrh	r3, [r5, #12]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d907      	bls.n	800504c <_fwalk_sglue+0x38>
 800503c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005040:	3301      	adds	r3, #1
 8005042:	d003      	beq.n	800504c <_fwalk_sglue+0x38>
 8005044:	4629      	mov	r1, r5
 8005046:	4638      	mov	r0, r7
 8005048:	47c0      	blx	r8
 800504a:	4306      	orrs	r6, r0
 800504c:	3568      	adds	r5, #104	; 0x68
 800504e:	e7e9      	b.n	8005024 <_fwalk_sglue+0x10>

08005050 <iprintf>:
 8005050:	b40f      	push	{r0, r1, r2, r3}
 8005052:	b507      	push	{r0, r1, r2, lr}
 8005054:	4906      	ldr	r1, [pc, #24]	; (8005070 <iprintf+0x20>)
 8005056:	ab04      	add	r3, sp, #16
 8005058:	6808      	ldr	r0, [r1, #0]
 800505a:	f853 2b04 	ldr.w	r2, [r3], #4
 800505e:	6881      	ldr	r1, [r0, #8]
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	f001 fbed 	bl	8006840 <_vfiprintf_r>
 8005066:	b003      	add	sp, #12
 8005068:	f85d eb04 	ldr.w	lr, [sp], #4
 800506c:	b004      	add	sp, #16
 800506e:	4770      	bx	lr
 8005070:	20000068 	.word	0x20000068

08005074 <__sread>:
 8005074:	b510      	push	{r4, lr}
 8005076:	460c      	mov	r4, r1
 8005078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800507c:	f000 f86c 	bl	8005158 <_read_r>
 8005080:	2800      	cmp	r0, #0
 8005082:	bfab      	itete	ge
 8005084:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005086:	89a3      	ldrhlt	r3, [r4, #12]
 8005088:	181b      	addge	r3, r3, r0
 800508a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800508e:	bfac      	ite	ge
 8005090:	6563      	strge	r3, [r4, #84]	; 0x54
 8005092:	81a3      	strhlt	r3, [r4, #12]
 8005094:	bd10      	pop	{r4, pc}

08005096 <__swrite>:
 8005096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800509a:	461f      	mov	r7, r3
 800509c:	898b      	ldrh	r3, [r1, #12]
 800509e:	05db      	lsls	r3, r3, #23
 80050a0:	4605      	mov	r5, r0
 80050a2:	460c      	mov	r4, r1
 80050a4:	4616      	mov	r6, r2
 80050a6:	d505      	bpl.n	80050b4 <__swrite+0x1e>
 80050a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ac:	2302      	movs	r3, #2
 80050ae:	2200      	movs	r2, #0
 80050b0:	f000 f840 	bl	8005134 <_lseek_r>
 80050b4:	89a3      	ldrh	r3, [r4, #12]
 80050b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050be:	81a3      	strh	r3, [r4, #12]
 80050c0:	4632      	mov	r2, r6
 80050c2:	463b      	mov	r3, r7
 80050c4:	4628      	mov	r0, r5
 80050c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ca:	f000 b857 	b.w	800517c <_write_r>

080050ce <__sseek>:
 80050ce:	b510      	push	{r4, lr}
 80050d0:	460c      	mov	r4, r1
 80050d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d6:	f000 f82d 	bl	8005134 <_lseek_r>
 80050da:	1c43      	adds	r3, r0, #1
 80050dc:	89a3      	ldrh	r3, [r4, #12]
 80050de:	bf15      	itete	ne
 80050e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80050e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050ea:	81a3      	strheq	r3, [r4, #12]
 80050ec:	bf18      	it	ne
 80050ee:	81a3      	strhne	r3, [r4, #12]
 80050f0:	bd10      	pop	{r4, pc}

080050f2 <__sclose>:
 80050f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f6:	f000 b80d 	b.w	8005114 <_close_r>

080050fa <memset>:
 80050fa:	4402      	add	r2, r0
 80050fc:	4603      	mov	r3, r0
 80050fe:	4293      	cmp	r3, r2
 8005100:	d100      	bne.n	8005104 <memset+0xa>
 8005102:	4770      	bx	lr
 8005104:	f803 1b01 	strb.w	r1, [r3], #1
 8005108:	e7f9      	b.n	80050fe <memset+0x4>
	...

0800510c <_localeconv_r>:
 800510c:	4800      	ldr	r0, [pc, #0]	; (8005110 <_localeconv_r+0x4>)
 800510e:	4770      	bx	lr
 8005110:	2000015c 	.word	0x2000015c

08005114 <_close_r>:
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	4d06      	ldr	r5, [pc, #24]	; (8005130 <_close_r+0x1c>)
 8005118:	2300      	movs	r3, #0
 800511a:	4604      	mov	r4, r0
 800511c:	4608      	mov	r0, r1
 800511e:	602b      	str	r3, [r5, #0]
 8005120:	f7fc fa1f 	bl	8001562 <_close>
 8005124:	1c43      	adds	r3, r0, #1
 8005126:	d102      	bne.n	800512e <_close_r+0x1a>
 8005128:	682b      	ldr	r3, [r5, #0]
 800512a:	b103      	cbz	r3, 800512e <_close_r+0x1a>
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	bd38      	pop	{r3, r4, r5, pc}
 8005130:	20000428 	.word	0x20000428

08005134 <_lseek_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4d07      	ldr	r5, [pc, #28]	; (8005154 <_lseek_r+0x20>)
 8005138:	4604      	mov	r4, r0
 800513a:	4608      	mov	r0, r1
 800513c:	4611      	mov	r1, r2
 800513e:	2200      	movs	r2, #0
 8005140:	602a      	str	r2, [r5, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	f7fc fa34 	bl	80015b0 <_lseek>
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	d102      	bne.n	8005152 <_lseek_r+0x1e>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	b103      	cbz	r3, 8005152 <_lseek_r+0x1e>
 8005150:	6023      	str	r3, [r4, #0]
 8005152:	bd38      	pop	{r3, r4, r5, pc}
 8005154:	20000428 	.word	0x20000428

08005158 <_read_r>:
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	4d07      	ldr	r5, [pc, #28]	; (8005178 <_read_r+0x20>)
 800515c:	4604      	mov	r4, r0
 800515e:	4608      	mov	r0, r1
 8005160:	4611      	mov	r1, r2
 8005162:	2200      	movs	r2, #0
 8005164:	602a      	str	r2, [r5, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	f7fc f9c2 	bl	80014f0 <_read>
 800516c:	1c43      	adds	r3, r0, #1
 800516e:	d102      	bne.n	8005176 <_read_r+0x1e>
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	b103      	cbz	r3, 8005176 <_read_r+0x1e>
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	bd38      	pop	{r3, r4, r5, pc}
 8005178:	20000428 	.word	0x20000428

0800517c <_write_r>:
 800517c:	b538      	push	{r3, r4, r5, lr}
 800517e:	4d07      	ldr	r5, [pc, #28]	; (800519c <_write_r+0x20>)
 8005180:	4604      	mov	r4, r0
 8005182:	4608      	mov	r0, r1
 8005184:	4611      	mov	r1, r2
 8005186:	2200      	movs	r2, #0
 8005188:	602a      	str	r2, [r5, #0]
 800518a:	461a      	mov	r2, r3
 800518c:	f7fc f9cd 	bl	800152a <_write>
 8005190:	1c43      	adds	r3, r0, #1
 8005192:	d102      	bne.n	800519a <_write_r+0x1e>
 8005194:	682b      	ldr	r3, [r5, #0]
 8005196:	b103      	cbz	r3, 800519a <_write_r+0x1e>
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	bd38      	pop	{r3, r4, r5, pc}
 800519c:	20000428 	.word	0x20000428

080051a0 <__errno>:
 80051a0:	4b01      	ldr	r3, [pc, #4]	; (80051a8 <__errno+0x8>)
 80051a2:	6818      	ldr	r0, [r3, #0]
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	20000068 	.word	0x20000068

080051ac <__libc_init_array>:
 80051ac:	b570      	push	{r4, r5, r6, lr}
 80051ae:	4d0d      	ldr	r5, [pc, #52]	; (80051e4 <__libc_init_array+0x38>)
 80051b0:	4c0d      	ldr	r4, [pc, #52]	; (80051e8 <__libc_init_array+0x3c>)
 80051b2:	1b64      	subs	r4, r4, r5
 80051b4:	10a4      	asrs	r4, r4, #2
 80051b6:	2600      	movs	r6, #0
 80051b8:	42a6      	cmp	r6, r4
 80051ba:	d109      	bne.n	80051d0 <__libc_init_array+0x24>
 80051bc:	4d0b      	ldr	r5, [pc, #44]	; (80051ec <__libc_init_array+0x40>)
 80051be:	4c0c      	ldr	r4, [pc, #48]	; (80051f0 <__libc_init_array+0x44>)
 80051c0:	f001 fef0 	bl	8006fa4 <_init>
 80051c4:	1b64      	subs	r4, r4, r5
 80051c6:	10a4      	asrs	r4, r4, #2
 80051c8:	2600      	movs	r6, #0
 80051ca:	42a6      	cmp	r6, r4
 80051cc:	d105      	bne.n	80051da <__libc_init_array+0x2e>
 80051ce:	bd70      	pop	{r4, r5, r6, pc}
 80051d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d4:	4798      	blx	r3
 80051d6:	3601      	adds	r6, #1
 80051d8:	e7ee      	b.n	80051b8 <__libc_init_array+0xc>
 80051da:	f855 3b04 	ldr.w	r3, [r5], #4
 80051de:	4798      	blx	r3
 80051e0:	3601      	adds	r6, #1
 80051e2:	e7f2      	b.n	80051ca <__libc_init_array+0x1e>
 80051e4:	08007494 	.word	0x08007494
 80051e8:	08007494 	.word	0x08007494
 80051ec:	08007494 	.word	0x08007494
 80051f0:	08007498 	.word	0x08007498

080051f4 <__retarget_lock_init_recursive>:
 80051f4:	4770      	bx	lr

080051f6 <__retarget_lock_acquire_recursive>:
 80051f6:	4770      	bx	lr

080051f8 <__retarget_lock_release_recursive>:
 80051f8:	4770      	bx	lr

080051fa <quorem>:
 80051fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fe:	6903      	ldr	r3, [r0, #16]
 8005200:	690c      	ldr	r4, [r1, #16]
 8005202:	42a3      	cmp	r3, r4
 8005204:	4607      	mov	r7, r0
 8005206:	db7e      	blt.n	8005306 <quorem+0x10c>
 8005208:	3c01      	subs	r4, #1
 800520a:	f101 0814 	add.w	r8, r1, #20
 800520e:	f100 0514 	add.w	r5, r0, #20
 8005212:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005216:	9301      	str	r3, [sp, #4]
 8005218:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800521c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005220:	3301      	adds	r3, #1
 8005222:	429a      	cmp	r2, r3
 8005224:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005228:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800522c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005230:	d331      	bcc.n	8005296 <quorem+0x9c>
 8005232:	f04f 0e00 	mov.w	lr, #0
 8005236:	4640      	mov	r0, r8
 8005238:	46ac      	mov	ip, r5
 800523a:	46f2      	mov	sl, lr
 800523c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005240:	b293      	uxth	r3, r2
 8005242:	fb06 e303 	mla	r3, r6, r3, lr
 8005246:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800524a:	0c1a      	lsrs	r2, r3, #16
 800524c:	b29b      	uxth	r3, r3
 800524e:	ebaa 0303 	sub.w	r3, sl, r3
 8005252:	f8dc a000 	ldr.w	sl, [ip]
 8005256:	fa13 f38a 	uxtah	r3, r3, sl
 800525a:	fb06 220e 	mla	r2, r6, lr, r2
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	9b00      	ldr	r3, [sp, #0]
 8005262:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005266:	b292      	uxth	r2, r2
 8005268:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800526c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005270:	f8bd 3000 	ldrh.w	r3, [sp]
 8005274:	4581      	cmp	r9, r0
 8005276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800527a:	f84c 3b04 	str.w	r3, [ip], #4
 800527e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005282:	d2db      	bcs.n	800523c <quorem+0x42>
 8005284:	f855 300b 	ldr.w	r3, [r5, fp]
 8005288:	b92b      	cbnz	r3, 8005296 <quorem+0x9c>
 800528a:	9b01      	ldr	r3, [sp, #4]
 800528c:	3b04      	subs	r3, #4
 800528e:	429d      	cmp	r5, r3
 8005290:	461a      	mov	r2, r3
 8005292:	d32c      	bcc.n	80052ee <quorem+0xf4>
 8005294:	613c      	str	r4, [r7, #16]
 8005296:	4638      	mov	r0, r7
 8005298:	f001 f9a8 	bl	80065ec <__mcmp>
 800529c:	2800      	cmp	r0, #0
 800529e:	db22      	blt.n	80052e6 <quorem+0xec>
 80052a0:	3601      	adds	r6, #1
 80052a2:	4629      	mov	r1, r5
 80052a4:	2000      	movs	r0, #0
 80052a6:	f858 2b04 	ldr.w	r2, [r8], #4
 80052aa:	f8d1 c000 	ldr.w	ip, [r1]
 80052ae:	b293      	uxth	r3, r2
 80052b0:	1ac3      	subs	r3, r0, r3
 80052b2:	0c12      	lsrs	r2, r2, #16
 80052b4:	fa13 f38c 	uxtah	r3, r3, ip
 80052b8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80052bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052c6:	45c1      	cmp	r9, r8
 80052c8:	f841 3b04 	str.w	r3, [r1], #4
 80052cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80052d0:	d2e9      	bcs.n	80052a6 <quorem+0xac>
 80052d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052da:	b922      	cbnz	r2, 80052e6 <quorem+0xec>
 80052dc:	3b04      	subs	r3, #4
 80052de:	429d      	cmp	r5, r3
 80052e0:	461a      	mov	r2, r3
 80052e2:	d30a      	bcc.n	80052fa <quorem+0x100>
 80052e4:	613c      	str	r4, [r7, #16]
 80052e6:	4630      	mov	r0, r6
 80052e8:	b003      	add	sp, #12
 80052ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	3b04      	subs	r3, #4
 80052f2:	2a00      	cmp	r2, #0
 80052f4:	d1ce      	bne.n	8005294 <quorem+0x9a>
 80052f6:	3c01      	subs	r4, #1
 80052f8:	e7c9      	b.n	800528e <quorem+0x94>
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	3b04      	subs	r3, #4
 80052fe:	2a00      	cmp	r2, #0
 8005300:	d1f0      	bne.n	80052e4 <quorem+0xea>
 8005302:	3c01      	subs	r4, #1
 8005304:	e7eb      	b.n	80052de <quorem+0xe4>
 8005306:	2000      	movs	r0, #0
 8005308:	e7ee      	b.n	80052e8 <quorem+0xee>
 800530a:	0000      	movs	r0, r0
 800530c:	0000      	movs	r0, r0
	...

08005310 <_dtoa_r>:
 8005310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005314:	ed2d 8b04 	vpush	{d8-d9}
 8005318:	69c5      	ldr	r5, [r0, #28]
 800531a:	b093      	sub	sp, #76	; 0x4c
 800531c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005320:	ec57 6b10 	vmov	r6, r7, d0
 8005324:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005328:	9107      	str	r1, [sp, #28]
 800532a:	4604      	mov	r4, r0
 800532c:	920a      	str	r2, [sp, #40]	; 0x28
 800532e:	930d      	str	r3, [sp, #52]	; 0x34
 8005330:	b975      	cbnz	r5, 8005350 <_dtoa_r+0x40>
 8005332:	2010      	movs	r0, #16
 8005334:	f000 fe2a 	bl	8005f8c <malloc>
 8005338:	4602      	mov	r2, r0
 800533a:	61e0      	str	r0, [r4, #28]
 800533c:	b920      	cbnz	r0, 8005348 <_dtoa_r+0x38>
 800533e:	4bae      	ldr	r3, [pc, #696]	; (80055f8 <_dtoa_r+0x2e8>)
 8005340:	21ef      	movs	r1, #239	; 0xef
 8005342:	48ae      	ldr	r0, [pc, #696]	; (80055fc <_dtoa_r+0x2ec>)
 8005344:	f001 fcf8 	bl	8006d38 <__assert_func>
 8005348:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800534c:	6005      	str	r5, [r0, #0]
 800534e:	60c5      	str	r5, [r0, #12]
 8005350:	69e3      	ldr	r3, [r4, #28]
 8005352:	6819      	ldr	r1, [r3, #0]
 8005354:	b151      	cbz	r1, 800536c <_dtoa_r+0x5c>
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	604a      	str	r2, [r1, #4]
 800535a:	2301      	movs	r3, #1
 800535c:	4093      	lsls	r3, r2
 800535e:	608b      	str	r3, [r1, #8]
 8005360:	4620      	mov	r0, r4
 8005362:	f000 ff07 	bl	8006174 <_Bfree>
 8005366:	69e3      	ldr	r3, [r4, #28]
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	1e3b      	subs	r3, r7, #0
 800536e:	bfbb      	ittet	lt
 8005370:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005374:	9303      	strlt	r3, [sp, #12]
 8005376:	2300      	movge	r3, #0
 8005378:	2201      	movlt	r2, #1
 800537a:	bfac      	ite	ge
 800537c:	f8c8 3000 	strge.w	r3, [r8]
 8005380:	f8c8 2000 	strlt.w	r2, [r8]
 8005384:	4b9e      	ldr	r3, [pc, #632]	; (8005600 <_dtoa_r+0x2f0>)
 8005386:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800538a:	ea33 0308 	bics.w	r3, r3, r8
 800538e:	d11b      	bne.n	80053c8 <_dtoa_r+0xb8>
 8005390:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005392:	f242 730f 	movw	r3, #9999	; 0x270f
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800539c:	4333      	orrs	r3, r6
 800539e:	f000 8593 	beq.w	8005ec8 <_dtoa_r+0xbb8>
 80053a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053a4:	b963      	cbnz	r3, 80053c0 <_dtoa_r+0xb0>
 80053a6:	4b97      	ldr	r3, [pc, #604]	; (8005604 <_dtoa_r+0x2f4>)
 80053a8:	e027      	b.n	80053fa <_dtoa_r+0xea>
 80053aa:	4b97      	ldr	r3, [pc, #604]	; (8005608 <_dtoa_r+0x2f8>)
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	3308      	adds	r3, #8
 80053b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	9800      	ldr	r0, [sp, #0]
 80053b6:	b013      	add	sp, #76	; 0x4c
 80053b8:	ecbd 8b04 	vpop	{d8-d9}
 80053bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c0:	4b90      	ldr	r3, [pc, #576]	; (8005604 <_dtoa_r+0x2f4>)
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	3303      	adds	r3, #3
 80053c6:	e7f3      	b.n	80053b0 <_dtoa_r+0xa0>
 80053c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80053cc:	2200      	movs	r2, #0
 80053ce:	ec51 0b17 	vmov	r0, r1, d7
 80053d2:	eeb0 8a47 	vmov.f32	s16, s14
 80053d6:	eef0 8a67 	vmov.f32	s17, s15
 80053da:	2300      	movs	r3, #0
 80053dc:	f7fb fb4c 	bl	8000a78 <__aeabi_dcmpeq>
 80053e0:	4681      	mov	r9, r0
 80053e2:	b160      	cbz	r0, 80053fe <_dtoa_r+0xee>
 80053e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80053e6:	2301      	movs	r3, #1
 80053e8:	6013      	str	r3, [r2, #0]
 80053ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 8568 	beq.w	8005ec2 <_dtoa_r+0xbb2>
 80053f2:	4b86      	ldr	r3, [pc, #536]	; (800560c <_dtoa_r+0x2fc>)
 80053f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	3b01      	subs	r3, #1
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	e7da      	b.n	80053b4 <_dtoa_r+0xa4>
 80053fe:	aa10      	add	r2, sp, #64	; 0x40
 8005400:	a911      	add	r1, sp, #68	; 0x44
 8005402:	4620      	mov	r0, r4
 8005404:	eeb0 0a48 	vmov.f32	s0, s16
 8005408:	eef0 0a68 	vmov.f32	s1, s17
 800540c:	f001 f994 	bl	8006738 <__d2b>
 8005410:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005414:	4682      	mov	sl, r0
 8005416:	2d00      	cmp	r5, #0
 8005418:	d07f      	beq.n	800551a <_dtoa_r+0x20a>
 800541a:	ee18 3a90 	vmov	r3, s17
 800541e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005422:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005426:	ec51 0b18 	vmov	r0, r1, d8
 800542a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800542e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005432:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005436:	4619      	mov	r1, r3
 8005438:	2200      	movs	r2, #0
 800543a:	4b75      	ldr	r3, [pc, #468]	; (8005610 <_dtoa_r+0x300>)
 800543c:	f7fa fefc 	bl	8000238 <__aeabi_dsub>
 8005440:	a367      	add	r3, pc, #412	; (adr r3, 80055e0 <_dtoa_r+0x2d0>)
 8005442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005446:	f7fb f8af 	bl	80005a8 <__aeabi_dmul>
 800544a:	a367      	add	r3, pc, #412	; (adr r3, 80055e8 <_dtoa_r+0x2d8>)
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	f7fa fef4 	bl	800023c <__adddf3>
 8005454:	4606      	mov	r6, r0
 8005456:	4628      	mov	r0, r5
 8005458:	460f      	mov	r7, r1
 800545a:	f7fb f83b 	bl	80004d4 <__aeabi_i2d>
 800545e:	a364      	add	r3, pc, #400	; (adr r3, 80055f0 <_dtoa_r+0x2e0>)
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f7fb f8a0 	bl	80005a8 <__aeabi_dmul>
 8005468:	4602      	mov	r2, r0
 800546a:	460b      	mov	r3, r1
 800546c:	4630      	mov	r0, r6
 800546e:	4639      	mov	r1, r7
 8005470:	f7fa fee4 	bl	800023c <__adddf3>
 8005474:	4606      	mov	r6, r0
 8005476:	460f      	mov	r7, r1
 8005478:	f7fb fb46 	bl	8000b08 <__aeabi_d2iz>
 800547c:	2200      	movs	r2, #0
 800547e:	4683      	mov	fp, r0
 8005480:	2300      	movs	r3, #0
 8005482:	4630      	mov	r0, r6
 8005484:	4639      	mov	r1, r7
 8005486:	f7fb fb01 	bl	8000a8c <__aeabi_dcmplt>
 800548a:	b148      	cbz	r0, 80054a0 <_dtoa_r+0x190>
 800548c:	4658      	mov	r0, fp
 800548e:	f7fb f821 	bl	80004d4 <__aeabi_i2d>
 8005492:	4632      	mov	r2, r6
 8005494:	463b      	mov	r3, r7
 8005496:	f7fb faef 	bl	8000a78 <__aeabi_dcmpeq>
 800549a:	b908      	cbnz	r0, 80054a0 <_dtoa_r+0x190>
 800549c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80054a0:	f1bb 0f16 	cmp.w	fp, #22
 80054a4:	d857      	bhi.n	8005556 <_dtoa_r+0x246>
 80054a6:	4b5b      	ldr	r3, [pc, #364]	; (8005614 <_dtoa_r+0x304>)
 80054a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b0:	ec51 0b18 	vmov	r0, r1, d8
 80054b4:	f7fb faea 	bl	8000a8c <__aeabi_dcmplt>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	d04e      	beq.n	800555a <_dtoa_r+0x24a>
 80054bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80054c0:	2300      	movs	r3, #0
 80054c2:	930c      	str	r3, [sp, #48]	; 0x30
 80054c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80054c6:	1b5b      	subs	r3, r3, r5
 80054c8:	1e5a      	subs	r2, r3, #1
 80054ca:	bf45      	ittet	mi
 80054cc:	f1c3 0301 	rsbmi	r3, r3, #1
 80054d0:	9305      	strmi	r3, [sp, #20]
 80054d2:	2300      	movpl	r3, #0
 80054d4:	2300      	movmi	r3, #0
 80054d6:	9206      	str	r2, [sp, #24]
 80054d8:	bf54      	ite	pl
 80054da:	9305      	strpl	r3, [sp, #20]
 80054dc:	9306      	strmi	r3, [sp, #24]
 80054de:	f1bb 0f00 	cmp.w	fp, #0
 80054e2:	db3c      	blt.n	800555e <_dtoa_r+0x24e>
 80054e4:	9b06      	ldr	r3, [sp, #24]
 80054e6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80054ea:	445b      	add	r3, fp
 80054ec:	9306      	str	r3, [sp, #24]
 80054ee:	2300      	movs	r3, #0
 80054f0:	9308      	str	r3, [sp, #32]
 80054f2:	9b07      	ldr	r3, [sp, #28]
 80054f4:	2b09      	cmp	r3, #9
 80054f6:	d868      	bhi.n	80055ca <_dtoa_r+0x2ba>
 80054f8:	2b05      	cmp	r3, #5
 80054fa:	bfc4      	itt	gt
 80054fc:	3b04      	subgt	r3, #4
 80054fe:	9307      	strgt	r3, [sp, #28]
 8005500:	9b07      	ldr	r3, [sp, #28]
 8005502:	f1a3 0302 	sub.w	r3, r3, #2
 8005506:	bfcc      	ite	gt
 8005508:	2500      	movgt	r5, #0
 800550a:	2501      	movle	r5, #1
 800550c:	2b03      	cmp	r3, #3
 800550e:	f200 8085 	bhi.w	800561c <_dtoa_r+0x30c>
 8005512:	e8df f003 	tbb	[pc, r3]
 8005516:	3b2e      	.short	0x3b2e
 8005518:	5839      	.short	0x5839
 800551a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800551e:	441d      	add	r5, r3
 8005520:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005524:	2b20      	cmp	r3, #32
 8005526:	bfc1      	itttt	gt
 8005528:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800552c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005530:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005534:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005538:	bfd6      	itet	le
 800553a:	f1c3 0320 	rsble	r3, r3, #32
 800553e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005542:	fa06 f003 	lslle.w	r0, r6, r3
 8005546:	f7fa ffb5 	bl	80004b4 <__aeabi_ui2d>
 800554a:	2201      	movs	r2, #1
 800554c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005550:	3d01      	subs	r5, #1
 8005552:	920e      	str	r2, [sp, #56]	; 0x38
 8005554:	e76f      	b.n	8005436 <_dtoa_r+0x126>
 8005556:	2301      	movs	r3, #1
 8005558:	e7b3      	b.n	80054c2 <_dtoa_r+0x1b2>
 800555a:	900c      	str	r0, [sp, #48]	; 0x30
 800555c:	e7b2      	b.n	80054c4 <_dtoa_r+0x1b4>
 800555e:	9b05      	ldr	r3, [sp, #20]
 8005560:	eba3 030b 	sub.w	r3, r3, fp
 8005564:	9305      	str	r3, [sp, #20]
 8005566:	f1cb 0300 	rsb	r3, fp, #0
 800556a:	9308      	str	r3, [sp, #32]
 800556c:	2300      	movs	r3, #0
 800556e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005570:	e7bf      	b.n	80054f2 <_dtoa_r+0x1e2>
 8005572:	2300      	movs	r3, #0
 8005574:	9309      	str	r3, [sp, #36]	; 0x24
 8005576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005578:	2b00      	cmp	r3, #0
 800557a:	dc52      	bgt.n	8005622 <_dtoa_r+0x312>
 800557c:	2301      	movs	r3, #1
 800557e:	9301      	str	r3, [sp, #4]
 8005580:	9304      	str	r3, [sp, #16]
 8005582:	461a      	mov	r2, r3
 8005584:	920a      	str	r2, [sp, #40]	; 0x28
 8005586:	e00b      	b.n	80055a0 <_dtoa_r+0x290>
 8005588:	2301      	movs	r3, #1
 800558a:	e7f3      	b.n	8005574 <_dtoa_r+0x264>
 800558c:	2300      	movs	r3, #0
 800558e:	9309      	str	r3, [sp, #36]	; 0x24
 8005590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005592:	445b      	add	r3, fp
 8005594:	9301      	str	r3, [sp, #4]
 8005596:	3301      	adds	r3, #1
 8005598:	2b01      	cmp	r3, #1
 800559a:	9304      	str	r3, [sp, #16]
 800559c:	bfb8      	it	lt
 800559e:	2301      	movlt	r3, #1
 80055a0:	69e0      	ldr	r0, [r4, #28]
 80055a2:	2100      	movs	r1, #0
 80055a4:	2204      	movs	r2, #4
 80055a6:	f102 0614 	add.w	r6, r2, #20
 80055aa:	429e      	cmp	r6, r3
 80055ac:	d93d      	bls.n	800562a <_dtoa_r+0x31a>
 80055ae:	6041      	str	r1, [r0, #4]
 80055b0:	4620      	mov	r0, r4
 80055b2:	f000 fd9f 	bl	80060f4 <_Balloc>
 80055b6:	9000      	str	r0, [sp, #0]
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d139      	bne.n	8005630 <_dtoa_r+0x320>
 80055bc:	4b16      	ldr	r3, [pc, #88]	; (8005618 <_dtoa_r+0x308>)
 80055be:	4602      	mov	r2, r0
 80055c0:	f240 11af 	movw	r1, #431	; 0x1af
 80055c4:	e6bd      	b.n	8005342 <_dtoa_r+0x32>
 80055c6:	2301      	movs	r3, #1
 80055c8:	e7e1      	b.n	800558e <_dtoa_r+0x27e>
 80055ca:	2501      	movs	r5, #1
 80055cc:	2300      	movs	r3, #0
 80055ce:	9307      	str	r3, [sp, #28]
 80055d0:	9509      	str	r5, [sp, #36]	; 0x24
 80055d2:	f04f 33ff 	mov.w	r3, #4294967295
 80055d6:	9301      	str	r3, [sp, #4]
 80055d8:	9304      	str	r3, [sp, #16]
 80055da:	2200      	movs	r2, #0
 80055dc:	2312      	movs	r3, #18
 80055de:	e7d1      	b.n	8005584 <_dtoa_r+0x274>
 80055e0:	636f4361 	.word	0x636f4361
 80055e4:	3fd287a7 	.word	0x3fd287a7
 80055e8:	8b60c8b3 	.word	0x8b60c8b3
 80055ec:	3fc68a28 	.word	0x3fc68a28
 80055f0:	509f79fb 	.word	0x509f79fb
 80055f4:	3fd34413 	.word	0x3fd34413
 80055f8:	08007159 	.word	0x08007159
 80055fc:	08007170 	.word	0x08007170
 8005600:	7ff00000 	.word	0x7ff00000
 8005604:	08007155 	.word	0x08007155
 8005608:	0800714c 	.word	0x0800714c
 800560c:	08007129 	.word	0x08007129
 8005610:	3ff80000 	.word	0x3ff80000
 8005614:	08007260 	.word	0x08007260
 8005618:	080071c8 	.word	0x080071c8
 800561c:	2301      	movs	r3, #1
 800561e:	9309      	str	r3, [sp, #36]	; 0x24
 8005620:	e7d7      	b.n	80055d2 <_dtoa_r+0x2c2>
 8005622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005624:	9301      	str	r3, [sp, #4]
 8005626:	9304      	str	r3, [sp, #16]
 8005628:	e7ba      	b.n	80055a0 <_dtoa_r+0x290>
 800562a:	3101      	adds	r1, #1
 800562c:	0052      	lsls	r2, r2, #1
 800562e:	e7ba      	b.n	80055a6 <_dtoa_r+0x296>
 8005630:	69e3      	ldr	r3, [r4, #28]
 8005632:	9a00      	ldr	r2, [sp, #0]
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	9b04      	ldr	r3, [sp, #16]
 8005638:	2b0e      	cmp	r3, #14
 800563a:	f200 80a8 	bhi.w	800578e <_dtoa_r+0x47e>
 800563e:	2d00      	cmp	r5, #0
 8005640:	f000 80a5 	beq.w	800578e <_dtoa_r+0x47e>
 8005644:	f1bb 0f00 	cmp.w	fp, #0
 8005648:	dd38      	ble.n	80056bc <_dtoa_r+0x3ac>
 800564a:	4bc0      	ldr	r3, [pc, #768]	; (800594c <_dtoa_r+0x63c>)
 800564c:	f00b 020f 	and.w	r2, fp, #15
 8005650:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005654:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005658:	e9d3 6700 	ldrd	r6, r7, [r3]
 800565c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005660:	d019      	beq.n	8005696 <_dtoa_r+0x386>
 8005662:	4bbb      	ldr	r3, [pc, #748]	; (8005950 <_dtoa_r+0x640>)
 8005664:	ec51 0b18 	vmov	r0, r1, d8
 8005668:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800566c:	f7fb f8c6 	bl	80007fc <__aeabi_ddiv>
 8005670:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005674:	f008 080f 	and.w	r8, r8, #15
 8005678:	2503      	movs	r5, #3
 800567a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005950 <_dtoa_r+0x640>
 800567e:	f1b8 0f00 	cmp.w	r8, #0
 8005682:	d10a      	bne.n	800569a <_dtoa_r+0x38a>
 8005684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005688:	4632      	mov	r2, r6
 800568a:	463b      	mov	r3, r7
 800568c:	f7fb f8b6 	bl	80007fc <__aeabi_ddiv>
 8005690:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005694:	e02b      	b.n	80056ee <_dtoa_r+0x3de>
 8005696:	2502      	movs	r5, #2
 8005698:	e7ef      	b.n	800567a <_dtoa_r+0x36a>
 800569a:	f018 0f01 	tst.w	r8, #1
 800569e:	d008      	beq.n	80056b2 <_dtoa_r+0x3a2>
 80056a0:	4630      	mov	r0, r6
 80056a2:	4639      	mov	r1, r7
 80056a4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80056a8:	f7fa ff7e 	bl	80005a8 <__aeabi_dmul>
 80056ac:	3501      	adds	r5, #1
 80056ae:	4606      	mov	r6, r0
 80056b0:	460f      	mov	r7, r1
 80056b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80056b6:	f109 0908 	add.w	r9, r9, #8
 80056ba:	e7e0      	b.n	800567e <_dtoa_r+0x36e>
 80056bc:	f000 809f 	beq.w	80057fe <_dtoa_r+0x4ee>
 80056c0:	f1cb 0600 	rsb	r6, fp, #0
 80056c4:	4ba1      	ldr	r3, [pc, #644]	; (800594c <_dtoa_r+0x63c>)
 80056c6:	4fa2      	ldr	r7, [pc, #648]	; (8005950 <_dtoa_r+0x640>)
 80056c8:	f006 020f 	and.w	r2, r6, #15
 80056cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d4:	ec51 0b18 	vmov	r0, r1, d8
 80056d8:	f7fa ff66 	bl	80005a8 <__aeabi_dmul>
 80056dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056e0:	1136      	asrs	r6, r6, #4
 80056e2:	2300      	movs	r3, #0
 80056e4:	2502      	movs	r5, #2
 80056e6:	2e00      	cmp	r6, #0
 80056e8:	d17e      	bne.n	80057e8 <_dtoa_r+0x4d8>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1d0      	bne.n	8005690 <_dtoa_r+0x380>
 80056ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056f0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f000 8084 	beq.w	8005802 <_dtoa_r+0x4f2>
 80056fa:	4b96      	ldr	r3, [pc, #600]	; (8005954 <_dtoa_r+0x644>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	4640      	mov	r0, r8
 8005700:	4649      	mov	r1, r9
 8005702:	f7fb f9c3 	bl	8000a8c <__aeabi_dcmplt>
 8005706:	2800      	cmp	r0, #0
 8005708:	d07b      	beq.n	8005802 <_dtoa_r+0x4f2>
 800570a:	9b04      	ldr	r3, [sp, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d078      	beq.n	8005802 <_dtoa_r+0x4f2>
 8005710:	9b01      	ldr	r3, [sp, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	dd39      	ble.n	800578a <_dtoa_r+0x47a>
 8005716:	4b90      	ldr	r3, [pc, #576]	; (8005958 <_dtoa_r+0x648>)
 8005718:	2200      	movs	r2, #0
 800571a:	4640      	mov	r0, r8
 800571c:	4649      	mov	r1, r9
 800571e:	f7fa ff43 	bl	80005a8 <__aeabi_dmul>
 8005722:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005726:	9e01      	ldr	r6, [sp, #4]
 8005728:	f10b 37ff 	add.w	r7, fp, #4294967295
 800572c:	3501      	adds	r5, #1
 800572e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005732:	4628      	mov	r0, r5
 8005734:	f7fa fece 	bl	80004d4 <__aeabi_i2d>
 8005738:	4642      	mov	r2, r8
 800573a:	464b      	mov	r3, r9
 800573c:	f7fa ff34 	bl	80005a8 <__aeabi_dmul>
 8005740:	4b86      	ldr	r3, [pc, #536]	; (800595c <_dtoa_r+0x64c>)
 8005742:	2200      	movs	r2, #0
 8005744:	f7fa fd7a 	bl	800023c <__adddf3>
 8005748:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800574c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005750:	9303      	str	r3, [sp, #12]
 8005752:	2e00      	cmp	r6, #0
 8005754:	d158      	bne.n	8005808 <_dtoa_r+0x4f8>
 8005756:	4b82      	ldr	r3, [pc, #520]	; (8005960 <_dtoa_r+0x650>)
 8005758:	2200      	movs	r2, #0
 800575a:	4640      	mov	r0, r8
 800575c:	4649      	mov	r1, r9
 800575e:	f7fa fd6b 	bl	8000238 <__aeabi_dsub>
 8005762:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005766:	4680      	mov	r8, r0
 8005768:	4689      	mov	r9, r1
 800576a:	f7fb f9ad 	bl	8000ac8 <__aeabi_dcmpgt>
 800576e:	2800      	cmp	r0, #0
 8005770:	f040 8296 	bne.w	8005ca0 <_dtoa_r+0x990>
 8005774:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005778:	4640      	mov	r0, r8
 800577a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800577e:	4649      	mov	r1, r9
 8005780:	f7fb f984 	bl	8000a8c <__aeabi_dcmplt>
 8005784:	2800      	cmp	r0, #0
 8005786:	f040 8289 	bne.w	8005c9c <_dtoa_r+0x98c>
 800578a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800578e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005790:	2b00      	cmp	r3, #0
 8005792:	f2c0 814e 	blt.w	8005a32 <_dtoa_r+0x722>
 8005796:	f1bb 0f0e 	cmp.w	fp, #14
 800579a:	f300 814a 	bgt.w	8005a32 <_dtoa_r+0x722>
 800579e:	4b6b      	ldr	r3, [pc, #428]	; (800594c <_dtoa_r+0x63c>)
 80057a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80057a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f280 80dc 	bge.w	8005968 <_dtoa_r+0x658>
 80057b0:	9b04      	ldr	r3, [sp, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f300 80d8 	bgt.w	8005968 <_dtoa_r+0x658>
 80057b8:	f040 826f 	bne.w	8005c9a <_dtoa_r+0x98a>
 80057bc:	4b68      	ldr	r3, [pc, #416]	; (8005960 <_dtoa_r+0x650>)
 80057be:	2200      	movs	r2, #0
 80057c0:	4640      	mov	r0, r8
 80057c2:	4649      	mov	r1, r9
 80057c4:	f7fa fef0 	bl	80005a8 <__aeabi_dmul>
 80057c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057cc:	f7fb f972 	bl	8000ab4 <__aeabi_dcmpge>
 80057d0:	9e04      	ldr	r6, [sp, #16]
 80057d2:	4637      	mov	r7, r6
 80057d4:	2800      	cmp	r0, #0
 80057d6:	f040 8245 	bne.w	8005c64 <_dtoa_r+0x954>
 80057da:	9d00      	ldr	r5, [sp, #0]
 80057dc:	2331      	movs	r3, #49	; 0x31
 80057de:	f805 3b01 	strb.w	r3, [r5], #1
 80057e2:	f10b 0b01 	add.w	fp, fp, #1
 80057e6:	e241      	b.n	8005c6c <_dtoa_r+0x95c>
 80057e8:	07f2      	lsls	r2, r6, #31
 80057ea:	d505      	bpl.n	80057f8 <_dtoa_r+0x4e8>
 80057ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057f0:	f7fa feda 	bl	80005a8 <__aeabi_dmul>
 80057f4:	3501      	adds	r5, #1
 80057f6:	2301      	movs	r3, #1
 80057f8:	1076      	asrs	r6, r6, #1
 80057fa:	3708      	adds	r7, #8
 80057fc:	e773      	b.n	80056e6 <_dtoa_r+0x3d6>
 80057fe:	2502      	movs	r5, #2
 8005800:	e775      	b.n	80056ee <_dtoa_r+0x3de>
 8005802:	9e04      	ldr	r6, [sp, #16]
 8005804:	465f      	mov	r7, fp
 8005806:	e792      	b.n	800572e <_dtoa_r+0x41e>
 8005808:	9900      	ldr	r1, [sp, #0]
 800580a:	4b50      	ldr	r3, [pc, #320]	; (800594c <_dtoa_r+0x63c>)
 800580c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005810:	4431      	add	r1, r6
 8005812:	9102      	str	r1, [sp, #8]
 8005814:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005816:	eeb0 9a47 	vmov.f32	s18, s14
 800581a:	eef0 9a67 	vmov.f32	s19, s15
 800581e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005822:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005826:	2900      	cmp	r1, #0
 8005828:	d044      	beq.n	80058b4 <_dtoa_r+0x5a4>
 800582a:	494e      	ldr	r1, [pc, #312]	; (8005964 <_dtoa_r+0x654>)
 800582c:	2000      	movs	r0, #0
 800582e:	f7fa ffe5 	bl	80007fc <__aeabi_ddiv>
 8005832:	ec53 2b19 	vmov	r2, r3, d9
 8005836:	f7fa fcff 	bl	8000238 <__aeabi_dsub>
 800583a:	9d00      	ldr	r5, [sp, #0]
 800583c:	ec41 0b19 	vmov	d9, r0, r1
 8005840:	4649      	mov	r1, r9
 8005842:	4640      	mov	r0, r8
 8005844:	f7fb f960 	bl	8000b08 <__aeabi_d2iz>
 8005848:	4606      	mov	r6, r0
 800584a:	f7fa fe43 	bl	80004d4 <__aeabi_i2d>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4640      	mov	r0, r8
 8005854:	4649      	mov	r1, r9
 8005856:	f7fa fcef 	bl	8000238 <__aeabi_dsub>
 800585a:	3630      	adds	r6, #48	; 0x30
 800585c:	f805 6b01 	strb.w	r6, [r5], #1
 8005860:	ec53 2b19 	vmov	r2, r3, d9
 8005864:	4680      	mov	r8, r0
 8005866:	4689      	mov	r9, r1
 8005868:	f7fb f910 	bl	8000a8c <__aeabi_dcmplt>
 800586c:	2800      	cmp	r0, #0
 800586e:	d164      	bne.n	800593a <_dtoa_r+0x62a>
 8005870:	4642      	mov	r2, r8
 8005872:	464b      	mov	r3, r9
 8005874:	4937      	ldr	r1, [pc, #220]	; (8005954 <_dtoa_r+0x644>)
 8005876:	2000      	movs	r0, #0
 8005878:	f7fa fcde 	bl	8000238 <__aeabi_dsub>
 800587c:	ec53 2b19 	vmov	r2, r3, d9
 8005880:	f7fb f904 	bl	8000a8c <__aeabi_dcmplt>
 8005884:	2800      	cmp	r0, #0
 8005886:	f040 80b6 	bne.w	80059f6 <_dtoa_r+0x6e6>
 800588a:	9b02      	ldr	r3, [sp, #8]
 800588c:	429d      	cmp	r5, r3
 800588e:	f43f af7c 	beq.w	800578a <_dtoa_r+0x47a>
 8005892:	4b31      	ldr	r3, [pc, #196]	; (8005958 <_dtoa_r+0x648>)
 8005894:	ec51 0b19 	vmov	r0, r1, d9
 8005898:	2200      	movs	r2, #0
 800589a:	f7fa fe85 	bl	80005a8 <__aeabi_dmul>
 800589e:	4b2e      	ldr	r3, [pc, #184]	; (8005958 <_dtoa_r+0x648>)
 80058a0:	ec41 0b19 	vmov	d9, r0, r1
 80058a4:	2200      	movs	r2, #0
 80058a6:	4640      	mov	r0, r8
 80058a8:	4649      	mov	r1, r9
 80058aa:	f7fa fe7d 	bl	80005a8 <__aeabi_dmul>
 80058ae:	4680      	mov	r8, r0
 80058b0:	4689      	mov	r9, r1
 80058b2:	e7c5      	b.n	8005840 <_dtoa_r+0x530>
 80058b4:	ec51 0b17 	vmov	r0, r1, d7
 80058b8:	f7fa fe76 	bl	80005a8 <__aeabi_dmul>
 80058bc:	9b02      	ldr	r3, [sp, #8]
 80058be:	9d00      	ldr	r5, [sp, #0]
 80058c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80058c2:	ec41 0b19 	vmov	d9, r0, r1
 80058c6:	4649      	mov	r1, r9
 80058c8:	4640      	mov	r0, r8
 80058ca:	f7fb f91d 	bl	8000b08 <__aeabi_d2iz>
 80058ce:	4606      	mov	r6, r0
 80058d0:	f7fa fe00 	bl	80004d4 <__aeabi_i2d>
 80058d4:	3630      	adds	r6, #48	; 0x30
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4640      	mov	r0, r8
 80058dc:	4649      	mov	r1, r9
 80058de:	f7fa fcab 	bl	8000238 <__aeabi_dsub>
 80058e2:	f805 6b01 	strb.w	r6, [r5], #1
 80058e6:	9b02      	ldr	r3, [sp, #8]
 80058e8:	429d      	cmp	r5, r3
 80058ea:	4680      	mov	r8, r0
 80058ec:	4689      	mov	r9, r1
 80058ee:	f04f 0200 	mov.w	r2, #0
 80058f2:	d124      	bne.n	800593e <_dtoa_r+0x62e>
 80058f4:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <_dtoa_r+0x654>)
 80058f6:	ec51 0b19 	vmov	r0, r1, d9
 80058fa:	f7fa fc9f 	bl	800023c <__adddf3>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4640      	mov	r0, r8
 8005904:	4649      	mov	r1, r9
 8005906:	f7fb f8df 	bl	8000ac8 <__aeabi_dcmpgt>
 800590a:	2800      	cmp	r0, #0
 800590c:	d173      	bne.n	80059f6 <_dtoa_r+0x6e6>
 800590e:	ec53 2b19 	vmov	r2, r3, d9
 8005912:	4914      	ldr	r1, [pc, #80]	; (8005964 <_dtoa_r+0x654>)
 8005914:	2000      	movs	r0, #0
 8005916:	f7fa fc8f 	bl	8000238 <__aeabi_dsub>
 800591a:	4602      	mov	r2, r0
 800591c:	460b      	mov	r3, r1
 800591e:	4640      	mov	r0, r8
 8005920:	4649      	mov	r1, r9
 8005922:	f7fb f8b3 	bl	8000a8c <__aeabi_dcmplt>
 8005926:	2800      	cmp	r0, #0
 8005928:	f43f af2f 	beq.w	800578a <_dtoa_r+0x47a>
 800592c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800592e:	1e6b      	subs	r3, r5, #1
 8005930:	930f      	str	r3, [sp, #60]	; 0x3c
 8005932:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005936:	2b30      	cmp	r3, #48	; 0x30
 8005938:	d0f8      	beq.n	800592c <_dtoa_r+0x61c>
 800593a:	46bb      	mov	fp, r7
 800593c:	e04a      	b.n	80059d4 <_dtoa_r+0x6c4>
 800593e:	4b06      	ldr	r3, [pc, #24]	; (8005958 <_dtoa_r+0x648>)
 8005940:	f7fa fe32 	bl	80005a8 <__aeabi_dmul>
 8005944:	4680      	mov	r8, r0
 8005946:	4689      	mov	r9, r1
 8005948:	e7bd      	b.n	80058c6 <_dtoa_r+0x5b6>
 800594a:	bf00      	nop
 800594c:	08007260 	.word	0x08007260
 8005950:	08007238 	.word	0x08007238
 8005954:	3ff00000 	.word	0x3ff00000
 8005958:	40240000 	.word	0x40240000
 800595c:	401c0000 	.word	0x401c0000
 8005960:	40140000 	.word	0x40140000
 8005964:	3fe00000 	.word	0x3fe00000
 8005968:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800596c:	9d00      	ldr	r5, [sp, #0]
 800596e:	4642      	mov	r2, r8
 8005970:	464b      	mov	r3, r9
 8005972:	4630      	mov	r0, r6
 8005974:	4639      	mov	r1, r7
 8005976:	f7fa ff41 	bl	80007fc <__aeabi_ddiv>
 800597a:	f7fb f8c5 	bl	8000b08 <__aeabi_d2iz>
 800597e:	9001      	str	r0, [sp, #4]
 8005980:	f7fa fda8 	bl	80004d4 <__aeabi_i2d>
 8005984:	4642      	mov	r2, r8
 8005986:	464b      	mov	r3, r9
 8005988:	f7fa fe0e 	bl	80005a8 <__aeabi_dmul>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	4630      	mov	r0, r6
 8005992:	4639      	mov	r1, r7
 8005994:	f7fa fc50 	bl	8000238 <__aeabi_dsub>
 8005998:	9e01      	ldr	r6, [sp, #4]
 800599a:	9f04      	ldr	r7, [sp, #16]
 800599c:	3630      	adds	r6, #48	; 0x30
 800599e:	f805 6b01 	strb.w	r6, [r5], #1
 80059a2:	9e00      	ldr	r6, [sp, #0]
 80059a4:	1bae      	subs	r6, r5, r6
 80059a6:	42b7      	cmp	r7, r6
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	d134      	bne.n	8005a18 <_dtoa_r+0x708>
 80059ae:	f7fa fc45 	bl	800023c <__adddf3>
 80059b2:	4642      	mov	r2, r8
 80059b4:	464b      	mov	r3, r9
 80059b6:	4606      	mov	r6, r0
 80059b8:	460f      	mov	r7, r1
 80059ba:	f7fb f885 	bl	8000ac8 <__aeabi_dcmpgt>
 80059be:	b9c8      	cbnz	r0, 80059f4 <_dtoa_r+0x6e4>
 80059c0:	4642      	mov	r2, r8
 80059c2:	464b      	mov	r3, r9
 80059c4:	4630      	mov	r0, r6
 80059c6:	4639      	mov	r1, r7
 80059c8:	f7fb f856 	bl	8000a78 <__aeabi_dcmpeq>
 80059cc:	b110      	cbz	r0, 80059d4 <_dtoa_r+0x6c4>
 80059ce:	9b01      	ldr	r3, [sp, #4]
 80059d0:	07db      	lsls	r3, r3, #31
 80059d2:	d40f      	bmi.n	80059f4 <_dtoa_r+0x6e4>
 80059d4:	4651      	mov	r1, sl
 80059d6:	4620      	mov	r0, r4
 80059d8:	f000 fbcc 	bl	8006174 <_Bfree>
 80059dc:	2300      	movs	r3, #0
 80059de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80059e0:	702b      	strb	r3, [r5, #0]
 80059e2:	f10b 0301 	add.w	r3, fp, #1
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f43f ace2 	beq.w	80053b4 <_dtoa_r+0xa4>
 80059f0:	601d      	str	r5, [r3, #0]
 80059f2:	e4df      	b.n	80053b4 <_dtoa_r+0xa4>
 80059f4:	465f      	mov	r7, fp
 80059f6:	462b      	mov	r3, r5
 80059f8:	461d      	mov	r5, r3
 80059fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059fe:	2a39      	cmp	r2, #57	; 0x39
 8005a00:	d106      	bne.n	8005a10 <_dtoa_r+0x700>
 8005a02:	9a00      	ldr	r2, [sp, #0]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d1f7      	bne.n	80059f8 <_dtoa_r+0x6e8>
 8005a08:	9900      	ldr	r1, [sp, #0]
 8005a0a:	2230      	movs	r2, #48	; 0x30
 8005a0c:	3701      	adds	r7, #1
 8005a0e:	700a      	strb	r2, [r1, #0]
 8005a10:	781a      	ldrb	r2, [r3, #0]
 8005a12:	3201      	adds	r2, #1
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	e790      	b.n	800593a <_dtoa_r+0x62a>
 8005a18:	4ba3      	ldr	r3, [pc, #652]	; (8005ca8 <_dtoa_r+0x998>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f7fa fdc4 	bl	80005a8 <__aeabi_dmul>
 8005a20:	2200      	movs	r2, #0
 8005a22:	2300      	movs	r3, #0
 8005a24:	4606      	mov	r6, r0
 8005a26:	460f      	mov	r7, r1
 8005a28:	f7fb f826 	bl	8000a78 <__aeabi_dcmpeq>
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	d09e      	beq.n	800596e <_dtoa_r+0x65e>
 8005a30:	e7d0      	b.n	80059d4 <_dtoa_r+0x6c4>
 8005a32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a34:	2a00      	cmp	r2, #0
 8005a36:	f000 80ca 	beq.w	8005bce <_dtoa_r+0x8be>
 8005a3a:	9a07      	ldr	r2, [sp, #28]
 8005a3c:	2a01      	cmp	r2, #1
 8005a3e:	f300 80ad 	bgt.w	8005b9c <_dtoa_r+0x88c>
 8005a42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a44:	2a00      	cmp	r2, #0
 8005a46:	f000 80a5 	beq.w	8005b94 <_dtoa_r+0x884>
 8005a4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a4e:	9e08      	ldr	r6, [sp, #32]
 8005a50:	9d05      	ldr	r5, [sp, #20]
 8005a52:	9a05      	ldr	r2, [sp, #20]
 8005a54:	441a      	add	r2, r3
 8005a56:	9205      	str	r2, [sp, #20]
 8005a58:	9a06      	ldr	r2, [sp, #24]
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	441a      	add	r2, r3
 8005a5e:	4620      	mov	r0, r4
 8005a60:	9206      	str	r2, [sp, #24]
 8005a62:	f000 fc3d 	bl	80062e0 <__i2b>
 8005a66:	4607      	mov	r7, r0
 8005a68:	b165      	cbz	r5, 8005a84 <_dtoa_r+0x774>
 8005a6a:	9b06      	ldr	r3, [sp, #24]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	dd09      	ble.n	8005a84 <_dtoa_r+0x774>
 8005a70:	42ab      	cmp	r3, r5
 8005a72:	9a05      	ldr	r2, [sp, #20]
 8005a74:	bfa8      	it	ge
 8005a76:	462b      	movge	r3, r5
 8005a78:	1ad2      	subs	r2, r2, r3
 8005a7a:	9205      	str	r2, [sp, #20]
 8005a7c:	9a06      	ldr	r2, [sp, #24]
 8005a7e:	1aed      	subs	r5, r5, r3
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	9306      	str	r3, [sp, #24]
 8005a84:	9b08      	ldr	r3, [sp, #32]
 8005a86:	b1f3      	cbz	r3, 8005ac6 <_dtoa_r+0x7b6>
 8005a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 80a3 	beq.w	8005bd6 <_dtoa_r+0x8c6>
 8005a90:	2e00      	cmp	r6, #0
 8005a92:	dd10      	ble.n	8005ab6 <_dtoa_r+0x7a6>
 8005a94:	4639      	mov	r1, r7
 8005a96:	4632      	mov	r2, r6
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f000 fce1 	bl	8006460 <__pow5mult>
 8005a9e:	4652      	mov	r2, sl
 8005aa0:	4601      	mov	r1, r0
 8005aa2:	4607      	mov	r7, r0
 8005aa4:	4620      	mov	r0, r4
 8005aa6:	f000 fc31 	bl	800630c <__multiply>
 8005aaa:	4651      	mov	r1, sl
 8005aac:	4680      	mov	r8, r0
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f000 fb60 	bl	8006174 <_Bfree>
 8005ab4:	46c2      	mov	sl, r8
 8005ab6:	9b08      	ldr	r3, [sp, #32]
 8005ab8:	1b9a      	subs	r2, r3, r6
 8005aba:	d004      	beq.n	8005ac6 <_dtoa_r+0x7b6>
 8005abc:	4651      	mov	r1, sl
 8005abe:	4620      	mov	r0, r4
 8005ac0:	f000 fcce 	bl	8006460 <__pow5mult>
 8005ac4:	4682      	mov	sl, r0
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	4620      	mov	r0, r4
 8005aca:	f000 fc09 	bl	80062e0 <__i2b>
 8005ace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	4606      	mov	r6, r0
 8005ad4:	f340 8081 	ble.w	8005bda <_dtoa_r+0x8ca>
 8005ad8:	461a      	mov	r2, r3
 8005ada:	4601      	mov	r1, r0
 8005adc:	4620      	mov	r0, r4
 8005ade:	f000 fcbf 	bl	8006460 <__pow5mult>
 8005ae2:	9b07      	ldr	r3, [sp, #28]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	4606      	mov	r6, r0
 8005ae8:	dd7a      	ble.n	8005be0 <_dtoa_r+0x8d0>
 8005aea:	f04f 0800 	mov.w	r8, #0
 8005aee:	6933      	ldr	r3, [r6, #16]
 8005af0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005af4:	6918      	ldr	r0, [r3, #16]
 8005af6:	f000 fba5 	bl	8006244 <__hi0bits>
 8005afa:	f1c0 0020 	rsb	r0, r0, #32
 8005afe:	9b06      	ldr	r3, [sp, #24]
 8005b00:	4418      	add	r0, r3
 8005b02:	f010 001f 	ands.w	r0, r0, #31
 8005b06:	f000 8094 	beq.w	8005c32 <_dtoa_r+0x922>
 8005b0a:	f1c0 0320 	rsb	r3, r0, #32
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	f340 8085 	ble.w	8005c1e <_dtoa_r+0x90e>
 8005b14:	9b05      	ldr	r3, [sp, #20]
 8005b16:	f1c0 001c 	rsb	r0, r0, #28
 8005b1a:	4403      	add	r3, r0
 8005b1c:	9305      	str	r3, [sp, #20]
 8005b1e:	9b06      	ldr	r3, [sp, #24]
 8005b20:	4403      	add	r3, r0
 8005b22:	4405      	add	r5, r0
 8005b24:	9306      	str	r3, [sp, #24]
 8005b26:	9b05      	ldr	r3, [sp, #20]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	dd05      	ble.n	8005b38 <_dtoa_r+0x828>
 8005b2c:	4651      	mov	r1, sl
 8005b2e:	461a      	mov	r2, r3
 8005b30:	4620      	mov	r0, r4
 8005b32:	f000 fcef 	bl	8006514 <__lshift>
 8005b36:	4682      	mov	sl, r0
 8005b38:	9b06      	ldr	r3, [sp, #24]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	dd05      	ble.n	8005b4a <_dtoa_r+0x83a>
 8005b3e:	4631      	mov	r1, r6
 8005b40:	461a      	mov	r2, r3
 8005b42:	4620      	mov	r0, r4
 8005b44:	f000 fce6 	bl	8006514 <__lshift>
 8005b48:	4606      	mov	r6, r0
 8005b4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d072      	beq.n	8005c36 <_dtoa_r+0x926>
 8005b50:	4631      	mov	r1, r6
 8005b52:	4650      	mov	r0, sl
 8005b54:	f000 fd4a 	bl	80065ec <__mcmp>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	da6c      	bge.n	8005c36 <_dtoa_r+0x926>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	4651      	mov	r1, sl
 8005b60:	220a      	movs	r2, #10
 8005b62:	4620      	mov	r0, r4
 8005b64:	f000 fb28 	bl	80061b8 <__multadd>
 8005b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b6e:	4682      	mov	sl, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 81b0 	beq.w	8005ed6 <_dtoa_r+0xbc6>
 8005b76:	2300      	movs	r3, #0
 8005b78:	4639      	mov	r1, r7
 8005b7a:	220a      	movs	r2, #10
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f000 fb1b 	bl	80061b8 <__multadd>
 8005b82:	9b01      	ldr	r3, [sp, #4]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	4607      	mov	r7, r0
 8005b88:	f300 8096 	bgt.w	8005cb8 <_dtoa_r+0x9a8>
 8005b8c:	9b07      	ldr	r3, [sp, #28]
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	dc59      	bgt.n	8005c46 <_dtoa_r+0x936>
 8005b92:	e091      	b.n	8005cb8 <_dtoa_r+0x9a8>
 8005b94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b9a:	e758      	b.n	8005a4e <_dtoa_r+0x73e>
 8005b9c:	9b04      	ldr	r3, [sp, #16]
 8005b9e:	1e5e      	subs	r6, r3, #1
 8005ba0:	9b08      	ldr	r3, [sp, #32]
 8005ba2:	42b3      	cmp	r3, r6
 8005ba4:	bfbf      	itttt	lt
 8005ba6:	9b08      	ldrlt	r3, [sp, #32]
 8005ba8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005baa:	9608      	strlt	r6, [sp, #32]
 8005bac:	1af3      	sublt	r3, r6, r3
 8005bae:	bfb4      	ite	lt
 8005bb0:	18d2      	addlt	r2, r2, r3
 8005bb2:	1b9e      	subge	r6, r3, r6
 8005bb4:	9b04      	ldr	r3, [sp, #16]
 8005bb6:	bfbc      	itt	lt
 8005bb8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005bba:	2600      	movlt	r6, #0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	bfb7      	itett	lt
 8005bc0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005bc4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005bc8:	1a9d      	sublt	r5, r3, r2
 8005bca:	2300      	movlt	r3, #0
 8005bcc:	e741      	b.n	8005a52 <_dtoa_r+0x742>
 8005bce:	9e08      	ldr	r6, [sp, #32]
 8005bd0:	9d05      	ldr	r5, [sp, #20]
 8005bd2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005bd4:	e748      	b.n	8005a68 <_dtoa_r+0x758>
 8005bd6:	9a08      	ldr	r2, [sp, #32]
 8005bd8:	e770      	b.n	8005abc <_dtoa_r+0x7ac>
 8005bda:	9b07      	ldr	r3, [sp, #28]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	dc19      	bgt.n	8005c14 <_dtoa_r+0x904>
 8005be0:	9b02      	ldr	r3, [sp, #8]
 8005be2:	b9bb      	cbnz	r3, 8005c14 <_dtoa_r+0x904>
 8005be4:	9b03      	ldr	r3, [sp, #12]
 8005be6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bea:	b99b      	cbnz	r3, 8005c14 <_dtoa_r+0x904>
 8005bec:	9b03      	ldr	r3, [sp, #12]
 8005bee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bf2:	0d1b      	lsrs	r3, r3, #20
 8005bf4:	051b      	lsls	r3, r3, #20
 8005bf6:	b183      	cbz	r3, 8005c1a <_dtoa_r+0x90a>
 8005bf8:	9b05      	ldr	r3, [sp, #20]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	9305      	str	r3, [sp, #20]
 8005bfe:	9b06      	ldr	r3, [sp, #24]
 8005c00:	3301      	adds	r3, #1
 8005c02:	9306      	str	r3, [sp, #24]
 8005c04:	f04f 0801 	mov.w	r8, #1
 8005c08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f47f af6f 	bne.w	8005aee <_dtoa_r+0x7de>
 8005c10:	2001      	movs	r0, #1
 8005c12:	e774      	b.n	8005afe <_dtoa_r+0x7ee>
 8005c14:	f04f 0800 	mov.w	r8, #0
 8005c18:	e7f6      	b.n	8005c08 <_dtoa_r+0x8f8>
 8005c1a:	4698      	mov	r8, r3
 8005c1c:	e7f4      	b.n	8005c08 <_dtoa_r+0x8f8>
 8005c1e:	d082      	beq.n	8005b26 <_dtoa_r+0x816>
 8005c20:	9a05      	ldr	r2, [sp, #20]
 8005c22:	331c      	adds	r3, #28
 8005c24:	441a      	add	r2, r3
 8005c26:	9205      	str	r2, [sp, #20]
 8005c28:	9a06      	ldr	r2, [sp, #24]
 8005c2a:	441a      	add	r2, r3
 8005c2c:	441d      	add	r5, r3
 8005c2e:	9206      	str	r2, [sp, #24]
 8005c30:	e779      	b.n	8005b26 <_dtoa_r+0x816>
 8005c32:	4603      	mov	r3, r0
 8005c34:	e7f4      	b.n	8005c20 <_dtoa_r+0x910>
 8005c36:	9b04      	ldr	r3, [sp, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	dc37      	bgt.n	8005cac <_dtoa_r+0x99c>
 8005c3c:	9b07      	ldr	r3, [sp, #28]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	dd34      	ble.n	8005cac <_dtoa_r+0x99c>
 8005c42:	9b04      	ldr	r3, [sp, #16]
 8005c44:	9301      	str	r3, [sp, #4]
 8005c46:	9b01      	ldr	r3, [sp, #4]
 8005c48:	b963      	cbnz	r3, 8005c64 <_dtoa_r+0x954>
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	2205      	movs	r2, #5
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f000 fab2 	bl	80061b8 <__multadd>
 8005c54:	4601      	mov	r1, r0
 8005c56:	4606      	mov	r6, r0
 8005c58:	4650      	mov	r0, sl
 8005c5a:	f000 fcc7 	bl	80065ec <__mcmp>
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	f73f adbb 	bgt.w	80057da <_dtoa_r+0x4ca>
 8005c64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c66:	9d00      	ldr	r5, [sp, #0]
 8005c68:	ea6f 0b03 	mvn.w	fp, r3
 8005c6c:	f04f 0800 	mov.w	r8, #0
 8005c70:	4631      	mov	r1, r6
 8005c72:	4620      	mov	r0, r4
 8005c74:	f000 fa7e 	bl	8006174 <_Bfree>
 8005c78:	2f00      	cmp	r7, #0
 8005c7a:	f43f aeab 	beq.w	80059d4 <_dtoa_r+0x6c4>
 8005c7e:	f1b8 0f00 	cmp.w	r8, #0
 8005c82:	d005      	beq.n	8005c90 <_dtoa_r+0x980>
 8005c84:	45b8      	cmp	r8, r7
 8005c86:	d003      	beq.n	8005c90 <_dtoa_r+0x980>
 8005c88:	4641      	mov	r1, r8
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f000 fa72 	bl	8006174 <_Bfree>
 8005c90:	4639      	mov	r1, r7
 8005c92:	4620      	mov	r0, r4
 8005c94:	f000 fa6e 	bl	8006174 <_Bfree>
 8005c98:	e69c      	b.n	80059d4 <_dtoa_r+0x6c4>
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	4637      	mov	r7, r6
 8005c9e:	e7e1      	b.n	8005c64 <_dtoa_r+0x954>
 8005ca0:	46bb      	mov	fp, r7
 8005ca2:	4637      	mov	r7, r6
 8005ca4:	e599      	b.n	80057da <_dtoa_r+0x4ca>
 8005ca6:	bf00      	nop
 8005ca8:	40240000 	.word	0x40240000
 8005cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 80c8 	beq.w	8005e44 <_dtoa_r+0xb34>
 8005cb4:	9b04      	ldr	r3, [sp, #16]
 8005cb6:	9301      	str	r3, [sp, #4]
 8005cb8:	2d00      	cmp	r5, #0
 8005cba:	dd05      	ble.n	8005cc8 <_dtoa_r+0x9b8>
 8005cbc:	4639      	mov	r1, r7
 8005cbe:	462a      	mov	r2, r5
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f000 fc27 	bl	8006514 <__lshift>
 8005cc6:	4607      	mov	r7, r0
 8005cc8:	f1b8 0f00 	cmp.w	r8, #0
 8005ccc:	d05b      	beq.n	8005d86 <_dtoa_r+0xa76>
 8005cce:	6879      	ldr	r1, [r7, #4]
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f000 fa0f 	bl	80060f4 <_Balloc>
 8005cd6:	4605      	mov	r5, r0
 8005cd8:	b928      	cbnz	r0, 8005ce6 <_dtoa_r+0x9d6>
 8005cda:	4b83      	ldr	r3, [pc, #524]	; (8005ee8 <_dtoa_r+0xbd8>)
 8005cdc:	4602      	mov	r2, r0
 8005cde:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005ce2:	f7ff bb2e 	b.w	8005342 <_dtoa_r+0x32>
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	3202      	adds	r2, #2
 8005cea:	0092      	lsls	r2, r2, #2
 8005cec:	f107 010c 	add.w	r1, r7, #12
 8005cf0:	300c      	adds	r0, #12
 8005cf2:	f001 f813 	bl	8006d1c <memcpy>
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f000 fc0a 	bl	8006514 <__lshift>
 8005d00:	9b00      	ldr	r3, [sp, #0]
 8005d02:	3301      	adds	r3, #1
 8005d04:	9304      	str	r3, [sp, #16]
 8005d06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	9308      	str	r3, [sp, #32]
 8005d0e:	9b02      	ldr	r3, [sp, #8]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	46b8      	mov	r8, r7
 8005d16:	9306      	str	r3, [sp, #24]
 8005d18:	4607      	mov	r7, r0
 8005d1a:	9b04      	ldr	r3, [sp, #16]
 8005d1c:	4631      	mov	r1, r6
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	4650      	mov	r0, sl
 8005d22:	9301      	str	r3, [sp, #4]
 8005d24:	f7ff fa69 	bl	80051fa <quorem>
 8005d28:	4641      	mov	r1, r8
 8005d2a:	9002      	str	r0, [sp, #8]
 8005d2c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005d30:	4650      	mov	r0, sl
 8005d32:	f000 fc5b 	bl	80065ec <__mcmp>
 8005d36:	463a      	mov	r2, r7
 8005d38:	9005      	str	r0, [sp, #20]
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f000 fc71 	bl	8006624 <__mdiff>
 8005d42:	68c2      	ldr	r2, [r0, #12]
 8005d44:	4605      	mov	r5, r0
 8005d46:	bb02      	cbnz	r2, 8005d8a <_dtoa_r+0xa7a>
 8005d48:	4601      	mov	r1, r0
 8005d4a:	4650      	mov	r0, sl
 8005d4c:	f000 fc4e 	bl	80065ec <__mcmp>
 8005d50:	4602      	mov	r2, r0
 8005d52:	4629      	mov	r1, r5
 8005d54:	4620      	mov	r0, r4
 8005d56:	9209      	str	r2, [sp, #36]	; 0x24
 8005d58:	f000 fa0c 	bl	8006174 <_Bfree>
 8005d5c:	9b07      	ldr	r3, [sp, #28]
 8005d5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d60:	9d04      	ldr	r5, [sp, #16]
 8005d62:	ea43 0102 	orr.w	r1, r3, r2
 8005d66:	9b06      	ldr	r3, [sp, #24]
 8005d68:	4319      	orrs	r1, r3
 8005d6a:	d110      	bne.n	8005d8e <_dtoa_r+0xa7e>
 8005d6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005d70:	d029      	beq.n	8005dc6 <_dtoa_r+0xab6>
 8005d72:	9b05      	ldr	r3, [sp, #20]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	dd02      	ble.n	8005d7e <_dtoa_r+0xa6e>
 8005d78:	9b02      	ldr	r3, [sp, #8]
 8005d7a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005d7e:	9b01      	ldr	r3, [sp, #4]
 8005d80:	f883 9000 	strb.w	r9, [r3]
 8005d84:	e774      	b.n	8005c70 <_dtoa_r+0x960>
 8005d86:	4638      	mov	r0, r7
 8005d88:	e7ba      	b.n	8005d00 <_dtoa_r+0x9f0>
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	e7e1      	b.n	8005d52 <_dtoa_r+0xa42>
 8005d8e:	9b05      	ldr	r3, [sp, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	db04      	blt.n	8005d9e <_dtoa_r+0xa8e>
 8005d94:	9907      	ldr	r1, [sp, #28]
 8005d96:	430b      	orrs	r3, r1
 8005d98:	9906      	ldr	r1, [sp, #24]
 8005d9a:	430b      	orrs	r3, r1
 8005d9c:	d120      	bne.n	8005de0 <_dtoa_r+0xad0>
 8005d9e:	2a00      	cmp	r2, #0
 8005da0:	dded      	ble.n	8005d7e <_dtoa_r+0xa6e>
 8005da2:	4651      	mov	r1, sl
 8005da4:	2201      	movs	r2, #1
 8005da6:	4620      	mov	r0, r4
 8005da8:	f000 fbb4 	bl	8006514 <__lshift>
 8005dac:	4631      	mov	r1, r6
 8005dae:	4682      	mov	sl, r0
 8005db0:	f000 fc1c 	bl	80065ec <__mcmp>
 8005db4:	2800      	cmp	r0, #0
 8005db6:	dc03      	bgt.n	8005dc0 <_dtoa_r+0xab0>
 8005db8:	d1e1      	bne.n	8005d7e <_dtoa_r+0xa6e>
 8005dba:	f019 0f01 	tst.w	r9, #1
 8005dbe:	d0de      	beq.n	8005d7e <_dtoa_r+0xa6e>
 8005dc0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005dc4:	d1d8      	bne.n	8005d78 <_dtoa_r+0xa68>
 8005dc6:	9a01      	ldr	r2, [sp, #4]
 8005dc8:	2339      	movs	r3, #57	; 0x39
 8005dca:	7013      	strb	r3, [r2, #0]
 8005dcc:	462b      	mov	r3, r5
 8005dce:	461d      	mov	r5, r3
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005dd6:	2a39      	cmp	r2, #57	; 0x39
 8005dd8:	d06c      	beq.n	8005eb4 <_dtoa_r+0xba4>
 8005dda:	3201      	adds	r2, #1
 8005ddc:	701a      	strb	r2, [r3, #0]
 8005dde:	e747      	b.n	8005c70 <_dtoa_r+0x960>
 8005de0:	2a00      	cmp	r2, #0
 8005de2:	dd07      	ble.n	8005df4 <_dtoa_r+0xae4>
 8005de4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005de8:	d0ed      	beq.n	8005dc6 <_dtoa_r+0xab6>
 8005dea:	9a01      	ldr	r2, [sp, #4]
 8005dec:	f109 0301 	add.w	r3, r9, #1
 8005df0:	7013      	strb	r3, [r2, #0]
 8005df2:	e73d      	b.n	8005c70 <_dtoa_r+0x960>
 8005df4:	9b04      	ldr	r3, [sp, #16]
 8005df6:	9a08      	ldr	r2, [sp, #32]
 8005df8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d043      	beq.n	8005e88 <_dtoa_r+0xb78>
 8005e00:	4651      	mov	r1, sl
 8005e02:	2300      	movs	r3, #0
 8005e04:	220a      	movs	r2, #10
 8005e06:	4620      	mov	r0, r4
 8005e08:	f000 f9d6 	bl	80061b8 <__multadd>
 8005e0c:	45b8      	cmp	r8, r7
 8005e0e:	4682      	mov	sl, r0
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	f04f 020a 	mov.w	r2, #10
 8005e18:	4641      	mov	r1, r8
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	d107      	bne.n	8005e2e <_dtoa_r+0xb1e>
 8005e1e:	f000 f9cb 	bl	80061b8 <__multadd>
 8005e22:	4680      	mov	r8, r0
 8005e24:	4607      	mov	r7, r0
 8005e26:	9b04      	ldr	r3, [sp, #16]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	9304      	str	r3, [sp, #16]
 8005e2c:	e775      	b.n	8005d1a <_dtoa_r+0xa0a>
 8005e2e:	f000 f9c3 	bl	80061b8 <__multadd>
 8005e32:	4639      	mov	r1, r7
 8005e34:	4680      	mov	r8, r0
 8005e36:	2300      	movs	r3, #0
 8005e38:	220a      	movs	r2, #10
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f000 f9bc 	bl	80061b8 <__multadd>
 8005e40:	4607      	mov	r7, r0
 8005e42:	e7f0      	b.n	8005e26 <_dtoa_r+0xb16>
 8005e44:	9b04      	ldr	r3, [sp, #16]
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	9d00      	ldr	r5, [sp, #0]
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	4650      	mov	r0, sl
 8005e4e:	f7ff f9d4 	bl	80051fa <quorem>
 8005e52:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005e56:	9b00      	ldr	r3, [sp, #0]
 8005e58:	f805 9b01 	strb.w	r9, [r5], #1
 8005e5c:	1aea      	subs	r2, r5, r3
 8005e5e:	9b01      	ldr	r3, [sp, #4]
 8005e60:	4293      	cmp	r3, r2
 8005e62:	dd07      	ble.n	8005e74 <_dtoa_r+0xb64>
 8005e64:	4651      	mov	r1, sl
 8005e66:	2300      	movs	r3, #0
 8005e68:	220a      	movs	r2, #10
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f000 f9a4 	bl	80061b8 <__multadd>
 8005e70:	4682      	mov	sl, r0
 8005e72:	e7ea      	b.n	8005e4a <_dtoa_r+0xb3a>
 8005e74:	9b01      	ldr	r3, [sp, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	bfc8      	it	gt
 8005e7a:	461d      	movgt	r5, r3
 8005e7c:	9b00      	ldr	r3, [sp, #0]
 8005e7e:	bfd8      	it	le
 8005e80:	2501      	movle	r5, #1
 8005e82:	441d      	add	r5, r3
 8005e84:	f04f 0800 	mov.w	r8, #0
 8005e88:	4651      	mov	r1, sl
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f000 fb41 	bl	8006514 <__lshift>
 8005e92:	4631      	mov	r1, r6
 8005e94:	4682      	mov	sl, r0
 8005e96:	f000 fba9 	bl	80065ec <__mcmp>
 8005e9a:	2800      	cmp	r0, #0
 8005e9c:	dc96      	bgt.n	8005dcc <_dtoa_r+0xabc>
 8005e9e:	d102      	bne.n	8005ea6 <_dtoa_r+0xb96>
 8005ea0:	f019 0f01 	tst.w	r9, #1
 8005ea4:	d192      	bne.n	8005dcc <_dtoa_r+0xabc>
 8005ea6:	462b      	mov	r3, r5
 8005ea8:	461d      	mov	r5, r3
 8005eaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005eae:	2a30      	cmp	r2, #48	; 0x30
 8005eb0:	d0fa      	beq.n	8005ea8 <_dtoa_r+0xb98>
 8005eb2:	e6dd      	b.n	8005c70 <_dtoa_r+0x960>
 8005eb4:	9a00      	ldr	r2, [sp, #0]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d189      	bne.n	8005dce <_dtoa_r+0xabe>
 8005eba:	f10b 0b01 	add.w	fp, fp, #1
 8005ebe:	2331      	movs	r3, #49	; 0x31
 8005ec0:	e796      	b.n	8005df0 <_dtoa_r+0xae0>
 8005ec2:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <_dtoa_r+0xbdc>)
 8005ec4:	f7ff ba99 	b.w	80053fa <_dtoa_r+0xea>
 8005ec8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f47f aa6d 	bne.w	80053aa <_dtoa_r+0x9a>
 8005ed0:	4b07      	ldr	r3, [pc, #28]	; (8005ef0 <_dtoa_r+0xbe0>)
 8005ed2:	f7ff ba92 	b.w	80053fa <_dtoa_r+0xea>
 8005ed6:	9b01      	ldr	r3, [sp, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	dcb5      	bgt.n	8005e48 <_dtoa_r+0xb38>
 8005edc:	9b07      	ldr	r3, [sp, #28]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	f73f aeb1 	bgt.w	8005c46 <_dtoa_r+0x936>
 8005ee4:	e7b0      	b.n	8005e48 <_dtoa_r+0xb38>
 8005ee6:	bf00      	nop
 8005ee8:	080071c8 	.word	0x080071c8
 8005eec:	08007128 	.word	0x08007128
 8005ef0:	0800714c 	.word	0x0800714c

08005ef4 <_free_r>:
 8005ef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ef6:	2900      	cmp	r1, #0
 8005ef8:	d044      	beq.n	8005f84 <_free_r+0x90>
 8005efa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005efe:	9001      	str	r0, [sp, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f1a1 0404 	sub.w	r4, r1, #4
 8005f06:	bfb8      	it	lt
 8005f08:	18e4      	addlt	r4, r4, r3
 8005f0a:	f000 f8e7 	bl	80060dc <__malloc_lock>
 8005f0e:	4a1e      	ldr	r2, [pc, #120]	; (8005f88 <_free_r+0x94>)
 8005f10:	9801      	ldr	r0, [sp, #4]
 8005f12:	6813      	ldr	r3, [r2, #0]
 8005f14:	b933      	cbnz	r3, 8005f24 <_free_r+0x30>
 8005f16:	6063      	str	r3, [r4, #4]
 8005f18:	6014      	str	r4, [r2, #0]
 8005f1a:	b003      	add	sp, #12
 8005f1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f20:	f000 b8e2 	b.w	80060e8 <__malloc_unlock>
 8005f24:	42a3      	cmp	r3, r4
 8005f26:	d908      	bls.n	8005f3a <_free_r+0x46>
 8005f28:	6825      	ldr	r5, [r4, #0]
 8005f2a:	1961      	adds	r1, r4, r5
 8005f2c:	428b      	cmp	r3, r1
 8005f2e:	bf01      	itttt	eq
 8005f30:	6819      	ldreq	r1, [r3, #0]
 8005f32:	685b      	ldreq	r3, [r3, #4]
 8005f34:	1949      	addeq	r1, r1, r5
 8005f36:	6021      	streq	r1, [r4, #0]
 8005f38:	e7ed      	b.n	8005f16 <_free_r+0x22>
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	b10b      	cbz	r3, 8005f44 <_free_r+0x50>
 8005f40:	42a3      	cmp	r3, r4
 8005f42:	d9fa      	bls.n	8005f3a <_free_r+0x46>
 8005f44:	6811      	ldr	r1, [r2, #0]
 8005f46:	1855      	adds	r5, r2, r1
 8005f48:	42a5      	cmp	r5, r4
 8005f4a:	d10b      	bne.n	8005f64 <_free_r+0x70>
 8005f4c:	6824      	ldr	r4, [r4, #0]
 8005f4e:	4421      	add	r1, r4
 8005f50:	1854      	adds	r4, r2, r1
 8005f52:	42a3      	cmp	r3, r4
 8005f54:	6011      	str	r1, [r2, #0]
 8005f56:	d1e0      	bne.n	8005f1a <_free_r+0x26>
 8005f58:	681c      	ldr	r4, [r3, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	6053      	str	r3, [r2, #4]
 8005f5e:	440c      	add	r4, r1
 8005f60:	6014      	str	r4, [r2, #0]
 8005f62:	e7da      	b.n	8005f1a <_free_r+0x26>
 8005f64:	d902      	bls.n	8005f6c <_free_r+0x78>
 8005f66:	230c      	movs	r3, #12
 8005f68:	6003      	str	r3, [r0, #0]
 8005f6a:	e7d6      	b.n	8005f1a <_free_r+0x26>
 8005f6c:	6825      	ldr	r5, [r4, #0]
 8005f6e:	1961      	adds	r1, r4, r5
 8005f70:	428b      	cmp	r3, r1
 8005f72:	bf04      	itt	eq
 8005f74:	6819      	ldreq	r1, [r3, #0]
 8005f76:	685b      	ldreq	r3, [r3, #4]
 8005f78:	6063      	str	r3, [r4, #4]
 8005f7a:	bf04      	itt	eq
 8005f7c:	1949      	addeq	r1, r1, r5
 8005f7e:	6021      	streq	r1, [r4, #0]
 8005f80:	6054      	str	r4, [r2, #4]
 8005f82:	e7ca      	b.n	8005f1a <_free_r+0x26>
 8005f84:	b003      	add	sp, #12
 8005f86:	bd30      	pop	{r4, r5, pc}
 8005f88:	20000430 	.word	0x20000430

08005f8c <malloc>:
 8005f8c:	4b02      	ldr	r3, [pc, #8]	; (8005f98 <malloc+0xc>)
 8005f8e:	4601      	mov	r1, r0
 8005f90:	6818      	ldr	r0, [r3, #0]
 8005f92:	f000 b823 	b.w	8005fdc <_malloc_r>
 8005f96:	bf00      	nop
 8005f98:	20000068 	.word	0x20000068

08005f9c <sbrk_aligned>:
 8005f9c:	b570      	push	{r4, r5, r6, lr}
 8005f9e:	4e0e      	ldr	r6, [pc, #56]	; (8005fd8 <sbrk_aligned+0x3c>)
 8005fa0:	460c      	mov	r4, r1
 8005fa2:	6831      	ldr	r1, [r6, #0]
 8005fa4:	4605      	mov	r5, r0
 8005fa6:	b911      	cbnz	r1, 8005fae <sbrk_aligned+0x12>
 8005fa8:	f000 fea8 	bl	8006cfc <_sbrk_r>
 8005fac:	6030      	str	r0, [r6, #0]
 8005fae:	4621      	mov	r1, r4
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	f000 fea3 	bl	8006cfc <_sbrk_r>
 8005fb6:	1c43      	adds	r3, r0, #1
 8005fb8:	d00a      	beq.n	8005fd0 <sbrk_aligned+0x34>
 8005fba:	1cc4      	adds	r4, r0, #3
 8005fbc:	f024 0403 	bic.w	r4, r4, #3
 8005fc0:	42a0      	cmp	r0, r4
 8005fc2:	d007      	beq.n	8005fd4 <sbrk_aligned+0x38>
 8005fc4:	1a21      	subs	r1, r4, r0
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	f000 fe98 	bl	8006cfc <_sbrk_r>
 8005fcc:	3001      	adds	r0, #1
 8005fce:	d101      	bne.n	8005fd4 <sbrk_aligned+0x38>
 8005fd0:	f04f 34ff 	mov.w	r4, #4294967295
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	bd70      	pop	{r4, r5, r6, pc}
 8005fd8:	20000434 	.word	0x20000434

08005fdc <_malloc_r>:
 8005fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fe0:	1ccd      	adds	r5, r1, #3
 8005fe2:	f025 0503 	bic.w	r5, r5, #3
 8005fe6:	3508      	adds	r5, #8
 8005fe8:	2d0c      	cmp	r5, #12
 8005fea:	bf38      	it	cc
 8005fec:	250c      	movcc	r5, #12
 8005fee:	2d00      	cmp	r5, #0
 8005ff0:	4607      	mov	r7, r0
 8005ff2:	db01      	blt.n	8005ff8 <_malloc_r+0x1c>
 8005ff4:	42a9      	cmp	r1, r5
 8005ff6:	d905      	bls.n	8006004 <_malloc_r+0x28>
 8005ff8:	230c      	movs	r3, #12
 8005ffa:	603b      	str	r3, [r7, #0]
 8005ffc:	2600      	movs	r6, #0
 8005ffe:	4630      	mov	r0, r6
 8006000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006004:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80060d8 <_malloc_r+0xfc>
 8006008:	f000 f868 	bl	80060dc <__malloc_lock>
 800600c:	f8d8 3000 	ldr.w	r3, [r8]
 8006010:	461c      	mov	r4, r3
 8006012:	bb5c      	cbnz	r4, 800606c <_malloc_r+0x90>
 8006014:	4629      	mov	r1, r5
 8006016:	4638      	mov	r0, r7
 8006018:	f7ff ffc0 	bl	8005f9c <sbrk_aligned>
 800601c:	1c43      	adds	r3, r0, #1
 800601e:	4604      	mov	r4, r0
 8006020:	d155      	bne.n	80060ce <_malloc_r+0xf2>
 8006022:	f8d8 4000 	ldr.w	r4, [r8]
 8006026:	4626      	mov	r6, r4
 8006028:	2e00      	cmp	r6, #0
 800602a:	d145      	bne.n	80060b8 <_malloc_r+0xdc>
 800602c:	2c00      	cmp	r4, #0
 800602e:	d048      	beq.n	80060c2 <_malloc_r+0xe6>
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	4631      	mov	r1, r6
 8006034:	4638      	mov	r0, r7
 8006036:	eb04 0903 	add.w	r9, r4, r3
 800603a:	f000 fe5f 	bl	8006cfc <_sbrk_r>
 800603e:	4581      	cmp	r9, r0
 8006040:	d13f      	bne.n	80060c2 <_malloc_r+0xe6>
 8006042:	6821      	ldr	r1, [r4, #0]
 8006044:	1a6d      	subs	r5, r5, r1
 8006046:	4629      	mov	r1, r5
 8006048:	4638      	mov	r0, r7
 800604a:	f7ff ffa7 	bl	8005f9c <sbrk_aligned>
 800604e:	3001      	adds	r0, #1
 8006050:	d037      	beq.n	80060c2 <_malloc_r+0xe6>
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	442b      	add	r3, r5
 8006056:	6023      	str	r3, [r4, #0]
 8006058:	f8d8 3000 	ldr.w	r3, [r8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d038      	beq.n	80060d2 <_malloc_r+0xf6>
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	42a2      	cmp	r2, r4
 8006064:	d12b      	bne.n	80060be <_malloc_r+0xe2>
 8006066:	2200      	movs	r2, #0
 8006068:	605a      	str	r2, [r3, #4]
 800606a:	e00f      	b.n	800608c <_malloc_r+0xb0>
 800606c:	6822      	ldr	r2, [r4, #0]
 800606e:	1b52      	subs	r2, r2, r5
 8006070:	d41f      	bmi.n	80060b2 <_malloc_r+0xd6>
 8006072:	2a0b      	cmp	r2, #11
 8006074:	d917      	bls.n	80060a6 <_malloc_r+0xca>
 8006076:	1961      	adds	r1, r4, r5
 8006078:	42a3      	cmp	r3, r4
 800607a:	6025      	str	r5, [r4, #0]
 800607c:	bf18      	it	ne
 800607e:	6059      	strne	r1, [r3, #4]
 8006080:	6863      	ldr	r3, [r4, #4]
 8006082:	bf08      	it	eq
 8006084:	f8c8 1000 	streq.w	r1, [r8]
 8006088:	5162      	str	r2, [r4, r5]
 800608a:	604b      	str	r3, [r1, #4]
 800608c:	4638      	mov	r0, r7
 800608e:	f104 060b 	add.w	r6, r4, #11
 8006092:	f000 f829 	bl	80060e8 <__malloc_unlock>
 8006096:	f026 0607 	bic.w	r6, r6, #7
 800609a:	1d23      	adds	r3, r4, #4
 800609c:	1af2      	subs	r2, r6, r3
 800609e:	d0ae      	beq.n	8005ffe <_malloc_r+0x22>
 80060a0:	1b9b      	subs	r3, r3, r6
 80060a2:	50a3      	str	r3, [r4, r2]
 80060a4:	e7ab      	b.n	8005ffe <_malloc_r+0x22>
 80060a6:	42a3      	cmp	r3, r4
 80060a8:	6862      	ldr	r2, [r4, #4]
 80060aa:	d1dd      	bne.n	8006068 <_malloc_r+0x8c>
 80060ac:	f8c8 2000 	str.w	r2, [r8]
 80060b0:	e7ec      	b.n	800608c <_malloc_r+0xb0>
 80060b2:	4623      	mov	r3, r4
 80060b4:	6864      	ldr	r4, [r4, #4]
 80060b6:	e7ac      	b.n	8006012 <_malloc_r+0x36>
 80060b8:	4634      	mov	r4, r6
 80060ba:	6876      	ldr	r6, [r6, #4]
 80060bc:	e7b4      	b.n	8006028 <_malloc_r+0x4c>
 80060be:	4613      	mov	r3, r2
 80060c0:	e7cc      	b.n	800605c <_malloc_r+0x80>
 80060c2:	230c      	movs	r3, #12
 80060c4:	603b      	str	r3, [r7, #0]
 80060c6:	4638      	mov	r0, r7
 80060c8:	f000 f80e 	bl	80060e8 <__malloc_unlock>
 80060cc:	e797      	b.n	8005ffe <_malloc_r+0x22>
 80060ce:	6025      	str	r5, [r4, #0]
 80060d0:	e7dc      	b.n	800608c <_malloc_r+0xb0>
 80060d2:	605b      	str	r3, [r3, #4]
 80060d4:	deff      	udf	#255	; 0xff
 80060d6:	bf00      	nop
 80060d8:	20000430 	.word	0x20000430

080060dc <__malloc_lock>:
 80060dc:	4801      	ldr	r0, [pc, #4]	; (80060e4 <__malloc_lock+0x8>)
 80060de:	f7ff b88a 	b.w	80051f6 <__retarget_lock_acquire_recursive>
 80060e2:	bf00      	nop
 80060e4:	2000042c 	.word	0x2000042c

080060e8 <__malloc_unlock>:
 80060e8:	4801      	ldr	r0, [pc, #4]	; (80060f0 <__malloc_unlock+0x8>)
 80060ea:	f7ff b885 	b.w	80051f8 <__retarget_lock_release_recursive>
 80060ee:	bf00      	nop
 80060f0:	2000042c 	.word	0x2000042c

080060f4 <_Balloc>:
 80060f4:	b570      	push	{r4, r5, r6, lr}
 80060f6:	69c6      	ldr	r6, [r0, #28]
 80060f8:	4604      	mov	r4, r0
 80060fa:	460d      	mov	r5, r1
 80060fc:	b976      	cbnz	r6, 800611c <_Balloc+0x28>
 80060fe:	2010      	movs	r0, #16
 8006100:	f7ff ff44 	bl	8005f8c <malloc>
 8006104:	4602      	mov	r2, r0
 8006106:	61e0      	str	r0, [r4, #28]
 8006108:	b920      	cbnz	r0, 8006114 <_Balloc+0x20>
 800610a:	4b18      	ldr	r3, [pc, #96]	; (800616c <_Balloc+0x78>)
 800610c:	4818      	ldr	r0, [pc, #96]	; (8006170 <_Balloc+0x7c>)
 800610e:	216b      	movs	r1, #107	; 0x6b
 8006110:	f000 fe12 	bl	8006d38 <__assert_func>
 8006114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006118:	6006      	str	r6, [r0, #0]
 800611a:	60c6      	str	r6, [r0, #12]
 800611c:	69e6      	ldr	r6, [r4, #28]
 800611e:	68f3      	ldr	r3, [r6, #12]
 8006120:	b183      	cbz	r3, 8006144 <_Balloc+0x50>
 8006122:	69e3      	ldr	r3, [r4, #28]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800612a:	b9b8      	cbnz	r0, 800615c <_Balloc+0x68>
 800612c:	2101      	movs	r1, #1
 800612e:	fa01 f605 	lsl.w	r6, r1, r5
 8006132:	1d72      	adds	r2, r6, #5
 8006134:	0092      	lsls	r2, r2, #2
 8006136:	4620      	mov	r0, r4
 8006138:	f000 fe1c 	bl	8006d74 <_calloc_r>
 800613c:	b160      	cbz	r0, 8006158 <_Balloc+0x64>
 800613e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006142:	e00e      	b.n	8006162 <_Balloc+0x6e>
 8006144:	2221      	movs	r2, #33	; 0x21
 8006146:	2104      	movs	r1, #4
 8006148:	4620      	mov	r0, r4
 800614a:	f000 fe13 	bl	8006d74 <_calloc_r>
 800614e:	69e3      	ldr	r3, [r4, #28]
 8006150:	60f0      	str	r0, [r6, #12]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1e4      	bne.n	8006122 <_Balloc+0x2e>
 8006158:	2000      	movs	r0, #0
 800615a:	bd70      	pop	{r4, r5, r6, pc}
 800615c:	6802      	ldr	r2, [r0, #0]
 800615e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006162:	2300      	movs	r3, #0
 8006164:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006168:	e7f7      	b.n	800615a <_Balloc+0x66>
 800616a:	bf00      	nop
 800616c:	08007159 	.word	0x08007159
 8006170:	080071d9 	.word	0x080071d9

08006174 <_Bfree>:
 8006174:	b570      	push	{r4, r5, r6, lr}
 8006176:	69c6      	ldr	r6, [r0, #28]
 8006178:	4605      	mov	r5, r0
 800617a:	460c      	mov	r4, r1
 800617c:	b976      	cbnz	r6, 800619c <_Bfree+0x28>
 800617e:	2010      	movs	r0, #16
 8006180:	f7ff ff04 	bl	8005f8c <malloc>
 8006184:	4602      	mov	r2, r0
 8006186:	61e8      	str	r0, [r5, #28]
 8006188:	b920      	cbnz	r0, 8006194 <_Bfree+0x20>
 800618a:	4b09      	ldr	r3, [pc, #36]	; (80061b0 <_Bfree+0x3c>)
 800618c:	4809      	ldr	r0, [pc, #36]	; (80061b4 <_Bfree+0x40>)
 800618e:	218f      	movs	r1, #143	; 0x8f
 8006190:	f000 fdd2 	bl	8006d38 <__assert_func>
 8006194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006198:	6006      	str	r6, [r0, #0]
 800619a:	60c6      	str	r6, [r0, #12]
 800619c:	b13c      	cbz	r4, 80061ae <_Bfree+0x3a>
 800619e:	69eb      	ldr	r3, [r5, #28]
 80061a0:	6862      	ldr	r2, [r4, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061a8:	6021      	str	r1, [r4, #0]
 80061aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80061ae:	bd70      	pop	{r4, r5, r6, pc}
 80061b0:	08007159 	.word	0x08007159
 80061b4:	080071d9 	.word	0x080071d9

080061b8 <__multadd>:
 80061b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061bc:	690d      	ldr	r5, [r1, #16]
 80061be:	4607      	mov	r7, r0
 80061c0:	460c      	mov	r4, r1
 80061c2:	461e      	mov	r6, r3
 80061c4:	f101 0c14 	add.w	ip, r1, #20
 80061c8:	2000      	movs	r0, #0
 80061ca:	f8dc 3000 	ldr.w	r3, [ip]
 80061ce:	b299      	uxth	r1, r3
 80061d0:	fb02 6101 	mla	r1, r2, r1, r6
 80061d4:	0c1e      	lsrs	r6, r3, #16
 80061d6:	0c0b      	lsrs	r3, r1, #16
 80061d8:	fb02 3306 	mla	r3, r2, r6, r3
 80061dc:	b289      	uxth	r1, r1
 80061de:	3001      	adds	r0, #1
 80061e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80061e4:	4285      	cmp	r5, r0
 80061e6:	f84c 1b04 	str.w	r1, [ip], #4
 80061ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80061ee:	dcec      	bgt.n	80061ca <__multadd+0x12>
 80061f0:	b30e      	cbz	r6, 8006236 <__multadd+0x7e>
 80061f2:	68a3      	ldr	r3, [r4, #8]
 80061f4:	42ab      	cmp	r3, r5
 80061f6:	dc19      	bgt.n	800622c <__multadd+0x74>
 80061f8:	6861      	ldr	r1, [r4, #4]
 80061fa:	4638      	mov	r0, r7
 80061fc:	3101      	adds	r1, #1
 80061fe:	f7ff ff79 	bl	80060f4 <_Balloc>
 8006202:	4680      	mov	r8, r0
 8006204:	b928      	cbnz	r0, 8006212 <__multadd+0x5a>
 8006206:	4602      	mov	r2, r0
 8006208:	4b0c      	ldr	r3, [pc, #48]	; (800623c <__multadd+0x84>)
 800620a:	480d      	ldr	r0, [pc, #52]	; (8006240 <__multadd+0x88>)
 800620c:	21ba      	movs	r1, #186	; 0xba
 800620e:	f000 fd93 	bl	8006d38 <__assert_func>
 8006212:	6922      	ldr	r2, [r4, #16]
 8006214:	3202      	adds	r2, #2
 8006216:	f104 010c 	add.w	r1, r4, #12
 800621a:	0092      	lsls	r2, r2, #2
 800621c:	300c      	adds	r0, #12
 800621e:	f000 fd7d 	bl	8006d1c <memcpy>
 8006222:	4621      	mov	r1, r4
 8006224:	4638      	mov	r0, r7
 8006226:	f7ff ffa5 	bl	8006174 <_Bfree>
 800622a:	4644      	mov	r4, r8
 800622c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006230:	3501      	adds	r5, #1
 8006232:	615e      	str	r6, [r3, #20]
 8006234:	6125      	str	r5, [r4, #16]
 8006236:	4620      	mov	r0, r4
 8006238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800623c:	080071c8 	.word	0x080071c8
 8006240:	080071d9 	.word	0x080071d9

08006244 <__hi0bits>:
 8006244:	0c03      	lsrs	r3, r0, #16
 8006246:	041b      	lsls	r3, r3, #16
 8006248:	b9d3      	cbnz	r3, 8006280 <__hi0bits+0x3c>
 800624a:	0400      	lsls	r0, r0, #16
 800624c:	2310      	movs	r3, #16
 800624e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006252:	bf04      	itt	eq
 8006254:	0200      	lsleq	r0, r0, #8
 8006256:	3308      	addeq	r3, #8
 8006258:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800625c:	bf04      	itt	eq
 800625e:	0100      	lsleq	r0, r0, #4
 8006260:	3304      	addeq	r3, #4
 8006262:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006266:	bf04      	itt	eq
 8006268:	0080      	lsleq	r0, r0, #2
 800626a:	3302      	addeq	r3, #2
 800626c:	2800      	cmp	r0, #0
 800626e:	db05      	blt.n	800627c <__hi0bits+0x38>
 8006270:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006274:	f103 0301 	add.w	r3, r3, #1
 8006278:	bf08      	it	eq
 800627a:	2320      	moveq	r3, #32
 800627c:	4618      	mov	r0, r3
 800627e:	4770      	bx	lr
 8006280:	2300      	movs	r3, #0
 8006282:	e7e4      	b.n	800624e <__hi0bits+0xa>

08006284 <__lo0bits>:
 8006284:	6803      	ldr	r3, [r0, #0]
 8006286:	f013 0207 	ands.w	r2, r3, #7
 800628a:	d00c      	beq.n	80062a6 <__lo0bits+0x22>
 800628c:	07d9      	lsls	r1, r3, #31
 800628e:	d422      	bmi.n	80062d6 <__lo0bits+0x52>
 8006290:	079a      	lsls	r2, r3, #30
 8006292:	bf49      	itett	mi
 8006294:	085b      	lsrmi	r3, r3, #1
 8006296:	089b      	lsrpl	r3, r3, #2
 8006298:	6003      	strmi	r3, [r0, #0]
 800629a:	2201      	movmi	r2, #1
 800629c:	bf5c      	itt	pl
 800629e:	6003      	strpl	r3, [r0, #0]
 80062a0:	2202      	movpl	r2, #2
 80062a2:	4610      	mov	r0, r2
 80062a4:	4770      	bx	lr
 80062a6:	b299      	uxth	r1, r3
 80062a8:	b909      	cbnz	r1, 80062ae <__lo0bits+0x2a>
 80062aa:	0c1b      	lsrs	r3, r3, #16
 80062ac:	2210      	movs	r2, #16
 80062ae:	b2d9      	uxtb	r1, r3
 80062b0:	b909      	cbnz	r1, 80062b6 <__lo0bits+0x32>
 80062b2:	3208      	adds	r2, #8
 80062b4:	0a1b      	lsrs	r3, r3, #8
 80062b6:	0719      	lsls	r1, r3, #28
 80062b8:	bf04      	itt	eq
 80062ba:	091b      	lsreq	r3, r3, #4
 80062bc:	3204      	addeq	r2, #4
 80062be:	0799      	lsls	r1, r3, #30
 80062c0:	bf04      	itt	eq
 80062c2:	089b      	lsreq	r3, r3, #2
 80062c4:	3202      	addeq	r2, #2
 80062c6:	07d9      	lsls	r1, r3, #31
 80062c8:	d403      	bmi.n	80062d2 <__lo0bits+0x4e>
 80062ca:	085b      	lsrs	r3, r3, #1
 80062cc:	f102 0201 	add.w	r2, r2, #1
 80062d0:	d003      	beq.n	80062da <__lo0bits+0x56>
 80062d2:	6003      	str	r3, [r0, #0]
 80062d4:	e7e5      	b.n	80062a2 <__lo0bits+0x1e>
 80062d6:	2200      	movs	r2, #0
 80062d8:	e7e3      	b.n	80062a2 <__lo0bits+0x1e>
 80062da:	2220      	movs	r2, #32
 80062dc:	e7e1      	b.n	80062a2 <__lo0bits+0x1e>
	...

080062e0 <__i2b>:
 80062e0:	b510      	push	{r4, lr}
 80062e2:	460c      	mov	r4, r1
 80062e4:	2101      	movs	r1, #1
 80062e6:	f7ff ff05 	bl	80060f4 <_Balloc>
 80062ea:	4602      	mov	r2, r0
 80062ec:	b928      	cbnz	r0, 80062fa <__i2b+0x1a>
 80062ee:	4b05      	ldr	r3, [pc, #20]	; (8006304 <__i2b+0x24>)
 80062f0:	4805      	ldr	r0, [pc, #20]	; (8006308 <__i2b+0x28>)
 80062f2:	f240 1145 	movw	r1, #325	; 0x145
 80062f6:	f000 fd1f 	bl	8006d38 <__assert_func>
 80062fa:	2301      	movs	r3, #1
 80062fc:	6144      	str	r4, [r0, #20]
 80062fe:	6103      	str	r3, [r0, #16]
 8006300:	bd10      	pop	{r4, pc}
 8006302:	bf00      	nop
 8006304:	080071c8 	.word	0x080071c8
 8006308:	080071d9 	.word	0x080071d9

0800630c <__multiply>:
 800630c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006310:	4691      	mov	r9, r2
 8006312:	690a      	ldr	r2, [r1, #16]
 8006314:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006318:	429a      	cmp	r2, r3
 800631a:	bfb8      	it	lt
 800631c:	460b      	movlt	r3, r1
 800631e:	460c      	mov	r4, r1
 8006320:	bfbc      	itt	lt
 8006322:	464c      	movlt	r4, r9
 8006324:	4699      	movlt	r9, r3
 8006326:	6927      	ldr	r7, [r4, #16]
 8006328:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800632c:	68a3      	ldr	r3, [r4, #8]
 800632e:	6861      	ldr	r1, [r4, #4]
 8006330:	eb07 060a 	add.w	r6, r7, sl
 8006334:	42b3      	cmp	r3, r6
 8006336:	b085      	sub	sp, #20
 8006338:	bfb8      	it	lt
 800633a:	3101      	addlt	r1, #1
 800633c:	f7ff feda 	bl	80060f4 <_Balloc>
 8006340:	b930      	cbnz	r0, 8006350 <__multiply+0x44>
 8006342:	4602      	mov	r2, r0
 8006344:	4b44      	ldr	r3, [pc, #272]	; (8006458 <__multiply+0x14c>)
 8006346:	4845      	ldr	r0, [pc, #276]	; (800645c <__multiply+0x150>)
 8006348:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800634c:	f000 fcf4 	bl	8006d38 <__assert_func>
 8006350:	f100 0514 	add.w	r5, r0, #20
 8006354:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006358:	462b      	mov	r3, r5
 800635a:	2200      	movs	r2, #0
 800635c:	4543      	cmp	r3, r8
 800635e:	d321      	bcc.n	80063a4 <__multiply+0x98>
 8006360:	f104 0314 	add.w	r3, r4, #20
 8006364:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006368:	f109 0314 	add.w	r3, r9, #20
 800636c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006370:	9202      	str	r2, [sp, #8]
 8006372:	1b3a      	subs	r2, r7, r4
 8006374:	3a15      	subs	r2, #21
 8006376:	f022 0203 	bic.w	r2, r2, #3
 800637a:	3204      	adds	r2, #4
 800637c:	f104 0115 	add.w	r1, r4, #21
 8006380:	428f      	cmp	r7, r1
 8006382:	bf38      	it	cc
 8006384:	2204      	movcc	r2, #4
 8006386:	9201      	str	r2, [sp, #4]
 8006388:	9a02      	ldr	r2, [sp, #8]
 800638a:	9303      	str	r3, [sp, #12]
 800638c:	429a      	cmp	r2, r3
 800638e:	d80c      	bhi.n	80063aa <__multiply+0x9e>
 8006390:	2e00      	cmp	r6, #0
 8006392:	dd03      	ble.n	800639c <__multiply+0x90>
 8006394:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006398:	2b00      	cmp	r3, #0
 800639a:	d05b      	beq.n	8006454 <__multiply+0x148>
 800639c:	6106      	str	r6, [r0, #16]
 800639e:	b005      	add	sp, #20
 80063a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a4:	f843 2b04 	str.w	r2, [r3], #4
 80063a8:	e7d8      	b.n	800635c <__multiply+0x50>
 80063aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80063ae:	f1ba 0f00 	cmp.w	sl, #0
 80063b2:	d024      	beq.n	80063fe <__multiply+0xf2>
 80063b4:	f104 0e14 	add.w	lr, r4, #20
 80063b8:	46a9      	mov	r9, r5
 80063ba:	f04f 0c00 	mov.w	ip, #0
 80063be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80063c2:	f8d9 1000 	ldr.w	r1, [r9]
 80063c6:	fa1f fb82 	uxth.w	fp, r2
 80063ca:	b289      	uxth	r1, r1
 80063cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80063d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80063d4:	f8d9 2000 	ldr.w	r2, [r9]
 80063d8:	4461      	add	r1, ip
 80063da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063de:	fb0a c20b 	mla	r2, sl, fp, ip
 80063e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80063e6:	b289      	uxth	r1, r1
 80063e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80063ec:	4577      	cmp	r7, lr
 80063ee:	f849 1b04 	str.w	r1, [r9], #4
 80063f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80063f6:	d8e2      	bhi.n	80063be <__multiply+0xb2>
 80063f8:	9a01      	ldr	r2, [sp, #4]
 80063fa:	f845 c002 	str.w	ip, [r5, r2]
 80063fe:	9a03      	ldr	r2, [sp, #12]
 8006400:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006404:	3304      	adds	r3, #4
 8006406:	f1b9 0f00 	cmp.w	r9, #0
 800640a:	d021      	beq.n	8006450 <__multiply+0x144>
 800640c:	6829      	ldr	r1, [r5, #0]
 800640e:	f104 0c14 	add.w	ip, r4, #20
 8006412:	46ae      	mov	lr, r5
 8006414:	f04f 0a00 	mov.w	sl, #0
 8006418:	f8bc b000 	ldrh.w	fp, [ip]
 800641c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006420:	fb09 220b 	mla	r2, r9, fp, r2
 8006424:	4452      	add	r2, sl
 8006426:	b289      	uxth	r1, r1
 8006428:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800642c:	f84e 1b04 	str.w	r1, [lr], #4
 8006430:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006434:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006438:	f8be 1000 	ldrh.w	r1, [lr]
 800643c:	fb09 110a 	mla	r1, r9, sl, r1
 8006440:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006444:	4567      	cmp	r7, ip
 8006446:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800644a:	d8e5      	bhi.n	8006418 <__multiply+0x10c>
 800644c:	9a01      	ldr	r2, [sp, #4]
 800644e:	50a9      	str	r1, [r5, r2]
 8006450:	3504      	adds	r5, #4
 8006452:	e799      	b.n	8006388 <__multiply+0x7c>
 8006454:	3e01      	subs	r6, #1
 8006456:	e79b      	b.n	8006390 <__multiply+0x84>
 8006458:	080071c8 	.word	0x080071c8
 800645c:	080071d9 	.word	0x080071d9

08006460 <__pow5mult>:
 8006460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006464:	4615      	mov	r5, r2
 8006466:	f012 0203 	ands.w	r2, r2, #3
 800646a:	4606      	mov	r6, r0
 800646c:	460f      	mov	r7, r1
 800646e:	d007      	beq.n	8006480 <__pow5mult+0x20>
 8006470:	4c25      	ldr	r4, [pc, #148]	; (8006508 <__pow5mult+0xa8>)
 8006472:	3a01      	subs	r2, #1
 8006474:	2300      	movs	r3, #0
 8006476:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800647a:	f7ff fe9d 	bl	80061b8 <__multadd>
 800647e:	4607      	mov	r7, r0
 8006480:	10ad      	asrs	r5, r5, #2
 8006482:	d03d      	beq.n	8006500 <__pow5mult+0xa0>
 8006484:	69f4      	ldr	r4, [r6, #28]
 8006486:	b97c      	cbnz	r4, 80064a8 <__pow5mult+0x48>
 8006488:	2010      	movs	r0, #16
 800648a:	f7ff fd7f 	bl	8005f8c <malloc>
 800648e:	4602      	mov	r2, r0
 8006490:	61f0      	str	r0, [r6, #28]
 8006492:	b928      	cbnz	r0, 80064a0 <__pow5mult+0x40>
 8006494:	4b1d      	ldr	r3, [pc, #116]	; (800650c <__pow5mult+0xac>)
 8006496:	481e      	ldr	r0, [pc, #120]	; (8006510 <__pow5mult+0xb0>)
 8006498:	f240 11b3 	movw	r1, #435	; 0x1b3
 800649c:	f000 fc4c 	bl	8006d38 <__assert_func>
 80064a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064a4:	6004      	str	r4, [r0, #0]
 80064a6:	60c4      	str	r4, [r0, #12]
 80064a8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80064ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064b0:	b94c      	cbnz	r4, 80064c6 <__pow5mult+0x66>
 80064b2:	f240 2171 	movw	r1, #625	; 0x271
 80064b6:	4630      	mov	r0, r6
 80064b8:	f7ff ff12 	bl	80062e0 <__i2b>
 80064bc:	2300      	movs	r3, #0
 80064be:	f8c8 0008 	str.w	r0, [r8, #8]
 80064c2:	4604      	mov	r4, r0
 80064c4:	6003      	str	r3, [r0, #0]
 80064c6:	f04f 0900 	mov.w	r9, #0
 80064ca:	07eb      	lsls	r3, r5, #31
 80064cc:	d50a      	bpl.n	80064e4 <__pow5mult+0x84>
 80064ce:	4639      	mov	r1, r7
 80064d0:	4622      	mov	r2, r4
 80064d2:	4630      	mov	r0, r6
 80064d4:	f7ff ff1a 	bl	800630c <__multiply>
 80064d8:	4639      	mov	r1, r7
 80064da:	4680      	mov	r8, r0
 80064dc:	4630      	mov	r0, r6
 80064de:	f7ff fe49 	bl	8006174 <_Bfree>
 80064e2:	4647      	mov	r7, r8
 80064e4:	106d      	asrs	r5, r5, #1
 80064e6:	d00b      	beq.n	8006500 <__pow5mult+0xa0>
 80064e8:	6820      	ldr	r0, [r4, #0]
 80064ea:	b938      	cbnz	r0, 80064fc <__pow5mult+0x9c>
 80064ec:	4622      	mov	r2, r4
 80064ee:	4621      	mov	r1, r4
 80064f0:	4630      	mov	r0, r6
 80064f2:	f7ff ff0b 	bl	800630c <__multiply>
 80064f6:	6020      	str	r0, [r4, #0]
 80064f8:	f8c0 9000 	str.w	r9, [r0]
 80064fc:	4604      	mov	r4, r0
 80064fe:	e7e4      	b.n	80064ca <__pow5mult+0x6a>
 8006500:	4638      	mov	r0, r7
 8006502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006506:	bf00      	nop
 8006508:	08007328 	.word	0x08007328
 800650c:	08007159 	.word	0x08007159
 8006510:	080071d9 	.word	0x080071d9

08006514 <__lshift>:
 8006514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006518:	460c      	mov	r4, r1
 800651a:	6849      	ldr	r1, [r1, #4]
 800651c:	6923      	ldr	r3, [r4, #16]
 800651e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006522:	68a3      	ldr	r3, [r4, #8]
 8006524:	4607      	mov	r7, r0
 8006526:	4691      	mov	r9, r2
 8006528:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800652c:	f108 0601 	add.w	r6, r8, #1
 8006530:	42b3      	cmp	r3, r6
 8006532:	db0b      	blt.n	800654c <__lshift+0x38>
 8006534:	4638      	mov	r0, r7
 8006536:	f7ff fddd 	bl	80060f4 <_Balloc>
 800653a:	4605      	mov	r5, r0
 800653c:	b948      	cbnz	r0, 8006552 <__lshift+0x3e>
 800653e:	4602      	mov	r2, r0
 8006540:	4b28      	ldr	r3, [pc, #160]	; (80065e4 <__lshift+0xd0>)
 8006542:	4829      	ldr	r0, [pc, #164]	; (80065e8 <__lshift+0xd4>)
 8006544:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006548:	f000 fbf6 	bl	8006d38 <__assert_func>
 800654c:	3101      	adds	r1, #1
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	e7ee      	b.n	8006530 <__lshift+0x1c>
 8006552:	2300      	movs	r3, #0
 8006554:	f100 0114 	add.w	r1, r0, #20
 8006558:	f100 0210 	add.w	r2, r0, #16
 800655c:	4618      	mov	r0, r3
 800655e:	4553      	cmp	r3, sl
 8006560:	db33      	blt.n	80065ca <__lshift+0xb6>
 8006562:	6920      	ldr	r0, [r4, #16]
 8006564:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006568:	f104 0314 	add.w	r3, r4, #20
 800656c:	f019 091f 	ands.w	r9, r9, #31
 8006570:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006574:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006578:	d02b      	beq.n	80065d2 <__lshift+0xbe>
 800657a:	f1c9 0e20 	rsb	lr, r9, #32
 800657e:	468a      	mov	sl, r1
 8006580:	2200      	movs	r2, #0
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	fa00 f009 	lsl.w	r0, r0, r9
 8006588:	4310      	orrs	r0, r2
 800658a:	f84a 0b04 	str.w	r0, [sl], #4
 800658e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006592:	459c      	cmp	ip, r3
 8006594:	fa22 f20e 	lsr.w	r2, r2, lr
 8006598:	d8f3      	bhi.n	8006582 <__lshift+0x6e>
 800659a:	ebac 0304 	sub.w	r3, ip, r4
 800659e:	3b15      	subs	r3, #21
 80065a0:	f023 0303 	bic.w	r3, r3, #3
 80065a4:	3304      	adds	r3, #4
 80065a6:	f104 0015 	add.w	r0, r4, #21
 80065aa:	4584      	cmp	ip, r0
 80065ac:	bf38      	it	cc
 80065ae:	2304      	movcc	r3, #4
 80065b0:	50ca      	str	r2, [r1, r3]
 80065b2:	b10a      	cbz	r2, 80065b8 <__lshift+0xa4>
 80065b4:	f108 0602 	add.w	r6, r8, #2
 80065b8:	3e01      	subs	r6, #1
 80065ba:	4638      	mov	r0, r7
 80065bc:	612e      	str	r6, [r5, #16]
 80065be:	4621      	mov	r1, r4
 80065c0:	f7ff fdd8 	bl	8006174 <_Bfree>
 80065c4:	4628      	mov	r0, r5
 80065c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80065ce:	3301      	adds	r3, #1
 80065d0:	e7c5      	b.n	800655e <__lshift+0x4a>
 80065d2:	3904      	subs	r1, #4
 80065d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80065d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80065dc:	459c      	cmp	ip, r3
 80065de:	d8f9      	bhi.n	80065d4 <__lshift+0xc0>
 80065e0:	e7ea      	b.n	80065b8 <__lshift+0xa4>
 80065e2:	bf00      	nop
 80065e4:	080071c8 	.word	0x080071c8
 80065e8:	080071d9 	.word	0x080071d9

080065ec <__mcmp>:
 80065ec:	b530      	push	{r4, r5, lr}
 80065ee:	6902      	ldr	r2, [r0, #16]
 80065f0:	690c      	ldr	r4, [r1, #16]
 80065f2:	1b12      	subs	r2, r2, r4
 80065f4:	d10e      	bne.n	8006614 <__mcmp+0x28>
 80065f6:	f100 0314 	add.w	r3, r0, #20
 80065fa:	3114      	adds	r1, #20
 80065fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006600:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006604:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006608:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800660c:	42a5      	cmp	r5, r4
 800660e:	d003      	beq.n	8006618 <__mcmp+0x2c>
 8006610:	d305      	bcc.n	800661e <__mcmp+0x32>
 8006612:	2201      	movs	r2, #1
 8006614:	4610      	mov	r0, r2
 8006616:	bd30      	pop	{r4, r5, pc}
 8006618:	4283      	cmp	r3, r0
 800661a:	d3f3      	bcc.n	8006604 <__mcmp+0x18>
 800661c:	e7fa      	b.n	8006614 <__mcmp+0x28>
 800661e:	f04f 32ff 	mov.w	r2, #4294967295
 8006622:	e7f7      	b.n	8006614 <__mcmp+0x28>

08006624 <__mdiff>:
 8006624:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006628:	460c      	mov	r4, r1
 800662a:	4606      	mov	r6, r0
 800662c:	4611      	mov	r1, r2
 800662e:	4620      	mov	r0, r4
 8006630:	4690      	mov	r8, r2
 8006632:	f7ff ffdb 	bl	80065ec <__mcmp>
 8006636:	1e05      	subs	r5, r0, #0
 8006638:	d110      	bne.n	800665c <__mdiff+0x38>
 800663a:	4629      	mov	r1, r5
 800663c:	4630      	mov	r0, r6
 800663e:	f7ff fd59 	bl	80060f4 <_Balloc>
 8006642:	b930      	cbnz	r0, 8006652 <__mdiff+0x2e>
 8006644:	4b3a      	ldr	r3, [pc, #232]	; (8006730 <__mdiff+0x10c>)
 8006646:	4602      	mov	r2, r0
 8006648:	f240 2137 	movw	r1, #567	; 0x237
 800664c:	4839      	ldr	r0, [pc, #228]	; (8006734 <__mdiff+0x110>)
 800664e:	f000 fb73 	bl	8006d38 <__assert_func>
 8006652:	2301      	movs	r3, #1
 8006654:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006658:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665c:	bfa4      	itt	ge
 800665e:	4643      	movge	r3, r8
 8006660:	46a0      	movge	r8, r4
 8006662:	4630      	mov	r0, r6
 8006664:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006668:	bfa6      	itte	ge
 800666a:	461c      	movge	r4, r3
 800666c:	2500      	movge	r5, #0
 800666e:	2501      	movlt	r5, #1
 8006670:	f7ff fd40 	bl	80060f4 <_Balloc>
 8006674:	b920      	cbnz	r0, 8006680 <__mdiff+0x5c>
 8006676:	4b2e      	ldr	r3, [pc, #184]	; (8006730 <__mdiff+0x10c>)
 8006678:	4602      	mov	r2, r0
 800667a:	f240 2145 	movw	r1, #581	; 0x245
 800667e:	e7e5      	b.n	800664c <__mdiff+0x28>
 8006680:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006684:	6926      	ldr	r6, [r4, #16]
 8006686:	60c5      	str	r5, [r0, #12]
 8006688:	f104 0914 	add.w	r9, r4, #20
 800668c:	f108 0514 	add.w	r5, r8, #20
 8006690:	f100 0e14 	add.w	lr, r0, #20
 8006694:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006698:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800669c:	f108 0210 	add.w	r2, r8, #16
 80066a0:	46f2      	mov	sl, lr
 80066a2:	2100      	movs	r1, #0
 80066a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80066a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80066ac:	fa11 f88b 	uxtah	r8, r1, fp
 80066b0:	b299      	uxth	r1, r3
 80066b2:	0c1b      	lsrs	r3, r3, #16
 80066b4:	eba8 0801 	sub.w	r8, r8, r1
 80066b8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80066bc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80066c0:	fa1f f888 	uxth.w	r8, r8
 80066c4:	1419      	asrs	r1, r3, #16
 80066c6:	454e      	cmp	r6, r9
 80066c8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80066cc:	f84a 3b04 	str.w	r3, [sl], #4
 80066d0:	d8e8      	bhi.n	80066a4 <__mdiff+0x80>
 80066d2:	1b33      	subs	r3, r6, r4
 80066d4:	3b15      	subs	r3, #21
 80066d6:	f023 0303 	bic.w	r3, r3, #3
 80066da:	3304      	adds	r3, #4
 80066dc:	3415      	adds	r4, #21
 80066de:	42a6      	cmp	r6, r4
 80066e0:	bf38      	it	cc
 80066e2:	2304      	movcc	r3, #4
 80066e4:	441d      	add	r5, r3
 80066e6:	4473      	add	r3, lr
 80066e8:	469e      	mov	lr, r3
 80066ea:	462e      	mov	r6, r5
 80066ec:	4566      	cmp	r6, ip
 80066ee:	d30e      	bcc.n	800670e <__mdiff+0xea>
 80066f0:	f10c 0203 	add.w	r2, ip, #3
 80066f4:	1b52      	subs	r2, r2, r5
 80066f6:	f022 0203 	bic.w	r2, r2, #3
 80066fa:	3d03      	subs	r5, #3
 80066fc:	45ac      	cmp	ip, r5
 80066fe:	bf38      	it	cc
 8006700:	2200      	movcc	r2, #0
 8006702:	4413      	add	r3, r2
 8006704:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006708:	b17a      	cbz	r2, 800672a <__mdiff+0x106>
 800670a:	6107      	str	r7, [r0, #16]
 800670c:	e7a4      	b.n	8006658 <__mdiff+0x34>
 800670e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006712:	fa11 f288 	uxtah	r2, r1, r8
 8006716:	1414      	asrs	r4, r2, #16
 8006718:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800671c:	b292      	uxth	r2, r2
 800671e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006722:	f84e 2b04 	str.w	r2, [lr], #4
 8006726:	1421      	asrs	r1, r4, #16
 8006728:	e7e0      	b.n	80066ec <__mdiff+0xc8>
 800672a:	3f01      	subs	r7, #1
 800672c:	e7ea      	b.n	8006704 <__mdiff+0xe0>
 800672e:	bf00      	nop
 8006730:	080071c8 	.word	0x080071c8
 8006734:	080071d9 	.word	0x080071d9

08006738 <__d2b>:
 8006738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800673c:	460f      	mov	r7, r1
 800673e:	2101      	movs	r1, #1
 8006740:	ec59 8b10 	vmov	r8, r9, d0
 8006744:	4616      	mov	r6, r2
 8006746:	f7ff fcd5 	bl	80060f4 <_Balloc>
 800674a:	4604      	mov	r4, r0
 800674c:	b930      	cbnz	r0, 800675c <__d2b+0x24>
 800674e:	4602      	mov	r2, r0
 8006750:	4b24      	ldr	r3, [pc, #144]	; (80067e4 <__d2b+0xac>)
 8006752:	4825      	ldr	r0, [pc, #148]	; (80067e8 <__d2b+0xb0>)
 8006754:	f240 310f 	movw	r1, #783	; 0x30f
 8006758:	f000 faee 	bl	8006d38 <__assert_func>
 800675c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006764:	bb2d      	cbnz	r5, 80067b2 <__d2b+0x7a>
 8006766:	9301      	str	r3, [sp, #4]
 8006768:	f1b8 0300 	subs.w	r3, r8, #0
 800676c:	d026      	beq.n	80067bc <__d2b+0x84>
 800676e:	4668      	mov	r0, sp
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	f7ff fd87 	bl	8006284 <__lo0bits>
 8006776:	e9dd 1200 	ldrd	r1, r2, [sp]
 800677a:	b1e8      	cbz	r0, 80067b8 <__d2b+0x80>
 800677c:	f1c0 0320 	rsb	r3, r0, #32
 8006780:	fa02 f303 	lsl.w	r3, r2, r3
 8006784:	430b      	orrs	r3, r1
 8006786:	40c2      	lsrs	r2, r0
 8006788:	6163      	str	r3, [r4, #20]
 800678a:	9201      	str	r2, [sp, #4]
 800678c:	9b01      	ldr	r3, [sp, #4]
 800678e:	61a3      	str	r3, [r4, #24]
 8006790:	2b00      	cmp	r3, #0
 8006792:	bf14      	ite	ne
 8006794:	2202      	movne	r2, #2
 8006796:	2201      	moveq	r2, #1
 8006798:	6122      	str	r2, [r4, #16]
 800679a:	b1bd      	cbz	r5, 80067cc <__d2b+0x94>
 800679c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80067a0:	4405      	add	r5, r0
 80067a2:	603d      	str	r5, [r7, #0]
 80067a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80067a8:	6030      	str	r0, [r6, #0]
 80067aa:	4620      	mov	r0, r4
 80067ac:	b003      	add	sp, #12
 80067ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067b6:	e7d6      	b.n	8006766 <__d2b+0x2e>
 80067b8:	6161      	str	r1, [r4, #20]
 80067ba:	e7e7      	b.n	800678c <__d2b+0x54>
 80067bc:	a801      	add	r0, sp, #4
 80067be:	f7ff fd61 	bl	8006284 <__lo0bits>
 80067c2:	9b01      	ldr	r3, [sp, #4]
 80067c4:	6163      	str	r3, [r4, #20]
 80067c6:	3020      	adds	r0, #32
 80067c8:	2201      	movs	r2, #1
 80067ca:	e7e5      	b.n	8006798 <__d2b+0x60>
 80067cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80067d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80067d4:	6038      	str	r0, [r7, #0]
 80067d6:	6918      	ldr	r0, [r3, #16]
 80067d8:	f7ff fd34 	bl	8006244 <__hi0bits>
 80067dc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80067e0:	e7e2      	b.n	80067a8 <__d2b+0x70>
 80067e2:	bf00      	nop
 80067e4:	080071c8 	.word	0x080071c8
 80067e8:	080071d9 	.word	0x080071d9

080067ec <__sfputc_r>:
 80067ec:	6893      	ldr	r3, [r2, #8]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	b410      	push	{r4}
 80067f4:	6093      	str	r3, [r2, #8]
 80067f6:	da08      	bge.n	800680a <__sfputc_r+0x1e>
 80067f8:	6994      	ldr	r4, [r2, #24]
 80067fa:	42a3      	cmp	r3, r4
 80067fc:	db01      	blt.n	8006802 <__sfputc_r+0x16>
 80067fe:	290a      	cmp	r1, #10
 8006800:	d103      	bne.n	800680a <__sfputc_r+0x1e>
 8006802:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006806:	f000 b9e3 	b.w	8006bd0 <__swbuf_r>
 800680a:	6813      	ldr	r3, [r2, #0]
 800680c:	1c58      	adds	r0, r3, #1
 800680e:	6010      	str	r0, [r2, #0]
 8006810:	7019      	strb	r1, [r3, #0]
 8006812:	4608      	mov	r0, r1
 8006814:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006818:	4770      	bx	lr

0800681a <__sfputs_r>:
 800681a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681c:	4606      	mov	r6, r0
 800681e:	460f      	mov	r7, r1
 8006820:	4614      	mov	r4, r2
 8006822:	18d5      	adds	r5, r2, r3
 8006824:	42ac      	cmp	r4, r5
 8006826:	d101      	bne.n	800682c <__sfputs_r+0x12>
 8006828:	2000      	movs	r0, #0
 800682a:	e007      	b.n	800683c <__sfputs_r+0x22>
 800682c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006830:	463a      	mov	r2, r7
 8006832:	4630      	mov	r0, r6
 8006834:	f7ff ffda 	bl	80067ec <__sfputc_r>
 8006838:	1c43      	adds	r3, r0, #1
 800683a:	d1f3      	bne.n	8006824 <__sfputs_r+0xa>
 800683c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006840 <_vfiprintf_r>:
 8006840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006844:	460d      	mov	r5, r1
 8006846:	b09d      	sub	sp, #116	; 0x74
 8006848:	4614      	mov	r4, r2
 800684a:	4698      	mov	r8, r3
 800684c:	4606      	mov	r6, r0
 800684e:	b118      	cbz	r0, 8006858 <_vfiprintf_r+0x18>
 8006850:	6a03      	ldr	r3, [r0, #32]
 8006852:	b90b      	cbnz	r3, 8006858 <_vfiprintf_r+0x18>
 8006854:	f7fe fbc6 	bl	8004fe4 <__sinit>
 8006858:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800685a:	07d9      	lsls	r1, r3, #31
 800685c:	d405      	bmi.n	800686a <_vfiprintf_r+0x2a>
 800685e:	89ab      	ldrh	r3, [r5, #12]
 8006860:	059a      	lsls	r2, r3, #22
 8006862:	d402      	bmi.n	800686a <_vfiprintf_r+0x2a>
 8006864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006866:	f7fe fcc6 	bl	80051f6 <__retarget_lock_acquire_recursive>
 800686a:	89ab      	ldrh	r3, [r5, #12]
 800686c:	071b      	lsls	r3, r3, #28
 800686e:	d501      	bpl.n	8006874 <_vfiprintf_r+0x34>
 8006870:	692b      	ldr	r3, [r5, #16]
 8006872:	b99b      	cbnz	r3, 800689c <_vfiprintf_r+0x5c>
 8006874:	4629      	mov	r1, r5
 8006876:	4630      	mov	r0, r6
 8006878:	f000 f9e8 	bl	8006c4c <__swsetup_r>
 800687c:	b170      	cbz	r0, 800689c <_vfiprintf_r+0x5c>
 800687e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006880:	07dc      	lsls	r4, r3, #31
 8006882:	d504      	bpl.n	800688e <_vfiprintf_r+0x4e>
 8006884:	f04f 30ff 	mov.w	r0, #4294967295
 8006888:	b01d      	add	sp, #116	; 0x74
 800688a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688e:	89ab      	ldrh	r3, [r5, #12]
 8006890:	0598      	lsls	r0, r3, #22
 8006892:	d4f7      	bmi.n	8006884 <_vfiprintf_r+0x44>
 8006894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006896:	f7fe fcaf 	bl	80051f8 <__retarget_lock_release_recursive>
 800689a:	e7f3      	b.n	8006884 <_vfiprintf_r+0x44>
 800689c:	2300      	movs	r3, #0
 800689e:	9309      	str	r3, [sp, #36]	; 0x24
 80068a0:	2320      	movs	r3, #32
 80068a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80068aa:	2330      	movs	r3, #48	; 0x30
 80068ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006a60 <_vfiprintf_r+0x220>
 80068b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068b4:	f04f 0901 	mov.w	r9, #1
 80068b8:	4623      	mov	r3, r4
 80068ba:	469a      	mov	sl, r3
 80068bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068c0:	b10a      	cbz	r2, 80068c6 <_vfiprintf_r+0x86>
 80068c2:	2a25      	cmp	r2, #37	; 0x25
 80068c4:	d1f9      	bne.n	80068ba <_vfiprintf_r+0x7a>
 80068c6:	ebba 0b04 	subs.w	fp, sl, r4
 80068ca:	d00b      	beq.n	80068e4 <_vfiprintf_r+0xa4>
 80068cc:	465b      	mov	r3, fp
 80068ce:	4622      	mov	r2, r4
 80068d0:	4629      	mov	r1, r5
 80068d2:	4630      	mov	r0, r6
 80068d4:	f7ff ffa1 	bl	800681a <__sfputs_r>
 80068d8:	3001      	adds	r0, #1
 80068da:	f000 80a9 	beq.w	8006a30 <_vfiprintf_r+0x1f0>
 80068de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068e0:	445a      	add	r2, fp
 80068e2:	9209      	str	r2, [sp, #36]	; 0x24
 80068e4:	f89a 3000 	ldrb.w	r3, [sl]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 80a1 	beq.w	8006a30 <_vfiprintf_r+0x1f0>
 80068ee:	2300      	movs	r3, #0
 80068f0:	f04f 32ff 	mov.w	r2, #4294967295
 80068f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068f8:	f10a 0a01 	add.w	sl, sl, #1
 80068fc:	9304      	str	r3, [sp, #16]
 80068fe:	9307      	str	r3, [sp, #28]
 8006900:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006904:	931a      	str	r3, [sp, #104]	; 0x68
 8006906:	4654      	mov	r4, sl
 8006908:	2205      	movs	r2, #5
 800690a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800690e:	4854      	ldr	r0, [pc, #336]	; (8006a60 <_vfiprintf_r+0x220>)
 8006910:	f7f9 fc36 	bl	8000180 <memchr>
 8006914:	9a04      	ldr	r2, [sp, #16]
 8006916:	b9d8      	cbnz	r0, 8006950 <_vfiprintf_r+0x110>
 8006918:	06d1      	lsls	r1, r2, #27
 800691a:	bf44      	itt	mi
 800691c:	2320      	movmi	r3, #32
 800691e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006922:	0713      	lsls	r3, r2, #28
 8006924:	bf44      	itt	mi
 8006926:	232b      	movmi	r3, #43	; 0x2b
 8006928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800692c:	f89a 3000 	ldrb.w	r3, [sl]
 8006930:	2b2a      	cmp	r3, #42	; 0x2a
 8006932:	d015      	beq.n	8006960 <_vfiprintf_r+0x120>
 8006934:	9a07      	ldr	r2, [sp, #28]
 8006936:	4654      	mov	r4, sl
 8006938:	2000      	movs	r0, #0
 800693a:	f04f 0c0a 	mov.w	ip, #10
 800693e:	4621      	mov	r1, r4
 8006940:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006944:	3b30      	subs	r3, #48	; 0x30
 8006946:	2b09      	cmp	r3, #9
 8006948:	d94d      	bls.n	80069e6 <_vfiprintf_r+0x1a6>
 800694a:	b1b0      	cbz	r0, 800697a <_vfiprintf_r+0x13a>
 800694c:	9207      	str	r2, [sp, #28]
 800694e:	e014      	b.n	800697a <_vfiprintf_r+0x13a>
 8006950:	eba0 0308 	sub.w	r3, r0, r8
 8006954:	fa09 f303 	lsl.w	r3, r9, r3
 8006958:	4313      	orrs	r3, r2
 800695a:	9304      	str	r3, [sp, #16]
 800695c:	46a2      	mov	sl, r4
 800695e:	e7d2      	b.n	8006906 <_vfiprintf_r+0xc6>
 8006960:	9b03      	ldr	r3, [sp, #12]
 8006962:	1d19      	adds	r1, r3, #4
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	9103      	str	r1, [sp, #12]
 8006968:	2b00      	cmp	r3, #0
 800696a:	bfbb      	ittet	lt
 800696c:	425b      	neglt	r3, r3
 800696e:	f042 0202 	orrlt.w	r2, r2, #2
 8006972:	9307      	strge	r3, [sp, #28]
 8006974:	9307      	strlt	r3, [sp, #28]
 8006976:	bfb8      	it	lt
 8006978:	9204      	strlt	r2, [sp, #16]
 800697a:	7823      	ldrb	r3, [r4, #0]
 800697c:	2b2e      	cmp	r3, #46	; 0x2e
 800697e:	d10c      	bne.n	800699a <_vfiprintf_r+0x15a>
 8006980:	7863      	ldrb	r3, [r4, #1]
 8006982:	2b2a      	cmp	r3, #42	; 0x2a
 8006984:	d134      	bne.n	80069f0 <_vfiprintf_r+0x1b0>
 8006986:	9b03      	ldr	r3, [sp, #12]
 8006988:	1d1a      	adds	r2, r3, #4
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	9203      	str	r2, [sp, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	bfb8      	it	lt
 8006992:	f04f 33ff 	movlt.w	r3, #4294967295
 8006996:	3402      	adds	r4, #2
 8006998:	9305      	str	r3, [sp, #20]
 800699a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006a70 <_vfiprintf_r+0x230>
 800699e:	7821      	ldrb	r1, [r4, #0]
 80069a0:	2203      	movs	r2, #3
 80069a2:	4650      	mov	r0, sl
 80069a4:	f7f9 fbec 	bl	8000180 <memchr>
 80069a8:	b138      	cbz	r0, 80069ba <_vfiprintf_r+0x17a>
 80069aa:	9b04      	ldr	r3, [sp, #16]
 80069ac:	eba0 000a 	sub.w	r0, r0, sl
 80069b0:	2240      	movs	r2, #64	; 0x40
 80069b2:	4082      	lsls	r2, r0
 80069b4:	4313      	orrs	r3, r2
 80069b6:	3401      	adds	r4, #1
 80069b8:	9304      	str	r3, [sp, #16]
 80069ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069be:	4829      	ldr	r0, [pc, #164]	; (8006a64 <_vfiprintf_r+0x224>)
 80069c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069c4:	2206      	movs	r2, #6
 80069c6:	f7f9 fbdb 	bl	8000180 <memchr>
 80069ca:	2800      	cmp	r0, #0
 80069cc:	d03f      	beq.n	8006a4e <_vfiprintf_r+0x20e>
 80069ce:	4b26      	ldr	r3, [pc, #152]	; (8006a68 <_vfiprintf_r+0x228>)
 80069d0:	bb1b      	cbnz	r3, 8006a1a <_vfiprintf_r+0x1da>
 80069d2:	9b03      	ldr	r3, [sp, #12]
 80069d4:	3307      	adds	r3, #7
 80069d6:	f023 0307 	bic.w	r3, r3, #7
 80069da:	3308      	adds	r3, #8
 80069dc:	9303      	str	r3, [sp, #12]
 80069de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e0:	443b      	add	r3, r7
 80069e2:	9309      	str	r3, [sp, #36]	; 0x24
 80069e4:	e768      	b.n	80068b8 <_vfiprintf_r+0x78>
 80069e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80069ea:	460c      	mov	r4, r1
 80069ec:	2001      	movs	r0, #1
 80069ee:	e7a6      	b.n	800693e <_vfiprintf_r+0xfe>
 80069f0:	2300      	movs	r3, #0
 80069f2:	3401      	adds	r4, #1
 80069f4:	9305      	str	r3, [sp, #20]
 80069f6:	4619      	mov	r1, r3
 80069f8:	f04f 0c0a 	mov.w	ip, #10
 80069fc:	4620      	mov	r0, r4
 80069fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a02:	3a30      	subs	r2, #48	; 0x30
 8006a04:	2a09      	cmp	r2, #9
 8006a06:	d903      	bls.n	8006a10 <_vfiprintf_r+0x1d0>
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0c6      	beq.n	800699a <_vfiprintf_r+0x15a>
 8006a0c:	9105      	str	r1, [sp, #20]
 8006a0e:	e7c4      	b.n	800699a <_vfiprintf_r+0x15a>
 8006a10:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a14:	4604      	mov	r4, r0
 8006a16:	2301      	movs	r3, #1
 8006a18:	e7f0      	b.n	80069fc <_vfiprintf_r+0x1bc>
 8006a1a:	ab03      	add	r3, sp, #12
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	462a      	mov	r2, r5
 8006a20:	4b12      	ldr	r3, [pc, #72]	; (8006a6c <_vfiprintf_r+0x22c>)
 8006a22:	a904      	add	r1, sp, #16
 8006a24:	4630      	mov	r0, r6
 8006a26:	f7fd fe8b 	bl	8004740 <_printf_float>
 8006a2a:	4607      	mov	r7, r0
 8006a2c:	1c78      	adds	r0, r7, #1
 8006a2e:	d1d6      	bne.n	80069de <_vfiprintf_r+0x19e>
 8006a30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a32:	07d9      	lsls	r1, r3, #31
 8006a34:	d405      	bmi.n	8006a42 <_vfiprintf_r+0x202>
 8006a36:	89ab      	ldrh	r3, [r5, #12]
 8006a38:	059a      	lsls	r2, r3, #22
 8006a3a:	d402      	bmi.n	8006a42 <_vfiprintf_r+0x202>
 8006a3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a3e:	f7fe fbdb 	bl	80051f8 <__retarget_lock_release_recursive>
 8006a42:	89ab      	ldrh	r3, [r5, #12]
 8006a44:	065b      	lsls	r3, r3, #25
 8006a46:	f53f af1d 	bmi.w	8006884 <_vfiprintf_r+0x44>
 8006a4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a4c:	e71c      	b.n	8006888 <_vfiprintf_r+0x48>
 8006a4e:	ab03      	add	r3, sp, #12
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	462a      	mov	r2, r5
 8006a54:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <_vfiprintf_r+0x22c>)
 8006a56:	a904      	add	r1, sp, #16
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f7fe f915 	bl	8004c88 <_printf_i>
 8006a5e:	e7e4      	b.n	8006a2a <_vfiprintf_r+0x1ea>
 8006a60:	08007334 	.word	0x08007334
 8006a64:	0800733e 	.word	0x0800733e
 8006a68:	08004741 	.word	0x08004741
 8006a6c:	0800681b 	.word	0x0800681b
 8006a70:	0800733a 	.word	0x0800733a

08006a74 <__sflush_r>:
 8006a74:	898a      	ldrh	r2, [r1, #12]
 8006a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7a:	4605      	mov	r5, r0
 8006a7c:	0710      	lsls	r0, r2, #28
 8006a7e:	460c      	mov	r4, r1
 8006a80:	d458      	bmi.n	8006b34 <__sflush_r+0xc0>
 8006a82:	684b      	ldr	r3, [r1, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	dc05      	bgt.n	8006a94 <__sflush_r+0x20>
 8006a88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	dc02      	bgt.n	8006a94 <__sflush_r+0x20>
 8006a8e:	2000      	movs	r0, #0
 8006a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a96:	2e00      	cmp	r6, #0
 8006a98:	d0f9      	beq.n	8006a8e <__sflush_r+0x1a>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006aa0:	682f      	ldr	r7, [r5, #0]
 8006aa2:	6a21      	ldr	r1, [r4, #32]
 8006aa4:	602b      	str	r3, [r5, #0]
 8006aa6:	d032      	beq.n	8006b0e <__sflush_r+0x9a>
 8006aa8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006aaa:	89a3      	ldrh	r3, [r4, #12]
 8006aac:	075a      	lsls	r2, r3, #29
 8006aae:	d505      	bpl.n	8006abc <__sflush_r+0x48>
 8006ab0:	6863      	ldr	r3, [r4, #4]
 8006ab2:	1ac0      	subs	r0, r0, r3
 8006ab4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ab6:	b10b      	cbz	r3, 8006abc <__sflush_r+0x48>
 8006ab8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006aba:	1ac0      	subs	r0, r0, r3
 8006abc:	2300      	movs	r3, #0
 8006abe:	4602      	mov	r2, r0
 8006ac0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ac2:	6a21      	ldr	r1, [r4, #32]
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	47b0      	blx	r6
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	89a3      	ldrh	r3, [r4, #12]
 8006acc:	d106      	bne.n	8006adc <__sflush_r+0x68>
 8006ace:	6829      	ldr	r1, [r5, #0]
 8006ad0:	291d      	cmp	r1, #29
 8006ad2:	d82b      	bhi.n	8006b2c <__sflush_r+0xb8>
 8006ad4:	4a29      	ldr	r2, [pc, #164]	; (8006b7c <__sflush_r+0x108>)
 8006ad6:	410a      	asrs	r2, r1
 8006ad8:	07d6      	lsls	r6, r2, #31
 8006ada:	d427      	bmi.n	8006b2c <__sflush_r+0xb8>
 8006adc:	2200      	movs	r2, #0
 8006ade:	6062      	str	r2, [r4, #4]
 8006ae0:	04d9      	lsls	r1, r3, #19
 8006ae2:	6922      	ldr	r2, [r4, #16]
 8006ae4:	6022      	str	r2, [r4, #0]
 8006ae6:	d504      	bpl.n	8006af2 <__sflush_r+0x7e>
 8006ae8:	1c42      	adds	r2, r0, #1
 8006aea:	d101      	bne.n	8006af0 <__sflush_r+0x7c>
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	b903      	cbnz	r3, 8006af2 <__sflush_r+0x7e>
 8006af0:	6560      	str	r0, [r4, #84]	; 0x54
 8006af2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006af4:	602f      	str	r7, [r5, #0]
 8006af6:	2900      	cmp	r1, #0
 8006af8:	d0c9      	beq.n	8006a8e <__sflush_r+0x1a>
 8006afa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006afe:	4299      	cmp	r1, r3
 8006b00:	d002      	beq.n	8006b08 <__sflush_r+0x94>
 8006b02:	4628      	mov	r0, r5
 8006b04:	f7ff f9f6 	bl	8005ef4 <_free_r>
 8006b08:	2000      	movs	r0, #0
 8006b0a:	6360      	str	r0, [r4, #52]	; 0x34
 8006b0c:	e7c0      	b.n	8006a90 <__sflush_r+0x1c>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	4628      	mov	r0, r5
 8006b12:	47b0      	blx	r6
 8006b14:	1c41      	adds	r1, r0, #1
 8006b16:	d1c8      	bne.n	8006aaa <__sflush_r+0x36>
 8006b18:	682b      	ldr	r3, [r5, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0c5      	beq.n	8006aaa <__sflush_r+0x36>
 8006b1e:	2b1d      	cmp	r3, #29
 8006b20:	d001      	beq.n	8006b26 <__sflush_r+0xb2>
 8006b22:	2b16      	cmp	r3, #22
 8006b24:	d101      	bne.n	8006b2a <__sflush_r+0xb6>
 8006b26:	602f      	str	r7, [r5, #0]
 8006b28:	e7b1      	b.n	8006a8e <__sflush_r+0x1a>
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b30:	81a3      	strh	r3, [r4, #12]
 8006b32:	e7ad      	b.n	8006a90 <__sflush_r+0x1c>
 8006b34:	690f      	ldr	r7, [r1, #16]
 8006b36:	2f00      	cmp	r7, #0
 8006b38:	d0a9      	beq.n	8006a8e <__sflush_r+0x1a>
 8006b3a:	0793      	lsls	r3, r2, #30
 8006b3c:	680e      	ldr	r6, [r1, #0]
 8006b3e:	bf08      	it	eq
 8006b40:	694b      	ldreq	r3, [r1, #20]
 8006b42:	600f      	str	r7, [r1, #0]
 8006b44:	bf18      	it	ne
 8006b46:	2300      	movne	r3, #0
 8006b48:	eba6 0807 	sub.w	r8, r6, r7
 8006b4c:	608b      	str	r3, [r1, #8]
 8006b4e:	f1b8 0f00 	cmp.w	r8, #0
 8006b52:	dd9c      	ble.n	8006a8e <__sflush_r+0x1a>
 8006b54:	6a21      	ldr	r1, [r4, #32]
 8006b56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b58:	4643      	mov	r3, r8
 8006b5a:	463a      	mov	r2, r7
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	47b0      	blx	r6
 8006b60:	2800      	cmp	r0, #0
 8006b62:	dc06      	bgt.n	8006b72 <__sflush_r+0xfe>
 8006b64:	89a3      	ldrh	r3, [r4, #12]
 8006b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b6a:	81a3      	strh	r3, [r4, #12]
 8006b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b70:	e78e      	b.n	8006a90 <__sflush_r+0x1c>
 8006b72:	4407      	add	r7, r0
 8006b74:	eba8 0800 	sub.w	r8, r8, r0
 8006b78:	e7e9      	b.n	8006b4e <__sflush_r+0xda>
 8006b7a:	bf00      	nop
 8006b7c:	dfbffffe 	.word	0xdfbffffe

08006b80 <_fflush_r>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	690b      	ldr	r3, [r1, #16]
 8006b84:	4605      	mov	r5, r0
 8006b86:	460c      	mov	r4, r1
 8006b88:	b913      	cbnz	r3, 8006b90 <_fflush_r+0x10>
 8006b8a:	2500      	movs	r5, #0
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	bd38      	pop	{r3, r4, r5, pc}
 8006b90:	b118      	cbz	r0, 8006b9a <_fflush_r+0x1a>
 8006b92:	6a03      	ldr	r3, [r0, #32]
 8006b94:	b90b      	cbnz	r3, 8006b9a <_fflush_r+0x1a>
 8006b96:	f7fe fa25 	bl	8004fe4 <__sinit>
 8006b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0f3      	beq.n	8006b8a <_fflush_r+0xa>
 8006ba2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ba4:	07d0      	lsls	r0, r2, #31
 8006ba6:	d404      	bmi.n	8006bb2 <_fflush_r+0x32>
 8006ba8:	0599      	lsls	r1, r3, #22
 8006baa:	d402      	bmi.n	8006bb2 <_fflush_r+0x32>
 8006bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bae:	f7fe fb22 	bl	80051f6 <__retarget_lock_acquire_recursive>
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	4621      	mov	r1, r4
 8006bb6:	f7ff ff5d 	bl	8006a74 <__sflush_r>
 8006bba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bbc:	07da      	lsls	r2, r3, #31
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	d4e4      	bmi.n	8006b8c <_fflush_r+0xc>
 8006bc2:	89a3      	ldrh	r3, [r4, #12]
 8006bc4:	059b      	lsls	r3, r3, #22
 8006bc6:	d4e1      	bmi.n	8006b8c <_fflush_r+0xc>
 8006bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bca:	f7fe fb15 	bl	80051f8 <__retarget_lock_release_recursive>
 8006bce:	e7dd      	b.n	8006b8c <_fflush_r+0xc>

08006bd0 <__swbuf_r>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	460e      	mov	r6, r1
 8006bd4:	4614      	mov	r4, r2
 8006bd6:	4605      	mov	r5, r0
 8006bd8:	b118      	cbz	r0, 8006be2 <__swbuf_r+0x12>
 8006bda:	6a03      	ldr	r3, [r0, #32]
 8006bdc:	b90b      	cbnz	r3, 8006be2 <__swbuf_r+0x12>
 8006bde:	f7fe fa01 	bl	8004fe4 <__sinit>
 8006be2:	69a3      	ldr	r3, [r4, #24]
 8006be4:	60a3      	str	r3, [r4, #8]
 8006be6:	89a3      	ldrh	r3, [r4, #12]
 8006be8:	071a      	lsls	r2, r3, #28
 8006bea:	d525      	bpl.n	8006c38 <__swbuf_r+0x68>
 8006bec:	6923      	ldr	r3, [r4, #16]
 8006bee:	b31b      	cbz	r3, 8006c38 <__swbuf_r+0x68>
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	6922      	ldr	r2, [r4, #16]
 8006bf4:	1a98      	subs	r0, r3, r2
 8006bf6:	6963      	ldr	r3, [r4, #20]
 8006bf8:	b2f6      	uxtb	r6, r6
 8006bfa:	4283      	cmp	r3, r0
 8006bfc:	4637      	mov	r7, r6
 8006bfe:	dc04      	bgt.n	8006c0a <__swbuf_r+0x3a>
 8006c00:	4621      	mov	r1, r4
 8006c02:	4628      	mov	r0, r5
 8006c04:	f7ff ffbc 	bl	8006b80 <_fflush_r>
 8006c08:	b9e0      	cbnz	r0, 8006c44 <__swbuf_r+0x74>
 8006c0a:	68a3      	ldr	r3, [r4, #8]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	60a3      	str	r3, [r4, #8]
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	1c5a      	adds	r2, r3, #1
 8006c14:	6022      	str	r2, [r4, #0]
 8006c16:	701e      	strb	r6, [r3, #0]
 8006c18:	6962      	ldr	r2, [r4, #20]
 8006c1a:	1c43      	adds	r3, r0, #1
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d004      	beq.n	8006c2a <__swbuf_r+0x5a>
 8006c20:	89a3      	ldrh	r3, [r4, #12]
 8006c22:	07db      	lsls	r3, r3, #31
 8006c24:	d506      	bpl.n	8006c34 <__swbuf_r+0x64>
 8006c26:	2e0a      	cmp	r6, #10
 8006c28:	d104      	bne.n	8006c34 <__swbuf_r+0x64>
 8006c2a:	4621      	mov	r1, r4
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	f7ff ffa7 	bl	8006b80 <_fflush_r>
 8006c32:	b938      	cbnz	r0, 8006c44 <__swbuf_r+0x74>
 8006c34:	4638      	mov	r0, r7
 8006c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c38:	4621      	mov	r1, r4
 8006c3a:	4628      	mov	r0, r5
 8006c3c:	f000 f806 	bl	8006c4c <__swsetup_r>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	d0d5      	beq.n	8006bf0 <__swbuf_r+0x20>
 8006c44:	f04f 37ff 	mov.w	r7, #4294967295
 8006c48:	e7f4      	b.n	8006c34 <__swbuf_r+0x64>
	...

08006c4c <__swsetup_r>:
 8006c4c:	b538      	push	{r3, r4, r5, lr}
 8006c4e:	4b2a      	ldr	r3, [pc, #168]	; (8006cf8 <__swsetup_r+0xac>)
 8006c50:	4605      	mov	r5, r0
 8006c52:	6818      	ldr	r0, [r3, #0]
 8006c54:	460c      	mov	r4, r1
 8006c56:	b118      	cbz	r0, 8006c60 <__swsetup_r+0x14>
 8006c58:	6a03      	ldr	r3, [r0, #32]
 8006c5a:	b90b      	cbnz	r3, 8006c60 <__swsetup_r+0x14>
 8006c5c:	f7fe f9c2 	bl	8004fe4 <__sinit>
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c66:	0718      	lsls	r0, r3, #28
 8006c68:	d422      	bmi.n	8006cb0 <__swsetup_r+0x64>
 8006c6a:	06d9      	lsls	r1, r3, #27
 8006c6c:	d407      	bmi.n	8006c7e <__swsetup_r+0x32>
 8006c6e:	2309      	movs	r3, #9
 8006c70:	602b      	str	r3, [r5, #0]
 8006c72:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c76:	81a3      	strh	r3, [r4, #12]
 8006c78:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7c:	e034      	b.n	8006ce8 <__swsetup_r+0x9c>
 8006c7e:	0758      	lsls	r0, r3, #29
 8006c80:	d512      	bpl.n	8006ca8 <__swsetup_r+0x5c>
 8006c82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c84:	b141      	cbz	r1, 8006c98 <__swsetup_r+0x4c>
 8006c86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c8a:	4299      	cmp	r1, r3
 8006c8c:	d002      	beq.n	8006c94 <__swsetup_r+0x48>
 8006c8e:	4628      	mov	r0, r5
 8006c90:	f7ff f930 	bl	8005ef4 <_free_r>
 8006c94:	2300      	movs	r3, #0
 8006c96:	6363      	str	r3, [r4, #52]	; 0x34
 8006c98:	89a3      	ldrh	r3, [r4, #12]
 8006c9a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c9e:	81a3      	strh	r3, [r4, #12]
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	6063      	str	r3, [r4, #4]
 8006ca4:	6923      	ldr	r3, [r4, #16]
 8006ca6:	6023      	str	r3, [r4, #0]
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	f043 0308 	orr.w	r3, r3, #8
 8006cae:	81a3      	strh	r3, [r4, #12]
 8006cb0:	6923      	ldr	r3, [r4, #16]
 8006cb2:	b94b      	cbnz	r3, 8006cc8 <__swsetup_r+0x7c>
 8006cb4:	89a3      	ldrh	r3, [r4, #12]
 8006cb6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cbe:	d003      	beq.n	8006cc8 <__swsetup_r+0x7c>
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f000 f8c4 	bl	8006e50 <__smakebuf_r>
 8006cc8:	89a0      	ldrh	r0, [r4, #12]
 8006cca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006cce:	f010 0301 	ands.w	r3, r0, #1
 8006cd2:	d00a      	beq.n	8006cea <__swsetup_r+0x9e>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60a3      	str	r3, [r4, #8]
 8006cd8:	6963      	ldr	r3, [r4, #20]
 8006cda:	425b      	negs	r3, r3
 8006cdc:	61a3      	str	r3, [r4, #24]
 8006cde:	6923      	ldr	r3, [r4, #16]
 8006ce0:	b943      	cbnz	r3, 8006cf4 <__swsetup_r+0xa8>
 8006ce2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ce6:	d1c4      	bne.n	8006c72 <__swsetup_r+0x26>
 8006ce8:	bd38      	pop	{r3, r4, r5, pc}
 8006cea:	0781      	lsls	r1, r0, #30
 8006cec:	bf58      	it	pl
 8006cee:	6963      	ldrpl	r3, [r4, #20]
 8006cf0:	60a3      	str	r3, [r4, #8]
 8006cf2:	e7f4      	b.n	8006cde <__swsetup_r+0x92>
 8006cf4:	2000      	movs	r0, #0
 8006cf6:	e7f7      	b.n	8006ce8 <__swsetup_r+0x9c>
 8006cf8:	20000068 	.word	0x20000068

08006cfc <_sbrk_r>:
 8006cfc:	b538      	push	{r3, r4, r5, lr}
 8006cfe:	4d06      	ldr	r5, [pc, #24]	; (8006d18 <_sbrk_r+0x1c>)
 8006d00:	2300      	movs	r3, #0
 8006d02:	4604      	mov	r4, r0
 8006d04:	4608      	mov	r0, r1
 8006d06:	602b      	str	r3, [r5, #0]
 8006d08:	f7fa fc60 	bl	80015cc <_sbrk>
 8006d0c:	1c43      	adds	r3, r0, #1
 8006d0e:	d102      	bne.n	8006d16 <_sbrk_r+0x1a>
 8006d10:	682b      	ldr	r3, [r5, #0]
 8006d12:	b103      	cbz	r3, 8006d16 <_sbrk_r+0x1a>
 8006d14:	6023      	str	r3, [r4, #0]
 8006d16:	bd38      	pop	{r3, r4, r5, pc}
 8006d18:	20000428 	.word	0x20000428

08006d1c <memcpy>:
 8006d1c:	440a      	add	r2, r1
 8006d1e:	4291      	cmp	r1, r2
 8006d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d24:	d100      	bne.n	8006d28 <memcpy+0xc>
 8006d26:	4770      	bx	lr
 8006d28:	b510      	push	{r4, lr}
 8006d2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d32:	4291      	cmp	r1, r2
 8006d34:	d1f9      	bne.n	8006d2a <memcpy+0xe>
 8006d36:	bd10      	pop	{r4, pc}

08006d38 <__assert_func>:
 8006d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d3a:	4614      	mov	r4, r2
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <__assert_func+0x2c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4605      	mov	r5, r0
 8006d44:	68d8      	ldr	r0, [r3, #12]
 8006d46:	b14c      	cbz	r4, 8006d5c <__assert_func+0x24>
 8006d48:	4b07      	ldr	r3, [pc, #28]	; (8006d68 <__assert_func+0x30>)
 8006d4a:	9100      	str	r1, [sp, #0]
 8006d4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d50:	4906      	ldr	r1, [pc, #24]	; (8006d6c <__assert_func+0x34>)
 8006d52:	462b      	mov	r3, r5
 8006d54:	f000 f844 	bl	8006de0 <fiprintf>
 8006d58:	f000 f8d8 	bl	8006f0c <abort>
 8006d5c:	4b04      	ldr	r3, [pc, #16]	; (8006d70 <__assert_func+0x38>)
 8006d5e:	461c      	mov	r4, r3
 8006d60:	e7f3      	b.n	8006d4a <__assert_func+0x12>
 8006d62:	bf00      	nop
 8006d64:	20000068 	.word	0x20000068
 8006d68:	0800734f 	.word	0x0800734f
 8006d6c:	0800735c 	.word	0x0800735c
 8006d70:	0800738a 	.word	0x0800738a

08006d74 <_calloc_r>:
 8006d74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d76:	fba1 2402 	umull	r2, r4, r1, r2
 8006d7a:	b94c      	cbnz	r4, 8006d90 <_calloc_r+0x1c>
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	9201      	str	r2, [sp, #4]
 8006d80:	f7ff f92c 	bl	8005fdc <_malloc_r>
 8006d84:	9a01      	ldr	r2, [sp, #4]
 8006d86:	4605      	mov	r5, r0
 8006d88:	b930      	cbnz	r0, 8006d98 <_calloc_r+0x24>
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	b003      	add	sp, #12
 8006d8e:	bd30      	pop	{r4, r5, pc}
 8006d90:	220c      	movs	r2, #12
 8006d92:	6002      	str	r2, [r0, #0]
 8006d94:	2500      	movs	r5, #0
 8006d96:	e7f8      	b.n	8006d8a <_calloc_r+0x16>
 8006d98:	4621      	mov	r1, r4
 8006d9a:	f7fe f9ae 	bl	80050fa <memset>
 8006d9e:	e7f4      	b.n	8006d8a <_calloc_r+0x16>

08006da0 <__ascii_mbtowc>:
 8006da0:	b082      	sub	sp, #8
 8006da2:	b901      	cbnz	r1, 8006da6 <__ascii_mbtowc+0x6>
 8006da4:	a901      	add	r1, sp, #4
 8006da6:	b142      	cbz	r2, 8006dba <__ascii_mbtowc+0x1a>
 8006da8:	b14b      	cbz	r3, 8006dbe <__ascii_mbtowc+0x1e>
 8006daa:	7813      	ldrb	r3, [r2, #0]
 8006dac:	600b      	str	r3, [r1, #0]
 8006dae:	7812      	ldrb	r2, [r2, #0]
 8006db0:	1e10      	subs	r0, r2, #0
 8006db2:	bf18      	it	ne
 8006db4:	2001      	movne	r0, #1
 8006db6:	b002      	add	sp, #8
 8006db8:	4770      	bx	lr
 8006dba:	4610      	mov	r0, r2
 8006dbc:	e7fb      	b.n	8006db6 <__ascii_mbtowc+0x16>
 8006dbe:	f06f 0001 	mvn.w	r0, #1
 8006dc2:	e7f8      	b.n	8006db6 <__ascii_mbtowc+0x16>

08006dc4 <__ascii_wctomb>:
 8006dc4:	b149      	cbz	r1, 8006dda <__ascii_wctomb+0x16>
 8006dc6:	2aff      	cmp	r2, #255	; 0xff
 8006dc8:	bf85      	ittet	hi
 8006dca:	238a      	movhi	r3, #138	; 0x8a
 8006dcc:	6003      	strhi	r3, [r0, #0]
 8006dce:	700a      	strbls	r2, [r1, #0]
 8006dd0:	f04f 30ff 	movhi.w	r0, #4294967295
 8006dd4:	bf98      	it	ls
 8006dd6:	2001      	movls	r0, #1
 8006dd8:	4770      	bx	lr
 8006dda:	4608      	mov	r0, r1
 8006ddc:	4770      	bx	lr
	...

08006de0 <fiprintf>:
 8006de0:	b40e      	push	{r1, r2, r3}
 8006de2:	b503      	push	{r0, r1, lr}
 8006de4:	4601      	mov	r1, r0
 8006de6:	ab03      	add	r3, sp, #12
 8006de8:	4805      	ldr	r0, [pc, #20]	; (8006e00 <fiprintf+0x20>)
 8006dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dee:	6800      	ldr	r0, [r0, #0]
 8006df0:	9301      	str	r3, [sp, #4]
 8006df2:	f7ff fd25 	bl	8006840 <_vfiprintf_r>
 8006df6:	b002      	add	sp, #8
 8006df8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dfc:	b003      	add	sp, #12
 8006dfe:	4770      	bx	lr
 8006e00:	20000068 	.word	0x20000068

08006e04 <__swhatbuf_r>:
 8006e04:	b570      	push	{r4, r5, r6, lr}
 8006e06:	460c      	mov	r4, r1
 8006e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e0c:	2900      	cmp	r1, #0
 8006e0e:	b096      	sub	sp, #88	; 0x58
 8006e10:	4615      	mov	r5, r2
 8006e12:	461e      	mov	r6, r3
 8006e14:	da0d      	bge.n	8006e32 <__swhatbuf_r+0x2e>
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006e1c:	f04f 0100 	mov.w	r1, #0
 8006e20:	bf0c      	ite	eq
 8006e22:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006e26:	2340      	movne	r3, #64	; 0x40
 8006e28:	2000      	movs	r0, #0
 8006e2a:	6031      	str	r1, [r6, #0]
 8006e2c:	602b      	str	r3, [r5, #0]
 8006e2e:	b016      	add	sp, #88	; 0x58
 8006e30:	bd70      	pop	{r4, r5, r6, pc}
 8006e32:	466a      	mov	r2, sp
 8006e34:	f000 f848 	bl	8006ec8 <_fstat_r>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	dbec      	blt.n	8006e16 <__swhatbuf_r+0x12>
 8006e3c:	9901      	ldr	r1, [sp, #4]
 8006e3e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006e42:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006e46:	4259      	negs	r1, r3
 8006e48:	4159      	adcs	r1, r3
 8006e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e4e:	e7eb      	b.n	8006e28 <__swhatbuf_r+0x24>

08006e50 <__smakebuf_r>:
 8006e50:	898b      	ldrh	r3, [r1, #12]
 8006e52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e54:	079d      	lsls	r5, r3, #30
 8006e56:	4606      	mov	r6, r0
 8006e58:	460c      	mov	r4, r1
 8006e5a:	d507      	bpl.n	8006e6c <__smakebuf_r+0x1c>
 8006e5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	6123      	str	r3, [r4, #16]
 8006e64:	2301      	movs	r3, #1
 8006e66:	6163      	str	r3, [r4, #20]
 8006e68:	b002      	add	sp, #8
 8006e6a:	bd70      	pop	{r4, r5, r6, pc}
 8006e6c:	ab01      	add	r3, sp, #4
 8006e6e:	466a      	mov	r2, sp
 8006e70:	f7ff ffc8 	bl	8006e04 <__swhatbuf_r>
 8006e74:	9900      	ldr	r1, [sp, #0]
 8006e76:	4605      	mov	r5, r0
 8006e78:	4630      	mov	r0, r6
 8006e7a:	f7ff f8af 	bl	8005fdc <_malloc_r>
 8006e7e:	b948      	cbnz	r0, 8006e94 <__smakebuf_r+0x44>
 8006e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e84:	059a      	lsls	r2, r3, #22
 8006e86:	d4ef      	bmi.n	8006e68 <__smakebuf_r+0x18>
 8006e88:	f023 0303 	bic.w	r3, r3, #3
 8006e8c:	f043 0302 	orr.w	r3, r3, #2
 8006e90:	81a3      	strh	r3, [r4, #12]
 8006e92:	e7e3      	b.n	8006e5c <__smakebuf_r+0xc>
 8006e94:	89a3      	ldrh	r3, [r4, #12]
 8006e96:	6020      	str	r0, [r4, #0]
 8006e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e9c:	81a3      	strh	r3, [r4, #12]
 8006e9e:	9b00      	ldr	r3, [sp, #0]
 8006ea0:	6163      	str	r3, [r4, #20]
 8006ea2:	9b01      	ldr	r3, [sp, #4]
 8006ea4:	6120      	str	r0, [r4, #16]
 8006ea6:	b15b      	cbz	r3, 8006ec0 <__smakebuf_r+0x70>
 8006ea8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006eac:	4630      	mov	r0, r6
 8006eae:	f000 f81d 	bl	8006eec <_isatty_r>
 8006eb2:	b128      	cbz	r0, 8006ec0 <__smakebuf_r+0x70>
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	f023 0303 	bic.w	r3, r3, #3
 8006eba:	f043 0301 	orr.w	r3, r3, #1
 8006ebe:	81a3      	strh	r3, [r4, #12]
 8006ec0:	89a3      	ldrh	r3, [r4, #12]
 8006ec2:	431d      	orrs	r5, r3
 8006ec4:	81a5      	strh	r5, [r4, #12]
 8006ec6:	e7cf      	b.n	8006e68 <__smakebuf_r+0x18>

08006ec8 <_fstat_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	4d07      	ldr	r5, [pc, #28]	; (8006ee8 <_fstat_r+0x20>)
 8006ecc:	2300      	movs	r3, #0
 8006ece:	4604      	mov	r4, r0
 8006ed0:	4608      	mov	r0, r1
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	602b      	str	r3, [r5, #0]
 8006ed6:	f7fa fb50 	bl	800157a <_fstat>
 8006eda:	1c43      	adds	r3, r0, #1
 8006edc:	d102      	bne.n	8006ee4 <_fstat_r+0x1c>
 8006ede:	682b      	ldr	r3, [r5, #0]
 8006ee0:	b103      	cbz	r3, 8006ee4 <_fstat_r+0x1c>
 8006ee2:	6023      	str	r3, [r4, #0]
 8006ee4:	bd38      	pop	{r3, r4, r5, pc}
 8006ee6:	bf00      	nop
 8006ee8:	20000428 	.word	0x20000428

08006eec <_isatty_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	4d06      	ldr	r5, [pc, #24]	; (8006f08 <_isatty_r+0x1c>)
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	4604      	mov	r4, r0
 8006ef4:	4608      	mov	r0, r1
 8006ef6:	602b      	str	r3, [r5, #0]
 8006ef8:	f7fa fb4f 	bl	800159a <_isatty>
 8006efc:	1c43      	adds	r3, r0, #1
 8006efe:	d102      	bne.n	8006f06 <_isatty_r+0x1a>
 8006f00:	682b      	ldr	r3, [r5, #0]
 8006f02:	b103      	cbz	r3, 8006f06 <_isatty_r+0x1a>
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	20000428 	.word	0x20000428

08006f0c <abort>:
 8006f0c:	b508      	push	{r3, lr}
 8006f0e:	2006      	movs	r0, #6
 8006f10:	f000 f82c 	bl	8006f6c <raise>
 8006f14:	2001      	movs	r0, #1
 8006f16:	f7fa fae1 	bl	80014dc <_exit>

08006f1a <_raise_r>:
 8006f1a:	291f      	cmp	r1, #31
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4604      	mov	r4, r0
 8006f20:	460d      	mov	r5, r1
 8006f22:	d904      	bls.n	8006f2e <_raise_r+0x14>
 8006f24:	2316      	movs	r3, #22
 8006f26:	6003      	str	r3, [r0, #0]
 8006f28:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2c:	bd38      	pop	{r3, r4, r5, pc}
 8006f2e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006f30:	b112      	cbz	r2, 8006f38 <_raise_r+0x1e>
 8006f32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f36:	b94b      	cbnz	r3, 8006f4c <_raise_r+0x32>
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f000 f831 	bl	8006fa0 <_getpid_r>
 8006f3e:	462a      	mov	r2, r5
 8006f40:	4601      	mov	r1, r0
 8006f42:	4620      	mov	r0, r4
 8006f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f48:	f000 b818 	b.w	8006f7c <_kill_r>
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d00a      	beq.n	8006f66 <_raise_r+0x4c>
 8006f50:	1c59      	adds	r1, r3, #1
 8006f52:	d103      	bne.n	8006f5c <_raise_r+0x42>
 8006f54:	2316      	movs	r3, #22
 8006f56:	6003      	str	r3, [r0, #0]
 8006f58:	2001      	movs	r0, #1
 8006f5a:	e7e7      	b.n	8006f2c <_raise_r+0x12>
 8006f5c:	2400      	movs	r4, #0
 8006f5e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f62:	4628      	mov	r0, r5
 8006f64:	4798      	blx	r3
 8006f66:	2000      	movs	r0, #0
 8006f68:	e7e0      	b.n	8006f2c <_raise_r+0x12>
	...

08006f6c <raise>:
 8006f6c:	4b02      	ldr	r3, [pc, #8]	; (8006f78 <raise+0xc>)
 8006f6e:	4601      	mov	r1, r0
 8006f70:	6818      	ldr	r0, [r3, #0]
 8006f72:	f7ff bfd2 	b.w	8006f1a <_raise_r>
 8006f76:	bf00      	nop
 8006f78:	20000068 	.word	0x20000068

08006f7c <_kill_r>:
 8006f7c:	b538      	push	{r3, r4, r5, lr}
 8006f7e:	4d07      	ldr	r5, [pc, #28]	; (8006f9c <_kill_r+0x20>)
 8006f80:	2300      	movs	r3, #0
 8006f82:	4604      	mov	r4, r0
 8006f84:	4608      	mov	r0, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	602b      	str	r3, [r5, #0]
 8006f8a:	f7fa fa97 	bl	80014bc <_kill>
 8006f8e:	1c43      	adds	r3, r0, #1
 8006f90:	d102      	bne.n	8006f98 <_kill_r+0x1c>
 8006f92:	682b      	ldr	r3, [r5, #0]
 8006f94:	b103      	cbz	r3, 8006f98 <_kill_r+0x1c>
 8006f96:	6023      	str	r3, [r4, #0]
 8006f98:	bd38      	pop	{r3, r4, r5, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20000428 	.word	0x20000428

08006fa0 <_getpid_r>:
 8006fa0:	f7fa ba84 	b.w	80014ac <_getpid>

08006fa4 <_init>:
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	bf00      	nop
 8006fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006faa:	bc08      	pop	{r3}
 8006fac:	469e      	mov	lr, r3
 8006fae:	4770      	bx	lr

08006fb0 <_fini>:
 8006fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb2:	bf00      	nop
 8006fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb6:	bc08      	pop	{r3}
 8006fb8:	469e      	mov	lr, r3
 8006fba:	4770      	bx	lr
