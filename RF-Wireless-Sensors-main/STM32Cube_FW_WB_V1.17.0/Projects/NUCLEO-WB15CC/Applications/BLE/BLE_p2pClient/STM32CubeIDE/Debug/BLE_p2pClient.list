
BLE_p2pClient.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4ec  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dec  0800e630  0800e630  0001e630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f41c  0800f41c  0001f41c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f424  0800f424  0001f424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f428  0800f428  0001f428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000220  20000008  0800f42c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003c  20000228  0800f64c  00020228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000264  0800f688  00020264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001540  20000278  0800f699  00020278  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  200017b8  0800f699  000217b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020275  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bc  20030028  20030028  00030000  2**2
                  ALLOC
 14 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 15 .debug_info   0002f519  00000000  00000000  000202a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006489  00000000  00000000  0004f7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000026e0  00000000  00000000  00055c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002418  00000000  00000000  00058328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00028858  00000000  00000000  0005a740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002edf7  00000000  00000000  00082f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d6187  00000000  00000000  000b1d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  00187f16  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b300  00000000  00000000  00187f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000278 	.word	0x20000278
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e614 	.word	0x0800e614

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000027c 	.word	0x2000027c
 800017c:	0800e614 	.word	0x0800e614

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b974 	b.w	8000e78 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9d08      	ldr	r5, [sp, #32]
 8000bae:	4604      	mov	r4, r0
 8000bb0:	468e      	mov	lr, r1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d14d      	bne.n	8000c52 <__udivmoddi4+0xaa>
 8000bb6:	428a      	cmp	r2, r1
 8000bb8:	4694      	mov	ip, r2
 8000bba:	d969      	bls.n	8000c90 <__udivmoddi4+0xe8>
 8000bbc:	fab2 f282 	clz	r2, r2
 8000bc0:	b152      	cbz	r2, 8000bd8 <__udivmoddi4+0x30>
 8000bc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc6:	f1c2 0120 	rsb	r1, r2, #32
 8000bca:	fa20 f101 	lsr.w	r1, r0, r1
 8000bce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd6:	4094      	lsls	r4, r2
 8000bd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bdc:	0c21      	lsrs	r1, r4, #16
 8000bde:	fbbe f6f8 	udiv	r6, lr, r8
 8000be2:	fa1f f78c 	uxth.w	r7, ip
 8000be6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bee:	fb06 f107 	mul.w	r1, r6, r7
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	d90a      	bls.n	8000c0c <__udivmoddi4+0x64>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfe:	f080 811f 	bcs.w	8000e40 <__udivmoddi4+0x298>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 811c 	bls.w	8000e40 <__udivmoddi4+0x298>
 8000c08:	3e02      	subs	r6, #2
 8000c0a:	4463      	add	r3, ip
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 f707 	mul.w	r7, r0, r7
 8000c20:	42a7      	cmp	r7, r4
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x92>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2c:	f080 810a 	bcs.w	8000e44 <__udivmoddi4+0x29c>
 8000c30:	42a7      	cmp	r7, r4
 8000c32:	f240 8107 	bls.w	8000e44 <__udivmoddi4+0x29c>
 8000c36:	4464      	add	r4, ip
 8000c38:	3802      	subs	r0, #2
 8000c3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3e:	1be4      	subs	r4, r4, r7
 8000c40:	2600      	movs	r6, #0
 8000c42:	b11d      	cbz	r5, 8000c4c <__udivmoddi4+0xa4>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c5 4300 	strd	r4, r3, [r5]
 8000c4c:	4631      	mov	r1, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0xc2>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	f000 80ef 	beq.w	8000e3a <__udivmoddi4+0x292>
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c62:	4630      	mov	r0, r6
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f683 	clz	r6, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d14a      	bne.n	8000d08 <__udivmoddi4+0x160>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0xd4>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80f9 	bhi.w	8000e6e <__udivmoddi4+0x2c6>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	469e      	mov	lr, r3
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d0e0      	beq.n	8000c4c <__udivmoddi4+0xa4>
 8000c8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c8e:	e7dd      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000c90:	b902      	cbnz	r2, 8000c94 <__udivmoddi4+0xec>
 8000c92:	deff      	udf	#255	; 0xff
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f040 8092 	bne.w	8000dc2 <__udivmoddi4+0x21a>
 8000c9e:	eba1 010c 	sub.w	r1, r1, ip
 8000ca2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	2601      	movs	r6, #1
 8000cac:	0c20      	lsrs	r0, r4, #16
 8000cae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cb6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cba:	fb0e f003 	mul.w	r0, lr, r3
 8000cbe:	4288      	cmp	r0, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x12c>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x12a>
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	f200 80cb 	bhi.w	8000e68 <__udivmoddi4+0x2c0>
 8000cd2:	4643      	mov	r3, r8
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce8:	45a6      	cmp	lr, r4
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x156>
 8000cec:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf4:	d202      	bcs.n	8000cfc <__udivmoddi4+0x154>
 8000cf6:	45a6      	cmp	lr, r4
 8000cf8:	f200 80bb 	bhi.w	8000e72 <__udivmoddi4+0x2ca>
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d06:	e79c      	b.n	8000c42 <__udivmoddi4+0x9a>
 8000d08:	f1c6 0720 	rsb	r7, r6, #32
 8000d0c:	40b3      	lsls	r3, r6
 8000d0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d16:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1e:	431c      	orrs	r4, r3
 8000d20:	40f9      	lsrs	r1, r7
 8000d22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d26:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d2e:	0c20      	lsrs	r0, r4, #16
 8000d30:	fa1f fe8c 	uxth.w	lr, ip
 8000d34:	fb09 1118 	mls	r1, r9, r8, r1
 8000d38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d40:	4288      	cmp	r0, r1
 8000d42:	fa02 f206 	lsl.w	r2, r2, r6
 8000d46:	d90b      	bls.n	8000d60 <__udivmoddi4+0x1b8>
 8000d48:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d50:	f080 8088 	bcs.w	8000e64 <__udivmoddi4+0x2bc>
 8000d54:	4288      	cmp	r0, r1
 8000d56:	f240 8085 	bls.w	8000e64 <__udivmoddi4+0x2bc>
 8000d5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	1a09      	subs	r1, r1, r0
 8000d62:	b2a4      	uxth	r4, r4
 8000d64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d68:	fb09 1110 	mls	r1, r9, r0, r1
 8000d6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d74:	458e      	cmp	lr, r1
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x1e2>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d80:	d26c      	bcs.n	8000e5c <__udivmoddi4+0x2b4>
 8000d82:	458e      	cmp	lr, r1
 8000d84:	d96a      	bls.n	8000e5c <__udivmoddi4+0x2b4>
 8000d86:	3802      	subs	r0, #2
 8000d88:	4461      	add	r1, ip
 8000d8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d92:	eba1 010e 	sub.w	r1, r1, lr
 8000d96:	42a1      	cmp	r1, r4
 8000d98:	46c8      	mov	r8, r9
 8000d9a:	46a6      	mov	lr, r4
 8000d9c:	d356      	bcc.n	8000e4c <__udivmoddi4+0x2a4>
 8000d9e:	d053      	beq.n	8000e48 <__udivmoddi4+0x2a0>
 8000da0:	b15d      	cbz	r5, 8000dba <__udivmoddi4+0x212>
 8000da2:	ebb3 0208 	subs.w	r2, r3, r8
 8000da6:	eb61 010e 	sbc.w	r1, r1, lr
 8000daa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dae:	fa22 f306 	lsr.w	r3, r2, r6
 8000db2:	40f1      	lsrs	r1, r6
 8000db4:	431f      	orrs	r7, r3
 8000db6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dba:	2600      	movs	r6, #0
 8000dbc:	4631      	mov	r1, r6
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	f1c2 0320 	rsb	r3, r2, #32
 8000dc6:	40d8      	lsrs	r0, r3
 8000dc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dcc:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	4301      	orrs	r1, r0
 8000dd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd8:	fa1f fe8c 	uxth.w	lr, ip
 8000ddc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de0:	fb07 3610 	mls	r6, r7, r0, r3
 8000de4:	0c0b      	lsrs	r3, r1, #16
 8000de6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dea:	fb00 f60e 	mul.w	r6, r0, lr
 8000dee:	429e      	cmp	r6, r3
 8000df0:	fa04 f402 	lsl.w	r4, r4, r2
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x260>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfe:	d22f      	bcs.n	8000e60 <__udivmoddi4+0x2b8>
 8000e00:	429e      	cmp	r6, r3
 8000e02:	d92d      	bls.n	8000e60 <__udivmoddi4+0x2b8>
 8000e04:	3802      	subs	r0, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	b289      	uxth	r1, r1
 8000e0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e10:	fb07 3316 	mls	r3, r7, r6, r3
 8000e14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e18:	fb06 f30e 	mul.w	r3, r6, lr
 8000e1c:	428b      	cmp	r3, r1
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x28a>
 8000e20:	eb1c 0101 	adds.w	r1, ip, r1
 8000e24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e28:	d216      	bcs.n	8000e58 <__udivmoddi4+0x2b0>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d914      	bls.n	8000e58 <__udivmoddi4+0x2b0>
 8000e2e:	3e02      	subs	r6, #2
 8000e30:	4461      	add	r1, ip
 8000e32:	1ac9      	subs	r1, r1, r3
 8000e34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e38:	e738      	b.n	8000cac <__udivmoddi4+0x104>
 8000e3a:	462e      	mov	r6, r5
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e705      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000e40:	4606      	mov	r6, r0
 8000e42:	e6e3      	b.n	8000c0c <__udivmoddi4+0x64>
 8000e44:	4618      	mov	r0, r3
 8000e46:	e6f8      	b.n	8000c3a <__udivmoddi4+0x92>
 8000e48:	454b      	cmp	r3, r9
 8000e4a:	d2a9      	bcs.n	8000da0 <__udivmoddi4+0x1f8>
 8000e4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e54:	3801      	subs	r0, #1
 8000e56:	e7a3      	b.n	8000da0 <__udivmoddi4+0x1f8>
 8000e58:	4646      	mov	r6, r8
 8000e5a:	e7ea      	b.n	8000e32 <__udivmoddi4+0x28a>
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	e794      	b.n	8000d8a <__udivmoddi4+0x1e2>
 8000e60:	4640      	mov	r0, r8
 8000e62:	e7d1      	b.n	8000e08 <__udivmoddi4+0x260>
 8000e64:	46d0      	mov	r8, sl
 8000e66:	e77b      	b.n	8000d60 <__udivmoddi4+0x1b8>
 8000e68:	3b02      	subs	r3, #2
 8000e6a:	4461      	add	r1, ip
 8000e6c:	e732      	b.n	8000cd4 <__udivmoddi4+0x12c>
 8000e6e:	4630      	mov	r0, r6
 8000e70:	e709      	b.n	8000c86 <__udivmoddi4+0xde>
 8000e72:	4464      	add	r4, ip
 8000e74:	3802      	subs	r0, #2
 8000e76:	e742      	b.n	8000cfe <__udivmoddi4+0x156>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e86:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000e8a:	4905      	ldr	r1, [pc, #20]	; (8000ea0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	58000800 	.word	0x58000800

08000ea4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b085      	sub	sp, #20
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef6:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f00:	68fb      	ldr	r3, [r7, #12]
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000f12:	f003 f8a3 	bl	800405c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000f16:	f003 f8a7 	bl	8004068 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000f1a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000f1e:	f7ff ffad 	bl	8000e7c <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000f22:	f008 fc89 	bl	8009838 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000f26:	f000 f821 	bl	8000f6c <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000f2a:	f000 f8c3 	bl	80010b4 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000f2e:	bf00      	nop
}
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000f34:	b5b0      	push	{r4, r5, r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <APPD_EnableCPU2+0x34>)
 8000f3c:	1d3c      	adds	r4, r7, #4
 8000f3e:	461d      	mov	r5, r3
 8000f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f48:	c403      	stmia	r4!, {r0, r1}
 8000f4a:	8022      	strh	r2, [r4, #0]
 8000f4c:	3402      	adds	r4, #2
 8000f4e:	0c13      	lsrs	r3, r2, #16
 8000f50:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f52:	f00a f89f 	bl	800b094 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f008 fee6 	bl	8009d2a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000f5e:	bf00      	nop
}
 8000f60:	3720      	adds	r7, #32
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bdb0      	pop	{r4, r5, r7, pc}
 8000f66:	bf00      	nop
 8000f68:	0800e630 	.word	0x0800e630

08000f6c <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	77fb      	strb	r3, [r7, #31]
 8000f90:	e038      	b.n	8001004 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000f92:	7ffb      	ldrb	r3, [r7, #31]
 8000f94:	4a44      	ldr	r2, [pc, #272]	; (80010a8 <APPD_SetCPU2GpioConfig+0x13c>)
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	4413      	add	r3, r2
 8000f9a:	799b      	ldrb	r3, [r3, #6]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d02b      	beq.n	8000ff8 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000fa0:	7ffb      	ldrb	r3, [r7, #31]
 8000fa2:	4a41      	ldr	r2, [pc, #260]	; (80010a8 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000fa8:	4a40      	ldr	r2, [pc, #256]	; (80010ac <APPD_SetCPU2GpioConfig+0x140>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d01b      	beq.n	8000fe6 <APPD_SetCPU2GpioConfig+0x7a>
 8000fae:	4a3f      	ldr	r2, [pc, #252]	; (80010ac <APPD_SetCPU2GpioConfig+0x140>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d823      	bhi.n	8000ffc <APPD_SetCPU2GpioConfig+0x90>
 8000fb4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fb8:	d003      	beq.n	8000fc2 <APPD_SetCPU2GpioConfig+0x56>
 8000fba:	4a3d      	ldr	r2, [pc, #244]	; (80010b0 <APPD_SetCPU2GpioConfig+0x144>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d009      	beq.n	8000fd4 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000fc0:	e01c      	b.n	8000ffc <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000fc2:	7ffb      	ldrb	r3, [r7, #31]
 8000fc4:	4a38      	ldr	r2, [pc, #224]	; (80010a8 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	4413      	add	r3, r2
 8000fca:	889a      	ldrh	r2, [r3, #4]
 8000fcc:	8bbb      	ldrh	r3, [r7, #28]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	83bb      	strh	r3, [r7, #28]
          break;
 8000fd2:	e014      	b.n	8000ffe <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000fd4:	7ffb      	ldrb	r3, [r7, #31]
 8000fd6:	4a34      	ldr	r2, [pc, #208]	; (80010a8 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4413      	add	r3, r2
 8000fdc:	889a      	ldrh	r2, [r3, #4]
 8000fde:	8b7b      	ldrh	r3, [r7, #26]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	837b      	strh	r3, [r7, #26]
          break;
 8000fe4:	e00b      	b.n	8000ffe <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000fe6:	7ffb      	ldrb	r3, [r7, #31]
 8000fe8:	4a2f      	ldr	r2, [pc, #188]	; (80010a8 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	4413      	add	r3, r2
 8000fee:	889a      	ldrh	r2, [r3, #4]
 8000ff0:	8b3b      	ldrh	r3, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	833b      	strh	r3, [r7, #24]
          break;
 8000ff6:	e002      	b.n	8000ffe <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000ff8:	bf00      	nop
 8000ffa:	e000      	b.n	8000ffe <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000ffc:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000ffe:	7ffb      	ldrb	r3, [r7, #31]
 8001000:	3301      	adds	r3, #1
 8001002:	77fb      	strb	r3, [r7, #31]
 8001004:	7ffb      	ldrb	r3, [r7, #31]
 8001006:	2b25      	cmp	r3, #37	; 0x25
 8001008:	d9c3      	bls.n	8000f92 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8001016:	8bbb      	ldrh	r3, [r7, #28]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d014      	beq.n	8001046 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 800101c:	8bbb      	ldrh	r3, [r7, #28]
 800101e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff ff3f 	bl	8000ea4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8001026:	2001      	movs	r0, #1
 8001028:	f7ff ff55 	bl	8000ed6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001034:	f003 fd0c 	bl	8004a50 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8001038:	8bbb      	ldrh	r3, [r7, #28]
 800103a:	2200      	movs	r2, #0
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001042:	f003 fe6d 	bl	8004d20 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8001046:	8b7b      	ldrh	r3, [r7, #26]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d012      	beq.n	8001072 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 800104c:	8b7b      	ldrh	r3, [r7, #26]
 800104e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	2002      	movs	r0, #2
 8001052:	f7ff ff27 	bl	8000ea4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8001056:	2002      	movs	r0, #2
 8001058:	f7ff ff3d 	bl	8000ed6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	4619      	mov	r1, r3
 8001060:	4813      	ldr	r0, [pc, #76]	; (80010b0 <APPD_SetCPU2GpioConfig+0x144>)
 8001062:	f003 fcf5 	bl	8004a50 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8001066:	8b7b      	ldrh	r3, [r7, #26]
 8001068:	2200      	movs	r2, #0
 800106a:	4619      	mov	r1, r3
 800106c:	4810      	ldr	r0, [pc, #64]	; (80010b0 <APPD_SetCPU2GpioConfig+0x144>)
 800106e:	f003 fe57 	bl	8004d20 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001072:	8b3b      	ldrh	r3, [r7, #24]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d013      	beq.n	80010a0 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8001078:	8b3b      	ldrh	r3, [r7, #24]
 800107a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107c:	2004      	movs	r0, #4
 800107e:	f7ff ff11 	bl	8000ea4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001082:	2004      	movs	r0, #4
 8001084:	f7ff ff27 	bl	8000ed6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	4619      	mov	r1, r3
 800108c:	4807      	ldr	r0, [pc, #28]	; (80010ac <APPD_SetCPU2GpioConfig+0x140>)
 800108e:	f003 fcdf 	bl	8004a50 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001092:	8b3b      	ldrh	r3, [r7, #24]
 8001094:	2200      	movs	r2, #0
 8001096:	4619      	mov	r1, r3
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <APPD_SetCPU2GpioConfig+0x140>)
 800109a:	f003 fe41 	bl	8004d20 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
}
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	0800edf0 	.word	0x0800edf0
 80010ac:	48000800 	.word	0x48000800
 80010b0:	48000400 	.word	0x48000400

080010b4 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80010b8:	bf00      	nop
}
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 80010c6:	f001 fba3 	bl	8002810 <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 80010ca:	bf00      	nop
}
 80010cc:	bd80      	pop	{r7, pc}

080010ce <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	460b      	mov	r3, r1
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80010dc:	897a      	ldrh	r2, [r7, #10]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68f9      	ldr	r1, [r7, #12]
 80010e2:	2000      	movs	r0, #0
 80010e4:	f001 fa00 	bl	80024e8 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80010e8:	bf00      	nop
}
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <LL_C2_PWR_SetPowerMode+0x28>)
 80010fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010fe:	f023 0207 	bic.w	r2, r3, #7
 8001102:	4905      	ldr	r1, [pc, #20]	; (8001118 <LL_C2_PWR_SetPowerMode+0x28>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4313      	orrs	r3, r2
 8001108:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	58000400 	.word	0x58000400

0800111c <LL_EXTI_EnableIT_32_63>:
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <LL_EXTI_EnableIT_32_63+0x24>)
 8001126:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800112a:	4905      	ldr	r1, [pc, #20]	; (8001140 <LL_EXTI_EnableIT_32_63+0x24>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4313      	orrs	r3, r2
 8001130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	58000800 	.word	0x58000800

08001144 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800114c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001152:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800115e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800116a:	4313      	orrs	r3, r2
 800116c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	cafecafe 	.word	0xcafecafe

08001180 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4313      	orrs	r3, r2
 800119a:	608b      	str	r3, [r1, #8]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <LL_DBGMCU_GetDeviceID+0x18>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e0042000 	.word	0xe0042000

080011c4 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <LL_DBGMCU_GetRevisionID+0x18>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	0c1b      	lsrs	r3, r3, #16
 80011ce:	b29b      	uxth	r3, r3
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e0042000 	.word	0xe0042000

080011e0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	22ff      	movs	r2, #255	; 0xff
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	22ca      	movs	r2, #202	; 0xca
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2253      	movs	r2, #83	; 0x53
 800120c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f023 0207 	bic.w	r2, r3, #7
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	609a      	str	r2, [r3, #8]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <MX_APPE_Config+0x18>)
 8001246:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800124a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800124c:	f000 f830 	bl	80012b0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001250:	f000 f835 	bl	80012be <Config_HSE>

  return;
 8001254:	bf00      	nop
}
 8001256:	bd80      	pop	{r7, pc}
 8001258:	58004000 	.word	0x58004000

0800125c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001260:	f000 f841 	bl	80012e6 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001264:	f000 f85a 	bl	800131c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001268:	4909      	ldr	r1, [pc, #36]	; (8001290 <MX_APPE_Init+0x34>)
 800126a:	2000      	movs	r0, #0
 800126c:	f000 feac 	bl	8001fc8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001270:	f7ff fe4d 	bl	8000f0e <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001274:	2101      	movs	r1, #1
 8001276:	2001      	movs	r0, #1
 8001278:	f009 ffaa 	bl	800b1d0 <UTIL_LPM_SetOffMode>

  APPE_Led_Init();
 800127c:	f000 f97c 	bl	8001578 <APPE_Led_Init>

  APPE_Button_Init();
 8001280:	f000 f98a 	bl	8001598 <APPE_Button_Init>
  
  RxUART_Init();
 8001284:	f000 f9f4 	bl	8001670 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001288:	f000 f858 	bl	800133c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800128c:	bf00      	nop
}
 800128e:	bd80      	pop	{r7, pc}
 8001290:	2000048c 	.word	0x2000048c

08001294 <Init_Smps>:

void Init_Smps(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001298:	bf00      	nop
}
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <Init_Exti>:

void Init_Exti(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80012a6:	2050      	movs	r0, #80	; 0x50
 80012a8:	f7ff ff38 	bl	800111c <LL_EXTI_EnableIT_32_63>

  return;
 80012ac:	bf00      	nop
}
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80012b4:	bf00      	nop
}
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f008 fcf1 	bl	8009cac <OTP_Read>
 80012ca:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	799b      	ldrb	r3, [r3, #6]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff34 	bl	8001144 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
}
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <System_Init>:

static void System_Init(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
  Init_Smps();
 80012ea:	f7ff ffd3 	bl	8001294 <Init_Smps>

  Init_Exti();
 80012ee:	f7ff ffd8 	bl	80012a2 <Init_Exti>

  Init_Rtc();
 80012f2:	f000 f803 	bl	80012fc <Init_Rtc>

  return;
 80012f6:	bf00      	nop
}
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <Init_Rtc>:

static void Init_Rtc(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <Init_Rtc+0x1c>)
 8001302:	f7ff ff7a 	bl	80011fa <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001306:	2100      	movs	r1, #0
 8001308:	4803      	ldr	r0, [pc, #12]	; (8001318 <Init_Rtc+0x1c>)
 800130a:	f7ff ff86 	bl	800121a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800130e:	4802      	ldr	r0, [pc, #8]	; (8001318 <Init_Rtc+0x1c>)
 8001310:	f7ff ff66 	bl	80011e0 <LL_RTC_EnableWriteProtection>

  return;
 8001314:	bf00      	nop
}
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40002800 	.word	0x40002800

0800131c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001320:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001324:	f7ff ff2c 	bl	8001180 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001328:	f009 ff40 	bl	800b1ac <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800132c:	2004      	movs	r0, #4
 800132e:	f7ff fedf 	bl	80010f0 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 8001332:	f003 fdef 	bl	8004f14 <HAL_PWREx_EnableSRAMRetention>

  return;
 8001336:	bf00      	nop
}
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001342:	f009 fcf1 	bl	800ad28 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001346:	4a11      	ldr	r2, [pc, #68]	; (800138c <appe_Tl_Init+0x50>)
 8001348:	2100      	movs	r1, #0
 800134a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800134e:	f00a f86b 	bl	800b428 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <appe_Tl_Init+0x54>)
 8001354:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <appe_Tl_Init+0x58>)
 8001358:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800135a:	463b      	mov	r3, r7
 800135c:	4619      	mov	r1, r3
 800135e:	480e      	ldr	r0, [pc, #56]	; (8001398 <appe_Tl_Init+0x5c>)
 8001360:	f008 fdbe 	bl	8009ee0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <appe_Tl_Init+0x60>)
 8001366:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001368:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <appe_Tl_Init+0x64>)
 800136a:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <appe_Tl_Init+0x68>)
 800136e:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001370:	f240 533c 	movw	r3, #1340	; 0x53c
 8001374:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	4618      	mov	r0, r3
 800137c:	f009 fe16 	bl	800afac <TL_MM_Init>

  TL_Enable();
 8001380:	f009 fccc 	bl	800ad1c <TL_Enable>

  return;
 8001384:	bf00      	nop
}
 8001386:	3720      	adds	r7, #32
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	08009f19 	.word	0x08009f19
 8001390:	20030734 	.word	0x20030734
 8001394:	080013a9 	.word	0x080013a9
 8001398:	080013c1 	.word	0x080013c1
 800139c:	2003094c 	.word	0x2003094c
 80013a0:	20030840 	.word	0x20030840
 80013a4:	200301f8 	.word	0x200301f8

080013a8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80013b2:	bf00      	nop
}
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	330b      	adds	r3, #11
 80013ce:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80013da:	2b07      	cmp	r3, #7
 80013dc:	d848      	bhi.n	8001470 <APPE_SysUserEvtRx+0xb0>
 80013de:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <APPE_SysUserEvtRx+0x24>)
 80013e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e4:	08001405 	.word	0x08001405
 80013e8:	08001417 	.word	0x08001417
 80013ec:	08001425 	.word	0x08001425
 80013f0:	08001471 	.word	0x08001471
 80013f4:	08001441 	.word	0x08001441
 80013f8:	08001451 	.word	0x08001451
 80013fc:	08001459 	.word	0x08001459
 8001400:	08001469 	.word	0x08001469
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4618      	mov	r0, r3
 800140a:	f008 fcbb 	bl	8009d84 <SHCI_GetWirelessFwInfo>
    //APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    //APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    //APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    //APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f868 	bl	80014e4 <APPE_SysEvtReadyProcessing>
    break;
 8001414:	e02d      	b.n	8001472 <APPE_SysUserEvtRx+0xb2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8001416:	4819      	ldr	r0, [pc, #100]	; (800147c <APPE_SysUserEvtRx+0xbc>)
 8001418:	f00a fdf2 	bl	800c000 <iprintf>
    APPE_SysEvtError(pPayload);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f83b 	bl	8001498 <APPE_SysEvtError>
    break;
 8001422:	e026      	b.n	8001472 <APPE_SysUserEvtRx+0xb2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001424:	4816      	ldr	r0, [pc, #88]	; (8001480 <APPE_SysUserEvtRx+0xc0>)
 8001426:	f00a fe71 	bl	800c10c <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800142e:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	461a      	mov	r2, r3
 8001438:	4812      	ldr	r0, [pc, #72]	; (8001484 <APPE_SysUserEvtRx+0xc4>)
 800143a:	f00a fde1 	bl	800c000 <iprintf>
    break;
 800143e:	e018      	b.n	8001472 <APPE_SysUserEvtRx+0xb2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4619      	mov	r1, r3
 8001448:	480f      	ldr	r0, [pc, #60]	; (8001488 <APPE_SysUserEvtRx+0xc8>)
 800144a:	f00a fdd9 	bl	800c000 <iprintf>
    break;
 800144e:	e010      	b.n	8001472 <APPE_SysUserEvtRx+0xb2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001450:	480e      	ldr	r0, [pc, #56]	; (800148c <APPE_SysUserEvtRx+0xcc>)
 8001452:	f00a fdd5 	bl	800c000 <iprintf>
    break;
 8001456:	e00c      	b.n	8001472 <APPE_SysUserEvtRx+0xb2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4619      	mov	r1, r3
 8001460:	480b      	ldr	r0, [pc, #44]	; (8001490 <APPE_SysUserEvtRx+0xd0>)
 8001462:	f00a fdcd 	bl	800c000 <iprintf>
    break;
 8001466:	e004      	b.n	8001472 <APPE_SysUserEvtRx+0xb2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001468:	480a      	ldr	r0, [pc, #40]	; (8001494 <APPE_SysUserEvtRx+0xd4>)
 800146a:	f00a fdc9 	bl	800c000 <iprintf>
    break;
 800146e:	e000      	b.n	8001472 <APPE_SysUserEvtRx+0xb2>

  default:
    break;
 8001470:	bf00      	nop
  }

  return;
 8001472:	bf00      	nop
}
 8001474:	3720      	adds	r7, #32
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	0800e64c 	.word	0x0800e64c
 8001480:	0800e670 	.word	0x0800e670
 8001484:	0800e6c0 	.word	0x0800e6c0
 8001488:	0800e6e8 	.word	0x0800e6e8
 800148c:	0800e724 	.word	0x0800e724
 8001490:	0800e748 	.word	0x0800e748
 8001494:	0800e784 	.word	0x0800e784

08001498 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	330b      	adds	r3, #11
 80014a6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	3302      	adds	r3, #2
 80014ac:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4619      	mov	r1, r3
 80014b4:	4808      	ldr	r0, [pc, #32]	; (80014d8 <APPE_SysEvtError+0x40>)
 80014b6:	f00a fda3 	bl	800c000 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d103      	bne.n	80014ca <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <APPE_SysEvtError+0x44>)
 80014c4:	f00a fe22 	bl	800c10c <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80014c8:	e003      	b.n	80014d2 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <APPE_SysEvtError+0x48>)
 80014cc:	f00a fe1e 	bl	800c10c <puts>
  return;
 80014d0:	bf00      	nop
}
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	0800e7a8 	.word	0x0800e7a8
 80014dc:	0800e7d8 	.word	0x0800e7d8
 80014e0:	0800e814 	.word	0x0800e814

080014e4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	330b      	adds	r3, #11
 8001508:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3302      	adds	r3, #2
 800150e:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d11d      	bne.n	8001554 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    //APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001518:	f7ff fd0c 	bl	8000f34 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800151c:	230f      	movs	r3, #15
 800151e:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001520:	237f      	movs	r3, #127	; 0x7f
 8001522:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001524:	f7ff fe4e 	bl	80011c4 <LL_DBGMCU_GetRevisionID>
 8001528:	6278      	str	r0, [r7, #36]	; 0x24

    //APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	b29b      	uxth	r3, r3
 800152e:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001530:	f7ff fe3a 	bl	80011a8 <LL_DBGMCU_GetDeviceID>
 8001534:	6238      	str	r0, [r7, #32]
    //APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8001536:	6a3b      	ldr	r3, [r7, #32]
 8001538:	b29b      	uxth	r3, r3
 800153a:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	4618      	mov	r0, r3
 8001542:	f008 fc09 	bl	8009d58 <SHCI_C2_Config>

    APP_BLE_Init();
 8001546:	f001 fc85 	bl	8002e54 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800154a:	2100      	movs	r1, #0
 800154c:	2001      	movs	r0, #1
 800154e:	f009 fe3f 	bl	800b1d0 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001552:	e00b      	b.n	800156c <APPE_SysEvtReadyProcessing+0x88>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d103      	bne.n	8001564 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
  return;
 8001562:	e003      	b.n	800156c <APPE_SysEvtReadyProcessing+0x88>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001564:	4803      	ldr	r0, [pc, #12]	; (8001574 <APPE_SysEvtReadyProcessing+0x90>)
 8001566:	f00a fd4b 	bl	800c000 <iprintf>
  return;
 800156a:	bf00      	nop
}
 800156c:	3728      	adds	r7, #40	; 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	0800e84c 	.word	0x0800e84c

08001578 <APPE_Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
void APPE_Led_Init( void )
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 800157c:	2000      	movs	r0, #0
 800157e:	f002 fb61 	bl	8003c44 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8001582:	2001      	movs	r0, #1
 8001584:	f002 fb5e 	bl	8003c44 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001588:	2002      	movs	r0, #2
 800158a:	f002 fb5b 	bl	8003c44 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 800158e:	2001      	movs	r0, #1
 8001590:	f002 fb92 	bl	8003cb8 <BSP_LED_On>
#endif

  return;
 8001594:	bf00      	nop
}
 8001596:	bd80      	pop	{r7, pc}

08001598 <APPE_Button_Init>:

void APPE_Button_Init( void )
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800159c:	2101      	movs	r1, #1
 800159e:	2000      	movs	r0, #0
 80015a0:	f002 fbbe 	bl	8003d20 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80015a4:	2101      	movs	r1, #1
 80015a6:	2001      	movs	r0, #1
 80015a8:	f002 fbba 	bl	8003d20 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80015ac:	2101      	movs	r1, #1
 80015ae:	2002      	movs	r0, #2
 80015b0:	f002 fbb6 	bl	8003d20 <BSP_PB_Init>
#endif

  return;
 80015b4:	bf00      	nop
}
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f009 fe36 	bl	800b230 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80015cc:	bf00      	nop
}
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80015e0:	f04f 30ff 	mov.w	r0, #4294967295
 80015e4:	f009 fe24 	bl	800b230 <UTIL_SEQ_Run>

  return;
 80015e8:	bf00      	nop
}
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80015f8:	2100      	movs	r1, #0
 80015fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015fe:	f009 ff35 	bl	800b46c <UTIL_SEQ_SetTask>
  return;
 8001602:	bf00      	nop
}
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001612:	2002      	movs	r0, #2
 8001614:	f009 ff96 	bl	800b544 <UTIL_SEQ_SetEvt>
  return;
 8001618:	bf00      	nop
}
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001628:	2002      	movs	r0, #2
 800162a:	f009 ffab 	bl	800b584 <UTIL_SEQ_WaitEvt>
  return;
 800162e:	bf00      	nop
}
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	2b40      	cmp	r3, #64	; 0x40
 8001644:	d00c      	beq.n	8001660 <HAL_GPIO_EXTI_Callback+0x2a>
 8001646:	2b40      	cmp	r3, #64	; 0x40
 8001648:	dc0d      	bgt.n	8001666 <HAL_GPIO_EXTI_Callback+0x30>
 800164a:	2b01      	cmp	r3, #1
 800164c:	d002      	beq.n	8001654 <HAL_GPIO_EXTI_Callback+0x1e>
 800164e:	2b10      	cmp	r3, #16
 8001650:	d003      	beq.n	800165a <HAL_GPIO_EXTI_Callback+0x24>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8001652:	e008      	b.n	8001666 <HAL_GPIO_EXTI_Callback+0x30>
      APP_BLE_Key_Button1_Action();
 8001654:	f001 fdd8 	bl	8003208 <APP_BLE_Key_Button1_Action>
      break; 
 8001658:	e006      	b.n	8001668 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 800165a:	f001 fde5 	bl	8003228 <APP_BLE_Key_Button2_Action>
      break; 
 800165e:	e003      	b.n	8001668 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 8001660:	f001 fdea 	bl	8003238 <APP_BLE_Key_Button3_Action>
      break;
 8001664:	e000      	b.n	8001668 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8001666:	bf00      	nop

  }
  return;
 8001668:	bf00      	nop
}
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <RxUART_Init>:

static void RxUART_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <RxUART_Init+0x14>)
 8001676:	2201      	movs	r2, #1
 8001678:	4903      	ldr	r1, [pc, #12]	; (8001688 <RxUART_Init+0x18>)
 800167a:	2000      	movs	r0, #0
 800167c:	f000 ff10 	bl	80024a0 <HW_UART_Receive_IT>
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}
 8001684:	0800168d 	.word	0x0800168d
 8001688:	2000029c 	.word	0x2000029c

0800168c <RxCpltCallback>:

static void RxCpltCallback(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8001690:	4b15      	ldr	r3, [pc, #84]	; (80016e8 <RxCpltCallback+0x5c>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	2bff      	cmp	r3, #255	; 0xff
 8001696:	d81e      	bhi.n	80016d6 <RxCpltCallback+0x4a>
  {
    if (aRxBuffer[0] == '\r')
 8001698:	4b14      	ldr	r3, [pc, #80]	; (80016ec <RxCpltCallback+0x60>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b0d      	cmp	r3, #13
 800169e:	d10f      	bne.n	80016c0 <RxCpltCallback+0x34>
    {
      APP_DBG_MSG("received %s\n", CommandString);
 80016a0:	4913      	ldr	r1, [pc, #76]	; (80016f0 <RxCpltCallback+0x64>)
 80016a2:	4814      	ldr	r0, [pc, #80]	; (80016f4 <RxCpltCallback+0x68>)
 80016a4:	f00a fcac 	bl	800c000 <iprintf>

      UartCmdExecute();
 80016a8:	f000 f828 	bl	80016fc <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 80016ac:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <RxCpltCallback+0x5c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 80016b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016b6:	2100      	movs	r1, #0
 80016b8:	480d      	ldr	r0, [pc, #52]	; (80016f0 <RxCpltCallback+0x64>)
 80016ba:	f00a f82f 	bl	800b71c <memset>
 80016be:	e00a      	b.n	80016d6 <RxCpltCallback+0x4a>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <RxCpltCallback+0x5c>)
 80016c2:	881b      	ldrh	r3, [r3, #0]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	b291      	uxth	r1, r2
 80016c8:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <RxCpltCallback+0x5c>)
 80016ca:	8011      	strh	r1, [r2, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <RxCpltCallback+0x60>)
 80016d0:	7819      	ldrb	r1, [r3, #0]
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <RxCpltCallback+0x64>)
 80016d4:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <RxCpltCallback+0x6c>)
 80016d8:	2201      	movs	r2, #1
 80016da:	4904      	ldr	r1, [pc, #16]	; (80016ec <RxCpltCallback+0x60>)
 80016dc:	2000      	movs	r0, #0
 80016de:	f000 fedf 	bl	80024a0 <HW_UART_Receive_IT>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200003a4 	.word	0x200003a4
 80016ec:	2000029c 	.word	0x2000029c
 80016f0:	200002a4 	.word	0x200002a4
 80016f4:	0800e880 	.word	0x0800e880
 80016f8:	0800168d 	.word	0x0800168d

080016fc <UartCmdExecute>:

static void UartCmdExecute(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 8001700:	491c      	ldr	r1, [pc, #112]	; (8001774 <UartCmdExecute+0x78>)
 8001702:	481d      	ldr	r0, [pc, #116]	; (8001778 <UartCmdExecute+0x7c>)
 8001704:	f7fe fd3c 	bl	8000180 <strcmp>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10a      	bne.n	8001724 <UartCmdExecute+0x28>
  {
    APP_DBG_MSG("SW1 OK\n");
 800170e:	481b      	ldr	r0, [pc, #108]	; (800177c <UartCmdExecute+0x80>)
 8001710:	f00a fcfc 	bl	800c10c <puts>
    exti_handle.Line = EXTI_LINE_0;
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <UartCmdExecute+0x84>)
 8001716:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 800171a:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 800171c:	4818      	ldr	r0, [pc, #96]	; (8001780 <UartCmdExecute+0x84>)
 800171e:	f003 f975 	bl	8004a0c <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 8001722:	e025      	b.n	8001770 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 8001724:	4917      	ldr	r1, [pc, #92]	; (8001784 <UartCmdExecute+0x88>)
 8001726:	4814      	ldr	r0, [pc, #80]	; (8001778 <UartCmdExecute+0x7c>)
 8001728:	f7fe fd2a 	bl	8000180 <strcmp>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <UartCmdExecute+0x4a>
    APP_DBG_MSG("SW2 OK\n");
 8001732:	4815      	ldr	r0, [pc, #84]	; (8001788 <UartCmdExecute+0x8c>)
 8001734:	f00a fcea 	bl	800c10c <puts>
    exti_handle.Line = EXTI_LINE_4;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <UartCmdExecute+0x84>)
 800173a:	4a14      	ldr	r2, [pc, #80]	; (800178c <UartCmdExecute+0x90>)
 800173c:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 800173e:	4810      	ldr	r0, [pc, #64]	; (8001780 <UartCmdExecute+0x84>)
 8001740:	f003 f964 	bl	8004a0c <HAL_EXTI_GenerateSWI>
}
 8001744:	e014      	b.n	8001770 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 8001746:	4912      	ldr	r1, [pc, #72]	; (8001790 <UartCmdExecute+0x94>)
 8001748:	480b      	ldr	r0, [pc, #44]	; (8001778 <UartCmdExecute+0x7c>)
 800174a:	f7fe fd19 	bl	8000180 <strcmp>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d109      	bne.n	8001768 <UartCmdExecute+0x6c>
    APP_DBG_MSG("SW3 OK\n");
 8001754:	480f      	ldr	r0, [pc, #60]	; (8001794 <UartCmdExecute+0x98>)
 8001756:	f00a fcd9 	bl	800c10c <puts>
    exti_handle.Line = EXTI_LINE_6;
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <UartCmdExecute+0x84>)
 800175c:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <UartCmdExecute+0x9c>)
 800175e:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001760:	4807      	ldr	r0, [pc, #28]	; (8001780 <UartCmdExecute+0x84>)
 8001762:	f003 f953 	bl	8004a0c <HAL_EXTI_GenerateSWI>
}
 8001766:	e003      	b.n	8001770 <UartCmdExecute+0x74>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
 8001768:	4903      	ldr	r1, [pc, #12]	; (8001778 <UartCmdExecute+0x7c>)
 800176a:	480c      	ldr	r0, [pc, #48]	; (800179c <UartCmdExecute+0xa0>)
 800176c:	f00a fc48 	bl	800c000 <iprintf>
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	0800e890 	.word	0x0800e890
 8001778:	200002a4 	.word	0x200002a4
 800177c:	0800e894 	.word	0x0800e894
 8001780:	20000294 	.word	0x20000294
 8001784:	0800e89c 	.word	0x0800e89c
 8001788:	0800e8a0 	.word	0x0800e8a0
 800178c:	16000004 	.word	0x16000004
 8001790:	0800e8a8 	.word	0x0800e8a8
 8001794:	0800e8ac 	.word	0x0800e8ac
 8001798:	16000006 	.word	0x16000006
 800179c:	0800e8b4 	.word	0x0800e8b4

080017a0 <LL_EXTI_EnableIT_0_31>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80017aa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80017ae:	4905      	ldr	r1, [pc, #20]	; (80017c4 <LL_EXTI_EnableIT_0_31+0x24>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	58000800 	.word	0x58000800

080017c8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4904      	ldr	r1, [pc, #16]	; (80017e8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4313      	orrs	r3, r2
 80017da:	600b      	str	r3, [r1, #0]

}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	58000800 	.word	0x58000800

080017ec <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80017f2:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <ReadRtcSsrValue+0x3c>)
 80017f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <ReadRtcSsrValue+0x3c>)
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	b29b      	uxth	r3, r3
 8001800:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001802:	e005      	b.n	8001810 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <ReadRtcSsrValue+0x3c>)
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	b29b      	uxth	r3, r3
 800180e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d1f5      	bne.n	8001804 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001818:	683b      	ldr	r3, [r7, #0]
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	40002800 	.word	0x40002800

0800182c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	460a      	mov	r2, r1
 8001836:	71fb      	strb	r3, [r7, #7]
 8001838:	4613      	mov	r3, r2
 800183a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 800183c:	79ba      	ldrb	r2, [r7, #6]
 800183e:	491d      	ldr	r1, [pc, #116]	; (80018b4 <LinkTimerAfter+0x88>)
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	3315      	adds	r3, #21
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	2b06      	cmp	r3, #6
 8001854:	d009      	beq.n	800186a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001856:	7bfa      	ldrb	r2, [r7, #15]
 8001858:	4916      	ldr	r1, [pc, #88]	; (80018b4 <LinkTimerAfter+0x88>)
 800185a:	4613      	mov	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	00db      	lsls	r3, r3, #3
 8001862:	440b      	add	r3, r1
 8001864:	3314      	adds	r3, #20
 8001866:	79fa      	ldrb	r2, [r7, #7]
 8001868:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800186a:	79fa      	ldrb	r2, [r7, #7]
 800186c:	4911      	ldr	r1, [pc, #68]	; (80018b4 <LinkTimerAfter+0x88>)
 800186e:	4613      	mov	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	4413      	add	r3, r2
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	440b      	add	r3, r1
 8001878:	3315      	adds	r3, #21
 800187a:	7bfa      	ldrb	r2, [r7, #15]
 800187c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800187e:	79fa      	ldrb	r2, [r7, #7]
 8001880:	490c      	ldr	r1, [pc, #48]	; (80018b4 <LinkTimerAfter+0x88>)
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	440b      	add	r3, r1
 800188c:	3314      	adds	r3, #20
 800188e:	79ba      	ldrb	r2, [r7, #6]
 8001890:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001892:	79ba      	ldrb	r2, [r7, #6]
 8001894:	4907      	ldr	r1, [pc, #28]	; (80018b4 <LinkTimerAfter+0x88>)
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	440b      	add	r3, r1
 80018a0:	3315      	adds	r3, #21
 80018a2:	79fa      	ldrb	r2, [r7, #7]
 80018a4:	701a      	strb	r2, [r3, #0]

  return;
 80018a6:	bf00      	nop
}
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	200003a8 	.word	0x200003a8

080018b8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	460a      	mov	r2, r1
 80018c2:	71fb      	strb	r3, [r7, #7]
 80018c4:	4613      	mov	r3, r2
 80018c6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80018c8:	4b29      	ldr	r3, [pc, #164]	; (8001970 <LinkTimerBefore+0xb8>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	79ba      	ldrb	r2, [r7, #6]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d032      	beq.n	800193a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80018d4:	79ba      	ldrb	r2, [r7, #6]
 80018d6:	4927      	ldr	r1, [pc, #156]	; (8001974 <LinkTimerBefore+0xbc>)
 80018d8:	4613      	mov	r3, r2
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	4413      	add	r3, r2
 80018de:	00db      	lsls	r3, r3, #3
 80018e0:	440b      	add	r3, r1
 80018e2:	3314      	adds	r3, #20
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80018e8:	7bfa      	ldrb	r2, [r7, #15]
 80018ea:	4922      	ldr	r1, [pc, #136]	; (8001974 <LinkTimerBefore+0xbc>)
 80018ec:	4613      	mov	r3, r2
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4413      	add	r3, r2
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	440b      	add	r3, r1
 80018f6:	3315      	adds	r3, #21
 80018f8:	79fa      	ldrb	r2, [r7, #7]
 80018fa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80018fc:	79fa      	ldrb	r2, [r7, #7]
 80018fe:	491d      	ldr	r1, [pc, #116]	; (8001974 <LinkTimerBefore+0xbc>)
 8001900:	4613      	mov	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	440b      	add	r3, r1
 800190a:	3315      	adds	r3, #21
 800190c:	79ba      	ldrb	r2, [r7, #6]
 800190e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001910:	79fa      	ldrb	r2, [r7, #7]
 8001912:	4918      	ldr	r1, [pc, #96]	; (8001974 <LinkTimerBefore+0xbc>)
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	3314      	adds	r3, #20
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001924:	79ba      	ldrb	r2, [r7, #6]
 8001926:	4913      	ldr	r1, [pc, #76]	; (8001974 <LinkTimerBefore+0xbc>)
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	440b      	add	r3, r1
 8001932:	3314      	adds	r3, #20
 8001934:	79fa      	ldrb	r2, [r7, #7]
 8001936:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001938:	e014      	b.n	8001964 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800193a:	79fa      	ldrb	r2, [r7, #7]
 800193c:	490d      	ldr	r1, [pc, #52]	; (8001974 <LinkTimerBefore+0xbc>)
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	440b      	add	r3, r1
 8001948:	3315      	adds	r3, #21
 800194a:	79ba      	ldrb	r2, [r7, #6]
 800194c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800194e:	79ba      	ldrb	r2, [r7, #6]
 8001950:	4908      	ldr	r1, [pc, #32]	; (8001974 <LinkTimerBefore+0xbc>)
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	440b      	add	r3, r1
 800195c:	3314      	adds	r3, #20
 800195e:	79fa      	ldrb	r2, [r7, #7]
 8001960:	701a      	strb	r2, [r3, #0]
  return;
 8001962:	bf00      	nop
}
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	20000438 	.word	0x20000438
 8001974:	200003a8 	.word	0x200003a8

08001978 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001982:	4b4e      	ldr	r3, [pc, #312]	; (8001abc <linkTimer+0x144>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b06      	cmp	r3, #6
 800198a:	d118      	bne.n	80019be <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800198c:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <linkTimer+0x144>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	b2da      	uxtb	r2, r3
 8001992:	4b4b      	ldr	r3, [pc, #300]	; (8001ac0 <linkTimer+0x148>)
 8001994:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001996:	4a49      	ldr	r2, [pc, #292]	; (8001abc <linkTimer+0x144>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800199c:	79fa      	ldrb	r2, [r7, #7]
 800199e:	4949      	ldr	r1, [pc, #292]	; (8001ac4 <linkTimer+0x14c>)
 80019a0:	4613      	mov	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4413      	add	r3, r2
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	440b      	add	r3, r1
 80019aa:	3315      	adds	r3, #21
 80019ac:	2206      	movs	r2, #6
 80019ae:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80019b0:	4b45      	ldr	r3, [pc, #276]	; (8001ac8 <linkTimer+0x150>)
 80019b2:	f04f 32ff 	mov.w	r2, #4294967295
 80019b6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	81fb      	strh	r3, [r7, #14]
 80019bc:	e078      	b.n	8001ab0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80019be:	f000 f909 	bl	8001bd4 <ReturnTimeElapsed>
 80019c2:	4603      	mov	r3, r0
 80019c4:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80019c6:	79fa      	ldrb	r2, [r7, #7]
 80019c8:	493e      	ldr	r1, [pc, #248]	; (8001ac4 <linkTimer+0x14c>)
 80019ca:	4613      	mov	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	4413      	add	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	440b      	add	r3, r1
 80019d4:	3308      	adds	r3, #8
 80019d6:	6819      	ldr	r1, [r3, #0]
 80019d8:	89fb      	ldrh	r3, [r7, #14]
 80019da:	79fa      	ldrb	r2, [r7, #7]
 80019dc:	4419      	add	r1, r3
 80019de:	4839      	ldr	r0, [pc, #228]	; (8001ac4 <linkTimer+0x14c>)
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4403      	add	r3, r0
 80019ea:	3308      	adds	r3, #8
 80019ec:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80019ee:	79fa      	ldrb	r2, [r7, #7]
 80019f0:	4934      	ldr	r1, [pc, #208]	; (8001ac4 <linkTimer+0x14c>)
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	440b      	add	r3, r1
 80019fc:	3308      	adds	r3, #8
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001a02:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <linkTimer+0x144>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4a2e      	ldr	r2, [pc, #184]	; (8001ac4 <linkTimer+0x14c>)
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	440b      	add	r3, r1
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4413      	add	r3, r2
 8001a16:	3308      	adds	r3, #8
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d337      	bcc.n	8001a90 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001a20:	4b26      	ldr	r3, [pc, #152]	; (8001abc <linkTimer+0x144>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001a26:	7b7a      	ldrb	r2, [r7, #13]
 8001a28:	4926      	ldr	r1, [pc, #152]	; (8001ac4 <linkTimer+0x14c>)
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	440b      	add	r3, r1
 8001a34:	3315      	adds	r3, #21
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001a3a:	e013      	b.n	8001a64 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001a3c:	7b7a      	ldrb	r2, [r7, #13]
 8001a3e:	4921      	ldr	r1, [pc, #132]	; (8001ac4 <linkTimer+0x14c>)
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	440b      	add	r3, r1
 8001a4a:	3315      	adds	r3, #21
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001a50:	7b7a      	ldrb	r2, [r7, #13]
 8001a52:	491c      	ldr	r1, [pc, #112]	; (8001ac4 <linkTimer+0x14c>)
 8001a54:	4613      	mov	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	4413      	add	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	440b      	add	r3, r1
 8001a5e:	3315      	adds	r3, #21
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001a64:	7b3b      	ldrb	r3, [r7, #12]
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d00b      	beq.n	8001a82 <linkTimer+0x10a>
 8001a6a:	7b3a      	ldrb	r2, [r7, #12]
 8001a6c:	4915      	ldr	r1, [pc, #84]	; (8001ac4 <linkTimer+0x14c>)
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	440b      	add	r3, r1
 8001a78:	3308      	adds	r3, #8
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d2dc      	bcs.n	8001a3c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001a82:	7b7a      	ldrb	r2, [r7, #13]
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fecf 	bl	800182c <LinkTimerAfter>
 8001a8e:	e00f      	b.n	8001ab0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <linkTimer+0x144>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff ff0c 	bl	80018b8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <linkTimer+0x144>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <linkTimer+0x148>)
 8001aa8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001aaa:	4a04      	ldr	r2, [pc, #16]	; (8001abc <linkTimer+0x144>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001ab0:	89fb      	ldrh	r3, [r7, #14]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000438 	.word	0x20000438
 8001ac0:	20000439 	.word	0x20000439
 8001ac4:	200003a8 	.word	0x200003a8
 8001ac8:	2000043c 	.word	0x2000043c

08001acc <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	460a      	mov	r2, r1
 8001ad6:	71fb      	strb	r3, [r7, #7]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001adc:	4b39      	ldr	r3, [pc, #228]	; (8001bc4 <UnlinkTimer+0xf8>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	79fa      	ldrb	r2, [r7, #7]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d111      	bne.n	8001b0c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ae8:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <UnlinkTimer+0xf8>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4b36      	ldr	r3, [pc, #216]	; (8001bc8 <UnlinkTimer+0xfc>)
 8001af0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001af2:	79fa      	ldrb	r2, [r7, #7]
 8001af4:	4935      	ldr	r1, [pc, #212]	; (8001bcc <UnlinkTimer+0x100>)
 8001af6:	4613      	mov	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	440b      	add	r3, r1
 8001b00:	3315      	adds	r3, #21
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	4b2f      	ldr	r3, [pc, #188]	; (8001bc4 <UnlinkTimer+0xf8>)
 8001b08:	701a      	strb	r2, [r3, #0]
 8001b0a:	e03e      	b.n	8001b8a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001b0c:	79fa      	ldrb	r2, [r7, #7]
 8001b0e:	492f      	ldr	r1, [pc, #188]	; (8001bcc <UnlinkTimer+0x100>)
 8001b10:	4613      	mov	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	440b      	add	r3, r1
 8001b1a:	3314      	adds	r3, #20
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001b20:	79fa      	ldrb	r2, [r7, #7]
 8001b22:	492a      	ldr	r1, [pc, #168]	; (8001bcc <UnlinkTimer+0x100>)
 8001b24:	4613      	mov	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	440b      	add	r3, r1
 8001b2e:	3315      	adds	r3, #21
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001b34:	79f9      	ldrb	r1, [r7, #7]
 8001b36:	7bfa      	ldrb	r2, [r7, #15]
 8001b38:	4824      	ldr	r0, [pc, #144]	; (8001bcc <UnlinkTimer+0x100>)
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	440b      	add	r3, r1
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4403      	add	r3, r0
 8001b44:	3315      	adds	r3, #21
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2d8      	uxtb	r0, r3
 8001b4a:	4920      	ldr	r1, [pc, #128]	; (8001bcc <UnlinkTimer+0x100>)
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	440b      	add	r3, r1
 8001b56:	3315      	adds	r3, #21
 8001b58:	4602      	mov	r2, r0
 8001b5a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b5c:	7bbb      	ldrb	r3, [r7, #14]
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d013      	beq.n	8001b8a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001b62:	79f9      	ldrb	r1, [r7, #7]
 8001b64:	7bba      	ldrb	r2, [r7, #14]
 8001b66:	4819      	ldr	r0, [pc, #100]	; (8001bcc <UnlinkTimer+0x100>)
 8001b68:	460b      	mov	r3, r1
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	440b      	add	r3, r1
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4403      	add	r3, r0
 8001b72:	3314      	adds	r3, #20
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	b2d8      	uxtb	r0, r3
 8001b78:	4914      	ldr	r1, [pc, #80]	; (8001bcc <UnlinkTimer+0x100>)
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	440b      	add	r3, r1
 8001b84:	3314      	adds	r3, #20
 8001b86:	4602      	mov	r2, r0
 8001b88:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001b8a:	79fa      	ldrb	r2, [r7, #7]
 8001b8c:	490f      	ldr	r1, [pc, #60]	; (8001bcc <UnlinkTimer+0x100>)
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	440b      	add	r3, r1
 8001b98:	330c      	adds	r3, #12
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <UnlinkTimer+0xf8>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b06      	cmp	r3, #6
 8001ba6:	d107      	bne.n	8001bb8 <UnlinkTimer+0xec>
 8001ba8:	79bb      	ldrb	r3, [r7, #6]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d104      	bne.n	8001bb8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <UnlinkTimer+0x104>)
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb4:	601a      	str	r2, [r3, #0]
  }

  return;
 8001bb6:	bf00      	nop
 8001bb8:	bf00      	nop
}
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	20000438 	.word	0x20000438
 8001bc8:	20000439 	.word	0x20000439
 8001bcc:	200003a8 	.word	0x200003a8
 8001bd0:	2000043c 	.word	0x2000043c

08001bd4 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <ReturnTimeElapsed+0x70>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be2:	d026      	beq.n	8001c32 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001be4:	f7ff fe02 	bl	80017ec <ReadRtcSsrValue>
 8001be8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <ReturnTimeElapsed+0x70>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d805      	bhi.n	8001c00 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <ReturnTimeElapsed+0x70>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	e00a      	b.n	8001c16 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <ReturnTimeElapsed+0x74>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <ReturnTimeElapsed+0x70>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <ReturnTimeElapsed+0x78>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001c24:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <ReturnTimeElapsed+0x7c>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	40d3      	lsrs	r3, r2
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	e001      	b.n	8001c36 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	b29b      	uxth	r3, r3
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000043c 	.word	0x2000043c
 8001c48:	20000444 	.word	0x20000444
 8001c4c:	20000442 	.word	0x20000442
 8001c50:	20000441 	.word	0x20000441

08001c54 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001c5e:	88fb      	ldrh	r3, [r7, #6]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d108      	bne.n	8001c76 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001c64:	f7ff fdc2 	bl	80017ec <ReadRtcSsrValue>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4a21      	ldr	r2, [pc, #132]	; (8001cf0 <RestartWakeupCounter+0x9c>)
 8001c6c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001c6e:	2003      	movs	r0, #3
 8001c70:	f002 fb7d 	bl	800436e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001c74:	e039      	b.n	8001cea <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d803      	bhi.n	8001c84 <RestartWakeupCounter+0x30>
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	; (8001cf4 <RestartWakeupCounter+0xa0>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d002      	beq.n	8001c8a <RestartWakeupCounter+0x36>
      Value -= 1;
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001c8a:	bf00      	nop
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <RestartWakeupCounter+0xa4>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f8      	beq.n	8001c8c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001c9a:	4b17      	ldr	r3, [pc, #92]	; (8001cf8 <RestartWakeupCounter+0xa4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4b15      	ldr	r3, [pc, #84]	; (8001cf8 <RestartWakeupCounter+0xa4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001caa:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001cac:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <RestartWakeupCounter+0xa8>)
 8001cae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001cb2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	f002 fb68 	bl	800438a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <RestartWakeupCounter+0xac>)
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	0c1b      	lsrs	r3, r3, #16
 8001cc0:	041b      	lsls	r3, r3, #16
 8001cc2:	88fa      	ldrh	r2, [r7, #6]
 8001cc4:	490e      	ldr	r1, [pc, #56]	; (8001d00 <RestartWakeupCounter+0xac>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001cca:	f7ff fd8f 	bl	80017ec <ReadRtcSsrValue>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a07      	ldr	r2, [pc, #28]	; (8001cf0 <RestartWakeupCounter+0x9c>)
 8001cd2:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <RestartWakeupCounter+0xa4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <RestartWakeupCounter+0xa4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ce2:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001ce4:	f3af 8000 	nop.w
  return ;
 8001ce8:	bf00      	nop
}
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	2000043c 	.word	0x2000043c
 8001cf4:	20000441 	.word	0x20000441
 8001cf8:	2000048c 	.word	0x2000048c
 8001cfc:	58000800 	.word	0x58000800
 8001d00:	40002800 	.word	0x40002800

08001d04 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001d0a:	4b45      	ldr	r3, [pc, #276]	; (8001e20 <RescheduleTimerList+0x11c>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d16:	d107      	bne.n	8001d28 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001d18:	bf00      	nop
 8001d1a:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <RescheduleTimerList+0x120>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f8      	bne.n	8001d1a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001d28:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <RescheduleTimerList+0x120>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	4b3d      	ldr	r3, [pc, #244]	; (8001e24 <RescheduleTimerList+0x120>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d36:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001d38:	4b3b      	ldr	r3, [pc, #236]	; (8001e28 <RescheduleTimerList+0x124>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001d3e:	7bfa      	ldrb	r2, [r7, #15]
 8001d40:	493a      	ldr	r1, [pc, #232]	; (8001e2c <RescheduleTimerList+0x128>)
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3308      	adds	r3, #8
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001d52:	f7ff ff3f 	bl	8001bd4 <ReturnTimeElapsed>
 8001d56:	4603      	mov	r3, r0
 8001d58:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d205      	bcs.n	8001d6e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d66:	4b32      	ldr	r3, [pc, #200]	; (8001e30 <RescheduleTimerList+0x12c>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	e04d      	b.n	8001e0a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	4a30      	ldr	r2, [pc, #192]	; (8001e34 <RescheduleTimerList+0x130>)
 8001d72:	8812      	ldrh	r2, [r2, #0]
 8001d74:	b292      	uxth	r2, r2
 8001d76:	4413      	add	r3, r2
 8001d78:	461a      	mov	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d906      	bls.n	8001d8e <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001d80:	4b2c      	ldr	r3, [pc, #176]	; (8001e34 <RescheduleTimerList+0x130>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001d86:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <RescheduleTimerList+0x12c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
 8001d8c:	e03d      	b.n	8001e0a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001d98:	4b25      	ldr	r3, [pc, #148]	; (8001e30 <RescheduleTimerList+0x12c>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d9e:	e034      	b.n	8001e0a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001da0:	7bfa      	ldrb	r2, [r7, #15]
 8001da2:	4922      	ldr	r1, [pc, #136]	; (8001e2c <RescheduleTimerList+0x128>)
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	440b      	add	r3, r1
 8001dae:	3308      	adds	r3, #8
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d20a      	bcs.n	8001dce <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	491c      	ldr	r1, [pc, #112]	; (8001e2c <RescheduleTimerList+0x128>)
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	4413      	add	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	440b      	add	r3, r1
 8001dc6:	3308      	adds	r3, #8
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	e013      	b.n	8001df6 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	4916      	ldr	r1, [pc, #88]	; (8001e2c <RescheduleTimerList+0x128>)
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	440b      	add	r3, r1
 8001ddc:	3308      	adds	r3, #8
 8001dde:	6819      	ldr	r1, [r3, #0]
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	1ac9      	subs	r1, r1, r3
 8001de6:	4811      	ldr	r0, [pc, #68]	; (8001e2c <RescheduleTimerList+0x128>)
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4403      	add	r3, r0
 8001df2:	3308      	adds	r3, #8
 8001df4:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	490c      	ldr	r1, [pc, #48]	; (8001e2c <RescheduleTimerList+0x128>)
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	440b      	add	r3, r1
 8001e04:	3315      	adds	r3, #21
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	2b06      	cmp	r3, #6
 8001e0e:	d1c7      	bne.n	8001da0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001e10:	89bb      	ldrh	r3, [r7, #12]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff1e 	bl	8001c54 <RestartWakeupCounter>

  return ;
 8001e18:	bf00      	nop
}
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40002800 	.word	0x40002800
 8001e24:	2000048c 	.word	0x2000048c
 8001e28:	20000438 	.word	0x20000438
 8001e2c:	200003a8 	.word	0x200003a8
 8001e30:	20000440 	.word	0x20000440
 8001e34:	20000446 	.word	0x20000446

08001e38 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8001e42:	617b      	str	r3, [r7, #20]
  return(result);
 8001e44:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001e48:	b672      	cpsid	i
}
 8001e4a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001e4c:	4b59      	ldr	r3, [pc, #356]	; (8001fb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	22ca      	movs	r2, #202	; 0xca
 8001e52:	625a      	str	r2, [r3, #36]	; 0x24
 8001e54:	4b57      	ldr	r3, [pc, #348]	; (8001fb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2253      	movs	r2, #83	; 0x53
 8001e5a:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001e5c:	4b55      	ldr	r3, [pc, #340]	; (8001fb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	4b54      	ldr	r3, [pc, #336]	; (8001fb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e6a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001e6c:	4b52      	ldr	r3, [pc, #328]	; (8001fb8 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001e74:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e78:	4950      	ldr	r1, [pc, #320]	; (8001fbc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	440b      	add	r3, r1
 8001e84:	330c      	adds	r3, #12
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d16e      	bne.n	8001f6c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001e8e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e92:	494a      	ldr	r1, [pc, #296]	; (8001fbc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001ea2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ea6:	4945      	ldr	r1, [pc, #276]	; (8001fbc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	440b      	add	r3, r1
 8001eb2:	3310      	adds	r3, #16
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001eb8:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d04c      	beq.n	8001f5c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001ec2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ec6:	493d      	ldr	r1, [pc, #244]	; (8001fbc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	440b      	add	r3, r1
 8001ed2:	330d      	adds	r3, #13
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d124      	bne.n	8001f26 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001edc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fdf2 	bl	8001acc <UnlinkTimer>
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f383 8810 	msr	PRIMASK, r3
}
 8001ef2:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001ef4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ef8:	4930      	ldr	r1, [pc, #192]	; (8001fbc <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	3304      	adds	r3, #4
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f000 fa32 	bl	8002378 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f14:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	22ca      	movs	r2, #202	; 0xca
 8001f1a:	625a      	str	r2, [r3, #36]	; 0x24
 8001f1c:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2253      	movs	r2, #83	; 0x53
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24
 8001f24:	e012      	b.n	8001f4c <HW_TS_RTC_Wakeup_Handler+0x114>
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f383 8810 	msr	PRIMASK, r3
}
 8001f30:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001f32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f99a 	bl	8002270 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	22ca      	movs	r2, #202	; 0xca
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24
 8001f44:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2253      	movs	r2, #83	; 0x53
 8001f4a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001f4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	4619      	mov	r1, r3
 8001f54:	69b8      	ldr	r0, [r7, #24]
 8001f56:	f000 fa95 	bl	8002484 <HW_TS_RTC_Int_AppNot>
 8001f5a:	e022      	b.n	8001fa2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001f5c:	f7ff fed2 	bl	8001d04 <RescheduleTimerList>
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f383 8810 	msr	PRIMASK, r3
}
 8001f6a:	e01a      	b.n	8001fa2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001f6c:	bf00      	nop
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f8      	beq.n	8001f6e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001f7c:	4b0d      	ldr	r3, [pc, #52]	; (8001fb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001f8c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001f90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f383 8810 	msr	PRIMASK, r3
}
 8001fa0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	22ff      	movs	r2, #255	; 0xff
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001faa:	bf00      	nop
}
 8001fac:	3728      	adds	r7, #40	; 0x28
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000048c 	.word	0x2000048c
 8001fb8:	20000438 	.word	0x20000438
 8001fbc:	200003a8 	.word	0x200003a8
 8001fc0:	20000440 	.word	0x20000440
 8001fc4:	58000800 	.word	0x58000800

08001fc8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001fd4:	4b5e      	ldr	r3, [pc, #376]	; (8002150 <HW_TS_Init+0x188>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	22ca      	movs	r2, #202	; 0xca
 8001fda:	625a      	str	r2, [r3, #36]	; 0x24
 8001fdc:	4b5c      	ldr	r3, [pc, #368]	; (8002150 <HW_TS_Init+0x188>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2253      	movs	r2, #83	; 0x53
 8001fe2:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001fe4:	4b5b      	ldr	r3, [pc, #364]	; (8002154 <HW_TS_Init+0x18c>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	4a5a      	ldr	r2, [pc, #360]	; (8002154 <HW_TS_Init+0x18c>)
 8001fea:	f043 0320 	orr.w	r3, r3, #32
 8001fee:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001ff0:	4b58      	ldr	r3, [pc, #352]	; (8002154 <HW_TS_Init+0x18c>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f1c3 0304 	rsb	r3, r3, #4
 8002000:	b2da      	uxtb	r2, r3
 8002002:	4b55      	ldr	r3, [pc, #340]	; (8002158 <HW_TS_Init+0x190>)
 8002004:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002006:	4b53      	ldr	r3, [pc, #332]	; (8002154 <HW_TS_Init+0x18c>)
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800200e:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002012:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	fa92 f2a2 	rbit	r2, r2
 800201a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	2a00      	cmp	r2, #0
 8002024:	d101      	bne.n	800202a <HW_TS_Init+0x62>
  {
    return 32U;
 8002026:	2220      	movs	r2, #32
 8002028:	e003      	b.n	8002032 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	fab2 f282 	clz	r2, r2
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	40d3      	lsrs	r3, r2
 8002034:	b2db      	uxtb	r3, r3
 8002036:	3301      	adds	r3, #1
 8002038:	b2da      	uxtb	r2, r3
 800203a:	4b48      	ldr	r3, [pc, #288]	; (800215c <HW_TS_Init+0x194>)
 800203c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800203e:	4b45      	ldr	r3, [pc, #276]	; (8002154 <HW_TS_Init+0x18c>)
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	b29b      	uxth	r3, r3
 8002044:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002048:	b29b      	uxth	r3, r3
 800204a:	3301      	adds	r3, #1
 800204c:	b29a      	uxth	r2, r3
 800204e:	4b44      	ldr	r3, [pc, #272]	; (8002160 <HW_TS_Init+0x198>)
 8002050:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002052:	4b43      	ldr	r3, [pc, #268]	; (8002160 <HW_TS_Init+0x198>)
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	3b01      	subs	r3, #1
 8002058:	4a40      	ldr	r2, [pc, #256]	; (800215c <HW_TS_Init+0x194>)
 800205a:	7812      	ldrb	r2, [r2, #0]
 800205c:	fb02 f303 	mul.w	r3, r2, r3
 8002060:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002064:	4a3c      	ldr	r2, [pc, #240]	; (8002158 <HW_TS_Init+0x190>)
 8002066:	7812      	ldrb	r2, [r2, #0]
 8002068:	40d3      	lsrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002072:	4293      	cmp	r3, r2
 8002074:	d904      	bls.n	8002080 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002076:	4b3b      	ldr	r3, [pc, #236]	; (8002164 <HW_TS_Init+0x19c>)
 8002078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800207c:	801a      	strh	r2, [r3, #0]
 800207e:	e003      	b.n	8002088 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	b29a      	uxth	r2, r3
 8002084:	4b37      	ldr	r3, [pc, #220]	; (8002164 <HW_TS_Init+0x19c>)
 8002086:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002088:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800208c:	f7ff fb9c 	bl	80017c8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002090:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002094:	f7ff fb84 	bl	80017a0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d13d      	bne.n	800211a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800209e:	4b32      	ldr	r3, [pc, #200]	; (8002168 <HW_TS_Init+0x1a0>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80020a4:	4b31      	ldr	r3, [pc, #196]	; (800216c <HW_TS_Init+0x1a4>)
 80020a6:	f04f 32ff 	mov.w	r2, #4294967295
 80020aa:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	77fb      	strb	r3, [r7, #31]
 80020b0:	e00c      	b.n	80020cc <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80020b2:	7ffa      	ldrb	r2, [r7, #31]
 80020b4:	492e      	ldr	r1, [pc, #184]	; (8002170 <HW_TS_Init+0x1a8>)
 80020b6:	4613      	mov	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	4413      	add	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	440b      	add	r3, r1
 80020c0:	330c      	adds	r3, #12
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80020c6:	7ffb      	ldrb	r3, [r7, #31]
 80020c8:	3301      	adds	r3, #1
 80020ca:	77fb      	strb	r3, [r7, #31]
 80020cc:	7ffb      	ldrb	r3, [r7, #31]
 80020ce:	2b05      	cmp	r3, #5
 80020d0:	d9ef      	bls.n	80020b2 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80020d2:	4b28      	ldr	r3, [pc, #160]	; (8002174 <HW_TS_Init+0x1ac>)
 80020d4:	2206      	movs	r2, #6
 80020d6:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <HW_TS_Init+0x188>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <HW_TS_Init+0x188>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020e6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HW_TS_Init+0x188>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <HW_TS_Init+0x188>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80020f8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80020fa:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <HW_TS_Init+0x1b0>)
 80020fc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002100:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002102:	2003      	movs	r0, #3
 8002104:	f002 f941 	bl	800438a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002108:	4b11      	ldr	r3, [pc, #68]	; (8002150 <HW_TS_Init+0x188>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <HW_TS_Init+0x188>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	e009      	b.n	800212e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <HW_TS_Init+0x188>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002124:	2b00      	cmp	r3, #0
 8002126:	d002      	beq.n	800212e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002128:	2003      	movs	r0, #3
 800212a:	f002 f920 	bl	800436e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HW_TS_Init+0x188>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	22ff      	movs	r2, #255	; 0xff
 8002134:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002136:	2200      	movs	r2, #0
 8002138:	2103      	movs	r1, #3
 800213a:	2003      	movs	r0, #3
 800213c:	f002 f8d5 	bl	80042ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002140:	2003      	movs	r0, #3
 8002142:	f002 f8ec 	bl	800431e <HAL_NVIC_EnableIRQ>

  return;
 8002146:	bf00      	nop
}
 8002148:	3720      	adds	r7, #32
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	2000048c 	.word	0x2000048c
 8002154:	40002800 	.word	0x40002800
 8002158:	20000441 	.word	0x20000441
 800215c:	20000442 	.word	0x20000442
 8002160:	20000444 	.word	0x20000444
 8002164:	20000446 	.word	0x20000446
 8002168:	20000440 	.word	0x20000440
 800216c:	2000043c 	.word	0x2000043c
 8002170:	200003a8 	.word	0x200003a8
 8002174:	20000438 	.word	0x20000438
 8002178:	58000800 	.word	0x58000800

0800217c <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 800217c:	b480      	push	{r7}
 800217e:	b08b      	sub	sp, #44	; 0x2c
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002192:	f3ef 8310 	mrs	r3, PRIMASK
 8002196:	61fb      	str	r3, [r7, #28]
  return(result);
 8002198:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800219a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800219c:	b672      	cpsid	i
}
 800219e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80021a0:	e004      	b.n	80021ac <HW_TS_Create+0x30>
  {
    loop++;
 80021a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021a6:	3301      	adds	r3, #1
 80021a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80021ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d80c      	bhi.n	80021ce <HW_TS_Create+0x52>
 80021b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80021b8:	492c      	ldr	r1, [pc, #176]	; (800226c <HW_TS_Create+0xf0>)
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	440b      	add	r3, r1
 80021c4:	330c      	adds	r3, #12
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1e9      	bne.n	80021a2 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80021ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80021d2:	2b06      	cmp	r3, #6
 80021d4:	d038      	beq.n	8002248 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80021d6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80021da:	4924      	ldr	r1, [pc, #144]	; (800226c <HW_TS_Create+0xf0>)
 80021dc:	4613      	mov	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	4413      	add	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	440b      	add	r3, r1
 80021e6:	330c      	adds	r3, #12
 80021e8:	2201      	movs	r2, #1
 80021ea:	701a      	strb	r2, [r3, #0]
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	f383 8810 	msr	PRIMASK, r3
}
 80021f6:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80021f8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80021fc:	491b      	ldr	r1, [pc, #108]	; (800226c <HW_TS_Create+0xf0>)
 80021fe:	4613      	mov	r3, r2
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	4413      	add	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	440b      	add	r3, r1
 8002208:	3310      	adds	r3, #16
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800220e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002212:	4916      	ldr	r1, [pc, #88]	; (800226c <HW_TS_Create+0xf0>)
 8002214:	4613      	mov	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	4413      	add	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	440b      	add	r3, r1
 800221e:	330d      	adds	r3, #13
 8002220:	79fa      	ldrb	r2, [r7, #7]
 8002222:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002224:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002228:	4910      	ldr	r1, [pc, #64]	; (800226c <HW_TS_Create+0xf0>)
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	440b      	add	r3, r1
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800223e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002240:	2300      	movs	r3, #0
 8002242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002246:	e008      	b.n	800225a <HW_TS_Create+0xde>
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f383 8810 	msr	PRIMASK, r3
}
 8002252:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002254:	2301      	movs	r3, #1
 8002256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800225a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800225e:	4618      	mov	r0, r3
 8002260:	372c      	adds	r7, #44	; 0x2c
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	200003a8 	.word	0x200003a8

08002270 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800227a:	f3ef 8310 	mrs	r3, PRIMASK
 800227e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002280:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002282:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002284:	b672      	cpsid	i
}
 8002286:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002288:	2003      	movs	r0, #3
 800228a:	f002 f856 	bl	800433a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800228e:	4b34      	ldr	r3, [pc, #208]	; (8002360 <HW_TS_Stop+0xf0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	22ca      	movs	r2, #202	; 0xca
 8002294:	625a      	str	r2, [r3, #36]	; 0x24
 8002296:	4b32      	ldr	r3, [pc, #200]	; (8002360 <HW_TS_Stop+0xf0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2253      	movs	r2, #83	; 0x53
 800229c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800229e:	79fa      	ldrb	r2, [r7, #7]
 80022a0:	4930      	ldr	r1, [pc, #192]	; (8002364 <HW_TS_Stop+0xf4>)
 80022a2:	4613      	mov	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	440b      	add	r3, r1
 80022ac:	330c      	adds	r3, #12
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d142      	bne.n	800233c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fc06 	bl	8001acc <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <HW_TS_Stop+0xf8>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80022c6:	7cfb      	ldrb	r3, [r7, #19]
 80022c8:	2b06      	cmp	r3, #6
 80022ca:	d12f      	bne.n	800232c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80022cc:	4b27      	ldr	r3, [pc, #156]	; (800236c <HW_TS_Stop+0xfc>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022d8:	d107      	bne.n	80022ea <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80022da:	bf00      	nop
 80022dc:	4b20      	ldr	r3, [pc, #128]	; (8002360 <HW_TS_Stop+0xf0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f8      	bne.n	80022dc <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HW_TS_Stop+0xf0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HW_TS_Stop+0xf0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022f8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80022fa:	bf00      	nop
 80022fc:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HW_TS_Stop+0xf0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f8      	beq.n	80022fc <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <HW_TS_Stop+0xf0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HW_TS_Stop+0xf0>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800231a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800231c:	4b14      	ldr	r3, [pc, #80]	; (8002370 <HW_TS_Stop+0x100>)
 800231e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002322:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002324:	2003      	movs	r0, #3
 8002326:	f002 f830 	bl	800438a <HAL_NVIC_ClearPendingIRQ>
 800232a:	e007      	b.n	800233c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <HW_TS_Stop+0x104>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	7cfa      	ldrb	r2, [r7, #19]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002338:	f7ff fce4 	bl	8001d04 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HW_TS_Stop+0xf0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	22ff      	movs	r2, #255	; 0xff
 8002342:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002344:	2003      	movs	r0, #3
 8002346:	f001 ffea 	bl	800431e <HAL_NVIC_EnableIRQ>
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f383 8810 	msr	PRIMASK, r3
}
 8002354:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002356:	bf00      	nop
}
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	2000048c 	.word	0x2000048c
 8002364:	200003a8 	.word	0x200003a8
 8002368:	20000438 	.word	0x20000438
 800236c:	40002800 	.word	0x40002800
 8002370:	58000800 	.word	0x58000800
 8002374:	20000439 	.word	0x20000439

08002378 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	6039      	str	r1, [r7, #0]
 8002382:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002384:	79fa      	ldrb	r2, [r7, #7]
 8002386:	493b      	ldr	r1, [pc, #236]	; (8002474 <HW_TS_Start+0xfc>)
 8002388:	4613      	mov	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	440b      	add	r3, r1
 8002392:	330c      	adds	r3, #12
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d103      	bne.n	80023a4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff66 	bl	8002270 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023a4:	f3ef 8310 	mrs	r3, PRIMASK
 80023a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80023aa:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80023ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80023ae:	b672      	cpsid	i
}
 80023b0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80023b2:	2003      	movs	r0, #3
 80023b4:	f001 ffc1 	bl	800433a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80023b8:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <HW_TS_Start+0x100>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	22ca      	movs	r2, #202	; 0xca
 80023be:	625a      	str	r2, [r3, #36]	; 0x24
 80023c0:	4b2d      	ldr	r3, [pc, #180]	; (8002478 <HW_TS_Start+0x100>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2253      	movs	r2, #83	; 0x53
 80023c6:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80023c8:	79fa      	ldrb	r2, [r7, #7]
 80023ca:	492a      	ldr	r1, [pc, #168]	; (8002474 <HW_TS_Start+0xfc>)
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	440b      	add	r3, r1
 80023d6:	330c      	adds	r3, #12
 80023d8:	2202      	movs	r2, #2
 80023da:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80023dc:	79fa      	ldrb	r2, [r7, #7]
 80023de:	4925      	ldr	r1, [pc, #148]	; (8002474 <HW_TS_Start+0xfc>)
 80023e0:	4613      	mov	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	3308      	adds	r3, #8
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80023f0:	79fa      	ldrb	r2, [r7, #7]
 80023f2:	4920      	ldr	r1, [pc, #128]	; (8002474 <HW_TS_Start+0xfc>)
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	3304      	adds	r3, #4
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fab6 	bl	8001978 <linkTimer>
 800240c:	4603      	mov	r3, r0
 800240e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002410:	4b1a      	ldr	r3, [pc, #104]	; (800247c <HW_TS_Start+0x104>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002416:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <HW_TS_Start+0x108>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	7c7a      	ldrb	r2, [r7, #17]
 800241e:	429a      	cmp	r2, r3
 8002420:	d002      	beq.n	8002428 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002422:	f7ff fc6f 	bl	8001d04 <RescheduleTimerList>
 8002426:	e013      	b.n	8002450 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002428:	79fa      	ldrb	r2, [r7, #7]
 800242a:	4912      	ldr	r1, [pc, #72]	; (8002474 <HW_TS_Start+0xfc>)
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	440b      	add	r3, r1
 8002436:	3308      	adds	r3, #8
 8002438:	6819      	ldr	r1, [r3, #0]
 800243a:	8a7b      	ldrh	r3, [r7, #18]
 800243c:	79fa      	ldrb	r2, [r7, #7]
 800243e:	1ac9      	subs	r1, r1, r3
 8002440:	480c      	ldr	r0, [pc, #48]	; (8002474 <HW_TS_Start+0xfc>)
 8002442:	4613      	mov	r3, r2
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4413      	add	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4403      	add	r3, r0
 800244c:	3308      	adds	r3, #8
 800244e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HW_TS_Start+0x100>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	22ff      	movs	r2, #255	; 0xff
 8002456:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002458:	2003      	movs	r0, #3
 800245a:	f001 ff60 	bl	800431e <HAL_NVIC_EnableIRQ>
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f383 8810 	msr	PRIMASK, r3
}
 8002468:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800246a:	bf00      	nop
}
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200003a8 	.word	0x200003a8
 8002478:	2000048c 	.word	0x2000048c
 800247c:	20000438 	.word	0x20000438
 8002480:	20000439 	.word	0x20000439

08002484 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	460b      	mov	r3, r1
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4798      	blx	r3

  return;
 8002496:	bf00      	nop
}
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	4603      	mov	r3, r0
 80024ac:	73fb      	strb	r3, [r7, #15]
 80024ae:	4613      	mov	r3, r2
 80024b0:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10c      	bne.n	80024d2 <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 80024b8:	4a08      	ldr	r2, [pc, #32]	; (80024dc <HW_UART_Receive_IT+0x3c>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6013      	str	r3, [r2, #0]
 80024be:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <HW_UART_Receive_IT+0x40>)
 80024c0:	4a08      	ldr	r2, [pc, #32]	; (80024e4 <HW_UART_Receive_IT+0x44>)
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	89bb      	ldrh	r3, [r7, #12]
 80024c6:	461a      	mov	r2, r3
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	4805      	ldr	r0, [pc, #20]	; (80024e0 <HW_UART_Receive_IT+0x40>)
 80024cc:	f004 faba 	bl	8006a44 <HAL_UART_Receive_IT>
            break;
 80024d0:	e000      	b.n	80024d4 <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80024d2:	bf00      	nop
    }

    return;
 80024d4:	bf00      	nop
}
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000448 	.word	0x20000448
 80024e0:	200004b0 	.word	0x200004b0
 80024e4:	40013800 	.word	0x40013800

080024e8 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	4603      	mov	r3, r0
 80024f4:	73fb      	strb	r3, [r7, #15]
 80024f6:	4613      	mov	r3, r2
 80024f8:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80024fe:	2300      	movs	r3, #0
 8002500:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002502:	7bfb      	ldrb	r3, [r7, #15]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10e      	bne.n	8002526 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002508:	4a17      	ldr	r2, [pc, #92]	; (8002568 <HW_UART_Transmit_DMA+0x80>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800250e:	4b17      	ldr	r3, [pc, #92]	; (800256c <HW_UART_Transmit_DMA+0x84>)
 8002510:	4a17      	ldr	r2, [pc, #92]	; (8002570 <HW_UART_Transmit_DMA+0x88>)
 8002512:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002514:	89bb      	ldrh	r3, [r7, #12]
 8002516:	461a      	mov	r2, r3
 8002518:	68b9      	ldr	r1, [r7, #8]
 800251a:	4814      	ldr	r0, [pc, #80]	; (800256c <HW_UART_Transmit_DMA+0x84>)
 800251c:	f004 fade 	bl	8006adc <HAL_UART_Transmit_DMA>
 8002520:	4603      	mov	r3, r0
 8002522:	75fb      	strb	r3, [r7, #23]
            break;
 8002524:	e000      	b.n	8002528 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002526:	bf00      	nop
    }

    switch (hal_status)
 8002528:	7dfb      	ldrb	r3, [r7, #23]
 800252a:	2b03      	cmp	r3, #3
 800252c:	d816      	bhi.n	800255c <HW_UART_Transmit_DMA+0x74>
 800252e:	a201      	add	r2, pc, #4	; (adr r2, 8002534 <HW_UART_Transmit_DMA+0x4c>)
 8002530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002534:	08002545 	.word	0x08002545
 8002538:	0800254b 	.word	0x0800254b
 800253c:	08002551 	.word	0x08002551
 8002540:	08002557 	.word	0x08002557
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002544:	2300      	movs	r3, #0
 8002546:	75bb      	strb	r3, [r7, #22]
            break;
 8002548:	e009      	b.n	800255e <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800254a:	2301      	movs	r3, #1
 800254c:	75bb      	strb	r3, [r7, #22]
            break;
 800254e:	e006      	b.n	800255e <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002550:	2302      	movs	r3, #2
 8002552:	75bb      	strb	r3, [r7, #22]
            break;
 8002554:	e003      	b.n	800255e <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002556:	2303      	movs	r3, #3
 8002558:	75bb      	strb	r3, [r7, #22]
            break;
 800255a:	e000      	b.n	800255e <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 800255c:	bf00      	nop
    }

    return hw_status;
 800255e:	7dbb      	ldrb	r3, [r7, #22]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	2000044c 	.word	0x2000044c
 800256c:	200004b0 	.word	0x200004b0
 8002570:	40013800 	.word	0x40013800

08002574 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_UART_RxCpltCallback+0x34>)
 8002584:	429a      	cmp	r2, r3
 8002586:	d107      	bne.n	8002598 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_UART_RxCpltCallback+0x38>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_UART_RxCpltCallback+0x38>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4798      	blx	r3
            }
            break;
 8002596:	e001      	b.n	800259c <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002598:	bf00      	nop
 800259a:	e000      	b.n	800259e <HAL_UART_RxCpltCallback+0x2a>
            break;
 800259c:	bf00      	nop
    }

    return;
 800259e:	bf00      	nop
}
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	40013800 	.word	0x40013800
 80025ac:	20000448 	.word	0x20000448

080025b0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <HAL_UART_TxCpltCallback+0x34>)
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d107      	bne.n	80025d4 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <HAL_UART_TxCpltCallback+0x38>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d005      	beq.n	80025d8 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_UART_TxCpltCallback+0x38>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4798      	blx	r3
            }
            break;
 80025d2:	e001      	b.n	80025d8 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80025d4:	bf00      	nop
 80025d6:	e000      	b.n	80025da <HAL_UART_TxCpltCallback+0x2a>
            break;
 80025d8:	bf00      	nop
    }

    return;
 80025da:	bf00      	nop
}
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40013800 	.word	0x40013800
 80025e8:	2000044c 	.word	0x2000044c

080025ec <LL_RCC_LSE_SetDriveCapability>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80025f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fc:	f023 0218 	bic.w	r2, r3, #24
 8002600:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <LL_AHB1_GRP1_EnableClock>:
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002624:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4313      	orrs	r3, r2
 800262e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002634:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4013      	ands	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800263c:	68fb      	ldr	r3, [r7, #12]
}
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <LL_AHB2_GRP1_EnableClock>:
{
 800264a:	b480      	push	{r7}
 800264c:	b085      	sub	sp, #20
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002656:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002658:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4313      	orrs	r3, r2
 8002660:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4013      	ands	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800266e:	68fb      	ldr	r3, [r7, #12]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002680:	f001 fc66 	bl	8003f50 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002684:	f7fe fddc 	bl	8001240 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002688:	f000 f811 	bl	80026ae <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800268c:	f000 f85b 	bl	8002746 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002690:	f000 f87a 	bl	8002788 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002694:	f000 f91c 	bl	80028d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002698:	f000 f908 	bl	80028ac <MX_DMA_Init>
  MX_RTC_Init();
 800269c:	f000 f888 	bl	80027b0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80026a0:	f000 f8b6 	bl	8002810 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80026a4:	f7fe fdda 	bl	800125c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80026a8:	f7fe ff86 	bl	80015b8 <MX_APPE_Process>
 80026ac:	e7fc      	b.n	80026a8 <main+0x2c>

080026ae <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b098      	sub	sp, #96	; 0x60
 80026b2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026b4:	f107 031c 	add.w	r3, r7, #28
 80026b8:	2244      	movs	r2, #68	; 0x44
 80026ba:	2100      	movs	r1, #0
 80026bc:	4618      	mov	r0, r3
 80026be:	f009 f82d 	bl	800b71c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026c2:	463b      	mov	r3, r7
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
 80026d0:	615a      	str	r2, [r3, #20]
 80026d2:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80026d4:	f002 fbfe 	bl	8004ed4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80026d8:	2000      	movs	r0, #0
 80026da:	f7ff ff87 	bl	80025ec <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80026de:	2307      	movs	r3, #7
 80026e0:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80026e8:	2301      	movs	r3, #1
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026f2:	2340      	movs	r3, #64	; 0x40
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026fa:	f107 031c 	add.w	r3, r7, #28
 80026fe:	4618      	mov	r0, r3
 8002700:	f002 ff50 	bl	80055a4 <HAL_RCC_OscConfig>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <SystemClock_Config+0x60>
  {
    Error_Handler();
 800270a:	f000 f8eb 	bl	80028e4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800270e:	236f      	movs	r3, #111	; 0x6f
 8002710:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002712:	2302      	movs	r3, #2
 8002714:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800272a:	463b      	mov	r3, r7
 800272c:	2101      	movs	r1, #1
 800272e:	4618      	mov	r0, r3
 8002730:	f003 fa6e 	bl	8005c10 <HAL_RCC_ClockConfig>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <SystemClock_Config+0x90>
  {
    Error_Handler();
 800273a:	f000 f8d3 	bl	80028e4 <Error_Handler>
  }
}
 800273e:	bf00      	nop
 8002740:	3760      	adds	r7, #96	; 0x60
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b08c      	sub	sp, #48	; 0x30
 800274a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800274c:	463b      	mov	r3, r7
 800274e:	2230      	movs	r2, #48	; 0x30
 8002750:	2100      	movs	r1, #0
 8002752:	4618      	mov	r0, r3
 8002754:	f008 ffe2 	bl	800b71c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002758:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800275c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800275e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002764:	2302      	movs	r3, #2
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002768:	2310      	movs	r3, #16
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800276c:	463b      	mov	r3, r7
 800276e:	4618      	mov	r0, r3
 8002770:	f003 fe10 	bl	8006394 <HAL_RCCEx_PeriphCLKConfig>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800277a:	f000 f8b3 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800277e:	bf00      	nop
 8002780:	3730      	adds	r7, #48	; 0x30
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
void MX_IPCC_Init(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <MX_IPCC_Init+0x20>)
 800278e:	4a07      	ldr	r2, [pc, #28]	; (80027ac <MX_IPCC_Init+0x24>)
 8002790:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002792:	4805      	ldr	r0, [pc, #20]	; (80027a8 <MX_IPCC_Init+0x20>)
 8002794:	f002 fb18 	bl	8004dc8 <HAL_IPCC_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800279e:	f000 f8a1 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000450 	.word	0x20000450
 80027ac:	58000c00 	.word	0x58000c00

080027b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80027b4:	4b14      	ldr	r3, [pc, #80]	; (8002808 <MX_RTC_Init+0x58>)
 80027b6:	4a15      	ldr	r2, [pc, #84]	; (800280c <MX_RTC_Init+0x5c>)
 80027b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80027ba:	4b13      	ldr	r3, [pc, #76]	; (8002808 <MX_RTC_Init+0x58>)
 80027bc:	2200      	movs	r2, #0
 80027be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <MX_RTC_Init+0x58>)
 80027c2:	220f      	movs	r2, #15
 80027c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80027c6:	4b10      	ldr	r3, [pc, #64]	; (8002808 <MX_RTC_Init+0x58>)
 80027c8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80027cc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <MX_RTC_Init+0x58>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <MX_RTC_Init+0x58>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80027da:	4b0b      	ldr	r3, [pc, #44]	; (8002808 <MX_RTC_Init+0x58>)
 80027dc:	2200      	movs	r2, #0
 80027de:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80027e0:	4809      	ldr	r0, [pc, #36]	; (8002808 <MX_RTC_Init+0x58>)
 80027e2:	f003 fecd 	bl	8006580 <HAL_RTC_Init>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 80027ec:	f000 f87a 	bl	80028e4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80027f0:	2200      	movs	r2, #0
 80027f2:	2100      	movs	r1, #0
 80027f4:	4804      	ldr	r0, [pc, #16]	; (8002808 <MX_RTC_Init+0x58>)
 80027f6:	f003 ffc3 	bl	8006780 <HAL_RTCEx_SetWakeUpTimer_IT>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8002800:	f000 f870 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}
 8002808:	2000048c 	.word	0x2000048c
 800280c:	40002800 	.word	0x40002800

08002810 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002814:	4b23      	ldr	r3, [pc, #140]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 8002816:	4a24      	ldr	r2, [pc, #144]	; (80028a8 <MX_USART1_UART_Init+0x98>)
 8002818:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800281a:	4b22      	ldr	r3, [pc, #136]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 800281c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002820:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002822:	4b20      	ldr	r3, [pc, #128]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002828:	4b1e      	ldr	r3, [pc, #120]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 800282a:	2200      	movs	r2, #0
 800282c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800282e:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 8002830:	2200      	movs	r2, #0
 8002832:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002834:	4b1b      	ldr	r3, [pc, #108]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 8002836:	220c      	movs	r2, #12
 8002838:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800283a:	4b1a      	ldr	r3, [pc, #104]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 800283c:	2200      	movs	r2, #0
 800283e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002840:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 8002842:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002846:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002848:	4b16      	ldr	r3, [pc, #88]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 800284a:	2200      	movs	r2, #0
 800284c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 8002850:	2200      	movs	r2, #0
 8002852:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002854:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 8002856:	2200      	movs	r2, #0
 8002858:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800285a:	4812      	ldr	r0, [pc, #72]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 800285c:	f004 f8a2 	bl	80069a4 <HAL_UART_Init>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002866:	f000 f83d 	bl	80028e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800286a:	2100      	movs	r1, #0
 800286c:	480d      	ldr	r0, [pc, #52]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 800286e:	f006 f8ee 	bl	8008a4e <HAL_UARTEx_SetTxFifoThreshold>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002878:	f000 f834 	bl	80028e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800287c:	2100      	movs	r1, #0
 800287e:	4809      	ldr	r0, [pc, #36]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 8002880:	f006 f923 	bl	8008aca <HAL_UARTEx_SetRxFifoThreshold>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800288a:	f000 f82b 	bl	80028e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800288e:	4805      	ldr	r0, [pc, #20]	; (80028a4 <MX_USART1_UART_Init+0x94>)
 8002890:	f006 f8a4 	bl	80089dc <HAL_UARTEx_DisableFifoMode>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800289a:	f000 f823 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	200004b0 	.word	0x200004b0
 80028a8:	40013800 	.word	0x40013800

080028ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80028b0:	2004      	movs	r0, #4
 80028b2:	f7ff feb1 	bl	8002618 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028b6:	2001      	movs	r0, #1
 80028b8:	f7ff feae 	bl	8002618 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 80028bc:	2200      	movs	r2, #0
 80028be:	210f      	movs	r1, #15
 80028c0:	200e      	movs	r0, #14
 80028c2:	f001 fd12 	bl	80042ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80028c6:	200e      	movs	r0, #14
 80028c8:	f001 fd29 	bl	800431e <HAL_NVIC_EnableIRQ>

}
 80028cc:	bf00      	nop
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028d4:	2004      	movs	r0, #4
 80028d6:	f7ff feb8 	bl	800264a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028da:	2001      	movs	r0, #1
 80028dc:	f7ff feb5 	bl	800264a <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028e0:	bf00      	nop
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002902:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002906:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800291e:	b480      	push	{r7}
 8002920:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800292e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002932:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002936:	bf00      	nop
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <LL_AHB2_GRP1_EnableClock>:
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800294c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800294e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4313      	orrs	r3, r2
 8002956:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4013      	ands	r3, r2
 8002962:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002964:	68fb      	ldr	r3, [r7, #12]
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <LL_AHB3_GRP1_EnableClock>:
{
 8002972:	b480      	push	{r7}
 8002974:	b085      	sub	sp, #20
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800297a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	4313      	orrs	r3, r2
 8002988:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800298a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4013      	ands	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002996:	68fb      	ldr	r3, [r7, #12]
}
 8002998:	bf00      	nop
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <LL_APB1_GRP1_EnableClock>:
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80029bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4013      	ands	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029c8:	68fb      	ldr	r3, [r7, #12]
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_APB2_GRP1_EnableClock>:
{
 80029d6:	b480      	push	{r7}
 80029d8:	b085      	sub	sp, #20
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80029de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80029ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4013      	ands	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029fa:	68fb      	ldr	r3, [r7, #12]
}
 80029fc:	bf00      	nop
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002a0c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002a10:	f7ff ffaf 	bl	8002972 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002a14:	2200      	movs	r2, #0
 8002a16:	2100      	movs	r1, #0
 8002a18:	202e      	movs	r0, #46	; 0x2e
 8002a1a:	f001 fc66 	bl	80042ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002a1e:	202e      	movs	r0, #46	; 0x2e
 8002a20:	f001 fc7d 	bl	800431e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a0d      	ldr	r2, [pc, #52]	; (8002a6c <HAL_IPCC_MspInit+0x44>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d113      	bne.n	8002a62 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002a3a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002a3e:	f7ff ff98 	bl	8002972 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002a42:	2200      	movs	r2, #0
 8002a44:	2100      	movs	r1, #0
 8002a46:	202c      	movs	r0, #44	; 0x2c
 8002a48:	f001 fc4f 	bl	80042ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002a4c:	202c      	movs	r0, #44	; 0x2c
 8002a4e:	f001 fc66 	bl	800431e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2100      	movs	r1, #0
 8002a56:	202d      	movs	r0, #45	; 0x2d
 8002a58:	f001 fc47 	bl	80042ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002a5c:	202d      	movs	r0, #45	; 0x2d
 8002a5e:	f001 fc5e 	bl	800431e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002a62:	bf00      	nop
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	58000c00 	.word	0x58000c00

08002a70 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08e      	sub	sp, #56	; 0x38
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a78:	f107 0308 	add.w	r3, r7, #8
 8002a7c:	2230      	movs	r2, #48	; 0x30
 8002a7e:	2100      	movs	r1, #0
 8002a80:	4618      	mov	r0, r3
 8002a82:	f008 fe4b 	bl	800b71c <memset>
  if(hrtc->Instance==RTC)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a18      	ldr	r2, [pc, #96]	; (8002aec <HAL_RTC_MspInit+0x7c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d128      	bne.n	8002ae2 <HAL_RTC_MspInit+0x72>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002a90:	f002 fa20 	bl	8004ed4 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8002a94:	f002 fa1e 	bl	8004ed4 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8002a98:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002a9c:	f7ff ff29 	bl	80028f2 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002aa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002aa4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aac:	f107 0308 	add.w	r3, r7, #8
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f003 fc6f 	bl	8006394 <HAL_RCCEx_PeriphCLKConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8002abc:	f7ff ff12 	bl	80028e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002ac0:	f7ff ff2d 	bl	800291e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002ac4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002ac8:	f7ff ff6c 	bl	80029a4 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002acc:	2200      	movs	r2, #0
 8002ace:	2100      	movs	r1, #0
 8002ad0:	2003      	movs	r0, #3
 8002ad2:	f001 fc0a 	bl	80042ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002ad6:	2003      	movs	r0, #3
 8002ad8:	f001 fc21 	bl	800431e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f003 ff0b 	bl	80068f8 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ae2:	bf00      	nop
 8002ae4:	3738      	adds	r7, #56	; 0x38
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40002800 	.word	0x40002800

08002af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b094      	sub	sp, #80	; 0x50
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
 8002b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b08:	f107 030c 	add.w	r3, r7, #12
 8002b0c:	2230      	movs	r2, #48	; 0x30
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f008 fe03 	bl	800b71c <memset>
  if(huart->Instance==USART1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2f      	ldr	r2, [pc, #188]	; (8002bd8 <HAL_UART_MspInit+0xe8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d157      	bne.n	8002bd0 <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b20:	2301      	movs	r3, #1
 8002b22:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b28:	f107 030c 	add.w	r3, r7, #12
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f003 fc31 	bl	8006394 <HAL_RCCEx_PeriphCLKConfig>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b38:	f7ff fed4 	bl	80028e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b40:	f7ff ff49 	bl	80029d6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b44:	2001      	movs	r0, #1
 8002b46:	f7ff fefb 	bl	8002940 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b50:	2302      	movs	r3, #2
 8002b52:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b54:	2301      	movs	r3, #1
 8002b56:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b5c:	2307      	movs	r3, #7
 8002b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b60:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b64:	4619      	mov	r1, r3
 8002b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b6a:	f001 ff71 	bl	8004a50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <HAL_UART_MspInit+0xec>)
 8002b70:	4a1b      	ldr	r2, [pc, #108]	; (8002be0 <HAL_UART_MspInit+0xf0>)
 8002b72:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_UART_MspInit+0xec>)
 8002b76:	220f      	movs	r2, #15
 8002b78:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b7a:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <HAL_UART_MspInit+0xec>)
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b80:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <HAL_UART_MspInit+0xec>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b86:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <HAL_UART_MspInit+0xec>)
 8002b88:	2280      	movs	r2, #128	; 0x80
 8002b8a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <HAL_UART_MspInit+0xec>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b92:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_UART_MspInit+0xec>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002b98:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_UART_MspInit+0xec>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <HAL_UART_MspInit+0xec>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002ba4:	480d      	ldr	r0, [pc, #52]	; (8002bdc <HAL_UART_MspInit+0xec>)
 8002ba6:	f001 fbff 	bl	80043a8 <HAL_DMA_Init>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002bb0:	f7ff fe98 	bl	80028e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a09      	ldr	r2, [pc, #36]	; (8002bdc <HAL_UART_MspInit+0xec>)
 8002bb8:	67da      	str	r2, [r3, #124]	; 0x7c
 8002bba:	4a08      	ldr	r2, [pc, #32]	; (8002bdc <HAL_UART_MspInit+0xec>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	2024      	movs	r0, #36	; 0x24
 8002bc6:	f001 fb90 	bl	80042ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bca:	2024      	movs	r0, #36	; 0x24
 8002bcc:	f001 fba7 	bl	800431e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bd0:	bf00      	nop
 8002bd2:	3750      	adds	r7, #80	; 0x50
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	40013800 	.word	0x40013800
 8002bdc:	20000544 	.word	0x20000544
 8002be0:	40020044 	.word	0x40020044

08002be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002be8:	e7fe      	b.n	8002be8 <NMI_Handler+0x4>

08002bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bee:	e7fe      	b.n	8002bee <HardFault_Handler+0x4>

08002bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bf4:	e7fe      	b.n	8002bf4 <MemManage_Handler+0x4>

08002bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bfa:	e7fe      	b.n	8002bfa <BusFault_Handler+0x4>

08002bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c00:	e7fe      	b.n	8002c00 <UsageFault_Handler+0x4>

08002c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c30:	f001 f9e8 	bl	8004004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c34:	bf00      	nop
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002c3c:	f7ff f8fc 	bl	8001e38 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002c48:	4802      	ldr	r0, [pc, #8]	; (8002c54 <DMA1_Channel4_IRQHandler+0x10>)
 8002c4a:	f001 fd72 	bl	8004732 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000544 	.word	0x20000544

08002c58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c5c:	4802      	ldr	r0, [pc, #8]	; (8002c68 <USART1_IRQHandler+0x10>)
 8002c5e:	f003 ffbd 	bl	8006bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200004b0 	.word	0x200004b0

08002c6c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002c70:	f000 fe54 	bl	800391c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002c74:	bf00      	nop
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002c7c:	f000 fe86 	bl	800398c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002c80:	bf00      	nop
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002c88:	f002 f87a 	bl	8004d80 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8002c94:	2001      	movs	r0, #1
 8002c96:	f002 f85b 	bl	8004d50 <HAL_GPIO_EXTI_IRQHandler>
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8002ca2:	2010      	movs	r0, #16
 8002ca4:	f002 f854 	bl	8004d50 <HAL_GPIO_EXTI_IRQHandler>
}
 8002ca8:	bf00      	nop
 8002caa:	bd80      	pop	{r7, pc}

08002cac <EXTI9_5_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8002cb0:	2040      	movs	r0, #64	; 0x40
 8002cb2:	f002 f84d 	bl	8004d50 <HAL_GPIO_EXTI_IRQHandler>
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0
  return 1;
 8002cbe:	2301      	movs	r3, #1
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <_kill>:

int _kill(int pid, int sig)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cd4:	f008 fcea 	bl	800b6ac <__errno>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2216      	movs	r2, #22
 8002cdc:	601a      	str	r2, [r3, #0]
  return -1;
 8002cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}

08002cea <_exit>:

void _exit (int status)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cf2:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff ffe7 	bl	8002cca <_kill>
  while (1) {}    /* Make sure we hang here */
 8002cfc:	e7fe      	b.n	8002cfc <_exit+0x12>

08002cfe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b086      	sub	sp, #24
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	e00a      	b.n	8002d26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d10:	f3af 8000 	nop.w
 8002d14:	4601      	mov	r1, r0
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	60ba      	str	r2, [r7, #8]
 8002d1c:	b2ca      	uxtb	r2, r1
 8002d1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	3301      	adds	r3, #1
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	dbf0      	blt.n	8002d10 <_read+0x12>
  }

  return len;
 8002d2e:	687b      	ldr	r3, [r7, #4]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d60:	605a      	str	r2, [r3, #4]
  return 0;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <_isatty>:

int _isatty(int file)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002d78:	2301      	movs	r3, #1
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b085      	sub	sp, #20
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002da8:	4a14      	ldr	r2, [pc, #80]	; (8002dfc <_sbrk+0x5c>)
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <_sbrk+0x60>)
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002db4:	4b13      	ldr	r3, [pc, #76]	; (8002e04 <_sbrk+0x64>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dbc:	4b11      	ldr	r3, [pc, #68]	; (8002e04 <_sbrk+0x64>)
 8002dbe:	4a12      	ldr	r2, [pc, #72]	; (8002e08 <_sbrk+0x68>)
 8002dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dc2:	4b10      	ldr	r3, [pc, #64]	; (8002e04 <_sbrk+0x64>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d207      	bcs.n	8002de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dd0:	f008 fc6c 	bl	800b6ac <__errno>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	220c      	movs	r2, #12
 8002dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dda:	f04f 33ff 	mov.w	r3, #4294967295
 8002dde:	e009      	b.n	8002df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <_sbrk+0x64>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002de6:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <_sbrk+0x64>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4413      	add	r3, r2
 8002dee:	4a05      	ldr	r2, [pc, #20]	; (8002e04 <_sbrk+0x64>)
 8002df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002df2:	68fb      	ldr	r3, [r7, #12]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20003000 	.word	0x20003000
 8002e00:	00001000 	.word	0x00001000
 8002e04:	200005a4 	.word	0x200005a4
 8002e08:	200017b8 	.word	0x200017b8

08002e0c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <LL_FLASH_GetUDN+0x14>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	1fff7580 	.word	0x1fff7580

08002e24 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <LL_FLASH_GetDeviceID+0x14>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	b2db      	uxtb	r3, r3
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	1fff7584 	.word	0x1fff7584

08002e3c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <LL_FLASH_GetSTCompanyID+0x14>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	0a1b      	lsrs	r3, r3, #8
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	1fff7584 	.word	0x1fff7584

08002e54 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8002e54:	b5b0      	push	{r4, r5, r7, lr}
 8002e56:	b090      	sub	sp, #64	; 0x40
 8002e58:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002e5a:	2392      	movs	r3, #146	; 0x92
 8002e5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8002e60:	4b2c      	ldr	r3, [pc, #176]	; (8002f14 <APP_BLE_Init+0xc0>)
 8002e62:	1d3c      	adds	r4, r7, #4
 8002e64:	461d      	mov	r5, r3
 8002e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e76:	c403      	stmia	r4!, {r0, r1}
 8002e78:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8002e7a:	f000 f9ef 	bl	800325c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002e7e:	2101      	movs	r1, #1
 8002e80:	2002      	movs	r0, #2
 8002e82:	f008 f9a5 	bl	800b1d0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8002e86:	4a24      	ldr	r2, [pc, #144]	; (8002f18 <APP_BLE_Init+0xc4>)
 8002e88:	2100      	movs	r1, #0
 8002e8a:	2010      	movs	r0, #16
 8002e8c:	f008 facc 	bl	800b428 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8002e90:	1d3b      	adds	r3, r7, #4
 8002e92:	4618      	mov	r0, r3
 8002e94:	f006 ff32 	bl	8009cfc <SHCI_C2_BLE_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8002e9e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <APP_BLE_Init+0x62>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8002ea6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002eaa:	4619      	mov	r1, r3
 8002eac:	481b      	ldr	r0, [pc, #108]	; (8002f1c <APP_BLE_Init+0xc8>)
 8002eae:	f009 f8a7 	bl	800c000 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8002eb2:	f7ff fd17 	bl	80028e4 <Error_Handler>


  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8002eb6:	f000 f9e7 	bl	8003288 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8002eba:	f007 fe87 	bl	800abcc <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 8002ebe:	4a18      	ldr	r2, [pc, #96]	; (8002f20 <APP_BLE_Init+0xcc>)
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f008 fab0 	bl	800b428 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
 8002ec8:	4a16      	ldr	r2, [pc, #88]	; (8002f24 <APP_BLE_Init+0xd0>)
 8002eca:	2100      	movs	r1, #0
 8002ecc:	2002      	movs	r0, #2
 8002ece:	f008 faab 	bl	800b428 <UTIL_SEQ_RegTask>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <APP_BLE_Init+0xd4>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /*Radio mask Activity*/
#if (OOB_DEMO != 0)
  ret = aci_hal_set_radio_activity_mask(0x0020);
 8002eda:	2020      	movs	r0, #32
 8002edc:	f006 fbfc 	bl	80096d8 <aci_hal_set_radio_activity_mask>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 8002ee6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d005      	beq.n	8002efa <APP_BLE_Init+0xa6>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8002eee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	480d      	ldr	r0, [pc, #52]	; (8002f2c <APP_BLE_Init+0xd8>)
 8002ef6:	f009 f883 	bl	800c000 <iprintf>

#endif


#if (OOB_DEMO != 0)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8002efa:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <APP_BLE_Init+0xdc>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	490d      	ldr	r1, [pc, #52]	; (8002f34 <APP_BLE_Init+0xe0>)
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7ff f93b 	bl	800217c <HW_TS_Create>
   * Start scanning
   */
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
#endif
  /* USER CODE BEGIN APP_BLE_Init_2 */
  APP_DBG_MSG("  Success   : BLE INITIALISE COMPLETED \r\n\r");
 8002f06:	480c      	ldr	r0, [pc, #48]	; (8002f38 <APP_BLE_Init+0xe4>)
 8002f08:	f009 f87a 	bl	800c000 <iprintf>
  /* USER CODE END APP_BLE_Init_2 */
  return;
 8002f0c:	bf00      	nop
}
 8002f0e:	3740      	adds	r7, #64	; 0x40
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bdb0      	pop	{r4, r5, r7, pc}
 8002f14:	0800e9c0 	.word	0x0800e9c0
 8002f18:	0800996d 	.word	0x0800996d
 8002f1c:	0800e918 	.word	0x0800e918
 8002f20:	080034a9 	.word	0x080034a9
 8002f24:	08003511 	.word	0x08003511
 8002f28:	200005b8 	.word	0x200005b8
 8002f2c:	0800e950 	.word	0x0800e950
 8002f30:	08003595 	.word	0x08003595
 8002f34:	20000639 	.word	0x20000639
 8002f38:	0800e994 	.word	0x0800e994

08002f3c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *pckt) {
 8002f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f40:	b0ae      	sub	sp, #184	; 0xb8
 8002f42:	af0e      	add	r7, sp, #56	; 0x38
 8002f44:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	677b      	str	r3, [r7, #116]	; 0x74
  uint8_t event_type;

  switch (event_pckt->evt) {
 8002f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	2b3e      	cmp	r3, #62	; 0x3e
 8002f52:	f040 8143 	bne.w	80031dc <SVCCTL_App_Notification+0x2a0>
    case HCI_LE_META_EVT_CODE: {
        meta_evt = (evt_le_meta_event*) event_pckt->data;
 8002f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f58:	3302      	adds	r3, #2
 8002f5a:	673b      	str	r3, [r7, #112]	; 0x70

        switch (meta_evt->subevent) {
 8002f5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	f040 8137 	bne.w	80031d4 <SVCCTL_App_Notification+0x298>
          case HCI_LE_ADVERTISING_REPORT_SUBEVT_CODE: {
              uint8_t *adv_report_data;

              le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 8002f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f68:	3301      	adds	r3, #1
 8002f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
              event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 8002f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6e:	785b      	ldrb	r3, [r3, #1]
 8002f70:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
              adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 8002f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f76:	3309      	adds	r3, #9
 8002f78:	3301      	adds	r3, #1
 8002f7a:	667b      	str	r3, [r7, #100]	; 0x64

              /* NON CONNECTABLE INDICATOR BEACON */
              if (event_type == ADV_NONCONN_IND) {
 8002f7c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	f040 8129 	bne.w	80031d8 <SVCCTL_App_Notification+0x29c>
				  /* ISOLATE DEVICE ID */
				  char DEVICE_id[3] = {};
 8002f86:	4b99      	ldr	r3, [pc, #612]	; (80031ec <SVCCTL_App_Notification+0x2b0>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8002f8e:	f107 0345 	add.w	r3, r7, #69	; 0x45
 8002f92:	2200      	movs	r2, #0
 8002f94:	801a      	strh	r2, [r3, #0]
				  char DEVICE_ID[12] = {};
 8002f96:	2300      	movs	r3, #0
 8002f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	605a      	str	r2, [r3, #4]
				  for(int i=5; i>=0; i--) {
 8002fa4:	2305      	movs	r3, #5
 8002fa6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fa8:	e019      	b.n	8002fde <SVCCTL_App_Notification+0xa2>
					  uint8_t id = le_advertising_event->Advertising_Report[0].Address[i];
 8002faa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fae:	4413      	add	r3, r2
 8002fb0:	3303      	adds	r3, #3
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
					  sprintf(DEVICE_id, "%02x", id);
 8002fb8:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8002fbc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fc0:	498b      	ldr	r1, [pc, #556]	; (80031f0 <SVCCTL_App_Notification+0x2b4>)
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f009 f8aa 	bl	800c11c <siprintf>
					  strcat(DEVICE_ID, DEVICE_id);
 8002fc8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002fcc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f009 f8c2 	bl	800c15c <strcat>
				  for(int i=5; i>=0; i--) {
 8002fd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002fde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	dae2      	bge.n	8002faa <SVCCTL_App_Notification+0x6e>
				  }

				  /* COMPARE DEVICE ID */
				  if((strcmp(DEVICE_ID,ID_1) == isMATCHED) || (strcmp(DEVICE_ID,ID_2) == isMATCHED)) {
 8002fe4:	4b83      	ldr	r3, [pc, #524]	; (80031f4 <SVCCTL_App_Notification+0x2b8>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fd f8c6 	bl	8000180 <strcmp>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00b      	beq.n	8003012 <SVCCTL_App_Notification+0xd6>
 8002ffa:	4b7f      	ldr	r3, [pc, #508]	; (80031f8 <SVCCTL_App_Notification+0x2bc>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd f8bb 	bl	8000180 <strcmp>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	f040 80e3 	bne.w	80031d8 <SVCCTL_App_Notification+0x29c>

					  /* GET UUID */
					  char DEVICE_uuid[3] = {};
 8003012:	4b76      	ldr	r3, [pc, #472]	; (80031ec <SVCCTL_App_Notification+0x2b0>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800301a:	f107 0335 	add.w	r3, r7, #53	; 0x35
 800301e:	2200      	movs	r2, #0
 8003020:	801a      	strh	r2, [r3, #0]
					  char DEVICE_UUID[32] = {};
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	f107 0310 	add.w	r3, r7, #16
 800302a:	2200      	movs	r2, #0
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	605a      	str	r2, [r3, #4]
 8003030:	609a      	str	r2, [r3, #8]
 8003032:	60da      	str	r2, [r3, #12]
 8003034:	611a      	str	r2, [r3, #16]
 8003036:	615a      	str	r2, [r3, #20]
 8003038:	619a      	str	r2, [r3, #24]
					  for(int i=0; i<16; i++) {
 800303a:	2300      	movs	r3, #0
 800303c:	67bb      	str	r3, [r7, #120]	; 0x78
 800303e:	e01a      	b.n	8003076 <SVCCTL_App_Notification+0x13a>
						  uint8_t uuid = adv_report_data[6+i];
 8003040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003042:	3306      	adds	r3, #6
 8003044:	461a      	mov	r2, r3
 8003046:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003048:	4413      	add	r3, r2
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
						  sprintf(DEVICE_uuid, "%02x", uuid);
 8003050:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8003054:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003058:	4965      	ldr	r1, [pc, #404]	; (80031f0 <SVCCTL_App_Notification+0x2b4>)
 800305a:	4618      	mov	r0, r3
 800305c:	f009 f85e 	bl	800c11c <siprintf>
						  strcat(DEVICE_UUID, DEVICE_uuid);
 8003060:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003064:	f107 030c 	add.w	r3, r7, #12
 8003068:	4611      	mov	r1, r2
 800306a:	4618      	mov	r0, r3
 800306c:	f009 f876 	bl	800c15c <strcat>
					  for(int i=0; i<16; i++) {
 8003070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003072:	3301      	adds	r3, #1
 8003074:	67bb      	str	r3, [r7, #120]	; 0x78
 8003076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003078:	2b0f      	cmp	r3, #15
 800307a:	dde1      	ble.n	8003040 <SVCCTL_App_Notification+0x104>
					  }

					  /* COMPARE UUID */
					  if(strcmp(DEVICE_UUID, UUID) == isMATCHED) {
 800307c:	4b5f      	ldr	r3, [pc, #380]	; (80031fc <SVCCTL_App_Notification+0x2c0>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	f107 030c 	add.w	r3, r7, #12
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd f87a 	bl	8000180 <strcmp>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 80a2 	bne.w	80031d8 <SVCCTL_App_Notification+0x29c>
						  /* READ TEMPERATURE VALUE */
						  uint16_t sensor_val1 = (adv_report_data[4] << 8) | (adv_report_data[5]);
 8003094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003096:	3304      	adds	r3, #4
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	b21a      	sxth	r2, r3
 800309e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030a0:	3305      	adds	r3, #5
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	b21b      	sxth	r3, r3
 80030a6:	4313      	orrs	r3, r2
 80030a8:	b21b      	sxth	r3, r3
 80030aa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
						  uint16_t sensor_val2 = (adv_report_data[22] << 8) | (adv_report_data[23]);
 80030ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030b0:	3316      	adds	r3, #22
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	b21a      	sxth	r2, r3
 80030b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ba:	3317      	adds	r3, #23
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	b21b      	sxth	r3, r3
 80030c0:	4313      	orrs	r3, r2
 80030c2:	b21b      	sxth	r3, r3
 80030c4:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
						  uint16_t sensor_val3 = (adv_report_data[24] << 8) | (adv_report_data[25]);
 80030c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ca:	3318      	adds	r3, #24
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	b21a      	sxth	r2, r3
 80030d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030d4:	3319      	adds	r3, #25
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	b21b      	sxth	r3, r3
 80030da:	4313      	orrs	r3, r2
 80030dc:	b21b      	sxth	r3, r3
 80030de:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
						  uint16_t sensor_val4 = (adv_report_data[26] << 8) | (adv_report_data[27]);
 80030e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030e4:	331a      	adds	r3, #26
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	b21a      	sxth	r2, r3
 80030ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ee:	331b      	adds	r3, #27
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	b21b      	sxth	r3, r3
 80030f4:	4313      	orrs	r3, r2
 80030f6:	b21b      	sxth	r3, r3
 80030f8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

						  float temperature_1 = (float)sensor_val1 * 0.0078125;
 80030fc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003100:	ee07 3a90 	vmov	s15, r3
 8003104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003108:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8003200 <SVCCTL_App_Notification+0x2c4>
 800310c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003110:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
						  float temperature_2 = (float)sensor_val2 * 0.0078125;
 8003114:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8003118:	ee07 3a90 	vmov	s15, r3
 800311c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003120:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003200 <SVCCTL_App_Notification+0x2c4>
 8003124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003128:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
						  float temperature_3 = (float)sensor_val3 * 0.0078125;
 800312c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003130:	ee07 3a90 	vmov	s15, r3
 8003134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003138:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8003200 <SVCCTL_App_Notification+0x2c4>
 800313c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003140:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
						  float temperature_4 = (float)sensor_val4 * 0.0078125;
 8003144:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003148:	ee07 3a90 	vmov	s15, r3
 800314c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003150:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003200 <SVCCTL_App_Notification+0x2c4>
 8003154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003158:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

						  /* READ RSSI */
						  int8_t RSSI = (int8_t)*(uint8_t*) (adv_report_data + le_advertising_event->Advertising_Report[0].Length_Data);
 800315c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800315e:	7a5b      	ldrb	r3, [r3, #9]
 8003160:	461a      	mov	r2, r3
 8003162:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003164:	4413      	add	r3, r2
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

						  char c[6] = "\u00B0";		// Degree C
 800316c:	f24b 03c2 	movw	r3, #45250	; 0xb0c2
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003172:	2300      	movs	r3, #0
 8003174:	863b      	strh	r3, [r7, #48]	; 0x30
						  printf("SENSOR 1: %.2f%sC  SENSOR 2: %.2f%sC  SENSOR 3: %.2f%sC  SENSOR 4: %.2f%sC  RSSI: %d\n\r", temperature_1, c, temperature_2, c, temperature_3, c, temperature_4, c, RSSI);
 8003176:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003178:	f7fd f9ce 	bl	8000518 <__aeabi_f2d>
 800317c:	4682      	mov	sl, r0
 800317e:	468b      	mov	fp, r1
 8003180:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003182:	f7fd f9c9 	bl	8000518 <__aeabi_f2d>
 8003186:	4604      	mov	r4, r0
 8003188:	460d      	mov	r5, r1
 800318a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800318c:	f7fd f9c4 	bl	8000518 <__aeabi_f2d>
 8003190:	4680      	mov	r8, r0
 8003192:	4689      	mov	r9, r1
 8003194:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003196:	f7fd f9bf 	bl	8000518 <__aeabi_f2d>
 800319a:	4602      	mov	r2, r0
 800319c:	460b      	mov	r3, r1
 800319e:	f997 104b 	ldrsb.w	r1, [r7, #75]	; 0x4b
 80031a2:	910d      	str	r1, [sp, #52]	; 0x34
 80031a4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80031a8:	910c      	str	r1, [sp, #48]	; 0x30
 80031aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80031ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031b2:	9308      	str	r3, [sp, #32]
 80031b4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80031b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031bc:	9304      	str	r3, [sp, #16]
 80031be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80031c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	4652      	mov	r2, sl
 80031ca:	465b      	mov	r3, fp
 80031cc:	480d      	ldr	r0, [pc, #52]	; (8003204 <SVCCTL_App_Notification+0x2c8>)
 80031ce:	f008 ff17 	bl	800c000 <iprintf>

					} /* end if DEVICE_UUID */
				  } /* end if DEVICE_ID */
              } /* end if ADV_IND */
            }
            break;	/* HCI_LE_ADVERTISING_REPORT_SUBEVT_CODE */
 80031d2:	e001      	b.n	80031d8 <SVCCTL_App_Notification+0x29c>
          default:
            break;
 80031d4:	bf00      	nop
 80031d6:	e002      	b.n	80031de <SVCCTL_App_Notification+0x2a2>
            break;	/* HCI_LE_ADVERTISING_REPORT_SUBEVT_CODE */
 80031d8:	bf00      	nop
        }
      }
      break; /* HCI_LE_META_EVT_CODE */
 80031da:	e000      	b.n	80031de <SVCCTL_App_Notification+0x2a2>
      default:
      break;
 80031dc:	bf00      	nop
  } /* event_pckt */
  return (SVCCTL_UserEvtFlowEnable);
 80031de:	2301      	movs	r3, #1
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3780      	adds	r7, #128	; 0x80
 80031e4:	46bd      	mov	sp, r7
 80031e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ea:	bf00      	nop
 80031ec:	0800ea5c 	.word	0x0800ea5c
 80031f0:	0800e9fc 	.word	0x0800e9fc
 80031f4:	2000000c 	.word	0x2000000c
 80031f8:	20000010 	.word	0x20000010
 80031fc:	20000008 	.word	0x20000008
 8003200:	3c000000 	.word	0x3c000000
 8003204:	0800ea04 	.word	0x0800ea04

08003208 <APP_BLE_Key_Button1_Action>:
  }
  return APP_BLE_IDLE;
}
/* USER CODE BEGIN FD */
void APP_BLE_Key_Button1_Action(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
#if OOB_DEMO == 0 
  P2PC_APP_SW1_Button_Action();
#else 
  if(P2P_Client_APP_Get_State () != APP_BLE_CONNECTED_CLIENT)
 800320c:	f000 fa70 	bl	80036f0 <P2P_Client_APP_Get_State>
 8003210:	4603      	mov	r3, r0
 8003212:	2b06      	cmp	r3, #6
 8003214:	d004      	beq.n	8003220 <APP_BLE_Key_Button1_Action+0x18>
  {
    UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);		// Start BLE SCAN
 8003216:	2100      	movs	r1, #0
 8003218:	2001      	movs	r0, #1
 800321a:	f008 f927 	bl	800b46c <UTIL_SEQ_SetTask>
  else 
  {
    P2PC_APP_SW1_Button_Action();
  }   
#endif 
}
 800321e:	e001      	b.n	8003224 <APP_BLE_Key_Button1_Action+0x1c>
    P2PC_APP_SW1_Button_Action();
 8003220:	f000 fa5d 	bl	80036de <P2PC_APP_SW1_Button_Action>
}
 8003224:	bf00      	nop
 8003226:	bd80      	pop	{r7, pc}

08003228 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
	BSP_LED_On(LED_RED);
 800323c:	2002      	movs	r0, #2
 800323e:	f000 fd3b 	bl	8003cb8 <BSP_LED_On>
	BSP_LED_Off(LED_BLUE);
 8003242:	2000      	movs	r0, #0
 8003244:	f000 fd52 	bl	8003cec <BSP_LED_Off>
	APP_DBG_MSG(" \r\n\r** STOP GENERAL DISCOVERY (SCAN) **  \r\n\r");
 8003248:	4803      	ldr	r0, [pc, #12]	; (8003258 <APP_BLE_Key_Button3_Action+0x20>)
 800324a:	f008 fed9 	bl	800c000 <iprintf>
	aci_gap_terminate_gap_proc(0x80);									// STOP BLE SCAN
 800324e:	2080      	movs	r0, #128	; 0x80
 8003250:	f005 ff8c 	bl	800916c <aci_gap_terminate_gap_proc>
}
 8003254:	bf00      	nop
 8003256:	bd80      	pop	{r7, pc}
 8003258:	0800ea60 	.word	0x0800ea60

0800325c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8003262:	4b06      	ldr	r3, [pc, #24]	; (800327c <Ble_Tl_Init+0x20>)
 8003264:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <Ble_Tl_Init+0x24>)
 8003268:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800326a:	463b      	mov	r3, r7
 800326c:	4619      	mov	r1, r3
 800326e:	4805      	ldr	r0, [pc, #20]	; (8003284 <Ble_Tl_Init+0x28>)
 8003270:	f006 fb60 	bl	8009934 <hci_init>

  return;
 8003274:	bf00      	nop
}
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20030028 	.word	0x20030028
 8003280:	080036a9 	.word	0x080036a9
 8003284:	08003671 	.word	0x08003671

08003288 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8003288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800328a:	b08d      	sub	sp, #52	; 0x34
 800328c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;

  uint16_t a_appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 800328e:	2300      	movs	r3, #0
 8003290:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003292:	2392      	movs	r3, #146	; 0x92
 8003294:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8003296:	f006 fa73 	bl	8009780 <hci_reset>
 800329a:	4603      	mov	r3, r0
 800329c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800329e:	7dfb      	ldrb	r3, [r7, #23]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d004      	beq.n	80032ae <Ble_Hci_Gap_Gatt_Init+0x26>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
 80032a6:	4619      	mov	r1, r3
 80032a8:	4870      	ldr	r0, [pc, #448]	; (800346c <Ble_Hci_Gap_Gatt_Init+0x1e4>)
 80032aa:	f008 fea9 	bl	800c000 <iprintf>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80032ae:	f000 f979 	bl	80035a4 <BleGetBdAddress>
 80032b2:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	2106      	movs	r1, #6
 80032b8:	2000      	movs	r0, #0
 80032ba:	f006 f921 	bl	8009500 <aci_hal_write_config_data>
 80032be:	4603      	mov	r3, r0
 80032c0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d004      	beq.n	80032d2 <Ble_Hci_Gap_Gatt_Init+0x4a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 80032c8:	7dfb      	ldrb	r3, [r7, #23]
 80032ca:	4619      	mov	r1, r3
 80032cc:	4868      	ldr	r0, [pc, #416]	; (8003470 <Ble_Hci_Gap_Gatt_Init+0x1e8>)
 80032ce:	f008 fe97 	bl	800c000 <iprintf>
  }

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80032d2:	4a68      	ldr	r2, [pc, #416]	; (8003474 <Ble_Hci_Gap_Gatt_Init+0x1ec>)
 80032d4:	2110      	movs	r1, #16
 80032d6:	2018      	movs	r0, #24
 80032d8:	f006 f912 	bl	8009500 <aci_hal_write_config_data>
 80032dc:	4603      	mov	r3, r0
 80032de:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80032e0:	7dfb      	ldrb	r3, [r7, #23]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d004      	beq.n	80032f0 <Ble_Hci_Gap_Gatt_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
 80032e8:	4619      	mov	r1, r3
 80032ea:	4863      	ldr	r0, [pc, #396]	; (8003478 <Ble_Hci_Gap_Gatt_Init+0x1f0>)
 80032ec:	f008 fe88 	bl	800c000 <iprintf>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80032f0:	4a62      	ldr	r2, [pc, #392]	; (800347c <Ble_Hci_Gap_Gatt_Init+0x1f4>)
 80032f2:	2110      	movs	r1, #16
 80032f4:	2008      	movs	r0, #8
 80032f6:	f006 f903 	bl	8009500 <aci_hal_write_config_data>
 80032fa:	4603      	mov	r3, r0
 80032fc:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80032fe:	7dfb      	ldrb	r3, [r7, #23]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d004      	beq.n	800330e <Ble_Hci_Gap_Gatt_Init+0x86>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8003304:	7dfb      	ldrb	r3, [r7, #23]
 8003306:	4619      	mov	r1, r3
 8003308:	485d      	ldr	r0, [pc, #372]	; (8003480 <Ble_Hci_Gap_Gatt_Init+0x1f8>)
 800330a:	f008 fe79 	bl	800c000 <iprintf>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800330e:	2118      	movs	r1, #24
 8003310:	2001      	movs	r0, #1
 8003312:	f006 f97a 	bl	800960a <aci_hal_set_tx_power_level>
 8003316:	4603      	mov	r3, r0
 8003318:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800331a:	7dfb      	ldrb	r3, [r7, #23]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d004      	beq.n	800332a <Ble_Hci_Gap_Gatt_Init+0xa2>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8003320:	7dfb      	ldrb	r3, [r7, #23]
 8003322:	4619      	mov	r1, r3
 8003324:	4857      	ldr	r0, [pc, #348]	; (8003484 <Ble_Hci_Gap_Gatt_Init+0x1fc>)
 8003326:	f008 fe6b 	bl	800c000 <iprintf>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800332a:	f006 f81b 	bl	8009364 <aci_gatt_init>
 800332e:	4603      	mov	r3, r0
 8003330:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003332:	7dfb      	ldrb	r3, [r7, #23]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d004      	beq.n	8003342 <Ble_Hci_Gap_Gatt_Init+0xba>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8003338:	7dfb      	ldrb	r3, [r7, #23]
 800333a:	4619      	mov	r1, r3
 800333c:	4852      	ldr	r0, [pc, #328]	; (8003488 <Ble_Hci_Gap_Gatt_Init+0x200>)
 800333e:	f008 fe5f 	bl	800c000 <iprintf>
  }
  /**
   * Initialize GAP interface
   */
  role = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]
#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
#endif /* BLE_CFG_PERIPHERAL == 1 */

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_OBSERVER_ROLE;
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	f043 0308 	orr.w	r3, r3, #8
 800334c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d027      	beq.n	80033a4 <Ble_Hci_Gap_Gatt_Init+0x11c>
  {
    const char *name = "P2PCLI";
 8003354:	4b4d      	ldr	r3, [pc, #308]	; (800348c <Ble_Hci_Gap_Gatt_Init+0x204>)
 8003356:	60bb      	str	r3, [r7, #8]

    ret = aci_gap_init(role,
 8003358:	1dba      	adds	r2, r7, #6
 800335a:	7bf8      	ldrb	r0, [r7, #15]
 800335c:	1cbb      	adds	r3, r7, #2
 800335e:	9301      	str	r3, [sp, #4]
 8003360:	1d3b      	adds	r3, r7, #4
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	4613      	mov	r3, r2
 8003366:	2207      	movs	r2, #7
 8003368:	2100      	movs	r1, #0
 800336a:	f005 fd53 	bl	8008e14 <aci_gap_init>
 800336e:	4603      	mov	r3, r0
 8003370:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8003372:	7dfb      	ldrb	r3, [r7, #23]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d004      	beq.n	8003382 <Ble_Hci_Gap_Gatt_Init+0xfa>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8003378:	7dfb      	ldrb	r3, [r7, #23]
 800337a:	4619      	mov	r1, r3
 800337c:	4844      	ldr	r0, [pc, #272]	; (8003490 <Ble_Hci_Gap_Gatt_Init+0x208>)
 800337e:	f008 fe3f 	bl	800c000 <iprintf>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8003382:	88fc      	ldrh	r4, [r7, #6]
 8003384:	88bd      	ldrh	r5, [r7, #4]
 8003386:	68b8      	ldr	r0, [r7, #8]
 8003388:	f7fc ff04 	bl	8000194 <strlen>
 800338c:	4603      	mov	r3, r0
 800338e:	b2da      	uxtb	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	4613      	mov	r3, r2
 8003396:	2200      	movs	r2, #0
 8003398:	4629      	mov	r1, r5
 800339a:	4620      	mov	r0, r4
 800339c:	f006 f807 	bl	80093ae <aci_gatt_update_char_value>
 80033a0:	4603      	mov	r3, r0
 80033a2:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Fail   : aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80033a4:	88f8      	ldrh	r0, [r7, #6]
 80033a6:	8879      	ldrh	r1, [r7, #2]
 80033a8:	463b      	mov	r3, r7
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	2302      	movs	r3, #2
 80033ae:	2200      	movs	r2, #0
 80033b0:	f005 fffd 	bl	80093ae <aci_gatt_update_char_value>
 80033b4:	4603      	mov	r3, r0
 80033b6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80033b8:	4b36      	ldr	r3, [pc, #216]	; (8003494 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80033be:	4b35      	ldr	r3, [pc, #212]	; (8003494 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f005 fc0e 	bl	8008be4 <aci_gap_set_io_capability>
 80033c8:	4603      	mov	r3, r0
 80033ca:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d004      	beq.n	80033dc <Ble_Hci_Gap_Gatt_Init+0x154>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
 80033d4:	4619      	mov	r1, r3
 80033d6:	4830      	ldr	r0, [pc, #192]	; (8003498 <Ble_Hci_Gap_Gatt_Init+0x210>)
 80033d8:	f008 fe12 	bl	800c000 <iprintf>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80033dc:	4b2d      	ldr	r3, [pc, #180]	; (8003494 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 80033de:	2201      	movs	r2, #1
 80033e0:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80033e2:	4b2c      	ldr	r3, [pc, #176]	; (8003494 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 80033e4:	2208      	movs	r2, #8
 80033e6:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80033e8:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 80033ea:	2210      	movs	r2, #16
 80033ec:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80033ee:	4b29      	ldr	r3, [pc, #164]	; (8003494 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80033f4:	4b27      	ldr	r3, [pc, #156]	; (8003494 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 80033f6:	4a29      	ldr	r2, [pc, #164]	; (800349c <Ble_Hci_Gap_Gatt_Init+0x214>)
 80033f8:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80033fa:	4b26      	ldr	r3, [pc, #152]	; (8003494 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 80033fc:	2201      	movs	r2, #1
 80033fe:	709a      	strb	r2, [r3, #2]

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8003400:	4b24      	ldr	r3, [pc, #144]	; (8003494 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 8003402:	789c      	ldrb	r4, [r3, #2]
 8003404:	4b23      	ldr	r3, [pc, #140]	; (8003494 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 8003406:	785d      	ldrb	r5, [r3, #1]
 8003408:	4b22      	ldr	r3, [pc, #136]	; (8003494 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 800340a:	791b      	ldrb	r3, [r3, #4]
 800340c:	4a21      	ldr	r2, [pc, #132]	; (8003494 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 800340e:	7952      	ldrb	r2, [r2, #5]
 8003410:	4920      	ldr	r1, [pc, #128]	; (8003494 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 8003412:	78c9      	ldrb	r1, [r1, #3]
 8003414:	481f      	ldr	r0, [pc, #124]	; (8003494 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 8003416:	6880      	ldr	r0, [r0, #8]
 8003418:	2600      	movs	r6, #0
 800341a:	9604      	str	r6, [sp, #16]
 800341c:	9003      	str	r0, [sp, #12]
 800341e:	9102      	str	r1, [sp, #8]
 8003420:	9201      	str	r2, [sp, #4]
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	2300      	movs	r3, #0
 8003426:	2201      	movs	r2, #1
 8003428:	4629      	mov	r1, r5
 800342a:	4620      	mov	r0, r4
 800342c:	f005 fc2e 	bl	8008c8c <aci_gap_set_authentication_requirement>
 8003430:	4603      	mov	r3, r0
 8003432:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8003434:	7dfb      	ldrb	r3, [r7, #23]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d004      	beq.n	8003444 <Ble_Hci_Gap_Gatt_Init+0x1bc>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800343a:	7dfb      	ldrb	r3, [r7, #23]
 800343c:	4619      	mov	r1, r3
 800343e:	4818      	ldr	r0, [pc, #96]	; (80034a0 <Ble_Hci_Gap_Gatt_Init+0x218>)
 8003440:	f008 fdde 	bl	800c000 <iprintf>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8003444:	4b13      	ldr	r3, [pc, #76]	; (8003494 <Ble_Hci_Gap_Gatt_Init+0x20c>)
 8003446:	789b      	ldrb	r3, [r3, #2]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00b      	beq.n	8003464 <Ble_Hci_Gap_Gatt_Init+0x1dc>
  {
    ret = aci_gap_configure_whitelist();
 800344c:	f005 fd8f 	bl	8008f6e <aci_gap_configure_filter_accept_list>
 8003450:	4603      	mov	r3, r0
 8003452:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8003454:	7dfb      	ldrb	r3, [r7, #23]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d004      	beq.n	8003464 <Ble_Hci_Gap_Gatt_Init+0x1dc>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800345a:	7dfb      	ldrb	r3, [r7, #23]
 800345c:	4619      	mov	r1, r3
 800345e:	4811      	ldr	r0, [pc, #68]	; (80034a4 <Ble_Hci_Gap_Gatt_Init+0x21c>)
 8003460:	f008 fdce 	bl	800c000 <iprintf>
    }
  }
}
 8003464:	bf00      	nop
 8003466:	371c      	adds	r7, #28
 8003468:	46bd      	mov	sp, r7
 800346a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800346c:	0800ea90 	.word	0x0800ea90
 8003470:	0800eac0 	.word	0x0800eac0
 8003474:	0800ef28 	.word	0x0800ef28
 8003478:	0800eb1c 	.word	0x0800eb1c
 800347c:	0800ef38 	.word	0x0800ef38
 8003480:	0800eb74 	.word	0x0800eb74
 8003484:	0800ebcc 	.word	0x0800ebcc
 8003488:	0800ec0c 	.word	0x0800ec0c
 800348c:	0800ec40 	.word	0x0800ec40
 8003490:	0800ec48 	.word	0x0800ec48
 8003494:	200005b8 	.word	0x200005b8
 8003498:	0800ec78 	.word	0x0800ec78
 800349c:	0001b207 	.word	0x0001b207
 80034a0:	0800ecb8 	.word	0x0800ecb8
 80034a4:	0800ed04 	.word	0x0800ed04

080034a8 <Scan_Request>:

static void Scan_Request(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <Scan_Request+0x5c>)
 80034b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80034b4:	2b06      	cmp	r3, #6
 80034b6:	d021      	beq.n	80034fc <Scan_Request+0x54>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_CLIENT */
    BSP_LED_On(LED_BLUE);
 80034b8:	2000      	movs	r0, #0
 80034ba:	f000 fbfd 	bl	8003cb8 <BSP_LED_On>
	BSP_LED_Off(LED_RED);
 80034be:	2002      	movs	r0, #2
 80034c0:	f000 fc14 	bl	8003cec <BSP_LED_Off>
    /* USER CODE END APP_BLE_CONNECTED_CLIENT */

    //result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, CFG_BLE_ADDRESS_TYPE, 1);
    result = aci_gap_start_observation_proc(SCAN_P, SCAN_L, 0x00, CFG_BLE_ADDRESS_TYPE, 1,0x00);
 80034c4:	2300      	movs	r3, #0
 80034c6:	9301      	str	r3, [sp, #4]
 80034c8:	2301      	movs	r3, #1
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	2300      	movs	r3, #0
 80034ce:	2200      	movs	r2, #0
 80034d0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80034d4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80034d8:	f005 fe9c 	bl	8009214 <aci_gap_start_observation_proc>
 80034dc:	4603      	mov	r3, r0
 80034de:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d103      	bne.n	80034ee <Scan_Request+0x46>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */

    /* USER CODE END BLE_SCAN_SUCCESS */
      APP_DBG_MSG(" \r\n\r** START GENERAL DISCOVERY (SCAN) **  \r\n\r");
 80034e6:	4808      	ldr	r0, [pc, #32]	; (8003508 <Scan_Request+0x60>)
 80034e8:	f008 fd8a 	bl	800c000 <iprintf>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 80034ec:	e006      	b.n	80034fc <Scan_Request+0x54>
      BSP_LED_On(LED_RED);
 80034ee:	2002      	movs	r0, #2
 80034f0:	f000 fbe2 	bl	8003cb8 <BSP_LED_On>
      APP_DBG_MSG("-- BLE_App_Start_Limited_Disc_Req, Failed \r\n\r");
 80034f4:	4805      	ldr	r0, [pc, #20]	; (800350c <Scan_Request+0x64>)
 80034f6:	f008 fd83 	bl	800c000 <iprintf>
  return;
 80034fa:	bf00      	nop
 80034fc:	bf00      	nop
}
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	200005b8 	.word	0x200005b8
 8003508:	0800ed44 	.word	0x0800ed44
 800350c:	0800ed74 	.word	0x0800ed74

08003510 <Connect_Request>:

static void Connect_Request(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	; 0x28
 8003514:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Connect_Request_1 */

  /* USER CODE END Connect_Request_1 */
  tBleStatus result;

  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO SERVER **  \r\n\r");
 8003516:	481b      	ldr	r0, [pc, #108]	; (8003584 <Connect_Request+0x74>)
 8003518:	f008 fd72 	bl	800c000 <iprintf>

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800351c:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <Connect_Request+0x78>)
 800351e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003522:	2b06      	cmp	r3, #6
 8003524:	d029      	beq.n	800357a <Connect_Request+0x6a>
  {
    result = aci_gap_create_connection(SCAN_P,
 8003526:	4b19      	ldr	r3, [pc, #100]	; (800358c <Connect_Request+0x7c>)
 8003528:	781a      	ldrb	r2, [r3, #0]
 800352a:	2310      	movs	r3, #16
 800352c:	9306      	str	r3, [sp, #24]
 800352e:	2310      	movs	r3, #16
 8003530:	9305      	str	r3, [sp, #20]
 8003532:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003536:	9304      	str	r3, [sp, #16]
 8003538:	2300      	movs	r3, #0
 800353a:	9303      	str	r3, [sp, #12]
 800353c:	2350      	movs	r3, #80	; 0x50
 800353e:	9302      	str	r3, [sp, #8]
 8003540:	2328      	movs	r3, #40	; 0x28
 8003542:	9301      	str	r3, [sp, #4]
 8003544:	2300      	movs	r3, #0
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <Connect_Request+0x80>)
 800354a:	f44f 7148 	mov.w	r1, #800	; 0x320
 800354e:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003552:	f005 fd30 	bl	8008fb6 <aci_gap_create_connection>
 8003556:	4603      	mov	r3, r0
 8003558:	71fb      	strb	r3, [r7, #7]
                                       0,
                                       SUPERV_TIMEOUT,
                                       CONN_L1,
                                       CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 800355a:	79fb      	ldrb	r3, [r7, #7]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d104      	bne.n	800356a <Connect_Request+0x5a>
    {
      /* USER CODE BEGIN BLE_CONNECT_SUCCESS */

      /* USER CODE END BLE_CONNECT_SUCCESS */
      BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 8003560:	4b09      	ldr	r3, [pc, #36]	; (8003588 <Connect_Request+0x78>)
 8003562:	2204      	movs	r2, #4
 8003564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 8003568:	e007      	b.n	800357a <Connect_Request+0x6a>
      BSP_LED_On(LED_RED);
 800356a:	2002      	movs	r0, #2
 800356c:	f000 fba4 	bl	8003cb8 <BSP_LED_On>
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <Connect_Request+0x78>)
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return;
 8003578:	bf00      	nop
 800357a:	bf00      	nop
}
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	0800eda4 	.word	0x0800eda4
 8003588:	200005b8 	.word	0x200005b8
 800358c:	200005b6 	.word	0x200005b6
 8003590:	200005b0 	.word	0x200005b0

08003594 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 8003598:	2001      	movs	r0, #1
 800359a:	f000 fba7 	bl	8003cec <BSP_LED_Off>
  /* USER CODE END Switch_OFF_GPIO */
}
 800359e:	bf00      	nop
 80035a0:	bd80      	pop	{r7, pc}
	...

080035a4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80035aa:	f7ff fc2f 	bl	8002e0c <LL_FLASH_GetUDN>
 80035ae:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b6:	d023      	beq.n	8003600 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80035b8:	f7ff fc40 	bl	8002e3c <LL_FLASH_GetSTCompanyID>
 80035bc:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80035be:	f7ff fc31 	bl	8002e24 <LL_FLASH_GetDeviceID>
 80035c2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	4b16      	ldr	r3, [pc, #88]	; (8003624 <BleGetBdAddress+0x80>)
 80035ca:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	0a1b      	lsrs	r3, r3, #8
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4b14      	ldr	r3, [pc, #80]	; (8003624 <BleGetBdAddress+0x80>)
 80035d4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4b12      	ldr	r3, [pc, #72]	; (8003624 <BleGetBdAddress+0x80>)
 80035dc:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <BleGetBdAddress+0x80>)
 80035e4:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	0a1b      	lsrs	r3, r3, #8
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <BleGetBdAddress+0x80>)
 80035ee:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	0c1b      	lsrs	r3, r3, #16
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <BleGetBdAddress+0x80>)
 80035f8:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80035fa:	4b0a      	ldr	r3, [pc, #40]	; (8003624 <BleGetBdAddress+0x80>)
 80035fc:	617b      	str	r3, [r7, #20]
 80035fe:	e00b      	b.n	8003618 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8003600:	2000      	movs	r0, #0
 8003602:	f006 fb53 	bl	8009cac <OTP_Read>
 8003606:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	e001      	b.n	8003618 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8003614:	4b04      	ldr	r3, [pc, #16]	; (8003628 <BleGetBdAddress+0x84>)
 8003616:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8003618:	697b      	ldr	r3, [r7, #20]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	200005a8 	.word	0x200005a8
 8003628:	0800ef20 	.word	0x0800ef20

0800362c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8003634:	2100      	movs	r1, #0
 8003636:	2010      	movs	r0, #16
 8003638:	f007 ff18 	bl	800b46c <UTIL_SEQ_SetTask>
  return;
 800363c:	bf00      	nop
}
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800364c:	2001      	movs	r0, #1
 800364e:	f007 ff79 	bl	800b544 <UTIL_SEQ_SetEvt>
  return;
 8003652:	bf00      	nop
}
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b082      	sub	sp, #8
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003662:	2001      	movs	r0, #1
 8003664:	f007 ff8e 	bl	800b584 <UTIL_SEQ_WaitEvt>
  return;
 8003668:	bf00      	nop
}
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void * pPayload)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	3308      	adds	r3, #8
 8003682:	4618      	mov	r0, r3
 8003684:	f007 fada 	bl	800ac3c <SVCCTL_UserEvtRx>
 8003688:	4603      	mov	r3, r0
 800368a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800368c:	7afb      	ldrb	r3, [r7, #11]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8003698:	e003      	b.n	80036a2 <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	701a      	strb	r2, [r3, #0]
  return;
 80036a0:	bf00      	nop
}
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t status)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d002      	beq.n	80036be <BLE_StatusNot+0x16>
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d006      	beq.n	80036ca <BLE_StatusNot+0x22>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
      break;

    default:
      break;
 80036bc:	e00b      	b.n	80036d6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80036be:	23ff      	movs	r3, #255	; 0xff
 80036c0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f007 fefe 	bl	800b4c4 <UTIL_SEQ_PauseTask>
      break;
 80036c8:	e005      	b.n	80036d6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80036ca:	23ff      	movs	r3, #255	; 0xff
 80036cc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f007 ff18 	bl	800b504 <UTIL_SEQ_ResumeTask>
      break;
 80036d4:	bf00      	nop
  }
  return;
 80036d6:	bf00      	nop
}
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <P2PC_APP_SW1_Button_Action>:
/* USER CODE END P2PC_APP_Notification_2 */
  return;
}
/* USER CODE BEGIN FD */
void P2PC_APP_SW1_Button_Action(void)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	af00      	add	r7, sp, #0

  UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 80036e2:	2100      	movs	r1, #0
 80036e4:	2020      	movs	r0, #32
 80036e6:	f007 fec1 	bl	800b46c <UTIL_SEQ_SetTask>

}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <P2P_Client_APP_Get_State>:

/* USER CODE END Gatt_Notification_2 */
  return;
}

uint8_t P2P_Client_APP_Get_State( void ) {
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return aP2PClientContext[0].state;
 80036f4:	4b03      	ldr	r3, [pc, #12]	; (8003704 <P2P_Client_APP_Get_State+0x14>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	2000063c 	.word	0x2000063c

08003708 <LL_PWR_EnableBootC2>:
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <LL_PWR_EnableBootC2+0x1c>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	4a04      	ldr	r2, [pc, #16]	; (8003724 <LL_PWR_EnableBootC2+0x1c>)
 8003712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003716:	60d3      	str	r3, [r2, #12]
}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	58000400 	.word	0x58000400

08003728 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8003730:	4b06      	ldr	r3, [pc, #24]	; (800374c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003732:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003736:	4905      	ldr	r1, [pc, #20]	; (800374c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	58000800 	.word	0x58000800

08003750 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003758:	4b05      	ldr	r3, [pc, #20]	; (8003770 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800375a:	6a1a      	ldr	r2, [r3, #32]
 800375c:	4904      	ldr	r1, [pc, #16]	; (8003770 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4313      	orrs	r3, r2
 8003762:	620b      	str	r3, [r1, #32]
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	58000800 	.word	0x58000800

08003774 <LL_AHB3_GRP1_EnableClock>:
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800377c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003780:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003782:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4313      	orrs	r3, r2
 800378a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800378c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003790:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4013      	ands	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003798:	68fb      	ldr	r3, [r7, #12]
}
 800379a:	bf00      	nop
 800379c:	3714      	adds	r7, #20
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b085      	sub	sp, #20
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80037ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80037b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4313      	orrs	r3, r2
 80037be:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80037c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4013      	ands	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037d0:	68fb      	ldr	r3, [r7, #12]
}
 80037d2:	bf00      	nop
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr

080037de <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80037de:	b480      	push	{r7}
 80037e0:	b083      	sub	sp, #12
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	601a      	str	r2, [r3, #0]
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f043 0201 	orr.w	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	601a      	str	r2, [r3, #0]
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	041b      	lsls	r3, r3, #16
 8003830:	43db      	mvns	r3, r3
 8003832:	401a      	ands	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	605a      	str	r2, [r3, #4]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	041b      	lsls	r3, r3, #16
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	605a      	str	r2, [r3, #4]
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	43db      	mvns	r3, r3
 800387a:	401a      	ands	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	605a      	str	r2, [r3, #4]
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	609a      	str	r2, [r3, #8]
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	041a      	lsls	r2, r3, #16
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	609a      	str	r2, [r3, #8]
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	4013      	ands	r3, r2
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d101      	bne.n	80038e2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80038de:	2301      	movs	r3, #1
 80038e0:	e000      	b.n	80038e4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69da      	ldr	r2, [r3, #28]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	4013      	ands	r3, r2
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d101      	bne.n	800390c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
	...

0800391c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8003920:	2102      	movs	r1, #2
 8003922:	4819      	ldr	r0, [pc, #100]	; (8003988 <HW_IPCC_Rx_Handler+0x6c>)
 8003924:	f7ff ffe4 	bl	80038f0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HW_IPCC_Rx_Handler+0x26>
 800392e:	4b16      	ldr	r3, [pc, #88]	; (8003988 <HW_IPCC_Rx_Handler+0x6c>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	43db      	mvns	r3, r3
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 800393c:	f000 f8da 	bl	8003af4 <HW_IPCC_SYS_EvtHandler>
 8003940:	e01f      	b.n	8003982 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8003942:	2101      	movs	r1, #1
 8003944:	4810      	ldr	r0, [pc, #64]	; (8003988 <HW_IPCC_Rx_Handler+0x6c>)
 8003946:	f7ff ffd3 	bl	80038f0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HW_IPCC_Rx_Handler+0x46>
 8003950:	4b0d      	ldr	r3, [pc, #52]	; (8003988 <HW_IPCC_Rx_Handler+0x6c>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d102      	bne.n	8003962 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 800395c:	f000 f88e 	bl	8003a7c <HW_IPCC_BLE_EvtHandler>
 8003960:	e00f      	b.n	8003982 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8003962:	2108      	movs	r1, #8
 8003964:	4808      	ldr	r0, [pc, #32]	; (8003988 <HW_IPCC_Rx_Handler+0x6c>)
 8003966:	f7ff ffc3 	bl	80038f0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d009      	beq.n	8003984 <HW_IPCC_Rx_Handler+0x68>
 8003970:	4b05      	ldr	r3, [pc, #20]	; (8003988 <HW_IPCC_Rx_Handler+0x6c>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	43db      	mvns	r3, r3
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 800397e:	f000 f905 	bl	8003b8c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8003982:	bf00      	nop
 8003984:	bf00      	nop
}
 8003986:	bd80      	pop	{r7, pc}
 8003988:	58000c00 	.word	0x58000c00

0800398c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8003990:	2102      	movs	r1, #2
 8003992:	481a      	ldr	r0, [pc, #104]	; (80039fc <HW_IPCC_Tx_Handler+0x70>)
 8003994:	f7ff ff97 	bl	80038c6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HW_IPCC_Tx_Handler+0x26>
 800399e:	4b17      	ldr	r3, [pc, #92]	; (80039fc <HW_IPCC_Tx_Handler+0x70>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80039ac:	f000 f896 	bl	8003adc <HW_IPCC_SYS_CmdEvtHandler>
 80039b0:	e020      	b.n	80039f4 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80039b2:	2108      	movs	r1, #8
 80039b4:	4811      	ldr	r0, [pc, #68]	; (80039fc <HW_IPCC_Tx_Handler+0x70>)
 80039b6:	f7ff ff86 	bl	80038c6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d109      	bne.n	80039d4 <HW_IPCC_Tx_Handler+0x48>
 80039c0:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <HW_IPCC_Tx_Handler+0x70>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	43db      	mvns	r3, r3
 80039c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 80039ce:	f000 f8bf 	bl	8003b50 <HW_IPCC_MM_FreeBufHandler>
 80039d2:	e00f      	b.n	80039f4 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80039d4:	2120      	movs	r1, #32
 80039d6:	4809      	ldr	r0, [pc, #36]	; (80039fc <HW_IPCC_Tx_Handler+0x70>)
 80039d8:	f7ff ff75 	bl	80038c6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d109      	bne.n	80039f6 <HW_IPCC_Tx_Handler+0x6a>
 80039e2:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HW_IPCC_Tx_Handler+0x70>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	43db      	mvns	r3, r3
 80039e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80039f0:	f000 f850 	bl	8003a94 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
}
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	58000c00 	.word	0x58000c00

08003a00 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8003a04:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003a08:	f7ff fecd 	bl	80037a6 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8003a0c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003a10:	f7ff fe9e 	bl	8003750 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8003a14:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003a18:	f7ff fe86 	bl	8003728 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8003a1c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8003a1e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8003a20:	f7ff fe72 	bl	8003708 <LL_PWR_EnableBootC2>

  return;
 8003a24:	bf00      	nop
}
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8003a2c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003a30:	f7ff fea0 	bl	8003774 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8003a34:	4806      	ldr	r0, [pc, #24]	; (8003a50 <HW_IPCC_Init+0x28>)
 8003a36:	f7ff fee2 	bl	80037fe <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8003a3a:	4805      	ldr	r0, [pc, #20]	; (8003a50 <HW_IPCC_Init+0x28>)
 8003a3c:	f7ff fecf 	bl	80037de <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003a40:	202c      	movs	r0, #44	; 0x2c
 8003a42:	f000 fc6c 	bl	800431e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003a46:	202d      	movs	r0, #45	; 0x2d
 8003a48:	f000 fc69 	bl	800431e <HAL_NVIC_EnableIRQ>

  return;
 8003a4c:	bf00      	nop
}
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	58000c00 	.word	0x58000c00

08003a54 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8003a58:	2101      	movs	r1, #1
 8003a5a:	4802      	ldr	r0, [pc, #8]	; (8003a64 <HW_IPCC_BLE_Init+0x10>)
 8003a5c:	f7ff ff04 	bl	8003868 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003a60:	bf00      	nop
}
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	58000c00 	.word	0x58000c00

08003a68 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	4802      	ldr	r0, [pc, #8]	; (8003a78 <HW_IPCC_BLE_SendCmd+0x10>)
 8003a70:	f7ff ff1a 	bl	80038a8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8003a74:	bf00      	nop
}
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	58000c00 	.word	0x58000c00

08003a7c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8003a80:	f007 f9dc 	bl	800ae3c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8003a84:	2101      	movs	r1, #1
 8003a86:	4802      	ldr	r0, [pc, #8]	; (8003a90 <HW_IPCC_BLE_EvtHandler+0x14>)
 8003a88:	f7ff ff00 	bl	800388c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003a8c:	bf00      	nop
}
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	58000c00 	.word	0x58000c00

08003a94 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8003a98:	2120      	movs	r1, #32
 8003a9a:	4803      	ldr	r0, [pc, #12]	; (8003aa8 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8003a9c:	f7ff fed2 	bl	8003844 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8003aa0:	f007 f9fc 	bl	800ae9c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8003aa4:	bf00      	nop
}
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	58000c00 	.word	0x58000c00

08003aac <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003ab0:	2102      	movs	r1, #2
 8003ab2:	4802      	ldr	r0, [pc, #8]	; (8003abc <HW_IPCC_SYS_Init+0x10>)
 8003ab4:	f7ff fed8 	bl	8003868 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003ab8:	bf00      	nop
}
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	58000c00 	.word	0x58000c00

08003ac0 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003ac4:	2102      	movs	r1, #2
 8003ac6:	4804      	ldr	r0, [pc, #16]	; (8003ad8 <HW_IPCC_SYS_SendCmd+0x18>)
 8003ac8:	f7ff feee 	bl	80038a8 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003acc:	2102      	movs	r1, #2
 8003ace:	4802      	ldr	r0, [pc, #8]	; (8003ad8 <HW_IPCC_SYS_SendCmd+0x18>)
 8003ad0:	f7ff fea5 	bl	800381e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8003ad4:	bf00      	nop
}
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	58000c00 	.word	0x58000c00

08003adc <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003ae0:	2102      	movs	r1, #2
 8003ae2:	4803      	ldr	r0, [pc, #12]	; (8003af0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8003ae4:	f7ff feae 	bl	8003844 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8003ae8:	f007 fa28 	bl	800af3c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8003aec:	bf00      	nop
}
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	58000c00 	.word	0x58000c00

08003af4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8003af8:	f007 fa36 	bl	800af68 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003afc:	2102      	movs	r1, #2
 8003afe:	4802      	ldr	r0, [pc, #8]	; (8003b08 <HW_IPCC_SYS_EvtHandler+0x14>)
 8003b00:	f7ff fec4 	bl	800388c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003b04:	bf00      	nop
}
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	58000c00 	.word	0x58000c00

08003b0c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8003b14:	2108      	movs	r1, #8
 8003b16:	480c      	ldr	r0, [pc, #48]	; (8003b48 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003b18:	f7ff fed5 	bl	80038c6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8003b22:	4a0a      	ldr	r2, [pc, #40]	; (8003b4c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003b28:	2108      	movs	r1, #8
 8003b2a:	4807      	ldr	r0, [pc, #28]	; (8003b48 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003b2c:	f7ff fe77 	bl	800381e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8003b30:	e006      	b.n	8003b40 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003b36:	2108      	movs	r1, #8
 8003b38:	4803      	ldr	r0, [pc, #12]	; (8003b48 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003b3a:	f7ff feb5 	bl	80038a8 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8003b3e:	bf00      	nop
}
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	58000c00 	.word	0x58000c00
 8003b4c:	2000064c 	.word	0x2000064c

08003b50 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003b54:	2108      	movs	r1, #8
 8003b56:	4806      	ldr	r0, [pc, #24]	; (8003b70 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8003b58:	f7ff fe74 	bl	8003844 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003b62:	2108      	movs	r1, #8
 8003b64:	4802      	ldr	r0, [pc, #8]	; (8003b70 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8003b66:	f7ff fe9f 	bl	80038a8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8003b6a:	bf00      	nop
}
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	58000c00 	.word	0x58000c00
 8003b74:	2000064c 	.word	0x2000064c

08003b78 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003b7c:	2108      	movs	r1, #8
 8003b7e:	4802      	ldr	r0, [pc, #8]	; (8003b88 <HW_IPCC_TRACES_Init+0x10>)
 8003b80:	f7ff fe72 	bl	8003868 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003b84:	bf00      	nop
}
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	58000c00 	.word	0x58000c00

08003b8c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8003b90:	f007 fa92 	bl	800b0b8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8003b94:	2108      	movs	r1, #8
 8003b96:	4802      	ldr	r0, [pc, #8]	; (8003ba0 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8003b98:	f7ff fe78 	bl	800388c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003b9c:	bf00      	nop
}
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	58000c00 	.word	0x58000c00

08003ba4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003ba4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ba6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ba8:	3304      	adds	r3, #4

08003baa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003baa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bac:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003bae:	d3f9      	bcc.n	8003ba4 <CopyDataInit>
  bx lr
 8003bb0:	4770      	bx	lr

08003bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003bb2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003bb4:	3004      	adds	r0, #4

08003bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003bb6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003bb8:	d3fb      	bcc.n	8003bb2 <FillZerobss>
  bx lr
 8003bba:	4770      	bx	lr

08003bbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003bbc:	480c      	ldr	r0, [pc, #48]	; (8003bf0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8003bbe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003bc0:	f000 f954 	bl	8003e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003bc4:	480b      	ldr	r0, [pc, #44]	; (8003bf4 <LoopForever+0x8>)
 8003bc6:	490c      	ldr	r1, [pc, #48]	; (8003bf8 <LoopForever+0xc>)
 8003bc8:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <LoopForever+0x10>)
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f7ff ffed 	bl	8003baa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003bd0:	480b      	ldr	r0, [pc, #44]	; (8003c00 <LoopForever+0x14>)
 8003bd2:	490c      	ldr	r1, [pc, #48]	; (8003c04 <LoopForever+0x18>)
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f7ff ffee 	bl	8003bb6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003bda:	480b      	ldr	r0, [pc, #44]	; (8003c08 <LoopForever+0x1c>)
 8003bdc:	490b      	ldr	r1, [pc, #44]	; (8003c0c <LoopForever+0x20>)
 8003bde:	2300      	movs	r3, #0
 8003be0:	f7ff ffe9 	bl	8003bb6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003be4:	f007 fd68 	bl	800b6b8 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8003be8:	f7fe fd48 	bl	800267c <main>

08003bec <LoopForever>:

LoopForever:
  b LoopForever
 8003bec:	e7fe      	b.n	8003bec <LoopForever>
 8003bee:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003bf0:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8003bf4:	20000008 	.word	0x20000008
 8003bf8:	20000228 	.word	0x20000228
 8003bfc:	0800f42c 	.word	0x0800f42c
  INIT_BSS _sbss, _ebss
 8003c00:	20000278 	.word	0x20000278
 8003c04:	200017b8 	.word	0x200017b8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8003c08:	200301e4 	.word	0x200301e4
 8003c0c:	20030a67 	.word	0x20030a67

08003c10 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003c10:	e7fe      	b.n	8003c10 <ADC1_IRQHandler>

08003c12 <LL_AHB2_GRP1_EnableClock>:
{
 8003c12:	b480      	push	{r7}
 8003c14:	b085      	sub	sp, #20
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4013      	ands	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003c36:	68fb      	ldr	r3, [r7, #12]
}
 8003c38:	bf00      	nop
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003c4e:	f107 030c 	add.w	r3, r7, #12
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	605a      	str	r2, [r3, #4]
 8003c58:	609a      	str	r2, [r3, #8]
 8003c5a:	60da      	str	r2, [r3, #12]
 8003c5c:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003c5e:	2002      	movs	r0, #2
 8003c60:	f7ff ffd7 	bl	8003c12 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	4a12      	ldr	r2, [pc, #72]	; (8003cb0 <BSP_LED_Init+0x6c>)
 8003c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c6c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c76:	2302      	movs	r3, #2
 8003c78:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	4a0d      	ldr	r2, [pc, #52]	; (8003cb4 <BSP_LED_Init+0x70>)
 8003c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c82:	f107 020c 	add.w	r2, r7, #12
 8003c86:	4611      	mov	r1, r2
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fee1 	bl	8004a50 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	4a08      	ldr	r2, [pc, #32]	; (8003cb4 <BSP_LED_Init+0x70>)
 8003c92:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003c96:	79fb      	ldrb	r3, [r7, #7]
 8003c98:	4a05      	ldr	r2, [pc, #20]	; (8003cb0 <BSP_LED_Init+0x6c>)
 8003c9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	f001 f83d 	bl	8004d20 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3720      	adds	r7, #32
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	0800ef48 	.word	0x0800ef48
 8003cb4:	20000014 	.word	0x20000014

08003cb8 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
 8003cc4:	4a07      	ldr	r2, [pc, #28]	; (8003ce4 <BSP_LED_On+0x2c>)
 8003cc6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	4a06      	ldr	r2, [pc, #24]	; (8003ce8 <BSP_LED_On+0x30>)
 8003cce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f001 f823 	bl	8004d20 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20000014 	.word	0x20000014
 8003ce8:	0800ef48 	.word	0x0800ef48

08003cec <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8003cf6:	79fb      	ldrb	r3, [r7, #7]
 8003cf8:	4a07      	ldr	r2, [pc, #28]	; (8003d18 <BSP_LED_Off+0x2c>)
 8003cfa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	4a06      	ldr	r2, [pc, #24]	; (8003d1c <BSP_LED_Off+0x30>)
 8003d02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d06:	2200      	movs	r2, #0
 8003d08:	4619      	mov	r1, r3
 8003d0a:	f001 f809 	bl	8004d20 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	20000014 	.word	0x20000014
 8003d1c:	0800ef48 	.word	0x0800ef48

08003d20 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	4603      	mov	r3, r0
 8003d28:	460a      	mov	r2, r1
 8003d2a:	71fb      	strb	r3, [r7, #7]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 8003d30:	f107 030c 	add.w	r3, r7, #12
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	60da      	str	r2, [r3, #12]
 8003d3e:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d103      	bne.n	8003d4e <BSP_PB_Init+0x2e>
 8003d46:	2001      	movs	r0, #1
 8003d48:	f7ff ff63 	bl	8003c12 <LL_AHB2_GRP1_EnableClock>
 8003d4c:	e00c      	b.n	8003d68 <BSP_PB_Init+0x48>
 8003d4e:	79fb      	ldrb	r3, [r7, #7]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d103      	bne.n	8003d5c <BSP_PB_Init+0x3c>
 8003d54:	2010      	movs	r0, #16
 8003d56:	f7ff ff5c 	bl	8003c12 <LL_AHB2_GRP1_EnableClock>
 8003d5a:	e005      	b.n	8003d68 <BSP_PB_Init+0x48>
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d102      	bne.n	8003d68 <BSP_PB_Init+0x48>
 8003d62:	2001      	movs	r0, #1
 8003d64:	f7ff ff55 	bl	8003c12 <LL_AHB2_GRP1_EnableClock>

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	4a29      	ldr	r2, [pc, #164]	; (8003e10 <BSP_PB_Init+0xf0>)
 8003d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d70:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003d72:	2301      	movs	r3, #1
 8003d74:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d76:	2302      	movs	r3, #2
 8003d78:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8003d7a:	79bb      	ldrb	r3, [r7, #6]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10c      	bne.n	8003d9a <BSP_PB_Init+0x7a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8003d80:	2300      	movs	r3, #0
 8003d82:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	4a23      	ldr	r2, [pc, #140]	; (8003e14 <BSP_PB_Init+0xf4>)
 8003d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8c:	f107 020c 	add.w	r2, r7, #12
 8003d90:	4611      	mov	r1, r2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fe5c 	bl	8004a50 <HAL_GPIO_Init>
 8003d98:	e035      	b.n	8003e06 <BSP_PB_Init+0xe6>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8003d9a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003d9e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	4a1c      	ldr	r2, [pc, #112]	; (8003e14 <BSP_PB_Init+0xf4>)
 8003da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da8:	f107 020c 	add.w	r2, r7, #12
 8003dac:	4611      	mov	r1, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fe4e 	bl	8004a50 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4a17      	ldr	r2, [pc, #92]	; (8003e18 <BSP_PB_Init+0xf8>)
 8003dba:	441a      	add	r2, r3
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	4917      	ldr	r1, [pc, #92]	; (8003e1c <BSP_PB_Init+0xfc>)
 8003dc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f000 fe0c 	bl	80049e4 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4a11      	ldr	r2, [pc, #68]	; (8003e18 <BSP_PB_Init+0xf8>)
 8003dd2:	1898      	adds	r0, r3, r2
 8003dd4:	79fb      	ldrb	r3, [r7, #7]
 8003dd6:	4a12      	ldr	r2, [pc, #72]	; (8003e20 <BSP_PB_Init+0x100>)
 8003dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2100      	movs	r1, #0
 8003de0:	f000 fde6 	bl	80049b0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	4a0f      	ldr	r2, [pc, #60]	; (8003e24 <BSP_PB_Init+0x104>)
 8003de8:	56d0      	ldrsb	r0, [r2, r3]
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	4a0e      	ldr	r2, [pc, #56]	; (8003e28 <BSP_PB_Init+0x108>)
 8003dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df2:	2200      	movs	r2, #0
 8003df4:	4619      	mov	r1, r3
 8003df6:	f000 fa78 	bl	80042ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	4a09      	ldr	r2, [pc, #36]	; (8003e24 <BSP_PB_Init+0x104>)
 8003dfe:	56d3      	ldrsb	r3, [r2, r3]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fa8c 	bl	800431e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3720      	adds	r7, #32
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	0800ef50 	.word	0x0800ef50
 8003e14:	20000020 	.word	0x20000020
 8003e18:	20000650 	.word	0x20000650
 8003e1c:	0800ef5c 	.word	0x0800ef5c
 8003e20:	2000002c 	.word	0x2000002c
 8003e24:	0800ef58 	.word	0x0800ef58
 8003e28:	20000038 	.word	0x20000038

08003e2c <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 8003e42:	b580      	push	{r7, lr}
 8003e44:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 8003e46:	2000      	movs	r0, #0
 8003e48:	f7ff fff0 	bl	8003e2c <BSP_PB_Callback>
}
 8003e4c:	bf00      	nop
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <BUTTON_SW2_EXTI_Callback>:
/**
  * @brief  Button SW2 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW2_EXTI_Callback(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW2);
 8003e54:	2001      	movs	r0, #1
 8003e56:	f7ff ffe9 	bl	8003e2c <BSP_PB_Callback>
}
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW3);
 8003e62:	2002      	movs	r0, #2
 8003e64:	f7ff ffe2 	bl	8003e2c <BSP_PB_Callback>
}
 8003e68:	bf00      	nop
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003e70:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <SystemInit+0x98>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003e76:	4b23      	ldr	r3, [pc, #140]	; (8003f04 <SystemInit+0x98>)
 8003e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7c:	4a21      	ldr	r2, [pc, #132]	; (8003f04 <SystemInit+0x98>)
 8003e7e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003e9e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eaa:	4b17      	ldr	r3, [pc, #92]	; (8003f08 <SystemInit+0x9c>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ebc:	f023 0305 	bic.w	r3, r3, #5
 8003ec0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ecc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ed0:	f023 0301 	bic.w	r3, r3, #1
 8003ed4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003edc:	4a0b      	ldr	r2, [pc, #44]	; (8003f0c <SystemInit+0xa0>)
 8003ede:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	619a      	str	r2, [r3, #24]
}
 8003ef8:	bf00      	nop
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	e000ed00 	.word	0xe000ed00
 8003f08:	faf6fefb 	.word	0xfaf6fefb
 8003f0c:	22041000 	.word	0x22041000

08003f10 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003f14:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	4a04      	ldr	r2, [pc, #16]	; (8003f2c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	6053      	str	r3, [r2, #4]
}
 8003f20:	bf00      	nop
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	e0042000 	.word	0xe0042000

08003f30 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003f34:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	4a04      	ldr	r2, [pc, #16]	; (8003f4c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003f3a:	f043 0302 	orr.w	r3, r3, #2
 8003f3e:	6053      	str	r3, [r2, #4]
}
 8003f40:	bf00      	nop
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	e0042000 	.word	0xe0042000

08003f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f5a:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <HAL_Init+0x3c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a0b      	ldr	r2, [pc, #44]	; (8003f8c <HAL_Init+0x3c>)
 8003f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f64:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f66:	2003      	movs	r0, #3
 8003f68:	f000 f9b4 	bl	80042d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f000 f80f 	bl	8003f90 <HAL_InitTick>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d002      	beq.n	8003f7e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	71fb      	strb	r3, [r7, #7]
 8003f7c:	e001      	b.n	8003f82 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f7e:	f7fe fd43 	bl	8002a08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f82:	79fb      	ldrb	r3, [r7, #7]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	58004000 	.word	0x58004000

08003f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003f9c:	4b17      	ldr	r3, [pc, #92]	; (8003ffc <HAL_InitTick+0x6c>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d024      	beq.n	8003fee <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003fa4:	f001 ffe0 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <HAL_InitTick+0x6c>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fb4:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 f9ca 	bl	8004356 <HAL_SYSTICK_Config>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10f      	bne.n	8003fe8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b0f      	cmp	r3, #15
 8003fcc:	d809      	bhi.n	8003fe2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fce:	2200      	movs	r2, #0
 8003fd0:	6879      	ldr	r1, [r7, #4]
 8003fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8003fd6:	f000 f988 	bl	80042ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003fda:	4a09      	ldr	r2, [pc, #36]	; (8004000 <HAL_InitTick+0x70>)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6013      	str	r3, [r2, #0]
 8003fe0:	e007      	b.n	8003ff2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	73fb      	strb	r3, [r7, #15]
 8003fe6:	e004      	b.n	8003ff2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]
 8003fec:	e001      	b.n	8003ff2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	2000004c 	.word	0x2000004c
 8004000:	20000048 	.word	0x20000048

08004004 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004008:	4b06      	ldr	r3, [pc, #24]	; (8004024 <HAL_IncTick+0x20>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	461a      	mov	r2, r3
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <HAL_IncTick+0x24>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4413      	add	r3, r2
 8004014:	4a04      	ldr	r2, [pc, #16]	; (8004028 <HAL_IncTick+0x24>)
 8004016:	6013      	str	r3, [r2, #0]
}
 8004018:	bf00      	nop
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	2000004c 	.word	0x2000004c
 8004028:	20000668 	.word	0x20000668

0800402c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return uwTick;
 8004030:	4b03      	ldr	r3, [pc, #12]	; (8004040 <HAL_GetTick+0x14>)
 8004032:	681b      	ldr	r3, [r3, #0]
}
 8004034:	4618      	mov	r0, r3
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000668 	.word	0x20000668

08004044 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004048:	4b03      	ldr	r3, [pc, #12]	; (8004058 <HAL_GetTickPrio+0x14>)
 800404a:	681b      	ldr	r3, [r3, #0]
}
 800404c:	4618      	mov	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	20000048 	.word	0x20000048

0800405c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8004060:	f7ff ff56 	bl	8003f10 <LL_DBGMCU_EnableDBGSleepMode>
}
 8004064:	bf00      	nop
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 800406c:	f7ff ff60 	bl	8003f30 <LL_DBGMCU_EnableDBGStopMode>
}
 8004070:	bf00      	nop
 8004072:	bd80      	pop	{r7, pc}

08004074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <__NVIC_SetPriorityGrouping+0x44>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004090:	4013      	ands	r3, r2
 8004092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800409c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040a6:	4a04      	ldr	r2, [pc, #16]	; (80040b8 <__NVIC_SetPriorityGrouping+0x44>)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	60d3      	str	r3, [r2, #12]
}
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	e000ed00 	.word	0xe000ed00

080040bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040bc:	b480      	push	{r7}
 80040be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040c0:	4b04      	ldr	r3, [pc, #16]	; (80040d4 <__NVIC_GetPriorityGrouping+0x18>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	0a1b      	lsrs	r3, r3, #8
 80040c6:	f003 0307 	and.w	r3, r3, #7
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	e000ed00 	.word	0xe000ed00

080040d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	db0b      	blt.n	8004102 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ea:	79fb      	ldrb	r3, [r7, #7]
 80040ec:	f003 021f 	and.w	r2, r3, #31
 80040f0:	4907      	ldr	r1, [pc, #28]	; (8004110 <__NVIC_EnableIRQ+0x38>)
 80040f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f6:	095b      	lsrs	r3, r3, #5
 80040f8:	2001      	movs	r0, #1
 80040fa:	fa00 f202 	lsl.w	r2, r0, r2
 80040fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	e000e100 	.word	0xe000e100

08004114 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800411e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004122:	2b00      	cmp	r3, #0
 8004124:	db12      	blt.n	800414c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	f003 021f 	and.w	r2, r3, #31
 800412c:	490a      	ldr	r1, [pc, #40]	; (8004158 <__NVIC_DisableIRQ+0x44>)
 800412e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	2001      	movs	r0, #1
 8004136:	fa00 f202 	lsl.w	r2, r0, r2
 800413a:	3320      	adds	r3, #32
 800413c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004140:	f3bf 8f4f 	dsb	sy
}
 8004144:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004146:	f3bf 8f6f 	isb	sy
}
 800414a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	e000e100 	.word	0xe000e100

0800415c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416a:	2b00      	cmp	r3, #0
 800416c:	db0c      	blt.n	8004188 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	f003 021f 	and.w	r2, r3, #31
 8004174:	4907      	ldr	r1, [pc, #28]	; (8004194 <__NVIC_SetPendingIRQ+0x38>)
 8004176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	2001      	movs	r0, #1
 800417e:	fa00 f202 	lsl.w	r2, r0, r2
 8004182:	3340      	adds	r3, #64	; 0x40
 8004184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	e000e100 	.word	0xe000e100

08004198 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	db0c      	blt.n	80041c4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	f003 021f 	and.w	r2, r3, #31
 80041b0:	4907      	ldr	r1, [pc, #28]	; (80041d0 <__NVIC_ClearPendingIRQ+0x38>)
 80041b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	2001      	movs	r0, #1
 80041ba:	fa00 f202 	lsl.w	r2, r0, r2
 80041be:	3360      	adds	r3, #96	; 0x60
 80041c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	e000e100 	.word	0xe000e100

080041d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	6039      	str	r1, [r7, #0]
 80041de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	db0a      	blt.n	80041fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	490c      	ldr	r1, [pc, #48]	; (8004220 <__NVIC_SetPriority+0x4c>)
 80041ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f2:	0112      	lsls	r2, r2, #4
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	440b      	add	r3, r1
 80041f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041fc:	e00a      	b.n	8004214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	4908      	ldr	r1, [pc, #32]	; (8004224 <__NVIC_SetPriority+0x50>)
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	3b04      	subs	r3, #4
 800420c:	0112      	lsls	r2, r2, #4
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	440b      	add	r3, r1
 8004212:	761a      	strb	r2, [r3, #24]
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	e000e100 	.word	0xe000e100
 8004224:	e000ed00 	.word	0xe000ed00

08004228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004228:	b480      	push	{r7}
 800422a:	b089      	sub	sp, #36	; 0x24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f1c3 0307 	rsb	r3, r3, #7
 8004242:	2b04      	cmp	r3, #4
 8004244:	bf28      	it	cs
 8004246:	2304      	movcs	r3, #4
 8004248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	3304      	adds	r3, #4
 800424e:	2b06      	cmp	r3, #6
 8004250:	d902      	bls.n	8004258 <NVIC_EncodePriority+0x30>
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	3b03      	subs	r3, #3
 8004256:	e000      	b.n	800425a <NVIC_EncodePriority+0x32>
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800425c:	f04f 32ff 	mov.w	r2, #4294967295
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	43da      	mvns	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	401a      	ands	r2, r3
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004270:	f04f 31ff 	mov.w	r1, #4294967295
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	fa01 f303 	lsl.w	r3, r1, r3
 800427a:	43d9      	mvns	r1, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004280:	4313      	orrs	r3, r2
         );
}
 8004282:	4618      	mov	r0, r3
 8004284:	3724      	adds	r7, #36	; 0x24
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3b01      	subs	r3, #1
 800429c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042a0:	d301      	bcc.n	80042a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042a2:	2301      	movs	r3, #1
 80042a4:	e00f      	b.n	80042c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042a6:	4a0a      	ldr	r2, [pc, #40]	; (80042d0 <SysTick_Config+0x40>)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042ae:	210f      	movs	r1, #15
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295
 80042b4:	f7ff ff8e 	bl	80041d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <SysTick_Config+0x40>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042be:	4b04      	ldr	r3, [pc, #16]	; (80042d0 <SysTick_Config+0x40>)
 80042c0:	2207      	movs	r2, #7
 80042c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	e000e010 	.word	0xe000e010

080042d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff fec9 	bl	8004074 <__NVIC_SetPriorityGrouping>
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b086      	sub	sp, #24
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	4603      	mov	r3, r0
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
 80042f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042f8:	f7ff fee0 	bl	80040bc <__NVIC_GetPriorityGrouping>
 80042fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	6978      	ldr	r0, [r7, #20]
 8004304:	f7ff ff90 	bl	8004228 <NVIC_EncodePriority>
 8004308:	4602      	mov	r2, r0
 800430a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff ff5f 	bl	80041d4 <__NVIC_SetPriority>
}
 8004316:	bf00      	nop
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	4603      	mov	r3, r0
 8004326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff fed3 	bl	80040d8 <__NVIC_EnableIRQ>
}
 8004332:	bf00      	nop
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	4603      	mov	r3, r0
 8004342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004348:	4618      	mov	r0, r3
 800434a:	f7ff fee3 	bl	8004114 <__NVIC_DisableIRQ>
}
 800434e:	bf00      	nop
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b082      	sub	sp, #8
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff ff96 	bl	8004290 <SysTick_Config>
 8004364:	4603      	mov	r3, r0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b082      	sub	sp, #8
 8004372:	af00      	add	r7, sp, #0
 8004374:	4603      	mov	r3, r0
 8004376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff feed 	bl	800415c <__NVIC_SetPendingIRQ>
}
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}

0800438a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800438a:	b580      	push	{r7, lr}
 800438c:	b082      	sub	sp, #8
 800438e:	af00      	add	r7, sp, #0
 8004390:	4603      	mov	r3, r0
 8004392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fefd 	bl	8004198 <__NVIC_ClearPendingIRQ>
}
 800439e:	bf00      	nop
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e078      	b.n	80044ac <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	4b3c      	ldr	r3, [pc, #240]	; (80044b4 <HAL_DMA_Init+0x10c>)
 80043c2:	4413      	add	r3, r2
 80043c4:	4a3c      	ldr	r2, [pc, #240]	; (80044b8 <HAL_DMA_Init+0x110>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	091b      	lsrs	r3, r3, #4
 80043cc:	009a      	lsls	r2, r3, #2
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a39      	ldr	r2, [pc, #228]	; (80044bc <HAL_DMA_Init+0x114>)
 80043d6:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80043ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80043fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004408:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004414:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fa6e 	bl	800490c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004438:	d102      	bne.n	8004440 <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004448:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800444c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004456:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d010      	beq.n	8004482 <HAL_DMA_Init+0xda>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	2b04      	cmp	r3, #4
 8004466:	d80c      	bhi.n	8004482 <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fa7b 	bl	8004964 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800447e:	605a      	str	r2, [r3, #4]
 8004480:	e008      	b.n	8004494 <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	bffdfff8 	.word	0xbffdfff8
 80044b8:	cccccccd 	.word	0xcccccccd
 80044bc:	40020000 	.word	0x40020000

080044c0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_DMA_Start_IT+0x20>
 80044dc:	2302      	movs	r3, #2
 80044de:	e066      	b.n	80045ae <HAL_DMA_Start_IT+0xee>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d155      	bne.n	80045a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0201 	bic.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	68b9      	ldr	r1, [r7, #8]
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f9b9 	bl	8004890 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	2b00      	cmp	r3, #0
 8004524:	d008      	beq.n	8004538 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f042 020e 	orr.w	r2, r2, #14
 8004534:	601a      	str	r2, [r3, #0]
 8004536:	e00f      	b.n	8004558 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0204 	bic.w	r2, r2, #4
 8004546:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 020a 	orr.w	r2, r2, #10
 8004556:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004574:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457a:	2b00      	cmp	r3, #0
 800457c:	d007      	beq.n	800458e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800458c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f042 0201 	orr.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	e005      	b.n	80045ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80045a8:	2302      	movs	r3, #2
 80045aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80045ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3718      	adds	r7, #24
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e04f      	b.n	8004668 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d008      	beq.n	80045e6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2204      	movs	r2, #4
 80045d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e040      	b.n	8004668 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 020e 	bic.w	r2, r2, #14
 80045f4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004600:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004604:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0201 	bic.w	r2, r2, #1
 8004614:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461a:	f003 021c 	and.w	r2, r3, #28
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	2101      	movs	r1, #1
 8004624:	fa01 f202 	lsl.w	r2, r1, r2
 8004628:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004632:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00c      	beq.n	8004656 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004646:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800464a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004654:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d005      	beq.n	8004698 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2204      	movs	r2, #4
 8004690:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	73fb      	strb	r3, [r7, #15]
 8004696:	e047      	b.n	8004728 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 020e 	bic.w	r2, r2, #14
 80046a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0201 	bic.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046cc:	f003 021c 	and.w	r2, r3, #28
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	2101      	movs	r1, #1
 80046d6:	fa01 f202 	lsl.w	r2, r1, r2
 80046da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00c      	beq.n	8004708 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004706:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	4798      	blx	r3
    }
  }
  return status;
 8004728:	7bfb      	ldrb	r3, [r7, #15]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474e:	f003 031c 	and.w	r3, r3, #28
 8004752:	2204      	movs	r2, #4
 8004754:	409a      	lsls	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	4013      	ands	r3, r2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d026      	beq.n	80047ac <HAL_DMA_IRQHandler+0x7a>
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d021      	beq.n	80047ac <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d107      	bne.n	8004786 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0204 	bic.w	r2, r2, #4
 8004784:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800478a:	f003 021c 	and.w	r2, r3, #28
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	2104      	movs	r1, #4
 8004794:	fa01 f202 	lsl.w	r2, r1, r2
 8004798:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d071      	beq.n	8004886 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80047aa:	e06c      	b.n	8004886 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b0:	f003 031c 	and.w	r3, r3, #28
 80047b4:	2202      	movs	r2, #2
 80047b6:	409a      	lsls	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4013      	ands	r3, r2
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d02e      	beq.n	800481e <HAL_DMA_IRQHandler+0xec>
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d029      	beq.n	800481e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10b      	bne.n	80047f0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 020a 	bic.w	r2, r2, #10
 80047e6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f4:	f003 021c 	and.w	r2, r3, #28
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fc:	2102      	movs	r1, #2
 80047fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004802:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d038      	beq.n	8004886 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800481c:	e033      	b.n	8004886 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	f003 031c 	and.w	r3, r3, #28
 8004826:	2208      	movs	r2, #8
 8004828:	409a      	lsls	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4013      	ands	r3, r2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d02a      	beq.n	8004888 <HAL_DMA_IRQHandler+0x156>
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b00      	cmp	r3, #0
 800483a:	d025      	beq.n	8004888 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 020e 	bic.w	r2, r2, #14
 800484a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004850:	f003 021c 	and.w	r2, r3, #28
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	2101      	movs	r1, #1
 800485a:	fa01 f202 	lsl.w	r2, r1, r2
 800485e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487a:	2b00      	cmp	r3, #0
 800487c:	d004      	beq.n	8004888 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004886:	bf00      	nop
 8004888:	bf00      	nop
}
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80048a6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d004      	beq.n	80048ba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80048b8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048be:	f003 021c 	and.w	r2, r3, #28
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	2101      	movs	r1, #1
 80048c8:	fa01 f202 	lsl.w	r2, r1, r2
 80048cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2b10      	cmp	r3, #16
 80048dc:	d108      	bne.n	80048f0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80048ee:	e007      	b.n	8004900 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	60da      	str	r2, [r3, #12]
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004918:	089b      	lsrs	r3, r3, #2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004920:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	b2db      	uxtb	r3, r3
 800492e:	3b08      	subs	r3, #8
 8004930:	4a0a      	ldr	r2, [pc, #40]	; (800495c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a08      	ldr	r2, [pc, #32]	; (8004960 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800493e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 031f 	and.w	r3, r3, #31
 8004946:	2201      	movs	r2, #1
 8004948:	409a      	lsls	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800494e:	bf00      	nop
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	cccccccd 	.word	0xcccccccd
 8004960:	40020880 	.word	0x40020880

08004964 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004974:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800497a:	4413      	add	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	461a      	mov	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a09      	ldr	r2, [pc, #36]	; (80049ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004988:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	3b01      	subs	r3, #1
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2201      	movs	r2, #1
 8004994:	409a      	lsls	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800499a:	bf00      	nop
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	1000823f 	.word	0x1000823f
 80049ac:	40020940 	.word	0x40020940

080049b0 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	460b      	mov	r3, r1
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80049c2:	7afb      	ldrb	r3, [r7, #11]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d103      	bne.n	80049d0 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	605a      	str	r2, [r3, #4]
      break;
 80049ce:	e002      	b.n	80049d6 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	75fb      	strb	r3, [r7, #23]
      break;
 80049d4:	bf00      	nop
  }

  return status;
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e003      	b.n	8004a00 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80049fe:	2300      	movs	r3, #0
  }
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	0c1b      	lsrs	r3, r3, #16
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	2201      	movs	r2, #1
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	015b      	lsls	r3, r3, #5
 8004a34:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8004a38:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8004a3c:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	601a      	str	r2, [r3, #0]
}
 8004a44:	bf00      	nop
 8004a46:	371c      	adds	r7, #28
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b087      	sub	sp, #28
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a5e:	e146      	b.n	8004cee <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	2101      	movs	r1, #1
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	f000 8138 	beq.w	8004ce8 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 0303 	and.w	r3, r3, #3
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d005      	beq.n	8004a90 <HAL_GPIO_Init+0x40>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f003 0303 	and.w	r3, r3, #3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d130      	bne.n	8004af2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	2203      	movs	r2, #3
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	68da      	ldr	r2, [r3, #12]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ace:	43db      	mvns	r3, r3
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	091b      	lsrs	r3, r3, #4
 8004adc:	f003 0201 	and.w	r2, r3, #1
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f003 0303 	and.w	r3, r3, #3
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d017      	beq.n	8004b2e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	2203      	movs	r2, #3
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4013      	ands	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d123      	bne.n	8004b82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	08da      	lsrs	r2, r3, #3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3208      	adds	r2, #8
 8004b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	220f      	movs	r2, #15
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	43db      	mvns	r3, r3
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	691a      	ldr	r2, [r3, #16]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	693a      	ldr	r2, [r7, #16]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	08da      	lsrs	r2, r3, #3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3208      	adds	r2, #8
 8004b7c:	6939      	ldr	r1, [r7, #16]
 8004b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	2203      	movs	r2, #3
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	43db      	mvns	r3, r3
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4013      	ands	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f003 0203 	and.w	r2, r3, #3
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	005b      	lsls	r3, r3, #1
 8004ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 8092 	beq.w	8004ce8 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004bc4:	4a51      	ldr	r2, [pc, #324]	; (8004d0c <HAL_GPIO_Init+0x2bc>)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	089b      	lsrs	r3, r3, #2
 8004bca:	3302      	adds	r3, #2
 8004bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	220f      	movs	r2, #15
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	43db      	mvns	r3, r3
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4013      	ands	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004bee:	d013      	beq.n	8004c18 <HAL_GPIO_Init+0x1c8>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a47      	ldr	r2, [pc, #284]	; (8004d10 <HAL_GPIO_Init+0x2c0>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00d      	beq.n	8004c14 <HAL_GPIO_Init+0x1c4>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a46      	ldr	r2, [pc, #280]	; (8004d14 <HAL_GPIO_Init+0x2c4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d007      	beq.n	8004c10 <HAL_GPIO_Init+0x1c0>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a45      	ldr	r2, [pc, #276]	; (8004d18 <HAL_GPIO_Init+0x2c8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d101      	bne.n	8004c0c <HAL_GPIO_Init+0x1bc>
 8004c08:	2304      	movs	r3, #4
 8004c0a:	e006      	b.n	8004c1a <HAL_GPIO_Init+0x1ca>
 8004c0c:	2307      	movs	r3, #7
 8004c0e:	e004      	b.n	8004c1a <HAL_GPIO_Init+0x1ca>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e002      	b.n	8004c1a <HAL_GPIO_Init+0x1ca>
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <HAL_GPIO_Init+0x1ca>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	f002 0203 	and.w	r2, r2, #3
 8004c20:	0092      	lsls	r2, r2, #2
 8004c22:	4093      	lsls	r3, r2
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c2a:	4938      	ldr	r1, [pc, #224]	; (8004d0c <HAL_GPIO_Init+0x2bc>)
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	089b      	lsrs	r3, r3, #2
 8004c30:	3302      	adds	r3, #2
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c38:	4b38      	ldr	r3, [pc, #224]	; (8004d1c <HAL_GPIO_Init+0x2cc>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	43db      	mvns	r3, r3
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4013      	ands	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c5c:	4a2f      	ldr	r2, [pc, #188]	; (8004d1c <HAL_GPIO_Init+0x2cc>)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c62:	4b2e      	ldr	r3, [pc, #184]	; (8004d1c <HAL_GPIO_Init+0x2cc>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	43db      	mvns	r3, r3
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c86:	4a25      	ldr	r2, [pc, #148]	; (8004d1c <HAL_GPIO_Init+0x2cc>)
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004c8c:	4b23      	ldr	r3, [pc, #140]	; (8004d1c <HAL_GPIO_Init+0x2cc>)
 8004c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	43db      	mvns	r3, r3
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004cb2:	4a1a      	ldr	r2, [pc, #104]	; (8004d1c <HAL_GPIO_Init+0x2cc>)
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004cba:	4b18      	ldr	r3, [pc, #96]	; (8004d1c <HAL_GPIO_Init+0x2cc>)
 8004cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004ce0:	4a0e      	ldr	r2, [pc, #56]	; (8004d1c <HAL_GPIO_Init+0x2cc>)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	3301      	adds	r3, #1
 8004cec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f47f aeb1 	bne.w	8004a60 <HAL_GPIO_Init+0x10>
  }
}
 8004cfe:	bf00      	nop
 8004d00:	bf00      	nop
 8004d02:	371c      	adds	r7, #28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	40010000 	.word	0x40010000
 8004d10:	48000400 	.word	0x48000400
 8004d14:	48000800 	.word	0x48000800
 8004d18:	48001000 	.word	0x48001000
 8004d1c:	58000800 	.word	0x58000800

08004d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	807b      	strh	r3, [r7, #2]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d30:	787b      	ldrb	r3, [r7, #1]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d36:	887a      	ldrh	r2, [r7, #2]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d3c:	e002      	b.n	8004d44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d3e:	887a      	ldrh	r2, [r7, #2]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d5a:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	88fb      	ldrh	r3, [r7, #6]
 8004d60:	4013      	ands	r3, r2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d006      	beq.n	8004d74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d66:	4a05      	ldr	r2, [pc, #20]	; (8004d7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d68:	88fb      	ldrh	r3, [r7, #6]
 8004d6a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d6c:	88fb      	ldrh	r3, [r7, #6]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fc fc61 	bl	8001636 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d74:	bf00      	nop
 8004d76:	3708      	adds	r7, #8
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	58000800 	.word	0x58000800

08004d80 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004d86:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <HAL_HSEM_IRQHandler+0x30>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004d8c:	4b08      	ldr	r3, [pc, #32]	; (8004db0 <HAL_HSEM_IRQHandler+0x30>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	43db      	mvns	r3, r3
 8004d94:	4906      	ldr	r1, [pc, #24]	; (8004db0 <HAL_HSEM_IRQHandler+0x30>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004d9a:	4a05      	ldr	r2, [pc, #20]	; (8004db0 <HAL_HSEM_IRQHandler+0x30>)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f807 	bl	8004db4 <HAL_HSEM_FreeCallback>
}
 8004da6:	bf00      	nop
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	58001500 	.word	0x58001500

08004db4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d01e      	beq.n	8004e18 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004dda:	4b13      	ldr	r3, [pc, #76]	; (8004e28 <HAL_IPCC_Init+0x60>)
 8004ddc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d102      	bne.n	8004df0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fd fe1c 	bl	8002a28 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004df0:	68b8      	ldr	r0, [r7, #8]
 8004df2:	f000 f85b 	bl	8004eac <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f82c 	bl	8004e60 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004e16:	e001      	b.n	8004e1c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	58000c00 	.word	0x58000c00

08004e2c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	4613      	mov	r3, r2
 8004e38:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b085      	sub	sp, #20
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	4613      	mov	r3, r2
 8004e52:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	e00f      	b.n	8004e8e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	4a0b      	ldr	r2, [pc, #44]	; (8004ea4 <IPCC_SetDefaultCallbacks+0x44>)
 8004e78:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3306      	adds	r3, #6
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	4a08      	ldr	r2, [pc, #32]	; (8004ea8 <IPCC_SetDefaultCallbacks+0x48>)
 8004e86:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2b05      	cmp	r3, #5
 8004e92:	d9ec      	bls.n	8004e6e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	08004e2d 	.word	0x08004e2d
 8004ea8:	08004e47 	.word	0x08004e47

08004eac <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004ec0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	223f      	movs	r2, #63	; 0x3f
 8004ec6:	609a      	str	r2, [r3, #8]
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a04      	ldr	r2, [pc, #16]	; (8004ef0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee2:	6013      	str	r3, [r2, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	58000400 	.word	0x58000400

08004ef4 <LL_PWR_EnableSRAM2Retention>:
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8004ef8:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	4a04      	ldr	r2, [pc, #16]	; (8004f10 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8004efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f02:	6093      	str	r3, [r2, #8]
}
 8004f04:	bf00      	nop
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	58000400 	.word	0x58000400

08004f14 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8004f18:	f7ff ffec 	bl	8004ef4 <LL_PWR_EnableSRAM2Retention>
}
 8004f1c:	bf00      	nop
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f32:	d101      	bne.n	8004f38 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004f34:	2301      	movs	r3, #1
 8004f36:	e000      	b.n	8004f3a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <LL_RCC_HSE_Enable>:
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f56:	6013      	str	r3, [r2, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <LL_RCC_HSE_Disable>:
{
 8004f62:	b480      	push	{r7}
 8004f64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f74:	6013      	str	r3, [r2, #0]
}
 8004f76:	bf00      	nop
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <LL_RCC_HSE_IsReady>:
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f92:	d101      	bne.n	8004f98 <LL_RCC_HSE_IsReady+0x18>
 8004f94:	2301      	movs	r3, #1
 8004f96:	e000      	b.n	8004f9a <LL_RCC_HSE_IsReady+0x1a>
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <LL_RCC_HSI_Enable>:
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb6:	6013      	str	r3, [r2, #0]
}
 8004fb8:	bf00      	nop
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr

08004fc2 <LL_RCC_HSI_Disable>:
{
 8004fc2:	b480      	push	{r7}
 8004fc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fd4:	6013      	str	r3, [r2, #0]
}
 8004fd6:	bf00      	nop
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <LL_RCC_HSI_IsReady>:
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff2:	d101      	bne.n	8004ff8 <LL_RCC_HSI_IsReady+0x18>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e000      	b.n	8004ffa <LL_RCC_HSI_IsReady+0x1a>
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800500c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	061b      	lsls	r3, r3, #24
 800501a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800501e:	4313      	orrs	r3, r2
 8005020:	604b      	str	r3, [r1, #4]
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <LL_RCC_LSE_Enable>:
{
 800502e:	b480      	push	{r7}
 8005030:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800503e:	f043 0301 	orr.w	r3, r3, #1
 8005042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005046:	bf00      	nop
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <LL_RCC_LSE_Disable>:
{
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005060:	f023 0301 	bic.w	r3, r3, #1
 8005064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005068:	bf00      	nop
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <LL_RCC_LSE_EnableBypass>:
{
 8005072:	b480      	push	{r7}
 8005074:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800507a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005082:	f043 0304 	orr.w	r3, r3, #4
 8005086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800508a:	bf00      	nop
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <LL_RCC_LSE_DisableBypass>:
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050a4:	f023 0304 	bic.w	r3, r3, #4
 80050a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80050ac:	bf00      	nop
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <LL_RCC_LSE_IsReady>:
{
 80050b6:	b480      	push	{r7}
 80050b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80050ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d101      	bne.n	80050ce <LL_RCC_LSE_IsReady+0x18>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e000      	b.n	80050d0 <LL_RCC_LSE_IsReady+0x1a>
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <LL_RCC_LSI1_Enable>:
{
 80050da:	b480      	push	{r7}
 80050dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80050de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050ea:	f043 0301 	orr.w	r3, r3, #1
 80050ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80050f2:	bf00      	nop
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <LL_RCC_LSI1_Disable>:
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005104:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005108:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800510c:	f023 0301 	bic.w	r3, r3, #1
 8005110:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <LL_RCC_LSI1_IsReady>:
{
 800511e:	b480      	push	{r7}
 8005120:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b02      	cmp	r3, #2
 8005130:	d101      	bne.n	8005136 <LL_RCC_LSI1_IsReady+0x18>
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <LL_RCC_LSI1_IsReady+0x1a>
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <LL_RCC_LSI2_Enable>:
{
 8005142:	b480      	push	{r7}
 8005144:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800514a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800514e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005152:	f043 0304 	orr.w	r3, r3, #4
 8005156:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800515a:	bf00      	nop
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <LL_RCC_LSI2_Disable>:
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800516c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005170:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005174:	f023 0304 	bic.w	r3, r3, #4
 8005178:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800517c:	bf00      	nop
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <LL_RCC_LSI2_IsReady>:
{
 8005186:	b480      	push	{r7}
 8005188:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800518a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800518e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b08      	cmp	r3, #8
 8005198:	d101      	bne.n	800519e <LL_RCC_LSI2_IsReady+0x18>
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <LL_RCC_LSI2_IsReady+0x1a>
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <LL_RCC_LSI2_SetTrimming>:
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80051b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ba:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	021b      	lsls	r3, r3, #8
 80051c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <LL_RCC_MSI_Enable>:
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80051dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051e6:	f043 0301 	orr.w	r3, r3, #1
 80051ea:	6013      	str	r3, [r2, #0]
}
 80051ec:	bf00      	nop
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <LL_RCC_MSI_Disable>:
{
 80051f6:	b480      	push	{r7}
 80051f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80051fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005204:	f023 0301 	bic.w	r3, r3, #1
 8005208:	6013      	str	r3, [r2, #0]
}
 800520a:	bf00      	nop
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <LL_RCC_MSI_IsReady>:
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b02      	cmp	r3, #2
 8005224:	d101      	bne.n	800522a <LL_RCC_MSI_IsReady+0x16>
 8005226:	2301      	movs	r3, #1
 8005228:	e000      	b.n	800522c <LL_RCC_MSI_IsReady+0x18>
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <LL_RCC_MSI_SetRange>:
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800523e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005248:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4313      	orrs	r3, r2
 8005250:	600b      	str	r3, [r1, #0]
}
 8005252:	bf00      	nop
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <LL_RCC_MSI_GetRange>:
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800526e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2bb0      	cmp	r3, #176	; 0xb0
 8005274:	d901      	bls.n	800527a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005276:	23b0      	movs	r3, #176	; 0xb0
 8005278:	607b      	str	r3, [r7, #4]
  return msiRange;
 800527a:	687b      	ldr	r3, [r7, #4]
}
 800527c:	4618      	mov	r0, r3
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	021b      	lsls	r3, r3, #8
 800529e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052a2:	4313      	orrs	r3, r2
 80052a4:	604b      	str	r3, [r1, #4]
}
 80052a6:	bf00      	nop
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <LL_RCC_SetSysClkSource>:
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80052ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f023 0203 	bic.w	r2, r3, #3
 80052c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	608b      	str	r3, [r1, #8]
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <LL_RCC_GetSysClkSource>:
{
 80052da:	b480      	push	{r7}
 80052dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80052de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 030c 	and.w	r3, r3, #12
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <LL_RCC_SetAHBPrescaler>:
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80052fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005304:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4313      	orrs	r3, r2
 800530c:	608b      	str	r3, [r1, #8]
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <LL_C2_RCC_SetAHBPrescaler>:
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005326:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800532a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800532e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <LL_RCC_SetAHB4Prescaler>:
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800534e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005352:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005356:	f023 020f 	bic.w	r2, r3, #15
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <LL_RCC_SetAPB1Prescaler>:
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800537c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4313      	orrs	r3, r2
 800538e:	608b      	str	r3, [r1, #8]
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <LL_RCC_SetAPB2Prescaler>:
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80053a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80053ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	608b      	str	r3, [r1, #8]
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <LL_RCC_GetAHBPrescaler>:
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80053c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <LL_RCC_GetAHB4Prescaler>:
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80053e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <LL_RCC_GetAPB1Prescaler>:
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80053fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005406:	4618      	mov	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <LL_RCC_GetAPB2Prescaler>:
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800541e:	4618      	mov	r0, r3
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800542c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800543a:	6013      	str	r3, [r2, #0]
}
 800543c:	bf00      	nop
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005446:	b480      	push	{r7}
 8005448:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800544a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005454:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005458:	6013      	str	r3, [r2, #0]
}
 800545a:	bf00      	nop
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005472:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005476:	d101      	bne.n	800547c <LL_RCC_PLL_IsReady+0x18>
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <LL_RCC_PLL_IsReady+0x1a>
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800548c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005498:	4618      	mov	r0, r3
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80054a2:	b480      	push	{r7}
 80054a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80054a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80054ba:	b480      	push	{r7}
 80054bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80054be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80054d2:	b480      	push	{r7}
 80054d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80054d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0303 	and.w	r3, r3, #3
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80054ea:	b480      	push	{r7}
 80054ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80054ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fc:	d101      	bne.n	8005502 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800550e:	b480      	push	{r7}
 8005510:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005516:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800551a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800551e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005522:	d101      	bne.n	8005528 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800553c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005548:	d101      	bne.n	800554e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800555a:	b480      	push	{r7}
 800555c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800555e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800556c:	d101      	bne.n	8005572 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800557e:	b480      	push	{r7}
 8005580:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800558c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005590:	d101      	bne.n	8005596 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005592:	2301      	movs	r3, #1
 8005594:	e000      	b.n	8005598 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
	...

080055a4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055a4:	b590      	push	{r4, r7, lr}
 80055a6:	b08d      	sub	sp, #52	; 0x34
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e324      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0320 	and.w	r3, r3, #32
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 808d 	beq.w	80056de <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055c4:	f7ff fe89 	bl	80052da <LL_RCC_GetSysClkSource>
 80055c8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055ca:	f7ff ff82 	bl	80054d2 <LL_RCC_PLL_GetMainSource>
 80055ce:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80055d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d005      	beq.n	80055e2 <HAL_RCC_OscConfig+0x3e>
 80055d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d8:	2b0c      	cmp	r3, #12
 80055da:	d147      	bne.n	800566c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d144      	bne.n	800566c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e308      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80055f2:	f7ff fe34 	bl	800525e <LL_RCC_MSI_GetRange>
 80055f6:	4603      	mov	r3, r0
 80055f8:	429c      	cmp	r4, r3
 80055fa:	d914      	bls.n	8005626 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	4618      	mov	r0, r3
 8005602:	f000 fcf1 	bl	8005fe8 <RCC_SetFlashLatencyFromMSIRange>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e2f7      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff fe0e 	bl	8005236 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	4618      	mov	r0, r3
 8005620:	f7ff fe32 	bl	8005288 <LL_RCC_MSI_SetCalibTrimming>
 8005624:	e013      	b.n	800564e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	4618      	mov	r0, r3
 800562c:	f7ff fe03 	bl	8005236 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	4618      	mov	r0, r3
 8005636:	f7ff fe27 	bl	8005288 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fcd2 	bl	8005fe8 <RCC_SetFlashLatencyFromMSIRange>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e2d8      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800564e:	f000 fc8b 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8005652:	4603      	mov	r3, r0
 8005654:	4aa4      	ldr	r2, [pc, #656]	; (80058e8 <HAL_RCC_OscConfig+0x344>)
 8005656:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005658:	4ba4      	ldr	r3, [pc, #656]	; (80058ec <HAL_RCC_OscConfig+0x348>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f7fe fc97 	bl	8003f90 <HAL_InitTick>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d039      	beq.n	80056dc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e2c9      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01e      	beq.n	80056b2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005674:	f7ff fdb0 	bl	80051d8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005678:	f7fe fcd8 	bl	800402c <HAL_GetTick>
 800567c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005680:	f7fe fcd4 	bl	800402c <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e2b6      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005692:	f7ff fdbf 	bl	8005214 <LL_RCC_MSI_IsReady>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0f1      	beq.n	8005680 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff fdc8 	bl	8005236 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff fdec 	bl	8005288 <LL_RCC_MSI_SetCalibTrimming>
 80056b0:	e015      	b.n	80056de <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056b2:	f7ff fda0 	bl	80051f6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056b6:	f7fe fcb9 	bl	800402c <HAL_GetTick>
 80056ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056be:	f7fe fcb5 	bl	800402c <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e297      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 80056d0:	f7ff fda0 	bl	8005214 <LL_RCC_MSI_IsReady>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1f1      	bne.n	80056be <HAL_RCC_OscConfig+0x11a>
 80056da:	e000      	b.n	80056de <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80056dc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d047      	beq.n	800577a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056ea:	f7ff fdf6 	bl	80052da <LL_RCC_GetSysClkSource>
 80056ee:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056f0:	f7ff feef 	bl	80054d2 <LL_RCC_PLL_GetMainSource>
 80056f4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d005      	beq.n	8005708 <HAL_RCC_OscConfig+0x164>
 80056fc:	6a3b      	ldr	r3, [r7, #32]
 80056fe:	2b0c      	cmp	r3, #12
 8005700:	d108      	bne.n	8005714 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	2b03      	cmp	r3, #3
 8005706:	d105      	bne.n	8005714 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d134      	bne.n	800577a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e275      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800571c:	d102      	bne.n	8005724 <HAL_RCC_OscConfig+0x180>
 800571e:	f7ff fc11 	bl	8004f44 <LL_RCC_HSE_Enable>
 8005722:	e001      	b.n	8005728 <HAL_RCC_OscConfig+0x184>
 8005724:	f7ff fc1d 	bl	8004f62 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d012      	beq.n	8005756 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005730:	f7fe fc7c 	bl	800402c <HAL_GetTick>
 8005734:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005738:	f7fe fc78 	bl	800402c <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b64      	cmp	r3, #100	; 0x64
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e25a      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 800574a:	f7ff fc19 	bl	8004f80 <LL_RCC_HSE_IsReady>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0f1      	beq.n	8005738 <HAL_RCC_OscConfig+0x194>
 8005754:	e011      	b.n	800577a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005756:	f7fe fc69 	bl	800402c <HAL_GetTick>
 800575a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800575e:	f7fe fc65 	bl	800402c <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b64      	cmp	r3, #100	; 0x64
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e247      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005770:	f7ff fc06 	bl	8004f80 <LL_RCC_HSE_IsReady>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f1      	bne.n	800575e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d04c      	beq.n	8005820 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005786:	f7ff fda8 	bl	80052da <LL_RCC_GetSysClkSource>
 800578a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800578c:	f7ff fea1 	bl	80054d2 <LL_RCC_PLL_GetMainSource>
 8005790:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	2b04      	cmp	r3, #4
 8005796:	d005      	beq.n	80057a4 <HAL_RCC_OscConfig+0x200>
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	2b0c      	cmp	r3, #12
 800579c:	d10e      	bne.n	80057bc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d10b      	bne.n	80057bc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e227      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff fc25 	bl	8005004 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80057ba:	e031      	b.n	8005820 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d019      	beq.n	80057f8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057c4:	f7ff fbee 	bl	8004fa4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c8:	f7fe fc30 	bl	800402c <HAL_GetTick>
 80057cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057d0:	f7fe fc2c 	bl	800402c <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e20e      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 80057e2:	f7ff fbfd 	bl	8004fe0 <LL_RCC_HSI_IsReady>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0f1      	beq.n	80057d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff fc07 	bl	8005004 <LL_RCC_HSI_SetCalibTrimming>
 80057f6:	e013      	b.n	8005820 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057f8:	f7ff fbe3 	bl	8004fc2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057fc:	f7fe fc16 	bl	800402c <HAL_GetTick>
 8005800:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005804:	f7fe fc12 	bl	800402c <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e1f4      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005816:	f7ff fbe3 	bl	8004fe0 <LL_RCC_HSI_IsReady>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1f1      	bne.n	8005804 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0308 	and.w	r3, r3, #8
 8005828:	2b00      	cmp	r3, #0
 800582a:	d106      	bne.n	800583a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 80a3 	beq.w	8005980 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d076      	beq.n	8005930 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0310 	and.w	r3, r3, #16
 800584a:	2b00      	cmp	r3, #0
 800584c:	d046      	beq.n	80058dc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800584e:	f7ff fc66 	bl	800511e <LL_RCC_LSI1_IsReady>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d113      	bne.n	8005880 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005858:	f7ff fc3f 	bl	80050da <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800585c:	f7fe fbe6 	bl	800402c <HAL_GetTick>
 8005860:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005864:	f7fe fbe2 	bl	800402c <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e1c4      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005876:	f7ff fc52 	bl	800511e <LL_RCC_LSI1_IsReady>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0f1      	beq.n	8005864 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005880:	f7ff fc5f 	bl	8005142 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005884:	f7fe fbd2 	bl	800402c <HAL_GetTick>
 8005888:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800588c:	f7fe fbce 	bl	800402c <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b03      	cmp	r3, #3
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e1b0      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800589e:	f7ff fc72 	bl	8005186 <LL_RCC_LSI2_IsReady>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0f1      	beq.n	800588c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff fc7c 	bl	80051aa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80058b2:	f7ff fc23 	bl	80050fc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b6:	f7fe fbb9 	bl	800402c <HAL_GetTick>
 80058ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80058be:	f7fe fbb5 	bl	800402c <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e197      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80058d0:	f7ff fc25 	bl	800511e <LL_RCC_LSI1_IsReady>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1f1      	bne.n	80058be <HAL_RCC_OscConfig+0x31a>
 80058da:	e051      	b.n	8005980 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80058dc:	f7ff fbfd 	bl	80050da <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e0:	f7fe fba4 	bl	800402c <HAL_GetTick>
 80058e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80058e6:	e00c      	b.n	8005902 <HAL_RCC_OscConfig+0x35e>
 80058e8:	20000044 	.word	0x20000044
 80058ec:	20000048 	.word	0x20000048
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80058f0:	f7fe fb9c 	bl	800402c <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e17e      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005902:	f7ff fc0c 	bl	800511e <LL_RCC_LSI1_IsReady>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0f1      	beq.n	80058f0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800590c:	f7ff fc2a 	bl	8005164 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005910:	e008      	b.n	8005924 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005912:	f7fe fb8b 	bl	800402c <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b03      	cmp	r3, #3
 800591e:	d901      	bls.n	8005924 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e16d      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005924:	f7ff fc2f 	bl	8005186 <LL_RCC_LSI2_IsReady>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1f1      	bne.n	8005912 <HAL_RCC_OscConfig+0x36e>
 800592e:	e027      	b.n	8005980 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005930:	f7ff fc18 	bl	8005164 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005934:	f7fe fb7a 	bl	800402c <HAL_GetTick>
 8005938:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800593c:	f7fe fb76 	bl	800402c <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b03      	cmp	r3, #3
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e158      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800594e:	f7ff fc1a 	bl	8005186 <LL_RCC_LSI2_IsReady>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d1f1      	bne.n	800593c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005958:	f7ff fbd0 	bl	80050fc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800595c:	f7fe fb66 	bl	800402c <HAL_GetTick>
 8005960:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005962:	e008      	b.n	8005976 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005964:	f7fe fb62 	bl	800402c <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b02      	cmp	r3, #2
 8005970:	d901      	bls.n	8005976 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e144      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005976:	f7ff fbd2 	bl	800511e <LL_RCC_LSI1_IsReady>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1f1      	bne.n	8005964 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b00      	cmp	r3, #0
 800598a:	d05b      	beq.n	8005a44 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800598c:	4b9e      	ldr	r3, [pc, #632]	; (8005c08 <HAL_RCC_OscConfig+0x664>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d114      	bne.n	80059c2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005998:	f7ff fa9c 	bl	8004ed4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800599c:	f7fe fb46 	bl	800402c <HAL_GetTick>
 80059a0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059a4:	f7fe fb42 	bl	800402c <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e124      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059b6:	4b94      	ldr	r3, [pc, #592]	; (8005c08 <HAL_RCC_OscConfig+0x664>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0f0      	beq.n	80059a4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d102      	bne.n	80059d0 <HAL_RCC_OscConfig+0x42c>
 80059ca:	f7ff fb30 	bl	800502e <LL_RCC_LSE_Enable>
 80059ce:	e00c      	b.n	80059ea <HAL_RCC_OscConfig+0x446>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	2b05      	cmp	r3, #5
 80059d6:	d104      	bne.n	80059e2 <HAL_RCC_OscConfig+0x43e>
 80059d8:	f7ff fb4b 	bl	8005072 <LL_RCC_LSE_EnableBypass>
 80059dc:	f7ff fb27 	bl	800502e <LL_RCC_LSE_Enable>
 80059e0:	e003      	b.n	80059ea <HAL_RCC_OscConfig+0x446>
 80059e2:	f7ff fb35 	bl	8005050 <LL_RCC_LSE_Disable>
 80059e6:	f7ff fb55 	bl	8005094 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d014      	beq.n	8005a1c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059f2:	f7fe fb1b 	bl	800402c <HAL_GetTick>
 80059f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80059f8:	e00a      	b.n	8005a10 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059fa:	f7fe fb17 	bl	800402c <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d901      	bls.n	8005a10 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e0f7      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005a10:	f7ff fb51 	bl	80050b6 <LL_RCC_LSE_IsReady>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0ef      	beq.n	80059fa <HAL_RCC_OscConfig+0x456>
 8005a1a:	e013      	b.n	8005a44 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1c:	f7fe fb06 	bl	800402c <HAL_GetTick>
 8005a20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005a22:	e00a      	b.n	8005a3a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a24:	f7fe fb02 	bl	800402c <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e0e2      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005a3a:	f7ff fb3c 	bl	80050b6 <LL_RCC_LSE_IsReady>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1ef      	bne.n	8005a24 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f000 80d8 	beq.w	8005bfe <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a4e:	f7ff fc44 	bl	80052da <LL_RCC_GetSysClkSource>
 8005a52:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	f040 80a6 	bne.w	8005bb2 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f003 0203 	and.w	r2, r3, #3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d123      	bne.n	8005abc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d11c      	bne.n	8005abc <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	0a1b      	lsrs	r3, r3, #8
 8005a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d114      	bne.n	8005abc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d10d      	bne.n	8005abc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d106      	bne.n	8005abc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d054      	beq.n	8005b66 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	2b0c      	cmp	r3, #12
 8005ac0:	d04f      	beq.n	8005b62 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005ac2:	f7ff fcc0 	bl	8005446 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ac6:	f7fe fab1 	bl	800402c <HAL_GetTick>
 8005aca:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005acc:	e008      	b.n	8005ae0 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ace:	f7fe faad 	bl	800402c <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d901      	bls.n	8005ae0 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	e08f      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1ef      	bne.n	8005ace <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	4b45      	ldr	r3, [pc, #276]	; (8005c0c <HAL_RCC_OscConfig+0x668>)
 8005af6:	4013      	ands	r3, r2
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b00:	4311      	orrs	r1, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b06:	0212      	lsls	r2, r2, #8
 8005b08:	4311      	orrs	r1, r2
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b0e:	4311      	orrs	r1, r2
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b14:	4311      	orrs	r1, r2
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b20:	4313      	orrs	r3, r2
 8005b22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b24:	f7ff fc80 	bl	8005428 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b38:	f7fe fa78 	bl	800402c <HAL_GetTick>
 8005b3c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b40:	f7fe fa74 	bl	800402c <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e056      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0ef      	beq.n	8005b40 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b60:	e04d      	b.n	8005bfe <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e04c      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d144      	bne.n	8005bfe <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b74:	f7ff fc58 	bl	8005428 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b88:	f7fe fa50 	bl	800402c <HAL_GetTick>
 8005b8c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b90:	f7fe fa4c 	bl	800402c <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e02e      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0ef      	beq.n	8005b90 <HAL_RCC_OscConfig+0x5ec>
 8005bb0:	e025      	b.n	8005bfe <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b0c      	cmp	r3, #12
 8005bb6:	d020      	beq.n	8005bfa <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bb8:	f7ff fc45 	bl	8005446 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bbc:	f7fe fa36 	bl	800402c <HAL_GetTick>
 8005bc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bc4:	f7fe fa32 	bl	800402c <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e014      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1ef      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8005be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bf2:	f023 0303 	bic.w	r3, r3, #3
 8005bf6:	60d3      	str	r3, [r2, #12]
 8005bf8:	e001      	b.n	8005bfe <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e000      	b.n	8005c00 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3734      	adds	r7, #52	; 0x34
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd90      	pop	{r4, r7, pc}
 8005c08:	58000400 	.word	0x58000400
 8005c0c:	11c1808c 	.word	0x11c1808c

08005c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e12d      	b.n	8005e80 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c24:	4b98      	ldr	r3, [pc, #608]	; (8005e88 <HAL_RCC_ClockConfig+0x278>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d91b      	bls.n	8005c6a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c32:	4b95      	ldr	r3, [pc, #596]	; (8005e88 <HAL_RCC_ClockConfig+0x278>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f023 0207 	bic.w	r2, r3, #7
 8005c3a:	4993      	ldr	r1, [pc, #588]	; (8005e88 <HAL_RCC_ClockConfig+0x278>)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c42:	f7fe f9f3 	bl	800402c <HAL_GetTick>
 8005c46:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c48:	e008      	b.n	8005c5c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005c4a:	f7fe f9ef 	bl	800402c <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d901      	bls.n	8005c5c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e111      	b.n	8005e80 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c5c:	4b8a      	ldr	r3, [pc, #552]	; (8005e88 <HAL_RCC_ClockConfig+0x278>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d1ef      	bne.n	8005c4a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d016      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff fb39 	bl	80052f2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c80:	f7fe f9d4 	bl	800402c <HAL_GetTick>
 8005c84:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c88:	f7fe f9d0 	bl	800402c <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e0f2      	b.n	8005e80 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005c9a:	f7ff fc26 	bl	80054ea <LL_RCC_IsActiveFlag_HPRE>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0f1      	beq.n	8005c88 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0320 	and.w	r3, r3, #32
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d016      	beq.n	8005cde <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7ff fb30 	bl	800531a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005cba:	f7fe f9b7 	bl	800402c <HAL_GetTick>
 8005cbe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005cc2:	f7fe f9b3 	bl	800402c <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e0d5      	b.n	8005e80 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005cd4:	f7ff fc1b 	bl	800550e <LL_RCC_IsActiveFlag_C2HPRE>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0f1      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d016      	beq.n	8005d18 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff fb29 	bl	8005346 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005cf4:	f7fe f99a 	bl	800402c <HAL_GetTick>
 8005cf8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005cfc:	f7fe f996 	bl	800402c <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e0b8      	b.n	8005e80 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005d0e:	f7ff fc11 	bl	8005534 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d0f1      	beq.n	8005cfc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d016      	beq.n	8005d52 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f7ff fb23 	bl	8005374 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d2e:	f7fe f97d 	bl	800402c <HAL_GetTick>
 8005d32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005d34:	e008      	b.n	8005d48 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d36:	f7fe f979 	bl	800402c <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d901      	bls.n	8005d48 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e09b      	b.n	8005e80 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005d48:	f7ff fc07 	bl	800555a <LL_RCC_IsActiveFlag_PPRE1>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0f1      	beq.n	8005d36 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0308 	and.w	r3, r3, #8
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d017      	beq.n	8005d8e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7ff fb19 	bl	800539c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d6a:	f7fe f95f 	bl	800402c <HAL_GetTick>
 8005d6e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005d70:	e008      	b.n	8005d84 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d72:	f7fe f95b 	bl	800402c <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e07d      	b.n	8005e80 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005d84:	f7ff fbfb 	bl	800557e <LL_RCC_IsActiveFlag_PPRE2>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0f1      	beq.n	8005d72 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d043      	beq.n	8005e22 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d106      	bne.n	8005db0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005da2:	f7ff f8ed 	bl	8004f80 <LL_RCC_HSE_IsReady>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d11e      	bne.n	8005dea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e067      	b.n	8005e80 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	2b03      	cmp	r3, #3
 8005db6:	d106      	bne.n	8005dc6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005db8:	f7ff fb54 	bl	8005464 <LL_RCC_PLL_IsReady>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d113      	bne.n	8005dea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e05c      	b.n	8005e80 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005dce:	f7ff fa21 	bl	8005214 <LL_RCC_MSI_IsReady>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d108      	bne.n	8005dea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e051      	b.n	8005e80 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005ddc:	f7ff f900 	bl	8004fe0 <LL_RCC_HSI_IsReady>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e04a      	b.n	8005e80 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7ff fa5f 	bl	80052b2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005df4:	f7fe f91a 	bl	800402c <HAL_GetTick>
 8005df8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dfa:	e00a      	b.n	8005e12 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dfc:	f7fe f916 	bl	800402c <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e036      	b.n	8005e80 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e12:	f7ff fa62 	bl	80052da <LL_RCC_GetSysClkSource>
 8005e16:	4602      	mov	r2, r0
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d1ec      	bne.n	8005dfc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e22:	4b19      	ldr	r3, [pc, #100]	; (8005e88 <HAL_RCC_ClockConfig+0x278>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d21b      	bcs.n	8005e68 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e30:	4b15      	ldr	r3, [pc, #84]	; (8005e88 <HAL_RCC_ClockConfig+0x278>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f023 0207 	bic.w	r2, r3, #7
 8005e38:	4913      	ldr	r1, [pc, #76]	; (8005e88 <HAL_RCC_ClockConfig+0x278>)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e40:	f7fe f8f4 	bl	800402c <HAL_GetTick>
 8005e44:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005e48:	f7fe f8f0 	bl	800402c <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e012      	b.n	8005e80 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e5a:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <HAL_RCC_ClockConfig+0x278>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0307 	and.w	r3, r3, #7
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d1ef      	bne.n	8005e48 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005e68:	f000 f87e 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	4a07      	ldr	r2, [pc, #28]	; (8005e8c <HAL_RCC_ClockConfig+0x27c>)
 8005e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005e72:	f7fe f8e7 	bl	8004044 <HAL_GetTickPrio>
 8005e76:	4603      	mov	r3, r0
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fe f889 	bl	8003f90 <HAL_InitTick>
 8005e7e:	4603      	mov	r3, r0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	58004000 	.word	0x58004000
 8005e8c:	20000044 	.word	0x20000044

08005e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e90:	b590      	push	{r4, r7, lr}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e96:	f7ff fa20 	bl	80052da <LL_RCC_GetSysClkSource>
 8005e9a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10a      	bne.n	8005eb8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005ea2:	f7ff f9dc 	bl	800525e <LL_RCC_MSI_GetRange>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	091b      	lsrs	r3, r3, #4
 8005eaa:	f003 030f 	and.w	r3, r3, #15
 8005eae:	4a2b      	ldr	r2, [pc, #172]	; (8005f5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eb4:	60fb      	str	r3, [r7, #12]
 8005eb6:	e04b      	b.n	8005f50 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d102      	bne.n	8005ec4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ebe:	4b28      	ldr	r3, [pc, #160]	; (8005f60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	e045      	b.n	8005f50 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	d10a      	bne.n	8005ee0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005eca:	f7ff f829 	bl	8004f20 <LL_RCC_HSE_IsEnabledDiv2>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d102      	bne.n	8005eda <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005ed4:	4b22      	ldr	r3, [pc, #136]	; (8005f60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	e03a      	b.n	8005f50 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005eda:	4b22      	ldr	r3, [pc, #136]	; (8005f64 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	e037      	b.n	8005f50 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005ee0:	f7ff faf7 	bl	80054d2 <LL_RCC_PLL_GetMainSource>
 8005ee4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d003      	beq.n	8005ef4 <HAL_RCC_GetSysClockFreq+0x64>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d003      	beq.n	8005efa <HAL_RCC_GetSysClockFreq+0x6a>
 8005ef2:	e00d      	b.n	8005f10 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005ef4:	4b1a      	ldr	r3, [pc, #104]	; (8005f60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ef6:	60bb      	str	r3, [r7, #8]
        break;
 8005ef8:	e015      	b.n	8005f26 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005efa:	f7ff f811 	bl	8004f20 <LL_RCC_HSE_IsEnabledDiv2>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d102      	bne.n	8005f0a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005f04:	4b16      	ldr	r3, [pc, #88]	; (8005f60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005f06:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005f08:	e00d      	b.n	8005f26 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005f0a:	4b16      	ldr	r3, [pc, #88]	; (8005f64 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005f0c:	60bb      	str	r3, [r7, #8]
        break;
 8005f0e:	e00a      	b.n	8005f26 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005f10:	f7ff f9a5 	bl	800525e <LL_RCC_MSI_GetRange>
 8005f14:	4603      	mov	r3, r0
 8005f16:	091b      	lsrs	r3, r3, #4
 8005f18:	f003 030f 	and.w	r3, r3, #15
 8005f1c:	4a0f      	ldr	r2, [pc, #60]	; (8005f5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f22:	60bb      	str	r3, [r7, #8]
        break;
 8005f24:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005f26:	f7ff faaf 	bl	8005488 <LL_RCC_PLL_GetN>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	fb03 f402 	mul.w	r4, r3, r2
 8005f32:	f7ff fac2 	bl	80054ba <LL_RCC_PLL_GetDivider>
 8005f36:	4603      	mov	r3, r0
 8005f38:	091b      	lsrs	r3, r3, #4
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005f40:	f7ff faaf 	bl	80054a2 <LL_RCC_PLL_GetR>
 8005f44:	4603      	mov	r3, r0
 8005f46:	0f5b      	lsrs	r3, r3, #29
 8005f48:	3301      	adds	r3, #1
 8005f4a:	fbb4 f3f3 	udiv	r3, r4, r3
 8005f4e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005f50:	68fb      	ldr	r3, [r7, #12]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd90      	pop	{r4, r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	0800efc8 	.word	0x0800efc8
 8005f60:	00f42400 	.word	0x00f42400
 8005f64:	01e84800 	.word	0x01e84800

08005f68 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f68:	b598      	push	{r3, r4, r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005f6c:	f7ff ff90 	bl	8005e90 <HAL_RCC_GetSysClockFreq>
 8005f70:	4604      	mov	r4, r0
 8005f72:	f7ff fa27 	bl	80053c4 <LL_RCC_GetAHBPrescaler>
 8005f76:	4603      	mov	r3, r0
 8005f78:	091b      	lsrs	r3, r3, #4
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	4a03      	ldr	r2, [pc, #12]	; (8005f8c <HAL_RCC_GetHCLKFreq+0x24>)
 8005f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f84:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	bd98      	pop	{r3, r4, r7, pc}
 8005f8c:	0800ef68 	.word	0x0800ef68

08005f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f90:	b598      	push	{r3, r4, r7, lr}
 8005f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005f94:	f7ff ffe8 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8005f98:	4604      	mov	r4, r0
 8005f9a:	f7ff fa2d 	bl	80053f8 <LL_RCC_GetAPB1Prescaler>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	0a1b      	lsrs	r3, r3, #8
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	4a04      	ldr	r2, [pc, #16]	; (8005fb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fac:	f003 031f 	and.w	r3, r3, #31
 8005fb0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	bd98      	pop	{r3, r4, r7, pc}
 8005fb8:	0800efa8 	.word	0x0800efa8

08005fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fbc:	b598      	push	{r3, r4, r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005fc0:	f7ff ffd2 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	f7ff fa23 	bl	8005410 <LL_RCC_GetAPB2Prescaler>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	0adb      	lsrs	r3, r3, #11
 8005fce:	f003 0307 	and.w	r3, r3, #7
 8005fd2:	4a04      	ldr	r2, [pc, #16]	; (8005fe4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd8:	f003 031f 	and.w	r3, r3, #31
 8005fdc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	bd98      	pop	{r3, r4, r7, pc}
 8005fe4:	0800efa8 	.word	0x0800efa8

08005fe8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2bb0      	cmp	r3, #176	; 0xb0
 8005ff4:	d903      	bls.n	8005ffe <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005ff6:	4b14      	ldr	r3, [pc, #80]	; (8006048 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	60fb      	str	r3, [r7, #12]
 8005ffc:	e007      	b.n	800600e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	091b      	lsrs	r3, r3, #4
 8006002:	f003 030f 	and.w	r3, r3, #15
 8006006:	4a10      	ldr	r2, [pc, #64]	; (8006048 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8006008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800600c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800600e:	f7ff f9e5 	bl	80053dc <LL_RCC_GetAHB4Prescaler>
 8006012:	4603      	mov	r3, r0
 8006014:	091b      	lsrs	r3, r3, #4
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	4a0c      	ldr	r2, [pc, #48]	; (800604c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800601c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	fbb2 f3f3 	udiv	r3, r2, r3
 8006026:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4a09      	ldr	r2, [pc, #36]	; (8006050 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800602c:	fba2 2303 	umull	r2, r3, r2, r3
 8006030:	0c9b      	lsrs	r3, r3, #18
 8006032:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006036:	4618      	mov	r0, r3
 8006038:	f000 f80c 	bl	8006054 <RCC_SetFlashLatency>
 800603c:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	0800efc8 	.word	0x0800efc8
 800604c:	0800ef68 	.word	0x0800ef68
 8006050:	431bde83 	.word	0x431bde83

08006054 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006054:	b590      	push	{r4, r7, lr}
 8006056:	b08f      	sub	sp, #60	; 0x3c
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800605e:	4b24      	ldr	r3, [pc, #144]	; (80060f0 <RCC_SetFlashLatency+0x9c>)
 8006060:	f107 041c 	add.w	r4, r7, #28
 8006064:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006066:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800606a:	4b22      	ldr	r3, [pc, #136]	; (80060f4 <RCC_SetFlashLatency+0xa0>)
 800606c:	f107 040c 	add.w	r4, r7, #12
 8006070:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006072:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006076:	2300      	movs	r3, #0
 8006078:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800607a:	2300      	movs	r3, #0
 800607c:	633b      	str	r3, [r7, #48]	; 0x30
 800607e:	e013      	b.n	80060a8 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	3338      	adds	r3, #56	; 0x38
 8006086:	443b      	add	r3, r7
 8006088:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	429a      	cmp	r2, r3
 8006090:	d807      	bhi.n	80060a2 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	3338      	adds	r3, #56	; 0x38
 8006098:	443b      	add	r3, r7
 800609a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800609e:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80060a0:	e005      	b.n	80060ae <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	3301      	adds	r3, #1
 80060a6:	633b      	str	r3, [r7, #48]	; 0x30
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d9e8      	bls.n	8006080 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80060ae:	4b12      	ldr	r3, [pc, #72]	; (80060f8 <RCC_SetFlashLatency+0xa4>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f023 0207 	bic.w	r2, r3, #7
 80060b6:	4910      	ldr	r1, [pc, #64]	; (80060f8 <RCC_SetFlashLatency+0xa4>)
 80060b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ba:	4313      	orrs	r3, r2
 80060bc:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060be:	f7fd ffb5 	bl	800402c <HAL_GetTick>
 80060c2:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80060c4:	e008      	b.n	80060d8 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80060c6:	f7fd ffb1 	bl	800402c <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d901      	bls.n	80060d8 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e007      	b.n	80060e8 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80060d8:	4b07      	ldr	r3, [pc, #28]	; (80060f8 <RCC_SetFlashLatency+0xa4>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0307 	and.w	r3, r3, #7
 80060e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d1ef      	bne.n	80060c6 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	373c      	adds	r7, #60	; 0x3c
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd90      	pop	{r4, r7, pc}
 80060f0:	0800edd0 	.word	0x0800edd0
 80060f4:	0800ede0 	.word	0x0800ede0
 80060f8:	58004000 	.word	0x58004000

080060fc <LL_RCC_LSE_IsEnabled>:
{
 80060fc:	b480      	push	{r7}
 80060fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b01      	cmp	r3, #1
 800610e:	d101      	bne.n	8006114 <LL_RCC_LSE_IsEnabled+0x18>
 8006110:	2301      	movs	r3, #1
 8006112:	e000      	b.n	8006116 <LL_RCC_LSE_IsEnabled+0x1a>
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <LL_RCC_LSE_IsReady>:
{
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612c:	f003 0302 	and.w	r3, r3, #2
 8006130:	2b02      	cmp	r3, #2
 8006132:	d101      	bne.n	8006138 <LL_RCC_LSE_IsReady+0x18>
 8006134:	2301      	movs	r3, #1
 8006136:	e000      	b.n	800613a <LL_RCC_LSE_IsReady+0x1a>
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <LL_RCC_SetRFWKPClockSource>:
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800614c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006154:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006158:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4313      	orrs	r3, r2
 8006160:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <LL_RCC_SetSMPSClockSource>:
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	f023 0203 	bic.w	r2, r3, #3
 8006182:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4313      	orrs	r3, r2
 800618a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <LL_RCC_SetSMPSPrescaler>:
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80061a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <LL_RCC_SetUSARTClockSource>:
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80061c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d0:	f023 0203 	bic.w	r2, r3, #3
 80061d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4313      	orrs	r3, r2
 80061dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <LL_RCC_SetLPUARTClockSource>:
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80061f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006200:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <LL_RCC_SetI2CClockSource>:
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006224:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	091b      	lsrs	r3, r3, #4
 800622c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006230:	43db      	mvns	r3, r3
 8006232:	401a      	ands	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	011b      	lsls	r3, r3, #4
 8006238:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800623c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006240:	4313      	orrs	r3, r2
 8006242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <LL_RCC_SetLPTIMClockSource>:
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800625a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800625e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	0c1b      	lsrs	r3, r3, #16
 8006266:	041b      	lsls	r3, r3, #16
 8006268:	43db      	mvns	r3, r3
 800626a:	401a      	ands	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	041b      	lsls	r3, r3, #16
 8006270:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006274:	4313      	orrs	r3, r2
 8006276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <LL_RCC_SetRNGClockSource>:
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800628e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006296:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800629a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80062a6:	bf00      	nop
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <LL_RCC_SetCLK48ClockSource>:
{
 80062b2:	b480      	push	{r7}
 80062b4:	b083      	sub	sp, #12
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80062ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80062d2:	bf00      	nop
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <LL_RCC_SetADCClockSource>:
{
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80062e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80062f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <LL_RCC_SetRTCClockSource>:
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800631e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4313      	orrs	r3, r2
 8006326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <LL_RCC_GetRTCClockSource>:
{
 8006336:	b480      	push	{r7}
 8006338:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800633a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800633e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006342:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006346:	4618      	mov	r0, r3
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <LL_RCC_ForceBackupDomainReset>:
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800635c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006364:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006368:	bf00      	nop
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006372:	b480      	push	{r7}
 8006374:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800637a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800637e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006386:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800638a:	bf00      	nop
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b088      	sub	sp, #32
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800639c:	2300      	movs	r3, #0
 800639e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80063a0:	2300      	movs	r3, #0
 80063a2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d046      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80063b0:	f7ff ffc1 	bl	8006336 <LL_RCC_GetRTCClockSource>
 80063b4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d03c      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80063c0:	f7fe fd88 	bl	8004ed4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d105      	bne.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7ff ff9b 	bl	800630a <LL_RCC_SetRTCClockSource>
 80063d4:	e02e      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80063d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063de:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80063e0:	f7ff ffb6 	bl	8006350 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80063e4:	f7ff ffc5 	bl	8006372 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80063f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006400:	f7ff fe7c 	bl	80060fc <LL_RCC_LSE_IsEnabled>
 8006404:	4603      	mov	r3, r0
 8006406:	2b01      	cmp	r3, #1
 8006408:	d114      	bne.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800640a:	f7fd fe0f 	bl	800402c <HAL_GetTick>
 800640e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006410:	e00b      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006412:	f7fd fe0b 	bl	800402c <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006420:	4293      	cmp	r3, r2
 8006422:	d902      	bls.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	77fb      	strb	r3, [r7, #31]
              break;
 8006428:	e004      	b.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 800642a:	f7ff fe79 	bl	8006120 <LL_RCC_LSE_IsReady>
 800642e:	4603      	mov	r3, r0
 8006430:	2b01      	cmp	r3, #1
 8006432:	d1ee      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006434:	7ffb      	ldrb	r3, [r7, #31]
 8006436:	77bb      	strb	r3, [r7, #30]
 8006438:	e001      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800643a:	7ffb      	ldrb	r3, [r7, #31]
 800643c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d004      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	4618      	mov	r0, r3
 8006450:	f7ff feb6 	bl	80061c0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d004      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff fec1 	bl	80061ec <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0310 	and.w	r3, r3, #16
 8006472:	2b00      	cmp	r3, #0
 8006474:	d004      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff fee9 	bl	8006252 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 0320 	and.w	r3, r3, #32
 8006488:	2b00      	cmp	r3, #0
 800648a:	d004      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	4618      	mov	r0, r3
 8006492:	f7ff fede 	bl	8006252 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0304 	and.w	r3, r3, #4
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d004      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff feb6 	bl	8006218 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d02b      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c0:	d008      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064ca:	d003      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d105      	bne.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	4618      	mov	r0, r3
 80064da:	f7ff fed4 	bl	8006286 <LL_RCC_SetRNGClockSource>
 80064de:	e00a      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x162>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	2000      	movs	r0, #0
 80064ec:	f7ff fecb 	bl	8006286 <LL_RCC_SetRNGClockSource>
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f7ff fede 	bl	80062b2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80064fe:	d107      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800650a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800650e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006518:	2b00      	cmp	r3, #0
 800651a:	d011      	beq.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	4618      	mov	r0, r3
 8006522:	f7ff fedc 	bl	80062de <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800652e:	d107      	bne.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800653a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800653e:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d004      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	4618      	mov	r0, r3
 8006552:	f7ff fdf7 	bl	8006144 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d009      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff fe16 	bl	8006198 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff fdfd 	bl	8006170 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006576:	7fbb      	ldrb	r3, [r7, #30]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3720      	adds	r7, #32
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e09f      	b.n	80066d2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7fc fa62 	bl	8002a70 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80065b4:	4b49      	ldr	r3, [pc, #292]	; (80066dc <HAL_RTC_Init+0x15c>)
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f003 0310 	and.w	r3, r3, #16
 80065bc:	2b10      	cmp	r3, #16
 80065be:	d07e      	beq.n	80066be <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	22ca      	movs	r2, #202	; 0xca
 80065c6:	625a      	str	r2, [r3, #36]	; 0x24
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2253      	movs	r2, #83	; 0x53
 80065ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f8ab 	bl	800672c <RTC_EnterInitMode>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00a      	beq.n	80065f2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	22ff      	movs	r2, #255	; 0xff
 80065e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2204      	movs	r2, #4
 80065e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	73fb      	strb	r3, [r7, #15]
 80065f0:	e067      	b.n	80066c2 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	6812      	ldr	r2, [r2, #0]
 80065fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006604:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	6899      	ldr	r1, [r3, #8]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	431a      	orrs	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	431a      	orrs	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	68d2      	ldr	r2, [r2, #12]
 800662c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	6919      	ldr	r1, [r3, #16]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	041a      	lsls	r2, r3, #16
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006650:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0202 	bic.w	r2, r2, #2
 8006660:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69da      	ldr	r2, [r3, #28]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	431a      	orrs	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f003 0320 	and.w	r3, r3, #32
 8006684:	2b00      	cmp	r3, #0
 8006686:	d113      	bne.n	80066b0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f829 	bl	80066e0 <HAL_RTC_WaitForSynchro>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00d      	beq.n	80066b0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	22ff      	movs	r2, #255	; 0xff
 800669a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2204      	movs	r2, #4
 80066a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e010      	b.n	80066d2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	22ff      	movs	r2, #255	; 0xff
 80066b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80066b8:	2300      	movs	r3, #0
 80066ba:	73fb      	strb	r3, [r7, #15]
 80066bc:	e001      	b.n	80066c2 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d103      	bne.n	80066d0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40002800 	.word	0x40002800

080066e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066f6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80066f8:	f7fd fc98 	bl	800402c <HAL_GetTick>
 80066fc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80066fe:	e009      	b.n	8006714 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006700:	f7fd fc94 	bl	800402c <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800670e:	d901      	bls.n	8006714 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e007      	b.n	8006724 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0ee      	beq.n	8006700 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800673e:	2b00      	cmp	r3, #0
 8006740:	d119      	bne.n	8006776 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f04f 32ff 	mov.w	r2, #4294967295
 800674a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800674c:	f7fd fc6e 	bl	800402c <HAL_GetTick>
 8006750:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006752:	e009      	b.n	8006768 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006754:	f7fd fc6a 	bl	800402c <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006762:	d901      	bls.n	8006768 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006764:	2303      	movs	r3, #3
 8006766:	e007      	b.n	8006778 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d0ee      	beq.n	8006754 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006796:	2302      	movs	r3, #2
 8006798:	e0a8      	b.n	80068ec <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2202      	movs	r2, #2
 80067a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	22ca      	movs	r2, #202	; 0xca
 80067b0:	625a      	str	r2, [r3, #36]	; 0x24
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2253      	movs	r2, #83	; 0x53
 80067b8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d020      	beq.n	800680a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80067c8:	f7fd fc30 	bl	800402c <HAL_GetTick>
 80067cc:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80067ce:	e015      	b.n	80067fc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067d0:	f7fd fc2c 	bl	800402c <HAL_GetTick>
 80067d4:	4602      	mov	r2, r0
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067de:	d90d      	bls.n	80067fc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	22ff      	movs	r2, #255	; 0xff
 80067e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2203      	movs	r2, #3
 80067ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e077      	b.n	80068ec <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f003 0304 	and.w	r3, r3, #4
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e2      	bne.n	80067d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	689a      	ldr	r2, [r3, #8]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006818:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	b2da      	uxtb	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800682a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800682c:	f7fd fbfe 	bl	800402c <HAL_GetTick>
 8006830:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006832:	e015      	b.n	8006860 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006834:	f7fd fbfa 	bl	800402c <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006842:	d90d      	bls.n	8006860 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	22ff      	movs	r2, #255	; 0xff
 800684a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2203      	movs	r2, #3
 8006850:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e045      	b.n	80068ec <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0e2      	beq.n	8006834 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689a      	ldr	r2, [r3, #8]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0207 	bic.w	r2, r2, #7
 8006884:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	6899      	ldr	r1, [r3, #8]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	430a      	orrs	r2, r1
 8006894:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006896:	4b17      	ldr	r3, [pc, #92]	; (80068f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006898:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800689c:	4a15      	ldr	r2, [pc, #84]	; (80068f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800689e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80068a6:	4b13      	ldr	r3, [pc, #76]	; (80068f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a12      	ldr	r2, [pc, #72]	; (80068f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80068ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068b0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068c0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80068d0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	22ff      	movs	r2, #255	; 0xff
 80068d8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	58000800 	.word	0x58000800

080068f8 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d101      	bne.n	800690e <HAL_RTCEx_EnableBypassShadow+0x16>
 800690a:	2302      	movs	r3, #2
 800690c:	e024      	b.n	8006958 <HAL_RTCEx_EnableBypassShadow+0x60>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2202      	movs	r2, #2
 800691a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	22ca      	movs	r2, #202	; 0xca
 8006924:	625a      	str	r2, [r3, #36]	; 0x24
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2253      	movs	r2, #83	; 0x53
 800692c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f042 0220 	orr.w	r2, r2, #32
 800693c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	22ff      	movs	r2, #255	; 0xff
 8006944:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2201      	movs	r2, #1
 800694a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <LL_RCC_GetUSARTClockSource>:
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800696c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006970:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4013      	ands	r3, r2
}
 8006978:	4618      	mov	r0, r3
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <LL_RCC_GetLPUARTClockSource>:
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800698c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006990:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4013      	ands	r3, r2
}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e042      	b.n	8006a3c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d106      	bne.n	80069ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f7fc f891 	bl	8002af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2224      	movs	r2, #36	; 0x24
 80069d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f022 0201 	bic.w	r2, r2, #1
 80069e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fe60 	bl	80076b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fc35 	bl	8007264 <UART_SetConfig>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d101      	bne.n	8006a04 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e01b      	b.n	8006a3c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685a      	ldr	r2, [r3, #4]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689a      	ldr	r2, [r3, #8]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0201 	orr.w	r2, r2, #1
 8006a32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fedf 	bl	80077f8 <UART_CheckIdleState>
 8006a3a:	4603      	mov	r3, r0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b08a      	sub	sp, #40	; 0x28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a58:	2b20      	cmp	r3, #32
 8006a5a:	d137      	bne.n	8006acc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d002      	beq.n	8006a68 <HAL_UART_Receive_IT+0x24>
 8006a62:	88fb      	ldrh	r3, [r7, #6]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e030      	b.n	8006ace <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a18      	ldr	r2, [pc, #96]	; (8006ad8 <HAL_UART_Receive_IT+0x94>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d01f      	beq.n	8006abc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d018      	beq.n	8006abc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	613b      	str	r3, [r7, #16]
   return(result);
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	623b      	str	r3, [r7, #32]
 8006aaa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	69f9      	ldr	r1, [r7, #28]
 8006aae:	6a3a      	ldr	r2, [r7, #32]
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e6      	bne.n	8006a8a <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006abc:	88fb      	ldrh	r3, [r7, #6]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	68b9      	ldr	r1, [r7, #8]
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 ffaa 	bl	8007a1c <UART_Start_Receive_IT>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	e000      	b.n	8006ace <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006acc:	2302      	movs	r3, #2
  }
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3728      	adds	r7, #40	; 0x28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	40008000 	.word	0x40008000

08006adc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08a      	sub	sp, #40	; 0x28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af0:	2b20      	cmp	r3, #32
 8006af2:	d167      	bne.n	8006bc4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d002      	beq.n	8006b00 <HAL_UART_Transmit_DMA+0x24>
 8006afa:	88fb      	ldrh	r3, [r7, #6]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e060      	b.n	8006bc6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	88fa      	ldrh	r2, [r7, #6]
 8006b0e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	88fa      	ldrh	r2, [r7, #6]
 8006b16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2221      	movs	r2, #33	; 0x21
 8006b26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d028      	beq.n	8006b84 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b36:	4a26      	ldr	r2, [pc, #152]	; (8006bd0 <HAL_UART_Transmit_DMA+0xf4>)
 8006b38:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b3e:	4a25      	ldr	r2, [pc, #148]	; (8006bd4 <HAL_UART_Transmit_DMA+0xf8>)
 8006b40:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b46:	4a24      	ldr	r2, [pc, #144]	; (8006bd8 <HAL_UART_Transmit_DMA+0xfc>)
 8006b48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b4e:	2200      	movs	r2, #0
 8006b50:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	3328      	adds	r3, #40	; 0x28
 8006b62:	461a      	mov	r2, r3
 8006b64:	88fb      	ldrh	r3, [r7, #6]
 8006b66:	f7fd fcab 	bl	80044c0 <HAL_DMA_Start_IT>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d009      	beq.n	8006b84 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2210      	movs	r2, #16
 8006b74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e020      	b.n	8006bc6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2240      	movs	r2, #64	; 0x40
 8006b8a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3308      	adds	r3, #8
 8006b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3308      	adds	r3, #8
 8006baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bac:	623a      	str	r2, [r7, #32]
 8006bae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	69f9      	ldr	r1, [r7, #28]
 8006bb2:	6a3a      	ldr	r2, [r7, #32]
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e5      	bne.n	8006b8c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e000      	b.n	8006bc6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006bc4:	2302      	movs	r3, #2
  }
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3728      	adds	r7, #40	; 0x28
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	08007daf 	.word	0x08007daf
 8006bd4:	08007e49 	.word	0x08007e49
 8006bd8:	08007e65 	.word	0x08007e65

08006bdc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b0ba      	sub	sp, #232	; 0xe8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	69db      	ldr	r3, [r3, #28]
 8006bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c06:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d11b      	bne.n	8006c50 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c1c:	f003 0320 	and.w	r3, r3, #32
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d015      	beq.n	8006c50 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d105      	bne.n	8006c3c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006c30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d009      	beq.n	8006c50 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 82e3 	beq.w	800720c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	4798      	blx	r3
      }
      return;
 8006c4e:	e2dd      	b.n	800720c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f000 8123 	beq.w	8006ea0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006c5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006c5e:	4b8d      	ldr	r3, [pc, #564]	; (8006e94 <HAL_UART_IRQHandler+0x2b8>)
 8006c60:	4013      	ands	r3, r2
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d106      	bne.n	8006c74 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006c66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c6a:	4b8b      	ldr	r3, [pc, #556]	; (8006e98 <HAL_UART_IRQHandler+0x2bc>)
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f000 8116 	beq.w	8006ea0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d011      	beq.n	8006ca4 <HAL_UART_IRQHandler+0xc8>
 8006c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00b      	beq.n	8006ca4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2201      	movs	r2, #1
 8006c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c9a:	f043 0201 	orr.w	r2, r3, #1
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d011      	beq.n	8006cd4 <HAL_UART_IRQHandler+0xf8>
 8006cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00b      	beq.n	8006cd4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cca:	f043 0204 	orr.w	r2, r3, #4
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd8:	f003 0304 	and.w	r3, r3, #4
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d011      	beq.n	8006d04 <HAL_UART_IRQHandler+0x128>
 8006ce0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ce4:	f003 0301 	and.w	r3, r3, #1
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00b      	beq.n	8006d04 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2204      	movs	r2, #4
 8006cf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cfa:	f043 0202 	orr.w	r2, r3, #2
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d08:	f003 0308 	and.w	r3, r3, #8
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d017      	beq.n	8006d40 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d14:	f003 0320 	and.w	r3, r3, #32
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d105      	bne.n	8006d28 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006d1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006d20:	4b5c      	ldr	r3, [pc, #368]	; (8006e94 <HAL_UART_IRQHandler+0x2b8>)
 8006d22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00b      	beq.n	8006d40 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2208      	movs	r2, #8
 8006d2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d36:	f043 0208 	orr.w	r2, r3, #8
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d012      	beq.n	8006d72 <HAL_UART_IRQHandler+0x196>
 8006d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00c      	beq.n	8006d72 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d68:	f043 0220 	orr.w	r2, r3, #32
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 8249 	beq.w	8007210 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d013      	beq.n	8006db2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d105      	bne.n	8006da2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d007      	beq.n	8006db2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc6:	2b40      	cmp	r3, #64	; 0x40
 8006dc8:	d005      	beq.n	8006dd6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006dca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d054      	beq.n	8006e80 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 ff83 	bl	8007ce2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	d146      	bne.n	8006e78 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3308      	adds	r3, #8
 8006df0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006df8:	e853 3f00 	ldrex	r3, [r3]
 8006dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3308      	adds	r3, #8
 8006e12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e26:	e841 2300 	strex	r3, r2, [r1]
 8006e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1d9      	bne.n	8006dea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d017      	beq.n	8006e70 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e46:	4a15      	ldr	r2, [pc, #84]	; (8006e9c <HAL_UART_IRQHandler+0x2c0>)
 8006e48:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7fd fc0f 	bl	8004674 <HAL_DMA_Abort_IT>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d019      	beq.n	8006e90 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e6e:	e00f      	b.n	8006e90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f9e1 	bl	8007238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e76:	e00b      	b.n	8006e90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f9dd 	bl	8007238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e7e:	e007      	b.n	8006e90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 f9d9 	bl	8007238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8006e8e:	e1bf      	b.n	8007210 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e90:	bf00      	nop
    return;
 8006e92:	e1bd      	b.n	8007210 <HAL_UART_IRQHandler+0x634>
 8006e94:	10000001 	.word	0x10000001
 8006e98:	04000120 	.word	0x04000120
 8006e9c:	08007ee5 	.word	0x08007ee5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	f040 8153 	bne.w	8007150 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eae:	f003 0310 	and.w	r3, r3, #16
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 814c 	beq.w	8007150 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ebc:	f003 0310 	and.w	r3, r3, #16
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 8145 	beq.w	8007150 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2210      	movs	r2, #16
 8006ecc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed8:	2b40      	cmp	r3, #64	; 0x40
 8006eda:	f040 80bb 	bne.w	8007054 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006eec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 818f 	beq.w	8007214 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006efc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f00:	429a      	cmp	r2, r3
 8006f02:	f080 8187 	bcs.w	8007214 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0320 	and.w	r3, r3, #32
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f040 8087 	bne.w	8007032 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f30:	e853 3f00 	ldrex	r3, [r3]
 8006f34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f52:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1da      	bne.n	8006f24 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3308      	adds	r3, #8
 8006f74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f78:	e853 3f00 	ldrex	r3, [r3]
 8006f7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f80:	f023 0301 	bic.w	r3, r3, #1
 8006f84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f9e:	e841 2300 	strex	r3, r2, [r1]
 8006fa2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1e1      	bne.n	8006f6e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	3308      	adds	r3, #8
 8006fb0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fb4:	e853 3f00 	ldrex	r3, [r3]
 8006fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3308      	adds	r3, #8
 8006fca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006fce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fd6:	e841 2300 	strex	r3, r2, [r1]
 8006fda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006fdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1e3      	bne.n	8006faa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ff8:	e853 3f00 	ldrex	r3, [r3]
 8006ffc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007000:	f023 0310 	bic.w	r3, r3, #16
 8007004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	461a      	mov	r2, r3
 800700e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007012:	65bb      	str	r3, [r7, #88]	; 0x58
 8007014:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007016:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007018:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800701a:	e841 2300 	strex	r3, r2, [r1]
 800701e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1e4      	bne.n	8006ff0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800702c:	4618      	mov	r0, r3
 800702e:	f7fd fac2 	bl	80045b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2202      	movs	r2, #2
 8007036:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007044:	b29b      	uxth	r3, r3
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	b29b      	uxth	r3, r3
 800704a:	4619      	mov	r1, r3
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f8fd 	bl	800724c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007052:	e0df      	b.n	8007214 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007060:	b29b      	uxth	r3, r3
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800706e:	b29b      	uxth	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 80d1 	beq.w	8007218 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007076:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800707a:	2b00      	cmp	r3, #0
 800707c:	f000 80cc 	beq.w	8007218 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800708e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007090:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007094:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070a2:	647b      	str	r3, [r7, #68]	; 0x44
 80070a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e4      	bne.n	8007080 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3308      	adds	r3, #8
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	e853 3f00 	ldrex	r3, [r3]
 80070c4:	623b      	str	r3, [r7, #32]
   return(result);
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070cc:	f023 0301 	bic.w	r3, r3, #1
 80070d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3308      	adds	r3, #8
 80070da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070de:	633a      	str	r2, [r7, #48]	; 0x30
 80070e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1e1      	bne.n	80070b6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2220      	movs	r2, #32
 80070f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	60fb      	str	r3, [r7, #12]
   return(result);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f023 0310 	bic.w	r3, r3, #16
 800711a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007128:	61fb      	str	r3, [r7, #28]
 800712a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712c:	69b9      	ldr	r1, [r7, #24]
 800712e:	69fa      	ldr	r2, [r7, #28]
 8007130:	e841 2300 	strex	r3, r2, [r1]
 8007134:	617b      	str	r3, [r7, #20]
   return(result);
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d1e4      	bne.n	8007106 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2202      	movs	r2, #2
 8007140:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007142:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f87f 	bl	800724c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800714e:	e063      	b.n	8007218 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007154:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00e      	beq.n	800717a <HAL_UART_IRQHandler+0x59e>
 800715c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d008      	beq.n	800717a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007170:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f001 fc14 	bl	80089a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007178:	e051      	b.n	800721e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800717a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007182:	2b00      	cmp	r3, #0
 8007184:	d014      	beq.n	80071b0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800718a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718e:	2b00      	cmp	r3, #0
 8007190:	d105      	bne.n	800719e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007196:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d008      	beq.n	80071b0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d03a      	beq.n	800721c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	4798      	blx	r3
    }
    return;
 80071ae:	e035      	b.n	800721c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d009      	beq.n	80071d0 <HAL_UART_IRQHandler+0x5f4>
 80071bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d003      	beq.n	80071d0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fea1 	bl	8007f10 <UART_EndTransmit_IT>
    return;
 80071ce:	e026      	b.n	800721e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80071d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d009      	beq.n	80071f0 <HAL_UART_IRQHandler+0x614>
 80071dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d003      	beq.n	80071f0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f001 fbed 	bl	80089c8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071ee:	e016      	b.n	800721e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80071f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d010      	beq.n	800721e <HAL_UART_IRQHandler+0x642>
 80071fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007200:	2b00      	cmp	r3, #0
 8007202:	da0c      	bge.n	800721e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f001 fbd5 	bl	80089b4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800720a:	e008      	b.n	800721e <HAL_UART_IRQHandler+0x642>
      return;
 800720c:	bf00      	nop
 800720e:	e006      	b.n	800721e <HAL_UART_IRQHandler+0x642>
    return;
 8007210:	bf00      	nop
 8007212:	e004      	b.n	800721e <HAL_UART_IRQHandler+0x642>
      return;
 8007214:	bf00      	nop
 8007216:	e002      	b.n	800721e <HAL_UART_IRQHandler+0x642>
      return;
 8007218:	bf00      	nop
 800721a:	e000      	b.n	800721e <HAL_UART_IRQHandler+0x642>
    return;
 800721c:	bf00      	nop
  }
}
 800721e:	37e8      	adds	r7, #232	; 0xe8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007240:	bf00      	nop
 8007242:	370c      	adds	r7, #12
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007268:	b08c      	sub	sp, #48	; 0x30
 800726a:	af00      	add	r7, sp, #0
 800726c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	689a      	ldr	r2, [r3, #8]
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	431a      	orrs	r2, r3
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	431a      	orrs	r2, r3
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	4313      	orrs	r3, r2
 800728a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	4baf      	ldr	r3, [pc, #700]	; (8007550 <UART_SetConfig+0x2ec>)
 8007294:	4013      	ands	r3, r2
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	6812      	ldr	r2, [r2, #0]
 800729a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800729c:	430b      	orrs	r3, r1
 800729e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	68da      	ldr	r2, [r3, #12]
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4aa4      	ldr	r2, [pc, #656]	; (8007554 <UART_SetConfig+0x2f0>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d004      	beq.n	80072d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072cc:	4313      	orrs	r3, r2
 80072ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80072da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	6812      	ldr	r2, [r2, #0]
 80072e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072e4:	430b      	orrs	r3, r1
 80072e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ee:	f023 010f 	bic.w	r1, r3, #15
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a95      	ldr	r2, [pc, #596]	; (8007558 <UART_SetConfig+0x2f4>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d125      	bne.n	8007354 <UART_SetConfig+0xf0>
 8007308:	2003      	movs	r0, #3
 800730a:	f7ff fb2b 	bl	8006964 <LL_RCC_GetUSARTClockSource>
 800730e:	4603      	mov	r3, r0
 8007310:	2b03      	cmp	r3, #3
 8007312:	d81b      	bhi.n	800734c <UART_SetConfig+0xe8>
 8007314:	a201      	add	r2, pc, #4	; (adr r2, 800731c <UART_SetConfig+0xb8>)
 8007316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731a:	bf00      	nop
 800731c:	0800732d 	.word	0x0800732d
 8007320:	0800733d 	.word	0x0800733d
 8007324:	08007335 	.word	0x08007335
 8007328:	08007345 	.word	0x08007345
 800732c:	2301      	movs	r3, #1
 800732e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007332:	e042      	b.n	80073ba <UART_SetConfig+0x156>
 8007334:	2302      	movs	r3, #2
 8007336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800733a:	e03e      	b.n	80073ba <UART_SetConfig+0x156>
 800733c:	2304      	movs	r3, #4
 800733e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007342:	e03a      	b.n	80073ba <UART_SetConfig+0x156>
 8007344:	2308      	movs	r3, #8
 8007346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800734a:	e036      	b.n	80073ba <UART_SetConfig+0x156>
 800734c:	2310      	movs	r3, #16
 800734e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007352:	e032      	b.n	80073ba <UART_SetConfig+0x156>
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a7e      	ldr	r2, [pc, #504]	; (8007554 <UART_SetConfig+0x2f0>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d12a      	bne.n	80073b4 <UART_SetConfig+0x150>
 800735e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007362:	f7ff fb0f 	bl	8006984 <LL_RCC_GetLPUARTClockSource>
 8007366:	4603      	mov	r3, r0
 8007368:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800736c:	d01a      	beq.n	80073a4 <UART_SetConfig+0x140>
 800736e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007372:	d81b      	bhi.n	80073ac <UART_SetConfig+0x148>
 8007374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007378:	d00c      	beq.n	8007394 <UART_SetConfig+0x130>
 800737a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800737e:	d815      	bhi.n	80073ac <UART_SetConfig+0x148>
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <UART_SetConfig+0x128>
 8007384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007388:	d008      	beq.n	800739c <UART_SetConfig+0x138>
 800738a:	e00f      	b.n	80073ac <UART_SetConfig+0x148>
 800738c:	2300      	movs	r3, #0
 800738e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007392:	e012      	b.n	80073ba <UART_SetConfig+0x156>
 8007394:	2302      	movs	r3, #2
 8007396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800739a:	e00e      	b.n	80073ba <UART_SetConfig+0x156>
 800739c:	2304      	movs	r3, #4
 800739e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073a2:	e00a      	b.n	80073ba <UART_SetConfig+0x156>
 80073a4:	2308      	movs	r3, #8
 80073a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073aa:	e006      	b.n	80073ba <UART_SetConfig+0x156>
 80073ac:	2310      	movs	r3, #16
 80073ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073b2:	e002      	b.n	80073ba <UART_SetConfig+0x156>
 80073b4:	2310      	movs	r3, #16
 80073b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a65      	ldr	r2, [pc, #404]	; (8007554 <UART_SetConfig+0x2f0>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	f040 8097 	bne.w	80074f4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80073ca:	2b08      	cmp	r3, #8
 80073cc:	d823      	bhi.n	8007416 <UART_SetConfig+0x1b2>
 80073ce:	a201      	add	r2, pc, #4	; (adr r2, 80073d4 <UART_SetConfig+0x170>)
 80073d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d4:	080073f9 	.word	0x080073f9
 80073d8:	08007417 	.word	0x08007417
 80073dc:	08007401 	.word	0x08007401
 80073e0:	08007417 	.word	0x08007417
 80073e4:	08007407 	.word	0x08007407
 80073e8:	08007417 	.word	0x08007417
 80073ec:	08007417 	.word	0x08007417
 80073f0:	08007417 	.word	0x08007417
 80073f4:	0800740f 	.word	0x0800740f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073f8:	f7fe fdca 	bl	8005f90 <HAL_RCC_GetPCLK1Freq>
 80073fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073fe:	e010      	b.n	8007422 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007400:	4b56      	ldr	r3, [pc, #344]	; (800755c <UART_SetConfig+0x2f8>)
 8007402:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007404:	e00d      	b.n	8007422 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007406:	f7fe fd43 	bl	8005e90 <HAL_RCC_GetSysClockFreq>
 800740a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800740c:	e009      	b.n	8007422 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800740e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007412:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007414:	e005      	b.n	8007422 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007420:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 812b 	beq.w	8007680 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	4a4c      	ldr	r2, [pc, #304]	; (8007560 <UART_SetConfig+0x2fc>)
 8007430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007434:	461a      	mov	r2, r3
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	fbb3 f3f2 	udiv	r3, r3, r2
 800743c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	4613      	mov	r3, r2
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	4413      	add	r3, r2
 8007448:	69ba      	ldr	r2, [r7, #24]
 800744a:	429a      	cmp	r2, r3
 800744c:	d305      	bcc.n	800745a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007454:	69ba      	ldr	r2, [r7, #24]
 8007456:	429a      	cmp	r2, r3
 8007458:	d903      	bls.n	8007462 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007460:	e10e      	b.n	8007680 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	2200      	movs	r2, #0
 8007466:	60bb      	str	r3, [r7, #8]
 8007468:	60fa      	str	r2, [r7, #12]
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	4a3c      	ldr	r2, [pc, #240]	; (8007560 <UART_SetConfig+0x2fc>)
 8007470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007474:	b29b      	uxth	r3, r3
 8007476:	2200      	movs	r2, #0
 8007478:	603b      	str	r3, [r7, #0]
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007480:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007484:	f7f9 fb78 	bl	8000b78 <__aeabi_uldivmod>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	4610      	mov	r0, r2
 800748e:	4619      	mov	r1, r3
 8007490:	f04f 0200 	mov.w	r2, #0
 8007494:	f04f 0300 	mov.w	r3, #0
 8007498:	020b      	lsls	r3, r1, #8
 800749a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800749e:	0202      	lsls	r2, r0, #8
 80074a0:	6979      	ldr	r1, [r7, #20]
 80074a2:	6849      	ldr	r1, [r1, #4]
 80074a4:	0849      	lsrs	r1, r1, #1
 80074a6:	2000      	movs	r0, #0
 80074a8:	460c      	mov	r4, r1
 80074aa:	4605      	mov	r5, r0
 80074ac:	eb12 0804 	adds.w	r8, r2, r4
 80074b0:	eb43 0905 	adc.w	r9, r3, r5
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	469a      	mov	sl, r3
 80074bc:	4693      	mov	fp, r2
 80074be:	4652      	mov	r2, sl
 80074c0:	465b      	mov	r3, fp
 80074c2:	4640      	mov	r0, r8
 80074c4:	4649      	mov	r1, r9
 80074c6:	f7f9 fb57 	bl	8000b78 <__aeabi_uldivmod>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	4613      	mov	r3, r2
 80074d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074d8:	d308      	bcc.n	80074ec <UART_SetConfig+0x288>
 80074da:	6a3b      	ldr	r3, [r7, #32]
 80074dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074e0:	d204      	bcs.n	80074ec <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6a3a      	ldr	r2, [r7, #32]
 80074e8:	60da      	str	r2, [r3, #12]
 80074ea:	e0c9      	b.n	8007680 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80074f2:	e0c5      	b.n	8007680 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	69db      	ldr	r3, [r3, #28]
 80074f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074fc:	d16d      	bne.n	80075da <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80074fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007502:	3b01      	subs	r3, #1
 8007504:	2b07      	cmp	r3, #7
 8007506:	d82d      	bhi.n	8007564 <UART_SetConfig+0x300>
 8007508:	a201      	add	r2, pc, #4	; (adr r2, 8007510 <UART_SetConfig+0x2ac>)
 800750a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750e:	bf00      	nop
 8007510:	08007531 	.word	0x08007531
 8007514:	08007539 	.word	0x08007539
 8007518:	08007565 	.word	0x08007565
 800751c:	0800753f 	.word	0x0800753f
 8007520:	08007565 	.word	0x08007565
 8007524:	08007565 	.word	0x08007565
 8007528:	08007565 	.word	0x08007565
 800752c:	08007547 	.word	0x08007547
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007530:	f7fe fd44 	bl	8005fbc <HAL_RCC_GetPCLK2Freq>
 8007534:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007536:	e01b      	b.n	8007570 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007538:	4b08      	ldr	r3, [pc, #32]	; (800755c <UART_SetConfig+0x2f8>)
 800753a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800753c:	e018      	b.n	8007570 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800753e:	f7fe fca7 	bl	8005e90 <HAL_RCC_GetSysClockFreq>
 8007542:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007544:	e014      	b.n	8007570 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800754a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800754c:	e010      	b.n	8007570 <UART_SetConfig+0x30c>
 800754e:	bf00      	nop
 8007550:	cfff69f3 	.word	0xcfff69f3
 8007554:	40008000 	.word	0x40008000
 8007558:	40013800 	.word	0x40013800
 800755c:	00f42400 	.word	0x00f42400
 8007560:	0800f008 	.word	0x0800f008
      default:
        pclk = 0U;
 8007564:	2300      	movs	r3, #0
 8007566:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800756e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 8084 	beq.w	8007680 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	4a4b      	ldr	r2, [pc, #300]	; (80076ac <UART_SetConfig+0x448>)
 800757e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007582:	461a      	mov	r2, r3
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	fbb3 f3f2 	udiv	r3, r3, r2
 800758a:	005a      	lsls	r2, r3, #1
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	085b      	lsrs	r3, r3, #1
 8007592:	441a      	add	r2, r3
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	fbb2 f3f3 	udiv	r3, r2, r3
 800759c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	2b0f      	cmp	r3, #15
 80075a2:	d916      	bls.n	80075d2 <UART_SetConfig+0x36e>
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075aa:	d212      	bcs.n	80075d2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	f023 030f 	bic.w	r3, r3, #15
 80075b4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	085b      	lsrs	r3, r3, #1
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	f003 0307 	and.w	r3, r3, #7
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	8bfb      	ldrh	r3, [r7, #30]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	8bfa      	ldrh	r2, [r7, #30]
 80075ce:	60da      	str	r2, [r3, #12]
 80075d0:	e056      	b.n	8007680 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80075d8:	e052      	b.n	8007680 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075de:	3b01      	subs	r3, #1
 80075e0:	2b07      	cmp	r3, #7
 80075e2:	d822      	bhi.n	800762a <UART_SetConfig+0x3c6>
 80075e4:	a201      	add	r2, pc, #4	; (adr r2, 80075ec <UART_SetConfig+0x388>)
 80075e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ea:	bf00      	nop
 80075ec:	0800760d 	.word	0x0800760d
 80075f0:	08007615 	.word	0x08007615
 80075f4:	0800762b 	.word	0x0800762b
 80075f8:	0800761b 	.word	0x0800761b
 80075fc:	0800762b 	.word	0x0800762b
 8007600:	0800762b 	.word	0x0800762b
 8007604:	0800762b 	.word	0x0800762b
 8007608:	08007623 	.word	0x08007623
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800760c:	f7fe fcd6 	bl	8005fbc <HAL_RCC_GetPCLK2Freq>
 8007610:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007612:	e010      	b.n	8007636 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007614:	4b26      	ldr	r3, [pc, #152]	; (80076b0 <UART_SetConfig+0x44c>)
 8007616:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007618:	e00d      	b.n	8007636 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800761a:	f7fe fc39 	bl	8005e90 <HAL_RCC_GetSysClockFreq>
 800761e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007620:	e009      	b.n	8007636 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007626:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007628:	e005      	b.n	8007636 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800762a:	2300      	movs	r3, #0
 800762c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007634:	bf00      	nop
    }

    if (pclk != 0U)
 8007636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007638:	2b00      	cmp	r3, #0
 800763a:	d021      	beq.n	8007680 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007640:	4a1a      	ldr	r2, [pc, #104]	; (80076ac <UART_SetConfig+0x448>)
 8007642:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007646:	461a      	mov	r2, r3
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	fbb3 f2f2 	udiv	r2, r3, r2
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	085b      	lsrs	r3, r3, #1
 8007654:	441a      	add	r2, r3
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	fbb2 f3f3 	udiv	r3, r2, r3
 800765e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	2b0f      	cmp	r3, #15
 8007664:	d909      	bls.n	800767a <UART_SetConfig+0x416>
 8007666:	6a3b      	ldr	r3, [r7, #32]
 8007668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800766c:	d205      	bcs.n	800767a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800766e:	6a3b      	ldr	r3, [r7, #32]
 8007670:	b29a      	uxth	r2, r3
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	60da      	str	r2, [r3, #12]
 8007678:	e002      	b.n	8007680 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	2201      	movs	r2, #1
 8007684:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	2201      	movs	r2, #1
 800768c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	2200      	movs	r2, #0
 8007694:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	2200      	movs	r2, #0
 800769a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800769c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3730      	adds	r7, #48	; 0x30
 80076a4:	46bd      	mov	sp, r7
 80076a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076aa:	bf00      	nop
 80076ac:	0800f008 	.word	0x0800f008
 80076b0:	00f42400 	.word	0x00f42400

080076b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c0:	f003 0308 	and.w	r3, r3, #8
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00a      	beq.n	80076de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e2:	f003 0301 	and.w	r3, r3, #1
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	430a      	orrs	r2, r1
 80076fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00a      	beq.n	8007722 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007726:	f003 0304 	and.w	r3, r3, #4
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007748:	f003 0310 	and.w	r3, r3, #16
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00a      	beq.n	8007766 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776a:	f003 0320 	and.w	r3, r3, #32
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00a      	beq.n	8007788 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007790:	2b00      	cmp	r3, #0
 8007792:	d01a      	beq.n	80077ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077b2:	d10a      	bne.n	80077ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00a      	beq.n	80077ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	430a      	orrs	r2, r1
 80077ea:	605a      	str	r2, [r3, #4]
  }
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b098      	sub	sp, #96	; 0x60
 80077fc:	af02      	add	r7, sp, #8
 80077fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007808:	f7fc fc10 	bl	800402c <HAL_GetTick>
 800780c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0308 	and.w	r3, r3, #8
 8007818:	2b08      	cmp	r3, #8
 800781a:	d12f      	bne.n	800787c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800781c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007824:	2200      	movs	r2, #0
 8007826:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f000 f88e 	bl	800794c <UART_WaitOnFlagUntilTimeout>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d022      	beq.n	800787c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800783c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783e:	e853 3f00 	ldrex	r3, [r3]
 8007842:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800784a:	653b      	str	r3, [r7, #80]	; 0x50
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007854:	647b      	str	r3, [r7, #68]	; 0x44
 8007856:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007858:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800785a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800785c:	e841 2300 	strex	r3, r2, [r1]
 8007860:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007864:	2b00      	cmp	r3, #0
 8007866:	d1e6      	bne.n	8007836 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2220      	movs	r2, #32
 800786c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e063      	b.n	8007944 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f003 0304 	and.w	r3, r3, #4
 8007886:	2b04      	cmp	r3, #4
 8007888:	d149      	bne.n	800791e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800788a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007892:	2200      	movs	r2, #0
 8007894:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f857 	bl	800794c <UART_WaitOnFlagUntilTimeout>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d03c      	beq.n	800791e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	e853 3f00 	ldrex	r3, [r3]
 80078b0:	623b      	str	r3, [r7, #32]
   return(result);
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c2:	633b      	str	r3, [r7, #48]	; 0x30
 80078c4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ca:	e841 2300 	strex	r3, r2, [r1]
 80078ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1e6      	bne.n	80078a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3308      	adds	r3, #8
 80078dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	e853 3f00 	ldrex	r3, [r3]
 80078e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f023 0301 	bic.w	r3, r3, #1
 80078ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	3308      	adds	r3, #8
 80078f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078f6:	61fa      	str	r2, [r7, #28]
 80078f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fa:	69b9      	ldr	r1, [r7, #24]
 80078fc:	69fa      	ldr	r2, [r7, #28]
 80078fe:	e841 2300 	strex	r3, r2, [r1]
 8007902:	617b      	str	r3, [r7, #20]
   return(result);
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d1e5      	bne.n	80078d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2220      	movs	r2, #32
 800790e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800791a:	2303      	movs	r3, #3
 800791c:	e012      	b.n	8007944 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2220      	movs	r2, #32
 8007922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2220      	movs	r2, #32
 800792a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3758      	adds	r7, #88	; 0x58
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	603b      	str	r3, [r7, #0]
 8007958:	4613      	mov	r3, r2
 800795a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800795c:	e049      	b.n	80079f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007964:	d045      	beq.n	80079f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007966:	f7fc fb61 	bl	800402c <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	429a      	cmp	r2, r3
 8007974:	d302      	bcc.n	800797c <UART_WaitOnFlagUntilTimeout+0x30>
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d101      	bne.n	8007980 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e048      	b.n	8007a12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0304 	and.w	r3, r3, #4
 800798a:	2b00      	cmp	r3, #0
 800798c:	d031      	beq.n	80079f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69db      	ldr	r3, [r3, #28]
 8007994:	f003 0308 	and.w	r3, r3, #8
 8007998:	2b08      	cmp	r3, #8
 800799a:	d110      	bne.n	80079be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2208      	movs	r2, #8
 80079a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 f99c 	bl	8007ce2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2208      	movs	r2, #8
 80079ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e029      	b.n	8007a12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69db      	ldr	r3, [r3, #28]
 80079c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079cc:	d111      	bne.n	80079f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079d8:	68f8      	ldr	r0, [r7, #12]
 80079da:	f000 f982 	bl	8007ce2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2220      	movs	r2, #32
 80079e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e00f      	b.n	8007a12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69da      	ldr	r2, [r3, #28]
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	4013      	ands	r3, r2
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	bf0c      	ite	eq
 8007a02:	2301      	moveq	r3, #1
 8007a04:	2300      	movne	r3, #0
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	461a      	mov	r2, r3
 8007a0a:	79fb      	ldrb	r3, [r7, #7]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d0a6      	beq.n	800795e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b0a3      	sub	sp, #140	; 0x8c
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	4613      	mov	r3, r2
 8007a28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	88fa      	ldrh	r2, [r7, #6]
 8007a34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	88fa      	ldrh	r2, [r7, #6]
 8007a3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a4e:	d10e      	bne.n	8007a6e <UART_Start_Receive_IT+0x52>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d105      	bne.n	8007a64 <UART_Start_Receive_IT+0x48>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007a5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a62:	e02d      	b.n	8007ac0 <UART_Start_Receive_IT+0xa4>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	22ff      	movs	r2, #255	; 0xff
 8007a68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a6c:	e028      	b.n	8007ac0 <UART_Start_Receive_IT+0xa4>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10d      	bne.n	8007a92 <UART_Start_Receive_IT+0x76>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d104      	bne.n	8007a88 <UART_Start_Receive_IT+0x6c>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	22ff      	movs	r2, #255	; 0xff
 8007a82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a86:	e01b      	b.n	8007ac0 <UART_Start_Receive_IT+0xa4>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	227f      	movs	r2, #127	; 0x7f
 8007a8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007a90:	e016      	b.n	8007ac0 <UART_Start_Receive_IT+0xa4>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a9a:	d10d      	bne.n	8007ab8 <UART_Start_Receive_IT+0x9c>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d104      	bne.n	8007aae <UART_Start_Receive_IT+0x92>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	227f      	movs	r2, #127	; 0x7f
 8007aa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007aac:	e008      	b.n	8007ac0 <UART_Start_Receive_IT+0xa4>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	223f      	movs	r2, #63	; 0x3f
 8007ab2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ab6:	e003      	b.n	8007ac0 <UART_Start_Receive_IT+0xa4>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2222      	movs	r2, #34	; 0x22
 8007acc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007ae0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ae2:	f043 0301 	orr.w	r3, r3, #1
 8007ae6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3308      	adds	r3, #8
 8007af0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007af4:	673a      	str	r2, [r7, #112]	; 0x70
 8007af6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007afa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007afc:	e841 2300 	strex	r3, r2, [r1]
 8007b00:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e3      	bne.n	8007ad0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b10:	d14f      	bne.n	8007bb2 <UART_Start_Receive_IT+0x196>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007b18:	88fa      	ldrh	r2, [r7, #6]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d349      	bcc.n	8007bb2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b26:	d107      	bne.n	8007b38 <UART_Start_Receive_IT+0x11c>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d103      	bne.n	8007b38 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4a47      	ldr	r2, [pc, #284]	; (8007c50 <UART_Start_Receive_IT+0x234>)
 8007b34:	675a      	str	r2, [r3, #116]	; 0x74
 8007b36:	e002      	b.n	8007b3e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	4a46      	ldr	r2, [pc, #280]	; (8007c54 <UART_Start_Receive_IT+0x238>)
 8007b3c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d01a      	beq.n	8007b7c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b4e:	e853 3f00 	ldrex	r3, [r3]
 8007b52:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	461a      	mov	r2, r3
 8007b64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b6a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b70:	e841 2300 	strex	r3, r2, [r1]
 8007b74:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1e4      	bne.n	8007b46 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3308      	adds	r3, #8
 8007b82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b86:	e853 3f00 	ldrex	r3, [r3]
 8007b8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	3308      	adds	r3, #8
 8007b9a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007b9c:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b9e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ba2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ba4:	e841 2300 	strex	r3, r2, [r1]
 8007ba8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e5      	bne.n	8007b7c <UART_Start_Receive_IT+0x160>
 8007bb0:	e046      	b.n	8007c40 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bba:	d107      	bne.n	8007bcc <UART_Start_Receive_IT+0x1b0>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d103      	bne.n	8007bcc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	4a24      	ldr	r2, [pc, #144]	; (8007c58 <UART_Start_Receive_IT+0x23c>)
 8007bc8:	675a      	str	r2, [r3, #116]	; 0x74
 8007bca:	e002      	b.n	8007bd2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4a23      	ldr	r2, [pc, #140]	; (8007c5c <UART_Start_Receive_IT+0x240>)
 8007bd0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d019      	beq.n	8007c0e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	e853 3f00 	ldrex	r3, [r3]
 8007be6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bea:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007bee:	677b      	str	r3, [r7, #116]	; 0x74
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bf8:	637b      	str	r3, [r7, #52]	; 0x34
 8007bfa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c00:	e841 2300 	strex	r3, r2, [r1]
 8007c04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1e6      	bne.n	8007bda <UART_Start_Receive_IT+0x1be>
 8007c0c:	e018      	b.n	8007c40 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	e853 3f00 	ldrex	r3, [r3]
 8007c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	f043 0320 	orr.w	r3, r3, #32
 8007c22:	67bb      	str	r3, [r7, #120]	; 0x78
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	461a      	mov	r2, r3
 8007c2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c2c:	623b      	str	r3, [r7, #32]
 8007c2e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	69f9      	ldr	r1, [r7, #28]
 8007c32:	6a3a      	ldr	r2, [r7, #32]
 8007c34:	e841 2300 	strex	r3, r2, [r1]
 8007c38:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e6      	bne.n	8007c0e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	378c      	adds	r7, #140	; 0x8c
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	08008639 	.word	0x08008639
 8007c54:	080082d9 	.word	0x080082d9
 8007c58:	08008121 	.word	0x08008121
 8007c5c:	08007f69 	.word	0x08007f69

08007c60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b08f      	sub	sp, #60	; 0x3c
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	e853 3f00 	ldrex	r3, [r3]
 8007c74:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c88:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c8e:	e841 2300 	strex	r3, r2, [r1]
 8007c92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1e6      	bne.n	8007c68 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007cb0:	633b      	str	r3, [r7, #48]	; 0x30
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cba:	61ba      	str	r2, [r7, #24]
 8007cbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cbe:	6979      	ldr	r1, [r7, #20]
 8007cc0:	69ba      	ldr	r2, [r7, #24]
 8007cc2:	e841 2300 	strex	r3, r2, [r1]
 8007cc6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d1e5      	bne.n	8007c9a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2220      	movs	r2, #32
 8007cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007cd6:	bf00      	nop
 8007cd8:	373c      	adds	r7, #60	; 0x3c
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr

08007ce2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b095      	sub	sp, #84	; 0x54
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf2:	e853 3f00 	ldrex	r3, [r3]
 8007cf6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	461a      	mov	r2, r3
 8007d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d08:	643b      	str	r3, [r7, #64]	; 0x40
 8007d0a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d10:	e841 2300 	strex	r3, r2, [r1]
 8007d14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d1e6      	bne.n	8007cea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3308      	adds	r3, #8
 8007d22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	e853 3f00 	ldrex	r3, [r3]
 8007d2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d32:	f023 0301 	bic.w	r3, r3, #1
 8007d36:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3308      	adds	r3, #8
 8007d3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d48:	e841 2300 	strex	r3, r2, [r1]
 8007d4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1e3      	bne.n	8007d1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d118      	bne.n	8007d8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	e853 3f00 	ldrex	r3, [r3]
 8007d68:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	f023 0310 	bic.w	r3, r3, #16
 8007d70:	647b      	str	r3, [r7, #68]	; 0x44
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	461a      	mov	r2, r3
 8007d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d7a:	61bb      	str	r3, [r7, #24]
 8007d7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	6979      	ldr	r1, [r7, #20]
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	613b      	str	r3, [r7, #16]
   return(result);
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e6      	bne.n	8007d5c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2220      	movs	r2, #32
 8007d92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007da2:	bf00      	nop
 8007da4:	3754      	adds	r7, #84	; 0x54
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b090      	sub	sp, #64	; 0x40
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dba:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0320 	and.w	r3, r3, #32
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d137      	bne.n	8007e3a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3308      	adds	r3, #8
 8007dd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	e853 3f00 	ldrex	r3, [r3]
 8007de0:	623b      	str	r3, [r7, #32]
   return(result);
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007de8:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	3308      	adds	r3, #8
 8007df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007df2:	633a      	str	r2, [r7, #48]	; 0x30
 8007df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dfa:	e841 2300 	strex	r3, r2, [r1]
 8007dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1e5      	bne.n	8007dd2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	e853 3f00 	ldrex	r3, [r3]
 8007e12:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	461a      	mov	r2, r3
 8007e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e24:	61fb      	str	r3, [r7, #28]
 8007e26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e28:	69b9      	ldr	r1, [r7, #24]
 8007e2a:	69fa      	ldr	r2, [r7, #28]
 8007e2c:	e841 2300 	strex	r3, r2, [r1]
 8007e30:	617b      	str	r3, [r7, #20]
   return(result);
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1e6      	bne.n	8007e06 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e38:	e002      	b.n	8007e40 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007e3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007e3c:	f7fa fbb8 	bl	80025b0 <HAL_UART_TxCpltCallback>
}
 8007e40:	bf00      	nop
 8007e42:	3740      	adds	r7, #64	; 0x40
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e54:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f7ff f9e4 	bl	8007224 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e5c:	bf00      	nop
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e70:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e78:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e80:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e8c:	2b80      	cmp	r3, #128	; 0x80
 8007e8e:	d109      	bne.n	8007ea4 <UART_DMAError+0x40>
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	2b21      	cmp	r3, #33	; 0x21
 8007e94:	d106      	bne.n	8007ea4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007e9e:	6978      	ldr	r0, [r7, #20]
 8007ea0:	f7ff fede 	bl	8007c60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eae:	2b40      	cmp	r3, #64	; 0x40
 8007eb0:	d109      	bne.n	8007ec6 <UART_DMAError+0x62>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2b22      	cmp	r3, #34	; 0x22
 8007eb6:	d106      	bne.n	8007ec6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8007ec0:	6978      	ldr	r0, [r7, #20]
 8007ec2:	f7ff ff0e 	bl	8007ce2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ecc:	f043 0210 	orr.w	r2, r3, #16
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ed6:	6978      	ldr	r0, [r7, #20]
 8007ed8:	f7ff f9ae 	bl	8007238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007edc:	bf00      	nop
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f02:	68f8      	ldr	r0, [r7, #12]
 8007f04:	f7ff f998 	bl	8007238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f08:	bf00      	nop
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b088      	sub	sp, #32
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	e853 3f00 	ldrex	r3, [r3]
 8007f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f2c:	61fb      	str	r3, [r7, #28]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	61bb      	str	r3, [r7, #24]
 8007f38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	6979      	ldr	r1, [r7, #20]
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	e841 2300 	strex	r3, r2, [r1]
 8007f42:	613b      	str	r3, [r7, #16]
   return(result);
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1e6      	bne.n	8007f18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2220      	movs	r2, #32
 8007f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7fa fb29 	bl	80025b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f5e:	bf00      	nop
 8007f60:	3720      	adds	r7, #32
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
	...

08007f68 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b09c      	sub	sp, #112	; 0x70
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f76:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f80:	2b22      	cmp	r3, #34	; 0x22
 8007f82:	f040 80be 	bne.w	8008102 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f90:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007f94:	b2d9      	uxtb	r1, r3
 8007f96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fa0:	400a      	ands	r2, r1
 8007fa2:	b2d2      	uxtb	r2, r2
 8007fa4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	b29a      	uxth	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	f040 80a1 	bne.w	8008112 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fe4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	461a      	mov	r2, r3
 8007fec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fee:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ff0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ff4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ff6:	e841 2300 	strex	r3, r2, [r1]
 8007ffa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e6      	bne.n	8007fd0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3308      	adds	r3, #8
 8008008:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800c:	e853 3f00 	ldrex	r3, [r3]
 8008010:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008014:	f023 0301 	bic.w	r3, r3, #1
 8008018:	667b      	str	r3, [r7, #100]	; 0x64
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3308      	adds	r3, #8
 8008020:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008022:	647a      	str	r2, [r7, #68]	; 0x44
 8008024:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008028:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e5      	bne.n	8008002 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2220      	movs	r2, #32
 800803a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a33      	ldr	r2, [pc, #204]	; (800811c <UART_RxISR_8BIT+0x1b4>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d01f      	beq.n	8008094 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d018      	beq.n	8008094 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806a:	e853 3f00 	ldrex	r3, [r3]
 800806e:	623b      	str	r3, [r7, #32]
   return(result);
 8008070:	6a3b      	ldr	r3, [r7, #32]
 8008072:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008076:	663b      	str	r3, [r7, #96]	; 0x60
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	461a      	mov	r2, r3
 800807e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008080:	633b      	str	r3, [r7, #48]	; 0x30
 8008082:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008084:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008088:	e841 2300 	strex	r3, r2, [r1]
 800808c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800808e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1e6      	bne.n	8008062 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008098:	2b01      	cmp	r3, #1
 800809a:	d12e      	bne.n	80080fa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	e853 3f00 	ldrex	r3, [r3]
 80080ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f023 0310 	bic.w	r3, r3, #16
 80080b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	461a      	mov	r2, r3
 80080be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080c0:	61fb      	str	r3, [r7, #28]
 80080c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c4:	69b9      	ldr	r1, [r7, #24]
 80080c6:	69fa      	ldr	r2, [r7, #28]
 80080c8:	e841 2300 	strex	r3, r2, [r1]
 80080cc:	617b      	str	r3, [r7, #20]
   return(result);
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e6      	bne.n	80080a2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	69db      	ldr	r3, [r3, #28]
 80080da:	f003 0310 	and.w	r3, r3, #16
 80080de:	2b10      	cmp	r3, #16
 80080e0:	d103      	bne.n	80080ea <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2210      	movs	r2, #16
 80080e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f7ff f8aa 	bl	800724c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080f8:	e00b      	b.n	8008112 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7fa fa3a 	bl	8002574 <HAL_UART_RxCpltCallback>
}
 8008100:	e007      	b.n	8008112 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	699a      	ldr	r2, [r3, #24]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f042 0208 	orr.w	r2, r2, #8
 8008110:	619a      	str	r2, [r3, #24]
}
 8008112:	bf00      	nop
 8008114:	3770      	adds	r7, #112	; 0x70
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	40008000 	.word	0x40008000

08008120 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b09c      	sub	sp, #112	; 0x70
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800812e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008138:	2b22      	cmp	r3, #34	; 0x22
 800813a:	f040 80be 	bne.w	80082ba <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008144:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800814e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008152:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008156:	4013      	ands	r3, r2
 8008158:	b29a      	uxth	r2, r3
 800815a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800815c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008162:	1c9a      	adds	r2, r3, #2
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800816e:	b29b      	uxth	r3, r3
 8008170:	3b01      	subs	r3, #1
 8008172:	b29a      	uxth	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008180:	b29b      	uxth	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	f040 80a1 	bne.w	80082ca <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008190:	e853 3f00 	ldrex	r3, [r3]
 8008194:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008198:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800819c:	667b      	str	r3, [r7, #100]	; 0x64
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081a6:	657b      	str	r3, [r7, #84]	; 0x54
 80081a8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80081ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80081ae:	e841 2300 	strex	r3, r2, [r1]
 80081b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80081b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1e6      	bne.n	8008188 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	3308      	adds	r3, #8
 80081c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c4:	e853 3f00 	ldrex	r3, [r3]
 80081c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	f023 0301 	bic.w	r3, r3, #1
 80081d0:	663b      	str	r3, [r7, #96]	; 0x60
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	3308      	adds	r3, #8
 80081d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081da:	643a      	str	r2, [r7, #64]	; 0x40
 80081dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081e2:	e841 2300 	strex	r3, r2, [r1]
 80081e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1e5      	bne.n	80081ba <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2220      	movs	r2, #32
 80081f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a33      	ldr	r2, [pc, #204]	; (80082d4 <UART_RxISR_16BIT+0x1b4>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d01f      	beq.n	800824c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d018      	beq.n	800824c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008220:	6a3b      	ldr	r3, [r7, #32]
 8008222:	e853 3f00 	ldrex	r3, [r3]
 8008226:	61fb      	str	r3, [r7, #28]
   return(result);
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800822e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	461a      	mov	r2, r3
 8008236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800823a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800823e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008240:	e841 2300 	strex	r3, r2, [r1]
 8008244:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1e6      	bne.n	800821a <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008250:	2b01      	cmp	r3, #1
 8008252:	d12e      	bne.n	80082b2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	e853 3f00 	ldrex	r3, [r3]
 8008266:	60bb      	str	r3, [r7, #8]
   return(result);
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	f023 0310 	bic.w	r3, r3, #16
 800826e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	461a      	mov	r2, r3
 8008276:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008278:	61bb      	str	r3, [r7, #24]
 800827a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827c:	6979      	ldr	r1, [r7, #20]
 800827e:	69ba      	ldr	r2, [r7, #24]
 8008280:	e841 2300 	strex	r3, r2, [r1]
 8008284:	613b      	str	r3, [r7, #16]
   return(result);
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1e6      	bne.n	800825a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	69db      	ldr	r3, [r3, #28]
 8008292:	f003 0310 	and.w	r3, r3, #16
 8008296:	2b10      	cmp	r3, #16
 8008298:	d103      	bne.n	80082a2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2210      	movs	r2, #16
 80082a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082a8:	4619      	mov	r1, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7fe ffce 	bl	800724c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082b0:	e00b      	b.n	80082ca <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7fa f95e 	bl	8002574 <HAL_UART_RxCpltCallback>
}
 80082b8:	e007      	b.n	80082ca <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	699a      	ldr	r2, [r3, #24]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f042 0208 	orr.w	r2, r2, #8
 80082c8:	619a      	str	r2, [r3, #24]
}
 80082ca:	bf00      	nop
 80082cc:	3770      	adds	r7, #112	; 0x70
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	40008000 	.word	0x40008000

080082d8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b0ac      	sub	sp, #176	; 0xb0
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80082e6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	69db      	ldr	r3, [r3, #28]
 80082f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800830e:	2b22      	cmp	r3, #34	; 0x22
 8008310:	f040 8182 	bne.w	8008618 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800831a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800831e:	e125      	b.n	800856c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008326:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800832a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800832e:	b2d9      	uxtb	r1, r3
 8008330:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008334:	b2da      	uxtb	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800833a:	400a      	ands	r2, r1
 800833c:	b2d2      	uxtb	r2, r2
 800833e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008350:	b29b      	uxth	r3, r3
 8008352:	3b01      	subs	r3, #1
 8008354:	b29a      	uxth	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	69db      	ldr	r3, [r3, #28]
 8008362:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800836a:	f003 0307 	and.w	r3, r3, #7
 800836e:	2b00      	cmp	r3, #0
 8008370:	d053      	beq.n	800841a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008372:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	2b00      	cmp	r3, #0
 800837c:	d011      	beq.n	80083a2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800837e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00b      	beq.n	80083a2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2201      	movs	r2, #1
 8008390:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008398:	f043 0201 	orr.w	r2, r3, #1
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083a6:	f003 0302 	and.w	r3, r3, #2
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d011      	beq.n	80083d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80083ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00b      	beq.n	80083d2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2202      	movs	r2, #2
 80083c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c8:	f043 0204 	orr.w	r2, r3, #4
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083d6:	f003 0304 	and.w	r3, r3, #4
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d011      	beq.n	8008402 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80083de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00b      	beq.n	8008402 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2204      	movs	r2, #4
 80083f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f8:	f043 0202 	orr.w	r2, r3, #2
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008408:	2b00      	cmp	r3, #0
 800840a:	d006      	beq.n	800841a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f7fe ff13 	bl	8007238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008420:	b29b      	uxth	r3, r3
 8008422:	2b00      	cmp	r3, #0
 8008424:	f040 80a2 	bne.w	800856c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800843c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	461a      	mov	r2, r3
 8008446:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800844a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800844c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008450:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008452:	e841 2300 	strex	r3, r2, [r1]
 8008456:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1e4      	bne.n	8008428 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3308      	adds	r3, #8
 8008464:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008468:	e853 3f00 	ldrex	r3, [r3]
 800846c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800846e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008474:	f023 0301 	bic.w	r3, r3, #1
 8008478:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3308      	adds	r3, #8
 8008482:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008486:	66ba      	str	r2, [r7, #104]	; 0x68
 8008488:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800848c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800848e:	e841 2300 	strex	r3, r2, [r1]
 8008492:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1e1      	bne.n	800845e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2220      	movs	r2, #32
 800849e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a5f      	ldr	r2, [pc, #380]	; (8008630 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d021      	beq.n	80084fc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d01a      	beq.n	80084fc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ce:	e853 3f00 	ldrex	r3, [r3]
 80084d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80084d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	461a      	mov	r2, r3
 80084e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084e8:	657b      	str	r3, [r7, #84]	; 0x54
 80084ea:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80084ee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80084f0:	e841 2300 	strex	r3, r2, [r1]
 80084f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80084f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1e4      	bne.n	80084c6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008500:	2b01      	cmp	r3, #1
 8008502:	d130      	bne.n	8008566 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008512:	e853 3f00 	ldrex	r3, [r3]
 8008516:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851a:	f023 0310 	bic.w	r3, r3, #16
 800851e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	461a      	mov	r2, r3
 8008528:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800852c:	643b      	str	r3, [r7, #64]	; 0x40
 800852e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008530:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008532:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008534:	e841 2300 	strex	r3, r2, [r1]
 8008538:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800853a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1e4      	bne.n	800850a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	f003 0310 	and.w	r3, r3, #16
 800854a:	2b10      	cmp	r3, #16
 800854c:	d103      	bne.n	8008556 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2210      	movs	r2, #16
 8008554:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7fe fe74 	bl	800724c <HAL_UARTEx_RxEventCallback>
 8008564:	e002      	b.n	800856c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7fa f804 	bl	8002574 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800856c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008570:	2b00      	cmp	r3, #0
 8008572:	d006      	beq.n	8008582 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008578:	f003 0320 	and.w	r3, r3, #32
 800857c:	2b00      	cmp	r3, #0
 800857e:	f47f aecf 	bne.w	8008320 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008588:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800858c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008590:	2b00      	cmp	r3, #0
 8008592:	d049      	beq.n	8008628 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800859a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800859e:	429a      	cmp	r2, r3
 80085a0:	d242      	bcs.n	8008628 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3308      	adds	r3, #8
 80085a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085aa:	6a3b      	ldr	r3, [r7, #32]
 80085ac:	e853 3f00 	ldrex	r3, [r3]
 80085b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	3308      	adds	r3, #8
 80085c2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80085c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085ce:	e841 2300 	strex	r3, r2, [r1]
 80085d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1e3      	bne.n	80085a2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a15      	ldr	r2, [pc, #84]	; (8008634 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80085de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	e853 3f00 	ldrex	r3, [r3]
 80085ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	f043 0320 	orr.w	r3, r3, #32
 80085f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008602:	61bb      	str	r3, [r7, #24]
 8008604:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	6979      	ldr	r1, [r7, #20]
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	e841 2300 	strex	r3, r2, [r1]
 800860e:	613b      	str	r3, [r7, #16]
   return(result);
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e4      	bne.n	80085e0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008616:	e007      	b.n	8008628 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	699a      	ldr	r2, [r3, #24]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f042 0208 	orr.w	r2, r2, #8
 8008626:	619a      	str	r2, [r3, #24]
}
 8008628:	bf00      	nop
 800862a:	37b0      	adds	r7, #176	; 0xb0
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	40008000 	.word	0x40008000
 8008634:	08007f69 	.word	0x08007f69

08008638 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b0ae      	sub	sp, #184	; 0xb8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008646:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	69db      	ldr	r3, [r3, #28]
 8008650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800866e:	2b22      	cmp	r3, #34	; 0x22
 8008670:	f040 8186 	bne.w	8008980 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800867a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800867e:	e129      	b.n	80088d4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008686:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800868e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008692:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008696:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800869a:	4013      	ands	r3, r2
 800869c:	b29a      	uxth	r2, r3
 800869e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086a8:	1c9a      	adds	r2, r3, #2
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	3b01      	subs	r3, #1
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	69db      	ldr	r3, [r3, #28]
 80086c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80086ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086ce:	f003 0307 	and.w	r3, r3, #7
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d053      	beq.n	800877e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80086d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d011      	beq.n	8008706 <UART_RxISR_16BIT_FIFOEN+0xce>
 80086e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00b      	beq.n	8008706 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	2201      	movs	r2, #1
 80086f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086fc:	f043 0201 	orr.w	r2, r3, #1
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008706:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800870a:	f003 0302 	and.w	r3, r3, #2
 800870e:	2b00      	cmp	r3, #0
 8008710:	d011      	beq.n	8008736 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008712:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00b      	beq.n	8008736 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2202      	movs	r2, #2
 8008724:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800872c:	f043 0204 	orr.w	r2, r3, #4
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008736:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800873a:	f003 0304 	and.w	r3, r3, #4
 800873e:	2b00      	cmp	r3, #0
 8008740:	d011      	beq.n	8008766 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008742:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00b      	beq.n	8008766 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2204      	movs	r2, #4
 8008754:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800875c:	f043 0202 	orr.w	r2, r3, #2
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800876c:	2b00      	cmp	r3, #0
 800876e:	d006      	beq.n	800877e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7fe fd61 	bl	8007238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008784:	b29b      	uxth	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	f040 80a4 	bne.w	80088d4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008794:	e853 3f00 	ldrex	r3, [r3]
 8008798:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800879a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800879c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	461a      	mov	r2, r3
 80087aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80087b2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80087b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80087ba:	e841 2300 	strex	r3, r2, [r1]
 80087be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80087c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1e2      	bne.n	800878c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3308      	adds	r3, #8
 80087cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087d0:	e853 3f00 	ldrex	r3, [r3]
 80087d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80087d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087dc:	f023 0301 	bic.w	r3, r3, #1
 80087e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3308      	adds	r3, #8
 80087ea:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80087ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80087f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80087f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80087f6:	e841 2300 	strex	r3, r2, [r1]
 80087fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80087fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1e1      	bne.n	80087c6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2220      	movs	r2, #32
 8008806:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a5f      	ldr	r2, [pc, #380]	; (8008998 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d021      	beq.n	8008864 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d01a      	beq.n	8008864 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008836:	e853 3f00 	ldrex	r3, [r3]
 800883a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800883c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800883e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	461a      	mov	r2, r3
 800884c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008850:	65bb      	str	r3, [r7, #88]	; 0x58
 8008852:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008854:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008856:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008858:	e841 2300 	strex	r3, r2, [r1]
 800885c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800885e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1e4      	bne.n	800882e <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008868:	2b01      	cmp	r3, #1
 800886a:	d130      	bne.n	80088ce <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887a:	e853 3f00 	ldrex	r3, [r3]
 800887e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008882:	f023 0310 	bic.w	r3, r3, #16
 8008886:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	461a      	mov	r2, r3
 8008890:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008894:	647b      	str	r3, [r7, #68]	; 0x44
 8008896:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008898:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800889a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800889c:	e841 2300 	strex	r3, r2, [r1]
 80088a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80088a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1e4      	bne.n	8008872 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	69db      	ldr	r3, [r3, #28]
 80088ae:	f003 0310 	and.w	r3, r3, #16
 80088b2:	2b10      	cmp	r3, #16
 80088b4:	d103      	bne.n	80088be <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2210      	movs	r2, #16
 80088bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7fe fcc0 	bl	800724c <HAL_UARTEx_RxEventCallback>
 80088cc:	e002      	b.n	80088d4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7f9 fe50 	bl	8002574 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80088d4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d006      	beq.n	80088ea <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80088dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80088e0:	f003 0320 	and.w	r3, r3, #32
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f47f aecb 	bne.w	8008680 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088f0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80088f4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d049      	beq.n	8008990 <UART_RxISR_16BIT_FIFOEN+0x358>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008902:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008906:	429a      	cmp	r2, r3
 8008908:	d242      	bcs.n	8008990 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	3308      	adds	r3, #8
 8008910:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008914:	e853 3f00 	ldrex	r3, [r3]
 8008918:	623b      	str	r3, [r7, #32]
   return(result);
 800891a:	6a3b      	ldr	r3, [r7, #32]
 800891c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008920:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3308      	adds	r3, #8
 800892a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800892e:	633a      	str	r2, [r7, #48]	; 0x30
 8008930:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008932:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008936:	e841 2300 	strex	r3, r2, [r1]
 800893a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800893c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1e3      	bne.n	800890a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a15      	ldr	r2, [pc, #84]	; (800899c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008946:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	e853 3f00 	ldrex	r3, [r3]
 8008954:	60fb      	str	r3, [r7, #12]
   return(result);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f043 0320 	orr.w	r3, r3, #32
 800895c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	461a      	mov	r2, r3
 8008966:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800896a:	61fb      	str	r3, [r7, #28]
 800896c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896e:	69b9      	ldr	r1, [r7, #24]
 8008970:	69fa      	ldr	r2, [r7, #28]
 8008972:	e841 2300 	strex	r3, r2, [r1]
 8008976:	617b      	str	r3, [r7, #20]
   return(result);
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1e4      	bne.n	8008948 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800897e:	e007      	b.n	8008990 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	699a      	ldr	r2, [r3, #24]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f042 0208 	orr.w	r2, r2, #8
 800898e:	619a      	str	r2, [r3, #24]
}
 8008990:	bf00      	nop
 8008992:	37b8      	adds	r7, #184	; 0xb8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	40008000 	.word	0x40008000
 800899c:	08008121 	.word	0x08008121

080089a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d101      	bne.n	80089f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80089ee:	2302      	movs	r3, #2
 80089f0:	e027      	b.n	8008a42 <HAL_UARTEx_DisableFifoMode+0x66>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2224      	movs	r2, #36	; 0x24
 80089fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f022 0201 	bic.w	r2, r2, #1
 8008a18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2200      	movs	r2, #0
 8008a26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2220      	movs	r2, #32
 8008a34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3714      	adds	r7, #20
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d101      	bne.n	8008a66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a62:	2302      	movs	r3, #2
 8008a64:	e02d      	b.n	8008ac2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2224      	movs	r2, #36	; 0x24
 8008a72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 0201 	bic.w	r2, r2, #1
 8008a8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f850 	bl	8008b48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b084      	sub	sp, #16
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d101      	bne.n	8008ae2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ade:	2302      	movs	r3, #2
 8008ae0:	e02d      	b.n	8008b3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2224      	movs	r2, #36	; 0x24
 8008aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f022 0201 	bic.w	r2, r2, #1
 8008b08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	430a      	orrs	r2, r1
 8008b1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f812 	bl	8008b48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2220      	movs	r2, #32
 8008b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
	...

08008b48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d108      	bne.n	8008b6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2201      	movs	r2, #1
 8008b64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b68:	e031      	b.n	8008bce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b6a:	2308      	movs	r3, #8
 8008b6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b6e:	2308      	movs	r3, #8
 8008b70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	0e5b      	lsrs	r3, r3, #25
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	f003 0307 	and.w	r3, r3, #7
 8008b80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	0f5b      	lsrs	r3, r3, #29
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	f003 0307 	and.w	r3, r3, #7
 8008b90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b92:	7bbb      	ldrb	r3, [r7, #14]
 8008b94:	7b3a      	ldrb	r2, [r7, #12]
 8008b96:	4911      	ldr	r1, [pc, #68]	; (8008bdc <UARTEx_SetNbDataToProcess+0x94>)
 8008b98:	5c8a      	ldrb	r2, [r1, r2]
 8008b9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b9e:	7b3a      	ldrb	r2, [r7, #12]
 8008ba0:	490f      	ldr	r1, [pc, #60]	; (8008be0 <UARTEx_SetNbDataToProcess+0x98>)
 8008ba2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ba4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
 8008bb2:	7b7a      	ldrb	r2, [r7, #13]
 8008bb4:	4909      	ldr	r1, [pc, #36]	; (8008bdc <UARTEx_SetNbDataToProcess+0x94>)
 8008bb6:	5c8a      	ldrb	r2, [r1, r2]
 8008bb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bbc:	7b7a      	ldrb	r2, [r7, #13]
 8008bbe:	4908      	ldr	r1, [pc, #32]	; (8008be0 <UARTEx_SetNbDataToProcess+0x98>)
 8008bc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008bce:	bf00      	nop
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	0800f020 	.word	0x0800f020
 8008be0:	0800f028 	.word	0x0800f028

08008be4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b0cc      	sub	sp, #304	; 0x130
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4602      	mov	r2, r0
 8008bec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bf0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008bf4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008bf6:	f107 0310 	add.w	r3, r7, #16
 8008bfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c02:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008c06:	2200      	movs	r2, #0
 8008c08:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8008c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c14:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c18:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008c1c:	7812      	ldrb	r2, [r2, #0]
 8008c1e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c24:	3301      	adds	r3, #1
 8008c26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c2e:	2218      	movs	r2, #24
 8008c30:	2100      	movs	r1, #0
 8008c32:	4618      	mov	r0, r3
 8008c34:	f001 f82a 	bl	8009c8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c38:	233f      	movs	r3, #63	; 0x3f
 8008c3a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8008c3e:	2385      	movs	r3, #133	; 0x85
 8008c40:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008c44:	f107 0310 	add.w	r3, r7, #16
 8008c48:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008c4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008c54:	f107 030f 	add.w	r3, r7, #15
 8008c58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008c66:	2100      	movs	r1, #0
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 fecd 	bl	8009a08 <hci_send_req>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	da01      	bge.n	8008c78 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008c74:	23ff      	movs	r3, #255	; 0xff
 8008c76:	e004      	b.n	8008c82 <aci_gap_set_io_capability+0x9e>
  return status;
 8008c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c7c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008c80:	781b      	ldrb	r3, [r3, #0]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008c8c:	b5b0      	push	{r4, r5, r7, lr}
 8008c8e:	b0cc      	sub	sp, #304	; 0x130
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4605      	mov	r5, r0
 8008c94:	460c      	mov	r4, r1
 8008c96:	4610      	mov	r0, r2
 8008c98:	4619      	mov	r1, r3
 8008c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c9e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008ca2:	462a      	mov	r2, r5
 8008ca4:	701a      	strb	r2, [r3, #0]
 8008ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008caa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008cae:	4622      	mov	r2, r4
 8008cb0:	701a      	strb	r2, [r3, #0]
 8008cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cb6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008cba:	4602      	mov	r2, r0
 8008cbc:	701a      	strb	r2, [r3, #0]
 8008cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008cc6:	460a      	mov	r2, r1
 8008cc8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008cca:	f107 0310 	add.w	r3, r7, #16
 8008cce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cd6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008cda:	2200      	movs	r2, #0
 8008cdc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ce8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008cec:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008cf0:	7812      	ldrb	r2, [r2, #0]
 8008cf2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008cf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8008cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d06:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008d0a:	7812      	ldrb	r2, [r2, #0]
 8008d0c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008d0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d12:	3301      	adds	r3, #1
 8008d14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8008d18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d20:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008d24:	7812      	ldrb	r2, [r2, #0]
 8008d26:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008d28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d3a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008d3e:	7812      	ldrb	r2, [r2, #0]
 8008d40:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008d42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d46:	3301      	adds	r3, #1
 8008d48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8008d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d50:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008d54:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008d56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8008d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d64:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008d68:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008d6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d6e:	3301      	adds	r3, #1
 8008d70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008d74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d78:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008d7c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008d7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d82:	3301      	adds	r3, #1
 8008d84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d8c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008d90:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008d94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d98:	3304      	adds	r3, #4
 8008d9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8008d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008da2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008da6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008da8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dac:	3301      	adds	r3, #1
 8008dae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008db2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008db6:	2218      	movs	r2, #24
 8008db8:	2100      	movs	r1, #0
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 ff66 	bl	8009c8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008dc0:	233f      	movs	r3, #63	; 0x3f
 8008dc2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008dc6:	2386      	movs	r3, #134	; 0x86
 8008dc8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008dcc:	f107 0310 	add.w	r3, r7, #16
 8008dd0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008dd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dd8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008ddc:	f107 030f 	add.w	r3, r7, #15
 8008de0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008de4:	2301      	movs	r3, #1
 8008de6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008dea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008dee:	2100      	movs	r1, #0
 8008df0:	4618      	mov	r0, r3
 8008df2:	f000 fe09 	bl	8009a08 <hci_send_req>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	da01      	bge.n	8008e00 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008dfc:	23ff      	movs	r3, #255	; 0xff
 8008dfe:	e004      	b.n	8008e0a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8008e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e04:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008e08:	781b      	ldrb	r3, [r3, #0]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bdb0      	pop	{r4, r5, r7, pc}

08008e14 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008e14:	b590      	push	{r4, r7, lr}
 8008e16:	b0cd      	sub	sp, #308	; 0x134
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	4608      	mov	r0, r1
 8008e1e:	4611      	mov	r1, r2
 8008e20:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e24:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e2e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008e32:	4622      	mov	r2, r4
 8008e34:	701a      	strb	r2, [r3, #0]
 8008e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e3a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008e3e:	4602      	mov	r2, r0
 8008e40:	701a      	strb	r2, [r3, #0]
 8008e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e46:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008e4a:	460a      	mov	r2, r1
 8008e4c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008e4e:	f107 0310 	add.w	r3, r7, #16
 8008e52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008e56:	f107 0308 	add.w	r3, r7, #8
 8008e5a:	2207      	movs	r2, #7
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 ff14 	bl	8009c8c <Osal_MemSet>
  int index_input = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8008e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e72:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008e76:	7812      	ldrb	r2, [r2, #0]
 8008e78:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008e7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e7e:	3301      	adds	r3, #1
 8008e80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008e84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e88:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e8c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008e90:	7812      	ldrb	r2, [r2, #0]
 8008e92:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008e94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e98:	3301      	adds	r3, #1
 8008e9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008e9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ea2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ea6:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008eaa:	7812      	ldrb	r2, [r2, #0]
 8008eac:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008eae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008eb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ebc:	2218      	movs	r2, #24
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f000 fee3 	bl	8009c8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008ec6:	233f      	movs	r3, #63	; 0x3f
 8008ec8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8008ecc:	238a      	movs	r3, #138	; 0x8a
 8008ece:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008ed2:	f107 0310 	add.w	r3, r7, #16
 8008ed6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008eda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ede:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008ee2:	f107 0308 	add.w	r3, r7, #8
 8008ee6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008eea:	2307      	movs	r3, #7
 8008eec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ef0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 fd86 	bl	8009a08 <hci_send_req>
 8008efc:	4603      	mov	r3, r0
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	da01      	bge.n	8008f06 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008f02:	23ff      	movs	r3, #255	; 0xff
 8008f04:	e02e      	b.n	8008f64 <aci_gap_init+0x150>
  if ( resp.Status )
 8008f06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f0a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d005      	beq.n	8008f20 <aci_gap_init+0x10c>
    return resp.Status;
 8008f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f18:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	e021      	b.n	8008f64 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f24:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f28:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f42:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008f4c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f56:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008f60:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd90      	pop	{r4, r7, pc}

08008f6e <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8008f6e:	b580      	push	{r7, lr}
 8008f70:	b088      	sub	sp, #32
 8008f72:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008f74:	2300      	movs	r3, #0
 8008f76:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f78:	f107 0308 	add.w	r3, r7, #8
 8008f7c:	2218      	movs	r2, #24
 8008f7e:	2100      	movs	r1, #0
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 fe83 	bl	8009c8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f86:	233f      	movs	r3, #63	; 0x3f
 8008f88:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008f8a:	2392      	movs	r3, #146	; 0x92
 8008f8c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008f8e:	1dfb      	adds	r3, r7, #7
 8008f90:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008f92:	2301      	movs	r3, #1
 8008f94:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f96:	f107 0308 	add.w	r3, r7, #8
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f000 fd33 	bl	8009a08 <hci_send_req>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	da01      	bge.n	8008fac <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008fa8:	23ff      	movs	r3, #255	; 0xff
 8008faa:	e000      	b.n	8008fae <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8008fac:	79fb      	ldrb	r3, [r7, #7]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3720      	adds	r7, #32
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <aci_gap_create_connection>:
                                      uint16_t Conn_Interval_Max,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint16_t Minimum_CE_Length,
                                      uint16_t Maximum_CE_Length )
{
 8008fb6:	b590      	push	{r4, r7, lr}
 8008fb8:	b0cf      	sub	sp, #316	; 0x13c
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	4608      	mov	r0, r1
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008fc6:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fd0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008fd4:	4622      	mov	r2, r4
 8008fd6:	801a      	strh	r2, [r3, #0]
 8008fd8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	801a      	strh	r2, [r3, #0]
 8008fe4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fe8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8008fec:	460a      	mov	r2, r1
 8008fee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 8008ff0:	f107 0318 	add.w	r3, r7, #24
 8008ff4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 8008ff8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ffc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009000:	2200      	movs	r2, #0
 8009002:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 800900a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800900e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009012:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009016:	8812      	ldrh	r2, [r2, #0]
 8009018:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800901a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800901e:	3302      	adds	r3, #2
 8009020:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = LE_Scan_Window;
 8009024:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009028:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800902c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009030:	8812      	ldrh	r2, [r2, #0]
 8009032:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009034:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009038:	3302      	adds	r3, #2
 800903a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = Peer_Address_Type;
 800903e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009042:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009046:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800904a:	7812      	ldrb	r2, [r2, #0]
 800904c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800904e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009052:	3301      	adds	r3, #1
 8009054:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Peer_Address, (const void*)Peer_Address, 6 );
 8009058:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800905c:	1d58      	adds	r0, r3, #5
 800905e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009062:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009066:	2206      	movs	r2, #6
 8009068:	6819      	ldr	r1, [r3, #0]
 800906a:	f000 fdff 	bl	8009c6c <Osal_MemCpy>
  index_input += 6;
 800906e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009072:	3306      	adds	r3, #6
 8009074:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = Own_Address_Type;
 8009078:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800907c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009080:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009082:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009086:	3301      	adds	r3, #1
 8009088:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800908c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009090:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8009094:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8009096:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800909a:	3302      	adds	r3, #2
 800909c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 80090a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090a4:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 80090a8:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 80090aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090ae:	3302      	adds	r3, #2
 80090b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = Conn_Latency;
 80090b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090b8:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 80090bc:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 80090be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090c2:	3302      	adds	r3, #2
 80090c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = Supervision_Timeout;
 80090c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090cc:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 80090d0:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 80090d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090d6:	3302      	adds	r3, #2
 80090d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 80090dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090e0:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80090e4:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 80090e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090ea:	3302      	adds	r3, #2
 80090ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 80090f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090f4:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80090f8:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 80090fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090fe:	3302      	adds	r3, #2
 8009100:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009104:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009108:	2218      	movs	r2, #24
 800910a:	2100      	movs	r1, #0
 800910c:	4618      	mov	r0, r3
 800910e:	f000 fdbd 	bl	8009c8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009112:	233f      	movs	r3, #63	; 0x3f
 8009114:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 8009118:	239c      	movs	r3, #156	; 0x9c
 800911a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800911e:	230f      	movs	r3, #15
 8009120:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8009124:	f107 0318 	add.w	r3, r7, #24
 8009128:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800912c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009130:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8009134:	f107 0317 	add.w	r3, r7, #23
 8009138:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800913c:	2301      	movs	r3, #1
 800913e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009142:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009146:	2100      	movs	r1, #0
 8009148:	4618      	mov	r0, r3
 800914a:	f000 fc5d 	bl	8009a08 <hci_send_req>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	da01      	bge.n	8009158 <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 8009154:	23ff      	movs	r3, #255	; 0xff
 8009156:	e004      	b.n	8009162 <aci_gap_create_connection+0x1ac>
  return status;
 8009158:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800915c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009160:	781b      	ldrb	r3, [r3, #0]
}
 8009162:	4618      	mov	r0, r3
 8009164:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009168:	46bd      	mov	sp, r7
 800916a:	bd90      	pop	{r4, r7, pc}

0800916c <aci_gap_terminate_gap_proc>:

tBleStatus aci_gap_terminate_gap_proc( uint8_t Procedure_Code )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b0cc      	sub	sp, #304	; 0x130
 8009170:	af00      	add	r7, sp, #0
 8009172:	4602      	mov	r2, r0
 8009174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009178:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800917c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 800917e:	f107 0310 	add.w	r3, r7, #16
 8009182:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800918a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800918e:	2200      	movs	r2, #0
 8009190:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009192:	2300      	movs	r3, #0
 8009194:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Procedure_Code = Procedure_Code;
 8009198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800919c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80091a0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80091a4:	7812      	ldrb	r2, [r2, #0]
 80091a6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80091a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091ac:	3301      	adds	r3, #1
 80091ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80091b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80091b6:	2218      	movs	r2, #24
 80091b8:	2100      	movs	r1, #0
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 fd66 	bl	8009c8c <Osal_MemSet>
  rq.ogf = 0x3f;
 80091c0:	233f      	movs	r3, #63	; 0x3f
 80091c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 80091c6:	239d      	movs	r3, #157	; 0x9d
 80091c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80091cc:	f107 0310 	add.w	r3, r7, #16
 80091d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80091d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80091d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80091dc:	f107 030f 	add.w	r3, r7, #15
 80091e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80091e4:	2301      	movs	r3, #1
 80091e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80091ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80091ee:	2100      	movs	r1, #0
 80091f0:	4618      	mov	r0, r3
 80091f2:	f000 fc09 	bl	8009a08 <hci_send_req>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	da01      	bge.n	8009200 <aci_gap_terminate_gap_proc+0x94>
    return BLE_STATUS_TIMEOUT;
 80091fc:	23ff      	movs	r3, #255	; 0xff
 80091fe:	e004      	b.n	800920a <aci_gap_terminate_gap_proc+0x9e>
  return status;
 8009200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009204:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009208:	781b      	ldrb	r3, [r3, #0]
}
 800920a:	4618      	mov	r0, r3
 800920c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <aci_gap_start_observation_proc>:
                                           uint16_t LE_Scan_Window,
                                           uint8_t LE_Scan_Type,
                                           uint8_t Own_Address_Type,
                                           uint8_t Filter_Duplicates,
                                           uint8_t Scanning_Filter_Policy )
{
 8009214:	b5b0      	push	{r4, r5, r7, lr}
 8009216:	b0cc      	sub	sp, #304	; 0x130
 8009218:	af00      	add	r7, sp, #0
 800921a:	4605      	mov	r5, r0
 800921c:	460c      	mov	r4, r1
 800921e:	4610      	mov	r0, r2
 8009220:	4619      	mov	r1, r3
 8009222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009226:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800922a:	462a      	mov	r2, r5
 800922c:	801a      	strh	r2, [r3, #0]
 800922e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009232:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009236:	4622      	mov	r2, r4
 8009238:	801a      	strh	r2, [r3, #0]
 800923a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800923e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009242:	4602      	mov	r2, r0
 8009244:	701a      	strb	r2, [r3, #0]
 8009246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800924a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800924e:	460a      	mov	r2, r1
 8009250:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_observation_proc_cp0 *cp0 = (aci_gap_start_observation_proc_cp0*)(cmd_buffer);
 8009252:	f107 0310 	add.w	r3, r7, #16
 8009256:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800925a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800925e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009262:	2200      	movs	r2, #0
 8009264:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009266:	2300      	movs	r3, #0
 8009268:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 800926c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009270:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009274:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009278:	8812      	ldrh	r2, [r2, #0]
 800927a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800927c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009280:	3302      	adds	r3, #2
 8009282:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 8009286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800928a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800928e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009292:	8812      	ldrh	r2, [r2, #0]
 8009294:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009296:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800929a:	3302      	adds	r3, #2
 800929c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Type = LE_Scan_Type;
 80092a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092a8:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80092ac:	7812      	ldrb	r2, [r2, #0]
 80092ae:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80092b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092b4:	3301      	adds	r3, #1
 80092b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80092ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80092c2:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80092c6:	7812      	ldrb	r2, [r2, #0]
 80092c8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80092ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092ce:	3301      	adds	r3, #1
 80092d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 80092d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092d8:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80092dc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80092de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092e2:	3301      	adds	r3, #1
 80092e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scanning_Filter_Policy = Scanning_Filter_Policy;
 80092e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092ec:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80092f0:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80092f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092f6:	3301      	adds	r3, #1
 80092f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80092fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009300:	2218      	movs	r2, #24
 8009302:	2100      	movs	r1, #0
 8009304:	4618      	mov	r0, r3
 8009306:	f000 fcc1 	bl	8009c8c <Osal_MemSet>
  rq.ogf = 0x3f;
 800930a:	233f      	movs	r3, #63	; 0x3f
 800930c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a2;
 8009310:	23a2      	movs	r3, #162	; 0xa2
 8009312:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8009316:	230f      	movs	r3, #15
 8009318:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800931c:	f107 0310 	add.w	r3, r7, #16
 8009320:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009324:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009328:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800932c:	f107 030f 	add.w	r3, r7, #15
 8009330:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009334:	2301      	movs	r3, #1
 8009336:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800933a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800933e:	2100      	movs	r1, #0
 8009340:	4618      	mov	r0, r3
 8009342:	f000 fb61 	bl	8009a08 <hci_send_req>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	da01      	bge.n	8009350 <aci_gap_start_observation_proc+0x13c>
    return BLE_STATUS_TIMEOUT;
 800934c:	23ff      	movs	r3, #255	; 0xff
 800934e:	e004      	b.n	800935a <aci_gap_start_observation_proc+0x146>
  return status;
 8009350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009354:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009358:	781b      	ldrb	r3, [r3, #0]
}
 800935a:	4618      	mov	r0, r3
 800935c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009360:	46bd      	mov	sp, r7
 8009362:	bdb0      	pop	{r4, r5, r7, pc}

08009364 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b088      	sub	sp, #32
 8009368:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800936a:	2300      	movs	r3, #0
 800936c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800936e:	f107 0308 	add.w	r3, r7, #8
 8009372:	2218      	movs	r2, #24
 8009374:	2100      	movs	r1, #0
 8009376:	4618      	mov	r0, r3
 8009378:	f000 fc88 	bl	8009c8c <Osal_MemSet>
  rq.ogf = 0x3f;
 800937c:	233f      	movs	r3, #63	; 0x3f
 800937e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009380:	f240 1301 	movw	r3, #257	; 0x101
 8009384:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009386:	1dfb      	adds	r3, r7, #7
 8009388:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800938a:	2301      	movs	r3, #1
 800938c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800938e:	f107 0308 	add.w	r3, r7, #8
 8009392:	2100      	movs	r1, #0
 8009394:	4618      	mov	r0, r3
 8009396:	f000 fb37 	bl	8009a08 <hci_send_req>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	da01      	bge.n	80093a4 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80093a0:	23ff      	movs	r3, #255	; 0xff
 80093a2:	e000      	b.n	80093a6 <aci_gatt_init+0x42>
  return status;
 80093a4:	79fb      	ldrb	r3, [r7, #7]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3720      	adds	r7, #32
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80093ae:	b5b0      	push	{r4, r5, r7, lr}
 80093b0:	b0cc      	sub	sp, #304	; 0x130
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	4605      	mov	r5, r0
 80093b6:	460c      	mov	r4, r1
 80093b8:	4610      	mov	r0, r2
 80093ba:	4619      	mov	r1, r3
 80093bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80093c4:	462a      	mov	r2, r5
 80093c6:	801a      	strh	r2, [r3, #0]
 80093c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80093d0:	4622      	mov	r2, r4
 80093d2:	801a      	strh	r2, [r3, #0]
 80093d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093d8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80093dc:	4602      	mov	r2, r0
 80093de:	701a      	strb	r2, [r3, #0]
 80093e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093e4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80093e8:	460a      	mov	r2, r1
 80093ea:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80093ec:	f107 0310 	add.w	r3, r7, #16
 80093f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80093f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093f8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80093fc:	2200      	movs	r2, #0
 80093fe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009400:	2300      	movs	r3, #0
 8009402:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8009406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800940a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800940e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009412:	8812      	ldrh	r2, [r2, #0]
 8009414:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009416:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800941a:	3302      	adds	r3, #2
 800941c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8009420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009424:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009428:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800942c:	8812      	ldrh	r2, [r2, #0]
 800942e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009430:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009434:	3302      	adds	r3, #2
 8009436:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800943a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800943e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009442:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8009446:	7812      	ldrb	r2, [r2, #0]
 8009448:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800944a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800944e:	3301      	adds	r3, #1
 8009450:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009458:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800945c:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8009460:	7812      	ldrb	r2, [r2, #0]
 8009462:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009464:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009468:	3301      	adds	r3, #1
 800946a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800946e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009472:	1d98      	adds	r0, r3, #6
 8009474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009478:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	461a      	mov	r2, r3
 8009480:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009484:	f000 fbf2 	bl	8009c6c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800948c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009496:	4413      	add	r3, r2
 8009498:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800949c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094a0:	2218      	movs	r2, #24
 80094a2:	2100      	movs	r1, #0
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 fbf1 	bl	8009c8c <Osal_MemSet>
  rq.ogf = 0x3f;
 80094aa:	233f      	movs	r3, #63	; 0x3f
 80094ac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80094b0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80094b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80094b8:	f107 0310 	add.w	r3, r7, #16
 80094bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80094c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80094c8:	f107 030f 	add.w	r3, r7, #15
 80094cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80094d0:	2301      	movs	r3, #1
 80094d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80094d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094da:	2100      	movs	r1, #0
 80094dc:	4618      	mov	r0, r3
 80094de:	f000 fa93 	bl	8009a08 <hci_send_req>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	da01      	bge.n	80094ec <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80094e8:	23ff      	movs	r3, #255	; 0xff
 80094ea:	e004      	b.n	80094f6 <aci_gatt_update_char_value+0x148>
  return status;
 80094ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094f0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80094f4:	781b      	ldrb	r3, [r3, #0]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bdb0      	pop	{r4, r5, r7, pc}

08009500 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b0cc      	sub	sp, #304	; 0x130
 8009504:	af00      	add	r7, sp, #0
 8009506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800950a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009514:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009518:	4602      	mov	r2, r0
 800951a:	701a      	strb	r2, [r3, #0]
 800951c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009520:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009524:	460a      	mov	r2, r1
 8009526:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009528:	f107 0310 	add.w	r3, r7, #16
 800952c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009534:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009538:	2200      	movs	r2, #0
 800953a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800953c:	2300      	movs	r3, #0
 800953e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8009542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009546:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800954a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800954e:	7812      	ldrb	r2, [r2, #0]
 8009550:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009552:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009556:	3301      	adds	r3, #1
 8009558:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800955c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009560:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009564:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009568:	7812      	ldrb	r2, [r2, #0]
 800956a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800956c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009570:	3301      	adds	r3, #1
 8009572:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009576:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800957a:	1c98      	adds	r0, r3, #2
 800957c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009580:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009584:	781a      	ldrb	r2, [r3, #0]
 8009586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800958a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800958e:	6819      	ldr	r1, [r3, #0]
 8009590:	f000 fb6c 	bl	8009c6c <Osal_MemCpy>
  index_input += Length;
 8009594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009598:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80095a2:	4413      	add	r3, r2
 80095a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80095a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095ac:	2218      	movs	r2, #24
 80095ae:	2100      	movs	r1, #0
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 fb6b 	bl	8009c8c <Osal_MemSet>
  rq.ogf = 0x3f;
 80095b6:	233f      	movs	r3, #63	; 0x3f
 80095b8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80095bc:	230c      	movs	r3, #12
 80095be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80095c2:	f107 0310 	add.w	r3, r7, #16
 80095c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80095ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80095d2:	f107 030f 	add.w	r3, r7, #15
 80095d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80095da:	2301      	movs	r3, #1
 80095dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80095e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80095e4:	2100      	movs	r1, #0
 80095e6:	4618      	mov	r0, r3
 80095e8:	f000 fa0e 	bl	8009a08 <hci_send_req>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	da01      	bge.n	80095f6 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80095f2:	23ff      	movs	r3, #255	; 0xff
 80095f4:	e004      	b.n	8009600 <aci_hal_write_config_data+0x100>
  return status;
 80095f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095fa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80095fe:	781b      	ldrb	r3, [r3, #0]
}
 8009600:	4618      	mov	r0, r3
 8009602:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b0cc      	sub	sp, #304	; 0x130
 800960e:	af00      	add	r7, sp, #0
 8009610:	4602      	mov	r2, r0
 8009612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009616:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800961a:	701a      	strb	r2, [r3, #0]
 800961c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009620:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009624:	460a      	mov	r2, r1
 8009626:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009628:	f107 0310 	add.w	r3, r7, #16
 800962c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009634:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009638:	2200      	movs	r2, #0
 800963a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800963c:	2300      	movs	r3, #0
 800963e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8009642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009646:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800964a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800964e:	7812      	ldrb	r2, [r2, #0]
 8009650:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009652:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009656:	3301      	adds	r3, #1
 8009658:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800965c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009660:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009664:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009668:	7812      	ldrb	r2, [r2, #0]
 800966a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800966c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009670:	3301      	adds	r3, #1
 8009672:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009676:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800967a:	2218      	movs	r2, #24
 800967c:	2100      	movs	r1, #0
 800967e:	4618      	mov	r0, r3
 8009680:	f000 fb04 	bl	8009c8c <Osal_MemSet>
  rq.ogf = 0x3f;
 8009684:	233f      	movs	r3, #63	; 0x3f
 8009686:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800968a:	230f      	movs	r3, #15
 800968c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009690:	f107 0310 	add.w	r3, r7, #16
 8009694:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009698:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800969c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80096a0:	f107 030f 	add.w	r3, r7, #15
 80096a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80096a8:	2301      	movs	r3, #1
 80096aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096b2:	2100      	movs	r1, #0
 80096b4:	4618      	mov	r0, r3
 80096b6:	f000 f9a7 	bl	8009a08 <hci_send_req>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	da01      	bge.n	80096c4 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80096c0:	23ff      	movs	r3, #255	; 0xff
 80096c2:	e004      	b.n	80096ce <aci_hal_set_tx_power_level+0xc4>
  return status;
 80096c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096c8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80096cc:	781b      	ldrb	r3, [r3, #0]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b0cc      	sub	sp, #304	; 0x130
 80096dc:	af00      	add	r7, sp, #0
 80096de:	4602      	mov	r2, r0
 80096e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096e4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80096e8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80096ea:	f107 0310 	add.w	r3, r7, #16
 80096ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80096f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80096fa:	2200      	movs	r2, #0
 80096fc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8009704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009708:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800970c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009710:	8812      	ldrh	r2, [r2, #0]
 8009712:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009714:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009718:	3302      	adds	r3, #2
 800971a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800971e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009722:	2218      	movs	r2, #24
 8009724:	2100      	movs	r1, #0
 8009726:	4618      	mov	r0, r3
 8009728:	f000 fab0 	bl	8009c8c <Osal_MemSet>
  rq.ogf = 0x3f;
 800972c:	233f      	movs	r3, #63	; 0x3f
 800972e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8009732:	2318      	movs	r3, #24
 8009734:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009738:	f107 0310 	add.w	r3, r7, #16
 800973c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009740:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009744:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009748:	f107 030f 	add.w	r3, r7, #15
 800974c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009750:	2301      	movs	r3, #1
 8009752:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009756:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800975a:	2100      	movs	r1, #0
 800975c:	4618      	mov	r0, r3
 800975e:	f000 f953 	bl	8009a08 <hci_send_req>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	da01      	bge.n	800976c <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8009768:	23ff      	movs	r3, #255	; 0xff
 800976a:	e004      	b.n	8009776 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800976c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009770:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009774:	781b      	ldrb	r3, [r3, #0]
}
 8009776:	4618      	mov	r0, r3
 8009778:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b088      	sub	sp, #32
 8009784:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009786:	2300      	movs	r3, #0
 8009788:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800978a:	f107 0308 	add.w	r3, r7, #8
 800978e:	2218      	movs	r2, #24
 8009790:	2100      	movs	r1, #0
 8009792:	4618      	mov	r0, r3
 8009794:	f000 fa7a 	bl	8009c8c <Osal_MemSet>
  rq.ogf = 0x03;
 8009798:	2303      	movs	r3, #3
 800979a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800979c:	2303      	movs	r3, #3
 800979e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80097a0:	1dfb      	adds	r3, r7, #7
 80097a2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80097a4:	2301      	movs	r3, #1
 80097a6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80097a8:	f107 0308 	add.w	r3, r7, #8
 80097ac:	2100      	movs	r1, #0
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 f92a 	bl	8009a08 <hci_send_req>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	da01      	bge.n	80097be <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80097ba:	23ff      	movs	r3, #255	; 0xff
 80097bc:	e000      	b.n	80097c0 <hci_reset+0x40>
  return status;
 80097be:	79fb      	ldrb	r3, [r7, #7]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3720      	adds	r7, #32
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097ce:	f3ef 8310 	mrs	r3, PRIMASK
 80097d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80097d4:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 80097d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80097d8:	b672      	cpsid	i
}
 80097da:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 80097dc:	1cbb      	adds	r3, r7, #2
 80097de:	4619      	mov	r1, r3
 80097e0:	4812      	ldr	r0, [pc, #72]	; (800982c <DbgTrace_TxCpltCallback+0x64>)
 80097e2:	f000 ffcc 	bl	800a77e <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 80097e6:	1cbb      	adds	r3, r7, #2
 80097e8:	4619      	mov	r1, r3
 80097ea:	4810      	ldr	r0, [pc, #64]	; (800982c <DbgTrace_TxCpltCallback+0x64>)
 80097ec:	f001 f8b8 	bl	800a960 <CircularQueue_Sense>
 80097f0:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00c      	beq.n	8009812 <DbgTrace_TxCpltCallback+0x4a>
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	f383 8810 	msr	PRIMASK, r3
}
 8009802:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8009804:	887b      	ldrh	r3, [r7, #2]
 8009806:	4a0a      	ldr	r2, [pc, #40]	; (8009830 <DbgTrace_TxCpltCallback+0x68>)
 8009808:	4619      	mov	r1, r3
 800980a:	6938      	ldr	r0, [r7, #16]
 800980c:	f7f7 fc5f 	bl	80010ce <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8009810:	e008      	b.n	8009824 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8009812:	4b08      	ldr	r3, [pc, #32]	; (8009834 <DbgTrace_TxCpltCallback+0x6c>)
 8009814:	2201      	movs	r2, #1
 8009816:	701a      	strb	r2, [r3, #0]
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f383 8810 	msr	PRIMASK, r3
}
 8009822:	bf00      	nop
}
 8009824:	bf00      	nop
 8009826:	3718      	adds	r7, #24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	2000066c 	.word	0x2000066c
 8009830:	080097c9 	.word	0x080097c9
 8009834:	2000004d 	.word	0x2000004d

08009838 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800983e:	f7f7 fc40 	bl	80010c2 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8009842:	2302      	movs	r3, #2
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	2300      	movs	r3, #0
 8009848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800984c:	4903      	ldr	r1, [pc, #12]	; (800985c <DbgTraceInit+0x24>)
 800984e:	4804      	ldr	r0, [pc, #16]	; (8009860 <DbgTraceInit+0x28>)
 8009850:	f000 fd3c 	bl	800a2cc <CircularQueue_Init>
#endif 
#endif
  return;
 8009854:	bf00      	nop
}
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	2000068c 	.word	0x2000068c
 8009860:	2000066c 	.word	0x2000066c

08009864 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	68b9      	ldr	r1, [r7, #8]
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f000 f805 	bl	8009884 <DbgTraceWrite>
 800987a:	4603      	mov	r3, r0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3710      	adds	r7, #16
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b08a      	sub	sp, #40	; 0x28
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009894:	f3ef 8310 	mrs	r3, PRIMASK
 8009898:	61bb      	str	r3, [r7, #24]
  return(result);
 800989a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800989c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a4:	d102      	bne.n	80098ac <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	627b      	str	r3, [r7, #36]	; 0x24
 80098aa:	e037      	b.n	800991c <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d006      	beq.n	80098c0 <DbgTraceWrite+0x3c>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d003      	beq.n	80098c0 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 80098b8:	f04f 33ff 	mov.w	r3, #4294967295
 80098bc:	627b      	str	r3, [r7, #36]	; 0x24
 80098be:	e02d      	b.n	800991c <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d02a      	beq.n	800991c <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80098ca:	b672      	cpsid	i
}
 80098cc:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	2301      	movs	r3, #1
 80098d4:	68b9      	ldr	r1, [r7, #8]
 80098d6:	4814      	ldr	r0, [pc, #80]	; (8009928 <DbgTraceWrite+0xa4>)
 80098d8:	f000 fd2a 	bl	800a330 <CircularQueue_Add>
 80098dc:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d015      	beq.n	8009910 <DbgTraceWrite+0x8c>
 80098e4:	4b11      	ldr	r3, [pc, #68]	; (800992c <DbgTraceWrite+0xa8>)
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d010      	beq.n	8009910 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 80098ee:	4b0f      	ldr	r3, [pc, #60]	; (800992c <DbgTraceWrite+0xa8>)
 80098f0:	2200      	movs	r2, #0
 80098f2:	701a      	strb	r2, [r3, #0]
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f383 8810 	msr	PRIMASK, r3
}
 80098fe:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	b29b      	uxth	r3, r3
 8009904:	4a0a      	ldr	r2, [pc, #40]	; (8009930 <DbgTraceWrite+0xac>)
 8009906:	4619      	mov	r1, r3
 8009908:	69f8      	ldr	r0, [r7, #28]
 800990a:	f7f7 fbe0 	bl	80010ce <DbgOutputTraces>
 800990e:	e005      	b.n	800991c <DbgTraceWrite+0x98>
 8009910:	6a3b      	ldr	r3, [r7, #32]
 8009912:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	f383 8810 	msr	PRIMASK, r3
}
 800991a:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800991e:	4618      	mov	r0, r3
 8009920:	3728      	adds	r7, #40	; 0x28
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	2000066c 	.word	0x2000066c
 800992c:	2000004d 	.word	0x2000004d
 8009930:	080097c9 	.word	0x080097c9

08009934 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	4a08      	ldr	r2, [pc, #32]	; (8009964 <hci_init+0x30>)
 8009944:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8009946:	4a08      	ldr	r2, [pc, #32]	; (8009968 <hci_init+0x34>)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800994c:	4806      	ldr	r0, [pc, #24]	; (8009968 <hci_init+0x34>)
 800994e:	f000 f979 	bl	8009c44 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4618      	mov	r0, r3
 8009958:	f000 f8da 	bl	8009b10 <TlInit>

  return;
 800995c:	bf00      	nop
}
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	200016b4 	.word	0x200016b4
 8009968:	2000168c 	.word	0x2000168c

0800996c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009972:	4822      	ldr	r0, [pc, #136]	; (80099fc <hci_user_evt_proc+0x90>)
 8009974:	f000 fbfc 	bl	800a170 <LST_is_empty>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d12b      	bne.n	80099d6 <hci_user_evt_proc+0x6a>
 800997e:	4b20      	ldr	r3, [pc, #128]	; (8009a00 <hci_user_evt_proc+0x94>)
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d027      	beq.n	80099d6 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009986:	f107 030c 	add.w	r3, r7, #12
 800998a:	4619      	mov	r1, r3
 800998c:	481b      	ldr	r0, [pc, #108]	; (80099fc <hci_user_evt_proc+0x90>)
 800998e:	f000 fc7e 	bl	800a28e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009992:	4b1c      	ldr	r3, [pc, #112]	; (8009a04 <hci_user_evt_proc+0x98>)
 8009994:	69db      	ldr	r3, [r3, #28]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d00c      	beq.n	80099b4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800999e:	2301      	movs	r3, #1
 80099a0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80099a2:	4b18      	ldr	r3, [pc, #96]	; (8009a04 <hci_user_evt_proc+0x98>)
 80099a4:	69db      	ldr	r3, [r3, #28]
 80099a6:	1d3a      	adds	r2, r7, #4
 80099a8:	4610      	mov	r0, r2
 80099aa:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80099ac:	793a      	ldrb	r2, [r7, #4]
 80099ae:	4b14      	ldr	r3, [pc, #80]	; (8009a00 <hci_user_evt_proc+0x94>)
 80099b0:	701a      	strb	r2, [r3, #0]
 80099b2:	e002      	b.n	80099ba <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80099b4:	4b12      	ldr	r3, [pc, #72]	; (8009a00 <hci_user_evt_proc+0x94>)
 80099b6:	2201      	movs	r2, #1
 80099b8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80099ba:	4b11      	ldr	r3, [pc, #68]	; (8009a00 <hci_user_evt_proc+0x94>)
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d004      	beq.n	80099cc <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	4618      	mov	r0, r3
 80099c6:	f001 fb2d 	bl	800b024 <TL_MM_EvtDone>
 80099ca:	e004      	b.n	80099d6 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	4619      	mov	r1, r3
 80099d0:	480a      	ldr	r0, [pc, #40]	; (80099fc <hci_user_evt_proc+0x90>)
 80099d2:	f000 fbef 	bl	800a1b4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80099d6:	4809      	ldr	r0, [pc, #36]	; (80099fc <hci_user_evt_proc+0x90>)
 80099d8:	f000 fbca 	bl	800a170 <LST_is_empty>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d107      	bne.n	80099f2 <hci_user_evt_proc+0x86>
 80099e2:	4b07      	ldr	r3, [pc, #28]	; (8009a00 <hci_user_evt_proc+0x94>)
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d003      	beq.n	80099f2 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80099ea:	4804      	ldr	r0, [pc, #16]	; (80099fc <hci_user_evt_proc+0x90>)
 80099ec:	f7f9 fe1e 	bl	800362c <hci_notify_asynch_evt>
  }


  return;
 80099f0:	bf00      	nop
 80099f2:	bf00      	nop
}
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}
 80099fa:	bf00      	nop
 80099fc:	2000022c 	.word	0x2000022c
 8009a00:	20000238 	.word	0x20000238
 8009a04:	2000168c 	.word	0x2000168c

08009a08 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b088      	sub	sp, #32
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	460b      	mov	r3, r1
 8009a12:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009a14:	2000      	movs	r0, #0
 8009a16:	f000 f8d1 	bl	8009bbc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	885b      	ldrh	r3, [r3, #2]
 8009a22:	b21b      	sxth	r3, r3
 8009a24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a28:	b21a      	sxth	r2, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	881b      	ldrh	r3, [r3, #0]
 8009a2e:	029b      	lsls	r3, r3, #10
 8009a30:	b21b      	sxth	r3, r3
 8009a32:	4313      	orrs	r3, r2
 8009a34:	b21b      	sxth	r3, r3
 8009a36:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8009a38:	4b33      	ldr	r3, [pc, #204]	; (8009b08 <hci_send_req+0x100>)
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	b2d9      	uxtb	r1, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	689a      	ldr	r2, [r3, #8]
 8009a48:	8bbb      	ldrh	r3, [r7, #28]
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f000 f890 	bl	8009b70 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8009a50:	e04e      	b.n	8009af0 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8009a52:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8009a56:	f7f9 fe00 	bl	800365a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009a5a:	e043      	b.n	8009ae4 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8009a5c:	f107 030c 	add.w	r3, r7, #12
 8009a60:	4619      	mov	r1, r3
 8009a62:	482a      	ldr	r0, [pc, #168]	; (8009b0c <hci_send_req+0x104>)
 8009a64:	f000 fc13 	bl	800a28e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	7a5b      	ldrb	r3, [r3, #9]
 8009a6c:	2b0f      	cmp	r3, #15
 8009a6e:	d114      	bne.n	8009a9a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	330b      	adds	r3, #11
 8009a74:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	885b      	ldrh	r3, [r3, #2]
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	8bba      	ldrh	r2, [r7, #28]
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d104      	bne.n	8009a8c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	693a      	ldr	r2, [r7, #16]
 8009a88:	7812      	ldrb	r2, [r2, #0]
 8009a8a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	785b      	ldrb	r3, [r3, #1]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d027      	beq.n	8009ae4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009a94:	2301      	movs	r3, #1
 8009a96:	77fb      	strb	r3, [r7, #31]
 8009a98:	e024      	b.n	8009ae4 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	330b      	adds	r3, #11
 8009a9e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	8bba      	ldrh	r2, [r7, #28]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d114      	bne.n	8009ad8 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	7a9b      	ldrb	r3, [r3, #10]
 8009ab2:	3b03      	subs	r3, #3
 8009ab4:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	695a      	ldr	r2, [r3, #20]
 8009aba:	7dfb      	ldrb	r3, [r7, #23]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	bfa8      	it	ge
 8009ac0:	461a      	movge	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6918      	ldr	r0, [r3, #16]
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	1cd9      	adds	r1, r3, #3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	695b      	ldr	r3, [r3, #20]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	f001 fe14 	bl	800b700 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d001      	beq.n	8009ae4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8009ae4:	4809      	ldr	r0, [pc, #36]	; (8009b0c <hci_send_req+0x104>)
 8009ae6:	f000 fb43 	bl	800a170 <LST_is_empty>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d0b5      	beq.n	8009a5c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8009af0:	7ffb      	ldrb	r3, [r7, #31]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d0ad      	beq.n	8009a52 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8009af6:	2001      	movs	r0, #1
 8009af8:	f000 f860 	bl	8009bbc <NotifyCmdStatus>

  return 0;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3720      	adds	r7, #32
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	200016b8 	.word	0x200016b8
 8009b0c:	200016ac 	.word	0x200016ac

08009b10 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8009b18:	480f      	ldr	r0, [pc, #60]	; (8009b58 <TlInit+0x48>)
 8009b1a:	f000 fb19 	bl	800a150 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8009b1e:	4a0f      	ldr	r2, [pc, #60]	; (8009b5c <TlInit+0x4c>)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8009b24:	480e      	ldr	r0, [pc, #56]	; (8009b60 <TlInit+0x50>)
 8009b26:	f000 fb13 	bl	800a150 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009b2a:	4b0e      	ldr	r3, [pc, #56]	; (8009b64 <TlInit+0x54>)
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8009b30:	4b0d      	ldr	r3, [pc, #52]	; (8009b68 <TlInit+0x58>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00a      	beq.n	8009b4e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8009b3c:	4b0b      	ldr	r3, [pc, #44]	; (8009b6c <TlInit+0x5c>)
 8009b3e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8009b40:	4b09      	ldr	r3, [pc, #36]	; (8009b68 <TlInit+0x58>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f107 0208 	add.w	r2, r7, #8
 8009b48:	4610      	mov	r0, r2
 8009b4a:	4798      	blx	r3
  }

  return;
 8009b4c:	bf00      	nop
 8009b4e:	bf00      	nop
}
 8009b50:	3718      	adds	r7, #24
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	200016ac 	.word	0x200016ac
 8009b5c:	20000234 	.word	0x20000234
 8009b60:	2000022c 	.word	0x2000022c
 8009b64:	20000238 	.word	0x20000238
 8009b68:	2000168c 	.word	0x2000168c
 8009b6c:	08009bfd 	.word	0x08009bfd

08009b70 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	4603      	mov	r3, r0
 8009b78:	603a      	str	r2, [r7, #0]
 8009b7a:	80fb      	strh	r3, [r7, #6]
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8009b80:	4b0c      	ldr	r3, [pc, #48]	; (8009bb4 <SendCmd+0x44>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	88fa      	ldrh	r2, [r7, #6]
 8009b86:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8009b8a:	4b0a      	ldr	r3, [pc, #40]	; (8009bb4 <SendCmd+0x44>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	797a      	ldrb	r2, [r7, #5]
 8009b90:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8009b92:	4b08      	ldr	r3, [pc, #32]	; (8009bb4 <SendCmd+0x44>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	330c      	adds	r3, #12
 8009b98:	797a      	ldrb	r2, [r7, #5]
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f001 fdaf 	bl	800b700 <memcpy>

  hciContext.io.Send(0,0);
 8009ba2:	4b05      	ldr	r3, [pc, #20]	; (8009bb8 <SendCmd+0x48>)
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	2000      	movs	r0, #0
 8009baa:	4798      	blx	r3

  return;
 8009bac:	bf00      	nop
}
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	20000234 	.word	0x20000234
 8009bb8:	2000168c 	.word	0x2000168c

08009bbc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8009bc6:	79fb      	ldrb	r3, [r7, #7]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d108      	bne.n	8009bde <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8009bcc:	4b0a      	ldr	r3, [pc, #40]	; (8009bf8 <NotifyCmdStatus+0x3c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d00d      	beq.n	8009bf0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8009bd4:	4b08      	ldr	r3, [pc, #32]	; (8009bf8 <NotifyCmdStatus+0x3c>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2000      	movs	r0, #0
 8009bda:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8009bdc:	e008      	b.n	8009bf0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8009bde:	4b06      	ldr	r3, [pc, #24]	; (8009bf8 <NotifyCmdStatus+0x3c>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d004      	beq.n	8009bf0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8009be6:	4b04      	ldr	r3, [pc, #16]	; (8009bf8 <NotifyCmdStatus+0x3c>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2001      	movs	r0, #1
 8009bec:	4798      	blx	r3
  return;
 8009bee:	bf00      	nop
 8009bf0:	bf00      	nop
}
 8009bf2:	3708      	adds	r7, #8
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	200016b4 	.word	0x200016b4

08009bfc <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	7a5b      	ldrb	r3, [r3, #9]
 8009c08:	2b0f      	cmp	r3, #15
 8009c0a:	d003      	beq.n	8009c14 <TlEvtReceived+0x18>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	7a5b      	ldrb	r3, [r3, #9]
 8009c10:	2b0e      	cmp	r3, #14
 8009c12:	d107      	bne.n	8009c24 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8009c14:	6879      	ldr	r1, [r7, #4]
 8009c16:	4809      	ldr	r0, [pc, #36]	; (8009c3c <TlEvtReceived+0x40>)
 8009c18:	f000 faf2 	bl	800a200 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	f7f9 fd11 	bl	8003644 <hci_cmd_resp_release>
 8009c22:	e006      	b.n	8009c32 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8009c24:	6879      	ldr	r1, [r7, #4]
 8009c26:	4806      	ldr	r0, [pc, #24]	; (8009c40 <TlEvtReceived+0x44>)
 8009c28:	f000 faea 	bl	800a200 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009c2c:	4804      	ldr	r0, [pc, #16]	; (8009c40 <TlEvtReceived+0x44>)
 8009c2e:	f7f9 fcfd 	bl	800362c <hci_notify_asynch_evt>
  }

  return;
 8009c32:	bf00      	nop
}
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	200016ac 	.word	0x200016ac
 8009c40:	2000022c 	.word	0x2000022c

08009c44 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a05      	ldr	r2, [pc, #20]	; (8009c64 <hci_register_io_bus+0x20>)
 8009c50:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a04      	ldr	r2, [pc, #16]	; (8009c68 <hci_register_io_bus+0x24>)
 8009c56:	611a      	str	r2, [r3, #16]

  return;
 8009c58:	bf00      	nop
}
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr
 8009c64:	0800ad9d 	.word	0x0800ad9d
 8009c68:	0800ae05 	.word	0x0800ae05

08009c6c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	68b9      	ldr	r1, [r7, #8]
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f001 fd3f 	bl	800b700 <memcpy>
 8009c82:	4603      	mov	r3, r0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3710      	adds	r7, #16
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	68b9      	ldr	r1, [r7, #8]
 8009c9c:	68f8      	ldr	r0, [r7, #12]
 8009c9e:	f001 fd3d 	bl	800b71c <memset>
 8009ca2:	4603      	mov	r3, r0
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3710      	adds	r7, #16
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}

08009cac <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8009cb6:	4b0f      	ldr	r3, [pc, #60]	; (8009cf4 <OTP_Read+0x48>)
 8009cb8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009cba:	e002      	b.n	8009cc2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	3b08      	subs	r3, #8
 8009cc0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	3307      	adds	r3, #7
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	79fa      	ldrb	r2, [r7, #7]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d003      	beq.n	8009cd6 <OTP_Read+0x2a>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	4a09      	ldr	r2, [pc, #36]	; (8009cf8 <OTP_Read+0x4c>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d1f2      	bne.n	8009cbc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3307      	adds	r3, #7
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	79fa      	ldrb	r2, [r7, #7]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	d001      	beq.n	8009ce6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3714      	adds	r7, #20
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr
 8009cf4:	1fff73f8 	.word	0x1fff73f8
 8009cf8:	1fff7000 	.word	0x1fff7000

08009cfc <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b088      	sub	sp, #32
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009d04:	f107 030c 	add.w	r3, r7, #12
 8009d08:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	212e      	movs	r1, #46	; 0x2e
 8009d14:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009d18:	f000 f94c 	bl	8009fb4 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	330b      	adds	r3, #11
 8009d20:	78db      	ldrb	r3, [r3, #3]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3720      	adds	r7, #32
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b088      	sub	sp, #32
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009d32:	f107 030c 	add.w	r3, r7, #12
 8009d36:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	210f      	movs	r1, #15
 8009d42:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8009d46:	f000 f935 	bl	8009fb4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	330b      	adds	r3, #11
 8009d4e:	78db      	ldrb	r3, [r3, #3]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3720      	adds	r7, #32
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b088      	sub	sp, #32
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009d60:	f107 030c 	add.w	r3, r7, #12
 8009d64:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	2110      	movs	r1, #16
 8009d6c:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8009d70:	f000 f920 	bl	8009fb4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	330b      	adds	r3, #11
 8009d78:	78db      	ldrb	r3, [r3, #3]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3720      	adds	r7, #32
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}
	...

08009d84 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009d84:	b480      	push	{r7}
 8009d86:	b08b      	sub	sp, #44	; 0x2c
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009d90:	2300      	movs	r3, #0
 8009d92:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009d94:	2300      	movs	r3, #0
 8009d96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009da0:	2300      	movs	r3, #0
 8009da2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009da4:	2300      	movs	r3, #0
 8009da6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009da8:	2300      	movs	r3, #0
 8009daa:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009dac:	4b4a      	ldr	r3, [pc, #296]	; (8009ed8 <SHCI_GetWirelessFwInfo+0x154>)
 8009dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009db0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009db4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009dbe:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a44      	ldr	r2, [pc, #272]	; (8009edc <SHCI_GetWirelessFwInfo+0x158>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d10f      	bne.n	8009df0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	695b      	ldr	r3, [r3, #20]
 8009dd4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	69db      	ldr	r3, [r3, #28]
 8009de0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	617b      	str	r3, [r7, #20]
 8009dee:	e01a      	b.n	8009e26 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009df8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009dfc:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	695b      	ldr	r3, [r3, #20]
 8009e0c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e28:	0e1b      	lsrs	r3, r3, #24
 8009e2a:	b2da      	uxtb	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	0c1b      	lsrs	r3, r3, #16
 8009e34:	b2da      	uxtb	r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3c:	0a1b      	lsrs	r3, r3, #8
 8009e3e:	b2da      	uxtb	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e46:	091b      	lsrs	r3, r3, #4
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	f003 030f 	and.w	r3, r3, #15
 8009e4e:	b2da      	uxtb	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	f003 030f 	and.w	r3, r3, #15
 8009e5c:	b2da      	uxtb	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	0e1b      	lsrs	r3, r3, #24
 8009e66:	b2da      	uxtb	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009e6c:	6a3b      	ldr	r3, [r7, #32]
 8009e6e:	0c1b      	lsrs	r3, r3, #16
 8009e70:	b2da      	uxtb	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009e76:	6a3b      	ldr	r3, [r7, #32]
 8009e78:	0a1b      	lsrs	r3, r3, #8
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009e80:	6a3b      	ldr	r3, [r7, #32]
 8009e82:	b2da      	uxtb	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	b2da      	uxtb	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	0e1b      	lsrs	r3, r3, #24
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	0c1b      	lsrs	r3, r3, #16
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009ea4:	69bb      	ldr	r3, [r7, #24]
 8009ea6:	0a1b      	lsrs	r3, r3, #8
 8009ea8:	b2da      	uxtb	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	0e1b      	lsrs	r3, r3, #24
 8009eb2:	b2da      	uxtb	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	0c1b      	lsrs	r3, r3, #16
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	b2da      	uxtb	r2, r3
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	372c      	adds	r7, #44	; 0x2c
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	58004000 	.word	0x58004000
 8009edc:	a94656b9 	.word	0xa94656b9

08009ee0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	4a08      	ldr	r2, [pc, #32]	; (8009f10 <shci_init+0x30>)
 8009ef0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8009ef2:	4a08      	ldr	r2, [pc, #32]	; (8009f14 <shci_init+0x34>)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8009ef8:	4806      	ldr	r0, [pc, #24]	; (8009f14 <shci_init+0x34>)
 8009efa:	f000 f915 	bl	800a128 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4618      	mov	r0, r3
 8009f04:	f000 f898 	bl	800a038 <TlInit>

  return;
 8009f08:	bf00      	nop
}
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	200016dc 	.word	0x200016dc
 8009f14:	200016bc 	.word	0x200016bc

08009f18 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009f1e:	4822      	ldr	r0, [pc, #136]	; (8009fa8 <shci_user_evt_proc+0x90>)
 8009f20:	f000 f926 	bl	800a170 <LST_is_empty>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d12b      	bne.n	8009f82 <shci_user_evt_proc+0x6a>
 8009f2a:	4b20      	ldr	r3, [pc, #128]	; (8009fac <shci_user_evt_proc+0x94>)
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d027      	beq.n	8009f82 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009f32:	f107 030c 	add.w	r3, r7, #12
 8009f36:	4619      	mov	r1, r3
 8009f38:	481b      	ldr	r0, [pc, #108]	; (8009fa8 <shci_user_evt_proc+0x90>)
 8009f3a:	f000 f9a8 	bl	800a28e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8009f3e:	4b1c      	ldr	r3, [pc, #112]	; (8009fb0 <shci_user_evt_proc+0x98>)
 8009f40:	69db      	ldr	r3, [r3, #28]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00c      	beq.n	8009f60 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009f4e:	4b18      	ldr	r3, [pc, #96]	; (8009fb0 <shci_user_evt_proc+0x98>)
 8009f50:	69db      	ldr	r3, [r3, #28]
 8009f52:	1d3a      	adds	r2, r7, #4
 8009f54:	4610      	mov	r0, r2
 8009f56:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8009f58:	793a      	ldrb	r2, [r7, #4]
 8009f5a:	4b14      	ldr	r3, [pc, #80]	; (8009fac <shci_user_evt_proc+0x94>)
 8009f5c:	701a      	strb	r2, [r3, #0]
 8009f5e:	e002      	b.n	8009f66 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8009f60:	4b12      	ldr	r3, [pc, #72]	; (8009fac <shci_user_evt_proc+0x94>)
 8009f62:	2201      	movs	r2, #1
 8009f64:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8009f66:	4b11      	ldr	r3, [pc, #68]	; (8009fac <shci_user_evt_proc+0x94>)
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d004      	beq.n	8009f78 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f001 f857 	bl	800b024 <TL_MM_EvtDone>
 8009f76:	e004      	b.n	8009f82 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	480a      	ldr	r0, [pc, #40]	; (8009fa8 <shci_user_evt_proc+0x90>)
 8009f7e:	f000 f919 	bl	800a1b4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8009f82:	4809      	ldr	r0, [pc, #36]	; (8009fa8 <shci_user_evt_proc+0x90>)
 8009f84:	f000 f8f4 	bl	800a170 <LST_is_empty>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d107      	bne.n	8009f9e <shci_user_evt_proc+0x86>
 8009f8e:	4b07      	ldr	r3, [pc, #28]	; (8009fac <shci_user_evt_proc+0x94>)
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d003      	beq.n	8009f9e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8009f96:	4804      	ldr	r0, [pc, #16]	; (8009fa8 <shci_user_evt_proc+0x90>)
 8009f98:	f7f7 fb2a 	bl	80015f0 <shci_notify_asynch_evt>
  }


  return;
 8009f9c:	bf00      	nop
 8009f9e:	bf00      	nop
}
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	20000264 	.word	0x20000264
 8009fac:	20000274 	.word	0x20000274
 8009fb0:	200016bc 	.word	0x200016bc

08009fb4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60ba      	str	r2, [r7, #8]
 8009fbc:	607b      	str	r3, [r7, #4]
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	81fb      	strh	r3, [r7, #14]
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8009fc6:	2000      	movs	r0, #0
 8009fc8:	f000 f868 	bl	800a09c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8009fcc:	4b17      	ldr	r3, [pc, #92]	; (800a02c <shci_send+0x78>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	89fa      	ldrh	r2, [r7, #14]
 8009fd2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8009fd6:	4b15      	ldr	r3, [pc, #84]	; (800a02c <shci_send+0x78>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	7b7a      	ldrb	r2, [r7, #13]
 8009fdc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8009fde:	4b13      	ldr	r3, [pc, #76]	; (800a02c <shci_send+0x78>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	330c      	adds	r3, #12
 8009fe4:	7b7a      	ldrb	r2, [r7, #13]
 8009fe6:	68b9      	ldr	r1, [r7, #8]
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f001 fb89 	bl	800b700 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8009fee:	4b10      	ldr	r3, [pc, #64]	; (800a030 <shci_send+0x7c>)
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8009ff4:	4b0f      	ldr	r3, [pc, #60]	; (800a034 <shci_send+0x80>)
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	2000      	movs	r0, #0
 8009ffc:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8009ffe:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a002:	f7f7 fb0d 	bl	8001620 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f103 0008 	add.w	r0, r3, #8
 800a00c:	4b07      	ldr	r3, [pc, #28]	; (800a02c <shci_send+0x78>)
 800a00e:	6819      	ldr	r1, [r3, #0]
 800a010:	4b06      	ldr	r3, [pc, #24]	; (800a02c <shci_send+0x78>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	789b      	ldrb	r3, [r3, #2]
 800a016:	3303      	adds	r3, #3
 800a018:	461a      	mov	r2, r3
 800a01a:	f001 fb71 	bl	800b700 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a01e:	2001      	movs	r0, #1
 800a020:	f000 f83c 	bl	800a09c <Cmd_SetStatus>

  return;
 800a024:	bf00      	nop
}
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	20000270 	.word	0x20000270
 800a030:	200016e0 	.word	0x200016e0
 800a034:	200016bc 	.word	0x200016bc

0800a038 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b086      	sub	sp, #24
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a040:	4a10      	ldr	r2, [pc, #64]	; (800a084 <TlInit+0x4c>)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a046:	4810      	ldr	r0, [pc, #64]	; (800a088 <TlInit+0x50>)
 800a048:	f000 f882 	bl	800a150 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a04c:	2001      	movs	r0, #1
 800a04e:	f000 f825 	bl	800a09c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a052:	4b0e      	ldr	r3, [pc, #56]	; (800a08c <TlInit+0x54>)
 800a054:	2201      	movs	r2, #1
 800a056:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a058:	4b0d      	ldr	r3, [pc, #52]	; (800a090 <TlInit+0x58>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00c      	beq.n	800a07a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a064:	4b0b      	ldr	r3, [pc, #44]	; (800a094 <TlInit+0x5c>)
 800a066:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a068:	4b0b      	ldr	r3, [pc, #44]	; (800a098 <TlInit+0x60>)
 800a06a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a06c:	4b08      	ldr	r3, [pc, #32]	; (800a090 <TlInit+0x58>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f107 020c 	add.w	r2, r7, #12
 800a074:	4610      	mov	r0, r2
 800a076:	4798      	blx	r3
  }

  return;
 800a078:	bf00      	nop
 800a07a:	bf00      	nop
}
 800a07c:	3718      	adds	r7, #24
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	20000270 	.word	0x20000270
 800a088:	20000264 	.word	0x20000264
 800a08c:	20000274 	.word	0x20000274
 800a090:	200016bc 	.word	0x200016bc
 800a094:	0800a0ed 	.word	0x0800a0ed
 800a098:	0800a105 	.word	0x0800a105

0800a09c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a0a6:	79fb      	ldrb	r3, [r7, #7]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10b      	bne.n	800a0c4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a0ac:	4b0d      	ldr	r3, [pc, #52]	; (800a0e4 <Cmd_SetStatus+0x48>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d003      	beq.n	800a0bc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a0b4:	4b0b      	ldr	r3, [pc, #44]	; (800a0e4 <Cmd_SetStatus+0x48>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2000      	movs	r0, #0
 800a0ba:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a0bc:	4b0a      	ldr	r3, [pc, #40]	; (800a0e8 <Cmd_SetStatus+0x4c>)
 800a0be:	2200      	movs	r2, #0
 800a0c0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a0c2:	e00b      	b.n	800a0dc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a0c4:	4b08      	ldr	r3, [pc, #32]	; (800a0e8 <Cmd_SetStatus+0x4c>)
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a0ca:	4b06      	ldr	r3, [pc, #24]	; (800a0e4 <Cmd_SetStatus+0x48>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d004      	beq.n	800a0dc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a0d2:	4b04      	ldr	r3, [pc, #16]	; (800a0e4 <Cmd_SetStatus+0x48>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2001      	movs	r0, #1
 800a0d8:	4798      	blx	r3
  return;
 800a0da:	bf00      	nop
 800a0dc:	bf00      	nop
}
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	200016dc 	.word	0x200016dc
 800a0e8:	2000026c 	.word	0x2000026c

0800a0ec <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b082      	sub	sp, #8
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	f7f7 fa88 	bl	800160a <shci_cmd_resp_release>

  return;
 800a0fa:	bf00      	nop
}
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
	...

0800a104 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a10c:	6879      	ldr	r1, [r7, #4]
 800a10e:	4805      	ldr	r0, [pc, #20]	; (800a124 <TlUserEvtReceived+0x20>)
 800a110:	f000 f876 	bl	800a200 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a114:	4803      	ldr	r0, [pc, #12]	; (800a124 <TlUserEvtReceived+0x20>)
 800a116:	f7f7 fa6b 	bl	80015f0 <shci_notify_asynch_evt>

  return;
 800a11a:	bf00      	nop
}
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	20000264 	.word	0x20000264

0800a128 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	4a05      	ldr	r2, [pc, #20]	; (800a148 <shci_register_io_bus+0x20>)
 800a134:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a04      	ldr	r2, [pc, #16]	; (800a14c <shci_register_io_bus+0x24>)
 800a13a:	611a      	str	r2, [r3, #16]

  return;
 800a13c:	bf00      	nop
}
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr
 800a148:	0800aeb1 	.word	0x0800aeb1
 800a14c:	0800af05 	.word	0x0800af05

0800a150 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	605a      	str	r2, [r3, #4]
}
 800a164:	bf00      	nop
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800a170:	b480      	push	{r7}
 800a172:	b087      	sub	sp, #28
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a178:	f3ef 8310 	mrs	r3, PRIMASK
 800a17c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a17e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a180:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a182:	b672      	cpsid	i
}
 800a184:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d102      	bne.n	800a196 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800a190:	2301      	movs	r3, #1
 800a192:	75fb      	strb	r3, [r7, #23]
 800a194:	e001      	b.n	800a19a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800a196:	2300      	movs	r3, #0
 800a198:	75fb      	strb	r3, [r7, #23]
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	f383 8810 	msr	PRIMASK, r3
}
 800a1a4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800a1a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	371c      	adds	r7, #28
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b087      	sub	sp, #28
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1be:	f3ef 8310 	mrs	r3, PRIMASK
 800a1c2:	60fb      	str	r3, [r7, #12]
  return(result);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a1c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1c8:	b672      	cpsid	i
}
 800a1ca:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	683a      	ldr	r2, [r7, #0]
 800a1de:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	683a      	ldr	r2, [r7, #0]
 800a1e6:	605a      	str	r2, [r3, #4]
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	f383 8810 	msr	PRIMASK, r3
}
 800a1f2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a1f4:	bf00      	nop
 800a1f6:	371c      	adds	r7, #28
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr

0800a200 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a20a:	f3ef 8310 	mrs	r3, PRIMASK
 800a20e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a210:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a212:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a214:	b672      	cpsid	i
}
 800a216:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	687a      	ldr	r2, [r7, #4]
 800a21c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	685a      	ldr	r2, [r3, #4]
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	683a      	ldr	r2, [r7, #0]
 800a22a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	683a      	ldr	r2, [r7, #0]
 800a232:	601a      	str	r2, [r3, #0]
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	f383 8810 	msr	PRIMASK, r3
}
 800a23e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a240:	bf00      	nop
 800a242:	371c      	adds	r7, #28
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a254:	f3ef 8310 	mrs	r3, PRIMASK
 800a258:	60fb      	str	r3, [r7, #12]
  return(result);
 800a25a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a25c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a25e:	b672      	cpsid	i
}
 800a260:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	6812      	ldr	r2, [r2, #0]
 800a26a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	6852      	ldr	r2, [r2, #4]
 800a274:	605a      	str	r2, [r3, #4]
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	f383 8810 	msr	PRIMASK, r3
}
 800a280:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a282:	bf00      	nop
 800a284:	371c      	adds	r7, #28
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800a28e:	b580      	push	{r7, lr}
 800a290:	b086      	sub	sp, #24
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a298:	f3ef 8310 	mrs	r3, PRIMASK
 800a29c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a29e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800a2a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2a2:	b672      	cpsid	i
}
 800a2a4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7ff ffca 	bl	800a24c <LST_remove_node>
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	f383 8810 	msr	PRIMASK, r3
}
 800a2c2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800a2c4:	bf00      	nop
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
 800a2d8:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	887a      	ldrh	r2, [r7, #2]
 800a302:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	7e3a      	ldrb	r2, [r7, #24]
 800a308:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800a30a:	7e3b      	ldrb	r3, [r7, #24]
 800a30c:	f003 0302 	and.w	r3, r3, #2
 800a310:	2b00      	cmp	r3, #0
 800a312:	d006      	beq.n	800a322 <CircularQueue_Init+0x56>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	891b      	ldrh	r3, [r3, #8]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d002      	beq.n	800a322 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800a31c:	f04f 33ff 	mov.w	r3, #4294967295
 800a320:	e000      	b.n	800a324 <CircularQueue_Init+0x58>
  }
  return 0;
 800a322:	2300      	movs	r3, #0
}
 800a324:	4618      	mov	r0, r3
 800a326:	3714      	adds	r7, #20
 800a328:	46bd      	mov	sp, r7
 800a32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32e:	4770      	bx	lr

0800a330 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b08e      	sub	sp, #56	; 0x38
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	603b      	str	r3, [r7, #0]
 800a33c:	4613      	mov	r3, r2
 800a33e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800a340:	2300      	movs	r3, #0
 800a342:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800a344:	2300      	movs	r3, #0
 800a346:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800a348:	2300      	movs	r3, #0
 800a34a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800a34c:	2300      	movs	r3, #0
 800a34e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a350:	2300      	movs	r3, #0
 800a352:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800a354:	2300      	movs	r3, #0
 800a356:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800a358:	2300      	movs	r3, #0
 800a35a:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	891b      	ldrh	r3, [r3, #8]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d101      	bne.n	800a368 <CircularQueue_Add+0x38>
 800a364:	2302      	movs	r3, #2
 800a366:	e000      	b.n	800a36a <CircularQueue_Add+0x3a>
 800a368:	2300      	movs	r3, #0
 800a36a:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d02a      	beq.n	800a3ca <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	891b      	ldrh	r3, [r3, #8]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d123      	bne.n	800a3c4 <CircularQueue_Add+0x94>
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	4413      	add	r3, r2
 800a386:	781b      	ldrb	r3, [r3, #0]
 800a388:	b29a      	uxth	r2, r3
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6819      	ldr	r1, [r3, #0]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	1c58      	adds	r0, r3, #1
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	4298      	cmp	r0, r3
 800a39a:	d306      	bcc.n	800a3aa <CircularQueue_Add+0x7a>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	6918      	ldr	r0, [r3, #16]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	1ac3      	subs	r3, r0, r3
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	e002      	b.n	800a3b0 <CircularQueue_Add+0x80>
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	440b      	add	r3, r1
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	021b      	lsls	r3, r3, #8
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	4413      	add	r3, r2
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	3302      	adds	r3, #2
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	e001      	b.n	800a3c8 <CircularQueue_Add+0x98>
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	891b      	ldrh	r3, [r3, #8]
 800a3c8:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	891b      	ldrh	r3, [r3, #8]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d002      	beq.n	800a3d8 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	891b      	ldrh	r3, [r3, #8]
 800a3d6:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	691a      	ldr	r2, [r3, #16]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d307      	bcc.n	800a3f4 <CircularQueue_Add+0xc4>
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	685a      	ldr	r2, [r3, #4]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	6919      	ldr	r1, [r3, #16]
 800a3ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a3ee:	440b      	add	r3, r1
 800a3f0:	1ad3      	subs	r3, r2, r3
 800a3f2:	e000      	b.n	800a3f6 <CircularQueue_Add+0xc6>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800a3f8:	88fa      	ldrh	r2, [r7, #6]
 800a3fa:	7ffb      	ldrb	r3, [r7, #31]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	461a      	mov	r2, r3
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	fb02 f303 	mul.w	r3, r2, r3
 800a406:	69ba      	ldr	r2, [r7, #24]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d80b      	bhi.n	800a424 <CircularQueue_Add+0xf4>
 800a40c:	88fa      	ldrh	r2, [r7, #6]
 800a40e:	7ffb      	ldrb	r3, [r7, #31]
 800a410:	4413      	add	r3, r2
 800a412:	461a      	mov	r2, r3
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	fbb3 f1f2 	udiv	r1, r3, r2
 800a41a:	fb01 f202 	mul.w	r2, r1, r2
 800a41e:	1a9b      	subs	r3, r3, r2
 800a420:	b2db      	uxtb	r3, r3
 800a422:	e000      	b.n	800a426 <CircularQueue_Add+0xf6>
 800a424:	2300      	movs	r3, #0
 800a426:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800a428:	7dfa      	ldrb	r2, [r7, #23]
 800a42a:	7ffb      	ldrb	r3, [r7, #31]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	bf8c      	ite	hi
 800a430:	2301      	movhi	r3, #1
 800a432:	2300      	movls	r3, #0
 800a434:	b2db      	uxtb	r3, r3
 800a436:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800a438:	7fbb      	ldrb	r3, [r7, #30]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d008      	beq.n	800a450 <CircularQueue_Add+0x120>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	7f1b      	ldrb	r3, [r3, #28]
 800a442:	f003 0301 	and.w	r3, r3, #1
 800a446:	2b00      	cmp	r3, #0
 800a448:	d002      	beq.n	800a450 <CircularQueue_Add+0x120>
 800a44a:	7dfb      	ldrb	r3, [r7, #23]
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	e000      	b.n	800a452 <CircularQueue_Add+0x122>
 800a450:	8bbb      	ldrh	r3, [r7, #28]
 800a452:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800a454:	7fbb      	ldrb	r3, [r7, #30]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d008      	beq.n	800a46c <CircularQueue_Add+0x13c>
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	7f1b      	ldrb	r3, [r3, #28]
 800a45e:	f003 0302 	and.w	r3, r3, #2
 800a462:	2b00      	cmp	r3, #0
 800a464:	d002      	beq.n	800a46c <CircularQueue_Add+0x13c>
 800a466:	7ffb      	ldrb	r3, [r7, #31]
 800a468:	b29b      	uxth	r3, r3
 800a46a:	e000      	b.n	800a46e <CircularQueue_Add+0x13e>
 800a46c:	8bbb      	ldrh	r3, [r7, #28]
 800a46e:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800a470:	88fb      	ldrh	r3, [r7, #6]
 800a472:	2b00      	cmp	r3, #0
 800a474:	f000 817e 	beq.w	800a774 <CircularQueue_Add+0x444>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	695a      	ldr	r2, [r3, #20]
 800a47c:	88f9      	ldrh	r1, [r7, #6]
 800a47e:	7ffb      	ldrb	r3, [r7, #31]
 800a480:	440b      	add	r3, r1
 800a482:	4619      	mov	r1, r3
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	fb01 f303 	mul.w	r3, r1, r3
 800a48a:	441a      	add	r2, r3
 800a48c:	8bbb      	ldrh	r3, [r7, #28]
 800a48e:	441a      	add	r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	429a      	cmp	r2, r3
 800a496:	f200 816d 	bhi.w	800a774 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800a49a:	2300      	movs	r3, #0
 800a49c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a49e:	e14a      	b.n	800a736 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	691a      	ldr	r2, [r3, #16]
 800a4a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a4a6:	441a      	add	r2, r3
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d307      	bcc.n	800a4c0 <CircularQueue_Add+0x190>
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	691a      	ldr	r2, [r3, #16]
 800a4b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a4b6:	441a      	add	r2, r3
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	e003      	b.n	800a4c8 <CircularQueue_Add+0x198>
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	691a      	ldr	r2, [r3, #16]
 800a4c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a4c6:	4413      	add	r3, r2
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	891b      	ldrh	r3, [r3, #8]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d130      	bne.n	800a53c <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e0:	1c59      	adds	r1, r3, #1
 800a4e2:	6339      	str	r1, [r7, #48]	; 0x30
 800a4e4:	4413      	add	r3, r2
 800a4e6:	88fa      	ldrh	r2, [r7, #6]
 800a4e8:	b2d2      	uxtb	r2, r2
 800a4ea:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d304      	bcc.n	800a500 <CircularQueue_Add+0x1d0>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	e000      	b.n	800a502 <CircularQueue_Add+0x1d2>
 800a500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a502:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800a504:	88fb      	ldrh	r3, [r7, #6]
 800a506:	0a1b      	lsrs	r3, r3, #8
 800a508:	b298      	uxth	r0, r3
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a510:	1c59      	adds	r1, r3, #1
 800a512:	6339      	str	r1, [r7, #48]	; 0x30
 800a514:	4413      	add	r3, r2
 800a516:	b2c2      	uxtb	r2, r0
 800a518:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a520:	429a      	cmp	r2, r3
 800a522:	d304      	bcc.n	800a52e <CircularQueue_Add+0x1fe>
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a52a:	1ad3      	subs	r3, r2, r3
 800a52c:	e000      	b.n	800a530 <CircularQueue_Add+0x200>
 800a52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a530:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	695b      	ldr	r3, [r3, #20]
 800a536:	1c9a      	adds	r2, r3, #2
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800a53c:	88fa      	ldrh	r2, [r7, #6]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	6859      	ldr	r1, [r3, #4]
 800a542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a544:	1acb      	subs	r3, r1, r3
 800a546:	4293      	cmp	r3, r2
 800a548:	bf28      	it	cs
 800a54a:	4613      	movcs	r3, r2
 800a54c:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800a54e:	88fb      	ldrh	r3, [r7, #6]
 800a550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a552:	429a      	cmp	r2, r3
 800a554:	d007      	beq.n	800a566 <CircularQueue_Add+0x236>
 800a556:	88fb      	ldrh	r3, [r7, #6]
 800a558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d225      	bcs.n	800a5aa <CircularQueue_Add+0x27a>
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	7f1b      	ldrb	r3, [r3, #28]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d121      	bne.n	800a5aa <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56c:	18d0      	adds	r0, r2, r3
 800a56e:	88fb      	ldrh	r3, [r7, #6]
 800a570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a572:	fb02 f303 	mul.w	r3, r2, r3
 800a576:	68ba      	ldr	r2, [r7, #8]
 800a578:	4413      	add	r3, r2
 800a57a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a57c:	4619      	mov	r1, r3
 800a57e:	f001 f8bf 	bl	800b700 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	695a      	ldr	r2, [r3, #20]
 800a586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a588:	441a      	add	r2, r3
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800a58e:	2300      	movs	r3, #0
 800a590:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800a592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a594:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800a596:	88fa      	ldrh	r2, [r7, #6]
 800a598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59a:	1ad3      	subs	r3, r2, r3
 800a59c:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800a59e:	7ffb      	ldrb	r3, [r7, #31]
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	88fb      	ldrh	r3, [r7, #6]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	86fb      	strh	r3, [r7, #54]	; 0x36
 800a5a8:	e0a4      	b.n	800a6f4 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800a5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f000 80a1 	beq.w	800a6f4 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	7f1b      	ldrb	r3, [r3, #28]
 800a5b6:	f003 0301 	and.w	r3, r3, #1
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d03a      	beq.n	800a634 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	891b      	ldrh	r3, [r3, #8]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d10d      	bne.n	800a5e2 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5cc:	3b02      	subs	r3, #2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	22ff      	movs	r2, #255	; 0xff
 800a5d2:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	4413      	add	r3, r2
 800a5de:	22ff      	movs	r2, #255	; 0xff
 800a5e0:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	695a      	ldr	r2, [r3, #20]
 800a5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e8:	441a      	add	r2, r3
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800a5f2:	88fb      	ldrh	r3, [r7, #6]
 800a5f4:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	891b      	ldrh	r3, [r3, #8]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d16f      	bne.n	800a6e2 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a608:	1c59      	adds	r1, r3, #1
 800a60a:	6339      	str	r1, [r7, #48]	; 0x30
 800a60c:	4413      	add	r3, r2
 800a60e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a610:	b2d2      	uxtb	r2, r2
 800a612:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a616:	0a18      	lsrs	r0, r3, #8
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61e:	1c59      	adds	r1, r3, #1
 800a620:	6339      	str	r1, [r7, #48]	; 0x30
 800a622:	4413      	add	r3, r2
 800a624:	b2c2      	uxtb	r2, r0
 800a626:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	695b      	ldr	r3, [r3, #20]
 800a62c:	1c9a      	adds	r2, r3, #2
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	615a      	str	r2, [r3, #20]
 800a632:	e056      	b.n	800a6e2 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	7f1b      	ldrb	r3, [r3, #28]
 800a638:	f003 0302 	and.w	r3, r3, #2
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d050      	beq.n	800a6e2 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	891b      	ldrh	r3, [r3, #8]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d14a      	bne.n	800a6de <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64e:	3b02      	subs	r3, #2
 800a650:	4413      	add	r3, r2
 800a652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a654:	b2d2      	uxtb	r2, r2
 800a656:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65a:	0a19      	lsrs	r1, r3, #8
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a662:	3b01      	subs	r3, #1
 800a664:	4413      	add	r3, r2
 800a666:	b2ca      	uxtb	r2, r1
 800a668:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	18d0      	adds	r0, r2, r3
 800a672:	88fb      	ldrh	r3, [r7, #6]
 800a674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a676:	fb02 f303 	mul.w	r3, r2, r3
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	4413      	add	r3, r2
 800a67e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a680:	4619      	mov	r1, r3
 800a682:	f001 f83d 	bl	800b700 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	695a      	ldr	r2, [r3, #20]
 800a68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68c:	441a      	add	r2, r3
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800a692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a694:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800a696:	88fa      	ldrh	r2, [r7, #6]
 800a698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69a:	1ad3      	subs	r3, r2, r3
 800a69c:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	699b      	ldr	r3, [r3, #24]
 800a6a2:	1c5a      	adds	r2, r3, #1
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b2:	1c59      	adds	r1, r3, #1
 800a6b4:	6339      	str	r1, [r7, #48]	; 0x30
 800a6b6:	4413      	add	r3, r2
 800a6b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6ba:	b2d2      	uxtb	r2, r2
 800a6bc:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800a6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c0:	0a18      	lsrs	r0, r3, #8
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c8:	1c59      	adds	r1, r3, #1
 800a6ca:	6339      	str	r1, [r7, #48]	; 0x30
 800a6cc:	4413      	add	r3, r2
 800a6ce:	b2c2      	uxtb	r2, r0
 800a6d0:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	695b      	ldr	r3, [r3, #20]
 800a6d6:	1c9a      	adds	r2, r3, #2
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	615a      	str	r2, [r3, #20]
 800a6dc:	e001      	b.n	800a6e2 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	e049      	b.n	800a776 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800a6e2:	7ffb      	ldrb	r3, [r7, #31]
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	4413      	add	r3, r2
 800a6ec:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d015      	beq.n	800a726 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a700:	18d0      	adds	r0, r2, r3
 800a702:	88fb      	ldrh	r3, [r7, #6]
 800a704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a706:	fb03 f202 	mul.w	r2, r3, r2
 800a70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70c:	4413      	add	r3, r2
 800a70e:	68ba      	ldr	r2, [r7, #8]
 800a710:	4413      	add	r3, r2
 800a712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a714:	4619      	mov	r1, r3
 800a716:	f000 fff3 	bl	800b700 <memcpy>
        q->byteCount += NbBytesToCopy;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	695a      	ldr	r2, [r3, #20]
 800a71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a720:	441a      	add	r2, r3
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	1c5a      	adds	r2, r3, #1
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800a730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a732:	3301      	adds	r3, #1
 800a734:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	f4ff aeb0 	bcc.w	800a4a0 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6919      	ldr	r1, [r3, #16]
 800a748:	7ffb      	ldrb	r3, [r7, #31]
 800a74a:	4419      	add	r1, r3
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	4299      	cmp	r1, r3
 800a752:	d307      	bcc.n	800a764 <CircularQueue_Add+0x434>
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6919      	ldr	r1, [r3, #16]
 800a758:	7ffb      	ldrb	r3, [r7, #31]
 800a75a:	4419      	add	r1, r3
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	1acb      	subs	r3, r1, r3
 800a762:	e003      	b.n	800a76c <CircularQueue_Add+0x43c>
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6919      	ldr	r1, [r3, #16]
 800a768:	7ffb      	ldrb	r3, [r7, #31]
 800a76a:	440b      	add	r3, r1
 800a76c:	4413      	add	r3, r2
 800a76e:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800a770:	6a3b      	ldr	r3, [r7, #32]
 800a772:	e000      	b.n	800a776 <CircularQueue_Add+0x446>
    return NULL;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3738      	adds	r7, #56	; 0x38
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800a77e:	b480      	push	{r7}
 800a780:	b085      	sub	sp, #20
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a788:	2300      	movs	r3, #0
 800a78a:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800a78c:	2300      	movs	r3, #0
 800a78e:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	891b      	ldrh	r3, [r3, #8]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d101      	bne.n	800a79c <CircularQueue_Remove+0x1e>
 800a798:	2302      	movs	r3, #2
 800a79a:	e000      	b.n	800a79e <CircularQueue_Remove+0x20>
 800a79c:	2300      	movs	r3, #0
 800a79e:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	695b      	ldr	r3, [r3, #20]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	f000 80cc 	beq.w	800a946 <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	891b      	ldrh	r3, [r3, #8]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d121      	bne.n	800a7fa <CircularQueue_Remove+0x7c>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	4413      	add	r3, r2
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6819      	ldr	r1, [r3, #0]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	1c58      	adds	r0, r3, #1
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	4298      	cmp	r0, r3
 800a7d4:	d306      	bcc.n	800a7e4 <CircularQueue_Remove+0x66>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	68d8      	ldr	r0, [r3, #12]
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	1ac3      	subs	r3, r0, r3
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	e002      	b.n	800a7ea <CircularQueue_Remove+0x6c>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	68db      	ldr	r3, [r3, #12]
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	440b      	add	r3, r1
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	021b      	lsls	r3, r3, #8
 800a7f2:	b29b      	uxth	r3, r3
 800a7f4:	4413      	add	r3, r2
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	e001      	b.n	800a7fe <CircularQueue_Remove+0x80>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	891b      	ldrh	r3, [r3, #8]
 800a7fe:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	7f1b      	ldrb	r3, [r3, #28]
 800a804:	f003 0301 	and.w	r3, r3, #1
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d057      	beq.n	800a8bc <CircularQueue_Remove+0x13e>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	7f1b      	ldrb	r3, [r3, #28]
 800a810:	f003 0302 	and.w	r3, r3, #2
 800a814:	2b00      	cmp	r3, #0
 800a816:	d151      	bne.n	800a8bc <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a818:	897b      	ldrh	r3, [r7, #10]
 800a81a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a81e:	4293      	cmp	r3, r2
 800a820:	d103      	bne.n	800a82a <CircularQueue_Remove+0xac>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	891b      	ldrh	r3, [r3, #8]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d012      	beq.n	800a850 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	68da      	ldr	r2, [r3, #12]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800a832:	429a      	cmp	r2, r3
 800a834:	d942      	bls.n	800a8bc <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	891b      	ldrh	r3, [r3, #8]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d03e      	beq.n	800a8bc <CircularQueue_Remove+0x13e>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	685a      	ldr	r2, [r3, #4]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	1ad3      	subs	r3, r2, r3
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	8912      	ldrh	r2, [r2, #8]
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d235      	bcs.n	800a8bc <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	695a      	ldr	r2, [r3, #20]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	68d9      	ldr	r1, [r3, #12]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	1acb      	subs	r3, r1, r3
 800a85e:	441a      	add	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2200      	movs	r2, #0
 800a868:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	891b      	ldrh	r3, [r3, #8]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d121      	bne.n	800a8b6 <CircularQueue_Remove+0x138>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	4413      	add	r3, r2
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	b29a      	uxth	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6819      	ldr	r1, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	1c58      	adds	r0, r3, #1
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	4298      	cmp	r0, r3
 800a890:	d306      	bcc.n	800a8a0 <CircularQueue_Remove+0x122>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	68d8      	ldr	r0, [r3, #12]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	1ac3      	subs	r3, r0, r3
 800a89c:	3301      	adds	r3, #1
 800a89e:	e002      	b.n	800a8a6 <CircularQueue_Remove+0x128>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	440b      	add	r3, r1
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	021b      	lsls	r3, r3, #8
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	4413      	add	r3, r2
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	e001      	b.n	800a8ba <CircularQueue_Remove+0x13c>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	891b      	ldrh	r3, [r3, #8]
 800a8ba:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	68d9      	ldr	r1, [r3, #12]
 800a8c4:	7a7b      	ldrb	r3, [r7, #9]
 800a8c6:	4419      	add	r1, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	4299      	cmp	r1, r3
 800a8ce:	d307      	bcc.n	800a8e0 <CircularQueue_Remove+0x162>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	68d9      	ldr	r1, [r3, #12]
 800a8d4:	7a7b      	ldrb	r3, [r7, #9]
 800a8d6:	4419      	add	r1, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	1acb      	subs	r3, r1, r3
 800a8de:	e003      	b.n	800a8e8 <CircularQueue_Remove+0x16a>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	68d9      	ldr	r1, [r3, #12]
 800a8e4:	7a7b      	ldrb	r3, [r7, #9]
 800a8e6:	440b      	add	r3, r1
 800a8e8:	4413      	add	r3, r2
 800a8ea:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	695b      	ldr	r3, [r3, #20]
 800a8f0:	8979      	ldrh	r1, [r7, #10]
 800a8f2:	7a7a      	ldrb	r2, [r7, #9]
 800a8f4:	440a      	add	r2, r1
 800a8f6:	1a9a      	subs	r2, r3, r2
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	695b      	ldr	r3, [r3, #20]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d01b      	beq.n	800a93c <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	68da      	ldr	r2, [r3, #12]
 800a908:	897b      	ldrh	r3, [r7, #10]
 800a90a:	441a      	add	r2, r3
 800a90c:	7a7b      	ldrb	r3, [r7, #9]
 800a90e:	441a      	add	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	685b      	ldr	r3, [r3, #4]
 800a914:	429a      	cmp	r2, r3
 800a916:	d309      	bcc.n	800a92c <CircularQueue_Remove+0x1ae>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	68da      	ldr	r2, [r3, #12]
 800a91c:	897b      	ldrh	r3, [r7, #10]
 800a91e:	441a      	add	r2, r3
 800a920:	7a7b      	ldrb	r3, [r7, #9]
 800a922:	441a      	add	r2, r3
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685b      	ldr	r3, [r3, #4]
 800a928:	1ad3      	subs	r3, r2, r3
 800a92a:	e005      	b.n	800a938 <CircularQueue_Remove+0x1ba>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	68da      	ldr	r2, [r3, #12]
 800a930:	897b      	ldrh	r3, [r7, #10]
 800a932:	441a      	add	r2, r3
 800a934:	7a7b      	ldrb	r3, [r7, #9]
 800a936:	4413      	add	r3, r2
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	699b      	ldr	r3, [r3, #24]
 800a940:	1e5a      	subs	r2, r3, #1
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d002      	beq.n	800a952 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	897a      	ldrh	r2, [r7, #10]
 800a950:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800a952:	68fb      	ldr	r3, [r7, #12]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3714      	adds	r7, #20
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800a960:	b480      	push	{r7}
 800a962:	b087      	sub	sp, #28
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800a96e:	2300      	movs	r3, #0
 800a970:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	891b      	ldrh	r3, [r3, #8]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d101      	bne.n	800a97e <CircularQueue_Sense+0x1e>
 800a97a:	2302      	movs	r3, #2
 800a97c:	e000      	b.n	800a980 <CircularQueue_Sense+0x20>
 800a97e:	2300      	movs	r3, #0
 800a980:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800a982:	2300      	movs	r3, #0
 800a984:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800a986:	2300      	movs	r3, #0
 800a988:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	695b      	ldr	r3, [r3, #20]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f000 8090 	beq.w	800aab4 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	891b      	ldrh	r3, [r3, #8]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d121      	bne.n	800a9e6 <CircularQueue_Sense+0x86>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	b29a      	uxth	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6819      	ldr	r1, [r3, #0]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	1c58      	adds	r0, r3, #1
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	4298      	cmp	r0, r3
 800a9c0:	d306      	bcc.n	800a9d0 <CircularQueue_Sense+0x70>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	68d8      	ldr	r0, [r3, #12]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	1ac3      	subs	r3, r0, r3
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	e002      	b.n	800a9d6 <CircularQueue_Sense+0x76>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	440b      	add	r3, r1
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	021b      	lsls	r3, r3, #8
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	4413      	add	r3, r2
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	e001      	b.n	800a9ea <CircularQueue_Sense+0x8a>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	891b      	ldrh	r3, [r3, #8]
 800a9ea:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	7f1b      	ldrb	r3, [r3, #28]
 800a9f0:	f003 0301 	and.w	r3, r3, #1
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d048      	beq.n	800aa8a <CircularQueue_Sense+0x12a>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	7f1b      	ldrb	r3, [r3, #28]
 800a9fc:	f003 0302 	and.w	r3, r3, #2
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d142      	bne.n	800aa8a <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800aa04:	8a7b      	ldrh	r3, [r7, #18]
 800aa06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d103      	bne.n	800aa16 <CircularQueue_Sense+0xb6>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	891b      	ldrh	r3, [r3, #8]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d012      	beq.n	800aa3c <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	68da      	ldr	r2, [r3, #12]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d933      	bls.n	800aa8a <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	891b      	ldrh	r3, [r3, #8]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d02f      	beq.n	800aa8a <CircularQueue_Sense+0x12a>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68db      	ldr	r3, [r3, #12]
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	8912      	ldrh	r2, [r2, #8]
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d226      	bcs.n	800aa8a <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	891b      	ldrh	r3, [r3, #8]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d11d      	bne.n	800aa84 <CircularQueue_Sense+0x124>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	4413      	add	r3, r2
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6819      	ldr	r1, [r3, #0]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	1c58      	adds	r0, r3, #1
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	4298      	cmp	r0, r3
 800aa62:	d305      	bcc.n	800aa70 <CircularQueue_Sense+0x110>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	1ac3      	subs	r3, r0, r3
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	e001      	b.n	800aa74 <CircularQueue_Sense+0x114>
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	3301      	adds	r3, #1
 800aa74:	440b      	add	r3, r1
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	021b      	lsls	r3, r3, #8
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	4413      	add	r3, r2
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	e001      	b.n	800aa88 <CircularQueue_Sense+0x128>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	891b      	ldrh	r3, [r3, #8]
 800aa88:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	7af9      	ldrb	r1, [r7, #11]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4419      	add	r1, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	685b      	ldr	r3, [r3, #4]
 800aa98:	4299      	cmp	r1, r3
 800aa9a:	d306      	bcc.n	800aaaa <CircularQueue_Sense+0x14a>
 800aa9c:	7af9      	ldrb	r1, [r7, #11]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	4419      	add	r1, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	1acb      	subs	r3, r1, r3
 800aaa8:	e002      	b.n	800aab0 <CircularQueue_Sense+0x150>
 800aaaa:	7af9      	ldrb	r1, [r7, #11]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	440b      	add	r3, r1
 800aab0:	4413      	add	r3, r2
 800aab2:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d002      	beq.n	800aac0 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	8a7a      	ldrh	r2, [r7, #18]
 800aabe:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800aac0:	697b      	ldr	r3, [r7, #20]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	371c      	adds	r7, #28
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr

0800aace <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800aace:	b480      	push	{r7}
 800aad0:	af00      	add	r7, sp, #0
  return;
 800aad2:	bf00      	nop
}
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800aadc:	b480      	push	{r7}
 800aade:	af00      	add	r7, sp, #0
  return;
 800aae0:	bf00      	nop
}
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr

0800aaea <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800aaea:	b480      	push	{r7}
 800aaec:	af00      	add	r7, sp, #0
  return;
 800aaee:	bf00      	nop
}
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800aaf8:	b480      	push	{r7}
 800aafa:	af00      	add	r7, sp, #0
  return;
 800aafc:	bf00      	nop
}
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800ab06:	b480      	push	{r7}
 800ab08:	af00      	add	r7, sp, #0
  return;
 800ab0a:	bf00      	nop
}
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800ab14:	b480      	push	{r7}
 800ab16:	af00      	add	r7, sp, #0
  return;
 800ab18:	bf00      	nop
}
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800ab22:	b480      	push	{r7}
 800ab24:	af00      	add	r7, sp, #0
  return;
 800ab26:	bf00      	nop
}
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800ab30:	b480      	push	{r7}
 800ab32:	af00      	add	r7, sp, #0
  return;
 800ab34:	bf00      	nop
}
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr

0800ab3e <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800ab3e:	b480      	push	{r7}
 800ab40:	af00      	add	r7, sp, #0
  return;
 800ab42:	bf00      	nop
}
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	af00      	add	r7, sp, #0
  return;
 800ab50:	bf00      	nop
}
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	af00      	add	r7, sp, #0
  return;
 800ab5e:	bf00      	nop
}
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800ab68:	b480      	push	{r7}
 800ab6a:	af00      	add	r7, sp, #0
  return;
 800ab6c:	bf00      	nop
}
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr

0800ab76 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800ab76:	b480      	push	{r7}
 800ab78:	af00      	add	r7, sp, #0
  return;
 800ab7a:	bf00      	nop
}
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr

0800ab84 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800ab84:	b480      	push	{r7}
 800ab86:	af00      	add	r7, sp, #0
  return;
 800ab88:	bf00      	nop
}
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800ab92:	b480      	push	{r7}
 800ab94:	af00      	add	r7, sp, #0
  return;
 800ab96:	bf00      	nop
}
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800aba0:	b480      	push	{r7}
 800aba2:	af00      	add	r7, sp, #0
  return;
 800aba4:	bf00      	nop
}
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr

0800abae <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800abae:	b480      	push	{r7}
 800abb0:	af00      	add	r7, sp, #0
  return;
 800abb2:	bf00      	nop
}
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr

0800abbc <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800abbc:	b480      	push	{r7}
 800abbe:	af00      	add	r7, sp, #0
  return;
 800abc0:	bf00      	nop
}
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr
	...

0800abcc <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800abd0:	4b04      	ldr	r3, [pc, #16]	; (800abe4 <SVCCTL_Init+0x18>)
 800abd2:	2200      	movs	r2, #0
 800abd4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800abd6:	4b04      	ldr	r3, [pc, #16]	; (800abe8 <SVCCTL_Init+0x1c>)
 800abd8:	2200      	movs	r2, #0
 800abda:	711a      	strb	r2, [r3, #4]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800abdc:	f000 f806 	bl	800abec <SVCCTL_SvcInit>

  return;
 800abe0:	bf00      	nop
}
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	2000023c 	.word	0x2000023c
 800abe8:	2000025c 	.word	0x2000025c

0800abec <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	af00      	add	r7, sp, #0
  BAS_Init();
 800abf0:	f7ff ff6d 	bl	800aace <BAS_Init>

  BLS_Init();
 800abf4:	f7ff ff72 	bl	800aadc <BLS_Init>

  CRS_STM_Init();
 800abf8:	f7ff ff77 	bl	800aaea <CRS_STM_Init>

  DIS_Init();
 800abfc:	f7ff ff7c 	bl	800aaf8 <DIS_Init>

  EDS_STM_Init();
 800ac00:	f7ff ff81 	bl	800ab06 <EDS_STM_Init>

  HIDS_Init();
 800ac04:	f7ff ff86 	bl	800ab14 <HIDS_Init>

  HRS_Init();
 800ac08:	f7ff ff8b 	bl	800ab22 <HRS_Init>

  HTS_Init();
 800ac0c:	f7ff ff90 	bl	800ab30 <HTS_Init>

  IAS_Init();
 800ac10:	f7ff ff95 	bl	800ab3e <IAS_Init>

  LLS_Init();
 800ac14:	f7ff ff9a 	bl	800ab4c <LLS_Init>

  TPS_Init();
 800ac18:	f7ff ff9f 	bl	800ab5a <TPS_Init>

  MOTENV_STM_Init();
 800ac1c:	f7ff ffa4 	bl	800ab68 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800ac20:	f7ff ffa9 	bl	800ab76 <P2PS_STM_Init>

  ZDD_STM_Init();
 800ac24:	f7ff ffae 	bl	800ab84 <ZDD_STM_Init>

  OTAS_STM_Init();
 800ac28:	f7ff ffb3 	bl	800ab92 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800ac2c:	f7ff ffbf 	bl	800abae <BVOPUS_STM_Init>

  MESH_Init();
 800ac30:	f7ff ffb6 	bl	800aba0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800ac34:	f7ff ffc2 	bl	800abbc <SVCCTL_InitCustomSvc>
  
  return;
 800ac38:	bf00      	nop
}
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b086      	sub	sp, #24
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	3301      	adds	r3, #1
 800ac48:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	2bff      	cmp	r3, #255	; 0xff
 800ac54:	d13f      	bne.n	800acd6 <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	3302      	adds	r3, #2
 800ac5a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	881b      	ldrh	r3, [r3, #0]
 800ac60:	b29b      	uxth	r3, r3
 800ac62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ac66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ac6a:	d132      	bne.n	800acd2 <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	757b      	strb	r3, [r7, #21]
 800ac70:	e00d      	b.n	800ac8e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800ac72:	7d7b      	ldrb	r3, [r7, #21]
 800ac74:	4a27      	ldr	r2, [pc, #156]	; (800ad14 <SVCCTL_UserEvtRx+0xd8>)
 800ac76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac7a:	6878      	ldr	r0, [r7, #4]
 800ac7c:	4798      	blx	r3
 800ac7e:	4603      	mov	r3, r0
 800ac80:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d108      	bne.n	800ac9a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ac88:	7d7b      	ldrb	r3, [r7, #21]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	757b      	strb	r3, [r7, #21]
 800ac8e:	4b21      	ldr	r3, [pc, #132]	; (800ad14 <SVCCTL_UserEvtRx+0xd8>)
 800ac90:	7f1b      	ldrb	r3, [r3, #28]
 800ac92:	7d7a      	ldrb	r2, [r7, #21]
 800ac94:	429a      	cmp	r2, r3
 800ac96:	d3ec      	bcc.n	800ac72 <SVCCTL_UserEvtRx+0x36>
 800ac98:	e000      	b.n	800ac9c <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 800ac9a:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800aca0:	2300      	movs	r3, #0
 800aca2:	757b      	strb	r3, [r7, #21]
 800aca4:	e00d      	b.n	800acc2 <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800aca6:	7d7b      	ldrb	r3, [r7, #21]
 800aca8:	4a1b      	ldr	r2, [pc, #108]	; (800ad18 <SVCCTL_UserEvtRx+0xdc>)
 800acaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	4798      	blx	r3
 800acb2:	4603      	mov	r3, r0
 800acb4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800acb6:	7dfb      	ldrb	r3, [r7, #23]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d108      	bne.n	800acce <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800acbc:	7d7b      	ldrb	r3, [r7, #21]
 800acbe:	3301      	adds	r3, #1
 800acc0:	757b      	strb	r3, [r7, #21]
 800acc2:	4b15      	ldr	r3, [pc, #84]	; (800ad18 <SVCCTL_UserEvtRx+0xdc>)
 800acc4:	791b      	ldrb	r3, [r3, #4]
 800acc6:	7d7a      	ldrb	r2, [r7, #21]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d3ec      	bcc.n	800aca6 <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 800accc:	e002      	b.n	800acd4 <SVCCTL_UserEvtRx+0x98>
              break;
 800acce:	bf00      	nop
          break;
 800acd0:	e000      	b.n	800acd4 <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 800acd2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800acd4:	e000      	b.n	800acd8 <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 800acd6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d00f      	beq.n	800acfe <SVCCTL_UserEvtRx+0xc2>
 800acde:	2b02      	cmp	r3, #2
 800ace0:	dc10      	bgt.n	800ad04 <SVCCTL_UserEvtRx+0xc8>
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d002      	beq.n	800acec <SVCCTL_UserEvtRx+0xb0>
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d006      	beq.n	800acf8 <SVCCTL_UserEvtRx+0xbc>
 800acea:	e00b      	b.n	800ad04 <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7f8 f925 	bl	8002f3c <SVCCTL_App_Notification>
 800acf2:	4603      	mov	r3, r0
 800acf4:	75bb      	strb	r3, [r7, #22]
      break;
 800acf6:	e008      	b.n	800ad0a <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800acf8:	2301      	movs	r3, #1
 800acfa:	75bb      	strb	r3, [r7, #22]
      break;
 800acfc:	e005      	b.n	800ad0a <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800acfe:	2300      	movs	r3, #0
 800ad00:	75bb      	strb	r3, [r7, #22]
      break;
 800ad02:	e002      	b.n	800ad0a <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ad04:	2301      	movs	r3, #1
 800ad06:	75bb      	strb	r3, [r7, #22]
      break;
 800ad08:	bf00      	nop
  }

  return (return_status);
 800ad0a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3718      	adds	r7, #24
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	2000023c 	.word	0x2000023c
 800ad18:	2000025c 	.word	0x2000025c

0800ad1c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800ad20:	f7f8 fe6e 	bl	8003a00 <HW_IPCC_Enable>

  return;
 800ad24:	bf00      	nop
}
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <TL_Init>:


void TL_Init( void )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800ad2c:	4b10      	ldr	r3, [pc, #64]	; (800ad70 <TL_Init+0x48>)
 800ad2e:	4a11      	ldr	r2, [pc, #68]	; (800ad74 <TL_Init+0x4c>)
 800ad30:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800ad32:	4b0f      	ldr	r3, [pc, #60]	; (800ad70 <TL_Init+0x48>)
 800ad34:	4a10      	ldr	r2, [pc, #64]	; (800ad78 <TL_Init+0x50>)
 800ad36:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800ad38:	4b0d      	ldr	r3, [pc, #52]	; (800ad70 <TL_Init+0x48>)
 800ad3a:	4a10      	ldr	r2, [pc, #64]	; (800ad7c <TL_Init+0x54>)
 800ad3c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800ad3e:	4b0c      	ldr	r3, [pc, #48]	; (800ad70 <TL_Init+0x48>)
 800ad40:	4a0f      	ldr	r2, [pc, #60]	; (800ad80 <TL_Init+0x58>)
 800ad42:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800ad44:	4b0a      	ldr	r3, [pc, #40]	; (800ad70 <TL_Init+0x48>)
 800ad46:	4a0f      	ldr	r2, [pc, #60]	; (800ad84 <TL_Init+0x5c>)
 800ad48:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800ad4a:	4b09      	ldr	r3, [pc, #36]	; (800ad70 <TL_Init+0x48>)
 800ad4c:	4a0e      	ldr	r2, [pc, #56]	; (800ad88 <TL_Init+0x60>)
 800ad4e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800ad50:	4b07      	ldr	r3, [pc, #28]	; (800ad70 <TL_Init+0x48>)
 800ad52:	4a0e      	ldr	r2, [pc, #56]	; (800ad8c <TL_Init+0x64>)
 800ad54:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800ad56:	4b06      	ldr	r3, [pc, #24]	; (800ad70 <TL_Init+0x48>)
 800ad58:	4a0d      	ldr	r2, [pc, #52]	; (800ad90 <TL_Init+0x68>)
 800ad5a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800ad5c:	4b04      	ldr	r3, [pc, #16]	; (800ad70 <TL_Init+0x48>)
 800ad5e:	4a0d      	ldr	r2, [pc, #52]	; (800ad94 <TL_Init+0x6c>)
 800ad60:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800ad62:	4b03      	ldr	r3, [pc, #12]	; (800ad70 <TL_Init+0x48>)
 800ad64:	4a0c      	ldr	r2, [pc, #48]	; (800ad98 <TL_Init+0x70>)
 800ad66:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800ad68:	f7f8 fe5e 	bl	8003a28 <HW_IPCC_Init>

  return;
 800ad6c:	bf00      	nop
}
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	20030000 	.word	0x20030000
 800ad74:	20030134 	.word	0x20030134
 800ad78:	20030154 	.word	0x20030154
 800ad7c:	20030164 	.word	0x20030164
 800ad80:	20030174 	.word	0x20030174
 800ad84:	2003017c 	.word	0x2003017c
 800ad88:	20030184 	.word	0x20030184
 800ad8c:	2003018c 	.word	0x2003018c
 800ad90:	200301a8 	.word	0x200301a8
 800ad94:	200301ac 	.word	0x200301ac
 800ad98:	200301b8 	.word	0x200301b8

0800ad9c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800ada8:	4811      	ldr	r0, [pc, #68]	; (800adf0 <TL_BLE_Init+0x54>)
 800adaa:	f7ff f9d1 	bl	800a150 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800adae:	4b11      	ldr	r3, [pc, #68]	; (800adf4 <TL_BLE_Init+0x58>)
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	689a      	ldr	r2, [r3, #8]
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	68da      	ldr	r2, [r3, #12]
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	4a0c      	ldr	r2, [pc, #48]	; (800adf8 <TL_BLE_Init+0x5c>)
 800adc8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	4a08      	ldr	r2, [pc, #32]	; (800adf0 <TL_BLE_Init+0x54>)
 800adce:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800add0:	f7f8 fe40 	bl	8003a54 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a08      	ldr	r2, [pc, #32]	; (800adfc <TL_BLE_Init+0x60>)
 800adda:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	4a07      	ldr	r2, [pc, #28]	; (800ae00 <TL_BLE_Init+0x64>)
 800ade2:	6013      	str	r3, [r2, #0]

  return 0;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	200301d4 	.word	0x200301d4
 800adf4:	20030000 	.word	0x20030000
 800adf8:	20030a58 	.word	0x20030a58
 800adfc:	200016ec 	.word	0x200016ec
 800ae00:	200016f0 	.word	0x200016f0

0800ae04 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800ae10:	4b09      	ldr	r3, [pc, #36]	; (800ae38 <TL_BLE_SendCmd+0x34>)
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2201      	movs	r2, #1
 800ae18:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800ae1a:	4b07      	ldr	r3, [pc, #28]	; (800ae38 <TL_BLE_SendCmd+0x34>)
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4619      	mov	r1, r3
 800ae22:	2001      	movs	r0, #1
 800ae24:	f000 f96c 	bl	800b100 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800ae28:	f7f8 fe1e 	bl	8003a68 <HW_IPCC_BLE_SendCmd>

  return 0;
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3708      	adds	r7, #8
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	20030000 	.word	0x20030000

0800ae3c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800ae42:	e01c      	b.n	800ae7e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800ae44:	1d3b      	adds	r3, r7, #4
 800ae46:	4619      	mov	r1, r3
 800ae48:	4812      	ldr	r0, [pc, #72]	; (800ae94 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ae4a:	f7ff fa20 	bl	800a28e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	7a5b      	ldrb	r3, [r3, #9]
 800ae52:	2b0f      	cmp	r3, #15
 800ae54:	d003      	beq.n	800ae5e <HW_IPCC_BLE_RxEvtNot+0x22>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	7a5b      	ldrb	r3, [r3, #9]
 800ae5a:	2b0e      	cmp	r3, #14
 800ae5c:	d105      	bne.n	800ae6a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	4619      	mov	r1, r3
 800ae62:	2002      	movs	r0, #2
 800ae64:	f000 f94c 	bl	800b100 <OutputDbgTrace>
 800ae68:	e004      	b.n	800ae74 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	2003      	movs	r0, #3
 800ae70:	f000 f946 	bl	800b100 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800ae74:	4b08      	ldr	r3, [pc, #32]	; (800ae98 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	4610      	mov	r0, r2
 800ae7c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800ae7e:	4805      	ldr	r0, [pc, #20]	; (800ae94 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ae80:	f7ff f976 	bl	800a170 <LST_is_empty>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d0dc      	beq.n	800ae44 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800ae8a:	bf00      	nop
}
 800ae8c:	3708      	adds	r7, #8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	200301d4 	.word	0x200301d4
 800ae98:	200016ec 	.word	0x200016ec

0800ae9c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800aea0:	4b02      	ldr	r3, [pc, #8]	; (800aeac <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4798      	blx	r3

  return;
 800aea6:	bf00      	nop
}
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	200016f0 	.word	0x200016f0

0800aeb0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800aebc:	480d      	ldr	r0, [pc, #52]	; (800aef4 <TL_SYS_Init+0x44>)
 800aebe:	f7ff f947 	bl	800a150 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800aec2:	4b0d      	ldr	r3, [pc, #52]	; (800aef8 <TL_SYS_Init+0x48>)
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	689a      	ldr	r2, [r3, #8]
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	4a08      	ldr	r2, [pc, #32]	; (800aef4 <TL_SYS_Init+0x44>)
 800aed4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800aed6:	f7f8 fde9 	bl	8003aac <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4a07      	ldr	r2, [pc, #28]	; (800aefc <TL_SYS_Init+0x4c>)
 800aee0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	4a06      	ldr	r2, [pc, #24]	; (800af00 <TL_SYS_Init+0x50>)
 800aee8:	6013      	str	r3, [r2, #0]

  return 0;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	200301dc 	.word	0x200301dc
 800aef8:	20030000 	.word	0x20030000
 800aefc:	200016f4 	.word	0x200016f4
 800af00:	200016f8 	.word	0x200016f8

0800af04 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	460b      	mov	r3, r1
 800af0e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800af10:	4b09      	ldr	r3, [pc, #36]	; (800af38 <TL_SYS_SendCmd+0x34>)
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2210      	movs	r2, #16
 800af18:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800af1a:	4b07      	ldr	r3, [pc, #28]	; (800af38 <TL_SYS_SendCmd+0x34>)
 800af1c:	68db      	ldr	r3, [r3, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	4619      	mov	r1, r3
 800af22:	2004      	movs	r0, #4
 800af24:	f000 f8ec 	bl	800b100 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800af28:	f7f8 fdca 	bl	8003ac0 <HW_IPCC_SYS_SendCmd>

  return 0;
 800af2c:	2300      	movs	r3, #0
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3708      	adds	r7, #8
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
 800af36:	bf00      	nop
 800af38:	20030000 	.word	0x20030000

0800af3c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800af40:	4b07      	ldr	r3, [pc, #28]	; (800af60 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4619      	mov	r1, r3
 800af48:	2005      	movs	r0, #5
 800af4a:	f000 f8d9 	bl	800b100 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800af4e:	4b05      	ldr	r3, [pc, #20]	; (800af64 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4a03      	ldr	r2, [pc, #12]	; (800af60 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800af54:	68d2      	ldr	r2, [r2, #12]
 800af56:	6812      	ldr	r2, [r2, #0]
 800af58:	4610      	mov	r0, r2
 800af5a:	4798      	blx	r3

  return;
 800af5c:	bf00      	nop
}
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	20030000 	.word	0x20030000
 800af64:	200016f4 	.word	0x200016f4

0800af68 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b082      	sub	sp, #8
 800af6c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800af6e:	e00e      	b.n	800af8e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800af70:	1d3b      	adds	r3, r7, #4
 800af72:	4619      	mov	r1, r3
 800af74:	480b      	ldr	r0, [pc, #44]	; (800afa4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800af76:	f7ff f98a 	bl	800a28e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	4619      	mov	r1, r3
 800af7e:	2006      	movs	r0, #6
 800af80:	f000 f8be 	bl	800b100 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800af84:	4b08      	ldr	r3, [pc, #32]	; (800afa8 <HW_IPCC_SYS_EvtNot+0x40>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	4610      	mov	r0, r2
 800af8c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800af8e:	4805      	ldr	r0, [pc, #20]	; (800afa4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800af90:	f7ff f8ee 	bl	800a170 <LST_is_empty>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d0ea      	beq.n	800af70 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800af9a:	bf00      	nop
}
 800af9c:	3708      	adds	r7, #8
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	200301dc 	.word	0x200301dc
 800afa8:	200016f8 	.word	0x200016f8

0800afac <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800afb4:	4817      	ldr	r0, [pc, #92]	; (800b014 <TL_MM_Init+0x68>)
 800afb6:	f7ff f8cb 	bl	800a150 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800afba:	4817      	ldr	r0, [pc, #92]	; (800b018 <TL_MM_Init+0x6c>)
 800afbc:	f7ff f8c8 	bl	800a150 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800afc0:	4b16      	ldr	r3, [pc, #88]	; (800b01c <TL_MM_Init+0x70>)
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	4a16      	ldr	r2, [pc, #88]	; (800b020 <TL_MM_Init+0x74>)
 800afc6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800afc8:	4b15      	ldr	r3, [pc, #84]	; (800b020 <TL_MM_Init+0x74>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	6892      	ldr	r2, [r2, #8]
 800afd0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800afd2:	4b13      	ldr	r3, [pc, #76]	; (800b020 <TL_MM_Init+0x74>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	68d2      	ldr	r2, [r2, #12]
 800afda:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800afdc:	4b10      	ldr	r3, [pc, #64]	; (800b020 <TL_MM_Init+0x74>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a0c      	ldr	r2, [pc, #48]	; (800b014 <TL_MM_Init+0x68>)
 800afe2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800afe4:	4b0e      	ldr	r3, [pc, #56]	; (800b020 <TL_MM_Init+0x74>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	6812      	ldr	r2, [r2, #0]
 800afec:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800afee:	4b0c      	ldr	r3, [pc, #48]	; (800b020 <TL_MM_Init+0x74>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	6852      	ldr	r2, [r2, #4]
 800aff6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800aff8:	4b09      	ldr	r3, [pc, #36]	; (800b020 <TL_MM_Init+0x74>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	6912      	ldr	r2, [r2, #16]
 800b000:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800b002:	4b07      	ldr	r3, [pc, #28]	; (800b020 <TL_MM_Init+0x74>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	6952      	ldr	r2, [r2, #20]
 800b00a:	619a      	str	r2, [r3, #24]

  return;
 800b00c:	bf00      	nop
}
 800b00e:	3708      	adds	r7, #8
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	200301c4 	.word	0x200301c4
 800b018:	200016e4 	.word	0x200016e4
 800b01c:	20030000 	.word	0x20030000
 800b020:	200016fc 	.word	0x200016fc

0800b024 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800b02c:	6879      	ldr	r1, [r7, #4]
 800b02e:	4807      	ldr	r0, [pc, #28]	; (800b04c <TL_MM_EvtDone+0x28>)
 800b030:	f7ff f8e6 	bl	800a200 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800b034:	6879      	ldr	r1, [r7, #4]
 800b036:	2000      	movs	r0, #0
 800b038:	f000 f862 	bl	800b100 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800b03c:	4804      	ldr	r0, [pc, #16]	; (800b050 <TL_MM_EvtDone+0x2c>)
 800b03e:	f7f8 fd65 	bl	8003b0c <HW_IPCC_MM_SendFreeBuf>

  return;
 800b042:	bf00      	nop
}
 800b044:	3708      	adds	r7, #8
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	200016e4 	.word	0x200016e4
 800b050:	0800b055 	.word	0x0800b055

0800b054 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b05a:	e00c      	b.n	800b076 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800b05c:	1d3b      	adds	r3, r7, #4
 800b05e:	4619      	mov	r1, r3
 800b060:	480a      	ldr	r0, [pc, #40]	; (800b08c <SendFreeBuf+0x38>)
 800b062:	f7ff f914 	bl	800a28e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800b066:	4b0a      	ldr	r3, [pc, #40]	; (800b090 <SendFreeBuf+0x3c>)
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	691b      	ldr	r3, [r3, #16]
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	4611      	mov	r1, r2
 800b070:	4618      	mov	r0, r3
 800b072:	f7ff f8c5 	bl	800a200 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800b076:	4805      	ldr	r0, [pc, #20]	; (800b08c <SendFreeBuf+0x38>)
 800b078:	f7ff f87a 	bl	800a170 <LST_is_empty>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d0ec      	beq.n	800b05c <SendFreeBuf+0x8>
  }

  return;
 800b082:	bf00      	nop
}
 800b084:	3708      	adds	r7, #8
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	200016e4 	.word	0x200016e4
 800b090:	20030000 	.word	0x20030000

0800b094 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800b094:	b580      	push	{r7, lr}
 800b096:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800b098:	4805      	ldr	r0, [pc, #20]	; (800b0b0 <TL_TRACES_Init+0x1c>)
 800b09a:	f7ff f859 	bl	800a150 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800b09e:	4b05      	ldr	r3, [pc, #20]	; (800b0b4 <TL_TRACES_Init+0x20>)
 800b0a0:	695b      	ldr	r3, [r3, #20]
 800b0a2:	4a03      	ldr	r2, [pc, #12]	; (800b0b0 <TL_TRACES_Init+0x1c>)
 800b0a4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800b0a6:	f7f8 fd67 	bl	8003b78 <HW_IPCC_TRACES_Init>

  return;
 800b0aa:	bf00      	nop
}
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	200301cc 	.word	0x200301cc
 800b0b4:	20030000 	.word	0x20030000

0800b0b8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b0be:	e008      	b.n	800b0d2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800b0c0:	1d3b      	adds	r3, r7, #4
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	4808      	ldr	r0, [pc, #32]	; (800b0e8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b0c6:	f7ff f8e2 	bl	800a28e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f000 f80d 	bl	800b0ec <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800b0d2:	4805      	ldr	r0, [pc, #20]	; (800b0e8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800b0d4:	f7ff f84c 	bl	800a170 <LST_is_empty>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d0f0      	beq.n	800b0c0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800b0de:	bf00      	nop
}
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	200301cc 	.word	0x200301cc

0800b0ec <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b083      	sub	sp, #12
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800b0f4:	bf00      	nop
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
 800b106:	4603      	mov	r3, r0
 800b108:	6039      	str	r1, [r7, #0]
 800b10a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800b10c:	79fb      	ldrb	r3, [r7, #7]
 800b10e:	2b06      	cmp	r3, #6
 800b110:	d845      	bhi.n	800b19e <OutputDbgTrace+0x9e>
 800b112:	a201      	add	r2, pc, #4	; (adr r2, 800b118 <OutputDbgTrace+0x18>)
 800b114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b118:	0800b135 	.word	0x0800b135
 800b11c:	0800b159 	.word	0x0800b159
 800b120:	0800b15f 	.word	0x0800b15f
 800b124:	0800b173 	.word	0x0800b173
 800b128:	0800b17f 	.word	0x0800b17f
 800b12c:	0800b185 	.word	0x0800b185
 800b130:	0800b193 	.word	0x0800b193
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	7a5b      	ldrb	r3, [r3, #9]
 800b13c:	2bff      	cmp	r3, #255	; 0xff
 800b13e:	d005      	beq.n	800b14c <OutputDbgTrace+0x4c>
 800b140:	2bff      	cmp	r3, #255	; 0xff
 800b142:	dc05      	bgt.n	800b150 <OutputDbgTrace+0x50>
 800b144:	2b0e      	cmp	r3, #14
 800b146:	d005      	beq.n	800b154 <OutputDbgTrace+0x54>
 800b148:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800b14a:	e001      	b.n	800b150 <OutputDbgTrace+0x50>
          break;
 800b14c:	bf00      	nop
 800b14e:	e027      	b.n	800b1a0 <OutputDbgTrace+0xa0>
          break;
 800b150:	bf00      	nop
 800b152:	e025      	b.n	800b1a0 <OutputDbgTrace+0xa0>
          break;
 800b154:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800b156:	e023      	b.n	800b1a0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b15c:	e020      	b.n	800b1a0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	7a5b      	ldrb	r3, [r3, #9]
 800b166:	2b0e      	cmp	r3, #14
 800b168:	d001      	beq.n	800b16e <OutputDbgTrace+0x6e>
 800b16a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b16c:	e000      	b.n	800b170 <OutputDbgTrace+0x70>
          break;
 800b16e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b170:	e016      	b.n	800b1a0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	7a5b      	ldrb	r3, [r3, #9]
 800b17a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b17c:	e010      	b.n	800b1a0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800b182:	e00d      	b.n	800b1a0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	7a5b      	ldrb	r3, [r3, #9]
 800b18c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800b18e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b190:	e006      	b.n	800b1a0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	7a5b      	ldrb	r3, [r3, #9]
 800b19a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800b19c:	e000      	b.n	800b1a0 <OutputDbgTrace+0xa0>

    default:
      break;
 800b19e:	bf00      	nop
  }

  return;
 800b1a0:	bf00      	nop
}
 800b1a2:	3714      	adds	r7, #20
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800b1b0:	4b05      	ldr	r3, [pc, #20]	; (800b1c8 <UTIL_LPM_Init+0x1c>)
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800b1b6:	4b05      	ldr	r3, [pc, #20]	; (800b1cc <UTIL_LPM_Init+0x20>)
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800b1bc:	bf00      	nop
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	20001700 	.word	0x20001700
 800b1cc:	20001704 	.word	0x20001704

0800b1d0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b087      	sub	sp, #28
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	460b      	mov	r3, r1
 800b1da:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1dc:	f3ef 8310 	mrs	r3, PRIMASK
 800b1e0:	613b      	str	r3, [r7, #16]
  return(result);
 800b1e2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800b1e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1e6:	b672      	cpsid	i
}
 800b1e8:	bf00      	nop
  
  switch(state)
 800b1ea:	78fb      	ldrb	r3, [r7, #3]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d008      	beq.n	800b202 <UTIL_LPM_SetOffMode+0x32>
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d10e      	bne.n	800b212 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800b1f4:	4b0d      	ldr	r3, [pc, #52]	; (800b22c <UTIL_LPM_SetOffMode+0x5c>)
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	4a0b      	ldr	r2, [pc, #44]	; (800b22c <UTIL_LPM_SetOffMode+0x5c>)
 800b1fe:	6013      	str	r3, [r2, #0]
      break;
 800b200:	e008      	b.n	800b214 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	43da      	mvns	r2, r3
 800b206:	4b09      	ldr	r3, [pc, #36]	; (800b22c <UTIL_LPM_SetOffMode+0x5c>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4013      	ands	r3, r2
 800b20c:	4a07      	ldr	r2, [pc, #28]	; (800b22c <UTIL_LPM_SetOffMode+0x5c>)
 800b20e:	6013      	str	r3, [r2, #0]
      break;
 800b210:	e000      	b.n	800b214 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800b212:	bf00      	nop
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f383 8810 	msr	PRIMASK, r3
}
 800b21e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800b220:	bf00      	nop
 800b222:	371c      	adds	r7, #28
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr
 800b22c:	20001704 	.word	0x20001704

0800b230 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b090      	sub	sp, #64	; 0x40
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800b238:	4b73      	ldr	r3, [pc, #460]	; (800b408 <UTIL_SEQ_Run+0x1d8>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800b23e:	4b72      	ldr	r3, [pc, #456]	; (800b408 <UTIL_SEQ_Run+0x1d8>)
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	4013      	ands	r3, r2
 800b246:	4a70      	ldr	r2, [pc, #448]	; (800b408 <UTIL_SEQ_Run+0x1d8>)
 800b248:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800b24a:	4b70      	ldr	r3, [pc, #448]	; (800b40c <UTIL_SEQ_Run+0x1dc>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b250:	4b6f      	ldr	r3, [pc, #444]	; (800b410 <UTIL_SEQ_Run+0x1e0>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b256:	4b6f      	ldr	r3, [pc, #444]	; (800b414 <UTIL_SEQ_Run+0x1e4>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800b25c:	4b6e      	ldr	r3, [pc, #440]	; (800b418 <UTIL_SEQ_Run+0x1e8>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b262:	e08d      	b.n	800b380 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800b264:	2300      	movs	r3, #0
 800b266:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b268:	e002      	b.n	800b270 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800b26a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b26c:	3301      	adds	r3, #1
 800b26e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800b270:	4a6a      	ldr	r2, [pc, #424]	; (800b41c <UTIL_SEQ_Run+0x1ec>)
 800b272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b274:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27a:	401a      	ands	r2, r3
 800b27c:	4b62      	ldr	r3, [pc, #392]	; (800b408 <UTIL_SEQ_Run+0x1d8>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4013      	ands	r3, r2
 800b282:	2b00      	cmp	r3, #0
 800b284:	d0f1      	beq.n	800b26a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800b286:	4a65      	ldr	r2, [pc, #404]	; (800b41c <UTIL_SEQ_Run+0x1ec>)
 800b288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b28a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b290:	401a      	ands	r2, r3
 800b292:	4b5d      	ldr	r3, [pc, #372]	; (800b408 <UTIL_SEQ_Run+0x1d8>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4013      	ands	r3, r2
 800b298:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800b29a:	4a60      	ldr	r2, [pc, #384]	; (800b41c <UTIL_SEQ_Run+0x1ec>)
 800b29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b29e:	00db      	lsls	r3, r3, #3
 800b2a0:	4413      	add	r3, r2
 800b2a2:	685a      	ldr	r2, [r3, #4]
 800b2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a6:	4013      	ands	r3, r2
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d106      	bne.n	800b2ba <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800b2ac:	4a5b      	ldr	r2, [pc, #364]	; (800b41c <UTIL_SEQ_Run+0x1ec>)
 800b2ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2b0:	00db      	lsls	r3, r3, #3
 800b2b2:	4413      	add	r3, r2
 800b2b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2b8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800b2ba:	4a58      	ldr	r2, [pc, #352]	; (800b41c <UTIL_SEQ_Run+0x1ec>)
 800b2bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2be:	00db      	lsls	r3, r3, #3
 800b2c0:	4413      	add	r3, r2
 800b2c2:	685a      	ldr	r2, [r3, #4]
 800b2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c6:	4013      	ands	r3, r2
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f000 f9b3 	bl	800b634 <SEQ_BitPosition>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	4b53      	ldr	r3, [pc, #332]	; (800b420 <UTIL_SEQ_Run+0x1f0>)
 800b2d4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800b2d6:	4a51      	ldr	r2, [pc, #324]	; (800b41c <UTIL_SEQ_Run+0x1ec>)
 800b2d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2da:	00db      	lsls	r3, r3, #3
 800b2dc:	4413      	add	r3, r2
 800b2de:	685a      	ldr	r2, [r3, #4]
 800b2e0:	4b4f      	ldr	r3, [pc, #316]	; (800b420 <UTIL_SEQ_Run+0x1f0>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2101      	movs	r1, #1
 800b2e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b2ea:	43db      	mvns	r3, r3
 800b2ec:	401a      	ands	r2, r3
 800b2ee:	494b      	ldr	r1, [pc, #300]	; (800b41c <UTIL_SEQ_Run+0x1ec>)
 800b2f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2f2:	00db      	lsls	r3, r3, #3
 800b2f4:	440b      	add	r3, r1
 800b2f6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2f8:	f3ef 8310 	mrs	r3, PRIMASK
 800b2fc:	61bb      	str	r3, [r7, #24]
  return(result);
 800b2fe:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b300:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800b302:	b672      	cpsid	i
}
 800b304:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800b306:	4b46      	ldr	r3, [pc, #280]	; (800b420 <UTIL_SEQ_Run+0x1f0>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	2201      	movs	r2, #1
 800b30c:	fa02 f303 	lsl.w	r3, r2, r3
 800b310:	43da      	mvns	r2, r3
 800b312:	4b3e      	ldr	r3, [pc, #248]	; (800b40c <UTIL_SEQ_Run+0x1dc>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4013      	ands	r3, r2
 800b318:	4a3c      	ldr	r2, [pc, #240]	; (800b40c <UTIL_SEQ_Run+0x1dc>)
 800b31a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b31c:	2302      	movs	r3, #2
 800b31e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b320:	e013      	b.n	800b34a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800b322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b324:	3b01      	subs	r3, #1
 800b326:	4a3d      	ldr	r2, [pc, #244]	; (800b41c <UTIL_SEQ_Run+0x1ec>)
 800b328:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800b32c:	4b3c      	ldr	r3, [pc, #240]	; (800b420 <UTIL_SEQ_Run+0x1f0>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2201      	movs	r2, #1
 800b332:	fa02 f303 	lsl.w	r3, r2, r3
 800b336:	43da      	mvns	r2, r3
 800b338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b33a:	3b01      	subs	r3, #1
 800b33c:	400a      	ands	r2, r1
 800b33e:	4937      	ldr	r1, [pc, #220]	; (800b41c <UTIL_SEQ_Run+0x1ec>)
 800b340:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800b344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b346:	3b01      	subs	r3, #1
 800b348:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b34a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d1e8      	bne.n	800b322 <UTIL_SEQ_Run+0xf2>
 800b350:	6a3b      	ldr	r3, [r7, #32]
 800b352:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	f383 8810 	msr	PRIMASK, r3
}
 800b35a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800b35c:	4b30      	ldr	r3, [pc, #192]	; (800b420 <UTIL_SEQ_Run+0x1f0>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a30      	ldr	r2, [pc, #192]	; (800b424 <UTIL_SEQ_Run+0x1f4>)
 800b362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b366:	4798      	blx	r3

    local_taskset = TaskSet;
 800b368:	4b28      	ldr	r3, [pc, #160]	; (800b40c <UTIL_SEQ_Run+0x1dc>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800b36e:	4b28      	ldr	r3, [pc, #160]	; (800b410 <UTIL_SEQ_Run+0x1e0>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800b374:	4b27      	ldr	r3, [pc, #156]	; (800b414 <UTIL_SEQ_Run+0x1e4>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800b37a:	4b27      	ldr	r3, [pc, #156]	; (800b418 <UTIL_SEQ_Run+0x1e8>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800b380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b384:	401a      	ands	r2, r3
 800b386:	4b20      	ldr	r3, [pc, #128]	; (800b408 <UTIL_SEQ_Run+0x1d8>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4013      	ands	r3, r2
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d005      	beq.n	800b39c <UTIL_SEQ_Run+0x16c>
 800b390:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b394:	4013      	ands	r3, r2
 800b396:	2b00      	cmp	r3, #0
 800b398:	f43f af64 	beq.w	800b264 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800b39c:	4b20      	ldr	r3, [pc, #128]	; (800b420 <UTIL_SEQ_Run+0x1f0>)
 800b39e:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800b3a4:	f000 f938 	bl	800b618 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3a8:	f3ef 8310 	mrs	r3, PRIMASK
 800b3ac:	613b      	str	r3, [r7, #16]
  return(result);
 800b3ae:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800b3b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b3b2:	b672      	cpsid	i
}
 800b3b4:	bf00      	nop
  local_taskset = TaskSet;
 800b3b6:	4b15      	ldr	r3, [pc, #84]	; (800b40c <UTIL_SEQ_Run+0x1dc>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800b3bc:	4b14      	ldr	r3, [pc, #80]	; (800b410 <UTIL_SEQ_Run+0x1e0>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800b3c2:	4b14      	ldr	r3, [pc, #80]	; (800b414 <UTIL_SEQ_Run+0x1e4>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800b3c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3cc:	401a      	ands	r2, r3
 800b3ce:	4b0e      	ldr	r3, [pc, #56]	; (800b408 <UTIL_SEQ_Run+0x1d8>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4013      	ands	r3, r2
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d107      	bne.n	800b3e8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800b3d8:	4b0f      	ldr	r3, [pc, #60]	; (800b418 <UTIL_SEQ_Run+0x1e8>)
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3de:	4013      	ands	r3, r2
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d101      	bne.n	800b3e8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800b3e4:	f7f6 f8f0 	bl	80015c8 <UTIL_SEQ_Idle>
 800b3e8:	69fb      	ldr	r3, [r7, #28]
 800b3ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f383 8810 	msr	PRIMASK, r3
}
 800b3f2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800b3f4:	f000 f917 	bl	800b626 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800b3f8:	4a03      	ldr	r2, [pc, #12]	; (800b408 <UTIL_SEQ_Run+0x1d8>)
 800b3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fc:	6013      	str	r3, [r2, #0]

  return;
 800b3fe:	bf00      	nop
}
 800b400:	3740      	adds	r7, #64	; 0x40
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	20000054 	.word	0x20000054
 800b40c:	20001708 	.word	0x20001708
 800b410:	2000170c 	.word	0x2000170c
 800b414:	20000050 	.word	0x20000050
 800b418:	20001710 	.word	0x20001710
 800b41c:	20001798 	.word	0x20001798
 800b420:	20001714 	.word	0x20001714
 800b424:	20001718 	.word	0x20001718

0800b428 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b088      	sub	sp, #32
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b434:	f3ef 8310 	mrs	r3, PRIMASK
 800b438:	617b      	str	r3, [r7, #20]
  return(result);
 800b43a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b43c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b43e:	b672      	cpsid	i
}
 800b440:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f000 f8f6 	bl	800b634 <SEQ_BitPosition>
 800b448:	4603      	mov	r3, r0
 800b44a:	4619      	mov	r1, r3
 800b44c:	4a06      	ldr	r2, [pc, #24]	; (800b468 <UTIL_SEQ_RegTask+0x40>)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	f383 8810 	msr	PRIMASK, r3
}
 800b45e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b460:	bf00      	nop
}
 800b462:	3720      	adds	r7, #32
 800b464:	46bd      	mov	sp, r7
 800b466:	bd80      	pop	{r7, pc}
 800b468:	20001718 	.word	0x20001718

0800b46c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b46c:	b480      	push	{r7}
 800b46e:	b087      	sub	sp, #28
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b476:	f3ef 8310 	mrs	r3, PRIMASK
 800b47a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b47c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b47e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b480:	b672      	cpsid	i
}
 800b482:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b484:	4b0d      	ldr	r3, [pc, #52]	; (800b4bc <UTIL_SEQ_SetTask+0x50>)
 800b486:	681a      	ldr	r2, [r3, #0]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	4313      	orrs	r3, r2
 800b48c:	4a0b      	ldr	r2, [pc, #44]	; (800b4bc <UTIL_SEQ_SetTask+0x50>)
 800b48e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b490:	4a0b      	ldr	r2, [pc, #44]	; (800b4c0 <UTIL_SEQ_SetTask+0x54>)
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	431a      	orrs	r2, r3
 800b49c:	4908      	ldr	r1, [pc, #32]	; (800b4c0 <UTIL_SEQ_SetTask+0x54>)
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	f383 8810 	msr	PRIMASK, r3
}
 800b4ae:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b4b0:	bf00      	nop
}
 800b4b2:	371c      	adds	r7, #28
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr
 800b4bc:	20001708 	.word	0x20001708
 800b4c0:	20001798 	.word	0x20001798

0800b4c4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b087      	sub	sp, #28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b4cc:	f3ef 8310 	mrs	r3, PRIMASK
 800b4d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b4d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b4d6:	b672      	cpsid	i
}
 800b4d8:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	43da      	mvns	r2, r3
 800b4de:	4b08      	ldr	r3, [pc, #32]	; (800b500 <UTIL_SEQ_PauseTask+0x3c>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4013      	ands	r3, r2
 800b4e4:	4a06      	ldr	r2, [pc, #24]	; (800b500 <UTIL_SEQ_PauseTask+0x3c>)
 800b4e6:	6013      	str	r3, [r2, #0]
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	f383 8810 	msr	PRIMASK, r3
}
 800b4f2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b4f4:	bf00      	nop
}
 800b4f6:	371c      	adds	r7, #28
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr
 800b500:	20000050 	.word	0x20000050

0800b504 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800b504:	b480      	push	{r7}
 800b506:	b087      	sub	sp, #28
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b50c:	f3ef 8310 	mrs	r3, PRIMASK
 800b510:	60fb      	str	r3, [r7, #12]
  return(result);
 800b512:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b514:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b516:	b672      	cpsid	i
}
 800b518:	bf00      	nop

  TaskMask |= TaskId_bm;
 800b51a:	4b09      	ldr	r3, [pc, #36]	; (800b540 <UTIL_SEQ_ResumeTask+0x3c>)
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4313      	orrs	r3, r2
 800b522:	4a07      	ldr	r2, [pc, #28]	; (800b540 <UTIL_SEQ_ResumeTask+0x3c>)
 800b524:	6013      	str	r3, [r2, #0]
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	f383 8810 	msr	PRIMASK, r3
}
 800b530:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b532:	bf00      	nop
}
 800b534:	371c      	adds	r7, #28
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	20000050 	.word	0x20000050

0800b544 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800b544:	b480      	push	{r7}
 800b546:	b087      	sub	sp, #28
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b54c:	f3ef 8310 	mrs	r3, PRIMASK
 800b550:	60fb      	str	r3, [r7, #12]
  return(result);
 800b552:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b554:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b556:	b672      	cpsid	i
}
 800b558:	bf00      	nop

  EvtSet |= EvtId_bm;
 800b55a:	4b09      	ldr	r3, [pc, #36]	; (800b580 <UTIL_SEQ_SetEvt+0x3c>)
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	4313      	orrs	r3, r2
 800b562:	4a07      	ldr	r2, [pc, #28]	; (800b580 <UTIL_SEQ_SetEvt+0x3c>)
 800b564:	6013      	str	r3, [r2, #0]
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	f383 8810 	msr	PRIMASK, r3
}
 800b570:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b572:	bf00      	nop
}
 800b574:	371c      	adds	r7, #28
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr
 800b57e:	bf00      	nop
 800b580:	2000170c 	.word	0x2000170c

0800b584 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b088      	sub	sp, #32
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800b58c:	4b1f      	ldr	r3, [pc, #124]	; (800b60c <UTIL_SEQ_WaitEvt+0x88>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800b592:	4b1e      	ldr	r3, [pc, #120]	; (800b60c <UTIL_SEQ_WaitEvt+0x88>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b59a:	d102      	bne.n	800b5a2 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800b59c:	2300      	movs	r3, #0
 800b59e:	61fb      	str	r3, [r7, #28]
 800b5a0:	e005      	b.n	800b5ae <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800b5a2:	4b1a      	ldr	r3, [pc, #104]	; (800b60c <UTIL_SEQ_WaitEvt+0x88>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ac:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800b5ae:	4b18      	ldr	r3, [pc, #96]	; (800b610 <UTIL_SEQ_WaitEvt+0x8c>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800b5b4:	4a16      	ldr	r2, [pc, #88]	; (800b610 <UTIL_SEQ_WaitEvt+0x8c>)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800b5ba:	e003      	b.n	800b5c4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800b5bc:	6879      	ldr	r1, [r7, #4]
 800b5be:	69f8      	ldr	r0, [r7, #28]
 800b5c0:	f7f6 f809 	bl	80015d6 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800b5c4:	4b13      	ldr	r3, [pc, #76]	; (800b614 <UTIL_SEQ_WaitEvt+0x90>)
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d0f5      	beq.n	800b5bc <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800b5d0:	4a0e      	ldr	r2, [pc, #56]	; (800b60c <UTIL_SEQ_WaitEvt+0x88>)
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5d6:	f3ef 8310 	mrs	r3, PRIMASK
 800b5da:	60bb      	str	r3, [r7, #8]
  return(result);
 800b5dc:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b5de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b5e0:	b672      	cpsid	i
}
 800b5e2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	43da      	mvns	r2, r3
 800b5e8:	4b0a      	ldr	r3, [pc, #40]	; (800b614 <UTIL_SEQ_WaitEvt+0x90>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4013      	ands	r3, r2
 800b5ee:	4a09      	ldr	r2, [pc, #36]	; (800b614 <UTIL_SEQ_WaitEvt+0x90>)
 800b5f0:	6013      	str	r3, [r2, #0]
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f383 8810 	msr	PRIMASK, r3
}
 800b5fc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800b5fe:	4a04      	ldr	r2, [pc, #16]	; (800b610 <UTIL_SEQ_WaitEvt+0x8c>)
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	6013      	str	r3, [r2, #0]
  return;
 800b604:	bf00      	nop
}
 800b606:	3720      	adds	r7, #32
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	20001714 	.word	0x20001714
 800b610:	20001710 	.word	0x20001710
 800b614:	2000170c 	.word	0x2000170c

0800b618 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b618:	b480      	push	{r7}
 800b61a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b61c:	bf00      	nop
}
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr

0800b626 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b626:	b480      	push	{r7}
 800b628:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b62a:	bf00      	nop
}
 800b62c:	46bd      	mov	sp, r7
 800b62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b632:	4770      	bx	lr

0800b634 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b634:	b480      	push	{r7}
 800b636:	b085      	sub	sp, #20
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800b63c:	2300      	movs	r3, #0
 800b63e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	0c1b      	lsrs	r3, r3, #16
 800b648:	041b      	lsls	r3, r3, #16
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d104      	bne.n	800b658 <SEQ_BitPosition+0x24>
 800b64e:	2310      	movs	r3, #16
 800b650:	73fb      	strb	r3, [r7, #15]
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	041b      	lsls	r3, r3, #16
 800b656:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d105      	bne.n	800b66e <SEQ_BitPosition+0x3a>
 800b662:	7bfb      	ldrb	r3, [r7, #15]
 800b664:	3308      	adds	r3, #8
 800b666:	73fb      	strb	r3, [r7, #15]
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	021b      	lsls	r3, r3, #8
 800b66c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b674:	2b00      	cmp	r3, #0
 800b676:	d105      	bne.n	800b684 <SEQ_BitPosition+0x50>
 800b678:	7bfb      	ldrb	r3, [r7, #15]
 800b67a:	3304      	adds	r3, #4
 800b67c:	73fb      	strb	r3, [r7, #15]
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	011b      	lsls	r3, r3, #4
 800b682:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	0f1b      	lsrs	r3, r3, #28
 800b688:	4a07      	ldr	r2, [pc, #28]	; (800b6a8 <SEQ_BitPosition+0x74>)
 800b68a:	5cd2      	ldrb	r2, [r2, r3]
 800b68c:	7bfb      	ldrb	r3, [r7, #15]
 800b68e:	4413      	add	r3, r2
 800b690:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b692:	7bfb      	ldrb	r3, [r7, #15]
 800b694:	f1c3 031f 	rsb	r3, r3, #31
 800b698:	b2db      	uxtb	r3, r3
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3714      	adds	r7, #20
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	0800f030 	.word	0x0800f030

0800b6ac <__errno>:
 800b6ac:	4b01      	ldr	r3, [pc, #4]	; (800b6b4 <__errno+0x8>)
 800b6ae:	6818      	ldr	r0, [r3, #0]
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	20000058 	.word	0x20000058

0800b6b8 <__libc_init_array>:
 800b6b8:	b570      	push	{r4, r5, r6, lr}
 800b6ba:	4d0d      	ldr	r5, [pc, #52]	; (800b6f0 <__libc_init_array+0x38>)
 800b6bc:	4c0d      	ldr	r4, [pc, #52]	; (800b6f4 <__libc_init_array+0x3c>)
 800b6be:	1b64      	subs	r4, r4, r5
 800b6c0:	10a4      	asrs	r4, r4, #2
 800b6c2:	2600      	movs	r6, #0
 800b6c4:	42a6      	cmp	r6, r4
 800b6c6:	d109      	bne.n	800b6dc <__libc_init_array+0x24>
 800b6c8:	4d0b      	ldr	r5, [pc, #44]	; (800b6f8 <__libc_init_array+0x40>)
 800b6ca:	4c0c      	ldr	r4, [pc, #48]	; (800b6fc <__libc_init_array+0x44>)
 800b6cc:	f002 ffa2 	bl	800e614 <_init>
 800b6d0:	1b64      	subs	r4, r4, r5
 800b6d2:	10a4      	asrs	r4, r4, #2
 800b6d4:	2600      	movs	r6, #0
 800b6d6:	42a6      	cmp	r6, r4
 800b6d8:	d105      	bne.n	800b6e6 <__libc_init_array+0x2e>
 800b6da:	bd70      	pop	{r4, r5, r6, pc}
 800b6dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6e0:	4798      	blx	r3
 800b6e2:	3601      	adds	r6, #1
 800b6e4:	e7ee      	b.n	800b6c4 <__libc_init_array+0xc>
 800b6e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6ea:	4798      	blx	r3
 800b6ec:	3601      	adds	r6, #1
 800b6ee:	e7f2      	b.n	800b6d6 <__libc_init_array+0x1e>
 800b6f0:	0800f424 	.word	0x0800f424
 800b6f4:	0800f424 	.word	0x0800f424
 800b6f8:	0800f424 	.word	0x0800f424
 800b6fc:	0800f428 	.word	0x0800f428

0800b700 <memcpy>:
 800b700:	440a      	add	r2, r1
 800b702:	4291      	cmp	r1, r2
 800b704:	f100 33ff 	add.w	r3, r0, #4294967295
 800b708:	d100      	bne.n	800b70c <memcpy+0xc>
 800b70a:	4770      	bx	lr
 800b70c:	b510      	push	{r4, lr}
 800b70e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b712:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b716:	4291      	cmp	r1, r2
 800b718:	d1f9      	bne.n	800b70e <memcpy+0xe>
 800b71a:	bd10      	pop	{r4, pc}

0800b71c <memset>:
 800b71c:	4402      	add	r2, r0
 800b71e:	4603      	mov	r3, r0
 800b720:	4293      	cmp	r3, r2
 800b722:	d100      	bne.n	800b726 <memset+0xa>
 800b724:	4770      	bx	lr
 800b726:	f803 1b01 	strb.w	r1, [r3], #1
 800b72a:	e7f9      	b.n	800b720 <memset+0x4>

0800b72c <__cvt>:
 800b72c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b730:	ec55 4b10 	vmov	r4, r5, d0
 800b734:	2d00      	cmp	r5, #0
 800b736:	460e      	mov	r6, r1
 800b738:	4619      	mov	r1, r3
 800b73a:	462b      	mov	r3, r5
 800b73c:	bfbb      	ittet	lt
 800b73e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b742:	461d      	movlt	r5, r3
 800b744:	2300      	movge	r3, #0
 800b746:	232d      	movlt	r3, #45	; 0x2d
 800b748:	700b      	strb	r3, [r1, #0]
 800b74a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b74c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b750:	4691      	mov	r9, r2
 800b752:	f023 0820 	bic.w	r8, r3, #32
 800b756:	bfbc      	itt	lt
 800b758:	4622      	movlt	r2, r4
 800b75a:	4614      	movlt	r4, r2
 800b75c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b760:	d005      	beq.n	800b76e <__cvt+0x42>
 800b762:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b766:	d100      	bne.n	800b76a <__cvt+0x3e>
 800b768:	3601      	adds	r6, #1
 800b76a:	2102      	movs	r1, #2
 800b76c:	e000      	b.n	800b770 <__cvt+0x44>
 800b76e:	2103      	movs	r1, #3
 800b770:	ab03      	add	r3, sp, #12
 800b772:	9301      	str	r3, [sp, #4]
 800b774:	ab02      	add	r3, sp, #8
 800b776:	9300      	str	r3, [sp, #0]
 800b778:	ec45 4b10 	vmov	d0, r4, r5
 800b77c:	4653      	mov	r3, sl
 800b77e:	4632      	mov	r2, r6
 800b780:	f000 fe4a 	bl	800c418 <_dtoa_r>
 800b784:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b788:	4607      	mov	r7, r0
 800b78a:	d102      	bne.n	800b792 <__cvt+0x66>
 800b78c:	f019 0f01 	tst.w	r9, #1
 800b790:	d022      	beq.n	800b7d8 <__cvt+0xac>
 800b792:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b796:	eb07 0906 	add.w	r9, r7, r6
 800b79a:	d110      	bne.n	800b7be <__cvt+0x92>
 800b79c:	783b      	ldrb	r3, [r7, #0]
 800b79e:	2b30      	cmp	r3, #48	; 0x30
 800b7a0:	d10a      	bne.n	800b7b8 <__cvt+0x8c>
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	f7f5 f975 	bl	8000a98 <__aeabi_dcmpeq>
 800b7ae:	b918      	cbnz	r0, 800b7b8 <__cvt+0x8c>
 800b7b0:	f1c6 0601 	rsb	r6, r6, #1
 800b7b4:	f8ca 6000 	str.w	r6, [sl]
 800b7b8:	f8da 3000 	ldr.w	r3, [sl]
 800b7bc:	4499      	add	r9, r3
 800b7be:	2200      	movs	r2, #0
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	4629      	mov	r1, r5
 800b7c6:	f7f5 f967 	bl	8000a98 <__aeabi_dcmpeq>
 800b7ca:	b108      	cbz	r0, 800b7d0 <__cvt+0xa4>
 800b7cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800b7d0:	2230      	movs	r2, #48	; 0x30
 800b7d2:	9b03      	ldr	r3, [sp, #12]
 800b7d4:	454b      	cmp	r3, r9
 800b7d6:	d307      	bcc.n	800b7e8 <__cvt+0xbc>
 800b7d8:	9b03      	ldr	r3, [sp, #12]
 800b7da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7dc:	1bdb      	subs	r3, r3, r7
 800b7de:	4638      	mov	r0, r7
 800b7e0:	6013      	str	r3, [r2, #0]
 800b7e2:	b004      	add	sp, #16
 800b7e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7e8:	1c59      	adds	r1, r3, #1
 800b7ea:	9103      	str	r1, [sp, #12]
 800b7ec:	701a      	strb	r2, [r3, #0]
 800b7ee:	e7f0      	b.n	800b7d2 <__cvt+0xa6>

0800b7f0 <__exponent>:
 800b7f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2900      	cmp	r1, #0
 800b7f6:	bfb8      	it	lt
 800b7f8:	4249      	neglt	r1, r1
 800b7fa:	f803 2b02 	strb.w	r2, [r3], #2
 800b7fe:	bfb4      	ite	lt
 800b800:	222d      	movlt	r2, #45	; 0x2d
 800b802:	222b      	movge	r2, #43	; 0x2b
 800b804:	2909      	cmp	r1, #9
 800b806:	7042      	strb	r2, [r0, #1]
 800b808:	dd2a      	ble.n	800b860 <__exponent+0x70>
 800b80a:	f10d 0407 	add.w	r4, sp, #7
 800b80e:	46a4      	mov	ip, r4
 800b810:	270a      	movs	r7, #10
 800b812:	46a6      	mov	lr, r4
 800b814:	460a      	mov	r2, r1
 800b816:	fb91 f6f7 	sdiv	r6, r1, r7
 800b81a:	fb07 1516 	mls	r5, r7, r6, r1
 800b81e:	3530      	adds	r5, #48	; 0x30
 800b820:	2a63      	cmp	r2, #99	; 0x63
 800b822:	f104 34ff 	add.w	r4, r4, #4294967295
 800b826:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b82a:	4631      	mov	r1, r6
 800b82c:	dcf1      	bgt.n	800b812 <__exponent+0x22>
 800b82e:	3130      	adds	r1, #48	; 0x30
 800b830:	f1ae 0502 	sub.w	r5, lr, #2
 800b834:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b838:	1c44      	adds	r4, r0, #1
 800b83a:	4629      	mov	r1, r5
 800b83c:	4561      	cmp	r1, ip
 800b83e:	d30a      	bcc.n	800b856 <__exponent+0x66>
 800b840:	f10d 0209 	add.w	r2, sp, #9
 800b844:	eba2 020e 	sub.w	r2, r2, lr
 800b848:	4565      	cmp	r5, ip
 800b84a:	bf88      	it	hi
 800b84c:	2200      	movhi	r2, #0
 800b84e:	4413      	add	r3, r2
 800b850:	1a18      	subs	r0, r3, r0
 800b852:	b003      	add	sp, #12
 800b854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b856:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b85a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b85e:	e7ed      	b.n	800b83c <__exponent+0x4c>
 800b860:	2330      	movs	r3, #48	; 0x30
 800b862:	3130      	adds	r1, #48	; 0x30
 800b864:	7083      	strb	r3, [r0, #2]
 800b866:	70c1      	strb	r1, [r0, #3]
 800b868:	1d03      	adds	r3, r0, #4
 800b86a:	e7f1      	b.n	800b850 <__exponent+0x60>

0800b86c <_printf_float>:
 800b86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b870:	ed2d 8b02 	vpush	{d8}
 800b874:	b08d      	sub	sp, #52	; 0x34
 800b876:	460c      	mov	r4, r1
 800b878:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b87c:	4616      	mov	r6, r2
 800b87e:	461f      	mov	r7, r3
 800b880:	4605      	mov	r5, r0
 800b882:	f001 fd6f 	bl	800d364 <_localeconv_r>
 800b886:	f8d0 a000 	ldr.w	sl, [r0]
 800b88a:	4650      	mov	r0, sl
 800b88c:	f7f4 fc82 	bl	8000194 <strlen>
 800b890:	2300      	movs	r3, #0
 800b892:	930a      	str	r3, [sp, #40]	; 0x28
 800b894:	6823      	ldr	r3, [r4, #0]
 800b896:	9305      	str	r3, [sp, #20]
 800b898:	f8d8 3000 	ldr.w	r3, [r8]
 800b89c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b8a0:	3307      	adds	r3, #7
 800b8a2:	f023 0307 	bic.w	r3, r3, #7
 800b8a6:	f103 0208 	add.w	r2, r3, #8
 800b8aa:	f8c8 2000 	str.w	r2, [r8]
 800b8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b8b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b8ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b8be:	9307      	str	r3, [sp, #28]
 800b8c0:	f8cd 8018 	str.w	r8, [sp, #24]
 800b8c4:	ee08 0a10 	vmov	s16, r0
 800b8c8:	4b9f      	ldr	r3, [pc, #636]	; (800bb48 <_printf_float+0x2dc>)
 800b8ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b8d2:	f7f5 f913 	bl	8000afc <__aeabi_dcmpun>
 800b8d6:	bb88      	cbnz	r0, 800b93c <_printf_float+0xd0>
 800b8d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8dc:	4b9a      	ldr	r3, [pc, #616]	; (800bb48 <_printf_float+0x2dc>)
 800b8de:	f04f 32ff 	mov.w	r2, #4294967295
 800b8e2:	f7f5 f8ed 	bl	8000ac0 <__aeabi_dcmple>
 800b8e6:	bb48      	cbnz	r0, 800b93c <_printf_float+0xd0>
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	4640      	mov	r0, r8
 800b8ee:	4649      	mov	r1, r9
 800b8f0:	f7f5 f8dc 	bl	8000aac <__aeabi_dcmplt>
 800b8f4:	b110      	cbz	r0, 800b8fc <_printf_float+0x90>
 800b8f6:	232d      	movs	r3, #45	; 0x2d
 800b8f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8fc:	4b93      	ldr	r3, [pc, #588]	; (800bb4c <_printf_float+0x2e0>)
 800b8fe:	4894      	ldr	r0, [pc, #592]	; (800bb50 <_printf_float+0x2e4>)
 800b900:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b904:	bf94      	ite	ls
 800b906:	4698      	movls	r8, r3
 800b908:	4680      	movhi	r8, r0
 800b90a:	2303      	movs	r3, #3
 800b90c:	6123      	str	r3, [r4, #16]
 800b90e:	9b05      	ldr	r3, [sp, #20]
 800b910:	f023 0204 	bic.w	r2, r3, #4
 800b914:	6022      	str	r2, [r4, #0]
 800b916:	f04f 0900 	mov.w	r9, #0
 800b91a:	9700      	str	r7, [sp, #0]
 800b91c:	4633      	mov	r3, r6
 800b91e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b920:	4621      	mov	r1, r4
 800b922:	4628      	mov	r0, r5
 800b924:	f000 f9d8 	bl	800bcd8 <_printf_common>
 800b928:	3001      	adds	r0, #1
 800b92a:	f040 8090 	bne.w	800ba4e <_printf_float+0x1e2>
 800b92e:	f04f 30ff 	mov.w	r0, #4294967295
 800b932:	b00d      	add	sp, #52	; 0x34
 800b934:	ecbd 8b02 	vpop	{d8}
 800b938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93c:	4642      	mov	r2, r8
 800b93e:	464b      	mov	r3, r9
 800b940:	4640      	mov	r0, r8
 800b942:	4649      	mov	r1, r9
 800b944:	f7f5 f8da 	bl	8000afc <__aeabi_dcmpun>
 800b948:	b140      	cbz	r0, 800b95c <_printf_float+0xf0>
 800b94a:	464b      	mov	r3, r9
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	bfbc      	itt	lt
 800b950:	232d      	movlt	r3, #45	; 0x2d
 800b952:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b956:	487f      	ldr	r0, [pc, #508]	; (800bb54 <_printf_float+0x2e8>)
 800b958:	4b7f      	ldr	r3, [pc, #508]	; (800bb58 <_printf_float+0x2ec>)
 800b95a:	e7d1      	b.n	800b900 <_printf_float+0x94>
 800b95c:	6863      	ldr	r3, [r4, #4]
 800b95e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b962:	9206      	str	r2, [sp, #24]
 800b964:	1c5a      	adds	r2, r3, #1
 800b966:	d13f      	bne.n	800b9e8 <_printf_float+0x17c>
 800b968:	2306      	movs	r3, #6
 800b96a:	6063      	str	r3, [r4, #4]
 800b96c:	9b05      	ldr	r3, [sp, #20]
 800b96e:	6861      	ldr	r1, [r4, #4]
 800b970:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b974:	2300      	movs	r3, #0
 800b976:	9303      	str	r3, [sp, #12]
 800b978:	ab0a      	add	r3, sp, #40	; 0x28
 800b97a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b97e:	ab09      	add	r3, sp, #36	; 0x24
 800b980:	ec49 8b10 	vmov	d0, r8, r9
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	6022      	str	r2, [r4, #0]
 800b988:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b98c:	4628      	mov	r0, r5
 800b98e:	f7ff fecd 	bl	800b72c <__cvt>
 800b992:	9b06      	ldr	r3, [sp, #24]
 800b994:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b996:	2b47      	cmp	r3, #71	; 0x47
 800b998:	4680      	mov	r8, r0
 800b99a:	d108      	bne.n	800b9ae <_printf_float+0x142>
 800b99c:	1cc8      	adds	r0, r1, #3
 800b99e:	db02      	blt.n	800b9a6 <_printf_float+0x13a>
 800b9a0:	6863      	ldr	r3, [r4, #4]
 800b9a2:	4299      	cmp	r1, r3
 800b9a4:	dd41      	ble.n	800ba2a <_printf_float+0x1be>
 800b9a6:	f1ab 0b02 	sub.w	fp, fp, #2
 800b9aa:	fa5f fb8b 	uxtb.w	fp, fp
 800b9ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b9b2:	d820      	bhi.n	800b9f6 <_printf_float+0x18a>
 800b9b4:	3901      	subs	r1, #1
 800b9b6:	465a      	mov	r2, fp
 800b9b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b9bc:	9109      	str	r1, [sp, #36]	; 0x24
 800b9be:	f7ff ff17 	bl	800b7f0 <__exponent>
 800b9c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9c4:	1813      	adds	r3, r2, r0
 800b9c6:	2a01      	cmp	r2, #1
 800b9c8:	4681      	mov	r9, r0
 800b9ca:	6123      	str	r3, [r4, #16]
 800b9cc:	dc02      	bgt.n	800b9d4 <_printf_float+0x168>
 800b9ce:	6822      	ldr	r2, [r4, #0]
 800b9d0:	07d2      	lsls	r2, r2, #31
 800b9d2:	d501      	bpl.n	800b9d8 <_printf_float+0x16c>
 800b9d4:	3301      	adds	r3, #1
 800b9d6:	6123      	str	r3, [r4, #16]
 800b9d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d09c      	beq.n	800b91a <_printf_float+0xae>
 800b9e0:	232d      	movs	r3, #45	; 0x2d
 800b9e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9e6:	e798      	b.n	800b91a <_printf_float+0xae>
 800b9e8:	9a06      	ldr	r2, [sp, #24]
 800b9ea:	2a47      	cmp	r2, #71	; 0x47
 800b9ec:	d1be      	bne.n	800b96c <_printf_float+0x100>
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d1bc      	bne.n	800b96c <_printf_float+0x100>
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e7b9      	b.n	800b96a <_printf_float+0xfe>
 800b9f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b9fa:	d118      	bne.n	800ba2e <_printf_float+0x1c2>
 800b9fc:	2900      	cmp	r1, #0
 800b9fe:	6863      	ldr	r3, [r4, #4]
 800ba00:	dd0b      	ble.n	800ba1a <_printf_float+0x1ae>
 800ba02:	6121      	str	r1, [r4, #16]
 800ba04:	b913      	cbnz	r3, 800ba0c <_printf_float+0x1a0>
 800ba06:	6822      	ldr	r2, [r4, #0]
 800ba08:	07d0      	lsls	r0, r2, #31
 800ba0a:	d502      	bpl.n	800ba12 <_printf_float+0x1a6>
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	440b      	add	r3, r1
 800ba10:	6123      	str	r3, [r4, #16]
 800ba12:	65a1      	str	r1, [r4, #88]	; 0x58
 800ba14:	f04f 0900 	mov.w	r9, #0
 800ba18:	e7de      	b.n	800b9d8 <_printf_float+0x16c>
 800ba1a:	b913      	cbnz	r3, 800ba22 <_printf_float+0x1b6>
 800ba1c:	6822      	ldr	r2, [r4, #0]
 800ba1e:	07d2      	lsls	r2, r2, #31
 800ba20:	d501      	bpl.n	800ba26 <_printf_float+0x1ba>
 800ba22:	3302      	adds	r3, #2
 800ba24:	e7f4      	b.n	800ba10 <_printf_float+0x1a4>
 800ba26:	2301      	movs	r3, #1
 800ba28:	e7f2      	b.n	800ba10 <_printf_float+0x1a4>
 800ba2a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ba2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba30:	4299      	cmp	r1, r3
 800ba32:	db05      	blt.n	800ba40 <_printf_float+0x1d4>
 800ba34:	6823      	ldr	r3, [r4, #0]
 800ba36:	6121      	str	r1, [r4, #16]
 800ba38:	07d8      	lsls	r0, r3, #31
 800ba3a:	d5ea      	bpl.n	800ba12 <_printf_float+0x1a6>
 800ba3c:	1c4b      	adds	r3, r1, #1
 800ba3e:	e7e7      	b.n	800ba10 <_printf_float+0x1a4>
 800ba40:	2900      	cmp	r1, #0
 800ba42:	bfd4      	ite	le
 800ba44:	f1c1 0202 	rsble	r2, r1, #2
 800ba48:	2201      	movgt	r2, #1
 800ba4a:	4413      	add	r3, r2
 800ba4c:	e7e0      	b.n	800ba10 <_printf_float+0x1a4>
 800ba4e:	6823      	ldr	r3, [r4, #0]
 800ba50:	055a      	lsls	r2, r3, #21
 800ba52:	d407      	bmi.n	800ba64 <_printf_float+0x1f8>
 800ba54:	6923      	ldr	r3, [r4, #16]
 800ba56:	4642      	mov	r2, r8
 800ba58:	4631      	mov	r1, r6
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	47b8      	blx	r7
 800ba5e:	3001      	adds	r0, #1
 800ba60:	d12c      	bne.n	800babc <_printf_float+0x250>
 800ba62:	e764      	b.n	800b92e <_printf_float+0xc2>
 800ba64:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ba68:	f240 80e0 	bls.w	800bc2c <_printf_float+0x3c0>
 800ba6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba70:	2200      	movs	r2, #0
 800ba72:	2300      	movs	r3, #0
 800ba74:	f7f5 f810 	bl	8000a98 <__aeabi_dcmpeq>
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	d034      	beq.n	800bae6 <_printf_float+0x27a>
 800ba7c:	4a37      	ldr	r2, [pc, #220]	; (800bb5c <_printf_float+0x2f0>)
 800ba7e:	2301      	movs	r3, #1
 800ba80:	4631      	mov	r1, r6
 800ba82:	4628      	mov	r0, r5
 800ba84:	47b8      	blx	r7
 800ba86:	3001      	adds	r0, #1
 800ba88:	f43f af51 	beq.w	800b92e <_printf_float+0xc2>
 800ba8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba90:	429a      	cmp	r2, r3
 800ba92:	db02      	blt.n	800ba9a <_printf_float+0x22e>
 800ba94:	6823      	ldr	r3, [r4, #0]
 800ba96:	07d8      	lsls	r0, r3, #31
 800ba98:	d510      	bpl.n	800babc <_printf_float+0x250>
 800ba9a:	ee18 3a10 	vmov	r3, s16
 800ba9e:	4652      	mov	r2, sl
 800baa0:	4631      	mov	r1, r6
 800baa2:	4628      	mov	r0, r5
 800baa4:	47b8      	blx	r7
 800baa6:	3001      	adds	r0, #1
 800baa8:	f43f af41 	beq.w	800b92e <_printf_float+0xc2>
 800baac:	f04f 0800 	mov.w	r8, #0
 800bab0:	f104 091a 	add.w	r9, r4, #26
 800bab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bab6:	3b01      	subs	r3, #1
 800bab8:	4543      	cmp	r3, r8
 800baba:	dc09      	bgt.n	800bad0 <_printf_float+0x264>
 800babc:	6823      	ldr	r3, [r4, #0]
 800babe:	079b      	lsls	r3, r3, #30
 800bac0:	f100 8105 	bmi.w	800bcce <_printf_float+0x462>
 800bac4:	68e0      	ldr	r0, [r4, #12]
 800bac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bac8:	4298      	cmp	r0, r3
 800baca:	bfb8      	it	lt
 800bacc:	4618      	movlt	r0, r3
 800bace:	e730      	b.n	800b932 <_printf_float+0xc6>
 800bad0:	2301      	movs	r3, #1
 800bad2:	464a      	mov	r2, r9
 800bad4:	4631      	mov	r1, r6
 800bad6:	4628      	mov	r0, r5
 800bad8:	47b8      	blx	r7
 800bada:	3001      	adds	r0, #1
 800badc:	f43f af27 	beq.w	800b92e <_printf_float+0xc2>
 800bae0:	f108 0801 	add.w	r8, r8, #1
 800bae4:	e7e6      	b.n	800bab4 <_printf_float+0x248>
 800bae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bae8:	2b00      	cmp	r3, #0
 800baea:	dc39      	bgt.n	800bb60 <_printf_float+0x2f4>
 800baec:	4a1b      	ldr	r2, [pc, #108]	; (800bb5c <_printf_float+0x2f0>)
 800baee:	2301      	movs	r3, #1
 800baf0:	4631      	mov	r1, r6
 800baf2:	4628      	mov	r0, r5
 800baf4:	47b8      	blx	r7
 800baf6:	3001      	adds	r0, #1
 800baf8:	f43f af19 	beq.w	800b92e <_printf_float+0xc2>
 800bafc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb00:	4313      	orrs	r3, r2
 800bb02:	d102      	bne.n	800bb0a <_printf_float+0x29e>
 800bb04:	6823      	ldr	r3, [r4, #0]
 800bb06:	07d9      	lsls	r1, r3, #31
 800bb08:	d5d8      	bpl.n	800babc <_printf_float+0x250>
 800bb0a:	ee18 3a10 	vmov	r3, s16
 800bb0e:	4652      	mov	r2, sl
 800bb10:	4631      	mov	r1, r6
 800bb12:	4628      	mov	r0, r5
 800bb14:	47b8      	blx	r7
 800bb16:	3001      	adds	r0, #1
 800bb18:	f43f af09 	beq.w	800b92e <_printf_float+0xc2>
 800bb1c:	f04f 0900 	mov.w	r9, #0
 800bb20:	f104 0a1a 	add.w	sl, r4, #26
 800bb24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb26:	425b      	negs	r3, r3
 800bb28:	454b      	cmp	r3, r9
 800bb2a:	dc01      	bgt.n	800bb30 <_printf_float+0x2c4>
 800bb2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb2e:	e792      	b.n	800ba56 <_printf_float+0x1ea>
 800bb30:	2301      	movs	r3, #1
 800bb32:	4652      	mov	r2, sl
 800bb34:	4631      	mov	r1, r6
 800bb36:	4628      	mov	r0, r5
 800bb38:	47b8      	blx	r7
 800bb3a:	3001      	adds	r0, #1
 800bb3c:	f43f aef7 	beq.w	800b92e <_printf_float+0xc2>
 800bb40:	f109 0901 	add.w	r9, r9, #1
 800bb44:	e7ee      	b.n	800bb24 <_printf_float+0x2b8>
 800bb46:	bf00      	nop
 800bb48:	7fefffff 	.word	0x7fefffff
 800bb4c:	0800f044 	.word	0x0800f044
 800bb50:	0800f048 	.word	0x0800f048
 800bb54:	0800f050 	.word	0x0800f050
 800bb58:	0800f04c 	.word	0x0800f04c
 800bb5c:	0800f054 	.word	0x0800f054
 800bb60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb64:	429a      	cmp	r2, r3
 800bb66:	bfa8      	it	ge
 800bb68:	461a      	movge	r2, r3
 800bb6a:	2a00      	cmp	r2, #0
 800bb6c:	4691      	mov	r9, r2
 800bb6e:	dc37      	bgt.n	800bbe0 <_printf_float+0x374>
 800bb70:	f04f 0b00 	mov.w	fp, #0
 800bb74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb78:	f104 021a 	add.w	r2, r4, #26
 800bb7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb7e:	9305      	str	r3, [sp, #20]
 800bb80:	eba3 0309 	sub.w	r3, r3, r9
 800bb84:	455b      	cmp	r3, fp
 800bb86:	dc33      	bgt.n	800bbf0 <_printf_float+0x384>
 800bb88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	db3b      	blt.n	800bc08 <_printf_float+0x39c>
 800bb90:	6823      	ldr	r3, [r4, #0]
 800bb92:	07da      	lsls	r2, r3, #31
 800bb94:	d438      	bmi.n	800bc08 <_printf_float+0x39c>
 800bb96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb98:	9a05      	ldr	r2, [sp, #20]
 800bb9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb9c:	1a9a      	subs	r2, r3, r2
 800bb9e:	eba3 0901 	sub.w	r9, r3, r1
 800bba2:	4591      	cmp	r9, r2
 800bba4:	bfa8      	it	ge
 800bba6:	4691      	movge	r9, r2
 800bba8:	f1b9 0f00 	cmp.w	r9, #0
 800bbac:	dc35      	bgt.n	800bc1a <_printf_float+0x3ae>
 800bbae:	f04f 0800 	mov.w	r8, #0
 800bbb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbb6:	f104 0a1a 	add.w	sl, r4, #26
 800bbba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbbe:	1a9b      	subs	r3, r3, r2
 800bbc0:	eba3 0309 	sub.w	r3, r3, r9
 800bbc4:	4543      	cmp	r3, r8
 800bbc6:	f77f af79 	ble.w	800babc <_printf_float+0x250>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	4652      	mov	r2, sl
 800bbce:	4631      	mov	r1, r6
 800bbd0:	4628      	mov	r0, r5
 800bbd2:	47b8      	blx	r7
 800bbd4:	3001      	adds	r0, #1
 800bbd6:	f43f aeaa 	beq.w	800b92e <_printf_float+0xc2>
 800bbda:	f108 0801 	add.w	r8, r8, #1
 800bbde:	e7ec      	b.n	800bbba <_printf_float+0x34e>
 800bbe0:	4613      	mov	r3, r2
 800bbe2:	4631      	mov	r1, r6
 800bbe4:	4642      	mov	r2, r8
 800bbe6:	4628      	mov	r0, r5
 800bbe8:	47b8      	blx	r7
 800bbea:	3001      	adds	r0, #1
 800bbec:	d1c0      	bne.n	800bb70 <_printf_float+0x304>
 800bbee:	e69e      	b.n	800b92e <_printf_float+0xc2>
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	9205      	str	r2, [sp, #20]
 800bbf8:	47b8      	blx	r7
 800bbfa:	3001      	adds	r0, #1
 800bbfc:	f43f ae97 	beq.w	800b92e <_printf_float+0xc2>
 800bc00:	9a05      	ldr	r2, [sp, #20]
 800bc02:	f10b 0b01 	add.w	fp, fp, #1
 800bc06:	e7b9      	b.n	800bb7c <_printf_float+0x310>
 800bc08:	ee18 3a10 	vmov	r3, s16
 800bc0c:	4652      	mov	r2, sl
 800bc0e:	4631      	mov	r1, r6
 800bc10:	4628      	mov	r0, r5
 800bc12:	47b8      	blx	r7
 800bc14:	3001      	adds	r0, #1
 800bc16:	d1be      	bne.n	800bb96 <_printf_float+0x32a>
 800bc18:	e689      	b.n	800b92e <_printf_float+0xc2>
 800bc1a:	9a05      	ldr	r2, [sp, #20]
 800bc1c:	464b      	mov	r3, r9
 800bc1e:	4442      	add	r2, r8
 800bc20:	4631      	mov	r1, r6
 800bc22:	4628      	mov	r0, r5
 800bc24:	47b8      	blx	r7
 800bc26:	3001      	adds	r0, #1
 800bc28:	d1c1      	bne.n	800bbae <_printf_float+0x342>
 800bc2a:	e680      	b.n	800b92e <_printf_float+0xc2>
 800bc2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc2e:	2a01      	cmp	r2, #1
 800bc30:	dc01      	bgt.n	800bc36 <_printf_float+0x3ca>
 800bc32:	07db      	lsls	r3, r3, #31
 800bc34:	d538      	bpl.n	800bca8 <_printf_float+0x43c>
 800bc36:	2301      	movs	r3, #1
 800bc38:	4642      	mov	r2, r8
 800bc3a:	4631      	mov	r1, r6
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	47b8      	blx	r7
 800bc40:	3001      	adds	r0, #1
 800bc42:	f43f ae74 	beq.w	800b92e <_printf_float+0xc2>
 800bc46:	ee18 3a10 	vmov	r3, s16
 800bc4a:	4652      	mov	r2, sl
 800bc4c:	4631      	mov	r1, r6
 800bc4e:	4628      	mov	r0, r5
 800bc50:	47b8      	blx	r7
 800bc52:	3001      	adds	r0, #1
 800bc54:	f43f ae6b 	beq.w	800b92e <_printf_float+0xc2>
 800bc58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2300      	movs	r3, #0
 800bc60:	f7f4 ff1a 	bl	8000a98 <__aeabi_dcmpeq>
 800bc64:	b9d8      	cbnz	r0, 800bc9e <_printf_float+0x432>
 800bc66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc68:	f108 0201 	add.w	r2, r8, #1
 800bc6c:	3b01      	subs	r3, #1
 800bc6e:	4631      	mov	r1, r6
 800bc70:	4628      	mov	r0, r5
 800bc72:	47b8      	blx	r7
 800bc74:	3001      	adds	r0, #1
 800bc76:	d10e      	bne.n	800bc96 <_printf_float+0x42a>
 800bc78:	e659      	b.n	800b92e <_printf_float+0xc2>
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	4652      	mov	r2, sl
 800bc7e:	4631      	mov	r1, r6
 800bc80:	4628      	mov	r0, r5
 800bc82:	47b8      	blx	r7
 800bc84:	3001      	adds	r0, #1
 800bc86:	f43f ae52 	beq.w	800b92e <_printf_float+0xc2>
 800bc8a:	f108 0801 	add.w	r8, r8, #1
 800bc8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc90:	3b01      	subs	r3, #1
 800bc92:	4543      	cmp	r3, r8
 800bc94:	dcf1      	bgt.n	800bc7a <_printf_float+0x40e>
 800bc96:	464b      	mov	r3, r9
 800bc98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bc9c:	e6dc      	b.n	800ba58 <_printf_float+0x1ec>
 800bc9e:	f04f 0800 	mov.w	r8, #0
 800bca2:	f104 0a1a 	add.w	sl, r4, #26
 800bca6:	e7f2      	b.n	800bc8e <_printf_float+0x422>
 800bca8:	2301      	movs	r3, #1
 800bcaa:	4642      	mov	r2, r8
 800bcac:	e7df      	b.n	800bc6e <_printf_float+0x402>
 800bcae:	2301      	movs	r3, #1
 800bcb0:	464a      	mov	r2, r9
 800bcb2:	4631      	mov	r1, r6
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	47b8      	blx	r7
 800bcb8:	3001      	adds	r0, #1
 800bcba:	f43f ae38 	beq.w	800b92e <_printf_float+0xc2>
 800bcbe:	f108 0801 	add.w	r8, r8, #1
 800bcc2:	68e3      	ldr	r3, [r4, #12]
 800bcc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bcc6:	1a5b      	subs	r3, r3, r1
 800bcc8:	4543      	cmp	r3, r8
 800bcca:	dcf0      	bgt.n	800bcae <_printf_float+0x442>
 800bccc:	e6fa      	b.n	800bac4 <_printf_float+0x258>
 800bcce:	f04f 0800 	mov.w	r8, #0
 800bcd2:	f104 0919 	add.w	r9, r4, #25
 800bcd6:	e7f4      	b.n	800bcc2 <_printf_float+0x456>

0800bcd8 <_printf_common>:
 800bcd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcdc:	4616      	mov	r6, r2
 800bcde:	4699      	mov	r9, r3
 800bce0:	688a      	ldr	r2, [r1, #8]
 800bce2:	690b      	ldr	r3, [r1, #16]
 800bce4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bce8:	4293      	cmp	r3, r2
 800bcea:	bfb8      	it	lt
 800bcec:	4613      	movlt	r3, r2
 800bcee:	6033      	str	r3, [r6, #0]
 800bcf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bcf4:	4607      	mov	r7, r0
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	b10a      	cbz	r2, 800bcfe <_printf_common+0x26>
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	6033      	str	r3, [r6, #0]
 800bcfe:	6823      	ldr	r3, [r4, #0]
 800bd00:	0699      	lsls	r1, r3, #26
 800bd02:	bf42      	ittt	mi
 800bd04:	6833      	ldrmi	r3, [r6, #0]
 800bd06:	3302      	addmi	r3, #2
 800bd08:	6033      	strmi	r3, [r6, #0]
 800bd0a:	6825      	ldr	r5, [r4, #0]
 800bd0c:	f015 0506 	ands.w	r5, r5, #6
 800bd10:	d106      	bne.n	800bd20 <_printf_common+0x48>
 800bd12:	f104 0a19 	add.w	sl, r4, #25
 800bd16:	68e3      	ldr	r3, [r4, #12]
 800bd18:	6832      	ldr	r2, [r6, #0]
 800bd1a:	1a9b      	subs	r3, r3, r2
 800bd1c:	42ab      	cmp	r3, r5
 800bd1e:	dc26      	bgt.n	800bd6e <_printf_common+0x96>
 800bd20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd24:	1e13      	subs	r3, r2, #0
 800bd26:	6822      	ldr	r2, [r4, #0]
 800bd28:	bf18      	it	ne
 800bd2a:	2301      	movne	r3, #1
 800bd2c:	0692      	lsls	r2, r2, #26
 800bd2e:	d42b      	bmi.n	800bd88 <_printf_common+0xb0>
 800bd30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd34:	4649      	mov	r1, r9
 800bd36:	4638      	mov	r0, r7
 800bd38:	47c0      	blx	r8
 800bd3a:	3001      	adds	r0, #1
 800bd3c:	d01e      	beq.n	800bd7c <_printf_common+0xa4>
 800bd3e:	6823      	ldr	r3, [r4, #0]
 800bd40:	68e5      	ldr	r5, [r4, #12]
 800bd42:	6832      	ldr	r2, [r6, #0]
 800bd44:	f003 0306 	and.w	r3, r3, #6
 800bd48:	2b04      	cmp	r3, #4
 800bd4a:	bf08      	it	eq
 800bd4c:	1aad      	subeq	r5, r5, r2
 800bd4e:	68a3      	ldr	r3, [r4, #8]
 800bd50:	6922      	ldr	r2, [r4, #16]
 800bd52:	bf0c      	ite	eq
 800bd54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd58:	2500      	movne	r5, #0
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	bfc4      	itt	gt
 800bd5e:	1a9b      	subgt	r3, r3, r2
 800bd60:	18ed      	addgt	r5, r5, r3
 800bd62:	2600      	movs	r6, #0
 800bd64:	341a      	adds	r4, #26
 800bd66:	42b5      	cmp	r5, r6
 800bd68:	d11a      	bne.n	800bda0 <_printf_common+0xc8>
 800bd6a:	2000      	movs	r0, #0
 800bd6c:	e008      	b.n	800bd80 <_printf_common+0xa8>
 800bd6e:	2301      	movs	r3, #1
 800bd70:	4652      	mov	r2, sl
 800bd72:	4649      	mov	r1, r9
 800bd74:	4638      	mov	r0, r7
 800bd76:	47c0      	blx	r8
 800bd78:	3001      	adds	r0, #1
 800bd7a:	d103      	bne.n	800bd84 <_printf_common+0xac>
 800bd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd84:	3501      	adds	r5, #1
 800bd86:	e7c6      	b.n	800bd16 <_printf_common+0x3e>
 800bd88:	18e1      	adds	r1, r4, r3
 800bd8a:	1c5a      	adds	r2, r3, #1
 800bd8c:	2030      	movs	r0, #48	; 0x30
 800bd8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd92:	4422      	add	r2, r4
 800bd94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd9c:	3302      	adds	r3, #2
 800bd9e:	e7c7      	b.n	800bd30 <_printf_common+0x58>
 800bda0:	2301      	movs	r3, #1
 800bda2:	4622      	mov	r2, r4
 800bda4:	4649      	mov	r1, r9
 800bda6:	4638      	mov	r0, r7
 800bda8:	47c0      	blx	r8
 800bdaa:	3001      	adds	r0, #1
 800bdac:	d0e6      	beq.n	800bd7c <_printf_common+0xa4>
 800bdae:	3601      	adds	r6, #1
 800bdb0:	e7d9      	b.n	800bd66 <_printf_common+0x8e>
	...

0800bdb4 <_printf_i>:
 800bdb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdb8:	7e0f      	ldrb	r7, [r1, #24]
 800bdba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bdbc:	2f78      	cmp	r7, #120	; 0x78
 800bdbe:	4691      	mov	r9, r2
 800bdc0:	4680      	mov	r8, r0
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	469a      	mov	sl, r3
 800bdc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bdca:	d807      	bhi.n	800bddc <_printf_i+0x28>
 800bdcc:	2f62      	cmp	r7, #98	; 0x62
 800bdce:	d80a      	bhi.n	800bde6 <_printf_i+0x32>
 800bdd0:	2f00      	cmp	r7, #0
 800bdd2:	f000 80d8 	beq.w	800bf86 <_printf_i+0x1d2>
 800bdd6:	2f58      	cmp	r7, #88	; 0x58
 800bdd8:	f000 80a3 	beq.w	800bf22 <_printf_i+0x16e>
 800bddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bde0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bde4:	e03a      	b.n	800be5c <_printf_i+0xa8>
 800bde6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bdea:	2b15      	cmp	r3, #21
 800bdec:	d8f6      	bhi.n	800bddc <_printf_i+0x28>
 800bdee:	a101      	add	r1, pc, #4	; (adr r1, 800bdf4 <_printf_i+0x40>)
 800bdf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bdf4:	0800be4d 	.word	0x0800be4d
 800bdf8:	0800be61 	.word	0x0800be61
 800bdfc:	0800bddd 	.word	0x0800bddd
 800be00:	0800bddd 	.word	0x0800bddd
 800be04:	0800bddd 	.word	0x0800bddd
 800be08:	0800bddd 	.word	0x0800bddd
 800be0c:	0800be61 	.word	0x0800be61
 800be10:	0800bddd 	.word	0x0800bddd
 800be14:	0800bddd 	.word	0x0800bddd
 800be18:	0800bddd 	.word	0x0800bddd
 800be1c:	0800bddd 	.word	0x0800bddd
 800be20:	0800bf6d 	.word	0x0800bf6d
 800be24:	0800be91 	.word	0x0800be91
 800be28:	0800bf4f 	.word	0x0800bf4f
 800be2c:	0800bddd 	.word	0x0800bddd
 800be30:	0800bddd 	.word	0x0800bddd
 800be34:	0800bf8f 	.word	0x0800bf8f
 800be38:	0800bddd 	.word	0x0800bddd
 800be3c:	0800be91 	.word	0x0800be91
 800be40:	0800bddd 	.word	0x0800bddd
 800be44:	0800bddd 	.word	0x0800bddd
 800be48:	0800bf57 	.word	0x0800bf57
 800be4c:	682b      	ldr	r3, [r5, #0]
 800be4e:	1d1a      	adds	r2, r3, #4
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	602a      	str	r2, [r5, #0]
 800be54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be5c:	2301      	movs	r3, #1
 800be5e:	e0a3      	b.n	800bfa8 <_printf_i+0x1f4>
 800be60:	6820      	ldr	r0, [r4, #0]
 800be62:	6829      	ldr	r1, [r5, #0]
 800be64:	0606      	lsls	r6, r0, #24
 800be66:	f101 0304 	add.w	r3, r1, #4
 800be6a:	d50a      	bpl.n	800be82 <_printf_i+0xce>
 800be6c:	680e      	ldr	r6, [r1, #0]
 800be6e:	602b      	str	r3, [r5, #0]
 800be70:	2e00      	cmp	r6, #0
 800be72:	da03      	bge.n	800be7c <_printf_i+0xc8>
 800be74:	232d      	movs	r3, #45	; 0x2d
 800be76:	4276      	negs	r6, r6
 800be78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be7c:	485e      	ldr	r0, [pc, #376]	; (800bff8 <_printf_i+0x244>)
 800be7e:	230a      	movs	r3, #10
 800be80:	e019      	b.n	800beb6 <_printf_i+0x102>
 800be82:	680e      	ldr	r6, [r1, #0]
 800be84:	602b      	str	r3, [r5, #0]
 800be86:	f010 0f40 	tst.w	r0, #64	; 0x40
 800be8a:	bf18      	it	ne
 800be8c:	b236      	sxthne	r6, r6
 800be8e:	e7ef      	b.n	800be70 <_printf_i+0xbc>
 800be90:	682b      	ldr	r3, [r5, #0]
 800be92:	6820      	ldr	r0, [r4, #0]
 800be94:	1d19      	adds	r1, r3, #4
 800be96:	6029      	str	r1, [r5, #0]
 800be98:	0601      	lsls	r1, r0, #24
 800be9a:	d501      	bpl.n	800bea0 <_printf_i+0xec>
 800be9c:	681e      	ldr	r6, [r3, #0]
 800be9e:	e002      	b.n	800bea6 <_printf_i+0xf2>
 800bea0:	0646      	lsls	r6, r0, #25
 800bea2:	d5fb      	bpl.n	800be9c <_printf_i+0xe8>
 800bea4:	881e      	ldrh	r6, [r3, #0]
 800bea6:	4854      	ldr	r0, [pc, #336]	; (800bff8 <_printf_i+0x244>)
 800bea8:	2f6f      	cmp	r7, #111	; 0x6f
 800beaa:	bf0c      	ite	eq
 800beac:	2308      	moveq	r3, #8
 800beae:	230a      	movne	r3, #10
 800beb0:	2100      	movs	r1, #0
 800beb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800beb6:	6865      	ldr	r5, [r4, #4]
 800beb8:	60a5      	str	r5, [r4, #8]
 800beba:	2d00      	cmp	r5, #0
 800bebc:	bfa2      	ittt	ge
 800bebe:	6821      	ldrge	r1, [r4, #0]
 800bec0:	f021 0104 	bicge.w	r1, r1, #4
 800bec4:	6021      	strge	r1, [r4, #0]
 800bec6:	b90e      	cbnz	r6, 800becc <_printf_i+0x118>
 800bec8:	2d00      	cmp	r5, #0
 800beca:	d04d      	beq.n	800bf68 <_printf_i+0x1b4>
 800becc:	4615      	mov	r5, r2
 800bece:	fbb6 f1f3 	udiv	r1, r6, r3
 800bed2:	fb03 6711 	mls	r7, r3, r1, r6
 800bed6:	5dc7      	ldrb	r7, [r0, r7]
 800bed8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bedc:	4637      	mov	r7, r6
 800bede:	42bb      	cmp	r3, r7
 800bee0:	460e      	mov	r6, r1
 800bee2:	d9f4      	bls.n	800bece <_printf_i+0x11a>
 800bee4:	2b08      	cmp	r3, #8
 800bee6:	d10b      	bne.n	800bf00 <_printf_i+0x14c>
 800bee8:	6823      	ldr	r3, [r4, #0]
 800beea:	07de      	lsls	r6, r3, #31
 800beec:	d508      	bpl.n	800bf00 <_printf_i+0x14c>
 800beee:	6923      	ldr	r3, [r4, #16]
 800bef0:	6861      	ldr	r1, [r4, #4]
 800bef2:	4299      	cmp	r1, r3
 800bef4:	bfde      	ittt	le
 800bef6:	2330      	movle	r3, #48	; 0x30
 800bef8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800befc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf00:	1b52      	subs	r2, r2, r5
 800bf02:	6122      	str	r2, [r4, #16]
 800bf04:	f8cd a000 	str.w	sl, [sp]
 800bf08:	464b      	mov	r3, r9
 800bf0a:	aa03      	add	r2, sp, #12
 800bf0c:	4621      	mov	r1, r4
 800bf0e:	4640      	mov	r0, r8
 800bf10:	f7ff fee2 	bl	800bcd8 <_printf_common>
 800bf14:	3001      	adds	r0, #1
 800bf16:	d14c      	bne.n	800bfb2 <_printf_i+0x1fe>
 800bf18:	f04f 30ff 	mov.w	r0, #4294967295
 800bf1c:	b004      	add	sp, #16
 800bf1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf22:	4835      	ldr	r0, [pc, #212]	; (800bff8 <_printf_i+0x244>)
 800bf24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bf28:	6829      	ldr	r1, [r5, #0]
 800bf2a:	6823      	ldr	r3, [r4, #0]
 800bf2c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bf30:	6029      	str	r1, [r5, #0]
 800bf32:	061d      	lsls	r5, r3, #24
 800bf34:	d514      	bpl.n	800bf60 <_printf_i+0x1ac>
 800bf36:	07df      	lsls	r7, r3, #31
 800bf38:	bf44      	itt	mi
 800bf3a:	f043 0320 	orrmi.w	r3, r3, #32
 800bf3e:	6023      	strmi	r3, [r4, #0]
 800bf40:	b91e      	cbnz	r6, 800bf4a <_printf_i+0x196>
 800bf42:	6823      	ldr	r3, [r4, #0]
 800bf44:	f023 0320 	bic.w	r3, r3, #32
 800bf48:	6023      	str	r3, [r4, #0]
 800bf4a:	2310      	movs	r3, #16
 800bf4c:	e7b0      	b.n	800beb0 <_printf_i+0xfc>
 800bf4e:	6823      	ldr	r3, [r4, #0]
 800bf50:	f043 0320 	orr.w	r3, r3, #32
 800bf54:	6023      	str	r3, [r4, #0]
 800bf56:	2378      	movs	r3, #120	; 0x78
 800bf58:	4828      	ldr	r0, [pc, #160]	; (800bffc <_printf_i+0x248>)
 800bf5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf5e:	e7e3      	b.n	800bf28 <_printf_i+0x174>
 800bf60:	0659      	lsls	r1, r3, #25
 800bf62:	bf48      	it	mi
 800bf64:	b2b6      	uxthmi	r6, r6
 800bf66:	e7e6      	b.n	800bf36 <_printf_i+0x182>
 800bf68:	4615      	mov	r5, r2
 800bf6a:	e7bb      	b.n	800bee4 <_printf_i+0x130>
 800bf6c:	682b      	ldr	r3, [r5, #0]
 800bf6e:	6826      	ldr	r6, [r4, #0]
 800bf70:	6961      	ldr	r1, [r4, #20]
 800bf72:	1d18      	adds	r0, r3, #4
 800bf74:	6028      	str	r0, [r5, #0]
 800bf76:	0635      	lsls	r5, r6, #24
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	d501      	bpl.n	800bf80 <_printf_i+0x1cc>
 800bf7c:	6019      	str	r1, [r3, #0]
 800bf7e:	e002      	b.n	800bf86 <_printf_i+0x1d2>
 800bf80:	0670      	lsls	r0, r6, #25
 800bf82:	d5fb      	bpl.n	800bf7c <_printf_i+0x1c8>
 800bf84:	8019      	strh	r1, [r3, #0]
 800bf86:	2300      	movs	r3, #0
 800bf88:	6123      	str	r3, [r4, #16]
 800bf8a:	4615      	mov	r5, r2
 800bf8c:	e7ba      	b.n	800bf04 <_printf_i+0x150>
 800bf8e:	682b      	ldr	r3, [r5, #0]
 800bf90:	1d1a      	adds	r2, r3, #4
 800bf92:	602a      	str	r2, [r5, #0]
 800bf94:	681d      	ldr	r5, [r3, #0]
 800bf96:	6862      	ldr	r2, [r4, #4]
 800bf98:	2100      	movs	r1, #0
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	f7f4 f908 	bl	80001b0 <memchr>
 800bfa0:	b108      	cbz	r0, 800bfa6 <_printf_i+0x1f2>
 800bfa2:	1b40      	subs	r0, r0, r5
 800bfa4:	6060      	str	r0, [r4, #4]
 800bfa6:	6863      	ldr	r3, [r4, #4]
 800bfa8:	6123      	str	r3, [r4, #16]
 800bfaa:	2300      	movs	r3, #0
 800bfac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfb0:	e7a8      	b.n	800bf04 <_printf_i+0x150>
 800bfb2:	6923      	ldr	r3, [r4, #16]
 800bfb4:	462a      	mov	r2, r5
 800bfb6:	4649      	mov	r1, r9
 800bfb8:	4640      	mov	r0, r8
 800bfba:	47d0      	blx	sl
 800bfbc:	3001      	adds	r0, #1
 800bfbe:	d0ab      	beq.n	800bf18 <_printf_i+0x164>
 800bfc0:	6823      	ldr	r3, [r4, #0]
 800bfc2:	079b      	lsls	r3, r3, #30
 800bfc4:	d413      	bmi.n	800bfee <_printf_i+0x23a>
 800bfc6:	68e0      	ldr	r0, [r4, #12]
 800bfc8:	9b03      	ldr	r3, [sp, #12]
 800bfca:	4298      	cmp	r0, r3
 800bfcc:	bfb8      	it	lt
 800bfce:	4618      	movlt	r0, r3
 800bfd0:	e7a4      	b.n	800bf1c <_printf_i+0x168>
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	4632      	mov	r2, r6
 800bfd6:	4649      	mov	r1, r9
 800bfd8:	4640      	mov	r0, r8
 800bfda:	47d0      	blx	sl
 800bfdc:	3001      	adds	r0, #1
 800bfde:	d09b      	beq.n	800bf18 <_printf_i+0x164>
 800bfe0:	3501      	adds	r5, #1
 800bfe2:	68e3      	ldr	r3, [r4, #12]
 800bfe4:	9903      	ldr	r1, [sp, #12]
 800bfe6:	1a5b      	subs	r3, r3, r1
 800bfe8:	42ab      	cmp	r3, r5
 800bfea:	dcf2      	bgt.n	800bfd2 <_printf_i+0x21e>
 800bfec:	e7eb      	b.n	800bfc6 <_printf_i+0x212>
 800bfee:	2500      	movs	r5, #0
 800bff0:	f104 0619 	add.w	r6, r4, #25
 800bff4:	e7f5      	b.n	800bfe2 <_printf_i+0x22e>
 800bff6:	bf00      	nop
 800bff8:	0800f056 	.word	0x0800f056
 800bffc:	0800f067 	.word	0x0800f067

0800c000 <iprintf>:
 800c000:	b40f      	push	{r0, r1, r2, r3}
 800c002:	4b0a      	ldr	r3, [pc, #40]	; (800c02c <iprintf+0x2c>)
 800c004:	b513      	push	{r0, r1, r4, lr}
 800c006:	681c      	ldr	r4, [r3, #0]
 800c008:	b124      	cbz	r4, 800c014 <iprintf+0x14>
 800c00a:	69a3      	ldr	r3, [r4, #24]
 800c00c:	b913      	cbnz	r3, 800c014 <iprintf+0x14>
 800c00e:	4620      	mov	r0, r4
 800c010:	f001 f90a 	bl	800d228 <__sinit>
 800c014:	ab05      	add	r3, sp, #20
 800c016:	9a04      	ldr	r2, [sp, #16]
 800c018:	68a1      	ldr	r1, [r4, #8]
 800c01a:	9301      	str	r3, [sp, #4]
 800c01c:	4620      	mov	r0, r4
 800c01e:	f002 f815 	bl	800e04c <_vfiprintf_r>
 800c022:	b002      	add	sp, #8
 800c024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c028:	b004      	add	sp, #16
 800c02a:	4770      	bx	lr
 800c02c:	20000058 	.word	0x20000058

0800c030 <_puts_r>:
 800c030:	b570      	push	{r4, r5, r6, lr}
 800c032:	460e      	mov	r6, r1
 800c034:	4605      	mov	r5, r0
 800c036:	b118      	cbz	r0, 800c040 <_puts_r+0x10>
 800c038:	6983      	ldr	r3, [r0, #24]
 800c03a:	b90b      	cbnz	r3, 800c040 <_puts_r+0x10>
 800c03c:	f001 f8f4 	bl	800d228 <__sinit>
 800c040:	69ab      	ldr	r3, [r5, #24]
 800c042:	68ac      	ldr	r4, [r5, #8]
 800c044:	b913      	cbnz	r3, 800c04c <_puts_r+0x1c>
 800c046:	4628      	mov	r0, r5
 800c048:	f001 f8ee 	bl	800d228 <__sinit>
 800c04c:	4b2c      	ldr	r3, [pc, #176]	; (800c100 <_puts_r+0xd0>)
 800c04e:	429c      	cmp	r4, r3
 800c050:	d120      	bne.n	800c094 <_puts_r+0x64>
 800c052:	686c      	ldr	r4, [r5, #4]
 800c054:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c056:	07db      	lsls	r3, r3, #31
 800c058:	d405      	bmi.n	800c066 <_puts_r+0x36>
 800c05a:	89a3      	ldrh	r3, [r4, #12]
 800c05c:	0598      	lsls	r0, r3, #22
 800c05e:	d402      	bmi.n	800c066 <_puts_r+0x36>
 800c060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c062:	f001 f984 	bl	800d36e <__retarget_lock_acquire_recursive>
 800c066:	89a3      	ldrh	r3, [r4, #12]
 800c068:	0719      	lsls	r1, r3, #28
 800c06a:	d51d      	bpl.n	800c0a8 <_puts_r+0x78>
 800c06c:	6923      	ldr	r3, [r4, #16]
 800c06e:	b1db      	cbz	r3, 800c0a8 <_puts_r+0x78>
 800c070:	3e01      	subs	r6, #1
 800c072:	68a3      	ldr	r3, [r4, #8]
 800c074:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c078:	3b01      	subs	r3, #1
 800c07a:	60a3      	str	r3, [r4, #8]
 800c07c:	bb39      	cbnz	r1, 800c0ce <_puts_r+0x9e>
 800c07e:	2b00      	cmp	r3, #0
 800c080:	da38      	bge.n	800c0f4 <_puts_r+0xc4>
 800c082:	4622      	mov	r2, r4
 800c084:	210a      	movs	r1, #10
 800c086:	4628      	mov	r0, r5
 800c088:	f000 f878 	bl	800c17c <__swbuf_r>
 800c08c:	3001      	adds	r0, #1
 800c08e:	d011      	beq.n	800c0b4 <_puts_r+0x84>
 800c090:	250a      	movs	r5, #10
 800c092:	e011      	b.n	800c0b8 <_puts_r+0x88>
 800c094:	4b1b      	ldr	r3, [pc, #108]	; (800c104 <_puts_r+0xd4>)
 800c096:	429c      	cmp	r4, r3
 800c098:	d101      	bne.n	800c09e <_puts_r+0x6e>
 800c09a:	68ac      	ldr	r4, [r5, #8]
 800c09c:	e7da      	b.n	800c054 <_puts_r+0x24>
 800c09e:	4b1a      	ldr	r3, [pc, #104]	; (800c108 <_puts_r+0xd8>)
 800c0a0:	429c      	cmp	r4, r3
 800c0a2:	bf08      	it	eq
 800c0a4:	68ec      	ldreq	r4, [r5, #12]
 800c0a6:	e7d5      	b.n	800c054 <_puts_r+0x24>
 800c0a8:	4621      	mov	r1, r4
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	f000 f8b8 	bl	800c220 <__swsetup_r>
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	d0dd      	beq.n	800c070 <_puts_r+0x40>
 800c0b4:	f04f 35ff 	mov.w	r5, #4294967295
 800c0b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0ba:	07da      	lsls	r2, r3, #31
 800c0bc:	d405      	bmi.n	800c0ca <_puts_r+0x9a>
 800c0be:	89a3      	ldrh	r3, [r4, #12]
 800c0c0:	059b      	lsls	r3, r3, #22
 800c0c2:	d402      	bmi.n	800c0ca <_puts_r+0x9a>
 800c0c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0c6:	f001 f953 	bl	800d370 <__retarget_lock_release_recursive>
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	bd70      	pop	{r4, r5, r6, pc}
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	da04      	bge.n	800c0dc <_puts_r+0xac>
 800c0d2:	69a2      	ldr	r2, [r4, #24]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	dc06      	bgt.n	800c0e6 <_puts_r+0xb6>
 800c0d8:	290a      	cmp	r1, #10
 800c0da:	d004      	beq.n	800c0e6 <_puts_r+0xb6>
 800c0dc:	6823      	ldr	r3, [r4, #0]
 800c0de:	1c5a      	adds	r2, r3, #1
 800c0e0:	6022      	str	r2, [r4, #0]
 800c0e2:	7019      	strb	r1, [r3, #0]
 800c0e4:	e7c5      	b.n	800c072 <_puts_r+0x42>
 800c0e6:	4622      	mov	r2, r4
 800c0e8:	4628      	mov	r0, r5
 800c0ea:	f000 f847 	bl	800c17c <__swbuf_r>
 800c0ee:	3001      	adds	r0, #1
 800c0f0:	d1bf      	bne.n	800c072 <_puts_r+0x42>
 800c0f2:	e7df      	b.n	800c0b4 <_puts_r+0x84>
 800c0f4:	6823      	ldr	r3, [r4, #0]
 800c0f6:	250a      	movs	r5, #10
 800c0f8:	1c5a      	adds	r2, r3, #1
 800c0fa:	6022      	str	r2, [r4, #0]
 800c0fc:	701d      	strb	r5, [r3, #0]
 800c0fe:	e7db      	b.n	800c0b8 <_puts_r+0x88>
 800c100:	0800f128 	.word	0x0800f128
 800c104:	0800f148 	.word	0x0800f148
 800c108:	0800f108 	.word	0x0800f108

0800c10c <puts>:
 800c10c:	4b02      	ldr	r3, [pc, #8]	; (800c118 <puts+0xc>)
 800c10e:	4601      	mov	r1, r0
 800c110:	6818      	ldr	r0, [r3, #0]
 800c112:	f7ff bf8d 	b.w	800c030 <_puts_r>
 800c116:	bf00      	nop
 800c118:	20000058 	.word	0x20000058

0800c11c <siprintf>:
 800c11c:	b40e      	push	{r1, r2, r3}
 800c11e:	b500      	push	{lr}
 800c120:	b09c      	sub	sp, #112	; 0x70
 800c122:	ab1d      	add	r3, sp, #116	; 0x74
 800c124:	9002      	str	r0, [sp, #8]
 800c126:	9006      	str	r0, [sp, #24]
 800c128:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c12c:	4809      	ldr	r0, [pc, #36]	; (800c154 <siprintf+0x38>)
 800c12e:	9107      	str	r1, [sp, #28]
 800c130:	9104      	str	r1, [sp, #16]
 800c132:	4909      	ldr	r1, [pc, #36]	; (800c158 <siprintf+0x3c>)
 800c134:	f853 2b04 	ldr.w	r2, [r3], #4
 800c138:	9105      	str	r1, [sp, #20]
 800c13a:	6800      	ldr	r0, [r0, #0]
 800c13c:	9301      	str	r3, [sp, #4]
 800c13e:	a902      	add	r1, sp, #8
 800c140:	f001 fe5a 	bl	800ddf8 <_svfiprintf_r>
 800c144:	9b02      	ldr	r3, [sp, #8]
 800c146:	2200      	movs	r2, #0
 800c148:	701a      	strb	r2, [r3, #0]
 800c14a:	b01c      	add	sp, #112	; 0x70
 800c14c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c150:	b003      	add	sp, #12
 800c152:	4770      	bx	lr
 800c154:	20000058 	.word	0x20000058
 800c158:	ffff0208 	.word	0xffff0208

0800c15c <strcat>:
 800c15c:	b510      	push	{r4, lr}
 800c15e:	4602      	mov	r2, r0
 800c160:	7814      	ldrb	r4, [r2, #0]
 800c162:	4613      	mov	r3, r2
 800c164:	3201      	adds	r2, #1
 800c166:	2c00      	cmp	r4, #0
 800c168:	d1fa      	bne.n	800c160 <strcat+0x4>
 800c16a:	3b01      	subs	r3, #1
 800c16c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c170:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c174:	2a00      	cmp	r2, #0
 800c176:	d1f9      	bne.n	800c16c <strcat+0x10>
 800c178:	bd10      	pop	{r4, pc}
	...

0800c17c <__swbuf_r>:
 800c17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c17e:	460e      	mov	r6, r1
 800c180:	4614      	mov	r4, r2
 800c182:	4605      	mov	r5, r0
 800c184:	b118      	cbz	r0, 800c18e <__swbuf_r+0x12>
 800c186:	6983      	ldr	r3, [r0, #24]
 800c188:	b90b      	cbnz	r3, 800c18e <__swbuf_r+0x12>
 800c18a:	f001 f84d 	bl	800d228 <__sinit>
 800c18e:	4b21      	ldr	r3, [pc, #132]	; (800c214 <__swbuf_r+0x98>)
 800c190:	429c      	cmp	r4, r3
 800c192:	d12b      	bne.n	800c1ec <__swbuf_r+0x70>
 800c194:	686c      	ldr	r4, [r5, #4]
 800c196:	69a3      	ldr	r3, [r4, #24]
 800c198:	60a3      	str	r3, [r4, #8]
 800c19a:	89a3      	ldrh	r3, [r4, #12]
 800c19c:	071a      	lsls	r2, r3, #28
 800c19e:	d52f      	bpl.n	800c200 <__swbuf_r+0x84>
 800c1a0:	6923      	ldr	r3, [r4, #16]
 800c1a2:	b36b      	cbz	r3, 800c200 <__swbuf_r+0x84>
 800c1a4:	6923      	ldr	r3, [r4, #16]
 800c1a6:	6820      	ldr	r0, [r4, #0]
 800c1a8:	1ac0      	subs	r0, r0, r3
 800c1aa:	6963      	ldr	r3, [r4, #20]
 800c1ac:	b2f6      	uxtb	r6, r6
 800c1ae:	4283      	cmp	r3, r0
 800c1b0:	4637      	mov	r7, r6
 800c1b2:	dc04      	bgt.n	800c1be <__swbuf_r+0x42>
 800c1b4:	4621      	mov	r1, r4
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	f000 ffa2 	bl	800d100 <_fflush_r>
 800c1bc:	bb30      	cbnz	r0, 800c20c <__swbuf_r+0x90>
 800c1be:	68a3      	ldr	r3, [r4, #8]
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	60a3      	str	r3, [r4, #8]
 800c1c4:	6823      	ldr	r3, [r4, #0]
 800c1c6:	1c5a      	adds	r2, r3, #1
 800c1c8:	6022      	str	r2, [r4, #0]
 800c1ca:	701e      	strb	r6, [r3, #0]
 800c1cc:	6963      	ldr	r3, [r4, #20]
 800c1ce:	3001      	adds	r0, #1
 800c1d0:	4283      	cmp	r3, r0
 800c1d2:	d004      	beq.n	800c1de <__swbuf_r+0x62>
 800c1d4:	89a3      	ldrh	r3, [r4, #12]
 800c1d6:	07db      	lsls	r3, r3, #31
 800c1d8:	d506      	bpl.n	800c1e8 <__swbuf_r+0x6c>
 800c1da:	2e0a      	cmp	r6, #10
 800c1dc:	d104      	bne.n	800c1e8 <__swbuf_r+0x6c>
 800c1de:	4621      	mov	r1, r4
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	f000 ff8d 	bl	800d100 <_fflush_r>
 800c1e6:	b988      	cbnz	r0, 800c20c <__swbuf_r+0x90>
 800c1e8:	4638      	mov	r0, r7
 800c1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1ec:	4b0a      	ldr	r3, [pc, #40]	; (800c218 <__swbuf_r+0x9c>)
 800c1ee:	429c      	cmp	r4, r3
 800c1f0:	d101      	bne.n	800c1f6 <__swbuf_r+0x7a>
 800c1f2:	68ac      	ldr	r4, [r5, #8]
 800c1f4:	e7cf      	b.n	800c196 <__swbuf_r+0x1a>
 800c1f6:	4b09      	ldr	r3, [pc, #36]	; (800c21c <__swbuf_r+0xa0>)
 800c1f8:	429c      	cmp	r4, r3
 800c1fa:	bf08      	it	eq
 800c1fc:	68ec      	ldreq	r4, [r5, #12]
 800c1fe:	e7ca      	b.n	800c196 <__swbuf_r+0x1a>
 800c200:	4621      	mov	r1, r4
 800c202:	4628      	mov	r0, r5
 800c204:	f000 f80c 	bl	800c220 <__swsetup_r>
 800c208:	2800      	cmp	r0, #0
 800c20a:	d0cb      	beq.n	800c1a4 <__swbuf_r+0x28>
 800c20c:	f04f 37ff 	mov.w	r7, #4294967295
 800c210:	e7ea      	b.n	800c1e8 <__swbuf_r+0x6c>
 800c212:	bf00      	nop
 800c214:	0800f128 	.word	0x0800f128
 800c218:	0800f148 	.word	0x0800f148
 800c21c:	0800f108 	.word	0x0800f108

0800c220 <__swsetup_r>:
 800c220:	4b32      	ldr	r3, [pc, #200]	; (800c2ec <__swsetup_r+0xcc>)
 800c222:	b570      	push	{r4, r5, r6, lr}
 800c224:	681d      	ldr	r5, [r3, #0]
 800c226:	4606      	mov	r6, r0
 800c228:	460c      	mov	r4, r1
 800c22a:	b125      	cbz	r5, 800c236 <__swsetup_r+0x16>
 800c22c:	69ab      	ldr	r3, [r5, #24]
 800c22e:	b913      	cbnz	r3, 800c236 <__swsetup_r+0x16>
 800c230:	4628      	mov	r0, r5
 800c232:	f000 fff9 	bl	800d228 <__sinit>
 800c236:	4b2e      	ldr	r3, [pc, #184]	; (800c2f0 <__swsetup_r+0xd0>)
 800c238:	429c      	cmp	r4, r3
 800c23a:	d10f      	bne.n	800c25c <__swsetup_r+0x3c>
 800c23c:	686c      	ldr	r4, [r5, #4]
 800c23e:	89a3      	ldrh	r3, [r4, #12]
 800c240:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c244:	0719      	lsls	r1, r3, #28
 800c246:	d42c      	bmi.n	800c2a2 <__swsetup_r+0x82>
 800c248:	06dd      	lsls	r5, r3, #27
 800c24a:	d411      	bmi.n	800c270 <__swsetup_r+0x50>
 800c24c:	2309      	movs	r3, #9
 800c24e:	6033      	str	r3, [r6, #0]
 800c250:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c254:	81a3      	strh	r3, [r4, #12]
 800c256:	f04f 30ff 	mov.w	r0, #4294967295
 800c25a:	e03e      	b.n	800c2da <__swsetup_r+0xba>
 800c25c:	4b25      	ldr	r3, [pc, #148]	; (800c2f4 <__swsetup_r+0xd4>)
 800c25e:	429c      	cmp	r4, r3
 800c260:	d101      	bne.n	800c266 <__swsetup_r+0x46>
 800c262:	68ac      	ldr	r4, [r5, #8]
 800c264:	e7eb      	b.n	800c23e <__swsetup_r+0x1e>
 800c266:	4b24      	ldr	r3, [pc, #144]	; (800c2f8 <__swsetup_r+0xd8>)
 800c268:	429c      	cmp	r4, r3
 800c26a:	bf08      	it	eq
 800c26c:	68ec      	ldreq	r4, [r5, #12]
 800c26e:	e7e6      	b.n	800c23e <__swsetup_r+0x1e>
 800c270:	0758      	lsls	r0, r3, #29
 800c272:	d512      	bpl.n	800c29a <__swsetup_r+0x7a>
 800c274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c276:	b141      	cbz	r1, 800c28a <__swsetup_r+0x6a>
 800c278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c27c:	4299      	cmp	r1, r3
 800c27e:	d002      	beq.n	800c286 <__swsetup_r+0x66>
 800c280:	4630      	mov	r0, r6
 800c282:	f001 fc7d 	bl	800db80 <_free_r>
 800c286:	2300      	movs	r3, #0
 800c288:	6363      	str	r3, [r4, #52]	; 0x34
 800c28a:	89a3      	ldrh	r3, [r4, #12]
 800c28c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c290:	81a3      	strh	r3, [r4, #12]
 800c292:	2300      	movs	r3, #0
 800c294:	6063      	str	r3, [r4, #4]
 800c296:	6923      	ldr	r3, [r4, #16]
 800c298:	6023      	str	r3, [r4, #0]
 800c29a:	89a3      	ldrh	r3, [r4, #12]
 800c29c:	f043 0308 	orr.w	r3, r3, #8
 800c2a0:	81a3      	strh	r3, [r4, #12]
 800c2a2:	6923      	ldr	r3, [r4, #16]
 800c2a4:	b94b      	cbnz	r3, 800c2ba <__swsetup_r+0x9a>
 800c2a6:	89a3      	ldrh	r3, [r4, #12]
 800c2a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c2ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2b0:	d003      	beq.n	800c2ba <__swsetup_r+0x9a>
 800c2b2:	4621      	mov	r1, r4
 800c2b4:	4630      	mov	r0, r6
 800c2b6:	f001 f881 	bl	800d3bc <__smakebuf_r>
 800c2ba:	89a0      	ldrh	r0, [r4, #12]
 800c2bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2c0:	f010 0301 	ands.w	r3, r0, #1
 800c2c4:	d00a      	beq.n	800c2dc <__swsetup_r+0xbc>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	60a3      	str	r3, [r4, #8]
 800c2ca:	6963      	ldr	r3, [r4, #20]
 800c2cc:	425b      	negs	r3, r3
 800c2ce:	61a3      	str	r3, [r4, #24]
 800c2d0:	6923      	ldr	r3, [r4, #16]
 800c2d2:	b943      	cbnz	r3, 800c2e6 <__swsetup_r+0xc6>
 800c2d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c2d8:	d1ba      	bne.n	800c250 <__swsetup_r+0x30>
 800c2da:	bd70      	pop	{r4, r5, r6, pc}
 800c2dc:	0781      	lsls	r1, r0, #30
 800c2de:	bf58      	it	pl
 800c2e0:	6963      	ldrpl	r3, [r4, #20]
 800c2e2:	60a3      	str	r3, [r4, #8]
 800c2e4:	e7f4      	b.n	800c2d0 <__swsetup_r+0xb0>
 800c2e6:	2000      	movs	r0, #0
 800c2e8:	e7f7      	b.n	800c2da <__swsetup_r+0xba>
 800c2ea:	bf00      	nop
 800c2ec:	20000058 	.word	0x20000058
 800c2f0:	0800f128 	.word	0x0800f128
 800c2f4:	0800f148 	.word	0x0800f148
 800c2f8:	0800f108 	.word	0x0800f108

0800c2fc <quorem>:
 800c2fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c300:	6903      	ldr	r3, [r0, #16]
 800c302:	690c      	ldr	r4, [r1, #16]
 800c304:	42a3      	cmp	r3, r4
 800c306:	4607      	mov	r7, r0
 800c308:	f2c0 8081 	blt.w	800c40e <quorem+0x112>
 800c30c:	3c01      	subs	r4, #1
 800c30e:	f101 0814 	add.w	r8, r1, #20
 800c312:	f100 0514 	add.w	r5, r0, #20
 800c316:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c31a:	9301      	str	r3, [sp, #4]
 800c31c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c320:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c324:	3301      	adds	r3, #1
 800c326:	429a      	cmp	r2, r3
 800c328:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c32c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c330:	fbb2 f6f3 	udiv	r6, r2, r3
 800c334:	d331      	bcc.n	800c39a <quorem+0x9e>
 800c336:	f04f 0e00 	mov.w	lr, #0
 800c33a:	4640      	mov	r0, r8
 800c33c:	46ac      	mov	ip, r5
 800c33e:	46f2      	mov	sl, lr
 800c340:	f850 2b04 	ldr.w	r2, [r0], #4
 800c344:	b293      	uxth	r3, r2
 800c346:	fb06 e303 	mla	r3, r6, r3, lr
 800c34a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c34e:	b29b      	uxth	r3, r3
 800c350:	ebaa 0303 	sub.w	r3, sl, r3
 800c354:	f8dc a000 	ldr.w	sl, [ip]
 800c358:	0c12      	lsrs	r2, r2, #16
 800c35a:	fa13 f38a 	uxtah	r3, r3, sl
 800c35e:	fb06 e202 	mla	r2, r6, r2, lr
 800c362:	9300      	str	r3, [sp, #0]
 800c364:	9b00      	ldr	r3, [sp, #0]
 800c366:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c36a:	b292      	uxth	r2, r2
 800c36c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c370:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c374:	f8bd 3000 	ldrh.w	r3, [sp]
 800c378:	4581      	cmp	r9, r0
 800c37a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c37e:	f84c 3b04 	str.w	r3, [ip], #4
 800c382:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c386:	d2db      	bcs.n	800c340 <quorem+0x44>
 800c388:	f855 300b 	ldr.w	r3, [r5, fp]
 800c38c:	b92b      	cbnz	r3, 800c39a <quorem+0x9e>
 800c38e:	9b01      	ldr	r3, [sp, #4]
 800c390:	3b04      	subs	r3, #4
 800c392:	429d      	cmp	r5, r3
 800c394:	461a      	mov	r2, r3
 800c396:	d32e      	bcc.n	800c3f6 <quorem+0xfa>
 800c398:	613c      	str	r4, [r7, #16]
 800c39a:	4638      	mov	r0, r7
 800c39c:	f001 fad8 	bl	800d950 <__mcmp>
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	db24      	blt.n	800c3ee <quorem+0xf2>
 800c3a4:	3601      	adds	r6, #1
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	f04f 0c00 	mov.w	ip, #0
 800c3ac:	f858 2b04 	ldr.w	r2, [r8], #4
 800c3b0:	f8d0 e000 	ldr.w	lr, [r0]
 800c3b4:	b293      	uxth	r3, r2
 800c3b6:	ebac 0303 	sub.w	r3, ip, r3
 800c3ba:	0c12      	lsrs	r2, r2, #16
 800c3bc:	fa13 f38e 	uxtah	r3, r3, lr
 800c3c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c3c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c3ce:	45c1      	cmp	r9, r8
 800c3d0:	f840 3b04 	str.w	r3, [r0], #4
 800c3d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c3d8:	d2e8      	bcs.n	800c3ac <quorem+0xb0>
 800c3da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c3de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c3e2:	b922      	cbnz	r2, 800c3ee <quorem+0xf2>
 800c3e4:	3b04      	subs	r3, #4
 800c3e6:	429d      	cmp	r5, r3
 800c3e8:	461a      	mov	r2, r3
 800c3ea:	d30a      	bcc.n	800c402 <quorem+0x106>
 800c3ec:	613c      	str	r4, [r7, #16]
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	b003      	add	sp, #12
 800c3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3f6:	6812      	ldr	r2, [r2, #0]
 800c3f8:	3b04      	subs	r3, #4
 800c3fa:	2a00      	cmp	r2, #0
 800c3fc:	d1cc      	bne.n	800c398 <quorem+0x9c>
 800c3fe:	3c01      	subs	r4, #1
 800c400:	e7c7      	b.n	800c392 <quorem+0x96>
 800c402:	6812      	ldr	r2, [r2, #0]
 800c404:	3b04      	subs	r3, #4
 800c406:	2a00      	cmp	r2, #0
 800c408:	d1f0      	bne.n	800c3ec <quorem+0xf0>
 800c40a:	3c01      	subs	r4, #1
 800c40c:	e7eb      	b.n	800c3e6 <quorem+0xea>
 800c40e:	2000      	movs	r0, #0
 800c410:	e7ee      	b.n	800c3f0 <quorem+0xf4>
 800c412:	0000      	movs	r0, r0
 800c414:	0000      	movs	r0, r0
	...

0800c418 <_dtoa_r>:
 800c418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c41c:	ed2d 8b04 	vpush	{d8-d9}
 800c420:	ec57 6b10 	vmov	r6, r7, d0
 800c424:	b093      	sub	sp, #76	; 0x4c
 800c426:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c428:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c42c:	9106      	str	r1, [sp, #24]
 800c42e:	ee10 aa10 	vmov	sl, s0
 800c432:	4604      	mov	r4, r0
 800c434:	9209      	str	r2, [sp, #36]	; 0x24
 800c436:	930c      	str	r3, [sp, #48]	; 0x30
 800c438:	46bb      	mov	fp, r7
 800c43a:	b975      	cbnz	r5, 800c45a <_dtoa_r+0x42>
 800c43c:	2010      	movs	r0, #16
 800c43e:	f000 fffd 	bl	800d43c <malloc>
 800c442:	4602      	mov	r2, r0
 800c444:	6260      	str	r0, [r4, #36]	; 0x24
 800c446:	b920      	cbnz	r0, 800c452 <_dtoa_r+0x3a>
 800c448:	4ba7      	ldr	r3, [pc, #668]	; (800c6e8 <_dtoa_r+0x2d0>)
 800c44a:	21ea      	movs	r1, #234	; 0xea
 800c44c:	48a7      	ldr	r0, [pc, #668]	; (800c6ec <_dtoa_r+0x2d4>)
 800c44e:	f001 ff93 	bl	800e378 <__assert_func>
 800c452:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c456:	6005      	str	r5, [r0, #0]
 800c458:	60c5      	str	r5, [r0, #12]
 800c45a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c45c:	6819      	ldr	r1, [r3, #0]
 800c45e:	b151      	cbz	r1, 800c476 <_dtoa_r+0x5e>
 800c460:	685a      	ldr	r2, [r3, #4]
 800c462:	604a      	str	r2, [r1, #4]
 800c464:	2301      	movs	r3, #1
 800c466:	4093      	lsls	r3, r2
 800c468:	608b      	str	r3, [r1, #8]
 800c46a:	4620      	mov	r0, r4
 800c46c:	f001 f82e 	bl	800d4cc <_Bfree>
 800c470:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c472:	2200      	movs	r2, #0
 800c474:	601a      	str	r2, [r3, #0]
 800c476:	1e3b      	subs	r3, r7, #0
 800c478:	bfaa      	itet	ge
 800c47a:	2300      	movge	r3, #0
 800c47c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c480:	f8c8 3000 	strge.w	r3, [r8]
 800c484:	4b9a      	ldr	r3, [pc, #616]	; (800c6f0 <_dtoa_r+0x2d8>)
 800c486:	bfbc      	itt	lt
 800c488:	2201      	movlt	r2, #1
 800c48a:	f8c8 2000 	strlt.w	r2, [r8]
 800c48e:	ea33 030b 	bics.w	r3, r3, fp
 800c492:	d11b      	bne.n	800c4cc <_dtoa_r+0xb4>
 800c494:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c496:	f242 730f 	movw	r3, #9999	; 0x270f
 800c49a:	6013      	str	r3, [r2, #0]
 800c49c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4a0:	4333      	orrs	r3, r6
 800c4a2:	f000 8592 	beq.w	800cfca <_dtoa_r+0xbb2>
 800c4a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4a8:	b963      	cbnz	r3, 800c4c4 <_dtoa_r+0xac>
 800c4aa:	4b92      	ldr	r3, [pc, #584]	; (800c6f4 <_dtoa_r+0x2dc>)
 800c4ac:	e022      	b.n	800c4f4 <_dtoa_r+0xdc>
 800c4ae:	4b92      	ldr	r3, [pc, #584]	; (800c6f8 <_dtoa_r+0x2e0>)
 800c4b0:	9301      	str	r3, [sp, #4]
 800c4b2:	3308      	adds	r3, #8
 800c4b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c4b6:	6013      	str	r3, [r2, #0]
 800c4b8:	9801      	ldr	r0, [sp, #4]
 800c4ba:	b013      	add	sp, #76	; 0x4c
 800c4bc:	ecbd 8b04 	vpop	{d8-d9}
 800c4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c4:	4b8b      	ldr	r3, [pc, #556]	; (800c6f4 <_dtoa_r+0x2dc>)
 800c4c6:	9301      	str	r3, [sp, #4]
 800c4c8:	3303      	adds	r3, #3
 800c4ca:	e7f3      	b.n	800c4b4 <_dtoa_r+0x9c>
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	4650      	mov	r0, sl
 800c4d2:	4659      	mov	r1, fp
 800c4d4:	f7f4 fae0 	bl	8000a98 <__aeabi_dcmpeq>
 800c4d8:	ec4b ab19 	vmov	d9, sl, fp
 800c4dc:	4680      	mov	r8, r0
 800c4de:	b158      	cbz	r0, 800c4f8 <_dtoa_r+0xe0>
 800c4e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	6013      	str	r3, [r2, #0]
 800c4e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f000 856b 	beq.w	800cfc4 <_dtoa_r+0xbac>
 800c4ee:	4883      	ldr	r0, [pc, #524]	; (800c6fc <_dtoa_r+0x2e4>)
 800c4f0:	6018      	str	r0, [r3, #0]
 800c4f2:	1e43      	subs	r3, r0, #1
 800c4f4:	9301      	str	r3, [sp, #4]
 800c4f6:	e7df      	b.n	800c4b8 <_dtoa_r+0xa0>
 800c4f8:	ec4b ab10 	vmov	d0, sl, fp
 800c4fc:	aa10      	add	r2, sp, #64	; 0x40
 800c4fe:	a911      	add	r1, sp, #68	; 0x44
 800c500:	4620      	mov	r0, r4
 800c502:	f001 facb 	bl	800da9c <__d2b>
 800c506:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c50a:	ee08 0a10 	vmov	s16, r0
 800c50e:	2d00      	cmp	r5, #0
 800c510:	f000 8084 	beq.w	800c61c <_dtoa_r+0x204>
 800c514:	ee19 3a90 	vmov	r3, s19
 800c518:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c51c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c520:	4656      	mov	r6, sl
 800c522:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c526:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c52a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c52e:	4b74      	ldr	r3, [pc, #464]	; (800c700 <_dtoa_r+0x2e8>)
 800c530:	2200      	movs	r2, #0
 800c532:	4630      	mov	r0, r6
 800c534:	4639      	mov	r1, r7
 800c536:	f7f3 fe8f 	bl	8000258 <__aeabi_dsub>
 800c53a:	a365      	add	r3, pc, #404	; (adr r3, 800c6d0 <_dtoa_r+0x2b8>)
 800c53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c540:	f7f4 f842 	bl	80005c8 <__aeabi_dmul>
 800c544:	a364      	add	r3, pc, #400	; (adr r3, 800c6d8 <_dtoa_r+0x2c0>)
 800c546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54a:	f7f3 fe87 	bl	800025c <__adddf3>
 800c54e:	4606      	mov	r6, r0
 800c550:	4628      	mov	r0, r5
 800c552:	460f      	mov	r7, r1
 800c554:	f7f3 ffce 	bl	80004f4 <__aeabi_i2d>
 800c558:	a361      	add	r3, pc, #388	; (adr r3, 800c6e0 <_dtoa_r+0x2c8>)
 800c55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55e:	f7f4 f833 	bl	80005c8 <__aeabi_dmul>
 800c562:	4602      	mov	r2, r0
 800c564:	460b      	mov	r3, r1
 800c566:	4630      	mov	r0, r6
 800c568:	4639      	mov	r1, r7
 800c56a:	f7f3 fe77 	bl	800025c <__adddf3>
 800c56e:	4606      	mov	r6, r0
 800c570:	460f      	mov	r7, r1
 800c572:	f7f4 fad9 	bl	8000b28 <__aeabi_d2iz>
 800c576:	2200      	movs	r2, #0
 800c578:	9000      	str	r0, [sp, #0]
 800c57a:	2300      	movs	r3, #0
 800c57c:	4630      	mov	r0, r6
 800c57e:	4639      	mov	r1, r7
 800c580:	f7f4 fa94 	bl	8000aac <__aeabi_dcmplt>
 800c584:	b150      	cbz	r0, 800c59c <_dtoa_r+0x184>
 800c586:	9800      	ldr	r0, [sp, #0]
 800c588:	f7f3 ffb4 	bl	80004f4 <__aeabi_i2d>
 800c58c:	4632      	mov	r2, r6
 800c58e:	463b      	mov	r3, r7
 800c590:	f7f4 fa82 	bl	8000a98 <__aeabi_dcmpeq>
 800c594:	b910      	cbnz	r0, 800c59c <_dtoa_r+0x184>
 800c596:	9b00      	ldr	r3, [sp, #0]
 800c598:	3b01      	subs	r3, #1
 800c59a:	9300      	str	r3, [sp, #0]
 800c59c:	9b00      	ldr	r3, [sp, #0]
 800c59e:	2b16      	cmp	r3, #22
 800c5a0:	d85a      	bhi.n	800c658 <_dtoa_r+0x240>
 800c5a2:	9a00      	ldr	r2, [sp, #0]
 800c5a4:	4b57      	ldr	r3, [pc, #348]	; (800c704 <_dtoa_r+0x2ec>)
 800c5a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ae:	ec51 0b19 	vmov	r0, r1, d9
 800c5b2:	f7f4 fa7b 	bl	8000aac <__aeabi_dcmplt>
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	d050      	beq.n	800c65c <_dtoa_r+0x244>
 800c5ba:	9b00      	ldr	r3, [sp, #0]
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	9300      	str	r3, [sp, #0]
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5c6:	1b5d      	subs	r5, r3, r5
 800c5c8:	1e6b      	subs	r3, r5, #1
 800c5ca:	9305      	str	r3, [sp, #20]
 800c5cc:	bf45      	ittet	mi
 800c5ce:	f1c5 0301 	rsbmi	r3, r5, #1
 800c5d2:	9304      	strmi	r3, [sp, #16]
 800c5d4:	2300      	movpl	r3, #0
 800c5d6:	2300      	movmi	r3, #0
 800c5d8:	bf4c      	ite	mi
 800c5da:	9305      	strmi	r3, [sp, #20]
 800c5dc:	9304      	strpl	r3, [sp, #16]
 800c5de:	9b00      	ldr	r3, [sp, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	db3d      	blt.n	800c660 <_dtoa_r+0x248>
 800c5e4:	9b05      	ldr	r3, [sp, #20]
 800c5e6:	9a00      	ldr	r2, [sp, #0]
 800c5e8:	920a      	str	r2, [sp, #40]	; 0x28
 800c5ea:	4413      	add	r3, r2
 800c5ec:	9305      	str	r3, [sp, #20]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	9307      	str	r3, [sp, #28]
 800c5f2:	9b06      	ldr	r3, [sp, #24]
 800c5f4:	2b09      	cmp	r3, #9
 800c5f6:	f200 8089 	bhi.w	800c70c <_dtoa_r+0x2f4>
 800c5fa:	2b05      	cmp	r3, #5
 800c5fc:	bfc4      	itt	gt
 800c5fe:	3b04      	subgt	r3, #4
 800c600:	9306      	strgt	r3, [sp, #24]
 800c602:	9b06      	ldr	r3, [sp, #24]
 800c604:	f1a3 0302 	sub.w	r3, r3, #2
 800c608:	bfcc      	ite	gt
 800c60a:	2500      	movgt	r5, #0
 800c60c:	2501      	movle	r5, #1
 800c60e:	2b03      	cmp	r3, #3
 800c610:	f200 8087 	bhi.w	800c722 <_dtoa_r+0x30a>
 800c614:	e8df f003 	tbb	[pc, r3]
 800c618:	59383a2d 	.word	0x59383a2d
 800c61c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c620:	441d      	add	r5, r3
 800c622:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c626:	2b20      	cmp	r3, #32
 800c628:	bfc1      	itttt	gt
 800c62a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c62e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c632:	fa0b f303 	lslgt.w	r3, fp, r3
 800c636:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c63a:	bfda      	itte	le
 800c63c:	f1c3 0320 	rsble	r3, r3, #32
 800c640:	fa06 f003 	lslle.w	r0, r6, r3
 800c644:	4318      	orrgt	r0, r3
 800c646:	f7f3 ff45 	bl	80004d4 <__aeabi_ui2d>
 800c64a:	2301      	movs	r3, #1
 800c64c:	4606      	mov	r6, r0
 800c64e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c652:	3d01      	subs	r5, #1
 800c654:	930e      	str	r3, [sp, #56]	; 0x38
 800c656:	e76a      	b.n	800c52e <_dtoa_r+0x116>
 800c658:	2301      	movs	r3, #1
 800c65a:	e7b2      	b.n	800c5c2 <_dtoa_r+0x1aa>
 800c65c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c65e:	e7b1      	b.n	800c5c4 <_dtoa_r+0x1ac>
 800c660:	9b04      	ldr	r3, [sp, #16]
 800c662:	9a00      	ldr	r2, [sp, #0]
 800c664:	1a9b      	subs	r3, r3, r2
 800c666:	9304      	str	r3, [sp, #16]
 800c668:	4253      	negs	r3, r2
 800c66a:	9307      	str	r3, [sp, #28]
 800c66c:	2300      	movs	r3, #0
 800c66e:	930a      	str	r3, [sp, #40]	; 0x28
 800c670:	e7bf      	b.n	800c5f2 <_dtoa_r+0x1da>
 800c672:	2300      	movs	r3, #0
 800c674:	9308      	str	r3, [sp, #32]
 800c676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c678:	2b00      	cmp	r3, #0
 800c67a:	dc55      	bgt.n	800c728 <_dtoa_r+0x310>
 800c67c:	2301      	movs	r3, #1
 800c67e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c682:	461a      	mov	r2, r3
 800c684:	9209      	str	r2, [sp, #36]	; 0x24
 800c686:	e00c      	b.n	800c6a2 <_dtoa_r+0x28a>
 800c688:	2301      	movs	r3, #1
 800c68a:	e7f3      	b.n	800c674 <_dtoa_r+0x25c>
 800c68c:	2300      	movs	r3, #0
 800c68e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c690:	9308      	str	r3, [sp, #32]
 800c692:	9b00      	ldr	r3, [sp, #0]
 800c694:	4413      	add	r3, r2
 800c696:	9302      	str	r3, [sp, #8]
 800c698:	3301      	adds	r3, #1
 800c69a:	2b01      	cmp	r3, #1
 800c69c:	9303      	str	r3, [sp, #12]
 800c69e:	bfb8      	it	lt
 800c6a0:	2301      	movlt	r3, #1
 800c6a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	6042      	str	r2, [r0, #4]
 800c6a8:	2204      	movs	r2, #4
 800c6aa:	f102 0614 	add.w	r6, r2, #20
 800c6ae:	429e      	cmp	r6, r3
 800c6b0:	6841      	ldr	r1, [r0, #4]
 800c6b2:	d93d      	bls.n	800c730 <_dtoa_r+0x318>
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	f000 fec9 	bl	800d44c <_Balloc>
 800c6ba:	9001      	str	r0, [sp, #4]
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	d13b      	bne.n	800c738 <_dtoa_r+0x320>
 800c6c0:	4b11      	ldr	r3, [pc, #68]	; (800c708 <_dtoa_r+0x2f0>)
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c6c8:	e6c0      	b.n	800c44c <_dtoa_r+0x34>
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e7df      	b.n	800c68e <_dtoa_r+0x276>
 800c6ce:	bf00      	nop
 800c6d0:	636f4361 	.word	0x636f4361
 800c6d4:	3fd287a7 	.word	0x3fd287a7
 800c6d8:	8b60c8b3 	.word	0x8b60c8b3
 800c6dc:	3fc68a28 	.word	0x3fc68a28
 800c6e0:	509f79fb 	.word	0x509f79fb
 800c6e4:	3fd34413 	.word	0x3fd34413
 800c6e8:	0800f085 	.word	0x0800f085
 800c6ec:	0800f09c 	.word	0x0800f09c
 800c6f0:	7ff00000 	.word	0x7ff00000
 800c6f4:	0800f081 	.word	0x0800f081
 800c6f8:	0800f078 	.word	0x0800f078
 800c6fc:	0800f055 	.word	0x0800f055
 800c700:	3ff80000 	.word	0x3ff80000
 800c704:	0800f1f0 	.word	0x0800f1f0
 800c708:	0800f0f7 	.word	0x0800f0f7
 800c70c:	2501      	movs	r5, #1
 800c70e:	2300      	movs	r3, #0
 800c710:	9306      	str	r3, [sp, #24]
 800c712:	9508      	str	r5, [sp, #32]
 800c714:	f04f 33ff 	mov.w	r3, #4294967295
 800c718:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c71c:	2200      	movs	r2, #0
 800c71e:	2312      	movs	r3, #18
 800c720:	e7b0      	b.n	800c684 <_dtoa_r+0x26c>
 800c722:	2301      	movs	r3, #1
 800c724:	9308      	str	r3, [sp, #32]
 800c726:	e7f5      	b.n	800c714 <_dtoa_r+0x2fc>
 800c728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c72a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c72e:	e7b8      	b.n	800c6a2 <_dtoa_r+0x28a>
 800c730:	3101      	adds	r1, #1
 800c732:	6041      	str	r1, [r0, #4]
 800c734:	0052      	lsls	r2, r2, #1
 800c736:	e7b8      	b.n	800c6aa <_dtoa_r+0x292>
 800c738:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c73a:	9a01      	ldr	r2, [sp, #4]
 800c73c:	601a      	str	r2, [r3, #0]
 800c73e:	9b03      	ldr	r3, [sp, #12]
 800c740:	2b0e      	cmp	r3, #14
 800c742:	f200 809d 	bhi.w	800c880 <_dtoa_r+0x468>
 800c746:	2d00      	cmp	r5, #0
 800c748:	f000 809a 	beq.w	800c880 <_dtoa_r+0x468>
 800c74c:	9b00      	ldr	r3, [sp, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	dd32      	ble.n	800c7b8 <_dtoa_r+0x3a0>
 800c752:	4ab7      	ldr	r2, [pc, #732]	; (800ca30 <_dtoa_r+0x618>)
 800c754:	f003 030f 	and.w	r3, r3, #15
 800c758:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c75c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c760:	9b00      	ldr	r3, [sp, #0]
 800c762:	05d8      	lsls	r0, r3, #23
 800c764:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c768:	d516      	bpl.n	800c798 <_dtoa_r+0x380>
 800c76a:	4bb2      	ldr	r3, [pc, #712]	; (800ca34 <_dtoa_r+0x61c>)
 800c76c:	ec51 0b19 	vmov	r0, r1, d9
 800c770:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c774:	f7f4 f852 	bl	800081c <__aeabi_ddiv>
 800c778:	f007 070f 	and.w	r7, r7, #15
 800c77c:	4682      	mov	sl, r0
 800c77e:	468b      	mov	fp, r1
 800c780:	2503      	movs	r5, #3
 800c782:	4eac      	ldr	r6, [pc, #688]	; (800ca34 <_dtoa_r+0x61c>)
 800c784:	b957      	cbnz	r7, 800c79c <_dtoa_r+0x384>
 800c786:	4642      	mov	r2, r8
 800c788:	464b      	mov	r3, r9
 800c78a:	4650      	mov	r0, sl
 800c78c:	4659      	mov	r1, fp
 800c78e:	f7f4 f845 	bl	800081c <__aeabi_ddiv>
 800c792:	4682      	mov	sl, r0
 800c794:	468b      	mov	fp, r1
 800c796:	e028      	b.n	800c7ea <_dtoa_r+0x3d2>
 800c798:	2502      	movs	r5, #2
 800c79a:	e7f2      	b.n	800c782 <_dtoa_r+0x36a>
 800c79c:	07f9      	lsls	r1, r7, #31
 800c79e:	d508      	bpl.n	800c7b2 <_dtoa_r+0x39a>
 800c7a0:	4640      	mov	r0, r8
 800c7a2:	4649      	mov	r1, r9
 800c7a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c7a8:	f7f3 ff0e 	bl	80005c8 <__aeabi_dmul>
 800c7ac:	3501      	adds	r5, #1
 800c7ae:	4680      	mov	r8, r0
 800c7b0:	4689      	mov	r9, r1
 800c7b2:	107f      	asrs	r7, r7, #1
 800c7b4:	3608      	adds	r6, #8
 800c7b6:	e7e5      	b.n	800c784 <_dtoa_r+0x36c>
 800c7b8:	f000 809b 	beq.w	800c8f2 <_dtoa_r+0x4da>
 800c7bc:	9b00      	ldr	r3, [sp, #0]
 800c7be:	4f9d      	ldr	r7, [pc, #628]	; (800ca34 <_dtoa_r+0x61c>)
 800c7c0:	425e      	negs	r6, r3
 800c7c2:	4b9b      	ldr	r3, [pc, #620]	; (800ca30 <_dtoa_r+0x618>)
 800c7c4:	f006 020f 	and.w	r2, r6, #15
 800c7c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d0:	ec51 0b19 	vmov	r0, r1, d9
 800c7d4:	f7f3 fef8 	bl	80005c8 <__aeabi_dmul>
 800c7d8:	1136      	asrs	r6, r6, #4
 800c7da:	4682      	mov	sl, r0
 800c7dc:	468b      	mov	fp, r1
 800c7de:	2300      	movs	r3, #0
 800c7e0:	2502      	movs	r5, #2
 800c7e2:	2e00      	cmp	r6, #0
 800c7e4:	d17a      	bne.n	800c8dc <_dtoa_r+0x4c4>
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d1d3      	bne.n	800c792 <_dtoa_r+0x37a>
 800c7ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	f000 8082 	beq.w	800c8f6 <_dtoa_r+0x4de>
 800c7f2:	4b91      	ldr	r3, [pc, #580]	; (800ca38 <_dtoa_r+0x620>)
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	4650      	mov	r0, sl
 800c7f8:	4659      	mov	r1, fp
 800c7fa:	f7f4 f957 	bl	8000aac <__aeabi_dcmplt>
 800c7fe:	2800      	cmp	r0, #0
 800c800:	d079      	beq.n	800c8f6 <_dtoa_r+0x4de>
 800c802:	9b03      	ldr	r3, [sp, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d076      	beq.n	800c8f6 <_dtoa_r+0x4de>
 800c808:	9b02      	ldr	r3, [sp, #8]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	dd36      	ble.n	800c87c <_dtoa_r+0x464>
 800c80e:	9b00      	ldr	r3, [sp, #0]
 800c810:	4650      	mov	r0, sl
 800c812:	4659      	mov	r1, fp
 800c814:	1e5f      	subs	r7, r3, #1
 800c816:	2200      	movs	r2, #0
 800c818:	4b88      	ldr	r3, [pc, #544]	; (800ca3c <_dtoa_r+0x624>)
 800c81a:	f7f3 fed5 	bl	80005c8 <__aeabi_dmul>
 800c81e:	9e02      	ldr	r6, [sp, #8]
 800c820:	4682      	mov	sl, r0
 800c822:	468b      	mov	fp, r1
 800c824:	3501      	adds	r5, #1
 800c826:	4628      	mov	r0, r5
 800c828:	f7f3 fe64 	bl	80004f4 <__aeabi_i2d>
 800c82c:	4652      	mov	r2, sl
 800c82e:	465b      	mov	r3, fp
 800c830:	f7f3 feca 	bl	80005c8 <__aeabi_dmul>
 800c834:	4b82      	ldr	r3, [pc, #520]	; (800ca40 <_dtoa_r+0x628>)
 800c836:	2200      	movs	r2, #0
 800c838:	f7f3 fd10 	bl	800025c <__adddf3>
 800c83c:	46d0      	mov	r8, sl
 800c83e:	46d9      	mov	r9, fp
 800c840:	4682      	mov	sl, r0
 800c842:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c846:	2e00      	cmp	r6, #0
 800c848:	d158      	bne.n	800c8fc <_dtoa_r+0x4e4>
 800c84a:	4b7e      	ldr	r3, [pc, #504]	; (800ca44 <_dtoa_r+0x62c>)
 800c84c:	2200      	movs	r2, #0
 800c84e:	4640      	mov	r0, r8
 800c850:	4649      	mov	r1, r9
 800c852:	f7f3 fd01 	bl	8000258 <__aeabi_dsub>
 800c856:	4652      	mov	r2, sl
 800c858:	465b      	mov	r3, fp
 800c85a:	4680      	mov	r8, r0
 800c85c:	4689      	mov	r9, r1
 800c85e:	f7f4 f943 	bl	8000ae8 <__aeabi_dcmpgt>
 800c862:	2800      	cmp	r0, #0
 800c864:	f040 8295 	bne.w	800cd92 <_dtoa_r+0x97a>
 800c868:	4652      	mov	r2, sl
 800c86a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c86e:	4640      	mov	r0, r8
 800c870:	4649      	mov	r1, r9
 800c872:	f7f4 f91b 	bl	8000aac <__aeabi_dcmplt>
 800c876:	2800      	cmp	r0, #0
 800c878:	f040 8289 	bne.w	800cd8e <_dtoa_r+0x976>
 800c87c:	ec5b ab19 	vmov	sl, fp, d9
 800c880:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c882:	2b00      	cmp	r3, #0
 800c884:	f2c0 8148 	blt.w	800cb18 <_dtoa_r+0x700>
 800c888:	9a00      	ldr	r2, [sp, #0]
 800c88a:	2a0e      	cmp	r2, #14
 800c88c:	f300 8144 	bgt.w	800cb18 <_dtoa_r+0x700>
 800c890:	4b67      	ldr	r3, [pc, #412]	; (800ca30 <_dtoa_r+0x618>)
 800c892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c896:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c89a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	f280 80d5 	bge.w	800ca4c <_dtoa_r+0x634>
 800c8a2:	9b03      	ldr	r3, [sp, #12]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	f300 80d1 	bgt.w	800ca4c <_dtoa_r+0x634>
 800c8aa:	f040 826f 	bne.w	800cd8c <_dtoa_r+0x974>
 800c8ae:	4b65      	ldr	r3, [pc, #404]	; (800ca44 <_dtoa_r+0x62c>)
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	4640      	mov	r0, r8
 800c8b4:	4649      	mov	r1, r9
 800c8b6:	f7f3 fe87 	bl	80005c8 <__aeabi_dmul>
 800c8ba:	4652      	mov	r2, sl
 800c8bc:	465b      	mov	r3, fp
 800c8be:	f7f4 f909 	bl	8000ad4 <__aeabi_dcmpge>
 800c8c2:	9e03      	ldr	r6, [sp, #12]
 800c8c4:	4637      	mov	r7, r6
 800c8c6:	2800      	cmp	r0, #0
 800c8c8:	f040 8245 	bne.w	800cd56 <_dtoa_r+0x93e>
 800c8cc:	9d01      	ldr	r5, [sp, #4]
 800c8ce:	2331      	movs	r3, #49	; 0x31
 800c8d0:	f805 3b01 	strb.w	r3, [r5], #1
 800c8d4:	9b00      	ldr	r3, [sp, #0]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	9300      	str	r3, [sp, #0]
 800c8da:	e240      	b.n	800cd5e <_dtoa_r+0x946>
 800c8dc:	07f2      	lsls	r2, r6, #31
 800c8de:	d505      	bpl.n	800c8ec <_dtoa_r+0x4d4>
 800c8e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8e4:	f7f3 fe70 	bl	80005c8 <__aeabi_dmul>
 800c8e8:	3501      	adds	r5, #1
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	1076      	asrs	r6, r6, #1
 800c8ee:	3708      	adds	r7, #8
 800c8f0:	e777      	b.n	800c7e2 <_dtoa_r+0x3ca>
 800c8f2:	2502      	movs	r5, #2
 800c8f4:	e779      	b.n	800c7ea <_dtoa_r+0x3d2>
 800c8f6:	9f00      	ldr	r7, [sp, #0]
 800c8f8:	9e03      	ldr	r6, [sp, #12]
 800c8fa:	e794      	b.n	800c826 <_dtoa_r+0x40e>
 800c8fc:	9901      	ldr	r1, [sp, #4]
 800c8fe:	4b4c      	ldr	r3, [pc, #304]	; (800ca30 <_dtoa_r+0x618>)
 800c900:	4431      	add	r1, r6
 800c902:	910d      	str	r1, [sp, #52]	; 0x34
 800c904:	9908      	ldr	r1, [sp, #32]
 800c906:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c90a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c90e:	2900      	cmp	r1, #0
 800c910:	d043      	beq.n	800c99a <_dtoa_r+0x582>
 800c912:	494d      	ldr	r1, [pc, #308]	; (800ca48 <_dtoa_r+0x630>)
 800c914:	2000      	movs	r0, #0
 800c916:	f7f3 ff81 	bl	800081c <__aeabi_ddiv>
 800c91a:	4652      	mov	r2, sl
 800c91c:	465b      	mov	r3, fp
 800c91e:	f7f3 fc9b 	bl	8000258 <__aeabi_dsub>
 800c922:	9d01      	ldr	r5, [sp, #4]
 800c924:	4682      	mov	sl, r0
 800c926:	468b      	mov	fp, r1
 800c928:	4649      	mov	r1, r9
 800c92a:	4640      	mov	r0, r8
 800c92c:	f7f4 f8fc 	bl	8000b28 <__aeabi_d2iz>
 800c930:	4606      	mov	r6, r0
 800c932:	f7f3 fddf 	bl	80004f4 <__aeabi_i2d>
 800c936:	4602      	mov	r2, r0
 800c938:	460b      	mov	r3, r1
 800c93a:	4640      	mov	r0, r8
 800c93c:	4649      	mov	r1, r9
 800c93e:	f7f3 fc8b 	bl	8000258 <__aeabi_dsub>
 800c942:	3630      	adds	r6, #48	; 0x30
 800c944:	f805 6b01 	strb.w	r6, [r5], #1
 800c948:	4652      	mov	r2, sl
 800c94a:	465b      	mov	r3, fp
 800c94c:	4680      	mov	r8, r0
 800c94e:	4689      	mov	r9, r1
 800c950:	f7f4 f8ac 	bl	8000aac <__aeabi_dcmplt>
 800c954:	2800      	cmp	r0, #0
 800c956:	d163      	bne.n	800ca20 <_dtoa_r+0x608>
 800c958:	4642      	mov	r2, r8
 800c95a:	464b      	mov	r3, r9
 800c95c:	4936      	ldr	r1, [pc, #216]	; (800ca38 <_dtoa_r+0x620>)
 800c95e:	2000      	movs	r0, #0
 800c960:	f7f3 fc7a 	bl	8000258 <__aeabi_dsub>
 800c964:	4652      	mov	r2, sl
 800c966:	465b      	mov	r3, fp
 800c968:	f7f4 f8a0 	bl	8000aac <__aeabi_dcmplt>
 800c96c:	2800      	cmp	r0, #0
 800c96e:	f040 80b5 	bne.w	800cadc <_dtoa_r+0x6c4>
 800c972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c974:	429d      	cmp	r5, r3
 800c976:	d081      	beq.n	800c87c <_dtoa_r+0x464>
 800c978:	4b30      	ldr	r3, [pc, #192]	; (800ca3c <_dtoa_r+0x624>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	4650      	mov	r0, sl
 800c97e:	4659      	mov	r1, fp
 800c980:	f7f3 fe22 	bl	80005c8 <__aeabi_dmul>
 800c984:	4b2d      	ldr	r3, [pc, #180]	; (800ca3c <_dtoa_r+0x624>)
 800c986:	4682      	mov	sl, r0
 800c988:	468b      	mov	fp, r1
 800c98a:	4640      	mov	r0, r8
 800c98c:	4649      	mov	r1, r9
 800c98e:	2200      	movs	r2, #0
 800c990:	f7f3 fe1a 	bl	80005c8 <__aeabi_dmul>
 800c994:	4680      	mov	r8, r0
 800c996:	4689      	mov	r9, r1
 800c998:	e7c6      	b.n	800c928 <_dtoa_r+0x510>
 800c99a:	4650      	mov	r0, sl
 800c99c:	4659      	mov	r1, fp
 800c99e:	f7f3 fe13 	bl	80005c8 <__aeabi_dmul>
 800c9a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9a4:	9d01      	ldr	r5, [sp, #4]
 800c9a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c9a8:	4682      	mov	sl, r0
 800c9aa:	468b      	mov	fp, r1
 800c9ac:	4649      	mov	r1, r9
 800c9ae:	4640      	mov	r0, r8
 800c9b0:	f7f4 f8ba 	bl	8000b28 <__aeabi_d2iz>
 800c9b4:	4606      	mov	r6, r0
 800c9b6:	f7f3 fd9d 	bl	80004f4 <__aeabi_i2d>
 800c9ba:	3630      	adds	r6, #48	; 0x30
 800c9bc:	4602      	mov	r2, r0
 800c9be:	460b      	mov	r3, r1
 800c9c0:	4640      	mov	r0, r8
 800c9c2:	4649      	mov	r1, r9
 800c9c4:	f7f3 fc48 	bl	8000258 <__aeabi_dsub>
 800c9c8:	f805 6b01 	strb.w	r6, [r5], #1
 800c9cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9ce:	429d      	cmp	r5, r3
 800c9d0:	4680      	mov	r8, r0
 800c9d2:	4689      	mov	r9, r1
 800c9d4:	f04f 0200 	mov.w	r2, #0
 800c9d8:	d124      	bne.n	800ca24 <_dtoa_r+0x60c>
 800c9da:	4b1b      	ldr	r3, [pc, #108]	; (800ca48 <_dtoa_r+0x630>)
 800c9dc:	4650      	mov	r0, sl
 800c9de:	4659      	mov	r1, fp
 800c9e0:	f7f3 fc3c 	bl	800025c <__adddf3>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	4640      	mov	r0, r8
 800c9ea:	4649      	mov	r1, r9
 800c9ec:	f7f4 f87c 	bl	8000ae8 <__aeabi_dcmpgt>
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	d173      	bne.n	800cadc <_dtoa_r+0x6c4>
 800c9f4:	4652      	mov	r2, sl
 800c9f6:	465b      	mov	r3, fp
 800c9f8:	4913      	ldr	r1, [pc, #76]	; (800ca48 <_dtoa_r+0x630>)
 800c9fa:	2000      	movs	r0, #0
 800c9fc:	f7f3 fc2c 	bl	8000258 <__aeabi_dsub>
 800ca00:	4602      	mov	r2, r0
 800ca02:	460b      	mov	r3, r1
 800ca04:	4640      	mov	r0, r8
 800ca06:	4649      	mov	r1, r9
 800ca08:	f7f4 f850 	bl	8000aac <__aeabi_dcmplt>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	f43f af35 	beq.w	800c87c <_dtoa_r+0x464>
 800ca12:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ca14:	1e6b      	subs	r3, r5, #1
 800ca16:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca18:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ca1c:	2b30      	cmp	r3, #48	; 0x30
 800ca1e:	d0f8      	beq.n	800ca12 <_dtoa_r+0x5fa>
 800ca20:	9700      	str	r7, [sp, #0]
 800ca22:	e049      	b.n	800cab8 <_dtoa_r+0x6a0>
 800ca24:	4b05      	ldr	r3, [pc, #20]	; (800ca3c <_dtoa_r+0x624>)
 800ca26:	f7f3 fdcf 	bl	80005c8 <__aeabi_dmul>
 800ca2a:	4680      	mov	r8, r0
 800ca2c:	4689      	mov	r9, r1
 800ca2e:	e7bd      	b.n	800c9ac <_dtoa_r+0x594>
 800ca30:	0800f1f0 	.word	0x0800f1f0
 800ca34:	0800f1c8 	.word	0x0800f1c8
 800ca38:	3ff00000 	.word	0x3ff00000
 800ca3c:	40240000 	.word	0x40240000
 800ca40:	401c0000 	.word	0x401c0000
 800ca44:	40140000 	.word	0x40140000
 800ca48:	3fe00000 	.word	0x3fe00000
 800ca4c:	9d01      	ldr	r5, [sp, #4]
 800ca4e:	4656      	mov	r6, sl
 800ca50:	465f      	mov	r7, fp
 800ca52:	4642      	mov	r2, r8
 800ca54:	464b      	mov	r3, r9
 800ca56:	4630      	mov	r0, r6
 800ca58:	4639      	mov	r1, r7
 800ca5a:	f7f3 fedf 	bl	800081c <__aeabi_ddiv>
 800ca5e:	f7f4 f863 	bl	8000b28 <__aeabi_d2iz>
 800ca62:	4682      	mov	sl, r0
 800ca64:	f7f3 fd46 	bl	80004f4 <__aeabi_i2d>
 800ca68:	4642      	mov	r2, r8
 800ca6a:	464b      	mov	r3, r9
 800ca6c:	f7f3 fdac 	bl	80005c8 <__aeabi_dmul>
 800ca70:	4602      	mov	r2, r0
 800ca72:	460b      	mov	r3, r1
 800ca74:	4630      	mov	r0, r6
 800ca76:	4639      	mov	r1, r7
 800ca78:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ca7c:	f7f3 fbec 	bl	8000258 <__aeabi_dsub>
 800ca80:	f805 6b01 	strb.w	r6, [r5], #1
 800ca84:	9e01      	ldr	r6, [sp, #4]
 800ca86:	9f03      	ldr	r7, [sp, #12]
 800ca88:	1bae      	subs	r6, r5, r6
 800ca8a:	42b7      	cmp	r7, r6
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	460b      	mov	r3, r1
 800ca90:	d135      	bne.n	800cafe <_dtoa_r+0x6e6>
 800ca92:	f7f3 fbe3 	bl	800025c <__adddf3>
 800ca96:	4642      	mov	r2, r8
 800ca98:	464b      	mov	r3, r9
 800ca9a:	4606      	mov	r6, r0
 800ca9c:	460f      	mov	r7, r1
 800ca9e:	f7f4 f823 	bl	8000ae8 <__aeabi_dcmpgt>
 800caa2:	b9d0      	cbnz	r0, 800cada <_dtoa_r+0x6c2>
 800caa4:	4642      	mov	r2, r8
 800caa6:	464b      	mov	r3, r9
 800caa8:	4630      	mov	r0, r6
 800caaa:	4639      	mov	r1, r7
 800caac:	f7f3 fff4 	bl	8000a98 <__aeabi_dcmpeq>
 800cab0:	b110      	cbz	r0, 800cab8 <_dtoa_r+0x6a0>
 800cab2:	f01a 0f01 	tst.w	sl, #1
 800cab6:	d110      	bne.n	800cada <_dtoa_r+0x6c2>
 800cab8:	4620      	mov	r0, r4
 800caba:	ee18 1a10 	vmov	r1, s16
 800cabe:	f000 fd05 	bl	800d4cc <_Bfree>
 800cac2:	2300      	movs	r3, #0
 800cac4:	9800      	ldr	r0, [sp, #0]
 800cac6:	702b      	strb	r3, [r5, #0]
 800cac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800caca:	3001      	adds	r0, #1
 800cacc:	6018      	str	r0, [r3, #0]
 800cace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	f43f acf1 	beq.w	800c4b8 <_dtoa_r+0xa0>
 800cad6:	601d      	str	r5, [r3, #0]
 800cad8:	e4ee      	b.n	800c4b8 <_dtoa_r+0xa0>
 800cada:	9f00      	ldr	r7, [sp, #0]
 800cadc:	462b      	mov	r3, r5
 800cade:	461d      	mov	r5, r3
 800cae0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cae4:	2a39      	cmp	r2, #57	; 0x39
 800cae6:	d106      	bne.n	800caf6 <_dtoa_r+0x6de>
 800cae8:	9a01      	ldr	r2, [sp, #4]
 800caea:	429a      	cmp	r2, r3
 800caec:	d1f7      	bne.n	800cade <_dtoa_r+0x6c6>
 800caee:	9901      	ldr	r1, [sp, #4]
 800caf0:	2230      	movs	r2, #48	; 0x30
 800caf2:	3701      	adds	r7, #1
 800caf4:	700a      	strb	r2, [r1, #0]
 800caf6:	781a      	ldrb	r2, [r3, #0]
 800caf8:	3201      	adds	r2, #1
 800cafa:	701a      	strb	r2, [r3, #0]
 800cafc:	e790      	b.n	800ca20 <_dtoa_r+0x608>
 800cafe:	4ba6      	ldr	r3, [pc, #664]	; (800cd98 <_dtoa_r+0x980>)
 800cb00:	2200      	movs	r2, #0
 800cb02:	f7f3 fd61 	bl	80005c8 <__aeabi_dmul>
 800cb06:	2200      	movs	r2, #0
 800cb08:	2300      	movs	r3, #0
 800cb0a:	4606      	mov	r6, r0
 800cb0c:	460f      	mov	r7, r1
 800cb0e:	f7f3 ffc3 	bl	8000a98 <__aeabi_dcmpeq>
 800cb12:	2800      	cmp	r0, #0
 800cb14:	d09d      	beq.n	800ca52 <_dtoa_r+0x63a>
 800cb16:	e7cf      	b.n	800cab8 <_dtoa_r+0x6a0>
 800cb18:	9a08      	ldr	r2, [sp, #32]
 800cb1a:	2a00      	cmp	r2, #0
 800cb1c:	f000 80d7 	beq.w	800ccce <_dtoa_r+0x8b6>
 800cb20:	9a06      	ldr	r2, [sp, #24]
 800cb22:	2a01      	cmp	r2, #1
 800cb24:	f300 80ba 	bgt.w	800cc9c <_dtoa_r+0x884>
 800cb28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb2a:	2a00      	cmp	r2, #0
 800cb2c:	f000 80b2 	beq.w	800cc94 <_dtoa_r+0x87c>
 800cb30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cb34:	9e07      	ldr	r6, [sp, #28]
 800cb36:	9d04      	ldr	r5, [sp, #16]
 800cb38:	9a04      	ldr	r2, [sp, #16]
 800cb3a:	441a      	add	r2, r3
 800cb3c:	9204      	str	r2, [sp, #16]
 800cb3e:	9a05      	ldr	r2, [sp, #20]
 800cb40:	2101      	movs	r1, #1
 800cb42:	441a      	add	r2, r3
 800cb44:	4620      	mov	r0, r4
 800cb46:	9205      	str	r2, [sp, #20]
 800cb48:	f000 fd78 	bl	800d63c <__i2b>
 800cb4c:	4607      	mov	r7, r0
 800cb4e:	2d00      	cmp	r5, #0
 800cb50:	dd0c      	ble.n	800cb6c <_dtoa_r+0x754>
 800cb52:	9b05      	ldr	r3, [sp, #20]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	dd09      	ble.n	800cb6c <_dtoa_r+0x754>
 800cb58:	42ab      	cmp	r3, r5
 800cb5a:	9a04      	ldr	r2, [sp, #16]
 800cb5c:	bfa8      	it	ge
 800cb5e:	462b      	movge	r3, r5
 800cb60:	1ad2      	subs	r2, r2, r3
 800cb62:	9204      	str	r2, [sp, #16]
 800cb64:	9a05      	ldr	r2, [sp, #20]
 800cb66:	1aed      	subs	r5, r5, r3
 800cb68:	1ad3      	subs	r3, r2, r3
 800cb6a:	9305      	str	r3, [sp, #20]
 800cb6c:	9b07      	ldr	r3, [sp, #28]
 800cb6e:	b31b      	cbz	r3, 800cbb8 <_dtoa_r+0x7a0>
 800cb70:	9b08      	ldr	r3, [sp, #32]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	f000 80af 	beq.w	800ccd6 <_dtoa_r+0x8be>
 800cb78:	2e00      	cmp	r6, #0
 800cb7a:	dd13      	ble.n	800cba4 <_dtoa_r+0x78c>
 800cb7c:	4639      	mov	r1, r7
 800cb7e:	4632      	mov	r2, r6
 800cb80:	4620      	mov	r0, r4
 800cb82:	f000 fe1b 	bl	800d7bc <__pow5mult>
 800cb86:	ee18 2a10 	vmov	r2, s16
 800cb8a:	4601      	mov	r1, r0
 800cb8c:	4607      	mov	r7, r0
 800cb8e:	4620      	mov	r0, r4
 800cb90:	f000 fd6a 	bl	800d668 <__multiply>
 800cb94:	ee18 1a10 	vmov	r1, s16
 800cb98:	4680      	mov	r8, r0
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	f000 fc96 	bl	800d4cc <_Bfree>
 800cba0:	ee08 8a10 	vmov	s16, r8
 800cba4:	9b07      	ldr	r3, [sp, #28]
 800cba6:	1b9a      	subs	r2, r3, r6
 800cba8:	d006      	beq.n	800cbb8 <_dtoa_r+0x7a0>
 800cbaa:	ee18 1a10 	vmov	r1, s16
 800cbae:	4620      	mov	r0, r4
 800cbb0:	f000 fe04 	bl	800d7bc <__pow5mult>
 800cbb4:	ee08 0a10 	vmov	s16, r0
 800cbb8:	2101      	movs	r1, #1
 800cbba:	4620      	mov	r0, r4
 800cbbc:	f000 fd3e 	bl	800d63c <__i2b>
 800cbc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	4606      	mov	r6, r0
 800cbc6:	f340 8088 	ble.w	800ccda <_dtoa_r+0x8c2>
 800cbca:	461a      	mov	r2, r3
 800cbcc:	4601      	mov	r1, r0
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f000 fdf4 	bl	800d7bc <__pow5mult>
 800cbd4:	9b06      	ldr	r3, [sp, #24]
 800cbd6:	2b01      	cmp	r3, #1
 800cbd8:	4606      	mov	r6, r0
 800cbda:	f340 8081 	ble.w	800cce0 <_dtoa_r+0x8c8>
 800cbde:	f04f 0800 	mov.w	r8, #0
 800cbe2:	6933      	ldr	r3, [r6, #16]
 800cbe4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cbe8:	6918      	ldr	r0, [r3, #16]
 800cbea:	f000 fcd7 	bl	800d59c <__hi0bits>
 800cbee:	f1c0 0020 	rsb	r0, r0, #32
 800cbf2:	9b05      	ldr	r3, [sp, #20]
 800cbf4:	4418      	add	r0, r3
 800cbf6:	f010 001f 	ands.w	r0, r0, #31
 800cbfa:	f000 8092 	beq.w	800cd22 <_dtoa_r+0x90a>
 800cbfe:	f1c0 0320 	rsb	r3, r0, #32
 800cc02:	2b04      	cmp	r3, #4
 800cc04:	f340 808a 	ble.w	800cd1c <_dtoa_r+0x904>
 800cc08:	f1c0 001c 	rsb	r0, r0, #28
 800cc0c:	9b04      	ldr	r3, [sp, #16]
 800cc0e:	4403      	add	r3, r0
 800cc10:	9304      	str	r3, [sp, #16]
 800cc12:	9b05      	ldr	r3, [sp, #20]
 800cc14:	4403      	add	r3, r0
 800cc16:	4405      	add	r5, r0
 800cc18:	9305      	str	r3, [sp, #20]
 800cc1a:	9b04      	ldr	r3, [sp, #16]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	dd07      	ble.n	800cc30 <_dtoa_r+0x818>
 800cc20:	ee18 1a10 	vmov	r1, s16
 800cc24:	461a      	mov	r2, r3
 800cc26:	4620      	mov	r0, r4
 800cc28:	f000 fe22 	bl	800d870 <__lshift>
 800cc2c:	ee08 0a10 	vmov	s16, r0
 800cc30:	9b05      	ldr	r3, [sp, #20]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	dd05      	ble.n	800cc42 <_dtoa_r+0x82a>
 800cc36:	4631      	mov	r1, r6
 800cc38:	461a      	mov	r2, r3
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f000 fe18 	bl	800d870 <__lshift>
 800cc40:	4606      	mov	r6, r0
 800cc42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d06e      	beq.n	800cd26 <_dtoa_r+0x90e>
 800cc48:	ee18 0a10 	vmov	r0, s16
 800cc4c:	4631      	mov	r1, r6
 800cc4e:	f000 fe7f 	bl	800d950 <__mcmp>
 800cc52:	2800      	cmp	r0, #0
 800cc54:	da67      	bge.n	800cd26 <_dtoa_r+0x90e>
 800cc56:	9b00      	ldr	r3, [sp, #0]
 800cc58:	3b01      	subs	r3, #1
 800cc5a:	ee18 1a10 	vmov	r1, s16
 800cc5e:	9300      	str	r3, [sp, #0]
 800cc60:	220a      	movs	r2, #10
 800cc62:	2300      	movs	r3, #0
 800cc64:	4620      	mov	r0, r4
 800cc66:	f000 fc53 	bl	800d510 <__multadd>
 800cc6a:	9b08      	ldr	r3, [sp, #32]
 800cc6c:	ee08 0a10 	vmov	s16, r0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	f000 81b1 	beq.w	800cfd8 <_dtoa_r+0xbc0>
 800cc76:	2300      	movs	r3, #0
 800cc78:	4639      	mov	r1, r7
 800cc7a:	220a      	movs	r2, #10
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	f000 fc47 	bl	800d510 <__multadd>
 800cc82:	9b02      	ldr	r3, [sp, #8]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	4607      	mov	r7, r0
 800cc88:	f300 808e 	bgt.w	800cda8 <_dtoa_r+0x990>
 800cc8c:	9b06      	ldr	r3, [sp, #24]
 800cc8e:	2b02      	cmp	r3, #2
 800cc90:	dc51      	bgt.n	800cd36 <_dtoa_r+0x91e>
 800cc92:	e089      	b.n	800cda8 <_dtoa_r+0x990>
 800cc94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cc9a:	e74b      	b.n	800cb34 <_dtoa_r+0x71c>
 800cc9c:	9b03      	ldr	r3, [sp, #12]
 800cc9e:	1e5e      	subs	r6, r3, #1
 800cca0:	9b07      	ldr	r3, [sp, #28]
 800cca2:	42b3      	cmp	r3, r6
 800cca4:	bfbf      	itttt	lt
 800cca6:	9b07      	ldrlt	r3, [sp, #28]
 800cca8:	9607      	strlt	r6, [sp, #28]
 800ccaa:	1af2      	sublt	r2, r6, r3
 800ccac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ccae:	bfb6      	itet	lt
 800ccb0:	189b      	addlt	r3, r3, r2
 800ccb2:	1b9e      	subge	r6, r3, r6
 800ccb4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ccb6:	9b03      	ldr	r3, [sp, #12]
 800ccb8:	bfb8      	it	lt
 800ccba:	2600      	movlt	r6, #0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	bfb7      	itett	lt
 800ccc0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ccc4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ccc8:	1a9d      	sublt	r5, r3, r2
 800ccca:	2300      	movlt	r3, #0
 800cccc:	e734      	b.n	800cb38 <_dtoa_r+0x720>
 800ccce:	9e07      	ldr	r6, [sp, #28]
 800ccd0:	9d04      	ldr	r5, [sp, #16]
 800ccd2:	9f08      	ldr	r7, [sp, #32]
 800ccd4:	e73b      	b.n	800cb4e <_dtoa_r+0x736>
 800ccd6:	9a07      	ldr	r2, [sp, #28]
 800ccd8:	e767      	b.n	800cbaa <_dtoa_r+0x792>
 800ccda:	9b06      	ldr	r3, [sp, #24]
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	dc18      	bgt.n	800cd12 <_dtoa_r+0x8fa>
 800cce0:	f1ba 0f00 	cmp.w	sl, #0
 800cce4:	d115      	bne.n	800cd12 <_dtoa_r+0x8fa>
 800cce6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ccea:	b993      	cbnz	r3, 800cd12 <_dtoa_r+0x8fa>
 800ccec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ccf0:	0d1b      	lsrs	r3, r3, #20
 800ccf2:	051b      	lsls	r3, r3, #20
 800ccf4:	b183      	cbz	r3, 800cd18 <_dtoa_r+0x900>
 800ccf6:	9b04      	ldr	r3, [sp, #16]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	9304      	str	r3, [sp, #16]
 800ccfc:	9b05      	ldr	r3, [sp, #20]
 800ccfe:	3301      	adds	r3, #1
 800cd00:	9305      	str	r3, [sp, #20]
 800cd02:	f04f 0801 	mov.w	r8, #1
 800cd06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f47f af6a 	bne.w	800cbe2 <_dtoa_r+0x7ca>
 800cd0e:	2001      	movs	r0, #1
 800cd10:	e76f      	b.n	800cbf2 <_dtoa_r+0x7da>
 800cd12:	f04f 0800 	mov.w	r8, #0
 800cd16:	e7f6      	b.n	800cd06 <_dtoa_r+0x8ee>
 800cd18:	4698      	mov	r8, r3
 800cd1a:	e7f4      	b.n	800cd06 <_dtoa_r+0x8ee>
 800cd1c:	f43f af7d 	beq.w	800cc1a <_dtoa_r+0x802>
 800cd20:	4618      	mov	r0, r3
 800cd22:	301c      	adds	r0, #28
 800cd24:	e772      	b.n	800cc0c <_dtoa_r+0x7f4>
 800cd26:	9b03      	ldr	r3, [sp, #12]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	dc37      	bgt.n	800cd9c <_dtoa_r+0x984>
 800cd2c:	9b06      	ldr	r3, [sp, #24]
 800cd2e:	2b02      	cmp	r3, #2
 800cd30:	dd34      	ble.n	800cd9c <_dtoa_r+0x984>
 800cd32:	9b03      	ldr	r3, [sp, #12]
 800cd34:	9302      	str	r3, [sp, #8]
 800cd36:	9b02      	ldr	r3, [sp, #8]
 800cd38:	b96b      	cbnz	r3, 800cd56 <_dtoa_r+0x93e>
 800cd3a:	4631      	mov	r1, r6
 800cd3c:	2205      	movs	r2, #5
 800cd3e:	4620      	mov	r0, r4
 800cd40:	f000 fbe6 	bl	800d510 <__multadd>
 800cd44:	4601      	mov	r1, r0
 800cd46:	4606      	mov	r6, r0
 800cd48:	ee18 0a10 	vmov	r0, s16
 800cd4c:	f000 fe00 	bl	800d950 <__mcmp>
 800cd50:	2800      	cmp	r0, #0
 800cd52:	f73f adbb 	bgt.w	800c8cc <_dtoa_r+0x4b4>
 800cd56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd58:	9d01      	ldr	r5, [sp, #4]
 800cd5a:	43db      	mvns	r3, r3
 800cd5c:	9300      	str	r3, [sp, #0]
 800cd5e:	f04f 0800 	mov.w	r8, #0
 800cd62:	4631      	mov	r1, r6
 800cd64:	4620      	mov	r0, r4
 800cd66:	f000 fbb1 	bl	800d4cc <_Bfree>
 800cd6a:	2f00      	cmp	r7, #0
 800cd6c:	f43f aea4 	beq.w	800cab8 <_dtoa_r+0x6a0>
 800cd70:	f1b8 0f00 	cmp.w	r8, #0
 800cd74:	d005      	beq.n	800cd82 <_dtoa_r+0x96a>
 800cd76:	45b8      	cmp	r8, r7
 800cd78:	d003      	beq.n	800cd82 <_dtoa_r+0x96a>
 800cd7a:	4641      	mov	r1, r8
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	f000 fba5 	bl	800d4cc <_Bfree>
 800cd82:	4639      	mov	r1, r7
 800cd84:	4620      	mov	r0, r4
 800cd86:	f000 fba1 	bl	800d4cc <_Bfree>
 800cd8a:	e695      	b.n	800cab8 <_dtoa_r+0x6a0>
 800cd8c:	2600      	movs	r6, #0
 800cd8e:	4637      	mov	r7, r6
 800cd90:	e7e1      	b.n	800cd56 <_dtoa_r+0x93e>
 800cd92:	9700      	str	r7, [sp, #0]
 800cd94:	4637      	mov	r7, r6
 800cd96:	e599      	b.n	800c8cc <_dtoa_r+0x4b4>
 800cd98:	40240000 	.word	0x40240000
 800cd9c:	9b08      	ldr	r3, [sp, #32]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	f000 80ca 	beq.w	800cf38 <_dtoa_r+0xb20>
 800cda4:	9b03      	ldr	r3, [sp, #12]
 800cda6:	9302      	str	r3, [sp, #8]
 800cda8:	2d00      	cmp	r5, #0
 800cdaa:	dd05      	ble.n	800cdb8 <_dtoa_r+0x9a0>
 800cdac:	4639      	mov	r1, r7
 800cdae:	462a      	mov	r2, r5
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	f000 fd5d 	bl	800d870 <__lshift>
 800cdb6:	4607      	mov	r7, r0
 800cdb8:	f1b8 0f00 	cmp.w	r8, #0
 800cdbc:	d05b      	beq.n	800ce76 <_dtoa_r+0xa5e>
 800cdbe:	6879      	ldr	r1, [r7, #4]
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	f000 fb43 	bl	800d44c <_Balloc>
 800cdc6:	4605      	mov	r5, r0
 800cdc8:	b928      	cbnz	r0, 800cdd6 <_dtoa_r+0x9be>
 800cdca:	4b87      	ldr	r3, [pc, #540]	; (800cfe8 <_dtoa_r+0xbd0>)
 800cdcc:	4602      	mov	r2, r0
 800cdce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cdd2:	f7ff bb3b 	b.w	800c44c <_dtoa_r+0x34>
 800cdd6:	693a      	ldr	r2, [r7, #16]
 800cdd8:	3202      	adds	r2, #2
 800cdda:	0092      	lsls	r2, r2, #2
 800cddc:	f107 010c 	add.w	r1, r7, #12
 800cde0:	300c      	adds	r0, #12
 800cde2:	f7fe fc8d 	bl	800b700 <memcpy>
 800cde6:	2201      	movs	r2, #1
 800cde8:	4629      	mov	r1, r5
 800cdea:	4620      	mov	r0, r4
 800cdec:	f000 fd40 	bl	800d870 <__lshift>
 800cdf0:	9b01      	ldr	r3, [sp, #4]
 800cdf2:	f103 0901 	add.w	r9, r3, #1
 800cdf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800cdfa:	4413      	add	r3, r2
 800cdfc:	9305      	str	r3, [sp, #20]
 800cdfe:	f00a 0301 	and.w	r3, sl, #1
 800ce02:	46b8      	mov	r8, r7
 800ce04:	9304      	str	r3, [sp, #16]
 800ce06:	4607      	mov	r7, r0
 800ce08:	4631      	mov	r1, r6
 800ce0a:	ee18 0a10 	vmov	r0, s16
 800ce0e:	f7ff fa75 	bl	800c2fc <quorem>
 800ce12:	4641      	mov	r1, r8
 800ce14:	9002      	str	r0, [sp, #8]
 800ce16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ce1a:	ee18 0a10 	vmov	r0, s16
 800ce1e:	f000 fd97 	bl	800d950 <__mcmp>
 800ce22:	463a      	mov	r2, r7
 800ce24:	9003      	str	r0, [sp, #12]
 800ce26:	4631      	mov	r1, r6
 800ce28:	4620      	mov	r0, r4
 800ce2a:	f000 fdad 	bl	800d988 <__mdiff>
 800ce2e:	68c2      	ldr	r2, [r0, #12]
 800ce30:	f109 3bff 	add.w	fp, r9, #4294967295
 800ce34:	4605      	mov	r5, r0
 800ce36:	bb02      	cbnz	r2, 800ce7a <_dtoa_r+0xa62>
 800ce38:	4601      	mov	r1, r0
 800ce3a:	ee18 0a10 	vmov	r0, s16
 800ce3e:	f000 fd87 	bl	800d950 <__mcmp>
 800ce42:	4602      	mov	r2, r0
 800ce44:	4629      	mov	r1, r5
 800ce46:	4620      	mov	r0, r4
 800ce48:	9207      	str	r2, [sp, #28]
 800ce4a:	f000 fb3f 	bl	800d4cc <_Bfree>
 800ce4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ce52:	ea43 0102 	orr.w	r1, r3, r2
 800ce56:	9b04      	ldr	r3, [sp, #16]
 800ce58:	430b      	orrs	r3, r1
 800ce5a:	464d      	mov	r5, r9
 800ce5c:	d10f      	bne.n	800ce7e <_dtoa_r+0xa66>
 800ce5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ce62:	d02a      	beq.n	800ceba <_dtoa_r+0xaa2>
 800ce64:	9b03      	ldr	r3, [sp, #12]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	dd02      	ble.n	800ce70 <_dtoa_r+0xa58>
 800ce6a:	9b02      	ldr	r3, [sp, #8]
 800ce6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ce70:	f88b a000 	strb.w	sl, [fp]
 800ce74:	e775      	b.n	800cd62 <_dtoa_r+0x94a>
 800ce76:	4638      	mov	r0, r7
 800ce78:	e7ba      	b.n	800cdf0 <_dtoa_r+0x9d8>
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	e7e2      	b.n	800ce44 <_dtoa_r+0xa2c>
 800ce7e:	9b03      	ldr	r3, [sp, #12]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	db04      	blt.n	800ce8e <_dtoa_r+0xa76>
 800ce84:	9906      	ldr	r1, [sp, #24]
 800ce86:	430b      	orrs	r3, r1
 800ce88:	9904      	ldr	r1, [sp, #16]
 800ce8a:	430b      	orrs	r3, r1
 800ce8c:	d122      	bne.n	800ced4 <_dtoa_r+0xabc>
 800ce8e:	2a00      	cmp	r2, #0
 800ce90:	ddee      	ble.n	800ce70 <_dtoa_r+0xa58>
 800ce92:	ee18 1a10 	vmov	r1, s16
 800ce96:	2201      	movs	r2, #1
 800ce98:	4620      	mov	r0, r4
 800ce9a:	f000 fce9 	bl	800d870 <__lshift>
 800ce9e:	4631      	mov	r1, r6
 800cea0:	ee08 0a10 	vmov	s16, r0
 800cea4:	f000 fd54 	bl	800d950 <__mcmp>
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	dc03      	bgt.n	800ceb4 <_dtoa_r+0xa9c>
 800ceac:	d1e0      	bne.n	800ce70 <_dtoa_r+0xa58>
 800ceae:	f01a 0f01 	tst.w	sl, #1
 800ceb2:	d0dd      	beq.n	800ce70 <_dtoa_r+0xa58>
 800ceb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ceb8:	d1d7      	bne.n	800ce6a <_dtoa_r+0xa52>
 800ceba:	2339      	movs	r3, #57	; 0x39
 800cebc:	f88b 3000 	strb.w	r3, [fp]
 800cec0:	462b      	mov	r3, r5
 800cec2:	461d      	mov	r5, r3
 800cec4:	3b01      	subs	r3, #1
 800cec6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ceca:	2a39      	cmp	r2, #57	; 0x39
 800cecc:	d071      	beq.n	800cfb2 <_dtoa_r+0xb9a>
 800cece:	3201      	adds	r2, #1
 800ced0:	701a      	strb	r2, [r3, #0]
 800ced2:	e746      	b.n	800cd62 <_dtoa_r+0x94a>
 800ced4:	2a00      	cmp	r2, #0
 800ced6:	dd07      	ble.n	800cee8 <_dtoa_r+0xad0>
 800ced8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cedc:	d0ed      	beq.n	800ceba <_dtoa_r+0xaa2>
 800cede:	f10a 0301 	add.w	r3, sl, #1
 800cee2:	f88b 3000 	strb.w	r3, [fp]
 800cee6:	e73c      	b.n	800cd62 <_dtoa_r+0x94a>
 800cee8:	9b05      	ldr	r3, [sp, #20]
 800ceea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ceee:	4599      	cmp	r9, r3
 800cef0:	d047      	beq.n	800cf82 <_dtoa_r+0xb6a>
 800cef2:	ee18 1a10 	vmov	r1, s16
 800cef6:	2300      	movs	r3, #0
 800cef8:	220a      	movs	r2, #10
 800cefa:	4620      	mov	r0, r4
 800cefc:	f000 fb08 	bl	800d510 <__multadd>
 800cf00:	45b8      	cmp	r8, r7
 800cf02:	ee08 0a10 	vmov	s16, r0
 800cf06:	f04f 0300 	mov.w	r3, #0
 800cf0a:	f04f 020a 	mov.w	r2, #10
 800cf0e:	4641      	mov	r1, r8
 800cf10:	4620      	mov	r0, r4
 800cf12:	d106      	bne.n	800cf22 <_dtoa_r+0xb0a>
 800cf14:	f000 fafc 	bl	800d510 <__multadd>
 800cf18:	4680      	mov	r8, r0
 800cf1a:	4607      	mov	r7, r0
 800cf1c:	f109 0901 	add.w	r9, r9, #1
 800cf20:	e772      	b.n	800ce08 <_dtoa_r+0x9f0>
 800cf22:	f000 faf5 	bl	800d510 <__multadd>
 800cf26:	4639      	mov	r1, r7
 800cf28:	4680      	mov	r8, r0
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	220a      	movs	r2, #10
 800cf2e:	4620      	mov	r0, r4
 800cf30:	f000 faee 	bl	800d510 <__multadd>
 800cf34:	4607      	mov	r7, r0
 800cf36:	e7f1      	b.n	800cf1c <_dtoa_r+0xb04>
 800cf38:	9b03      	ldr	r3, [sp, #12]
 800cf3a:	9302      	str	r3, [sp, #8]
 800cf3c:	9d01      	ldr	r5, [sp, #4]
 800cf3e:	ee18 0a10 	vmov	r0, s16
 800cf42:	4631      	mov	r1, r6
 800cf44:	f7ff f9da 	bl	800c2fc <quorem>
 800cf48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cf4c:	9b01      	ldr	r3, [sp, #4]
 800cf4e:	f805 ab01 	strb.w	sl, [r5], #1
 800cf52:	1aea      	subs	r2, r5, r3
 800cf54:	9b02      	ldr	r3, [sp, #8]
 800cf56:	4293      	cmp	r3, r2
 800cf58:	dd09      	ble.n	800cf6e <_dtoa_r+0xb56>
 800cf5a:	ee18 1a10 	vmov	r1, s16
 800cf5e:	2300      	movs	r3, #0
 800cf60:	220a      	movs	r2, #10
 800cf62:	4620      	mov	r0, r4
 800cf64:	f000 fad4 	bl	800d510 <__multadd>
 800cf68:	ee08 0a10 	vmov	s16, r0
 800cf6c:	e7e7      	b.n	800cf3e <_dtoa_r+0xb26>
 800cf6e:	9b02      	ldr	r3, [sp, #8]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	bfc8      	it	gt
 800cf74:	461d      	movgt	r5, r3
 800cf76:	9b01      	ldr	r3, [sp, #4]
 800cf78:	bfd8      	it	le
 800cf7a:	2501      	movle	r5, #1
 800cf7c:	441d      	add	r5, r3
 800cf7e:	f04f 0800 	mov.w	r8, #0
 800cf82:	ee18 1a10 	vmov	r1, s16
 800cf86:	2201      	movs	r2, #1
 800cf88:	4620      	mov	r0, r4
 800cf8a:	f000 fc71 	bl	800d870 <__lshift>
 800cf8e:	4631      	mov	r1, r6
 800cf90:	ee08 0a10 	vmov	s16, r0
 800cf94:	f000 fcdc 	bl	800d950 <__mcmp>
 800cf98:	2800      	cmp	r0, #0
 800cf9a:	dc91      	bgt.n	800cec0 <_dtoa_r+0xaa8>
 800cf9c:	d102      	bne.n	800cfa4 <_dtoa_r+0xb8c>
 800cf9e:	f01a 0f01 	tst.w	sl, #1
 800cfa2:	d18d      	bne.n	800cec0 <_dtoa_r+0xaa8>
 800cfa4:	462b      	mov	r3, r5
 800cfa6:	461d      	mov	r5, r3
 800cfa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cfac:	2a30      	cmp	r2, #48	; 0x30
 800cfae:	d0fa      	beq.n	800cfa6 <_dtoa_r+0xb8e>
 800cfb0:	e6d7      	b.n	800cd62 <_dtoa_r+0x94a>
 800cfb2:	9a01      	ldr	r2, [sp, #4]
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d184      	bne.n	800cec2 <_dtoa_r+0xaaa>
 800cfb8:	9b00      	ldr	r3, [sp, #0]
 800cfba:	3301      	adds	r3, #1
 800cfbc:	9300      	str	r3, [sp, #0]
 800cfbe:	2331      	movs	r3, #49	; 0x31
 800cfc0:	7013      	strb	r3, [r2, #0]
 800cfc2:	e6ce      	b.n	800cd62 <_dtoa_r+0x94a>
 800cfc4:	4b09      	ldr	r3, [pc, #36]	; (800cfec <_dtoa_r+0xbd4>)
 800cfc6:	f7ff ba95 	b.w	800c4f4 <_dtoa_r+0xdc>
 800cfca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	f47f aa6e 	bne.w	800c4ae <_dtoa_r+0x96>
 800cfd2:	4b07      	ldr	r3, [pc, #28]	; (800cff0 <_dtoa_r+0xbd8>)
 800cfd4:	f7ff ba8e 	b.w	800c4f4 <_dtoa_r+0xdc>
 800cfd8:	9b02      	ldr	r3, [sp, #8]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	dcae      	bgt.n	800cf3c <_dtoa_r+0xb24>
 800cfde:	9b06      	ldr	r3, [sp, #24]
 800cfe0:	2b02      	cmp	r3, #2
 800cfe2:	f73f aea8 	bgt.w	800cd36 <_dtoa_r+0x91e>
 800cfe6:	e7a9      	b.n	800cf3c <_dtoa_r+0xb24>
 800cfe8:	0800f0f7 	.word	0x0800f0f7
 800cfec:	0800f054 	.word	0x0800f054
 800cff0:	0800f078 	.word	0x0800f078

0800cff4 <__sflush_r>:
 800cff4:	898a      	ldrh	r2, [r1, #12]
 800cff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cffa:	4605      	mov	r5, r0
 800cffc:	0710      	lsls	r0, r2, #28
 800cffe:	460c      	mov	r4, r1
 800d000:	d458      	bmi.n	800d0b4 <__sflush_r+0xc0>
 800d002:	684b      	ldr	r3, [r1, #4]
 800d004:	2b00      	cmp	r3, #0
 800d006:	dc05      	bgt.n	800d014 <__sflush_r+0x20>
 800d008:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	dc02      	bgt.n	800d014 <__sflush_r+0x20>
 800d00e:	2000      	movs	r0, #0
 800d010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d016:	2e00      	cmp	r6, #0
 800d018:	d0f9      	beq.n	800d00e <__sflush_r+0x1a>
 800d01a:	2300      	movs	r3, #0
 800d01c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d020:	682f      	ldr	r7, [r5, #0]
 800d022:	602b      	str	r3, [r5, #0]
 800d024:	d032      	beq.n	800d08c <__sflush_r+0x98>
 800d026:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d028:	89a3      	ldrh	r3, [r4, #12]
 800d02a:	075a      	lsls	r2, r3, #29
 800d02c:	d505      	bpl.n	800d03a <__sflush_r+0x46>
 800d02e:	6863      	ldr	r3, [r4, #4]
 800d030:	1ac0      	subs	r0, r0, r3
 800d032:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d034:	b10b      	cbz	r3, 800d03a <__sflush_r+0x46>
 800d036:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d038:	1ac0      	subs	r0, r0, r3
 800d03a:	2300      	movs	r3, #0
 800d03c:	4602      	mov	r2, r0
 800d03e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d040:	6a21      	ldr	r1, [r4, #32]
 800d042:	4628      	mov	r0, r5
 800d044:	47b0      	blx	r6
 800d046:	1c43      	adds	r3, r0, #1
 800d048:	89a3      	ldrh	r3, [r4, #12]
 800d04a:	d106      	bne.n	800d05a <__sflush_r+0x66>
 800d04c:	6829      	ldr	r1, [r5, #0]
 800d04e:	291d      	cmp	r1, #29
 800d050:	d82c      	bhi.n	800d0ac <__sflush_r+0xb8>
 800d052:	4a2a      	ldr	r2, [pc, #168]	; (800d0fc <__sflush_r+0x108>)
 800d054:	40ca      	lsrs	r2, r1
 800d056:	07d6      	lsls	r6, r2, #31
 800d058:	d528      	bpl.n	800d0ac <__sflush_r+0xb8>
 800d05a:	2200      	movs	r2, #0
 800d05c:	6062      	str	r2, [r4, #4]
 800d05e:	04d9      	lsls	r1, r3, #19
 800d060:	6922      	ldr	r2, [r4, #16]
 800d062:	6022      	str	r2, [r4, #0]
 800d064:	d504      	bpl.n	800d070 <__sflush_r+0x7c>
 800d066:	1c42      	adds	r2, r0, #1
 800d068:	d101      	bne.n	800d06e <__sflush_r+0x7a>
 800d06a:	682b      	ldr	r3, [r5, #0]
 800d06c:	b903      	cbnz	r3, 800d070 <__sflush_r+0x7c>
 800d06e:	6560      	str	r0, [r4, #84]	; 0x54
 800d070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d072:	602f      	str	r7, [r5, #0]
 800d074:	2900      	cmp	r1, #0
 800d076:	d0ca      	beq.n	800d00e <__sflush_r+0x1a>
 800d078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d07c:	4299      	cmp	r1, r3
 800d07e:	d002      	beq.n	800d086 <__sflush_r+0x92>
 800d080:	4628      	mov	r0, r5
 800d082:	f000 fd7d 	bl	800db80 <_free_r>
 800d086:	2000      	movs	r0, #0
 800d088:	6360      	str	r0, [r4, #52]	; 0x34
 800d08a:	e7c1      	b.n	800d010 <__sflush_r+0x1c>
 800d08c:	6a21      	ldr	r1, [r4, #32]
 800d08e:	2301      	movs	r3, #1
 800d090:	4628      	mov	r0, r5
 800d092:	47b0      	blx	r6
 800d094:	1c41      	adds	r1, r0, #1
 800d096:	d1c7      	bne.n	800d028 <__sflush_r+0x34>
 800d098:	682b      	ldr	r3, [r5, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d0c4      	beq.n	800d028 <__sflush_r+0x34>
 800d09e:	2b1d      	cmp	r3, #29
 800d0a0:	d001      	beq.n	800d0a6 <__sflush_r+0xb2>
 800d0a2:	2b16      	cmp	r3, #22
 800d0a4:	d101      	bne.n	800d0aa <__sflush_r+0xb6>
 800d0a6:	602f      	str	r7, [r5, #0]
 800d0a8:	e7b1      	b.n	800d00e <__sflush_r+0x1a>
 800d0aa:	89a3      	ldrh	r3, [r4, #12]
 800d0ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0b0:	81a3      	strh	r3, [r4, #12]
 800d0b2:	e7ad      	b.n	800d010 <__sflush_r+0x1c>
 800d0b4:	690f      	ldr	r7, [r1, #16]
 800d0b6:	2f00      	cmp	r7, #0
 800d0b8:	d0a9      	beq.n	800d00e <__sflush_r+0x1a>
 800d0ba:	0793      	lsls	r3, r2, #30
 800d0bc:	680e      	ldr	r6, [r1, #0]
 800d0be:	bf08      	it	eq
 800d0c0:	694b      	ldreq	r3, [r1, #20]
 800d0c2:	600f      	str	r7, [r1, #0]
 800d0c4:	bf18      	it	ne
 800d0c6:	2300      	movne	r3, #0
 800d0c8:	eba6 0807 	sub.w	r8, r6, r7
 800d0cc:	608b      	str	r3, [r1, #8]
 800d0ce:	f1b8 0f00 	cmp.w	r8, #0
 800d0d2:	dd9c      	ble.n	800d00e <__sflush_r+0x1a>
 800d0d4:	6a21      	ldr	r1, [r4, #32]
 800d0d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d0d8:	4643      	mov	r3, r8
 800d0da:	463a      	mov	r2, r7
 800d0dc:	4628      	mov	r0, r5
 800d0de:	47b0      	blx	r6
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	dc06      	bgt.n	800d0f2 <__sflush_r+0xfe>
 800d0e4:	89a3      	ldrh	r3, [r4, #12]
 800d0e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0ea:	81a3      	strh	r3, [r4, #12]
 800d0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f0:	e78e      	b.n	800d010 <__sflush_r+0x1c>
 800d0f2:	4407      	add	r7, r0
 800d0f4:	eba8 0800 	sub.w	r8, r8, r0
 800d0f8:	e7e9      	b.n	800d0ce <__sflush_r+0xda>
 800d0fa:	bf00      	nop
 800d0fc:	20400001 	.word	0x20400001

0800d100 <_fflush_r>:
 800d100:	b538      	push	{r3, r4, r5, lr}
 800d102:	690b      	ldr	r3, [r1, #16]
 800d104:	4605      	mov	r5, r0
 800d106:	460c      	mov	r4, r1
 800d108:	b913      	cbnz	r3, 800d110 <_fflush_r+0x10>
 800d10a:	2500      	movs	r5, #0
 800d10c:	4628      	mov	r0, r5
 800d10e:	bd38      	pop	{r3, r4, r5, pc}
 800d110:	b118      	cbz	r0, 800d11a <_fflush_r+0x1a>
 800d112:	6983      	ldr	r3, [r0, #24]
 800d114:	b90b      	cbnz	r3, 800d11a <_fflush_r+0x1a>
 800d116:	f000 f887 	bl	800d228 <__sinit>
 800d11a:	4b14      	ldr	r3, [pc, #80]	; (800d16c <_fflush_r+0x6c>)
 800d11c:	429c      	cmp	r4, r3
 800d11e:	d11b      	bne.n	800d158 <_fflush_r+0x58>
 800d120:	686c      	ldr	r4, [r5, #4]
 800d122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d0ef      	beq.n	800d10a <_fflush_r+0xa>
 800d12a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d12c:	07d0      	lsls	r0, r2, #31
 800d12e:	d404      	bmi.n	800d13a <_fflush_r+0x3a>
 800d130:	0599      	lsls	r1, r3, #22
 800d132:	d402      	bmi.n	800d13a <_fflush_r+0x3a>
 800d134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d136:	f000 f91a 	bl	800d36e <__retarget_lock_acquire_recursive>
 800d13a:	4628      	mov	r0, r5
 800d13c:	4621      	mov	r1, r4
 800d13e:	f7ff ff59 	bl	800cff4 <__sflush_r>
 800d142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d144:	07da      	lsls	r2, r3, #31
 800d146:	4605      	mov	r5, r0
 800d148:	d4e0      	bmi.n	800d10c <_fflush_r+0xc>
 800d14a:	89a3      	ldrh	r3, [r4, #12]
 800d14c:	059b      	lsls	r3, r3, #22
 800d14e:	d4dd      	bmi.n	800d10c <_fflush_r+0xc>
 800d150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d152:	f000 f90d 	bl	800d370 <__retarget_lock_release_recursive>
 800d156:	e7d9      	b.n	800d10c <_fflush_r+0xc>
 800d158:	4b05      	ldr	r3, [pc, #20]	; (800d170 <_fflush_r+0x70>)
 800d15a:	429c      	cmp	r4, r3
 800d15c:	d101      	bne.n	800d162 <_fflush_r+0x62>
 800d15e:	68ac      	ldr	r4, [r5, #8]
 800d160:	e7df      	b.n	800d122 <_fflush_r+0x22>
 800d162:	4b04      	ldr	r3, [pc, #16]	; (800d174 <_fflush_r+0x74>)
 800d164:	429c      	cmp	r4, r3
 800d166:	bf08      	it	eq
 800d168:	68ec      	ldreq	r4, [r5, #12]
 800d16a:	e7da      	b.n	800d122 <_fflush_r+0x22>
 800d16c:	0800f128 	.word	0x0800f128
 800d170:	0800f148 	.word	0x0800f148
 800d174:	0800f108 	.word	0x0800f108

0800d178 <std>:
 800d178:	2300      	movs	r3, #0
 800d17a:	b510      	push	{r4, lr}
 800d17c:	4604      	mov	r4, r0
 800d17e:	e9c0 3300 	strd	r3, r3, [r0]
 800d182:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d186:	6083      	str	r3, [r0, #8]
 800d188:	8181      	strh	r1, [r0, #12]
 800d18a:	6643      	str	r3, [r0, #100]	; 0x64
 800d18c:	81c2      	strh	r2, [r0, #14]
 800d18e:	6183      	str	r3, [r0, #24]
 800d190:	4619      	mov	r1, r3
 800d192:	2208      	movs	r2, #8
 800d194:	305c      	adds	r0, #92	; 0x5c
 800d196:	f7fe fac1 	bl	800b71c <memset>
 800d19a:	4b05      	ldr	r3, [pc, #20]	; (800d1b0 <std+0x38>)
 800d19c:	6263      	str	r3, [r4, #36]	; 0x24
 800d19e:	4b05      	ldr	r3, [pc, #20]	; (800d1b4 <std+0x3c>)
 800d1a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d1a2:	4b05      	ldr	r3, [pc, #20]	; (800d1b8 <std+0x40>)
 800d1a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d1a6:	4b05      	ldr	r3, [pc, #20]	; (800d1bc <std+0x44>)
 800d1a8:	6224      	str	r4, [r4, #32]
 800d1aa:	6323      	str	r3, [r4, #48]	; 0x30
 800d1ac:	bd10      	pop	{r4, pc}
 800d1ae:	bf00      	nop
 800d1b0:	0800e2cd 	.word	0x0800e2cd
 800d1b4:	0800e2ef 	.word	0x0800e2ef
 800d1b8:	0800e327 	.word	0x0800e327
 800d1bc:	0800e34b 	.word	0x0800e34b

0800d1c0 <_cleanup_r>:
 800d1c0:	4901      	ldr	r1, [pc, #4]	; (800d1c8 <_cleanup_r+0x8>)
 800d1c2:	f000 b8af 	b.w	800d324 <_fwalk_reent>
 800d1c6:	bf00      	nop
 800d1c8:	0800d101 	.word	0x0800d101

0800d1cc <__sfmoreglue>:
 800d1cc:	b570      	push	{r4, r5, r6, lr}
 800d1ce:	2268      	movs	r2, #104	; 0x68
 800d1d0:	1e4d      	subs	r5, r1, #1
 800d1d2:	4355      	muls	r5, r2
 800d1d4:	460e      	mov	r6, r1
 800d1d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d1da:	f000 fd3d 	bl	800dc58 <_malloc_r>
 800d1de:	4604      	mov	r4, r0
 800d1e0:	b140      	cbz	r0, 800d1f4 <__sfmoreglue+0x28>
 800d1e2:	2100      	movs	r1, #0
 800d1e4:	e9c0 1600 	strd	r1, r6, [r0]
 800d1e8:	300c      	adds	r0, #12
 800d1ea:	60a0      	str	r0, [r4, #8]
 800d1ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d1f0:	f7fe fa94 	bl	800b71c <memset>
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	bd70      	pop	{r4, r5, r6, pc}

0800d1f8 <__sfp_lock_acquire>:
 800d1f8:	4801      	ldr	r0, [pc, #4]	; (800d200 <__sfp_lock_acquire+0x8>)
 800d1fa:	f000 b8b8 	b.w	800d36e <__retarget_lock_acquire_recursive>
 800d1fe:	bf00      	nop
 800d200:	200017a9 	.word	0x200017a9

0800d204 <__sfp_lock_release>:
 800d204:	4801      	ldr	r0, [pc, #4]	; (800d20c <__sfp_lock_release+0x8>)
 800d206:	f000 b8b3 	b.w	800d370 <__retarget_lock_release_recursive>
 800d20a:	bf00      	nop
 800d20c:	200017a9 	.word	0x200017a9

0800d210 <__sinit_lock_acquire>:
 800d210:	4801      	ldr	r0, [pc, #4]	; (800d218 <__sinit_lock_acquire+0x8>)
 800d212:	f000 b8ac 	b.w	800d36e <__retarget_lock_acquire_recursive>
 800d216:	bf00      	nop
 800d218:	200017aa 	.word	0x200017aa

0800d21c <__sinit_lock_release>:
 800d21c:	4801      	ldr	r0, [pc, #4]	; (800d224 <__sinit_lock_release+0x8>)
 800d21e:	f000 b8a7 	b.w	800d370 <__retarget_lock_release_recursive>
 800d222:	bf00      	nop
 800d224:	200017aa 	.word	0x200017aa

0800d228 <__sinit>:
 800d228:	b510      	push	{r4, lr}
 800d22a:	4604      	mov	r4, r0
 800d22c:	f7ff fff0 	bl	800d210 <__sinit_lock_acquire>
 800d230:	69a3      	ldr	r3, [r4, #24]
 800d232:	b11b      	cbz	r3, 800d23c <__sinit+0x14>
 800d234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d238:	f7ff bff0 	b.w	800d21c <__sinit_lock_release>
 800d23c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d240:	6523      	str	r3, [r4, #80]	; 0x50
 800d242:	4b13      	ldr	r3, [pc, #76]	; (800d290 <__sinit+0x68>)
 800d244:	4a13      	ldr	r2, [pc, #76]	; (800d294 <__sinit+0x6c>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	62a2      	str	r2, [r4, #40]	; 0x28
 800d24a:	42a3      	cmp	r3, r4
 800d24c:	bf04      	itt	eq
 800d24e:	2301      	moveq	r3, #1
 800d250:	61a3      	streq	r3, [r4, #24]
 800d252:	4620      	mov	r0, r4
 800d254:	f000 f820 	bl	800d298 <__sfp>
 800d258:	6060      	str	r0, [r4, #4]
 800d25a:	4620      	mov	r0, r4
 800d25c:	f000 f81c 	bl	800d298 <__sfp>
 800d260:	60a0      	str	r0, [r4, #8]
 800d262:	4620      	mov	r0, r4
 800d264:	f000 f818 	bl	800d298 <__sfp>
 800d268:	2200      	movs	r2, #0
 800d26a:	60e0      	str	r0, [r4, #12]
 800d26c:	2104      	movs	r1, #4
 800d26e:	6860      	ldr	r0, [r4, #4]
 800d270:	f7ff ff82 	bl	800d178 <std>
 800d274:	68a0      	ldr	r0, [r4, #8]
 800d276:	2201      	movs	r2, #1
 800d278:	2109      	movs	r1, #9
 800d27a:	f7ff ff7d 	bl	800d178 <std>
 800d27e:	68e0      	ldr	r0, [r4, #12]
 800d280:	2202      	movs	r2, #2
 800d282:	2112      	movs	r1, #18
 800d284:	f7ff ff78 	bl	800d178 <std>
 800d288:	2301      	movs	r3, #1
 800d28a:	61a3      	str	r3, [r4, #24]
 800d28c:	e7d2      	b.n	800d234 <__sinit+0xc>
 800d28e:	bf00      	nop
 800d290:	0800f040 	.word	0x0800f040
 800d294:	0800d1c1 	.word	0x0800d1c1

0800d298 <__sfp>:
 800d298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29a:	4607      	mov	r7, r0
 800d29c:	f7ff ffac 	bl	800d1f8 <__sfp_lock_acquire>
 800d2a0:	4b1e      	ldr	r3, [pc, #120]	; (800d31c <__sfp+0x84>)
 800d2a2:	681e      	ldr	r6, [r3, #0]
 800d2a4:	69b3      	ldr	r3, [r6, #24]
 800d2a6:	b913      	cbnz	r3, 800d2ae <__sfp+0x16>
 800d2a8:	4630      	mov	r0, r6
 800d2aa:	f7ff ffbd 	bl	800d228 <__sinit>
 800d2ae:	3648      	adds	r6, #72	; 0x48
 800d2b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d2b4:	3b01      	subs	r3, #1
 800d2b6:	d503      	bpl.n	800d2c0 <__sfp+0x28>
 800d2b8:	6833      	ldr	r3, [r6, #0]
 800d2ba:	b30b      	cbz	r3, 800d300 <__sfp+0x68>
 800d2bc:	6836      	ldr	r6, [r6, #0]
 800d2be:	e7f7      	b.n	800d2b0 <__sfp+0x18>
 800d2c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d2c4:	b9d5      	cbnz	r5, 800d2fc <__sfp+0x64>
 800d2c6:	4b16      	ldr	r3, [pc, #88]	; (800d320 <__sfp+0x88>)
 800d2c8:	60e3      	str	r3, [r4, #12]
 800d2ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d2ce:	6665      	str	r5, [r4, #100]	; 0x64
 800d2d0:	f000 f84c 	bl	800d36c <__retarget_lock_init_recursive>
 800d2d4:	f7ff ff96 	bl	800d204 <__sfp_lock_release>
 800d2d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d2dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d2e0:	6025      	str	r5, [r4, #0]
 800d2e2:	61a5      	str	r5, [r4, #24]
 800d2e4:	2208      	movs	r2, #8
 800d2e6:	4629      	mov	r1, r5
 800d2e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d2ec:	f7fe fa16 	bl	800b71c <memset>
 800d2f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d2f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2fc:	3468      	adds	r4, #104	; 0x68
 800d2fe:	e7d9      	b.n	800d2b4 <__sfp+0x1c>
 800d300:	2104      	movs	r1, #4
 800d302:	4638      	mov	r0, r7
 800d304:	f7ff ff62 	bl	800d1cc <__sfmoreglue>
 800d308:	4604      	mov	r4, r0
 800d30a:	6030      	str	r0, [r6, #0]
 800d30c:	2800      	cmp	r0, #0
 800d30e:	d1d5      	bne.n	800d2bc <__sfp+0x24>
 800d310:	f7ff ff78 	bl	800d204 <__sfp_lock_release>
 800d314:	230c      	movs	r3, #12
 800d316:	603b      	str	r3, [r7, #0]
 800d318:	e7ee      	b.n	800d2f8 <__sfp+0x60>
 800d31a:	bf00      	nop
 800d31c:	0800f040 	.word	0x0800f040
 800d320:	ffff0001 	.word	0xffff0001

0800d324 <_fwalk_reent>:
 800d324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d328:	4606      	mov	r6, r0
 800d32a:	4688      	mov	r8, r1
 800d32c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d330:	2700      	movs	r7, #0
 800d332:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d336:	f1b9 0901 	subs.w	r9, r9, #1
 800d33a:	d505      	bpl.n	800d348 <_fwalk_reent+0x24>
 800d33c:	6824      	ldr	r4, [r4, #0]
 800d33e:	2c00      	cmp	r4, #0
 800d340:	d1f7      	bne.n	800d332 <_fwalk_reent+0xe>
 800d342:	4638      	mov	r0, r7
 800d344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d348:	89ab      	ldrh	r3, [r5, #12]
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d907      	bls.n	800d35e <_fwalk_reent+0x3a>
 800d34e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d352:	3301      	adds	r3, #1
 800d354:	d003      	beq.n	800d35e <_fwalk_reent+0x3a>
 800d356:	4629      	mov	r1, r5
 800d358:	4630      	mov	r0, r6
 800d35a:	47c0      	blx	r8
 800d35c:	4307      	orrs	r7, r0
 800d35e:	3568      	adds	r5, #104	; 0x68
 800d360:	e7e9      	b.n	800d336 <_fwalk_reent+0x12>
	...

0800d364 <_localeconv_r>:
 800d364:	4800      	ldr	r0, [pc, #0]	; (800d368 <_localeconv_r+0x4>)
 800d366:	4770      	bx	lr
 800d368:	200001ac 	.word	0x200001ac

0800d36c <__retarget_lock_init_recursive>:
 800d36c:	4770      	bx	lr

0800d36e <__retarget_lock_acquire_recursive>:
 800d36e:	4770      	bx	lr

0800d370 <__retarget_lock_release_recursive>:
 800d370:	4770      	bx	lr

0800d372 <__swhatbuf_r>:
 800d372:	b570      	push	{r4, r5, r6, lr}
 800d374:	460e      	mov	r6, r1
 800d376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d37a:	2900      	cmp	r1, #0
 800d37c:	b096      	sub	sp, #88	; 0x58
 800d37e:	4614      	mov	r4, r2
 800d380:	461d      	mov	r5, r3
 800d382:	da08      	bge.n	800d396 <__swhatbuf_r+0x24>
 800d384:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d388:	2200      	movs	r2, #0
 800d38a:	602a      	str	r2, [r5, #0]
 800d38c:	061a      	lsls	r2, r3, #24
 800d38e:	d410      	bmi.n	800d3b2 <__swhatbuf_r+0x40>
 800d390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d394:	e00e      	b.n	800d3b4 <__swhatbuf_r+0x42>
 800d396:	466a      	mov	r2, sp
 800d398:	f001 f82e 	bl	800e3f8 <_fstat_r>
 800d39c:	2800      	cmp	r0, #0
 800d39e:	dbf1      	blt.n	800d384 <__swhatbuf_r+0x12>
 800d3a0:	9a01      	ldr	r2, [sp, #4]
 800d3a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d3a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d3aa:	425a      	negs	r2, r3
 800d3ac:	415a      	adcs	r2, r3
 800d3ae:	602a      	str	r2, [r5, #0]
 800d3b0:	e7ee      	b.n	800d390 <__swhatbuf_r+0x1e>
 800d3b2:	2340      	movs	r3, #64	; 0x40
 800d3b4:	2000      	movs	r0, #0
 800d3b6:	6023      	str	r3, [r4, #0]
 800d3b8:	b016      	add	sp, #88	; 0x58
 800d3ba:	bd70      	pop	{r4, r5, r6, pc}

0800d3bc <__smakebuf_r>:
 800d3bc:	898b      	ldrh	r3, [r1, #12]
 800d3be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3c0:	079d      	lsls	r5, r3, #30
 800d3c2:	4606      	mov	r6, r0
 800d3c4:	460c      	mov	r4, r1
 800d3c6:	d507      	bpl.n	800d3d8 <__smakebuf_r+0x1c>
 800d3c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d3cc:	6023      	str	r3, [r4, #0]
 800d3ce:	6123      	str	r3, [r4, #16]
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	6163      	str	r3, [r4, #20]
 800d3d4:	b002      	add	sp, #8
 800d3d6:	bd70      	pop	{r4, r5, r6, pc}
 800d3d8:	ab01      	add	r3, sp, #4
 800d3da:	466a      	mov	r2, sp
 800d3dc:	f7ff ffc9 	bl	800d372 <__swhatbuf_r>
 800d3e0:	9900      	ldr	r1, [sp, #0]
 800d3e2:	4605      	mov	r5, r0
 800d3e4:	4630      	mov	r0, r6
 800d3e6:	f000 fc37 	bl	800dc58 <_malloc_r>
 800d3ea:	b948      	cbnz	r0, 800d400 <__smakebuf_r+0x44>
 800d3ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3f0:	059a      	lsls	r2, r3, #22
 800d3f2:	d4ef      	bmi.n	800d3d4 <__smakebuf_r+0x18>
 800d3f4:	f023 0303 	bic.w	r3, r3, #3
 800d3f8:	f043 0302 	orr.w	r3, r3, #2
 800d3fc:	81a3      	strh	r3, [r4, #12]
 800d3fe:	e7e3      	b.n	800d3c8 <__smakebuf_r+0xc>
 800d400:	4b0d      	ldr	r3, [pc, #52]	; (800d438 <__smakebuf_r+0x7c>)
 800d402:	62b3      	str	r3, [r6, #40]	; 0x28
 800d404:	89a3      	ldrh	r3, [r4, #12]
 800d406:	6020      	str	r0, [r4, #0]
 800d408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d40c:	81a3      	strh	r3, [r4, #12]
 800d40e:	9b00      	ldr	r3, [sp, #0]
 800d410:	6163      	str	r3, [r4, #20]
 800d412:	9b01      	ldr	r3, [sp, #4]
 800d414:	6120      	str	r0, [r4, #16]
 800d416:	b15b      	cbz	r3, 800d430 <__smakebuf_r+0x74>
 800d418:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d41c:	4630      	mov	r0, r6
 800d41e:	f000 fffd 	bl	800e41c <_isatty_r>
 800d422:	b128      	cbz	r0, 800d430 <__smakebuf_r+0x74>
 800d424:	89a3      	ldrh	r3, [r4, #12]
 800d426:	f023 0303 	bic.w	r3, r3, #3
 800d42a:	f043 0301 	orr.w	r3, r3, #1
 800d42e:	81a3      	strh	r3, [r4, #12]
 800d430:	89a0      	ldrh	r0, [r4, #12]
 800d432:	4305      	orrs	r5, r0
 800d434:	81a5      	strh	r5, [r4, #12]
 800d436:	e7cd      	b.n	800d3d4 <__smakebuf_r+0x18>
 800d438:	0800d1c1 	.word	0x0800d1c1

0800d43c <malloc>:
 800d43c:	4b02      	ldr	r3, [pc, #8]	; (800d448 <malloc+0xc>)
 800d43e:	4601      	mov	r1, r0
 800d440:	6818      	ldr	r0, [r3, #0]
 800d442:	f000 bc09 	b.w	800dc58 <_malloc_r>
 800d446:	bf00      	nop
 800d448:	20000058 	.word	0x20000058

0800d44c <_Balloc>:
 800d44c:	b570      	push	{r4, r5, r6, lr}
 800d44e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d450:	4604      	mov	r4, r0
 800d452:	460d      	mov	r5, r1
 800d454:	b976      	cbnz	r6, 800d474 <_Balloc+0x28>
 800d456:	2010      	movs	r0, #16
 800d458:	f7ff fff0 	bl	800d43c <malloc>
 800d45c:	4602      	mov	r2, r0
 800d45e:	6260      	str	r0, [r4, #36]	; 0x24
 800d460:	b920      	cbnz	r0, 800d46c <_Balloc+0x20>
 800d462:	4b18      	ldr	r3, [pc, #96]	; (800d4c4 <_Balloc+0x78>)
 800d464:	4818      	ldr	r0, [pc, #96]	; (800d4c8 <_Balloc+0x7c>)
 800d466:	2166      	movs	r1, #102	; 0x66
 800d468:	f000 ff86 	bl	800e378 <__assert_func>
 800d46c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d470:	6006      	str	r6, [r0, #0]
 800d472:	60c6      	str	r6, [r0, #12]
 800d474:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d476:	68f3      	ldr	r3, [r6, #12]
 800d478:	b183      	cbz	r3, 800d49c <_Balloc+0x50>
 800d47a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d47c:	68db      	ldr	r3, [r3, #12]
 800d47e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d482:	b9b8      	cbnz	r0, 800d4b4 <_Balloc+0x68>
 800d484:	2101      	movs	r1, #1
 800d486:	fa01 f605 	lsl.w	r6, r1, r5
 800d48a:	1d72      	adds	r2, r6, #5
 800d48c:	0092      	lsls	r2, r2, #2
 800d48e:	4620      	mov	r0, r4
 800d490:	f000 fb60 	bl	800db54 <_calloc_r>
 800d494:	b160      	cbz	r0, 800d4b0 <_Balloc+0x64>
 800d496:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d49a:	e00e      	b.n	800d4ba <_Balloc+0x6e>
 800d49c:	2221      	movs	r2, #33	; 0x21
 800d49e:	2104      	movs	r1, #4
 800d4a0:	4620      	mov	r0, r4
 800d4a2:	f000 fb57 	bl	800db54 <_calloc_r>
 800d4a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4a8:	60f0      	str	r0, [r6, #12]
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d1e4      	bne.n	800d47a <_Balloc+0x2e>
 800d4b0:	2000      	movs	r0, #0
 800d4b2:	bd70      	pop	{r4, r5, r6, pc}
 800d4b4:	6802      	ldr	r2, [r0, #0]
 800d4b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4c0:	e7f7      	b.n	800d4b2 <_Balloc+0x66>
 800d4c2:	bf00      	nop
 800d4c4:	0800f085 	.word	0x0800f085
 800d4c8:	0800f168 	.word	0x0800f168

0800d4cc <_Bfree>:
 800d4cc:	b570      	push	{r4, r5, r6, lr}
 800d4ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d4d0:	4605      	mov	r5, r0
 800d4d2:	460c      	mov	r4, r1
 800d4d4:	b976      	cbnz	r6, 800d4f4 <_Bfree+0x28>
 800d4d6:	2010      	movs	r0, #16
 800d4d8:	f7ff ffb0 	bl	800d43c <malloc>
 800d4dc:	4602      	mov	r2, r0
 800d4de:	6268      	str	r0, [r5, #36]	; 0x24
 800d4e0:	b920      	cbnz	r0, 800d4ec <_Bfree+0x20>
 800d4e2:	4b09      	ldr	r3, [pc, #36]	; (800d508 <_Bfree+0x3c>)
 800d4e4:	4809      	ldr	r0, [pc, #36]	; (800d50c <_Bfree+0x40>)
 800d4e6:	218a      	movs	r1, #138	; 0x8a
 800d4e8:	f000 ff46 	bl	800e378 <__assert_func>
 800d4ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4f0:	6006      	str	r6, [r0, #0]
 800d4f2:	60c6      	str	r6, [r0, #12]
 800d4f4:	b13c      	cbz	r4, 800d506 <_Bfree+0x3a>
 800d4f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d4f8:	6862      	ldr	r2, [r4, #4]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d500:	6021      	str	r1, [r4, #0]
 800d502:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d506:	bd70      	pop	{r4, r5, r6, pc}
 800d508:	0800f085 	.word	0x0800f085
 800d50c:	0800f168 	.word	0x0800f168

0800d510 <__multadd>:
 800d510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d514:	690d      	ldr	r5, [r1, #16]
 800d516:	4607      	mov	r7, r0
 800d518:	460c      	mov	r4, r1
 800d51a:	461e      	mov	r6, r3
 800d51c:	f101 0c14 	add.w	ip, r1, #20
 800d520:	2000      	movs	r0, #0
 800d522:	f8dc 3000 	ldr.w	r3, [ip]
 800d526:	b299      	uxth	r1, r3
 800d528:	fb02 6101 	mla	r1, r2, r1, r6
 800d52c:	0c1e      	lsrs	r6, r3, #16
 800d52e:	0c0b      	lsrs	r3, r1, #16
 800d530:	fb02 3306 	mla	r3, r2, r6, r3
 800d534:	b289      	uxth	r1, r1
 800d536:	3001      	adds	r0, #1
 800d538:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d53c:	4285      	cmp	r5, r0
 800d53e:	f84c 1b04 	str.w	r1, [ip], #4
 800d542:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d546:	dcec      	bgt.n	800d522 <__multadd+0x12>
 800d548:	b30e      	cbz	r6, 800d58e <__multadd+0x7e>
 800d54a:	68a3      	ldr	r3, [r4, #8]
 800d54c:	42ab      	cmp	r3, r5
 800d54e:	dc19      	bgt.n	800d584 <__multadd+0x74>
 800d550:	6861      	ldr	r1, [r4, #4]
 800d552:	4638      	mov	r0, r7
 800d554:	3101      	adds	r1, #1
 800d556:	f7ff ff79 	bl	800d44c <_Balloc>
 800d55a:	4680      	mov	r8, r0
 800d55c:	b928      	cbnz	r0, 800d56a <__multadd+0x5a>
 800d55e:	4602      	mov	r2, r0
 800d560:	4b0c      	ldr	r3, [pc, #48]	; (800d594 <__multadd+0x84>)
 800d562:	480d      	ldr	r0, [pc, #52]	; (800d598 <__multadd+0x88>)
 800d564:	21b5      	movs	r1, #181	; 0xb5
 800d566:	f000 ff07 	bl	800e378 <__assert_func>
 800d56a:	6922      	ldr	r2, [r4, #16]
 800d56c:	3202      	adds	r2, #2
 800d56e:	f104 010c 	add.w	r1, r4, #12
 800d572:	0092      	lsls	r2, r2, #2
 800d574:	300c      	adds	r0, #12
 800d576:	f7fe f8c3 	bl	800b700 <memcpy>
 800d57a:	4621      	mov	r1, r4
 800d57c:	4638      	mov	r0, r7
 800d57e:	f7ff ffa5 	bl	800d4cc <_Bfree>
 800d582:	4644      	mov	r4, r8
 800d584:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d588:	3501      	adds	r5, #1
 800d58a:	615e      	str	r6, [r3, #20]
 800d58c:	6125      	str	r5, [r4, #16]
 800d58e:	4620      	mov	r0, r4
 800d590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d594:	0800f0f7 	.word	0x0800f0f7
 800d598:	0800f168 	.word	0x0800f168

0800d59c <__hi0bits>:
 800d59c:	0c03      	lsrs	r3, r0, #16
 800d59e:	041b      	lsls	r3, r3, #16
 800d5a0:	b9d3      	cbnz	r3, 800d5d8 <__hi0bits+0x3c>
 800d5a2:	0400      	lsls	r0, r0, #16
 800d5a4:	2310      	movs	r3, #16
 800d5a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d5aa:	bf04      	itt	eq
 800d5ac:	0200      	lsleq	r0, r0, #8
 800d5ae:	3308      	addeq	r3, #8
 800d5b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d5b4:	bf04      	itt	eq
 800d5b6:	0100      	lsleq	r0, r0, #4
 800d5b8:	3304      	addeq	r3, #4
 800d5ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d5be:	bf04      	itt	eq
 800d5c0:	0080      	lsleq	r0, r0, #2
 800d5c2:	3302      	addeq	r3, #2
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	db05      	blt.n	800d5d4 <__hi0bits+0x38>
 800d5c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d5cc:	f103 0301 	add.w	r3, r3, #1
 800d5d0:	bf08      	it	eq
 800d5d2:	2320      	moveq	r3, #32
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	4770      	bx	lr
 800d5d8:	2300      	movs	r3, #0
 800d5da:	e7e4      	b.n	800d5a6 <__hi0bits+0xa>

0800d5dc <__lo0bits>:
 800d5dc:	6803      	ldr	r3, [r0, #0]
 800d5de:	f013 0207 	ands.w	r2, r3, #7
 800d5e2:	4601      	mov	r1, r0
 800d5e4:	d00b      	beq.n	800d5fe <__lo0bits+0x22>
 800d5e6:	07da      	lsls	r2, r3, #31
 800d5e8:	d423      	bmi.n	800d632 <__lo0bits+0x56>
 800d5ea:	0798      	lsls	r0, r3, #30
 800d5ec:	bf49      	itett	mi
 800d5ee:	085b      	lsrmi	r3, r3, #1
 800d5f0:	089b      	lsrpl	r3, r3, #2
 800d5f2:	2001      	movmi	r0, #1
 800d5f4:	600b      	strmi	r3, [r1, #0]
 800d5f6:	bf5c      	itt	pl
 800d5f8:	600b      	strpl	r3, [r1, #0]
 800d5fa:	2002      	movpl	r0, #2
 800d5fc:	4770      	bx	lr
 800d5fe:	b298      	uxth	r0, r3
 800d600:	b9a8      	cbnz	r0, 800d62e <__lo0bits+0x52>
 800d602:	0c1b      	lsrs	r3, r3, #16
 800d604:	2010      	movs	r0, #16
 800d606:	b2da      	uxtb	r2, r3
 800d608:	b90a      	cbnz	r2, 800d60e <__lo0bits+0x32>
 800d60a:	3008      	adds	r0, #8
 800d60c:	0a1b      	lsrs	r3, r3, #8
 800d60e:	071a      	lsls	r2, r3, #28
 800d610:	bf04      	itt	eq
 800d612:	091b      	lsreq	r3, r3, #4
 800d614:	3004      	addeq	r0, #4
 800d616:	079a      	lsls	r2, r3, #30
 800d618:	bf04      	itt	eq
 800d61a:	089b      	lsreq	r3, r3, #2
 800d61c:	3002      	addeq	r0, #2
 800d61e:	07da      	lsls	r2, r3, #31
 800d620:	d403      	bmi.n	800d62a <__lo0bits+0x4e>
 800d622:	085b      	lsrs	r3, r3, #1
 800d624:	f100 0001 	add.w	r0, r0, #1
 800d628:	d005      	beq.n	800d636 <__lo0bits+0x5a>
 800d62a:	600b      	str	r3, [r1, #0]
 800d62c:	4770      	bx	lr
 800d62e:	4610      	mov	r0, r2
 800d630:	e7e9      	b.n	800d606 <__lo0bits+0x2a>
 800d632:	2000      	movs	r0, #0
 800d634:	4770      	bx	lr
 800d636:	2020      	movs	r0, #32
 800d638:	4770      	bx	lr
	...

0800d63c <__i2b>:
 800d63c:	b510      	push	{r4, lr}
 800d63e:	460c      	mov	r4, r1
 800d640:	2101      	movs	r1, #1
 800d642:	f7ff ff03 	bl	800d44c <_Balloc>
 800d646:	4602      	mov	r2, r0
 800d648:	b928      	cbnz	r0, 800d656 <__i2b+0x1a>
 800d64a:	4b05      	ldr	r3, [pc, #20]	; (800d660 <__i2b+0x24>)
 800d64c:	4805      	ldr	r0, [pc, #20]	; (800d664 <__i2b+0x28>)
 800d64e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d652:	f000 fe91 	bl	800e378 <__assert_func>
 800d656:	2301      	movs	r3, #1
 800d658:	6144      	str	r4, [r0, #20]
 800d65a:	6103      	str	r3, [r0, #16]
 800d65c:	bd10      	pop	{r4, pc}
 800d65e:	bf00      	nop
 800d660:	0800f0f7 	.word	0x0800f0f7
 800d664:	0800f168 	.word	0x0800f168

0800d668 <__multiply>:
 800d668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d66c:	4691      	mov	r9, r2
 800d66e:	690a      	ldr	r2, [r1, #16]
 800d670:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d674:	429a      	cmp	r2, r3
 800d676:	bfb8      	it	lt
 800d678:	460b      	movlt	r3, r1
 800d67a:	460c      	mov	r4, r1
 800d67c:	bfbc      	itt	lt
 800d67e:	464c      	movlt	r4, r9
 800d680:	4699      	movlt	r9, r3
 800d682:	6927      	ldr	r7, [r4, #16]
 800d684:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d688:	68a3      	ldr	r3, [r4, #8]
 800d68a:	6861      	ldr	r1, [r4, #4]
 800d68c:	eb07 060a 	add.w	r6, r7, sl
 800d690:	42b3      	cmp	r3, r6
 800d692:	b085      	sub	sp, #20
 800d694:	bfb8      	it	lt
 800d696:	3101      	addlt	r1, #1
 800d698:	f7ff fed8 	bl	800d44c <_Balloc>
 800d69c:	b930      	cbnz	r0, 800d6ac <__multiply+0x44>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	4b44      	ldr	r3, [pc, #272]	; (800d7b4 <__multiply+0x14c>)
 800d6a2:	4845      	ldr	r0, [pc, #276]	; (800d7b8 <__multiply+0x150>)
 800d6a4:	f240 115d 	movw	r1, #349	; 0x15d
 800d6a8:	f000 fe66 	bl	800e378 <__assert_func>
 800d6ac:	f100 0514 	add.w	r5, r0, #20
 800d6b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d6b4:	462b      	mov	r3, r5
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	4543      	cmp	r3, r8
 800d6ba:	d321      	bcc.n	800d700 <__multiply+0x98>
 800d6bc:	f104 0314 	add.w	r3, r4, #20
 800d6c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d6c4:	f109 0314 	add.w	r3, r9, #20
 800d6c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d6cc:	9202      	str	r2, [sp, #8]
 800d6ce:	1b3a      	subs	r2, r7, r4
 800d6d0:	3a15      	subs	r2, #21
 800d6d2:	f022 0203 	bic.w	r2, r2, #3
 800d6d6:	3204      	adds	r2, #4
 800d6d8:	f104 0115 	add.w	r1, r4, #21
 800d6dc:	428f      	cmp	r7, r1
 800d6de:	bf38      	it	cc
 800d6e0:	2204      	movcc	r2, #4
 800d6e2:	9201      	str	r2, [sp, #4]
 800d6e4:	9a02      	ldr	r2, [sp, #8]
 800d6e6:	9303      	str	r3, [sp, #12]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d80c      	bhi.n	800d706 <__multiply+0x9e>
 800d6ec:	2e00      	cmp	r6, #0
 800d6ee:	dd03      	ble.n	800d6f8 <__multiply+0x90>
 800d6f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d05a      	beq.n	800d7ae <__multiply+0x146>
 800d6f8:	6106      	str	r6, [r0, #16]
 800d6fa:	b005      	add	sp, #20
 800d6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d700:	f843 2b04 	str.w	r2, [r3], #4
 800d704:	e7d8      	b.n	800d6b8 <__multiply+0x50>
 800d706:	f8b3 a000 	ldrh.w	sl, [r3]
 800d70a:	f1ba 0f00 	cmp.w	sl, #0
 800d70e:	d024      	beq.n	800d75a <__multiply+0xf2>
 800d710:	f104 0e14 	add.w	lr, r4, #20
 800d714:	46a9      	mov	r9, r5
 800d716:	f04f 0c00 	mov.w	ip, #0
 800d71a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d71e:	f8d9 1000 	ldr.w	r1, [r9]
 800d722:	fa1f fb82 	uxth.w	fp, r2
 800d726:	b289      	uxth	r1, r1
 800d728:	fb0a 110b 	mla	r1, sl, fp, r1
 800d72c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d730:	f8d9 2000 	ldr.w	r2, [r9]
 800d734:	4461      	add	r1, ip
 800d736:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d73a:	fb0a c20b 	mla	r2, sl, fp, ip
 800d73e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d742:	b289      	uxth	r1, r1
 800d744:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d748:	4577      	cmp	r7, lr
 800d74a:	f849 1b04 	str.w	r1, [r9], #4
 800d74e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d752:	d8e2      	bhi.n	800d71a <__multiply+0xb2>
 800d754:	9a01      	ldr	r2, [sp, #4]
 800d756:	f845 c002 	str.w	ip, [r5, r2]
 800d75a:	9a03      	ldr	r2, [sp, #12]
 800d75c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d760:	3304      	adds	r3, #4
 800d762:	f1b9 0f00 	cmp.w	r9, #0
 800d766:	d020      	beq.n	800d7aa <__multiply+0x142>
 800d768:	6829      	ldr	r1, [r5, #0]
 800d76a:	f104 0c14 	add.w	ip, r4, #20
 800d76e:	46ae      	mov	lr, r5
 800d770:	f04f 0a00 	mov.w	sl, #0
 800d774:	f8bc b000 	ldrh.w	fp, [ip]
 800d778:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d77c:	fb09 220b 	mla	r2, r9, fp, r2
 800d780:	4492      	add	sl, r2
 800d782:	b289      	uxth	r1, r1
 800d784:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d788:	f84e 1b04 	str.w	r1, [lr], #4
 800d78c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d790:	f8be 1000 	ldrh.w	r1, [lr]
 800d794:	0c12      	lsrs	r2, r2, #16
 800d796:	fb09 1102 	mla	r1, r9, r2, r1
 800d79a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d79e:	4567      	cmp	r7, ip
 800d7a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d7a4:	d8e6      	bhi.n	800d774 <__multiply+0x10c>
 800d7a6:	9a01      	ldr	r2, [sp, #4]
 800d7a8:	50a9      	str	r1, [r5, r2]
 800d7aa:	3504      	adds	r5, #4
 800d7ac:	e79a      	b.n	800d6e4 <__multiply+0x7c>
 800d7ae:	3e01      	subs	r6, #1
 800d7b0:	e79c      	b.n	800d6ec <__multiply+0x84>
 800d7b2:	bf00      	nop
 800d7b4:	0800f0f7 	.word	0x0800f0f7
 800d7b8:	0800f168 	.word	0x0800f168

0800d7bc <__pow5mult>:
 800d7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7c0:	4615      	mov	r5, r2
 800d7c2:	f012 0203 	ands.w	r2, r2, #3
 800d7c6:	4606      	mov	r6, r0
 800d7c8:	460f      	mov	r7, r1
 800d7ca:	d007      	beq.n	800d7dc <__pow5mult+0x20>
 800d7cc:	4c25      	ldr	r4, [pc, #148]	; (800d864 <__pow5mult+0xa8>)
 800d7ce:	3a01      	subs	r2, #1
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d7d6:	f7ff fe9b 	bl	800d510 <__multadd>
 800d7da:	4607      	mov	r7, r0
 800d7dc:	10ad      	asrs	r5, r5, #2
 800d7de:	d03d      	beq.n	800d85c <__pow5mult+0xa0>
 800d7e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d7e2:	b97c      	cbnz	r4, 800d804 <__pow5mult+0x48>
 800d7e4:	2010      	movs	r0, #16
 800d7e6:	f7ff fe29 	bl	800d43c <malloc>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	6270      	str	r0, [r6, #36]	; 0x24
 800d7ee:	b928      	cbnz	r0, 800d7fc <__pow5mult+0x40>
 800d7f0:	4b1d      	ldr	r3, [pc, #116]	; (800d868 <__pow5mult+0xac>)
 800d7f2:	481e      	ldr	r0, [pc, #120]	; (800d86c <__pow5mult+0xb0>)
 800d7f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d7f8:	f000 fdbe 	bl	800e378 <__assert_func>
 800d7fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d800:	6004      	str	r4, [r0, #0]
 800d802:	60c4      	str	r4, [r0, #12]
 800d804:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d808:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d80c:	b94c      	cbnz	r4, 800d822 <__pow5mult+0x66>
 800d80e:	f240 2171 	movw	r1, #625	; 0x271
 800d812:	4630      	mov	r0, r6
 800d814:	f7ff ff12 	bl	800d63c <__i2b>
 800d818:	2300      	movs	r3, #0
 800d81a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d81e:	4604      	mov	r4, r0
 800d820:	6003      	str	r3, [r0, #0]
 800d822:	f04f 0900 	mov.w	r9, #0
 800d826:	07eb      	lsls	r3, r5, #31
 800d828:	d50a      	bpl.n	800d840 <__pow5mult+0x84>
 800d82a:	4639      	mov	r1, r7
 800d82c:	4622      	mov	r2, r4
 800d82e:	4630      	mov	r0, r6
 800d830:	f7ff ff1a 	bl	800d668 <__multiply>
 800d834:	4639      	mov	r1, r7
 800d836:	4680      	mov	r8, r0
 800d838:	4630      	mov	r0, r6
 800d83a:	f7ff fe47 	bl	800d4cc <_Bfree>
 800d83e:	4647      	mov	r7, r8
 800d840:	106d      	asrs	r5, r5, #1
 800d842:	d00b      	beq.n	800d85c <__pow5mult+0xa0>
 800d844:	6820      	ldr	r0, [r4, #0]
 800d846:	b938      	cbnz	r0, 800d858 <__pow5mult+0x9c>
 800d848:	4622      	mov	r2, r4
 800d84a:	4621      	mov	r1, r4
 800d84c:	4630      	mov	r0, r6
 800d84e:	f7ff ff0b 	bl	800d668 <__multiply>
 800d852:	6020      	str	r0, [r4, #0]
 800d854:	f8c0 9000 	str.w	r9, [r0]
 800d858:	4604      	mov	r4, r0
 800d85a:	e7e4      	b.n	800d826 <__pow5mult+0x6a>
 800d85c:	4638      	mov	r0, r7
 800d85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d862:	bf00      	nop
 800d864:	0800f2b8 	.word	0x0800f2b8
 800d868:	0800f085 	.word	0x0800f085
 800d86c:	0800f168 	.word	0x0800f168

0800d870 <__lshift>:
 800d870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d874:	460c      	mov	r4, r1
 800d876:	6849      	ldr	r1, [r1, #4]
 800d878:	6923      	ldr	r3, [r4, #16]
 800d87a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d87e:	68a3      	ldr	r3, [r4, #8]
 800d880:	4607      	mov	r7, r0
 800d882:	4691      	mov	r9, r2
 800d884:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d888:	f108 0601 	add.w	r6, r8, #1
 800d88c:	42b3      	cmp	r3, r6
 800d88e:	db0b      	blt.n	800d8a8 <__lshift+0x38>
 800d890:	4638      	mov	r0, r7
 800d892:	f7ff fddb 	bl	800d44c <_Balloc>
 800d896:	4605      	mov	r5, r0
 800d898:	b948      	cbnz	r0, 800d8ae <__lshift+0x3e>
 800d89a:	4602      	mov	r2, r0
 800d89c:	4b2a      	ldr	r3, [pc, #168]	; (800d948 <__lshift+0xd8>)
 800d89e:	482b      	ldr	r0, [pc, #172]	; (800d94c <__lshift+0xdc>)
 800d8a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d8a4:	f000 fd68 	bl	800e378 <__assert_func>
 800d8a8:	3101      	adds	r1, #1
 800d8aa:	005b      	lsls	r3, r3, #1
 800d8ac:	e7ee      	b.n	800d88c <__lshift+0x1c>
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	f100 0114 	add.w	r1, r0, #20
 800d8b4:	f100 0210 	add.w	r2, r0, #16
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	4553      	cmp	r3, sl
 800d8bc:	db37      	blt.n	800d92e <__lshift+0xbe>
 800d8be:	6920      	ldr	r0, [r4, #16]
 800d8c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d8c4:	f104 0314 	add.w	r3, r4, #20
 800d8c8:	f019 091f 	ands.w	r9, r9, #31
 800d8cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d8d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d8d4:	d02f      	beq.n	800d936 <__lshift+0xc6>
 800d8d6:	f1c9 0e20 	rsb	lr, r9, #32
 800d8da:	468a      	mov	sl, r1
 800d8dc:	f04f 0c00 	mov.w	ip, #0
 800d8e0:	681a      	ldr	r2, [r3, #0]
 800d8e2:	fa02 f209 	lsl.w	r2, r2, r9
 800d8e6:	ea42 020c 	orr.w	r2, r2, ip
 800d8ea:	f84a 2b04 	str.w	r2, [sl], #4
 800d8ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8f2:	4298      	cmp	r0, r3
 800d8f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d8f8:	d8f2      	bhi.n	800d8e0 <__lshift+0x70>
 800d8fa:	1b03      	subs	r3, r0, r4
 800d8fc:	3b15      	subs	r3, #21
 800d8fe:	f023 0303 	bic.w	r3, r3, #3
 800d902:	3304      	adds	r3, #4
 800d904:	f104 0215 	add.w	r2, r4, #21
 800d908:	4290      	cmp	r0, r2
 800d90a:	bf38      	it	cc
 800d90c:	2304      	movcc	r3, #4
 800d90e:	f841 c003 	str.w	ip, [r1, r3]
 800d912:	f1bc 0f00 	cmp.w	ip, #0
 800d916:	d001      	beq.n	800d91c <__lshift+0xac>
 800d918:	f108 0602 	add.w	r6, r8, #2
 800d91c:	3e01      	subs	r6, #1
 800d91e:	4638      	mov	r0, r7
 800d920:	612e      	str	r6, [r5, #16]
 800d922:	4621      	mov	r1, r4
 800d924:	f7ff fdd2 	bl	800d4cc <_Bfree>
 800d928:	4628      	mov	r0, r5
 800d92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d92e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d932:	3301      	adds	r3, #1
 800d934:	e7c1      	b.n	800d8ba <__lshift+0x4a>
 800d936:	3904      	subs	r1, #4
 800d938:	f853 2b04 	ldr.w	r2, [r3], #4
 800d93c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d940:	4298      	cmp	r0, r3
 800d942:	d8f9      	bhi.n	800d938 <__lshift+0xc8>
 800d944:	e7ea      	b.n	800d91c <__lshift+0xac>
 800d946:	bf00      	nop
 800d948:	0800f0f7 	.word	0x0800f0f7
 800d94c:	0800f168 	.word	0x0800f168

0800d950 <__mcmp>:
 800d950:	b530      	push	{r4, r5, lr}
 800d952:	6902      	ldr	r2, [r0, #16]
 800d954:	690c      	ldr	r4, [r1, #16]
 800d956:	1b12      	subs	r2, r2, r4
 800d958:	d10e      	bne.n	800d978 <__mcmp+0x28>
 800d95a:	f100 0314 	add.w	r3, r0, #20
 800d95e:	3114      	adds	r1, #20
 800d960:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d964:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d968:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d96c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d970:	42a5      	cmp	r5, r4
 800d972:	d003      	beq.n	800d97c <__mcmp+0x2c>
 800d974:	d305      	bcc.n	800d982 <__mcmp+0x32>
 800d976:	2201      	movs	r2, #1
 800d978:	4610      	mov	r0, r2
 800d97a:	bd30      	pop	{r4, r5, pc}
 800d97c:	4283      	cmp	r3, r0
 800d97e:	d3f3      	bcc.n	800d968 <__mcmp+0x18>
 800d980:	e7fa      	b.n	800d978 <__mcmp+0x28>
 800d982:	f04f 32ff 	mov.w	r2, #4294967295
 800d986:	e7f7      	b.n	800d978 <__mcmp+0x28>

0800d988 <__mdiff>:
 800d988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d98c:	460c      	mov	r4, r1
 800d98e:	4606      	mov	r6, r0
 800d990:	4611      	mov	r1, r2
 800d992:	4620      	mov	r0, r4
 800d994:	4690      	mov	r8, r2
 800d996:	f7ff ffdb 	bl	800d950 <__mcmp>
 800d99a:	1e05      	subs	r5, r0, #0
 800d99c:	d110      	bne.n	800d9c0 <__mdiff+0x38>
 800d99e:	4629      	mov	r1, r5
 800d9a0:	4630      	mov	r0, r6
 800d9a2:	f7ff fd53 	bl	800d44c <_Balloc>
 800d9a6:	b930      	cbnz	r0, 800d9b6 <__mdiff+0x2e>
 800d9a8:	4b3a      	ldr	r3, [pc, #232]	; (800da94 <__mdiff+0x10c>)
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	f240 2132 	movw	r1, #562	; 0x232
 800d9b0:	4839      	ldr	r0, [pc, #228]	; (800da98 <__mdiff+0x110>)
 800d9b2:	f000 fce1 	bl	800e378 <__assert_func>
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d9bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9c0:	bfa4      	itt	ge
 800d9c2:	4643      	movge	r3, r8
 800d9c4:	46a0      	movge	r8, r4
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d9cc:	bfa6      	itte	ge
 800d9ce:	461c      	movge	r4, r3
 800d9d0:	2500      	movge	r5, #0
 800d9d2:	2501      	movlt	r5, #1
 800d9d4:	f7ff fd3a 	bl	800d44c <_Balloc>
 800d9d8:	b920      	cbnz	r0, 800d9e4 <__mdiff+0x5c>
 800d9da:	4b2e      	ldr	r3, [pc, #184]	; (800da94 <__mdiff+0x10c>)
 800d9dc:	4602      	mov	r2, r0
 800d9de:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d9e2:	e7e5      	b.n	800d9b0 <__mdiff+0x28>
 800d9e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d9e8:	6926      	ldr	r6, [r4, #16]
 800d9ea:	60c5      	str	r5, [r0, #12]
 800d9ec:	f104 0914 	add.w	r9, r4, #20
 800d9f0:	f108 0514 	add.w	r5, r8, #20
 800d9f4:	f100 0e14 	add.w	lr, r0, #20
 800d9f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d9fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800da00:	f108 0210 	add.w	r2, r8, #16
 800da04:	46f2      	mov	sl, lr
 800da06:	2100      	movs	r1, #0
 800da08:	f859 3b04 	ldr.w	r3, [r9], #4
 800da0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800da10:	fa1f f883 	uxth.w	r8, r3
 800da14:	fa11 f18b 	uxtah	r1, r1, fp
 800da18:	0c1b      	lsrs	r3, r3, #16
 800da1a:	eba1 0808 	sub.w	r8, r1, r8
 800da1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800da22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800da26:	fa1f f888 	uxth.w	r8, r8
 800da2a:	1419      	asrs	r1, r3, #16
 800da2c:	454e      	cmp	r6, r9
 800da2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800da32:	f84a 3b04 	str.w	r3, [sl], #4
 800da36:	d8e7      	bhi.n	800da08 <__mdiff+0x80>
 800da38:	1b33      	subs	r3, r6, r4
 800da3a:	3b15      	subs	r3, #21
 800da3c:	f023 0303 	bic.w	r3, r3, #3
 800da40:	3304      	adds	r3, #4
 800da42:	3415      	adds	r4, #21
 800da44:	42a6      	cmp	r6, r4
 800da46:	bf38      	it	cc
 800da48:	2304      	movcc	r3, #4
 800da4a:	441d      	add	r5, r3
 800da4c:	4473      	add	r3, lr
 800da4e:	469e      	mov	lr, r3
 800da50:	462e      	mov	r6, r5
 800da52:	4566      	cmp	r6, ip
 800da54:	d30e      	bcc.n	800da74 <__mdiff+0xec>
 800da56:	f10c 0203 	add.w	r2, ip, #3
 800da5a:	1b52      	subs	r2, r2, r5
 800da5c:	f022 0203 	bic.w	r2, r2, #3
 800da60:	3d03      	subs	r5, #3
 800da62:	45ac      	cmp	ip, r5
 800da64:	bf38      	it	cc
 800da66:	2200      	movcc	r2, #0
 800da68:	441a      	add	r2, r3
 800da6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800da6e:	b17b      	cbz	r3, 800da90 <__mdiff+0x108>
 800da70:	6107      	str	r7, [r0, #16]
 800da72:	e7a3      	b.n	800d9bc <__mdiff+0x34>
 800da74:	f856 8b04 	ldr.w	r8, [r6], #4
 800da78:	fa11 f288 	uxtah	r2, r1, r8
 800da7c:	1414      	asrs	r4, r2, #16
 800da7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800da82:	b292      	uxth	r2, r2
 800da84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800da88:	f84e 2b04 	str.w	r2, [lr], #4
 800da8c:	1421      	asrs	r1, r4, #16
 800da8e:	e7e0      	b.n	800da52 <__mdiff+0xca>
 800da90:	3f01      	subs	r7, #1
 800da92:	e7ea      	b.n	800da6a <__mdiff+0xe2>
 800da94:	0800f0f7 	.word	0x0800f0f7
 800da98:	0800f168 	.word	0x0800f168

0800da9c <__d2b>:
 800da9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800daa0:	4689      	mov	r9, r1
 800daa2:	2101      	movs	r1, #1
 800daa4:	ec57 6b10 	vmov	r6, r7, d0
 800daa8:	4690      	mov	r8, r2
 800daaa:	f7ff fccf 	bl	800d44c <_Balloc>
 800daae:	4604      	mov	r4, r0
 800dab0:	b930      	cbnz	r0, 800dac0 <__d2b+0x24>
 800dab2:	4602      	mov	r2, r0
 800dab4:	4b25      	ldr	r3, [pc, #148]	; (800db4c <__d2b+0xb0>)
 800dab6:	4826      	ldr	r0, [pc, #152]	; (800db50 <__d2b+0xb4>)
 800dab8:	f240 310a 	movw	r1, #778	; 0x30a
 800dabc:	f000 fc5c 	bl	800e378 <__assert_func>
 800dac0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dac4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dac8:	bb35      	cbnz	r5, 800db18 <__d2b+0x7c>
 800daca:	2e00      	cmp	r6, #0
 800dacc:	9301      	str	r3, [sp, #4]
 800dace:	d028      	beq.n	800db22 <__d2b+0x86>
 800dad0:	4668      	mov	r0, sp
 800dad2:	9600      	str	r6, [sp, #0]
 800dad4:	f7ff fd82 	bl	800d5dc <__lo0bits>
 800dad8:	9900      	ldr	r1, [sp, #0]
 800dada:	b300      	cbz	r0, 800db1e <__d2b+0x82>
 800dadc:	9a01      	ldr	r2, [sp, #4]
 800dade:	f1c0 0320 	rsb	r3, r0, #32
 800dae2:	fa02 f303 	lsl.w	r3, r2, r3
 800dae6:	430b      	orrs	r3, r1
 800dae8:	40c2      	lsrs	r2, r0
 800daea:	6163      	str	r3, [r4, #20]
 800daec:	9201      	str	r2, [sp, #4]
 800daee:	9b01      	ldr	r3, [sp, #4]
 800daf0:	61a3      	str	r3, [r4, #24]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	bf14      	ite	ne
 800daf6:	2202      	movne	r2, #2
 800daf8:	2201      	moveq	r2, #1
 800dafa:	6122      	str	r2, [r4, #16]
 800dafc:	b1d5      	cbz	r5, 800db34 <__d2b+0x98>
 800dafe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800db02:	4405      	add	r5, r0
 800db04:	f8c9 5000 	str.w	r5, [r9]
 800db08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800db0c:	f8c8 0000 	str.w	r0, [r8]
 800db10:	4620      	mov	r0, r4
 800db12:	b003      	add	sp, #12
 800db14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db1c:	e7d5      	b.n	800daca <__d2b+0x2e>
 800db1e:	6161      	str	r1, [r4, #20]
 800db20:	e7e5      	b.n	800daee <__d2b+0x52>
 800db22:	a801      	add	r0, sp, #4
 800db24:	f7ff fd5a 	bl	800d5dc <__lo0bits>
 800db28:	9b01      	ldr	r3, [sp, #4]
 800db2a:	6163      	str	r3, [r4, #20]
 800db2c:	2201      	movs	r2, #1
 800db2e:	6122      	str	r2, [r4, #16]
 800db30:	3020      	adds	r0, #32
 800db32:	e7e3      	b.n	800dafc <__d2b+0x60>
 800db34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800db3c:	f8c9 0000 	str.w	r0, [r9]
 800db40:	6918      	ldr	r0, [r3, #16]
 800db42:	f7ff fd2b 	bl	800d59c <__hi0bits>
 800db46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800db4a:	e7df      	b.n	800db0c <__d2b+0x70>
 800db4c:	0800f0f7 	.word	0x0800f0f7
 800db50:	0800f168 	.word	0x0800f168

0800db54 <_calloc_r>:
 800db54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db56:	fba1 2402 	umull	r2, r4, r1, r2
 800db5a:	b94c      	cbnz	r4, 800db70 <_calloc_r+0x1c>
 800db5c:	4611      	mov	r1, r2
 800db5e:	9201      	str	r2, [sp, #4]
 800db60:	f000 f87a 	bl	800dc58 <_malloc_r>
 800db64:	9a01      	ldr	r2, [sp, #4]
 800db66:	4605      	mov	r5, r0
 800db68:	b930      	cbnz	r0, 800db78 <_calloc_r+0x24>
 800db6a:	4628      	mov	r0, r5
 800db6c:	b003      	add	sp, #12
 800db6e:	bd30      	pop	{r4, r5, pc}
 800db70:	220c      	movs	r2, #12
 800db72:	6002      	str	r2, [r0, #0]
 800db74:	2500      	movs	r5, #0
 800db76:	e7f8      	b.n	800db6a <_calloc_r+0x16>
 800db78:	4621      	mov	r1, r4
 800db7a:	f7fd fdcf 	bl	800b71c <memset>
 800db7e:	e7f4      	b.n	800db6a <_calloc_r+0x16>

0800db80 <_free_r>:
 800db80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db82:	2900      	cmp	r1, #0
 800db84:	d044      	beq.n	800dc10 <_free_r+0x90>
 800db86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db8a:	9001      	str	r0, [sp, #4]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	f1a1 0404 	sub.w	r4, r1, #4
 800db92:	bfb8      	it	lt
 800db94:	18e4      	addlt	r4, r4, r3
 800db96:	f000 fc8f 	bl	800e4b8 <__malloc_lock>
 800db9a:	4a1e      	ldr	r2, [pc, #120]	; (800dc14 <_free_r+0x94>)
 800db9c:	9801      	ldr	r0, [sp, #4]
 800db9e:	6813      	ldr	r3, [r2, #0]
 800dba0:	b933      	cbnz	r3, 800dbb0 <_free_r+0x30>
 800dba2:	6063      	str	r3, [r4, #4]
 800dba4:	6014      	str	r4, [r2, #0]
 800dba6:	b003      	add	sp, #12
 800dba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbac:	f000 bc8a 	b.w	800e4c4 <__malloc_unlock>
 800dbb0:	42a3      	cmp	r3, r4
 800dbb2:	d908      	bls.n	800dbc6 <_free_r+0x46>
 800dbb4:	6825      	ldr	r5, [r4, #0]
 800dbb6:	1961      	adds	r1, r4, r5
 800dbb8:	428b      	cmp	r3, r1
 800dbba:	bf01      	itttt	eq
 800dbbc:	6819      	ldreq	r1, [r3, #0]
 800dbbe:	685b      	ldreq	r3, [r3, #4]
 800dbc0:	1949      	addeq	r1, r1, r5
 800dbc2:	6021      	streq	r1, [r4, #0]
 800dbc4:	e7ed      	b.n	800dba2 <_free_r+0x22>
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	685b      	ldr	r3, [r3, #4]
 800dbca:	b10b      	cbz	r3, 800dbd0 <_free_r+0x50>
 800dbcc:	42a3      	cmp	r3, r4
 800dbce:	d9fa      	bls.n	800dbc6 <_free_r+0x46>
 800dbd0:	6811      	ldr	r1, [r2, #0]
 800dbd2:	1855      	adds	r5, r2, r1
 800dbd4:	42a5      	cmp	r5, r4
 800dbd6:	d10b      	bne.n	800dbf0 <_free_r+0x70>
 800dbd8:	6824      	ldr	r4, [r4, #0]
 800dbda:	4421      	add	r1, r4
 800dbdc:	1854      	adds	r4, r2, r1
 800dbde:	42a3      	cmp	r3, r4
 800dbe0:	6011      	str	r1, [r2, #0]
 800dbe2:	d1e0      	bne.n	800dba6 <_free_r+0x26>
 800dbe4:	681c      	ldr	r4, [r3, #0]
 800dbe6:	685b      	ldr	r3, [r3, #4]
 800dbe8:	6053      	str	r3, [r2, #4]
 800dbea:	4421      	add	r1, r4
 800dbec:	6011      	str	r1, [r2, #0]
 800dbee:	e7da      	b.n	800dba6 <_free_r+0x26>
 800dbf0:	d902      	bls.n	800dbf8 <_free_r+0x78>
 800dbf2:	230c      	movs	r3, #12
 800dbf4:	6003      	str	r3, [r0, #0]
 800dbf6:	e7d6      	b.n	800dba6 <_free_r+0x26>
 800dbf8:	6825      	ldr	r5, [r4, #0]
 800dbfa:	1961      	adds	r1, r4, r5
 800dbfc:	428b      	cmp	r3, r1
 800dbfe:	bf04      	itt	eq
 800dc00:	6819      	ldreq	r1, [r3, #0]
 800dc02:	685b      	ldreq	r3, [r3, #4]
 800dc04:	6063      	str	r3, [r4, #4]
 800dc06:	bf04      	itt	eq
 800dc08:	1949      	addeq	r1, r1, r5
 800dc0a:	6021      	streq	r1, [r4, #0]
 800dc0c:	6054      	str	r4, [r2, #4]
 800dc0e:	e7ca      	b.n	800dba6 <_free_r+0x26>
 800dc10:	b003      	add	sp, #12
 800dc12:	bd30      	pop	{r4, r5, pc}
 800dc14:	200017ac 	.word	0x200017ac

0800dc18 <sbrk_aligned>:
 800dc18:	b570      	push	{r4, r5, r6, lr}
 800dc1a:	4e0e      	ldr	r6, [pc, #56]	; (800dc54 <sbrk_aligned+0x3c>)
 800dc1c:	460c      	mov	r4, r1
 800dc1e:	6831      	ldr	r1, [r6, #0]
 800dc20:	4605      	mov	r5, r0
 800dc22:	b911      	cbnz	r1, 800dc2a <sbrk_aligned+0x12>
 800dc24:	f000 fb42 	bl	800e2ac <_sbrk_r>
 800dc28:	6030      	str	r0, [r6, #0]
 800dc2a:	4621      	mov	r1, r4
 800dc2c:	4628      	mov	r0, r5
 800dc2e:	f000 fb3d 	bl	800e2ac <_sbrk_r>
 800dc32:	1c43      	adds	r3, r0, #1
 800dc34:	d00a      	beq.n	800dc4c <sbrk_aligned+0x34>
 800dc36:	1cc4      	adds	r4, r0, #3
 800dc38:	f024 0403 	bic.w	r4, r4, #3
 800dc3c:	42a0      	cmp	r0, r4
 800dc3e:	d007      	beq.n	800dc50 <sbrk_aligned+0x38>
 800dc40:	1a21      	subs	r1, r4, r0
 800dc42:	4628      	mov	r0, r5
 800dc44:	f000 fb32 	bl	800e2ac <_sbrk_r>
 800dc48:	3001      	adds	r0, #1
 800dc4a:	d101      	bne.n	800dc50 <sbrk_aligned+0x38>
 800dc4c:	f04f 34ff 	mov.w	r4, #4294967295
 800dc50:	4620      	mov	r0, r4
 800dc52:	bd70      	pop	{r4, r5, r6, pc}
 800dc54:	200017b0 	.word	0x200017b0

0800dc58 <_malloc_r>:
 800dc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc5c:	1ccd      	adds	r5, r1, #3
 800dc5e:	f025 0503 	bic.w	r5, r5, #3
 800dc62:	3508      	adds	r5, #8
 800dc64:	2d0c      	cmp	r5, #12
 800dc66:	bf38      	it	cc
 800dc68:	250c      	movcc	r5, #12
 800dc6a:	2d00      	cmp	r5, #0
 800dc6c:	4607      	mov	r7, r0
 800dc6e:	db01      	blt.n	800dc74 <_malloc_r+0x1c>
 800dc70:	42a9      	cmp	r1, r5
 800dc72:	d905      	bls.n	800dc80 <_malloc_r+0x28>
 800dc74:	230c      	movs	r3, #12
 800dc76:	603b      	str	r3, [r7, #0]
 800dc78:	2600      	movs	r6, #0
 800dc7a:	4630      	mov	r0, r6
 800dc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc80:	4e2e      	ldr	r6, [pc, #184]	; (800dd3c <_malloc_r+0xe4>)
 800dc82:	f000 fc19 	bl	800e4b8 <__malloc_lock>
 800dc86:	6833      	ldr	r3, [r6, #0]
 800dc88:	461c      	mov	r4, r3
 800dc8a:	bb34      	cbnz	r4, 800dcda <_malloc_r+0x82>
 800dc8c:	4629      	mov	r1, r5
 800dc8e:	4638      	mov	r0, r7
 800dc90:	f7ff ffc2 	bl	800dc18 <sbrk_aligned>
 800dc94:	1c43      	adds	r3, r0, #1
 800dc96:	4604      	mov	r4, r0
 800dc98:	d14d      	bne.n	800dd36 <_malloc_r+0xde>
 800dc9a:	6834      	ldr	r4, [r6, #0]
 800dc9c:	4626      	mov	r6, r4
 800dc9e:	2e00      	cmp	r6, #0
 800dca0:	d140      	bne.n	800dd24 <_malloc_r+0xcc>
 800dca2:	6823      	ldr	r3, [r4, #0]
 800dca4:	4631      	mov	r1, r6
 800dca6:	4638      	mov	r0, r7
 800dca8:	eb04 0803 	add.w	r8, r4, r3
 800dcac:	f000 fafe 	bl	800e2ac <_sbrk_r>
 800dcb0:	4580      	cmp	r8, r0
 800dcb2:	d13a      	bne.n	800dd2a <_malloc_r+0xd2>
 800dcb4:	6821      	ldr	r1, [r4, #0]
 800dcb6:	3503      	adds	r5, #3
 800dcb8:	1a6d      	subs	r5, r5, r1
 800dcba:	f025 0503 	bic.w	r5, r5, #3
 800dcbe:	3508      	adds	r5, #8
 800dcc0:	2d0c      	cmp	r5, #12
 800dcc2:	bf38      	it	cc
 800dcc4:	250c      	movcc	r5, #12
 800dcc6:	4629      	mov	r1, r5
 800dcc8:	4638      	mov	r0, r7
 800dcca:	f7ff ffa5 	bl	800dc18 <sbrk_aligned>
 800dcce:	3001      	adds	r0, #1
 800dcd0:	d02b      	beq.n	800dd2a <_malloc_r+0xd2>
 800dcd2:	6823      	ldr	r3, [r4, #0]
 800dcd4:	442b      	add	r3, r5
 800dcd6:	6023      	str	r3, [r4, #0]
 800dcd8:	e00e      	b.n	800dcf8 <_malloc_r+0xa0>
 800dcda:	6822      	ldr	r2, [r4, #0]
 800dcdc:	1b52      	subs	r2, r2, r5
 800dcde:	d41e      	bmi.n	800dd1e <_malloc_r+0xc6>
 800dce0:	2a0b      	cmp	r2, #11
 800dce2:	d916      	bls.n	800dd12 <_malloc_r+0xba>
 800dce4:	1961      	adds	r1, r4, r5
 800dce6:	42a3      	cmp	r3, r4
 800dce8:	6025      	str	r5, [r4, #0]
 800dcea:	bf18      	it	ne
 800dcec:	6059      	strne	r1, [r3, #4]
 800dcee:	6863      	ldr	r3, [r4, #4]
 800dcf0:	bf08      	it	eq
 800dcf2:	6031      	streq	r1, [r6, #0]
 800dcf4:	5162      	str	r2, [r4, r5]
 800dcf6:	604b      	str	r3, [r1, #4]
 800dcf8:	4638      	mov	r0, r7
 800dcfa:	f104 060b 	add.w	r6, r4, #11
 800dcfe:	f000 fbe1 	bl	800e4c4 <__malloc_unlock>
 800dd02:	f026 0607 	bic.w	r6, r6, #7
 800dd06:	1d23      	adds	r3, r4, #4
 800dd08:	1af2      	subs	r2, r6, r3
 800dd0a:	d0b6      	beq.n	800dc7a <_malloc_r+0x22>
 800dd0c:	1b9b      	subs	r3, r3, r6
 800dd0e:	50a3      	str	r3, [r4, r2]
 800dd10:	e7b3      	b.n	800dc7a <_malloc_r+0x22>
 800dd12:	6862      	ldr	r2, [r4, #4]
 800dd14:	42a3      	cmp	r3, r4
 800dd16:	bf0c      	ite	eq
 800dd18:	6032      	streq	r2, [r6, #0]
 800dd1a:	605a      	strne	r2, [r3, #4]
 800dd1c:	e7ec      	b.n	800dcf8 <_malloc_r+0xa0>
 800dd1e:	4623      	mov	r3, r4
 800dd20:	6864      	ldr	r4, [r4, #4]
 800dd22:	e7b2      	b.n	800dc8a <_malloc_r+0x32>
 800dd24:	4634      	mov	r4, r6
 800dd26:	6876      	ldr	r6, [r6, #4]
 800dd28:	e7b9      	b.n	800dc9e <_malloc_r+0x46>
 800dd2a:	230c      	movs	r3, #12
 800dd2c:	603b      	str	r3, [r7, #0]
 800dd2e:	4638      	mov	r0, r7
 800dd30:	f000 fbc8 	bl	800e4c4 <__malloc_unlock>
 800dd34:	e7a1      	b.n	800dc7a <_malloc_r+0x22>
 800dd36:	6025      	str	r5, [r4, #0]
 800dd38:	e7de      	b.n	800dcf8 <_malloc_r+0xa0>
 800dd3a:	bf00      	nop
 800dd3c:	200017ac 	.word	0x200017ac

0800dd40 <__ssputs_r>:
 800dd40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd44:	688e      	ldr	r6, [r1, #8]
 800dd46:	429e      	cmp	r6, r3
 800dd48:	4682      	mov	sl, r0
 800dd4a:	460c      	mov	r4, r1
 800dd4c:	4690      	mov	r8, r2
 800dd4e:	461f      	mov	r7, r3
 800dd50:	d838      	bhi.n	800ddc4 <__ssputs_r+0x84>
 800dd52:	898a      	ldrh	r2, [r1, #12]
 800dd54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd58:	d032      	beq.n	800ddc0 <__ssputs_r+0x80>
 800dd5a:	6825      	ldr	r5, [r4, #0]
 800dd5c:	6909      	ldr	r1, [r1, #16]
 800dd5e:	eba5 0901 	sub.w	r9, r5, r1
 800dd62:	6965      	ldr	r5, [r4, #20]
 800dd64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	444b      	add	r3, r9
 800dd70:	106d      	asrs	r5, r5, #1
 800dd72:	429d      	cmp	r5, r3
 800dd74:	bf38      	it	cc
 800dd76:	461d      	movcc	r5, r3
 800dd78:	0553      	lsls	r3, r2, #21
 800dd7a:	d531      	bpl.n	800dde0 <__ssputs_r+0xa0>
 800dd7c:	4629      	mov	r1, r5
 800dd7e:	f7ff ff6b 	bl	800dc58 <_malloc_r>
 800dd82:	4606      	mov	r6, r0
 800dd84:	b950      	cbnz	r0, 800dd9c <__ssputs_r+0x5c>
 800dd86:	230c      	movs	r3, #12
 800dd88:	f8ca 3000 	str.w	r3, [sl]
 800dd8c:	89a3      	ldrh	r3, [r4, #12]
 800dd8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd92:	81a3      	strh	r3, [r4, #12]
 800dd94:	f04f 30ff 	mov.w	r0, #4294967295
 800dd98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd9c:	6921      	ldr	r1, [r4, #16]
 800dd9e:	464a      	mov	r2, r9
 800dda0:	f7fd fcae 	bl	800b700 <memcpy>
 800dda4:	89a3      	ldrh	r3, [r4, #12]
 800dda6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ddaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddae:	81a3      	strh	r3, [r4, #12]
 800ddb0:	6126      	str	r6, [r4, #16]
 800ddb2:	6165      	str	r5, [r4, #20]
 800ddb4:	444e      	add	r6, r9
 800ddb6:	eba5 0509 	sub.w	r5, r5, r9
 800ddba:	6026      	str	r6, [r4, #0]
 800ddbc:	60a5      	str	r5, [r4, #8]
 800ddbe:	463e      	mov	r6, r7
 800ddc0:	42be      	cmp	r6, r7
 800ddc2:	d900      	bls.n	800ddc6 <__ssputs_r+0x86>
 800ddc4:	463e      	mov	r6, r7
 800ddc6:	6820      	ldr	r0, [r4, #0]
 800ddc8:	4632      	mov	r2, r6
 800ddca:	4641      	mov	r1, r8
 800ddcc:	f000 fb5a 	bl	800e484 <memmove>
 800ddd0:	68a3      	ldr	r3, [r4, #8]
 800ddd2:	1b9b      	subs	r3, r3, r6
 800ddd4:	60a3      	str	r3, [r4, #8]
 800ddd6:	6823      	ldr	r3, [r4, #0]
 800ddd8:	4433      	add	r3, r6
 800ddda:	6023      	str	r3, [r4, #0]
 800dddc:	2000      	movs	r0, #0
 800ddde:	e7db      	b.n	800dd98 <__ssputs_r+0x58>
 800dde0:	462a      	mov	r2, r5
 800dde2:	f000 fb75 	bl	800e4d0 <_realloc_r>
 800dde6:	4606      	mov	r6, r0
 800dde8:	2800      	cmp	r0, #0
 800ddea:	d1e1      	bne.n	800ddb0 <__ssputs_r+0x70>
 800ddec:	6921      	ldr	r1, [r4, #16]
 800ddee:	4650      	mov	r0, sl
 800ddf0:	f7ff fec6 	bl	800db80 <_free_r>
 800ddf4:	e7c7      	b.n	800dd86 <__ssputs_r+0x46>
	...

0800ddf8 <_svfiprintf_r>:
 800ddf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddfc:	4698      	mov	r8, r3
 800ddfe:	898b      	ldrh	r3, [r1, #12]
 800de00:	061b      	lsls	r3, r3, #24
 800de02:	b09d      	sub	sp, #116	; 0x74
 800de04:	4607      	mov	r7, r0
 800de06:	460d      	mov	r5, r1
 800de08:	4614      	mov	r4, r2
 800de0a:	d50e      	bpl.n	800de2a <_svfiprintf_r+0x32>
 800de0c:	690b      	ldr	r3, [r1, #16]
 800de0e:	b963      	cbnz	r3, 800de2a <_svfiprintf_r+0x32>
 800de10:	2140      	movs	r1, #64	; 0x40
 800de12:	f7ff ff21 	bl	800dc58 <_malloc_r>
 800de16:	6028      	str	r0, [r5, #0]
 800de18:	6128      	str	r0, [r5, #16]
 800de1a:	b920      	cbnz	r0, 800de26 <_svfiprintf_r+0x2e>
 800de1c:	230c      	movs	r3, #12
 800de1e:	603b      	str	r3, [r7, #0]
 800de20:	f04f 30ff 	mov.w	r0, #4294967295
 800de24:	e0d1      	b.n	800dfca <_svfiprintf_r+0x1d2>
 800de26:	2340      	movs	r3, #64	; 0x40
 800de28:	616b      	str	r3, [r5, #20]
 800de2a:	2300      	movs	r3, #0
 800de2c:	9309      	str	r3, [sp, #36]	; 0x24
 800de2e:	2320      	movs	r3, #32
 800de30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de34:	f8cd 800c 	str.w	r8, [sp, #12]
 800de38:	2330      	movs	r3, #48	; 0x30
 800de3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dfe4 <_svfiprintf_r+0x1ec>
 800de3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de42:	f04f 0901 	mov.w	r9, #1
 800de46:	4623      	mov	r3, r4
 800de48:	469a      	mov	sl, r3
 800de4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de4e:	b10a      	cbz	r2, 800de54 <_svfiprintf_r+0x5c>
 800de50:	2a25      	cmp	r2, #37	; 0x25
 800de52:	d1f9      	bne.n	800de48 <_svfiprintf_r+0x50>
 800de54:	ebba 0b04 	subs.w	fp, sl, r4
 800de58:	d00b      	beq.n	800de72 <_svfiprintf_r+0x7a>
 800de5a:	465b      	mov	r3, fp
 800de5c:	4622      	mov	r2, r4
 800de5e:	4629      	mov	r1, r5
 800de60:	4638      	mov	r0, r7
 800de62:	f7ff ff6d 	bl	800dd40 <__ssputs_r>
 800de66:	3001      	adds	r0, #1
 800de68:	f000 80aa 	beq.w	800dfc0 <_svfiprintf_r+0x1c8>
 800de6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de6e:	445a      	add	r2, fp
 800de70:	9209      	str	r2, [sp, #36]	; 0x24
 800de72:	f89a 3000 	ldrb.w	r3, [sl]
 800de76:	2b00      	cmp	r3, #0
 800de78:	f000 80a2 	beq.w	800dfc0 <_svfiprintf_r+0x1c8>
 800de7c:	2300      	movs	r3, #0
 800de7e:	f04f 32ff 	mov.w	r2, #4294967295
 800de82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de86:	f10a 0a01 	add.w	sl, sl, #1
 800de8a:	9304      	str	r3, [sp, #16]
 800de8c:	9307      	str	r3, [sp, #28]
 800de8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de92:	931a      	str	r3, [sp, #104]	; 0x68
 800de94:	4654      	mov	r4, sl
 800de96:	2205      	movs	r2, #5
 800de98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de9c:	4851      	ldr	r0, [pc, #324]	; (800dfe4 <_svfiprintf_r+0x1ec>)
 800de9e:	f7f2 f987 	bl	80001b0 <memchr>
 800dea2:	9a04      	ldr	r2, [sp, #16]
 800dea4:	b9d8      	cbnz	r0, 800dede <_svfiprintf_r+0xe6>
 800dea6:	06d0      	lsls	r0, r2, #27
 800dea8:	bf44      	itt	mi
 800deaa:	2320      	movmi	r3, #32
 800deac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800deb0:	0711      	lsls	r1, r2, #28
 800deb2:	bf44      	itt	mi
 800deb4:	232b      	movmi	r3, #43	; 0x2b
 800deb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800deba:	f89a 3000 	ldrb.w	r3, [sl]
 800debe:	2b2a      	cmp	r3, #42	; 0x2a
 800dec0:	d015      	beq.n	800deee <_svfiprintf_r+0xf6>
 800dec2:	9a07      	ldr	r2, [sp, #28]
 800dec4:	4654      	mov	r4, sl
 800dec6:	2000      	movs	r0, #0
 800dec8:	f04f 0c0a 	mov.w	ip, #10
 800decc:	4621      	mov	r1, r4
 800dece:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ded2:	3b30      	subs	r3, #48	; 0x30
 800ded4:	2b09      	cmp	r3, #9
 800ded6:	d94e      	bls.n	800df76 <_svfiprintf_r+0x17e>
 800ded8:	b1b0      	cbz	r0, 800df08 <_svfiprintf_r+0x110>
 800deda:	9207      	str	r2, [sp, #28]
 800dedc:	e014      	b.n	800df08 <_svfiprintf_r+0x110>
 800dede:	eba0 0308 	sub.w	r3, r0, r8
 800dee2:	fa09 f303 	lsl.w	r3, r9, r3
 800dee6:	4313      	orrs	r3, r2
 800dee8:	9304      	str	r3, [sp, #16]
 800deea:	46a2      	mov	sl, r4
 800deec:	e7d2      	b.n	800de94 <_svfiprintf_r+0x9c>
 800deee:	9b03      	ldr	r3, [sp, #12]
 800def0:	1d19      	adds	r1, r3, #4
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	9103      	str	r1, [sp, #12]
 800def6:	2b00      	cmp	r3, #0
 800def8:	bfbb      	ittet	lt
 800defa:	425b      	neglt	r3, r3
 800defc:	f042 0202 	orrlt.w	r2, r2, #2
 800df00:	9307      	strge	r3, [sp, #28]
 800df02:	9307      	strlt	r3, [sp, #28]
 800df04:	bfb8      	it	lt
 800df06:	9204      	strlt	r2, [sp, #16]
 800df08:	7823      	ldrb	r3, [r4, #0]
 800df0a:	2b2e      	cmp	r3, #46	; 0x2e
 800df0c:	d10c      	bne.n	800df28 <_svfiprintf_r+0x130>
 800df0e:	7863      	ldrb	r3, [r4, #1]
 800df10:	2b2a      	cmp	r3, #42	; 0x2a
 800df12:	d135      	bne.n	800df80 <_svfiprintf_r+0x188>
 800df14:	9b03      	ldr	r3, [sp, #12]
 800df16:	1d1a      	adds	r2, r3, #4
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	9203      	str	r2, [sp, #12]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	bfb8      	it	lt
 800df20:	f04f 33ff 	movlt.w	r3, #4294967295
 800df24:	3402      	adds	r4, #2
 800df26:	9305      	str	r3, [sp, #20]
 800df28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dff4 <_svfiprintf_r+0x1fc>
 800df2c:	7821      	ldrb	r1, [r4, #0]
 800df2e:	2203      	movs	r2, #3
 800df30:	4650      	mov	r0, sl
 800df32:	f7f2 f93d 	bl	80001b0 <memchr>
 800df36:	b140      	cbz	r0, 800df4a <_svfiprintf_r+0x152>
 800df38:	2340      	movs	r3, #64	; 0x40
 800df3a:	eba0 000a 	sub.w	r0, r0, sl
 800df3e:	fa03 f000 	lsl.w	r0, r3, r0
 800df42:	9b04      	ldr	r3, [sp, #16]
 800df44:	4303      	orrs	r3, r0
 800df46:	3401      	adds	r4, #1
 800df48:	9304      	str	r3, [sp, #16]
 800df4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df4e:	4826      	ldr	r0, [pc, #152]	; (800dfe8 <_svfiprintf_r+0x1f0>)
 800df50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df54:	2206      	movs	r2, #6
 800df56:	f7f2 f92b 	bl	80001b0 <memchr>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	d038      	beq.n	800dfd0 <_svfiprintf_r+0x1d8>
 800df5e:	4b23      	ldr	r3, [pc, #140]	; (800dfec <_svfiprintf_r+0x1f4>)
 800df60:	bb1b      	cbnz	r3, 800dfaa <_svfiprintf_r+0x1b2>
 800df62:	9b03      	ldr	r3, [sp, #12]
 800df64:	3307      	adds	r3, #7
 800df66:	f023 0307 	bic.w	r3, r3, #7
 800df6a:	3308      	adds	r3, #8
 800df6c:	9303      	str	r3, [sp, #12]
 800df6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df70:	4433      	add	r3, r6
 800df72:	9309      	str	r3, [sp, #36]	; 0x24
 800df74:	e767      	b.n	800de46 <_svfiprintf_r+0x4e>
 800df76:	fb0c 3202 	mla	r2, ip, r2, r3
 800df7a:	460c      	mov	r4, r1
 800df7c:	2001      	movs	r0, #1
 800df7e:	e7a5      	b.n	800decc <_svfiprintf_r+0xd4>
 800df80:	2300      	movs	r3, #0
 800df82:	3401      	adds	r4, #1
 800df84:	9305      	str	r3, [sp, #20]
 800df86:	4619      	mov	r1, r3
 800df88:	f04f 0c0a 	mov.w	ip, #10
 800df8c:	4620      	mov	r0, r4
 800df8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df92:	3a30      	subs	r2, #48	; 0x30
 800df94:	2a09      	cmp	r2, #9
 800df96:	d903      	bls.n	800dfa0 <_svfiprintf_r+0x1a8>
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d0c5      	beq.n	800df28 <_svfiprintf_r+0x130>
 800df9c:	9105      	str	r1, [sp, #20]
 800df9e:	e7c3      	b.n	800df28 <_svfiprintf_r+0x130>
 800dfa0:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfa4:	4604      	mov	r4, r0
 800dfa6:	2301      	movs	r3, #1
 800dfa8:	e7f0      	b.n	800df8c <_svfiprintf_r+0x194>
 800dfaa:	ab03      	add	r3, sp, #12
 800dfac:	9300      	str	r3, [sp, #0]
 800dfae:	462a      	mov	r2, r5
 800dfb0:	4b0f      	ldr	r3, [pc, #60]	; (800dff0 <_svfiprintf_r+0x1f8>)
 800dfb2:	a904      	add	r1, sp, #16
 800dfb4:	4638      	mov	r0, r7
 800dfb6:	f7fd fc59 	bl	800b86c <_printf_float>
 800dfba:	1c42      	adds	r2, r0, #1
 800dfbc:	4606      	mov	r6, r0
 800dfbe:	d1d6      	bne.n	800df6e <_svfiprintf_r+0x176>
 800dfc0:	89ab      	ldrh	r3, [r5, #12]
 800dfc2:	065b      	lsls	r3, r3, #25
 800dfc4:	f53f af2c 	bmi.w	800de20 <_svfiprintf_r+0x28>
 800dfc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfca:	b01d      	add	sp, #116	; 0x74
 800dfcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd0:	ab03      	add	r3, sp, #12
 800dfd2:	9300      	str	r3, [sp, #0]
 800dfd4:	462a      	mov	r2, r5
 800dfd6:	4b06      	ldr	r3, [pc, #24]	; (800dff0 <_svfiprintf_r+0x1f8>)
 800dfd8:	a904      	add	r1, sp, #16
 800dfda:	4638      	mov	r0, r7
 800dfdc:	f7fd feea 	bl	800bdb4 <_printf_i>
 800dfe0:	e7eb      	b.n	800dfba <_svfiprintf_r+0x1c2>
 800dfe2:	bf00      	nop
 800dfe4:	0800f2c4 	.word	0x0800f2c4
 800dfe8:	0800f2ce 	.word	0x0800f2ce
 800dfec:	0800b86d 	.word	0x0800b86d
 800dff0:	0800dd41 	.word	0x0800dd41
 800dff4:	0800f2ca 	.word	0x0800f2ca

0800dff8 <__sfputc_r>:
 800dff8:	6893      	ldr	r3, [r2, #8]
 800dffa:	3b01      	subs	r3, #1
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	b410      	push	{r4}
 800e000:	6093      	str	r3, [r2, #8]
 800e002:	da08      	bge.n	800e016 <__sfputc_r+0x1e>
 800e004:	6994      	ldr	r4, [r2, #24]
 800e006:	42a3      	cmp	r3, r4
 800e008:	db01      	blt.n	800e00e <__sfputc_r+0x16>
 800e00a:	290a      	cmp	r1, #10
 800e00c:	d103      	bne.n	800e016 <__sfputc_r+0x1e>
 800e00e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e012:	f7fe b8b3 	b.w	800c17c <__swbuf_r>
 800e016:	6813      	ldr	r3, [r2, #0]
 800e018:	1c58      	adds	r0, r3, #1
 800e01a:	6010      	str	r0, [r2, #0]
 800e01c:	7019      	strb	r1, [r3, #0]
 800e01e:	4608      	mov	r0, r1
 800e020:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e024:	4770      	bx	lr

0800e026 <__sfputs_r>:
 800e026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e028:	4606      	mov	r6, r0
 800e02a:	460f      	mov	r7, r1
 800e02c:	4614      	mov	r4, r2
 800e02e:	18d5      	adds	r5, r2, r3
 800e030:	42ac      	cmp	r4, r5
 800e032:	d101      	bne.n	800e038 <__sfputs_r+0x12>
 800e034:	2000      	movs	r0, #0
 800e036:	e007      	b.n	800e048 <__sfputs_r+0x22>
 800e038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e03c:	463a      	mov	r2, r7
 800e03e:	4630      	mov	r0, r6
 800e040:	f7ff ffda 	bl	800dff8 <__sfputc_r>
 800e044:	1c43      	adds	r3, r0, #1
 800e046:	d1f3      	bne.n	800e030 <__sfputs_r+0xa>
 800e048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e04c <_vfiprintf_r>:
 800e04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e050:	460d      	mov	r5, r1
 800e052:	b09d      	sub	sp, #116	; 0x74
 800e054:	4614      	mov	r4, r2
 800e056:	4698      	mov	r8, r3
 800e058:	4606      	mov	r6, r0
 800e05a:	b118      	cbz	r0, 800e064 <_vfiprintf_r+0x18>
 800e05c:	6983      	ldr	r3, [r0, #24]
 800e05e:	b90b      	cbnz	r3, 800e064 <_vfiprintf_r+0x18>
 800e060:	f7ff f8e2 	bl	800d228 <__sinit>
 800e064:	4b89      	ldr	r3, [pc, #548]	; (800e28c <_vfiprintf_r+0x240>)
 800e066:	429d      	cmp	r5, r3
 800e068:	d11b      	bne.n	800e0a2 <_vfiprintf_r+0x56>
 800e06a:	6875      	ldr	r5, [r6, #4]
 800e06c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e06e:	07d9      	lsls	r1, r3, #31
 800e070:	d405      	bmi.n	800e07e <_vfiprintf_r+0x32>
 800e072:	89ab      	ldrh	r3, [r5, #12]
 800e074:	059a      	lsls	r2, r3, #22
 800e076:	d402      	bmi.n	800e07e <_vfiprintf_r+0x32>
 800e078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e07a:	f7ff f978 	bl	800d36e <__retarget_lock_acquire_recursive>
 800e07e:	89ab      	ldrh	r3, [r5, #12]
 800e080:	071b      	lsls	r3, r3, #28
 800e082:	d501      	bpl.n	800e088 <_vfiprintf_r+0x3c>
 800e084:	692b      	ldr	r3, [r5, #16]
 800e086:	b9eb      	cbnz	r3, 800e0c4 <_vfiprintf_r+0x78>
 800e088:	4629      	mov	r1, r5
 800e08a:	4630      	mov	r0, r6
 800e08c:	f7fe f8c8 	bl	800c220 <__swsetup_r>
 800e090:	b1c0      	cbz	r0, 800e0c4 <_vfiprintf_r+0x78>
 800e092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e094:	07dc      	lsls	r4, r3, #31
 800e096:	d50e      	bpl.n	800e0b6 <_vfiprintf_r+0x6a>
 800e098:	f04f 30ff 	mov.w	r0, #4294967295
 800e09c:	b01d      	add	sp, #116	; 0x74
 800e09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a2:	4b7b      	ldr	r3, [pc, #492]	; (800e290 <_vfiprintf_r+0x244>)
 800e0a4:	429d      	cmp	r5, r3
 800e0a6:	d101      	bne.n	800e0ac <_vfiprintf_r+0x60>
 800e0a8:	68b5      	ldr	r5, [r6, #8]
 800e0aa:	e7df      	b.n	800e06c <_vfiprintf_r+0x20>
 800e0ac:	4b79      	ldr	r3, [pc, #484]	; (800e294 <_vfiprintf_r+0x248>)
 800e0ae:	429d      	cmp	r5, r3
 800e0b0:	bf08      	it	eq
 800e0b2:	68f5      	ldreq	r5, [r6, #12]
 800e0b4:	e7da      	b.n	800e06c <_vfiprintf_r+0x20>
 800e0b6:	89ab      	ldrh	r3, [r5, #12]
 800e0b8:	0598      	lsls	r0, r3, #22
 800e0ba:	d4ed      	bmi.n	800e098 <_vfiprintf_r+0x4c>
 800e0bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0be:	f7ff f957 	bl	800d370 <__retarget_lock_release_recursive>
 800e0c2:	e7e9      	b.n	800e098 <_vfiprintf_r+0x4c>
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	9309      	str	r3, [sp, #36]	; 0x24
 800e0c8:	2320      	movs	r3, #32
 800e0ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0d2:	2330      	movs	r3, #48	; 0x30
 800e0d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e298 <_vfiprintf_r+0x24c>
 800e0d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0dc:	f04f 0901 	mov.w	r9, #1
 800e0e0:	4623      	mov	r3, r4
 800e0e2:	469a      	mov	sl, r3
 800e0e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0e8:	b10a      	cbz	r2, 800e0ee <_vfiprintf_r+0xa2>
 800e0ea:	2a25      	cmp	r2, #37	; 0x25
 800e0ec:	d1f9      	bne.n	800e0e2 <_vfiprintf_r+0x96>
 800e0ee:	ebba 0b04 	subs.w	fp, sl, r4
 800e0f2:	d00b      	beq.n	800e10c <_vfiprintf_r+0xc0>
 800e0f4:	465b      	mov	r3, fp
 800e0f6:	4622      	mov	r2, r4
 800e0f8:	4629      	mov	r1, r5
 800e0fa:	4630      	mov	r0, r6
 800e0fc:	f7ff ff93 	bl	800e026 <__sfputs_r>
 800e100:	3001      	adds	r0, #1
 800e102:	f000 80aa 	beq.w	800e25a <_vfiprintf_r+0x20e>
 800e106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e108:	445a      	add	r2, fp
 800e10a:	9209      	str	r2, [sp, #36]	; 0x24
 800e10c:	f89a 3000 	ldrb.w	r3, [sl]
 800e110:	2b00      	cmp	r3, #0
 800e112:	f000 80a2 	beq.w	800e25a <_vfiprintf_r+0x20e>
 800e116:	2300      	movs	r3, #0
 800e118:	f04f 32ff 	mov.w	r2, #4294967295
 800e11c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e120:	f10a 0a01 	add.w	sl, sl, #1
 800e124:	9304      	str	r3, [sp, #16]
 800e126:	9307      	str	r3, [sp, #28]
 800e128:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e12c:	931a      	str	r3, [sp, #104]	; 0x68
 800e12e:	4654      	mov	r4, sl
 800e130:	2205      	movs	r2, #5
 800e132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e136:	4858      	ldr	r0, [pc, #352]	; (800e298 <_vfiprintf_r+0x24c>)
 800e138:	f7f2 f83a 	bl	80001b0 <memchr>
 800e13c:	9a04      	ldr	r2, [sp, #16]
 800e13e:	b9d8      	cbnz	r0, 800e178 <_vfiprintf_r+0x12c>
 800e140:	06d1      	lsls	r1, r2, #27
 800e142:	bf44      	itt	mi
 800e144:	2320      	movmi	r3, #32
 800e146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e14a:	0713      	lsls	r3, r2, #28
 800e14c:	bf44      	itt	mi
 800e14e:	232b      	movmi	r3, #43	; 0x2b
 800e150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e154:	f89a 3000 	ldrb.w	r3, [sl]
 800e158:	2b2a      	cmp	r3, #42	; 0x2a
 800e15a:	d015      	beq.n	800e188 <_vfiprintf_r+0x13c>
 800e15c:	9a07      	ldr	r2, [sp, #28]
 800e15e:	4654      	mov	r4, sl
 800e160:	2000      	movs	r0, #0
 800e162:	f04f 0c0a 	mov.w	ip, #10
 800e166:	4621      	mov	r1, r4
 800e168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e16c:	3b30      	subs	r3, #48	; 0x30
 800e16e:	2b09      	cmp	r3, #9
 800e170:	d94e      	bls.n	800e210 <_vfiprintf_r+0x1c4>
 800e172:	b1b0      	cbz	r0, 800e1a2 <_vfiprintf_r+0x156>
 800e174:	9207      	str	r2, [sp, #28]
 800e176:	e014      	b.n	800e1a2 <_vfiprintf_r+0x156>
 800e178:	eba0 0308 	sub.w	r3, r0, r8
 800e17c:	fa09 f303 	lsl.w	r3, r9, r3
 800e180:	4313      	orrs	r3, r2
 800e182:	9304      	str	r3, [sp, #16]
 800e184:	46a2      	mov	sl, r4
 800e186:	e7d2      	b.n	800e12e <_vfiprintf_r+0xe2>
 800e188:	9b03      	ldr	r3, [sp, #12]
 800e18a:	1d19      	adds	r1, r3, #4
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	9103      	str	r1, [sp, #12]
 800e190:	2b00      	cmp	r3, #0
 800e192:	bfbb      	ittet	lt
 800e194:	425b      	neglt	r3, r3
 800e196:	f042 0202 	orrlt.w	r2, r2, #2
 800e19a:	9307      	strge	r3, [sp, #28]
 800e19c:	9307      	strlt	r3, [sp, #28]
 800e19e:	bfb8      	it	lt
 800e1a0:	9204      	strlt	r2, [sp, #16]
 800e1a2:	7823      	ldrb	r3, [r4, #0]
 800e1a4:	2b2e      	cmp	r3, #46	; 0x2e
 800e1a6:	d10c      	bne.n	800e1c2 <_vfiprintf_r+0x176>
 800e1a8:	7863      	ldrb	r3, [r4, #1]
 800e1aa:	2b2a      	cmp	r3, #42	; 0x2a
 800e1ac:	d135      	bne.n	800e21a <_vfiprintf_r+0x1ce>
 800e1ae:	9b03      	ldr	r3, [sp, #12]
 800e1b0:	1d1a      	adds	r2, r3, #4
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	9203      	str	r2, [sp, #12]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	bfb8      	it	lt
 800e1ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1be:	3402      	adds	r4, #2
 800e1c0:	9305      	str	r3, [sp, #20]
 800e1c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e2a8 <_vfiprintf_r+0x25c>
 800e1c6:	7821      	ldrb	r1, [r4, #0]
 800e1c8:	2203      	movs	r2, #3
 800e1ca:	4650      	mov	r0, sl
 800e1cc:	f7f1 fff0 	bl	80001b0 <memchr>
 800e1d0:	b140      	cbz	r0, 800e1e4 <_vfiprintf_r+0x198>
 800e1d2:	2340      	movs	r3, #64	; 0x40
 800e1d4:	eba0 000a 	sub.w	r0, r0, sl
 800e1d8:	fa03 f000 	lsl.w	r0, r3, r0
 800e1dc:	9b04      	ldr	r3, [sp, #16]
 800e1de:	4303      	orrs	r3, r0
 800e1e0:	3401      	adds	r4, #1
 800e1e2:	9304      	str	r3, [sp, #16]
 800e1e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1e8:	482c      	ldr	r0, [pc, #176]	; (800e29c <_vfiprintf_r+0x250>)
 800e1ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1ee:	2206      	movs	r2, #6
 800e1f0:	f7f1 ffde 	bl	80001b0 <memchr>
 800e1f4:	2800      	cmp	r0, #0
 800e1f6:	d03f      	beq.n	800e278 <_vfiprintf_r+0x22c>
 800e1f8:	4b29      	ldr	r3, [pc, #164]	; (800e2a0 <_vfiprintf_r+0x254>)
 800e1fa:	bb1b      	cbnz	r3, 800e244 <_vfiprintf_r+0x1f8>
 800e1fc:	9b03      	ldr	r3, [sp, #12]
 800e1fe:	3307      	adds	r3, #7
 800e200:	f023 0307 	bic.w	r3, r3, #7
 800e204:	3308      	adds	r3, #8
 800e206:	9303      	str	r3, [sp, #12]
 800e208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e20a:	443b      	add	r3, r7
 800e20c:	9309      	str	r3, [sp, #36]	; 0x24
 800e20e:	e767      	b.n	800e0e0 <_vfiprintf_r+0x94>
 800e210:	fb0c 3202 	mla	r2, ip, r2, r3
 800e214:	460c      	mov	r4, r1
 800e216:	2001      	movs	r0, #1
 800e218:	e7a5      	b.n	800e166 <_vfiprintf_r+0x11a>
 800e21a:	2300      	movs	r3, #0
 800e21c:	3401      	adds	r4, #1
 800e21e:	9305      	str	r3, [sp, #20]
 800e220:	4619      	mov	r1, r3
 800e222:	f04f 0c0a 	mov.w	ip, #10
 800e226:	4620      	mov	r0, r4
 800e228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e22c:	3a30      	subs	r2, #48	; 0x30
 800e22e:	2a09      	cmp	r2, #9
 800e230:	d903      	bls.n	800e23a <_vfiprintf_r+0x1ee>
 800e232:	2b00      	cmp	r3, #0
 800e234:	d0c5      	beq.n	800e1c2 <_vfiprintf_r+0x176>
 800e236:	9105      	str	r1, [sp, #20]
 800e238:	e7c3      	b.n	800e1c2 <_vfiprintf_r+0x176>
 800e23a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e23e:	4604      	mov	r4, r0
 800e240:	2301      	movs	r3, #1
 800e242:	e7f0      	b.n	800e226 <_vfiprintf_r+0x1da>
 800e244:	ab03      	add	r3, sp, #12
 800e246:	9300      	str	r3, [sp, #0]
 800e248:	462a      	mov	r2, r5
 800e24a:	4b16      	ldr	r3, [pc, #88]	; (800e2a4 <_vfiprintf_r+0x258>)
 800e24c:	a904      	add	r1, sp, #16
 800e24e:	4630      	mov	r0, r6
 800e250:	f7fd fb0c 	bl	800b86c <_printf_float>
 800e254:	4607      	mov	r7, r0
 800e256:	1c78      	adds	r0, r7, #1
 800e258:	d1d6      	bne.n	800e208 <_vfiprintf_r+0x1bc>
 800e25a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e25c:	07d9      	lsls	r1, r3, #31
 800e25e:	d405      	bmi.n	800e26c <_vfiprintf_r+0x220>
 800e260:	89ab      	ldrh	r3, [r5, #12]
 800e262:	059a      	lsls	r2, r3, #22
 800e264:	d402      	bmi.n	800e26c <_vfiprintf_r+0x220>
 800e266:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e268:	f7ff f882 	bl	800d370 <__retarget_lock_release_recursive>
 800e26c:	89ab      	ldrh	r3, [r5, #12]
 800e26e:	065b      	lsls	r3, r3, #25
 800e270:	f53f af12 	bmi.w	800e098 <_vfiprintf_r+0x4c>
 800e274:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e276:	e711      	b.n	800e09c <_vfiprintf_r+0x50>
 800e278:	ab03      	add	r3, sp, #12
 800e27a:	9300      	str	r3, [sp, #0]
 800e27c:	462a      	mov	r2, r5
 800e27e:	4b09      	ldr	r3, [pc, #36]	; (800e2a4 <_vfiprintf_r+0x258>)
 800e280:	a904      	add	r1, sp, #16
 800e282:	4630      	mov	r0, r6
 800e284:	f7fd fd96 	bl	800bdb4 <_printf_i>
 800e288:	e7e4      	b.n	800e254 <_vfiprintf_r+0x208>
 800e28a:	bf00      	nop
 800e28c:	0800f128 	.word	0x0800f128
 800e290:	0800f148 	.word	0x0800f148
 800e294:	0800f108 	.word	0x0800f108
 800e298:	0800f2c4 	.word	0x0800f2c4
 800e29c:	0800f2ce 	.word	0x0800f2ce
 800e2a0:	0800b86d 	.word	0x0800b86d
 800e2a4:	0800e027 	.word	0x0800e027
 800e2a8:	0800f2ca 	.word	0x0800f2ca

0800e2ac <_sbrk_r>:
 800e2ac:	b538      	push	{r3, r4, r5, lr}
 800e2ae:	4d06      	ldr	r5, [pc, #24]	; (800e2c8 <_sbrk_r+0x1c>)
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	4604      	mov	r4, r0
 800e2b4:	4608      	mov	r0, r1
 800e2b6:	602b      	str	r3, [r5, #0]
 800e2b8:	f7f4 fd72 	bl	8002da0 <_sbrk>
 800e2bc:	1c43      	adds	r3, r0, #1
 800e2be:	d102      	bne.n	800e2c6 <_sbrk_r+0x1a>
 800e2c0:	682b      	ldr	r3, [r5, #0]
 800e2c2:	b103      	cbz	r3, 800e2c6 <_sbrk_r+0x1a>
 800e2c4:	6023      	str	r3, [r4, #0]
 800e2c6:	bd38      	pop	{r3, r4, r5, pc}
 800e2c8:	200017b4 	.word	0x200017b4

0800e2cc <__sread>:
 800e2cc:	b510      	push	{r4, lr}
 800e2ce:	460c      	mov	r4, r1
 800e2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2d4:	f000 f92c 	bl	800e530 <_read_r>
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	bfab      	itete	ge
 800e2dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e2de:	89a3      	ldrhlt	r3, [r4, #12]
 800e2e0:	181b      	addge	r3, r3, r0
 800e2e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e2e6:	bfac      	ite	ge
 800e2e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e2ea:	81a3      	strhlt	r3, [r4, #12]
 800e2ec:	bd10      	pop	{r4, pc}

0800e2ee <__swrite>:
 800e2ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2f2:	461f      	mov	r7, r3
 800e2f4:	898b      	ldrh	r3, [r1, #12]
 800e2f6:	05db      	lsls	r3, r3, #23
 800e2f8:	4605      	mov	r5, r0
 800e2fa:	460c      	mov	r4, r1
 800e2fc:	4616      	mov	r6, r2
 800e2fe:	d505      	bpl.n	800e30c <__swrite+0x1e>
 800e300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e304:	2302      	movs	r3, #2
 800e306:	2200      	movs	r2, #0
 800e308:	f000 f898 	bl	800e43c <_lseek_r>
 800e30c:	89a3      	ldrh	r3, [r4, #12]
 800e30e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e316:	81a3      	strh	r3, [r4, #12]
 800e318:	4632      	mov	r2, r6
 800e31a:	463b      	mov	r3, r7
 800e31c:	4628      	mov	r0, r5
 800e31e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e322:	f000 b817 	b.w	800e354 <_write_r>

0800e326 <__sseek>:
 800e326:	b510      	push	{r4, lr}
 800e328:	460c      	mov	r4, r1
 800e32a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e32e:	f000 f885 	bl	800e43c <_lseek_r>
 800e332:	1c43      	adds	r3, r0, #1
 800e334:	89a3      	ldrh	r3, [r4, #12]
 800e336:	bf15      	itete	ne
 800e338:	6560      	strne	r0, [r4, #84]	; 0x54
 800e33a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e33e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e342:	81a3      	strheq	r3, [r4, #12]
 800e344:	bf18      	it	ne
 800e346:	81a3      	strhne	r3, [r4, #12]
 800e348:	bd10      	pop	{r4, pc}

0800e34a <__sclose>:
 800e34a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e34e:	f000 b831 	b.w	800e3b4 <_close_r>
	...

0800e354 <_write_r>:
 800e354:	b538      	push	{r3, r4, r5, lr}
 800e356:	4d07      	ldr	r5, [pc, #28]	; (800e374 <_write_r+0x20>)
 800e358:	4604      	mov	r4, r0
 800e35a:	4608      	mov	r0, r1
 800e35c:	4611      	mov	r1, r2
 800e35e:	2200      	movs	r2, #0
 800e360:	602a      	str	r2, [r5, #0]
 800e362:	461a      	mov	r2, r3
 800e364:	f7fb fa7e 	bl	8009864 <_write>
 800e368:	1c43      	adds	r3, r0, #1
 800e36a:	d102      	bne.n	800e372 <_write_r+0x1e>
 800e36c:	682b      	ldr	r3, [r5, #0]
 800e36e:	b103      	cbz	r3, 800e372 <_write_r+0x1e>
 800e370:	6023      	str	r3, [r4, #0]
 800e372:	bd38      	pop	{r3, r4, r5, pc}
 800e374:	200017b4 	.word	0x200017b4

0800e378 <__assert_func>:
 800e378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e37a:	4614      	mov	r4, r2
 800e37c:	461a      	mov	r2, r3
 800e37e:	4b09      	ldr	r3, [pc, #36]	; (800e3a4 <__assert_func+0x2c>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4605      	mov	r5, r0
 800e384:	68d8      	ldr	r0, [r3, #12]
 800e386:	b14c      	cbz	r4, 800e39c <__assert_func+0x24>
 800e388:	4b07      	ldr	r3, [pc, #28]	; (800e3a8 <__assert_func+0x30>)
 800e38a:	9100      	str	r1, [sp, #0]
 800e38c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e390:	4906      	ldr	r1, [pc, #24]	; (800e3ac <__assert_func+0x34>)
 800e392:	462b      	mov	r3, r5
 800e394:	f000 f81e 	bl	800e3d4 <fiprintf>
 800e398:	f000 f8e9 	bl	800e56e <abort>
 800e39c:	4b04      	ldr	r3, [pc, #16]	; (800e3b0 <__assert_func+0x38>)
 800e39e:	461c      	mov	r4, r3
 800e3a0:	e7f3      	b.n	800e38a <__assert_func+0x12>
 800e3a2:	bf00      	nop
 800e3a4:	20000058 	.word	0x20000058
 800e3a8:	0800f2d5 	.word	0x0800f2d5
 800e3ac:	0800f2e2 	.word	0x0800f2e2
 800e3b0:	0800f310 	.word	0x0800f310

0800e3b4 <_close_r>:
 800e3b4:	b538      	push	{r3, r4, r5, lr}
 800e3b6:	4d06      	ldr	r5, [pc, #24]	; (800e3d0 <_close_r+0x1c>)
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	4608      	mov	r0, r1
 800e3be:	602b      	str	r3, [r5, #0]
 800e3c0:	f7f4 fcba 	bl	8002d38 <_close>
 800e3c4:	1c43      	adds	r3, r0, #1
 800e3c6:	d102      	bne.n	800e3ce <_close_r+0x1a>
 800e3c8:	682b      	ldr	r3, [r5, #0]
 800e3ca:	b103      	cbz	r3, 800e3ce <_close_r+0x1a>
 800e3cc:	6023      	str	r3, [r4, #0]
 800e3ce:	bd38      	pop	{r3, r4, r5, pc}
 800e3d0:	200017b4 	.word	0x200017b4

0800e3d4 <fiprintf>:
 800e3d4:	b40e      	push	{r1, r2, r3}
 800e3d6:	b503      	push	{r0, r1, lr}
 800e3d8:	4601      	mov	r1, r0
 800e3da:	ab03      	add	r3, sp, #12
 800e3dc:	4805      	ldr	r0, [pc, #20]	; (800e3f4 <fiprintf+0x20>)
 800e3de:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3e2:	6800      	ldr	r0, [r0, #0]
 800e3e4:	9301      	str	r3, [sp, #4]
 800e3e6:	f7ff fe31 	bl	800e04c <_vfiprintf_r>
 800e3ea:	b002      	add	sp, #8
 800e3ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3f0:	b003      	add	sp, #12
 800e3f2:	4770      	bx	lr
 800e3f4:	20000058 	.word	0x20000058

0800e3f8 <_fstat_r>:
 800e3f8:	b538      	push	{r3, r4, r5, lr}
 800e3fa:	4d07      	ldr	r5, [pc, #28]	; (800e418 <_fstat_r+0x20>)
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	4604      	mov	r4, r0
 800e400:	4608      	mov	r0, r1
 800e402:	4611      	mov	r1, r2
 800e404:	602b      	str	r3, [r5, #0]
 800e406:	f7f4 fca3 	bl	8002d50 <_fstat>
 800e40a:	1c43      	adds	r3, r0, #1
 800e40c:	d102      	bne.n	800e414 <_fstat_r+0x1c>
 800e40e:	682b      	ldr	r3, [r5, #0]
 800e410:	b103      	cbz	r3, 800e414 <_fstat_r+0x1c>
 800e412:	6023      	str	r3, [r4, #0]
 800e414:	bd38      	pop	{r3, r4, r5, pc}
 800e416:	bf00      	nop
 800e418:	200017b4 	.word	0x200017b4

0800e41c <_isatty_r>:
 800e41c:	b538      	push	{r3, r4, r5, lr}
 800e41e:	4d06      	ldr	r5, [pc, #24]	; (800e438 <_isatty_r+0x1c>)
 800e420:	2300      	movs	r3, #0
 800e422:	4604      	mov	r4, r0
 800e424:	4608      	mov	r0, r1
 800e426:	602b      	str	r3, [r5, #0]
 800e428:	f7f4 fca2 	bl	8002d70 <_isatty>
 800e42c:	1c43      	adds	r3, r0, #1
 800e42e:	d102      	bne.n	800e436 <_isatty_r+0x1a>
 800e430:	682b      	ldr	r3, [r5, #0]
 800e432:	b103      	cbz	r3, 800e436 <_isatty_r+0x1a>
 800e434:	6023      	str	r3, [r4, #0]
 800e436:	bd38      	pop	{r3, r4, r5, pc}
 800e438:	200017b4 	.word	0x200017b4

0800e43c <_lseek_r>:
 800e43c:	b538      	push	{r3, r4, r5, lr}
 800e43e:	4d07      	ldr	r5, [pc, #28]	; (800e45c <_lseek_r+0x20>)
 800e440:	4604      	mov	r4, r0
 800e442:	4608      	mov	r0, r1
 800e444:	4611      	mov	r1, r2
 800e446:	2200      	movs	r2, #0
 800e448:	602a      	str	r2, [r5, #0]
 800e44a:	461a      	mov	r2, r3
 800e44c:	f7f4 fc9b 	bl	8002d86 <_lseek>
 800e450:	1c43      	adds	r3, r0, #1
 800e452:	d102      	bne.n	800e45a <_lseek_r+0x1e>
 800e454:	682b      	ldr	r3, [r5, #0]
 800e456:	b103      	cbz	r3, 800e45a <_lseek_r+0x1e>
 800e458:	6023      	str	r3, [r4, #0]
 800e45a:	bd38      	pop	{r3, r4, r5, pc}
 800e45c:	200017b4 	.word	0x200017b4

0800e460 <__ascii_mbtowc>:
 800e460:	b082      	sub	sp, #8
 800e462:	b901      	cbnz	r1, 800e466 <__ascii_mbtowc+0x6>
 800e464:	a901      	add	r1, sp, #4
 800e466:	b142      	cbz	r2, 800e47a <__ascii_mbtowc+0x1a>
 800e468:	b14b      	cbz	r3, 800e47e <__ascii_mbtowc+0x1e>
 800e46a:	7813      	ldrb	r3, [r2, #0]
 800e46c:	600b      	str	r3, [r1, #0]
 800e46e:	7812      	ldrb	r2, [r2, #0]
 800e470:	1e10      	subs	r0, r2, #0
 800e472:	bf18      	it	ne
 800e474:	2001      	movne	r0, #1
 800e476:	b002      	add	sp, #8
 800e478:	4770      	bx	lr
 800e47a:	4610      	mov	r0, r2
 800e47c:	e7fb      	b.n	800e476 <__ascii_mbtowc+0x16>
 800e47e:	f06f 0001 	mvn.w	r0, #1
 800e482:	e7f8      	b.n	800e476 <__ascii_mbtowc+0x16>

0800e484 <memmove>:
 800e484:	4288      	cmp	r0, r1
 800e486:	b510      	push	{r4, lr}
 800e488:	eb01 0402 	add.w	r4, r1, r2
 800e48c:	d902      	bls.n	800e494 <memmove+0x10>
 800e48e:	4284      	cmp	r4, r0
 800e490:	4623      	mov	r3, r4
 800e492:	d807      	bhi.n	800e4a4 <memmove+0x20>
 800e494:	1e43      	subs	r3, r0, #1
 800e496:	42a1      	cmp	r1, r4
 800e498:	d008      	beq.n	800e4ac <memmove+0x28>
 800e49a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e49e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4a2:	e7f8      	b.n	800e496 <memmove+0x12>
 800e4a4:	4402      	add	r2, r0
 800e4a6:	4601      	mov	r1, r0
 800e4a8:	428a      	cmp	r2, r1
 800e4aa:	d100      	bne.n	800e4ae <memmove+0x2a>
 800e4ac:	bd10      	pop	{r4, pc}
 800e4ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e4b6:	e7f7      	b.n	800e4a8 <memmove+0x24>

0800e4b8 <__malloc_lock>:
 800e4b8:	4801      	ldr	r0, [pc, #4]	; (800e4c0 <__malloc_lock+0x8>)
 800e4ba:	f7fe bf58 	b.w	800d36e <__retarget_lock_acquire_recursive>
 800e4be:	bf00      	nop
 800e4c0:	200017a8 	.word	0x200017a8

0800e4c4 <__malloc_unlock>:
 800e4c4:	4801      	ldr	r0, [pc, #4]	; (800e4cc <__malloc_unlock+0x8>)
 800e4c6:	f7fe bf53 	b.w	800d370 <__retarget_lock_release_recursive>
 800e4ca:	bf00      	nop
 800e4cc:	200017a8 	.word	0x200017a8

0800e4d0 <_realloc_r>:
 800e4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4d4:	4680      	mov	r8, r0
 800e4d6:	4614      	mov	r4, r2
 800e4d8:	460e      	mov	r6, r1
 800e4da:	b921      	cbnz	r1, 800e4e6 <_realloc_r+0x16>
 800e4dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4e0:	4611      	mov	r1, r2
 800e4e2:	f7ff bbb9 	b.w	800dc58 <_malloc_r>
 800e4e6:	b92a      	cbnz	r2, 800e4f4 <_realloc_r+0x24>
 800e4e8:	f7ff fb4a 	bl	800db80 <_free_r>
 800e4ec:	4625      	mov	r5, r4
 800e4ee:	4628      	mov	r0, r5
 800e4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4f4:	f000 f842 	bl	800e57c <_malloc_usable_size_r>
 800e4f8:	4284      	cmp	r4, r0
 800e4fa:	4607      	mov	r7, r0
 800e4fc:	d802      	bhi.n	800e504 <_realloc_r+0x34>
 800e4fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e502:	d812      	bhi.n	800e52a <_realloc_r+0x5a>
 800e504:	4621      	mov	r1, r4
 800e506:	4640      	mov	r0, r8
 800e508:	f7ff fba6 	bl	800dc58 <_malloc_r>
 800e50c:	4605      	mov	r5, r0
 800e50e:	2800      	cmp	r0, #0
 800e510:	d0ed      	beq.n	800e4ee <_realloc_r+0x1e>
 800e512:	42bc      	cmp	r4, r7
 800e514:	4622      	mov	r2, r4
 800e516:	4631      	mov	r1, r6
 800e518:	bf28      	it	cs
 800e51a:	463a      	movcs	r2, r7
 800e51c:	f7fd f8f0 	bl	800b700 <memcpy>
 800e520:	4631      	mov	r1, r6
 800e522:	4640      	mov	r0, r8
 800e524:	f7ff fb2c 	bl	800db80 <_free_r>
 800e528:	e7e1      	b.n	800e4ee <_realloc_r+0x1e>
 800e52a:	4635      	mov	r5, r6
 800e52c:	e7df      	b.n	800e4ee <_realloc_r+0x1e>
	...

0800e530 <_read_r>:
 800e530:	b538      	push	{r3, r4, r5, lr}
 800e532:	4d07      	ldr	r5, [pc, #28]	; (800e550 <_read_r+0x20>)
 800e534:	4604      	mov	r4, r0
 800e536:	4608      	mov	r0, r1
 800e538:	4611      	mov	r1, r2
 800e53a:	2200      	movs	r2, #0
 800e53c:	602a      	str	r2, [r5, #0]
 800e53e:	461a      	mov	r2, r3
 800e540:	f7f4 fbdd 	bl	8002cfe <_read>
 800e544:	1c43      	adds	r3, r0, #1
 800e546:	d102      	bne.n	800e54e <_read_r+0x1e>
 800e548:	682b      	ldr	r3, [r5, #0]
 800e54a:	b103      	cbz	r3, 800e54e <_read_r+0x1e>
 800e54c:	6023      	str	r3, [r4, #0]
 800e54e:	bd38      	pop	{r3, r4, r5, pc}
 800e550:	200017b4 	.word	0x200017b4

0800e554 <__ascii_wctomb>:
 800e554:	b149      	cbz	r1, 800e56a <__ascii_wctomb+0x16>
 800e556:	2aff      	cmp	r2, #255	; 0xff
 800e558:	bf85      	ittet	hi
 800e55a:	238a      	movhi	r3, #138	; 0x8a
 800e55c:	6003      	strhi	r3, [r0, #0]
 800e55e:	700a      	strbls	r2, [r1, #0]
 800e560:	f04f 30ff 	movhi.w	r0, #4294967295
 800e564:	bf98      	it	ls
 800e566:	2001      	movls	r0, #1
 800e568:	4770      	bx	lr
 800e56a:	4608      	mov	r0, r1
 800e56c:	4770      	bx	lr

0800e56e <abort>:
 800e56e:	b508      	push	{r3, lr}
 800e570:	2006      	movs	r0, #6
 800e572:	f000 f833 	bl	800e5dc <raise>
 800e576:	2001      	movs	r0, #1
 800e578:	f7f4 fbb7 	bl	8002cea <_exit>

0800e57c <_malloc_usable_size_r>:
 800e57c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e580:	1f18      	subs	r0, r3, #4
 800e582:	2b00      	cmp	r3, #0
 800e584:	bfbc      	itt	lt
 800e586:	580b      	ldrlt	r3, [r1, r0]
 800e588:	18c0      	addlt	r0, r0, r3
 800e58a:	4770      	bx	lr

0800e58c <_raise_r>:
 800e58c:	291f      	cmp	r1, #31
 800e58e:	b538      	push	{r3, r4, r5, lr}
 800e590:	4604      	mov	r4, r0
 800e592:	460d      	mov	r5, r1
 800e594:	d904      	bls.n	800e5a0 <_raise_r+0x14>
 800e596:	2316      	movs	r3, #22
 800e598:	6003      	str	r3, [r0, #0]
 800e59a:	f04f 30ff 	mov.w	r0, #4294967295
 800e59e:	bd38      	pop	{r3, r4, r5, pc}
 800e5a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e5a2:	b112      	cbz	r2, 800e5aa <_raise_r+0x1e>
 800e5a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e5a8:	b94b      	cbnz	r3, 800e5be <_raise_r+0x32>
 800e5aa:	4620      	mov	r0, r4
 800e5ac:	f000 f830 	bl	800e610 <_getpid_r>
 800e5b0:	462a      	mov	r2, r5
 800e5b2:	4601      	mov	r1, r0
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5ba:	f000 b817 	b.w	800e5ec <_kill_r>
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d00a      	beq.n	800e5d8 <_raise_r+0x4c>
 800e5c2:	1c59      	adds	r1, r3, #1
 800e5c4:	d103      	bne.n	800e5ce <_raise_r+0x42>
 800e5c6:	2316      	movs	r3, #22
 800e5c8:	6003      	str	r3, [r0, #0]
 800e5ca:	2001      	movs	r0, #1
 800e5cc:	e7e7      	b.n	800e59e <_raise_r+0x12>
 800e5ce:	2400      	movs	r4, #0
 800e5d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e5d4:	4628      	mov	r0, r5
 800e5d6:	4798      	blx	r3
 800e5d8:	2000      	movs	r0, #0
 800e5da:	e7e0      	b.n	800e59e <_raise_r+0x12>

0800e5dc <raise>:
 800e5dc:	4b02      	ldr	r3, [pc, #8]	; (800e5e8 <raise+0xc>)
 800e5de:	4601      	mov	r1, r0
 800e5e0:	6818      	ldr	r0, [r3, #0]
 800e5e2:	f7ff bfd3 	b.w	800e58c <_raise_r>
 800e5e6:	bf00      	nop
 800e5e8:	20000058 	.word	0x20000058

0800e5ec <_kill_r>:
 800e5ec:	b538      	push	{r3, r4, r5, lr}
 800e5ee:	4d07      	ldr	r5, [pc, #28]	; (800e60c <_kill_r+0x20>)
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	4604      	mov	r4, r0
 800e5f4:	4608      	mov	r0, r1
 800e5f6:	4611      	mov	r1, r2
 800e5f8:	602b      	str	r3, [r5, #0]
 800e5fa:	f7f4 fb66 	bl	8002cca <_kill>
 800e5fe:	1c43      	adds	r3, r0, #1
 800e600:	d102      	bne.n	800e608 <_kill_r+0x1c>
 800e602:	682b      	ldr	r3, [r5, #0]
 800e604:	b103      	cbz	r3, 800e608 <_kill_r+0x1c>
 800e606:	6023      	str	r3, [r4, #0]
 800e608:	bd38      	pop	{r3, r4, r5, pc}
 800e60a:	bf00      	nop
 800e60c:	200017b4 	.word	0x200017b4

0800e610 <_getpid_r>:
 800e610:	f7f4 bb53 	b.w	8002cba <_getpid>

0800e614 <_init>:
 800e614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e616:	bf00      	nop
 800e618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e61a:	bc08      	pop	{r3}
 800e61c:	469e      	mov	lr, r3
 800e61e:	4770      	bx	lr

0800e620 <_fini>:
 800e620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e622:	bf00      	nop
 800e624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e626:	bc08      	pop	{r3}
 800e628:	469e      	mov	lr, r3
 800e62a:	4770      	bx	lr
