
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5c8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001af4  0800f708  0800f708  0001f708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080111fc  080111fc  000211fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011204  08011204  00021204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011208  08011208  00021208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000022c  20000008  0801120c  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000025  20000234  08011438  00030234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  2000025c  0801145d  0003025c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001550  20000270  0801146e  00030270  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  200017c0  0801146e  000317c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003026d  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000001bc  20030028  20030028  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000883  200301e4  200301e4  00040000  2**2
                  ALLOC
 15 .debug_info   000307e7  00000000  00000000  0003029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006946  00000000  00000000  00060a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002820  00000000  00000000  000673d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002558  00000000  00000000  00069bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029582  00000000  00000000  0006c148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003149b  00000000  00000000  000956ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d729b  00000000  00000000  000c6b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  0019de00  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b6a8  00000000  00000000  0019de50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000270 	.word	0x20000270
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f6f0 	.word	0x0800f6f0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000274 	.word	0x20000274
 800017c:	0800f6f0 	.word	0x0800f6f0

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b974 	b.w	8000e78 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9d08      	ldr	r5, [sp, #32]
 8000bae:	4604      	mov	r4, r0
 8000bb0:	468e      	mov	lr, r1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d14d      	bne.n	8000c52 <__udivmoddi4+0xaa>
 8000bb6:	428a      	cmp	r2, r1
 8000bb8:	4694      	mov	ip, r2
 8000bba:	d969      	bls.n	8000c90 <__udivmoddi4+0xe8>
 8000bbc:	fab2 f282 	clz	r2, r2
 8000bc0:	b152      	cbz	r2, 8000bd8 <__udivmoddi4+0x30>
 8000bc2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc6:	f1c2 0120 	rsb	r1, r2, #32
 8000bca:	fa20 f101 	lsr.w	r1, r0, r1
 8000bce:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd6:	4094      	lsls	r4, r2
 8000bd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bdc:	0c21      	lsrs	r1, r4, #16
 8000bde:	fbbe f6f8 	udiv	r6, lr, r8
 8000be2:	fa1f f78c 	uxth.w	r7, ip
 8000be6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bee:	fb06 f107 	mul.w	r1, r6, r7
 8000bf2:	4299      	cmp	r1, r3
 8000bf4:	d90a      	bls.n	8000c0c <__udivmoddi4+0x64>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfe:	f080 811f 	bcs.w	8000e40 <__udivmoddi4+0x298>
 8000c02:	4299      	cmp	r1, r3
 8000c04:	f240 811c 	bls.w	8000e40 <__udivmoddi4+0x298>
 8000c08:	3e02      	subs	r6, #2
 8000c0a:	4463      	add	r3, ip
 8000c0c:	1a5b      	subs	r3, r3, r1
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c1c:	fb00 f707 	mul.w	r7, r0, r7
 8000c20:	42a7      	cmp	r7, r4
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x92>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2c:	f080 810a 	bcs.w	8000e44 <__udivmoddi4+0x29c>
 8000c30:	42a7      	cmp	r7, r4
 8000c32:	f240 8107 	bls.w	8000e44 <__udivmoddi4+0x29c>
 8000c36:	4464      	add	r4, ip
 8000c38:	3802      	subs	r0, #2
 8000c3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3e:	1be4      	subs	r4, r4, r7
 8000c40:	2600      	movs	r6, #0
 8000c42:	b11d      	cbz	r5, 8000c4c <__udivmoddi4+0xa4>
 8000c44:	40d4      	lsrs	r4, r2
 8000c46:	2300      	movs	r3, #0
 8000c48:	e9c5 4300 	strd	r4, r3, [r5]
 8000c4c:	4631      	mov	r1, r6
 8000c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0xc2>
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	f000 80ef 	beq.w	8000e3a <__udivmoddi4+0x292>
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c62:	4630      	mov	r0, r6
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	fab3 f683 	clz	r6, r3
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d14a      	bne.n	8000d08 <__udivmoddi4+0x160>
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d302      	bcc.n	8000c7c <__udivmoddi4+0xd4>
 8000c76:	4282      	cmp	r2, r0
 8000c78:	f200 80f9 	bhi.w	8000e6e <__udivmoddi4+0x2c6>
 8000c7c:	1a84      	subs	r4, r0, r2
 8000c7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c82:	2001      	movs	r0, #1
 8000c84:	469e      	mov	lr, r3
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d0e0      	beq.n	8000c4c <__udivmoddi4+0xa4>
 8000c8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c8e:	e7dd      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000c90:	b902      	cbnz	r2, 8000c94 <__udivmoddi4+0xec>
 8000c92:	deff      	udf	#255	; 0xff
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f040 8092 	bne.w	8000dc2 <__udivmoddi4+0x21a>
 8000c9e:	eba1 010c 	sub.w	r1, r1, ip
 8000ca2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	2601      	movs	r6, #1
 8000cac:	0c20      	lsrs	r0, r4, #16
 8000cae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cb6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cba:	fb0e f003 	mul.w	r0, lr, r3
 8000cbe:	4288      	cmp	r0, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0x12c>
 8000cc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x12a>
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	f200 80cb 	bhi.w	8000e68 <__udivmoddi4+0x2c0>
 8000cd2:	4643      	mov	r3, r8
 8000cd4:	1a09      	subs	r1, r1, r0
 8000cd6:	b2a4      	uxth	r4, r4
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce8:	45a6      	cmp	lr, r4
 8000cea:	d908      	bls.n	8000cfe <__udivmoddi4+0x156>
 8000cec:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf4:	d202      	bcs.n	8000cfc <__udivmoddi4+0x154>
 8000cf6:	45a6      	cmp	lr, r4
 8000cf8:	f200 80bb 	bhi.w	8000e72 <__udivmoddi4+0x2ca>
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d06:	e79c      	b.n	8000c42 <__udivmoddi4+0x9a>
 8000d08:	f1c6 0720 	rsb	r7, r6, #32
 8000d0c:	40b3      	lsls	r3, r6
 8000d0e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d12:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d16:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1e:	431c      	orrs	r4, r3
 8000d20:	40f9      	lsrs	r1, r7
 8000d22:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d26:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d2e:	0c20      	lsrs	r0, r4, #16
 8000d30:	fa1f fe8c 	uxth.w	lr, ip
 8000d34:	fb09 1118 	mls	r1, r9, r8, r1
 8000d38:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d40:	4288      	cmp	r0, r1
 8000d42:	fa02 f206 	lsl.w	r2, r2, r6
 8000d46:	d90b      	bls.n	8000d60 <__udivmoddi4+0x1b8>
 8000d48:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d50:	f080 8088 	bcs.w	8000e64 <__udivmoddi4+0x2bc>
 8000d54:	4288      	cmp	r0, r1
 8000d56:	f240 8085 	bls.w	8000e64 <__udivmoddi4+0x2bc>
 8000d5a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	1a09      	subs	r1, r1, r0
 8000d62:	b2a4      	uxth	r4, r4
 8000d64:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d68:	fb09 1110 	mls	r1, r9, r0, r1
 8000d6c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d70:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d74:	458e      	cmp	lr, r1
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x1e2>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d80:	d26c      	bcs.n	8000e5c <__udivmoddi4+0x2b4>
 8000d82:	458e      	cmp	lr, r1
 8000d84:	d96a      	bls.n	8000e5c <__udivmoddi4+0x2b4>
 8000d86:	3802      	subs	r0, #2
 8000d88:	4461      	add	r1, ip
 8000d8a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d92:	eba1 010e 	sub.w	r1, r1, lr
 8000d96:	42a1      	cmp	r1, r4
 8000d98:	46c8      	mov	r8, r9
 8000d9a:	46a6      	mov	lr, r4
 8000d9c:	d356      	bcc.n	8000e4c <__udivmoddi4+0x2a4>
 8000d9e:	d053      	beq.n	8000e48 <__udivmoddi4+0x2a0>
 8000da0:	b15d      	cbz	r5, 8000dba <__udivmoddi4+0x212>
 8000da2:	ebb3 0208 	subs.w	r2, r3, r8
 8000da6:	eb61 010e 	sbc.w	r1, r1, lr
 8000daa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dae:	fa22 f306 	lsr.w	r3, r2, r6
 8000db2:	40f1      	lsrs	r1, r6
 8000db4:	431f      	orrs	r7, r3
 8000db6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dba:	2600      	movs	r6, #0
 8000dbc:	4631      	mov	r1, r6
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	f1c2 0320 	rsb	r3, r2, #32
 8000dc6:	40d8      	lsrs	r0, r3
 8000dc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dcc:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	4301      	orrs	r1, r0
 8000dd4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd8:	fa1f fe8c 	uxth.w	lr, ip
 8000ddc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de0:	fb07 3610 	mls	r6, r7, r0, r3
 8000de4:	0c0b      	lsrs	r3, r1, #16
 8000de6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dea:	fb00 f60e 	mul.w	r6, r0, lr
 8000dee:	429e      	cmp	r6, r3
 8000df0:	fa04 f402 	lsl.w	r4, r4, r2
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x260>
 8000df6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfe:	d22f      	bcs.n	8000e60 <__udivmoddi4+0x2b8>
 8000e00:	429e      	cmp	r6, r3
 8000e02:	d92d      	bls.n	8000e60 <__udivmoddi4+0x2b8>
 8000e04:	3802      	subs	r0, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	b289      	uxth	r1, r1
 8000e0c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e10:	fb07 3316 	mls	r3, r7, r6, r3
 8000e14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e18:	fb06 f30e 	mul.w	r3, r6, lr
 8000e1c:	428b      	cmp	r3, r1
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x28a>
 8000e20:	eb1c 0101 	adds.w	r1, ip, r1
 8000e24:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e28:	d216      	bcs.n	8000e58 <__udivmoddi4+0x2b0>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d914      	bls.n	8000e58 <__udivmoddi4+0x2b0>
 8000e2e:	3e02      	subs	r6, #2
 8000e30:	4461      	add	r1, ip
 8000e32:	1ac9      	subs	r1, r1, r3
 8000e34:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e38:	e738      	b.n	8000cac <__udivmoddi4+0x104>
 8000e3a:	462e      	mov	r6, r5
 8000e3c:	4628      	mov	r0, r5
 8000e3e:	e705      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000e40:	4606      	mov	r6, r0
 8000e42:	e6e3      	b.n	8000c0c <__udivmoddi4+0x64>
 8000e44:	4618      	mov	r0, r3
 8000e46:	e6f8      	b.n	8000c3a <__udivmoddi4+0x92>
 8000e48:	454b      	cmp	r3, r9
 8000e4a:	d2a9      	bcs.n	8000da0 <__udivmoddi4+0x1f8>
 8000e4c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e50:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e54:	3801      	subs	r0, #1
 8000e56:	e7a3      	b.n	8000da0 <__udivmoddi4+0x1f8>
 8000e58:	4646      	mov	r6, r8
 8000e5a:	e7ea      	b.n	8000e32 <__udivmoddi4+0x28a>
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	e794      	b.n	8000d8a <__udivmoddi4+0x1e2>
 8000e60:	4640      	mov	r0, r8
 8000e62:	e7d1      	b.n	8000e08 <__udivmoddi4+0x260>
 8000e64:	46d0      	mov	r8, sl
 8000e66:	e77b      	b.n	8000d60 <__udivmoddi4+0x1b8>
 8000e68:	3b02      	subs	r3, #2
 8000e6a:	4461      	add	r1, ip
 8000e6c:	e732      	b.n	8000cd4 <__udivmoddi4+0x12c>
 8000e6e:	4630      	mov	r0, r6
 8000e70:	e709      	b.n	8000c86 <__udivmoddi4+0xde>
 8000e72:	4464      	add	r4, ip
 8000e74:	3802      	subs	r0, #2
 8000e76:	e742      	b.n	8000cfe <__udivmoddi4+0x156>

08000e78 <__aeabi_idiv0>:
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e86:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000e8a:	4905      	ldr	r1, [pc, #20]	; (8000ea0 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	58000800 	.word	0x58000800

08000ea4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b085      	sub	sp, #20
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef6:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f00:	68fb      	ldr	r3, [r7, #12]
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000f12:	f003 fce7 	bl	80048e4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000f16:	f003 fceb 	bl	80048f0 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000f1a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000f1e:	f7ff ffad 	bl	8000e7c <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000f22:	f009 fd57 	bl	800a9d4 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000f26:	f000 f821 	bl	8000f6c <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000f2a:	f000 f8c3 	bl	80010b4 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000f2e:	bf00      	nop
}
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000f34:	b5b0      	push	{r4, r5, r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <APPD_EnableCPU2+0x34>)
 8000f3c:	1d3c      	adds	r4, r7, #4
 8000f3e:	461d      	mov	r5, r3
 8000f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f48:	c403      	stmia	r4!, {r0, r1}
 8000f4a:	8022      	strh	r2, [r4, #0]
 8000f4c:	3402      	adds	r4, #2
 8000f4e:	0c13      	lsrs	r3, r2, #16
 8000f50:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f52:	f00b fa8f 	bl	800c474 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f00a f8e0 	bl	800b11e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000f5e:	bf00      	nop
}
 8000f60:	3720      	adds	r7, #32
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bdb0      	pop	{r4, r5, r7, pc}
 8000f66:	bf00      	nop
 8000f68:	0800f708 	.word	0x0800f708

08000f6c <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	77fb      	strb	r3, [r7, #31]
 8000f90:	e038      	b.n	8001004 <APPD_SetCPU2GpioConfig+0x98>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000f92:	7ffb      	ldrb	r3, [r7, #31]
 8000f94:	4a44      	ldr	r2, [pc, #272]	; (80010a8 <APPD_SetCPU2GpioConfig+0x13c>)
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	4413      	add	r3, r2
 8000f9a:	799b      	ldrb	r3, [r3, #6]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d02b      	beq.n	8000ff8 <APPD_SetCPU2GpioConfig+0x8c>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000fa0:	7ffb      	ldrb	r3, [r7, #31]
 8000fa2:	4a41      	ldr	r2, [pc, #260]	; (80010a8 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000fa8:	4a40      	ldr	r2, [pc, #256]	; (80010ac <APPD_SetCPU2GpioConfig+0x140>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d01b      	beq.n	8000fe6 <APPD_SetCPU2GpioConfig+0x7a>
 8000fae:	4a3f      	ldr	r2, [pc, #252]	; (80010ac <APPD_SetCPU2GpioConfig+0x140>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d823      	bhi.n	8000ffc <APPD_SetCPU2GpioConfig+0x90>
 8000fb4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fb8:	d003      	beq.n	8000fc2 <APPD_SetCPU2GpioConfig+0x56>
 8000fba:	4a3d      	ldr	r2, [pc, #244]	; (80010b0 <APPD_SetCPU2GpioConfig+0x144>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d009      	beq.n	8000fd4 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000fc0:	e01c      	b.n	8000ffc <APPD_SetCPU2GpioConfig+0x90>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000fc2:	7ffb      	ldrb	r3, [r7, #31]
 8000fc4:	4a38      	ldr	r2, [pc, #224]	; (80010a8 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	4413      	add	r3, r2
 8000fca:	889a      	ldrh	r2, [r3, #4]
 8000fcc:	8bbb      	ldrh	r3, [r7, #28]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	83bb      	strh	r3, [r7, #28]
          break;
 8000fd2:	e014      	b.n	8000ffe <APPD_SetCPU2GpioConfig+0x92>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000fd4:	7ffb      	ldrb	r3, [r7, #31]
 8000fd6:	4a34      	ldr	r2, [pc, #208]	; (80010a8 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	4413      	add	r3, r2
 8000fdc:	889a      	ldrh	r2, [r3, #4]
 8000fde:	8b7b      	ldrh	r3, [r7, #26]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	837b      	strh	r3, [r7, #26]
          break;
 8000fe4:	e00b      	b.n	8000ffe <APPD_SetCPU2GpioConfig+0x92>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000fe6:	7ffb      	ldrb	r3, [r7, #31]
 8000fe8:	4a2f      	ldr	r2, [pc, #188]	; (80010a8 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	4413      	add	r3, r2
 8000fee:	889a      	ldrh	r2, [r3, #4]
 8000ff0:	8b3b      	ldrh	r3, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	833b      	strh	r3, [r7, #24]
          break;
 8000ff6:	e002      	b.n	8000ffe <APPD_SetCPU2GpioConfig+0x92>
      }
    }
 8000ff8:	bf00      	nop
 8000ffa:	e000      	b.n	8000ffe <APPD_SetCPU2GpioConfig+0x92>
          break;
 8000ffc:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000ffe:	7ffb      	ldrb	r3, [r7, #31]
 8001000:	3301      	adds	r3, #1
 8001002:	77fb      	strb	r3, [r7, #31]
 8001004:	7ffb      	ldrb	r3, [r7, #31]
 8001006:	2b25      	cmp	r3, #37	; 0x25
 8001008:	d9c3      	bls.n	8000f92 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001012:	2303      	movs	r3, #3
 8001014:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8001016:	8bbb      	ldrh	r3, [r7, #28]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d014      	beq.n	8001046 <APPD_SetCPU2GpioConfig+0xda>
  {
    gpio_config.Pin = gpioa_pin_list;
 800101c:	8bbb      	ldrh	r3, [r7, #28]
 800101e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff ff3f 	bl	8000ea4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8001026:	2001      	movs	r0, #1
 8001028:	f7ff ff55 	bl	8000ed6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001034:	f004 f950 	bl	80052d8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8001038:	8bbb      	ldrh	r3, [r7, #28]
 800103a:	2200      	movs	r2, #0
 800103c:	4619      	mov	r1, r3
 800103e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001042:	f004 fab1 	bl	80055a8 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8001046:	8b7b      	ldrh	r3, [r7, #26]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d012      	beq.n	8001072 <APPD_SetCPU2GpioConfig+0x106>
  {
    gpio_config.Pin = gpiob_pin_list;
 800104c:	8b7b      	ldrh	r3, [r7, #26]
 800104e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001050:	2002      	movs	r0, #2
 8001052:	f7ff ff27 	bl	8000ea4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8001056:	2002      	movs	r0, #2
 8001058:	f7ff ff3d 	bl	8000ed6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	4619      	mov	r1, r3
 8001060:	4813      	ldr	r0, [pc, #76]	; (80010b0 <APPD_SetCPU2GpioConfig+0x144>)
 8001062:	f004 f939 	bl	80052d8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8001066:	8b7b      	ldrh	r3, [r7, #26]
 8001068:	2200      	movs	r2, #0
 800106a:	4619      	mov	r1, r3
 800106c:	4810      	ldr	r0, [pc, #64]	; (80010b0 <APPD_SetCPU2GpioConfig+0x144>)
 800106e:	f004 fa9b 	bl	80055a8 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001072:	8b3b      	ldrh	r3, [r7, #24]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d013      	beq.n	80010a0 <APPD_SetCPU2GpioConfig+0x134>
  {
    gpio_config.Pin = gpioc_pin_list;
 8001078:	8b3b      	ldrh	r3, [r7, #24]
 800107a:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800107c:	2004      	movs	r0, #4
 800107e:	f7ff ff11 	bl	8000ea4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001082:	2004      	movs	r0, #4
 8001084:	f7ff ff27 	bl	8000ed6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	4619      	mov	r1, r3
 800108c:	4807      	ldr	r0, [pc, #28]	; (80010ac <APPD_SetCPU2GpioConfig+0x140>)
 800108e:	f004 f923 	bl	80052d8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001092:	8b3b      	ldrh	r3, [r7, #24]
 8001094:	2200      	movs	r2, #0
 8001096:	4619      	mov	r1, r3
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <APPD_SetCPU2GpioConfig+0x140>)
 800109a:	f004 fa85 	bl	80055a8 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
}
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	08010bcc 	.word	0x08010bcc
 80010ac:	48000800 	.word	0x48000800
 80010b0:	48000400 	.word	0x48000400

080010b4 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80010b8:	bf00      	nop
}
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 80010c6:	f001 fc2b 	bl	8002920 <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 80010ca:	bf00      	nop
}
 80010cc:	bd80      	pop	{r7, pc}

080010ce <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b084      	sub	sp, #16
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	60f8      	str	r0, [r7, #12]
 80010d6:	460b      	mov	r3, r1
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80010dc:	897a      	ldrh	r2, [r7, #10]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68f9      	ldr	r1, [r7, #12]
 80010e2:	2000      	movs	r0, #0
 80010e4:	f001 fa36 	bl	8002554 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80010e8:	bf00      	nop
}
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <LL_C2_PWR_SetPowerMode+0x28>)
 80010fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010fe:	f023 0207 	bic.w	r2, r3, #7
 8001102:	4905      	ldr	r1, [pc, #20]	; (8001118 <LL_C2_PWR_SetPowerMode+0x28>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4313      	orrs	r3, r2
 8001108:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	58000400 	.word	0x58000400

0800111c <LL_EXTI_EnableIT_32_63>:
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <LL_EXTI_EnableIT_32_63+0x24>)
 8001126:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800112a:	4905      	ldr	r1, [pc, #20]	; (8001140 <LL_EXTI_EnableIT_32_63+0x24>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4313      	orrs	r3, r2
 8001130:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	58000800 	.word	0x58000800

08001144 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800114c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001152:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800115e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800116a:	4313      	orrs	r3, r2
 800116c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	cafecafe 	.word	0xcafecafe

08001180 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4313      	orrs	r3, r2
 800119a:	608b      	str	r3, [r1, #8]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <LL_DBGMCU_GetDeviceID+0x18>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e0042000 	.word	0xe0042000

080011c4 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80011c8:	4b04      	ldr	r3, [pc, #16]	; (80011dc <LL_DBGMCU_GetRevisionID+0x18>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	0c1b      	lsrs	r3, r3, #16
 80011ce:	b29b      	uxth	r3, r3
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e0042000 	.word	0xe0042000

080011e0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	22ff      	movs	r2, #255	; 0xff
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80011fa:	b480      	push	{r7}
 80011fc:	b083      	sub	sp, #12
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	22ca      	movs	r2, #202	; 0xca
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2253      	movs	r2, #83	; 0x53
 800120c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
 8001222:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f023 0207 	bic.w	r2, r3, #7
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	609a      	str	r2, [r3, #8]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <MX_APPE_Config+0x18>)
 8001246:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800124a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800124c:	f000 f830 	bl	80012b0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001250:	f000 f835 	bl	80012be <Config_HSE>

  return;
 8001254:	bf00      	nop
}
 8001256:	bd80      	pop	{r7, pc}
 8001258:	58004000 	.word	0x58004000

0800125c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001260:	f000 f841 	bl	80012e6 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001264:	f000 f85a 	bl	800131c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001268:	4909      	ldr	r1, [pc, #36]	; (8001290 <MX_APPE_Init+0x34>)
 800126a:	2000      	movs	r0, #0
 800126c:	f000 fee2 	bl	8002034 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001270:	f7ff fe4d 	bl	8000f0e <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001274:	2101      	movs	r1, #1
 8001276:	2001      	movs	r0, #1
 8001278:	f00b f99a 	bl	800c5b0 <UTIL_LPM_SetOffMode>

  APPE_Led_Init();
 800127c:	f000 f9b2 	bl	80015e4 <APPE_Led_Init>

  APPE_Button_Init();
 8001280:	f000 f9c0 	bl	8001604 <APPE_Button_Init>
  
  RxUART_Init();
 8001284:	f000 fa2a 	bl	80016dc <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001288:	f000 f858 	bl	800133c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800128c:	bf00      	nop
}
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000498 	.word	0x20000498

08001294 <Init_Smps>:

void Init_Smps(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001298:	bf00      	nop
}
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <Init_Exti>:

void Init_Exti(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80012a6:	2050      	movs	r0, #80	; 0x50
 80012a8:	f7ff ff38 	bl	800111c <LL_EXTI_EnableIT_32_63>

  return;
 80012ac:	bf00      	nop
}
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80012b4:	bf00      	nop
}
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f009 fdbf 	bl	800ae48 <OTP_Read>
 80012ca:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	799b      	ldrb	r3, [r3, #6]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff34 	bl	8001144 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
}
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <System_Init>:

static void System_Init(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
  Init_Smps();
 80012ea:	f7ff ffd3 	bl	8001294 <Init_Smps>

  Init_Exti();
 80012ee:	f7ff ffd8 	bl	80012a2 <Init_Exti>

  Init_Rtc();
 80012f2:	f000 f803 	bl	80012fc <Init_Rtc>

  return;
 80012f6:	bf00      	nop
}
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <Init_Rtc>:

static void Init_Rtc(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <Init_Rtc+0x1c>)
 8001302:	f7ff ff7a 	bl	80011fa <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001306:	2100      	movs	r1, #0
 8001308:	4803      	ldr	r0, [pc, #12]	; (8001318 <Init_Rtc+0x1c>)
 800130a:	f7ff ff86 	bl	800121a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800130e:	4802      	ldr	r0, [pc, #8]	; (8001318 <Init_Rtc+0x1c>)
 8001310:	f7ff ff66 	bl	80011e0 <LL_RTC_EnableWriteProtection>

  return;
 8001314:	bf00      	nop
}
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40002800 	.word	0x40002800

0800131c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001320:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001324:	f7ff ff2c 	bl	8001180 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001328:	f00b f930 	bl	800c58c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800132c:	2004      	movs	r0, #4
 800132e:	f7ff fedf 	bl	80010f0 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 8001332:	f004 fa33 	bl	800579c <HAL_PWREx_EnableSRAMRetention>

  return;
 8001336:	bf00      	nop
}
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001342:	f00a fee1 	bl	800c108 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001346:	4a11      	ldr	r2, [pc, #68]	; (800138c <appe_Tl_Init+0x50>)
 8001348:	2100      	movs	r1, #0
 800134a:	2040      	movs	r0, #64	; 0x40
 800134c:	f00b fa5c 	bl	800c808 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001350:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <appe_Tl_Init+0x54>)
 8001352:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <appe_Tl_Init+0x58>)
 8001356:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001358:	463b      	mov	r3, r7
 800135a:	4619      	mov	r1, r3
 800135c:	480e      	ldr	r0, [pc, #56]	; (8001398 <appe_Tl_Init+0x5c>)
 800135e:	f009 ffb9 	bl	800b2d4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <appe_Tl_Init+0x60>)
 8001364:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <appe_Tl_Init+0x64>)
 8001368:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <appe_Tl_Init+0x68>)
 800136c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800136e:	f240 533c 	movw	r3, #1340	; 0x53c
 8001372:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	4618      	mov	r0, r3
 800137a:	f00b f807 	bl	800c38c <TL_MM_Init>

  TL_Enable();
 800137e:	f00a febd 	bl	800c0fc <TL_Enable>

  return;
 8001382:	bf00      	nop
}
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	0800b30d 	.word	0x0800b30d
 8001390:	20030734 	.word	0x20030734
 8001394:	080013a9 	.word	0x080013a9
 8001398:	080013c1 	.word	0x080013c1
 800139c:	2003094c 	.word	0x2003094c
 80013a0:	20030840 	.word	0x20030840
 80013a4:	200301f8 	.word	0x200301f8

080013a8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80013b2:	bf00      	nop
}
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	330b      	adds	r3, #11
 80013ce:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80013da:	2b07      	cmp	r3, #7
 80013dc:	d860      	bhi.n	80014a0 <APPE_SysUserEvtRx+0xe0>
 80013de:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <APPE_SysUserEvtRx+0x24>)
 80013e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e4:	08001405 	.word	0x08001405
 80013e8:	08001447 	.word	0x08001447
 80013ec:	08001455 	.word	0x08001455
 80013f0:	080014a1 	.word	0x080014a1
 80013f4:	08001471 	.word	0x08001471
 80013f8:	08001481 	.word	0x08001481
 80013fc:	08001489 	.word	0x08001489
 8001400:	08001499 	.word	0x08001499
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4618      	mov	r0, r3
 800140a:	f009 feb5 	bl	800b178 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800140e:	7b3b      	ldrb	r3, [r7, #12]
 8001410:	4619      	mov	r1, r3
 8001412:	7b7b      	ldrb	r3, [r7, #13]
 8001414:	461a      	mov	r2, r3
 8001416:	7bbb      	ldrb	r3, [r7, #14]
 8001418:	4824      	ldr	r0, [pc, #144]	; (80014ac <APPE_SysUserEvtRx+0xec>)
 800141a:	f00b ffe1 	bl	800d3e0 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800141e:	7c3b      	ldrb	r3, [r7, #16]
 8001420:	4619      	mov	r1, r3
 8001422:	4823      	ldr	r0, [pc, #140]	; (80014b0 <APPE_SysUserEvtRx+0xf0>)
 8001424:	f00b ffdc 	bl	800d3e0 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001428:	7dbb      	ldrb	r3, [r7, #22]
 800142a:	4619      	mov	r1, r3
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	461a      	mov	r2, r3
 8001430:	7e3b      	ldrb	r3, [r7, #24]
 8001432:	4820      	ldr	r0, [pc, #128]	; (80014b4 <APPE_SysUserEvtRx+0xf4>)
 8001434:	f00b ffd4 	bl	800d3e0 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001438:	481f      	ldr	r0, [pc, #124]	; (80014b8 <APPE_SysUserEvtRx+0xf8>)
 800143a:	f00b ffd1 	bl	800d3e0 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f870 	bl	8001524 <APPE_SysEvtReadyProcessing>
    break;
 8001444:	e02d      	b.n	80014a2 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8001446:	481d      	ldr	r0, [pc, #116]	; (80014bc <APPE_SysUserEvtRx+0xfc>)
 8001448:	f00b ffca 	bl	800d3e0 <iprintf>
    APPE_SysEvtError(pPayload);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f843 	bl	80014d8 <APPE_SysEvtError>
    break;
 8001452:	e026      	b.n	80014a2 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001454:	481a      	ldr	r0, [pc, #104]	; (80014c0 <APPE_SysUserEvtRx+0x100>)
 8001456:	f00c f85f 	bl	800d518 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800145e:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	461a      	mov	r2, r3
 8001468:	4816      	ldr	r0, [pc, #88]	; (80014c4 <APPE_SysUserEvtRx+0x104>)
 800146a:	f00b ffb9 	bl	800d3e0 <iprintf>
    break;
 800146e:	e018      	b.n	80014a2 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4619      	mov	r1, r3
 8001478:	4813      	ldr	r0, [pc, #76]	; (80014c8 <APPE_SysUserEvtRx+0x108>)
 800147a:	f00b ffb1 	bl	800d3e0 <iprintf>
    break;
 800147e:	e010      	b.n	80014a2 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001480:	4812      	ldr	r0, [pc, #72]	; (80014cc <APPE_SysUserEvtRx+0x10c>)
 8001482:	f00b ffad 	bl	800d3e0 <iprintf>
    break;
 8001486:	e00c      	b.n	80014a2 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4619      	mov	r1, r3
 8001490:	480f      	ldr	r0, [pc, #60]	; (80014d0 <APPE_SysUserEvtRx+0x110>)
 8001492:	f00b ffa5 	bl	800d3e0 <iprintf>
    break;
 8001496:	e004      	b.n	80014a2 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001498:	480e      	ldr	r0, [pc, #56]	; (80014d4 <APPE_SysUserEvtRx+0x114>)
 800149a:	f00b ffa1 	bl	800d3e0 <iprintf>
    break;
 800149e:	e000      	b.n	80014a2 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 80014a0:	bf00      	nop
  }

  return;
 80014a2:	bf00      	nop
}
 80014a4:	3720      	adds	r7, #32
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	0800f724 	.word	0x0800f724
 80014b0:	0800f748 	.word	0x0800f748
 80014b4:	0800f764 	.word	0x0800f764
 80014b8:	0800f77c 	.word	0x0800f77c
 80014bc:	0800f79c 	.word	0x0800f79c
 80014c0:	0800f7c0 	.word	0x0800f7c0
 80014c4:	0800f810 	.word	0x0800f810
 80014c8:	0800f838 	.word	0x0800f838
 80014cc:	0800f874 	.word	0x0800f874
 80014d0:	0800f898 	.word	0x0800f898
 80014d4:	0800f8d4 	.word	0x0800f8d4

080014d8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	330b      	adds	r3, #11
 80014e6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3302      	adds	r3, #2
 80014ec:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	4619      	mov	r1, r3
 80014f4:	4808      	ldr	r0, [pc, #32]	; (8001518 <APPE_SysEvtError+0x40>)
 80014f6:	f00b ff73 	bl	800d3e0 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d103      	bne.n	800150a <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001502:	4806      	ldr	r0, [pc, #24]	; (800151c <APPE_SysEvtError+0x44>)
 8001504:	f00c f808 	bl	800d518 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001508:	e003      	b.n	8001512 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <APPE_SysEvtError+0x48>)
 800150c:	f00c f804 	bl	800d518 <puts>
  return;
 8001510:	bf00      	nop
}
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	0800f8f8 	.word	0x0800f8f8
 800151c:	0800f928 	.word	0x0800f928
 8001520:	0800f964 	.word	0x0800f964

08001524 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08a      	sub	sp, #40	; 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800152c:	f107 0308 	add.w	r3, r7, #8
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800153a:	2300      	movs	r3, #0
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	330b      	adds	r3, #11
 8001548:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3302      	adds	r3, #2
 800154e:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d128      	bne.n	80015aa <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001558:	481d      	ldr	r0, [pc, #116]	; (80015d0 <APPE_SysEvtReadyProcessing+0xac>)
 800155a:	f00b ffdd 	bl	800d518 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800155e:	f7ff fce9 	bl	8000f34 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001562:	230f      	movs	r3, #15
 8001564:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001566:	237f      	movs	r3, #127	; 0x7f
 8001568:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800156a:	f7ff fe2b 	bl	80011c4 <LL_DBGMCU_GetRevisionID>
 800156e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001570:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001572:	4818      	ldr	r0, [pc, #96]	; (80015d4 <APPE_SysEvtReadyProcessing+0xb0>)
 8001574:	f00b ff34 	bl	800d3e0 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	b29b      	uxth	r3, r3
 800157c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800157e:	f7ff fe13 	bl	80011a8 <LL_DBGMCU_GetDeviceID>
 8001582:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001584:	6a39      	ldr	r1, [r7, #32]
 8001586:	4814      	ldr	r0, [pc, #80]	; (80015d8 <APPE_SysEvtReadyProcessing+0xb4>)
 8001588:	f00b ff2a 	bl	800d3e0 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	b29b      	uxth	r3, r3
 8001590:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	4618      	mov	r0, r3
 8001598:	f009 fdd8 	bl	800b14c <SHCI_C2_Config>

    APP_BLE_Init();
 800159c:	f001 fd0c 	bl	8002fb8 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80015a0:	2100      	movs	r1, #0
 80015a2:	2001      	movs	r0, #1
 80015a4:	f00b f804 	bl	800c5b0 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80015a8:	e00e      	b.n	80015c8 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d106      	bne.n	80015c0 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80015b2:	480a      	ldr	r0, [pc, #40]	; (80015dc <APPE_SysEvtReadyProcessing+0xb8>)
 80015b4:	f00b ff14 	bl	800d3e0 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
  return;
 80015be:	e003      	b.n	80015c8 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80015c0:	4807      	ldr	r0, [pc, #28]	; (80015e0 <APPE_SysEvtReadyProcessing+0xbc>)
 80015c2:	f00b ff0d 	bl	800d3e0 <iprintf>
  return;
 80015c6:	bf00      	nop
}
 80015c8:	3728      	adds	r7, #40	; 0x28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	0800f99c 	.word	0x0800f99c
 80015d4:	0800f9b8 	.word	0x0800f9b8
 80015d8:	0800f9dc 	.word	0x0800f9dc
 80015dc:	0800f9fc 	.word	0x0800f9fc
 80015e0:	0800fa30 	.word	0x0800fa30

080015e4 <APPE_Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
void APPE_Led_Init( void )
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 80015e8:	2000      	movs	r0, #0
 80015ea:	f002 ff6f 	bl	80044cc <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f002 ff6c 	bl	80044cc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80015f4:	2002      	movs	r0, #2
 80015f6:	f002 ff69 	bl	80044cc <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 80015fa:	2001      	movs	r0, #1
 80015fc:	f002 ffa0 	bl	8004540 <BSP_LED_On>
#endif

  return;
 8001600:	bf00      	nop
}
 8001602:	bd80      	pop	{r7, pc}

08001604 <APPE_Button_Init>:

void APPE_Button_Init( void )
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8001608:	2101      	movs	r1, #1
 800160a:	2000      	movs	r0, #0
 800160c:	f002 ffcc 	bl	80045a8 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8001610:	2101      	movs	r1, #1
 8001612:	2001      	movs	r0, #1
 8001614:	f002 ffc8 	bl	80045a8 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8001618:	2101      	movs	r1, #1
 800161a:	2002      	movs	r0, #2
 800161c:	f002 ffc4 	bl	80045a8 <BSP_PB_Init>
#endif

  return;
 8001620:	bf00      	nop
}
 8001622:	bd80      	pop	{r7, pc}

08001624 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f00a fff0 	bl	800c610 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001638:	bf00      	nop
}
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	f00a ffde 	bl	800c610 <UTIL_SEQ_Run>

  return;
 8001654:	bf00      	nop
}
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001664:	2100      	movs	r1, #0
 8001666:	2040      	movs	r0, #64	; 0x40
 8001668:	f00b f8f0 	bl	800c84c <UTIL_SEQ_SetTask>
  return;
 800166c:	bf00      	nop
}
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800167c:	2002      	movs	r0, #2
 800167e:	f00b f951 	bl	800c924 <UTIL_SEQ_SetEvt>
  return;
 8001682:	bf00      	nop
}
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001692:	2002      	movs	r0, #2
 8001694:	f00b f966 	bl	800c964 <UTIL_SEQ_WaitEvt>
  return;
 8001698:	bf00      	nop
}
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	2b40      	cmp	r3, #64	; 0x40
 80016ae:	d00c      	beq.n	80016ca <HAL_GPIO_EXTI_Callback+0x2a>
 80016b0:	2b40      	cmp	r3, #64	; 0x40
 80016b2:	dc0d      	bgt.n	80016d0 <HAL_GPIO_EXTI_Callback+0x30>
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d002      	beq.n	80016be <HAL_GPIO_EXTI_Callback+0x1e>
 80016b8:	2b10      	cmp	r3, #16
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_EXTI_Callback+0x24>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 80016bc:	e008      	b.n	80016d0 <HAL_GPIO_EXTI_Callback+0x30>
      APP_BLE_Key_Button1_Action();
 80016be:	f001 ff8b 	bl	80035d8 <APP_BLE_Key_Button1_Action>
      break; 
 80016c2:	e006      	b.n	80016d2 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 80016c4:	f001 ff8e 	bl	80035e4 <APP_BLE_Key_Button2_Action>
      break; 
 80016c8:	e003      	b.n	80016d2 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 80016ca:	f001 ff93 	bl	80035f4 <APP_BLE_Key_Button3_Action>
      break;
 80016ce:	e000      	b.n	80016d2 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 80016d0:	bf00      	nop

  }
  return;
 80016d2:	bf00      	nop
}
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <RxUART_Init>:

static void RxUART_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 80016e0:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <RxUART_Init+0x14>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	4903      	ldr	r1, [pc, #12]	; (80016f4 <RxUART_Init+0x18>)
 80016e6:	2000      	movs	r0, #0
 80016e8:	f000 ff10 	bl	800250c <HW_UART_Receive_IT>
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	080016f9 	.word	0x080016f9
 80016f4:	20000294 	.word	0x20000294

080016f8 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 80016fc:	4b15      	ldr	r3, [pc, #84]	; (8001754 <RxCpltCallback+0x5c>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	2bff      	cmp	r3, #255	; 0xff
 8001702:	d81e      	bhi.n	8001742 <RxCpltCallback+0x4a>
  {
    if (aRxBuffer[0] == '\r')
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <RxCpltCallback+0x60>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b0d      	cmp	r3, #13
 800170a:	d10f      	bne.n	800172c <RxCpltCallback+0x34>
    {
      APP_DBG_MSG("received %s\n", CommandString);
 800170c:	4913      	ldr	r1, [pc, #76]	; (800175c <RxCpltCallback+0x64>)
 800170e:	4814      	ldr	r0, [pc, #80]	; (8001760 <RxCpltCallback+0x68>)
 8001710:	f00b fe66 	bl	800d3e0 <iprintf>

      UartCmdExecute();
 8001714:	f000 f828 	bl	8001768 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <RxCpltCallback+0x5c>)
 800171a:	2200      	movs	r2, #0
 800171c:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 800171e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001722:	2100      	movs	r1, #0
 8001724:	480d      	ldr	r0, [pc, #52]	; (800175c <RxCpltCallback+0x64>)
 8001726:	f00b f9e9 	bl	800cafc <memset>
 800172a:	e00a      	b.n	8001742 <RxCpltCallback+0x4a>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <RxCpltCallback+0x5c>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	b291      	uxth	r1, r2
 8001734:	4a07      	ldr	r2, [pc, #28]	; (8001754 <RxCpltCallback+0x5c>)
 8001736:	8011      	strh	r1, [r2, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <RxCpltCallback+0x60>)
 800173c:	7819      	ldrb	r1, [r3, #0]
 800173e:	4b07      	ldr	r3, [pc, #28]	; (800175c <RxCpltCallback+0x64>)
 8001740:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <RxCpltCallback+0x6c>)
 8001744:	2201      	movs	r2, #1
 8001746:	4904      	ldr	r1, [pc, #16]	; (8001758 <RxCpltCallback+0x60>)
 8001748:	2000      	movs	r0, #0
 800174a:	f000 fedf 	bl	800250c <HW_UART_Receive_IT>
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000039c 	.word	0x2000039c
 8001758:	20000294 	.word	0x20000294
 800175c:	2000029c 	.word	0x2000029c
 8001760:	0800fa64 	.word	0x0800fa64
 8001764:	080016f9 	.word	0x080016f9

08001768 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 800176c:	491c      	ldr	r1, [pc, #112]	; (80017e0 <UartCmdExecute+0x78>)
 800176e:	481d      	ldr	r0, [pc, #116]	; (80017e4 <UartCmdExecute+0x7c>)
 8001770:	f7fe fd06 	bl	8000180 <strcmp>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10a      	bne.n	8001790 <UartCmdExecute+0x28>
  {
    APP_DBG_MSG("SW1 OK\n");
 800177a:	481b      	ldr	r0, [pc, #108]	; (80017e8 <UartCmdExecute+0x80>)
 800177c:	f00b fecc 	bl	800d518 <puts>
    exti_handle.Line = EXTI_LINE_0;
 8001780:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <UartCmdExecute+0x84>)
 8001782:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8001786:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001788:	4818      	ldr	r0, [pc, #96]	; (80017ec <UartCmdExecute+0x84>)
 800178a:	f003 fd83 	bl	8005294 <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 800178e:	e025      	b.n	80017dc <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 8001790:	4917      	ldr	r1, [pc, #92]	; (80017f0 <UartCmdExecute+0x88>)
 8001792:	4814      	ldr	r0, [pc, #80]	; (80017e4 <UartCmdExecute+0x7c>)
 8001794:	f7fe fcf4 	bl	8000180 <strcmp>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <UartCmdExecute+0x4a>
    APP_DBG_MSG("SW2 OK\n");
 800179e:	4815      	ldr	r0, [pc, #84]	; (80017f4 <UartCmdExecute+0x8c>)
 80017a0:	f00b feba 	bl	800d518 <puts>
    exti_handle.Line = EXTI_LINE_4;
 80017a4:	4b11      	ldr	r3, [pc, #68]	; (80017ec <UartCmdExecute+0x84>)
 80017a6:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <UartCmdExecute+0x90>)
 80017a8:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80017aa:	4810      	ldr	r0, [pc, #64]	; (80017ec <UartCmdExecute+0x84>)
 80017ac:	f003 fd72 	bl	8005294 <HAL_EXTI_GenerateSWI>
}
 80017b0:	e014      	b.n	80017dc <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 80017b2:	4912      	ldr	r1, [pc, #72]	; (80017fc <UartCmdExecute+0x94>)
 80017b4:	480b      	ldr	r0, [pc, #44]	; (80017e4 <UartCmdExecute+0x7c>)
 80017b6:	f7fe fce3 	bl	8000180 <strcmp>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d109      	bne.n	80017d4 <UartCmdExecute+0x6c>
    APP_DBG_MSG("SW3 OK\n");
 80017c0:	480f      	ldr	r0, [pc, #60]	; (8001800 <UartCmdExecute+0x98>)
 80017c2:	f00b fea9 	bl	800d518 <puts>
    exti_handle.Line = EXTI_LINE_6;
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <UartCmdExecute+0x84>)
 80017c8:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <UartCmdExecute+0x9c>)
 80017ca:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80017cc:	4807      	ldr	r0, [pc, #28]	; (80017ec <UartCmdExecute+0x84>)
 80017ce:	f003 fd61 	bl	8005294 <HAL_EXTI_GenerateSWI>
}
 80017d2:	e003      	b.n	80017dc <UartCmdExecute+0x74>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
 80017d4:	4903      	ldr	r1, [pc, #12]	; (80017e4 <UartCmdExecute+0x7c>)
 80017d6:	480c      	ldr	r0, [pc, #48]	; (8001808 <UartCmdExecute+0xa0>)
 80017d8:	f00b fe02 	bl	800d3e0 <iprintf>
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	0800fa74 	.word	0x0800fa74
 80017e4:	2000029c 	.word	0x2000029c
 80017e8:	0800fa78 	.word	0x0800fa78
 80017ec:	2000028c 	.word	0x2000028c
 80017f0:	0800fa80 	.word	0x0800fa80
 80017f4:	0800fa84 	.word	0x0800fa84
 80017f8:	16000004 	.word	0x16000004
 80017fc:	0800fa8c 	.word	0x0800fa8c
 8001800:	0800fa90 	.word	0x0800fa90
 8001804:	16000006 	.word	0x16000006
 8001808:	0800fa98 	.word	0x0800fa98

0800180c <LL_EXTI_EnableIT_0_31>:
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <LL_EXTI_EnableIT_0_31+0x24>)
 8001816:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800181a:	4905      	ldr	r1, [pc, #20]	; (8001830 <LL_EXTI_EnableIT_0_31+0x24>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4313      	orrs	r3, r2
 8001820:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	58000800 	.word	0x58000800

08001834 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4904      	ldr	r1, [pc, #16]	; (8001854 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4313      	orrs	r3, r2
 8001846:	600b      	str	r3, [r1, #0]

}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	58000800 	.word	0x58000800

08001858 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800185e:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <ReadRtcSsrValue+0x3c>)
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	b29b      	uxth	r3, r3
 8001864:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <ReadRtcSsrValue+0x3c>)
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	b29b      	uxth	r3, r3
 800186c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800186e:	e005      	b.n	800187c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001874:	4b07      	ldr	r3, [pc, #28]	; (8001894 <ReadRtcSsrValue+0x3c>)
 8001876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001878:	b29b      	uxth	r3, r3
 800187a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d1f5      	bne.n	8001870 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001884:	683b      	ldr	r3, [r7, #0]
}
 8001886:	4618      	mov	r0, r3
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40002800 	.word	0x40002800

08001898 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	460a      	mov	r2, r1
 80018a2:	71fb      	strb	r3, [r7, #7]
 80018a4:	4613      	mov	r3, r2
 80018a6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80018a8:	79ba      	ldrb	r2, [r7, #6]
 80018aa:	491d      	ldr	r1, [pc, #116]	; (8001920 <LinkTimerAfter+0x88>)
 80018ac:	4613      	mov	r3, r2
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	4413      	add	r3, r2
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	440b      	add	r3, r1
 80018b6:	3315      	adds	r3, #21
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	2b06      	cmp	r3, #6
 80018c0:	d009      	beq.n	80018d6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80018c2:	7bfa      	ldrb	r2, [r7, #15]
 80018c4:	4916      	ldr	r1, [pc, #88]	; (8001920 <LinkTimerAfter+0x88>)
 80018c6:	4613      	mov	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	440b      	add	r3, r1
 80018d0:	3314      	adds	r3, #20
 80018d2:	79fa      	ldrb	r2, [r7, #7]
 80018d4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80018d6:	79fa      	ldrb	r2, [r7, #7]
 80018d8:	4911      	ldr	r1, [pc, #68]	; (8001920 <LinkTimerAfter+0x88>)
 80018da:	4613      	mov	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	440b      	add	r3, r1
 80018e4:	3315      	adds	r3, #21
 80018e6:	7bfa      	ldrb	r2, [r7, #15]
 80018e8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80018ea:	79fa      	ldrb	r2, [r7, #7]
 80018ec:	490c      	ldr	r1, [pc, #48]	; (8001920 <LinkTimerAfter+0x88>)
 80018ee:	4613      	mov	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4413      	add	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	440b      	add	r3, r1
 80018f8:	3314      	adds	r3, #20
 80018fa:	79ba      	ldrb	r2, [r7, #6]
 80018fc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80018fe:	79ba      	ldrb	r2, [r7, #6]
 8001900:	4907      	ldr	r1, [pc, #28]	; (8001920 <LinkTimerAfter+0x88>)
 8001902:	4613      	mov	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	3315      	adds	r3, #21
 800190e:	79fa      	ldrb	r2, [r7, #7]
 8001910:	701a      	strb	r2, [r3, #0]

  return;
 8001912:	bf00      	nop
}
 8001914:	3714      	adds	r7, #20
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	200003a0 	.word	0x200003a0

08001924 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	460a      	mov	r2, r1
 800192e:	71fb      	strb	r3, [r7, #7]
 8001930:	4613      	mov	r3, r2
 8001932:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001934:	4b29      	ldr	r3, [pc, #164]	; (80019dc <LinkTimerBefore+0xb8>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	79ba      	ldrb	r2, [r7, #6]
 800193c:	429a      	cmp	r2, r3
 800193e:	d032      	beq.n	80019a6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001940:	79ba      	ldrb	r2, [r7, #6]
 8001942:	4927      	ldr	r1, [pc, #156]	; (80019e0 <LinkTimerBefore+0xbc>)
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	440b      	add	r3, r1
 800194e:	3314      	adds	r3, #20
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001954:	7bfa      	ldrb	r2, [r7, #15]
 8001956:	4922      	ldr	r1, [pc, #136]	; (80019e0 <LinkTimerBefore+0xbc>)
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	440b      	add	r3, r1
 8001962:	3315      	adds	r3, #21
 8001964:	79fa      	ldrb	r2, [r7, #7]
 8001966:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001968:	79fa      	ldrb	r2, [r7, #7]
 800196a:	491d      	ldr	r1, [pc, #116]	; (80019e0 <LinkTimerBefore+0xbc>)
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	440b      	add	r3, r1
 8001976:	3315      	adds	r3, #21
 8001978:	79ba      	ldrb	r2, [r7, #6]
 800197a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 800197c:	79fa      	ldrb	r2, [r7, #7]
 800197e:	4918      	ldr	r1, [pc, #96]	; (80019e0 <LinkTimerBefore+0xbc>)
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	440b      	add	r3, r1
 800198a:	3314      	adds	r3, #20
 800198c:	7bfa      	ldrb	r2, [r7, #15]
 800198e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001990:	79ba      	ldrb	r2, [r7, #6]
 8001992:	4913      	ldr	r1, [pc, #76]	; (80019e0 <LinkTimerBefore+0xbc>)
 8001994:	4613      	mov	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	00db      	lsls	r3, r3, #3
 800199c:	440b      	add	r3, r1
 800199e:	3314      	adds	r3, #20
 80019a0:	79fa      	ldrb	r2, [r7, #7]
 80019a2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80019a4:	e014      	b.n	80019d0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80019a6:	79fa      	ldrb	r2, [r7, #7]
 80019a8:	490d      	ldr	r1, [pc, #52]	; (80019e0 <LinkTimerBefore+0xbc>)
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	440b      	add	r3, r1
 80019b4:	3315      	adds	r3, #21
 80019b6:	79ba      	ldrb	r2, [r7, #6]
 80019b8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80019ba:	79ba      	ldrb	r2, [r7, #6]
 80019bc:	4908      	ldr	r1, [pc, #32]	; (80019e0 <LinkTimerBefore+0xbc>)
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	440b      	add	r3, r1
 80019c8:	3314      	adds	r3, #20
 80019ca:	79fa      	ldrb	r2, [r7, #7]
 80019cc:	701a      	strb	r2, [r3, #0]
  return;
 80019ce:	bf00      	nop
}
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000430 	.word	0x20000430
 80019e0:	200003a0 	.word	0x200003a0

080019e4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80019ee:	4b4e      	ldr	r3, [pc, #312]	; (8001b28 <linkTimer+0x144>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b06      	cmp	r3, #6
 80019f6:	d118      	bne.n	8001a2a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80019f8:	4b4b      	ldr	r3, [pc, #300]	; (8001b28 <linkTimer+0x144>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	4b4b      	ldr	r3, [pc, #300]	; (8001b2c <linkTimer+0x148>)
 8001a00:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001a02:	4a49      	ldr	r2, [pc, #292]	; (8001b28 <linkTimer+0x144>)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001a08:	79fa      	ldrb	r2, [r7, #7]
 8001a0a:	4949      	ldr	r1, [pc, #292]	; (8001b30 <linkTimer+0x14c>)
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	440b      	add	r3, r1
 8001a16:	3315      	adds	r3, #21
 8001a18:	2206      	movs	r2, #6
 8001a1a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001a1c:	4b45      	ldr	r3, [pc, #276]	; (8001b34 <linkTimer+0x150>)
 8001a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a22:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	81fb      	strh	r3, [r7, #14]
 8001a28:	e078      	b.n	8001b1c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001a2a:	f000 f909 	bl	8001c40 <ReturnTimeElapsed>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001a32:	79fa      	ldrb	r2, [r7, #7]
 8001a34:	493e      	ldr	r1, [pc, #248]	; (8001b30 <linkTimer+0x14c>)
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	440b      	add	r3, r1
 8001a40:	3308      	adds	r3, #8
 8001a42:	6819      	ldr	r1, [r3, #0]
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	79fa      	ldrb	r2, [r7, #7]
 8001a48:	4419      	add	r1, r3
 8001a4a:	4839      	ldr	r0, [pc, #228]	; (8001b30 <linkTimer+0x14c>)
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	4403      	add	r3, r0
 8001a56:	3308      	adds	r3, #8
 8001a58:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001a5a:	79fa      	ldrb	r2, [r7, #7]
 8001a5c:	4934      	ldr	r1, [pc, #208]	; (8001b30 <linkTimer+0x14c>)
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	440b      	add	r3, r1
 8001a68:	3308      	adds	r3, #8
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001a6e:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <linkTimer+0x144>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	4619      	mov	r1, r3
 8001a76:	4a2e      	ldr	r2, [pc, #184]	; (8001b30 <linkTimer+0x14c>)
 8001a78:	460b      	mov	r3, r1
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	440b      	add	r3, r1
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	3308      	adds	r3, #8
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d337      	bcc.n	8001afc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001a8c:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <linkTimer+0x144>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001a92:	7b7a      	ldrb	r2, [r7, #13]
 8001a94:	4926      	ldr	r1, [pc, #152]	; (8001b30 <linkTimer+0x14c>)
 8001a96:	4613      	mov	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3315      	adds	r3, #21
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001aa6:	e013      	b.n	8001ad0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001aa8:	7b7a      	ldrb	r2, [r7, #13]
 8001aaa:	4921      	ldr	r1, [pc, #132]	; (8001b30 <linkTimer+0x14c>)
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3315      	adds	r3, #21
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001abc:	7b7a      	ldrb	r2, [r7, #13]
 8001abe:	491c      	ldr	r1, [pc, #112]	; (8001b30 <linkTimer+0x14c>)
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	3315      	adds	r3, #21
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001ad0:	7b3b      	ldrb	r3, [r7, #12]
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d00b      	beq.n	8001aee <linkTimer+0x10a>
 8001ad6:	7b3a      	ldrb	r2, [r7, #12]
 8001ad8:	4915      	ldr	r1, [pc, #84]	; (8001b30 <linkTimer+0x14c>)
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	440b      	add	r3, r1
 8001ae4:	3308      	adds	r3, #8
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d2dc      	bcs.n	8001aa8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001aee:	7b7a      	ldrb	r2, [r7, #13]
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fecf 	bl	8001898 <LinkTimerAfter>
 8001afa:	e00f      	b.n	8001b1c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <linkTimer+0x144>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff ff0c 	bl	8001924 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <linkTimer+0x144>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <linkTimer+0x148>)
 8001b14:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001b16:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <linkTimer+0x144>)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001b1c:	89fb      	ldrh	r3, [r7, #14]
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000430 	.word	0x20000430
 8001b2c:	20000431 	.word	0x20000431
 8001b30:	200003a0 	.word	0x200003a0
 8001b34:	20000434 	.word	0x20000434

08001b38 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460a      	mov	r2, r1
 8001b42:	71fb      	strb	r3, [r7, #7]
 8001b44:	4613      	mov	r3, r2
 8001b46:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001b48:	4b39      	ldr	r3, [pc, #228]	; (8001c30 <UnlinkTimer+0xf8>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	79fa      	ldrb	r2, [r7, #7]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d111      	bne.n	8001b78 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001b54:	4b36      	ldr	r3, [pc, #216]	; (8001c30 <UnlinkTimer+0xf8>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <UnlinkTimer+0xfc>)
 8001b5c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001b5e:	79fa      	ldrb	r2, [r7, #7]
 8001b60:	4935      	ldr	r1, [pc, #212]	; (8001c38 <UnlinkTimer+0x100>)
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3315      	adds	r3, #21
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <UnlinkTimer+0xf8>)
 8001b74:	701a      	strb	r2, [r3, #0]
 8001b76:	e03e      	b.n	8001bf6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001b78:	79fa      	ldrb	r2, [r7, #7]
 8001b7a:	492f      	ldr	r1, [pc, #188]	; (8001c38 <UnlinkTimer+0x100>)
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	440b      	add	r3, r1
 8001b86:	3314      	adds	r3, #20
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001b8c:	79fa      	ldrb	r2, [r7, #7]
 8001b8e:	492a      	ldr	r1, [pc, #168]	; (8001c38 <UnlinkTimer+0x100>)
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	440b      	add	r3, r1
 8001b9a:	3315      	adds	r3, #21
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001ba0:	79f9      	ldrb	r1, [r7, #7]
 8001ba2:	7bfa      	ldrb	r2, [r7, #15]
 8001ba4:	4824      	ldr	r0, [pc, #144]	; (8001c38 <UnlinkTimer+0x100>)
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	440b      	add	r3, r1
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4403      	add	r3, r0
 8001bb0:	3315      	adds	r3, #21
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	b2d8      	uxtb	r0, r3
 8001bb6:	4920      	ldr	r1, [pc, #128]	; (8001c38 <UnlinkTimer+0x100>)
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	440b      	add	r3, r1
 8001bc2:	3315      	adds	r3, #21
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001bc8:	7bbb      	ldrb	r3, [r7, #14]
 8001bca:	2b06      	cmp	r3, #6
 8001bcc:	d013      	beq.n	8001bf6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001bce:	79f9      	ldrb	r1, [r7, #7]
 8001bd0:	7bba      	ldrb	r2, [r7, #14]
 8001bd2:	4819      	ldr	r0, [pc, #100]	; (8001c38 <UnlinkTimer+0x100>)
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	440b      	add	r3, r1
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4403      	add	r3, r0
 8001bde:	3314      	adds	r3, #20
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b2d8      	uxtb	r0, r3
 8001be4:	4914      	ldr	r1, [pc, #80]	; (8001c38 <UnlinkTimer+0x100>)
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	3314      	adds	r3, #20
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001bf6:	79fa      	ldrb	r2, [r7, #7]
 8001bf8:	490f      	ldr	r1, [pc, #60]	; (8001c38 <UnlinkTimer+0x100>)
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	440b      	add	r3, r1
 8001c04:	330c      	adds	r3, #12
 8001c06:	2201      	movs	r2, #1
 8001c08:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <UnlinkTimer+0xf8>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b06      	cmp	r3, #6
 8001c12:	d107      	bne.n	8001c24 <UnlinkTimer+0xec>
 8001c14:	79bb      	ldrb	r3, [r7, #6]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d104      	bne.n	8001c24 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <UnlinkTimer+0x104>)
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	601a      	str	r2, [r3, #0]
  }

  return;
 8001c22:	bf00      	nop
 8001c24:	bf00      	nop
}
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	20000430 	.word	0x20000430
 8001c34:	20000431 	.word	0x20000431
 8001c38:	200003a0 	.word	0x200003a0
 8001c3c:	20000434 	.word	0x20000434

08001c40 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001c46:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <ReturnTimeElapsed+0x70>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4e:	d026      	beq.n	8001c9e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001c50:	f7ff fe02 	bl	8001858 <ReadRtcSsrValue>
 8001c54:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001c56:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <ReturnTimeElapsed+0x70>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d805      	bhi.n	8001c6c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <ReturnTimeElapsed+0x70>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	e00a      	b.n	8001c82 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <ReturnTimeElapsed+0x74>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001c78:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <ReturnTimeElapsed+0x70>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001c82:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <ReturnTimeElapsed+0x78>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	461a      	mov	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <ReturnTimeElapsed+0x7c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	40d3      	lsrs	r3, r2
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	e001      	b.n	8001ca2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	b29b      	uxth	r3, r3
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000434 	.word	0x20000434
 8001cb4:	2000043c 	.word	0x2000043c
 8001cb8:	2000043a 	.word	0x2000043a
 8001cbc:	20000439 	.word	0x20000439

08001cc0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d108      	bne.n	8001ce2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001cd0:	f7ff fdc2 	bl	8001858 <ReadRtcSsrValue>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4a21      	ldr	r2, [pc, #132]	; (8001d5c <RestartWakeupCounter+0x9c>)
 8001cd8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001cda:	2003      	movs	r0, #3
 8001cdc:	f002 ff8b 	bl	8004bf6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001ce0:	e039      	b.n	8001d56 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d803      	bhi.n	8001cf0 <RestartWakeupCounter+0x30>
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <RestartWakeupCounter+0xa0>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d002      	beq.n	8001cf6 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001cf6:	bf00      	nop
 8001cf8:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <RestartWakeupCounter+0xa4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f003 0304 	and.w	r3, r3, #4
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f8      	beq.n	8001cf8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <RestartWakeupCounter+0xa4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <RestartWakeupCounter+0xa4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001d16:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <RestartWakeupCounter+0xa8>)
 8001d1a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d1e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001d20:	2003      	movs	r0, #3
 8001d22:	f002 ff76 	bl	8004c12 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <RestartWakeupCounter+0xac>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	0c1b      	lsrs	r3, r3, #16
 8001d2c:	041b      	lsls	r3, r3, #16
 8001d2e:	88fa      	ldrh	r2, [r7, #6]
 8001d30:	490e      	ldr	r1, [pc, #56]	; (8001d6c <RestartWakeupCounter+0xac>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001d36:	f7ff fd8f 	bl	8001858 <ReadRtcSsrValue>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <RestartWakeupCounter+0x9c>)
 8001d3e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <RestartWakeupCounter+0xa4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	4b07      	ldr	r3, [pc, #28]	; (8001d64 <RestartWakeupCounter+0xa4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d4e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001d50:	f3af 8000 	nop.w
  return ;
 8001d54:	bf00      	nop
}
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000434 	.word	0x20000434
 8001d60:	20000439 	.word	0x20000439
 8001d64:	20000498 	.word	0x20000498
 8001d68:	58000800 	.word	0x58000800
 8001d6c:	40002800 	.word	0x40002800

08001d70 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001d76:	4b45      	ldr	r3, [pc, #276]	; (8001e8c <RescheduleTimerList+0x11c>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d82:	d107      	bne.n	8001d94 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001d84:	bf00      	nop
 8001d86:	4b42      	ldr	r3, [pc, #264]	; (8001e90 <RescheduleTimerList+0x120>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1f8      	bne.n	8001d86 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001d94:	4b3e      	ldr	r3, [pc, #248]	; (8001e90 <RescheduleTimerList+0x120>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	4b3d      	ldr	r3, [pc, #244]	; (8001e90 <RescheduleTimerList+0x120>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001da2:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001da4:	4b3b      	ldr	r3, [pc, #236]	; (8001e94 <RescheduleTimerList+0x124>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	493a      	ldr	r1, [pc, #232]	; (8001e98 <RescheduleTimerList+0x128>)
 8001dae:	4613      	mov	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	440b      	add	r3, r1
 8001db8:	3308      	adds	r3, #8
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001dbe:	f7ff ff3f 	bl	8001c40 <ReturnTimeElapsed>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d205      	bcs.n	8001dda <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001dd2:	4b32      	ldr	r3, [pc, #200]	; (8001e9c <RescheduleTimerList+0x12c>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]
 8001dd8:	e04d      	b.n	8001e76 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	4a30      	ldr	r2, [pc, #192]	; (8001ea0 <RescheduleTimerList+0x130>)
 8001dde:	8812      	ldrh	r2, [r2, #0]
 8001de0:	b292      	uxth	r2, r2
 8001de2:	4413      	add	r3, r2
 8001de4:	461a      	mov	r2, r3
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d906      	bls.n	8001dfa <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001dec:	4b2c      	ldr	r3, [pc, #176]	; (8001ea0 <RescheduleTimerList+0x130>)
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001df2:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <RescheduleTimerList+0x12c>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	e03d      	b.n	8001e76 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001e04:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <RescheduleTimerList+0x12c>)
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e0a:	e034      	b.n	8001e76 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	4922      	ldr	r1, [pc, #136]	; (8001e98 <RescheduleTimerList+0x128>)
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	440b      	add	r3, r1
 8001e1a:	3308      	adds	r3, #8
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d20a      	bcs.n	8001e3a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	491c      	ldr	r1, [pc, #112]	; (8001e98 <RescheduleTimerList+0x128>)
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	3308      	adds	r3, #8
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	e013      	b.n	8001e62 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	4916      	ldr	r1, [pc, #88]	; (8001e98 <RescheduleTimerList+0x128>)
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	440b      	add	r3, r1
 8001e48:	3308      	adds	r3, #8
 8001e4a:	6819      	ldr	r1, [r3, #0]
 8001e4c:	88fb      	ldrh	r3, [r7, #6]
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	1ac9      	subs	r1, r1, r3
 8001e52:	4811      	ldr	r0, [pc, #68]	; (8001e98 <RescheduleTimerList+0x128>)
 8001e54:	4613      	mov	r3, r2
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	4413      	add	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4403      	add	r3, r0
 8001e5e:	3308      	adds	r3, #8
 8001e60:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	490c      	ldr	r1, [pc, #48]	; (8001e98 <RescheduleTimerList+0x128>)
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	440b      	add	r3, r1
 8001e70:	3315      	adds	r3, #21
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e76:	7bfb      	ldrb	r3, [r7, #15]
 8001e78:	2b06      	cmp	r3, #6
 8001e7a:	d1c7      	bne.n	8001e0c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001e7c:	89bb      	ldrh	r3, [r7, #12]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff1e 	bl	8001cc0 <RestartWakeupCounter>

  return ;
 8001e84:	bf00      	nop
}
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40002800 	.word	0x40002800
 8001e90:	20000498 	.word	0x20000498
 8001e94:	20000430 	.word	0x20000430
 8001e98:	200003a0 	.word	0x200003a0
 8001e9c:	20000438 	.word	0x20000438
 8001ea0:	2000043e 	.word	0x2000043e

08001ea4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	; 0x28
 8001ea8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8001eae:	617b      	str	r3, [r7, #20]
  return(result);
 8001eb0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb4:	b672      	cpsid	i
}
 8001eb6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001eb8:	4b59      	ldr	r3, [pc, #356]	; (8002020 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	22ca      	movs	r2, #202	; 0xca
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24
 8001ec0:	4b57      	ldr	r3, [pc, #348]	; (8002020 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2253      	movs	r2, #83	; 0x53
 8001ec6:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001ec8:	4b55      	ldr	r3, [pc, #340]	; (8002020 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	4b54      	ldr	r3, [pc, #336]	; (8002020 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ed6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001ed8:	4b52      	ldr	r3, [pc, #328]	; (8002024 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001ee0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ee4:	4950      	ldr	r1, [pc, #320]	; (8002028 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	440b      	add	r3, r1
 8001ef0:	330c      	adds	r3, #12
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d16e      	bne.n	8001fd8 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001efa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001efe:	494a      	ldr	r1, [pc, #296]	; (8002028 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	440b      	add	r3, r1
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001f0e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001f12:	4945      	ldr	r1, [pc, #276]	; (8002028 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f14:	4613      	mov	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	4413      	add	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	440b      	add	r3, r1
 8001f1e:	3310      	adds	r3, #16
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001f24:	4b41      	ldr	r3, [pc, #260]	; (800202c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d04c      	beq.n	8001fc8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001f2e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001f32:	493d      	ldr	r1, [pc, #244]	; (8002028 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	330d      	adds	r3, #13
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d124      	bne.n	8001f92 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001f48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fdf2 	bl	8001b38 <UnlinkTimer>
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	f383 8810 	msr	PRIMASK, r3
}
 8001f5e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001f60:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001f64:	4930      	ldr	r1, [pc, #192]	; (8002028 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f66:	4613      	mov	r3, r2
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	440b      	add	r3, r1
 8001f70:	3304      	adds	r3, #4
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 fa32 	bl	80023e4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	22ca      	movs	r2, #202	; 0xca
 8001f86:	625a      	str	r2, [r3, #36]	; 0x24
 8001f88:	4b25      	ldr	r3, [pc, #148]	; (8002020 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2253      	movs	r2, #83	; 0x53
 8001f8e:	625a      	str	r2, [r3, #36]	; 0x24
 8001f90:	e012      	b.n	8001fb8 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f383 8810 	msr	PRIMASK, r3
}
 8001f9c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001f9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f99a 	bl	80022dc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	22ca      	movs	r2, #202	; 0xca
 8001fae:	625a      	str	r2, [r3, #36]	; 0x24
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2253      	movs	r2, #83	; 0x53
 8001fb6:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001fb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	69b8      	ldr	r0, [r7, #24]
 8001fc2:	f000 fa95 	bl	80024f0 <HW_TS_RTC_Int_AppNot>
 8001fc6:	e022      	b.n	800200e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001fc8:	f7ff fed2 	bl	8001d70 <RescheduleTimerList>
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f383 8810 	msr	PRIMASK, r3
}
 8001fd6:	e01a      	b.n	800200e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001fd8:	bf00      	nop
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f8      	beq.n	8001fda <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001ff8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001ffa:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001ffc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f383 8810 	msr	PRIMASK, r3
}
 800200c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	22ff      	movs	r2, #255	; 0xff
 8002014:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002016:	bf00      	nop
}
 8002018:	3728      	adds	r7, #40	; 0x28
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000498 	.word	0x20000498
 8002024:	20000430 	.word	0x20000430
 8002028:	200003a0 	.word	0x200003a0
 800202c:	20000438 	.word	0x20000438
 8002030:	58000800 	.word	0x58000800

08002034 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b088      	sub	sp, #32
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002040:	4b5e      	ldr	r3, [pc, #376]	; (80021bc <HW_TS_Init+0x188>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	22ca      	movs	r2, #202	; 0xca
 8002046:	625a      	str	r2, [r3, #36]	; 0x24
 8002048:	4b5c      	ldr	r3, [pc, #368]	; (80021bc <HW_TS_Init+0x188>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2253      	movs	r2, #83	; 0x53
 800204e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002050:	4b5b      	ldr	r3, [pc, #364]	; (80021c0 <HW_TS_Init+0x18c>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	4a5a      	ldr	r2, [pc, #360]	; (80021c0 <HW_TS_Init+0x18c>)
 8002056:	f043 0320 	orr.w	r3, r3, #32
 800205a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800205c:	4b58      	ldr	r3, [pc, #352]	; (80021c0 <HW_TS_Init+0x18c>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	b2db      	uxtb	r3, r3
 8002068:	f1c3 0304 	rsb	r3, r3, #4
 800206c:	b2da      	uxtb	r2, r3
 800206e:	4b55      	ldr	r3, [pc, #340]	; (80021c4 <HW_TS_Init+0x190>)
 8002070:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002072:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <HW_TS_Init+0x18c>)
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800207a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800207e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	fa92 f2a2 	rbit	r2, r2
 8002086:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	2a00      	cmp	r2, #0
 8002090:	d101      	bne.n	8002096 <HW_TS_Init+0x62>
  {
    return 32U;
 8002092:	2220      	movs	r2, #32
 8002094:	e003      	b.n	800209e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	fab2 f282 	clz	r2, r2
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	40d3      	lsrs	r3, r2
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	3301      	adds	r3, #1
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4b48      	ldr	r3, [pc, #288]	; (80021c8 <HW_TS_Init+0x194>)
 80020a8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80020aa:	4b45      	ldr	r3, [pc, #276]	; (80021c0 <HW_TS_Init+0x18c>)
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	3301      	adds	r3, #1
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	4b44      	ldr	r3, [pc, #272]	; (80021cc <HW_TS_Init+0x198>)
 80020bc:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80020be:	4b43      	ldr	r3, [pc, #268]	; (80021cc <HW_TS_Init+0x198>)
 80020c0:	881b      	ldrh	r3, [r3, #0]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	4a40      	ldr	r2, [pc, #256]	; (80021c8 <HW_TS_Init+0x194>)
 80020c6:	7812      	ldrb	r2, [r2, #0]
 80020c8:	fb02 f303 	mul.w	r3, r2, r3
 80020cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020d0:	4a3c      	ldr	r2, [pc, #240]	; (80021c4 <HW_TS_Init+0x190>)
 80020d2:	7812      	ldrb	r2, [r2, #0]
 80020d4:	40d3      	lsrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020de:	4293      	cmp	r3, r2
 80020e0:	d904      	bls.n	80020ec <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80020e2:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <HW_TS_Init+0x19c>)
 80020e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020e8:	801a      	strh	r2, [r3, #0]
 80020ea:	e003      	b.n	80020f4 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	4b37      	ldr	r3, [pc, #220]	; (80021d0 <HW_TS_Init+0x19c>)
 80020f2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80020f4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80020f8:	f7ff fb9c 	bl	8001834 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80020fc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002100:	f7ff fb84 	bl	800180c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d13d      	bne.n	8002186 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800210a:	4b32      	ldr	r3, [pc, #200]	; (80021d4 <HW_TS_Init+0x1a0>)
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002110:	4b31      	ldr	r3, [pc, #196]	; (80021d8 <HW_TS_Init+0x1a4>)
 8002112:	f04f 32ff 	mov.w	r2, #4294967295
 8002116:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002118:	2300      	movs	r3, #0
 800211a:	77fb      	strb	r3, [r7, #31]
 800211c:	e00c      	b.n	8002138 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800211e:	7ffa      	ldrb	r2, [r7, #31]
 8002120:	492e      	ldr	r1, [pc, #184]	; (80021dc <HW_TS_Init+0x1a8>)
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	440b      	add	r3, r1
 800212c:	330c      	adds	r3, #12
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002132:	7ffb      	ldrb	r3, [r7, #31]
 8002134:	3301      	adds	r3, #1
 8002136:	77fb      	strb	r3, [r7, #31]
 8002138:	7ffb      	ldrb	r3, [r7, #31]
 800213a:	2b05      	cmp	r3, #5
 800213c:	d9ef      	bls.n	800211e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800213e:	4b28      	ldr	r3, [pc, #160]	; (80021e0 <HW_TS_Init+0x1ac>)
 8002140:	2206      	movs	r2, #6
 8002142:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002144:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <HW_TS_Init+0x188>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <HW_TS_Init+0x188>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002152:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002154:	4b19      	ldr	r3, [pc, #100]	; (80021bc <HW_TS_Init+0x188>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HW_TS_Init+0x188>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002164:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002166:	4b1f      	ldr	r3, [pc, #124]	; (80021e4 <HW_TS_Init+0x1b0>)
 8002168:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800216c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800216e:	2003      	movs	r0, #3
 8002170:	f002 fd4f 	bl	8004c12 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002174:	4b11      	ldr	r3, [pc, #68]	; (80021bc <HW_TS_Init+0x188>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HW_TS_Init+0x188>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	e009      	b.n	800219a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002186:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <HW_TS_Init+0x188>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002194:	2003      	movs	r0, #3
 8002196:	f002 fd2e 	bl	8004bf6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HW_TS_Init+0x188>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	22ff      	movs	r2, #255	; 0xff
 80021a0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80021a2:	2200      	movs	r2, #0
 80021a4:	2103      	movs	r1, #3
 80021a6:	2003      	movs	r0, #3
 80021a8:	f002 fce3 	bl	8004b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80021ac:	2003      	movs	r0, #3
 80021ae:	f002 fcfa 	bl	8004ba6 <HAL_NVIC_EnableIRQ>

  return;
 80021b2:	bf00      	nop
}
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000498 	.word	0x20000498
 80021c0:	40002800 	.word	0x40002800
 80021c4:	20000439 	.word	0x20000439
 80021c8:	2000043a 	.word	0x2000043a
 80021cc:	2000043c 	.word	0x2000043c
 80021d0:	2000043e 	.word	0x2000043e
 80021d4:	20000438 	.word	0x20000438
 80021d8:	20000434 	.word	0x20000434
 80021dc:	200003a0 	.word	0x200003a0
 80021e0:	20000430 	.word	0x20000430
 80021e4:	58000800 	.word	0x58000800

080021e8 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b08b      	sub	sp, #44	; 0x2c
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002202:	61fb      	str	r3, [r7, #28]
  return(result);
 8002204:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002206:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002208:	b672      	cpsid	i
}
 800220a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800220c:	e004      	b.n	8002218 <HW_TS_Create+0x30>
  {
    loop++;
 800220e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002212:	3301      	adds	r3, #1
 8002214:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002218:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800221c:	2b05      	cmp	r3, #5
 800221e:	d80c      	bhi.n	800223a <HW_TS_Create+0x52>
 8002220:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002224:	492c      	ldr	r1, [pc, #176]	; (80022d8 <HW_TS_Create+0xf0>)
 8002226:	4613      	mov	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4413      	add	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	440b      	add	r3, r1
 8002230:	330c      	adds	r3, #12
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1e9      	bne.n	800220e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800223a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800223e:	2b06      	cmp	r3, #6
 8002240:	d038      	beq.n	80022b4 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002242:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002246:	4924      	ldr	r1, [pc, #144]	; (80022d8 <HW_TS_Create+0xf0>)
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	330c      	adds	r3, #12
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	f383 8810 	msr	PRIMASK, r3
}
 8002262:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8002264:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002268:	491b      	ldr	r1, [pc, #108]	; (80022d8 <HW_TS_Create+0xf0>)
 800226a:	4613      	mov	r3, r2
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	440b      	add	r3, r1
 8002274:	3310      	adds	r3, #16
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800227a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800227e:	4916      	ldr	r1, [pc, #88]	; (80022d8 <HW_TS_Create+0xf0>)
 8002280:	4613      	mov	r3, r2
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	330d      	adds	r3, #13
 800228c:	79fa      	ldrb	r2, [r7, #7]
 800228e:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002290:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002294:	4910      	ldr	r1, [pc, #64]	; (80022d8 <HW_TS_Create+0xf0>)
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	440b      	add	r3, r1
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80022aa:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80022b2:	e008      	b.n	80022c6 <HW_TS_Create+0xde>
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f383 8810 	msr	PRIMASK, r3
}
 80022be:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80022c0:	2301      	movs	r3, #1
 80022c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80022c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	372c      	adds	r7, #44	; 0x2c
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	200003a0 	.word	0x200003a0

080022dc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022e6:	f3ef 8310 	mrs	r3, PRIMASK
 80022ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80022ec:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80022ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80022f0:	b672      	cpsid	i
}
 80022f2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80022f4:	2003      	movs	r0, #3
 80022f6:	f002 fc64 	bl	8004bc2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80022fa:	4b34      	ldr	r3, [pc, #208]	; (80023cc <HW_TS_Stop+0xf0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	22ca      	movs	r2, #202	; 0xca
 8002300:	625a      	str	r2, [r3, #36]	; 0x24
 8002302:	4b32      	ldr	r3, [pc, #200]	; (80023cc <HW_TS_Stop+0xf0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2253      	movs	r2, #83	; 0x53
 8002308:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800230a:	79fa      	ldrb	r2, [r7, #7]
 800230c:	4930      	ldr	r1, [pc, #192]	; (80023d0 <HW_TS_Stop+0xf4>)
 800230e:	4613      	mov	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	440b      	add	r3, r1
 8002318:	330c      	adds	r3, #12
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d142      	bne.n	80023a8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	2100      	movs	r1, #0
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fc06 	bl	8001b38 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800232c:	4b29      	ldr	r3, [pc, #164]	; (80023d4 <HW_TS_Stop+0xf8>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002332:	7cfb      	ldrb	r3, [r7, #19]
 8002334:	2b06      	cmp	r3, #6
 8002336:	d12f      	bne.n	8002398 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002338:	4b27      	ldr	r3, [pc, #156]	; (80023d8 <HW_TS_Stop+0xfc>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002344:	d107      	bne.n	8002356 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002346:	bf00      	nop
 8002348:	4b20      	ldr	r3, [pc, #128]	; (80023cc <HW_TS_Stop+0xf0>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f8      	bne.n	8002348 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002356:	4b1d      	ldr	r3, [pc, #116]	; (80023cc <HW_TS_Stop+0xf0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HW_TS_Stop+0xf0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002364:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002366:	bf00      	nop
 8002368:	4b18      	ldr	r3, [pc, #96]	; (80023cc <HW_TS_Stop+0xf0>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f8      	beq.n	8002368 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <HW_TS_Stop+0xf0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4b13      	ldr	r3, [pc, #76]	; (80023cc <HW_TS_Stop+0xf0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002386:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <HW_TS_Stop+0x100>)
 800238a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800238e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002390:	2003      	movs	r0, #3
 8002392:	f002 fc3e 	bl	8004c12 <HAL_NVIC_ClearPendingIRQ>
 8002396:	e007      	b.n	80023a8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HW_TS_Stop+0x104>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	7cfa      	ldrb	r2, [r7, #19]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80023a4:	f7ff fce4 	bl	8001d70 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HW_TS_Stop+0xf0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	22ff      	movs	r2, #255	; 0xff
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80023b0:	2003      	movs	r0, #3
 80023b2:	f002 fbf8 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	f383 8810 	msr	PRIMASK, r3
}
 80023c0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80023c2:	bf00      	nop
}
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000498 	.word	0x20000498
 80023d0:	200003a0 	.word	0x200003a0
 80023d4:	20000430 	.word	0x20000430
 80023d8:	40002800 	.word	0x40002800
 80023dc:	58000800 	.word	0x58000800
 80023e0:	20000431 	.word	0x20000431

080023e4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	6039      	str	r1, [r7, #0]
 80023ee:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80023f0:	79fa      	ldrb	r2, [r7, #7]
 80023f2:	493b      	ldr	r1, [pc, #236]	; (80024e0 <HW_TS_Start+0xfc>)
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	440b      	add	r3, r1
 80023fe:	330c      	adds	r3, #12
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d103      	bne.n	8002410 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002408:	79fb      	ldrb	r3, [r7, #7]
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ff66 	bl	80022dc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002410:	f3ef 8310 	mrs	r3, PRIMASK
 8002414:	60fb      	str	r3, [r7, #12]
  return(result);
 8002416:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002418:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800241a:	b672      	cpsid	i
}
 800241c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800241e:	2003      	movs	r0, #3
 8002420:	f002 fbcf 	bl	8004bc2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002424:	4b2f      	ldr	r3, [pc, #188]	; (80024e4 <HW_TS_Start+0x100>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	22ca      	movs	r2, #202	; 0xca
 800242a:	625a      	str	r2, [r3, #36]	; 0x24
 800242c:	4b2d      	ldr	r3, [pc, #180]	; (80024e4 <HW_TS_Start+0x100>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2253      	movs	r2, #83	; 0x53
 8002432:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002434:	79fa      	ldrb	r2, [r7, #7]
 8002436:	492a      	ldr	r1, [pc, #168]	; (80024e0 <HW_TS_Start+0xfc>)
 8002438:	4613      	mov	r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	440b      	add	r3, r1
 8002442:	330c      	adds	r3, #12
 8002444:	2202      	movs	r2, #2
 8002446:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002448:	79fa      	ldrb	r2, [r7, #7]
 800244a:	4925      	ldr	r1, [pc, #148]	; (80024e0 <HW_TS_Start+0xfc>)
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	440b      	add	r3, r1
 8002456:	3308      	adds	r3, #8
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800245c:	79fa      	ldrb	r2, [r7, #7]
 800245e:	4920      	ldr	r1, [pc, #128]	; (80024e0 <HW_TS_Start+0xfc>)
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	440b      	add	r3, r1
 800246a:	3304      	adds	r3, #4
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fab6 	bl	80019e4 <linkTimer>
 8002478:	4603      	mov	r3, r0
 800247a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800247c:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <HW_TS_Start+0x104>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002482:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <HW_TS_Start+0x108>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	7c7a      	ldrb	r2, [r7, #17]
 800248a:	429a      	cmp	r2, r3
 800248c:	d002      	beq.n	8002494 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800248e:	f7ff fc6f 	bl	8001d70 <RescheduleTimerList>
 8002492:	e013      	b.n	80024bc <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002494:	79fa      	ldrb	r2, [r7, #7]
 8002496:	4912      	ldr	r1, [pc, #72]	; (80024e0 <HW_TS_Start+0xfc>)
 8002498:	4613      	mov	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	440b      	add	r3, r1
 80024a2:	3308      	adds	r3, #8
 80024a4:	6819      	ldr	r1, [r3, #0]
 80024a6:	8a7b      	ldrh	r3, [r7, #18]
 80024a8:	79fa      	ldrb	r2, [r7, #7]
 80024aa:	1ac9      	subs	r1, r1, r3
 80024ac:	480c      	ldr	r0, [pc, #48]	; (80024e0 <HW_TS_Start+0xfc>)
 80024ae:	4613      	mov	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	4403      	add	r3, r0
 80024b8:	3308      	adds	r3, #8
 80024ba:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <HW_TS_Start+0x100>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	22ff      	movs	r2, #255	; 0xff
 80024c2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80024c4:	2003      	movs	r0, #3
 80024c6:	f002 fb6e 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f383 8810 	msr	PRIMASK, r3
}
 80024d4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80024d6:	bf00      	nop
}
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200003a0 	.word	0x200003a0
 80024e4:	20000498 	.word	0x20000498
 80024e8:	20000430 	.word	0x20000430
 80024ec:	20000431 	.word	0x20000431

080024f0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	460b      	mov	r3, r1
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4798      	blx	r3

  return;
 8002502:	bf00      	nop
}
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	4603      	mov	r3, r0
 8002518:	73fb      	strb	r3, [r7, #15]
 800251a:	4613      	mov	r3, r2
 800251c:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10c      	bne.n	800253e <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 8002524:	4a08      	ldr	r2, [pc, #32]	; (8002548 <HW_UART_Receive_IT+0x3c>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <HW_UART_Receive_IT+0x40>)
 800252c:	4a08      	ldr	r2, [pc, #32]	; (8002550 <HW_UART_Receive_IT+0x44>)
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	89bb      	ldrh	r3, [r7, #12]
 8002532:	461a      	mov	r2, r3
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	4805      	ldr	r0, [pc, #20]	; (800254c <HW_UART_Receive_IT+0x40>)
 8002538:	f004 fefe 	bl	8007338 <HAL_UART_Receive_IT>
            break;
 800253c:	e000      	b.n	8002540 <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 800253e:	bf00      	nop
    }

    return;
 8002540:	bf00      	nop
}
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000440 	.word	0x20000440
 800254c:	200004bc 	.word	0x200004bc
 8002550:	40013800 	.word	0x40013800

08002554 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607b      	str	r3, [r7, #4]
 800255e:	4603      	mov	r3, r0
 8002560:	73fb      	strb	r3, [r7, #15]
 8002562:	4613      	mov	r3, r2
 8002564:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002566:	2300      	movs	r3, #0
 8002568:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800256a:	2300      	movs	r3, #0
 800256c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10e      	bne.n	8002592 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002574:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <HW_UART_Transmit_DMA+0x80>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <HW_UART_Transmit_DMA+0x84>)
 800257c:	4a17      	ldr	r2, [pc, #92]	; (80025dc <HW_UART_Transmit_DMA+0x88>)
 800257e:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002580:	89bb      	ldrh	r3, [r7, #12]
 8002582:	461a      	mov	r2, r3
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	4814      	ldr	r0, [pc, #80]	; (80025d8 <HW_UART_Transmit_DMA+0x84>)
 8002588:	f004 ff22 	bl	80073d0 <HAL_UART_Transmit_DMA>
 800258c:	4603      	mov	r3, r0
 800258e:	75fb      	strb	r3, [r7, #23]
            break;
 8002590:	e000      	b.n	8002594 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002592:	bf00      	nop
    }

    switch (hal_status)
 8002594:	7dfb      	ldrb	r3, [r7, #23]
 8002596:	2b03      	cmp	r3, #3
 8002598:	d816      	bhi.n	80025c8 <HW_UART_Transmit_DMA+0x74>
 800259a:	a201      	add	r2, pc, #4	; (adr r2, 80025a0 <HW_UART_Transmit_DMA+0x4c>)
 800259c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a0:	080025b1 	.word	0x080025b1
 80025a4:	080025b7 	.word	0x080025b7
 80025a8:	080025bd 	.word	0x080025bd
 80025ac:	080025c3 	.word	0x080025c3
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80025b0:	2300      	movs	r3, #0
 80025b2:	75bb      	strb	r3, [r7, #22]
            break;
 80025b4:	e009      	b.n	80025ca <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80025b6:	2301      	movs	r3, #1
 80025b8:	75bb      	strb	r3, [r7, #22]
            break;
 80025ba:	e006      	b.n	80025ca <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80025bc:	2302      	movs	r3, #2
 80025be:	75bb      	strb	r3, [r7, #22]
            break;
 80025c0:	e003      	b.n	80025ca <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80025c2:	2303      	movs	r3, #3
 80025c4:	75bb      	strb	r3, [r7, #22]
            break;
 80025c6:	e000      	b.n	80025ca <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 80025c8:	bf00      	nop
    }

    return hw_status;
 80025ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20000444 	.word	0x20000444
 80025d8:	200004bc 	.word	0x200004bc
 80025dc:	40013800 	.word	0x40013800

080025e0 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <HAL_UART_RxCpltCallback+0x34>)
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d107      	bne.n	8002604 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HAL_UART_RxCpltCallback+0x38>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 80025fc:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_UART_RxCpltCallback+0x38>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4798      	blx	r3
            }
            break;
 8002602:	e001      	b.n	8002608 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002604:	bf00      	nop
 8002606:	e000      	b.n	800260a <HAL_UART_RxCpltCallback+0x2a>
            break;
 8002608:	bf00      	nop
    }

    return;
 800260a:	bf00      	nop
}
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40013800 	.word	0x40013800
 8002618:	20000440 	.word	0x20000440

0800261c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_UART_TxCpltCallback+0x34>)
 800262c:	429a      	cmp	r2, r3
 800262e:	d107      	bne.n	8002640 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002630:	4b08      	ldr	r3, [pc, #32]	; (8002654 <HAL_UART_TxCpltCallback+0x38>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_UART_TxCpltCallback+0x38>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4798      	blx	r3
            }
            break;
 800263e:	e001      	b.n	8002644 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002640:	bf00      	nop
 8002642:	e000      	b.n	8002646 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002644:	bf00      	nop
    }

    return;
 8002646:	bf00      	nop
}
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40013800 	.word	0x40013800
 8002654:	20000444 	.word	0x20000444

08002658 <LL_RCC_LSE_SetDriveCapability>:
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002668:	f023 0218 	bic.w	r2, r3, #24
 800266c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <LL_AHB1_GRP1_EnableClock>:
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800268c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002690:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002692:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4313      	orrs	r3, r2
 800269a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800269c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4013      	ands	r3, r2
 80026a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026a8:	68fb      	ldr	r3, [r7, #12]
}
 80026aa:	bf00      	nop
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <LL_AHB2_GRP1_EnableClock>:
{
 80026b6:	b480      	push	{r7}
 80026b8:	b085      	sub	sp, #20
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80026be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80026ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4013      	ands	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026da:	68fb      	ldr	r3, [r7, #12]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <LL_RTC_EnableWriteProtection>:
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	22ff      	movs	r2, #255	; 0xff
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <LL_RTC_DisableWriteProtection>:
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	22ca      	movs	r2, #202	; 0xca
 800270e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2253      	movs	r2, #83	; 0x53
 8002714:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <LL_RTC_WAKEUP_SetClock>:
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f023 0207 	bic.w	r2, r3, #7
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	609a      	str	r2, [r3, #8]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800274c:	f002 f844 	bl	80047d8 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002750:	f7fe fd76 	bl	8001240 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002754:	f000 f813 	bl	800277e <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002758:	f000 f85d 	bl	8002816 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800275c:	f000 f87c 	bl	8002858 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002760:	f000 f93e 	bl	80029e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002764:	f000 f92a 	bl	80029bc <MX_DMA_Init>
  MX_RTC_Init();
 8002768:	f000 f8a0 	bl	80028ac <MX_RTC_Init>
  MX_USART1_UART_Init();
 800276c:	f000 f8d8 	bl	8002920 <MX_USART1_UART_Init>
  MX_RNG_Init();
 8002770:	f000 f886 	bl	8002880 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002774:	f7fe fd72 	bl	800125c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002778:	f7fe ff54 	bl	8001624 <MX_APPE_Process>
 800277c:	e7fc      	b.n	8002778 <main+0x30>

0800277e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b098      	sub	sp, #96	; 0x60
 8002782:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	2244      	movs	r2, #68	; 0x44
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f00a f9b5 	bl	800cafc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002792:	463b      	mov	r3, r7
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
 80027a0:	615a      	str	r2, [r3, #20]
 80027a2:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80027a4:	f002 ffda 	bl	800575c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80027a8:	2000      	movs	r0, #0
 80027aa:	f7ff ff55 	bl	8002658 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80027ae:	2307      	movs	r3, #7
 80027b0:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80027b8:	2301      	movs	r3, #1
 80027ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80027c2:	2340      	movs	r3, #64	; 0x40
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027ca:	f107 031c 	add.w	r3, r7, #28
 80027ce:	4618      	mov	r0, r3
 80027d0:	f003 fb2c 	bl	8005e2c <HAL_RCC_OscConfig>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <SystemClock_Config+0x60>
  {
    Error_Handler();
 80027da:	f000 f90b 	bl	80029f4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80027de:	236f      	movs	r3, #111	; 0x6f
 80027e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80027e2:	2302      	movs	r3, #2
 80027e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ee:	2300      	movs	r3, #0
 80027f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80027f6:	2300      	movs	r3, #0
 80027f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80027fa:	463b      	mov	r3, r7
 80027fc:	2101      	movs	r1, #1
 80027fe:	4618      	mov	r0, r3
 8002800:	f003 fe4a 	bl	8006498 <HAL_RCC_ClockConfig>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <SystemClock_Config+0x90>
  {
    Error_Handler();
 800280a:	f000 f8f3 	bl	80029f4 <Error_Handler>
  }
}
 800280e:	bf00      	nop
 8002810:	3760      	adds	r7, #96	; 0x60
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b08c      	sub	sp, #48	; 0x30
 800281a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800281c:	463b      	mov	r3, r7
 800281e:	2230      	movs	r2, #48	; 0x30
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f00a f96a 	bl	800cafc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002828:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800282c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800282e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002834:	2302      	movs	r3, #2
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002838:	2310      	movs	r3, #16
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800283c:	463b      	mov	r3, r7
 800283e:	4618      	mov	r0, r3
 8002840:	f004 f9ec 	bl	8006c1c <HAL_RCCEx_PeriphCLKConfig>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800284a:	f000 f8d3 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800284e:	bf00      	nop
 8002850:	3730      	adds	r7, #48	; 0x30
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
void MX_IPCC_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <MX_IPCC_Init+0x20>)
 800285e:	4a07      	ldr	r2, [pc, #28]	; (800287c <MX_IPCC_Init+0x24>)
 8002860:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002862:	4805      	ldr	r0, [pc, #20]	; (8002878 <MX_IPCC_Init+0x20>)
 8002864:	f002 fef4 	bl	8005650 <HAL_IPCC_Init>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800286e:	f000 f8c1 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20000448 	.word	0x20000448
 800287c:	58000c00 	.word	0x58000c00

08002880 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002884:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <MX_RNG_Init+0x24>)
 8002886:	4a08      	ldr	r2, [pc, #32]	; (80028a8 <MX_RNG_Init+0x28>)
 8002888:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <MX_RNG_Init+0x24>)
 800288c:	2200      	movs	r2, #0
 800288e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002890:	4804      	ldr	r0, [pc, #16]	; (80028a4 <MX_RNG_Init+0x24>)
 8002892:	f004 fab9 	bl	8006e08 <HAL_RNG_Init>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800289c:	f000 f8aa 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80028a0:	bf00      	nop
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20000484 	.word	0x20000484
 80028a8:	58001000 	.word	0x58001000

080028ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028b0:	4b19      	ldr	r3, [pc, #100]	; (8002918 <MX_RTC_Init+0x6c>)
 80028b2:	4a1a      	ldr	r2, [pc, #104]	; (800291c <MX_RTC_Init+0x70>)
 80028b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028b6:	4b18      	ldr	r3, [pc, #96]	; (8002918 <MX_RTC_Init+0x6c>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80028bc:	4b16      	ldr	r3, [pc, #88]	; (8002918 <MX_RTC_Init+0x6c>)
 80028be:	220f      	movs	r2, #15
 80028c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80028c2:	4b15      	ldr	r3, [pc, #84]	; (8002918 <MX_RTC_Init+0x6c>)
 80028c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80028c8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028ca:	4b13      	ldr	r3, [pc, #76]	; (8002918 <MX_RTC_Init+0x6c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <MX_RTC_Init+0x6c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80028d6:	4b10      	ldr	r3, [pc, #64]	; (8002918 <MX_RTC_Init+0x6c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028dc:	480e      	ldr	r0, [pc, #56]	; (8002918 <MX_RTC_Init+0x6c>)
 80028de:	f004 fac9 	bl	8006e74 <HAL_RTC_Init>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <MX_RTC_Init+0x40>
  {
    Error_Handler();
 80028e8:	f000 f884 	bl	80029f4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80028ec:	2200      	movs	r2, #0
 80028ee:	2100      	movs	r1, #0
 80028f0:	4809      	ldr	r0, [pc, #36]	; (8002918 <MX_RTC_Init+0x6c>)
 80028f2:	f004 fbbf 	bl	8007074 <HAL_RTCEx_SetWakeUpTimer_IT>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80028fc:	f000 f87a 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8002900:	4806      	ldr	r0, [pc, #24]	; (800291c <MX_RTC_Init+0x70>)
 8002902:	f7ff fefe 	bl	8002702 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8002906:	2100      	movs	r1, #0
 8002908:	4804      	ldr	r0, [pc, #16]	; (800291c <MX_RTC_Init+0x70>)
 800290a:	f7ff ff0a 	bl	8002722 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800290e:	4803      	ldr	r0, [pc, #12]	; (800291c <MX_RTC_Init+0x70>)
 8002910:	f7ff feea 	bl	80026e8 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000498 	.word	0x20000498
 800291c:	40002800 	.word	0x40002800

08002920 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002924:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <MX_USART1_UART_Init+0x94>)
 8002926:	4a24      	ldr	r2, [pc, #144]	; (80029b8 <MX_USART1_UART_Init+0x98>)
 8002928:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800292a:	4b22      	ldr	r3, [pc, #136]	; (80029b4 <MX_USART1_UART_Init+0x94>)
 800292c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002930:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <MX_USART1_UART_Init+0x94>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002938:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <MX_USART1_UART_Init+0x94>)
 800293a:	2200      	movs	r2, #0
 800293c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800293e:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <MX_USART1_UART_Init+0x94>)
 8002940:	2200      	movs	r2, #0
 8002942:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002944:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <MX_USART1_UART_Init+0x94>)
 8002946:	220c      	movs	r2, #12
 8002948:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800294a:	4b1a      	ldr	r3, [pc, #104]	; (80029b4 <MX_USART1_UART_Init+0x94>)
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002950:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <MX_USART1_UART_Init+0x94>)
 8002952:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002956:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002958:	4b16      	ldr	r3, [pc, #88]	; (80029b4 <MX_USART1_UART_Init+0x94>)
 800295a:	2200      	movs	r2, #0
 800295c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800295e:	4b15      	ldr	r3, [pc, #84]	; (80029b4 <MX_USART1_UART_Init+0x94>)
 8002960:	2200      	movs	r2, #0
 8002962:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002964:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <MX_USART1_UART_Init+0x94>)
 8002966:	2200      	movs	r2, #0
 8002968:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800296a:	4812      	ldr	r0, [pc, #72]	; (80029b4 <MX_USART1_UART_Init+0x94>)
 800296c:	f004 fc94 	bl	8007298 <HAL_UART_Init>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002976:	f000 f83d 	bl	80029f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800297a:	2100      	movs	r1, #0
 800297c:	480d      	ldr	r0, [pc, #52]	; (80029b4 <MX_USART1_UART_Init+0x94>)
 800297e:	f006 fce0 	bl	8009342 <HAL_UARTEx_SetTxFifoThreshold>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002988:	f000 f834 	bl	80029f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800298c:	2100      	movs	r1, #0
 800298e:	4809      	ldr	r0, [pc, #36]	; (80029b4 <MX_USART1_UART_Init+0x94>)
 8002990:	f006 fd15 	bl	80093be <HAL_UARTEx_SetRxFifoThreshold>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800299a:	f000 f82b 	bl	80029f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800299e:	4805      	ldr	r0, [pc, #20]	; (80029b4 <MX_USART1_UART_Init+0x94>)
 80029a0:	f006 fc96 	bl	80092d0 <HAL_UARTEx_DisableFifoMode>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80029aa:	f000 f823 	bl	80029f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200004bc 	.word	0x200004bc
 80029b8:	40013800 	.word	0x40013800

080029bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80029c0:	2004      	movs	r0, #4
 80029c2:	f7ff fe5f 	bl	8002684 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029c6:	2001      	movs	r0, #1
 80029c8:	f7ff fe5c 	bl	8002684 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 80029cc:	2200      	movs	r2, #0
 80029ce:	210f      	movs	r1, #15
 80029d0:	200e      	movs	r0, #14
 80029d2:	f002 f8ce 	bl	8004b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80029d6:	200e      	movs	r0, #14
 80029d8:	f002 f8e5 	bl	8004ba6 <HAL_NVIC_EnableIRQ>

}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}

080029e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e4:	2004      	movs	r0, #4
 80029e6:	f7ff fe66 	bl	80026b6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ea:	2001      	movs	r0, #1
 80029ec:	f7ff fe63 	bl	80026b6 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029f0:	bf00      	nop
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_AHB2_GRP1_EnableClock>:
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4013      	ands	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a74:	68fb      	ldr	r3, [r7, #12]
}
 8002a76:	bf00      	nop
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <LL_AHB3_GRP1_EnableClock>:
{
 8002a82:	b480      	push	{r7}
 8002a84:	b085      	sub	sp, #20
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <LL_APB1_GRP1_EnableClock>:
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ac2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <LL_APB2_GRP1_EnableClock>:
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b085      	sub	sp, #20
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002af4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4013      	ands	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002b1c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002b20:	f7ff ffaf 	bl	8002a82 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002b24:	2200      	movs	r2, #0
 8002b26:	2100      	movs	r1, #0
 8002b28:	202e      	movs	r0, #46	; 0x2e
 8002b2a:	f002 f822 	bl	8004b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002b2e:	202e      	movs	r0, #46	; 0x2e
 8002b30:	f002 f839 	bl	8004ba6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a0d      	ldr	r2, [pc, #52]	; (8002b7c <HAL_IPCC_MspInit+0x44>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d113      	bne.n	8002b72 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002b4a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002b4e:	f7ff ff98 	bl	8002a82 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2100      	movs	r1, #0
 8002b56:	202c      	movs	r0, #44	; 0x2c
 8002b58:	f002 f80b 	bl	8004b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002b5c:	202c      	movs	r0, #44	; 0x2c
 8002b5e:	f002 f822 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2100      	movs	r1, #0
 8002b66:	202d      	movs	r0, #45	; 0x2d
 8002b68:	f002 f803 	bl	8004b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002b6c:	202d      	movs	r0, #45	; 0x2d
 8002b6e:	f002 f81a 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	58000c00 	.word	0x58000c00

08002b80 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08e      	sub	sp, #56	; 0x38
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b88:	f107 0308 	add.w	r3, r7, #8
 8002b8c:	2230      	movs	r2, #48	; 0x30
 8002b8e:	2100      	movs	r1, #0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f009 ffb3 	bl	800cafc <memset>
  if(hrng->Instance==RNG)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a0d      	ldr	r2, [pc, #52]	; (8002bd0 <HAL_RNG_MspInit+0x50>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d113      	bne.n	8002bc8 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002ba0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSE;
 8002ba6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002baa:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bac:	f107 0308 	add.w	r3, r7, #8
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f004 f833 	bl	8006c1c <HAL_RCCEx_PeriphCLKConfig>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002bbc:	f7ff ff1a 	bl	80029f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002bc0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002bc4:	f7ff ff5d 	bl	8002a82 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002bc8:	bf00      	nop
 8002bca:	3738      	adds	r7, #56	; 0x38
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	58001000 	.word	0x58001000

08002bd4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08e      	sub	sp, #56	; 0x38
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bdc:	f107 0308 	add.w	r3, r7, #8
 8002be0:	2230      	movs	r2, #48	; 0x30
 8002be2:	2100      	movs	r1, #0
 8002be4:	4618      	mov	r0, r3
 8002be6:	f009 ff89 	bl	800cafc <memset>
  if(hrtc->Instance==RTC)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a18      	ldr	r2, [pc, #96]	; (8002c50 <HAL_RTC_MspInit+0x7c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d128      	bne.n	8002c46 <HAL_RTC_MspInit+0x72>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002bf4:	f002 fdb2 	bl	800575c <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8002bf8:	f002 fdb0 	bl	800575c <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8002bfc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c00:	f7ff feff 	bl	8002a02 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002c04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c08:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002c0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c10:	f107 0308 	add.w	r3, r7, #8
 8002c14:	4618      	mov	r0, r3
 8002c16:	f004 f801 	bl	8006c1c <HAL_RCCEx_PeriphCLKConfig>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_RTC_MspInit+0x50>
    {
      Error_Handler();
 8002c20:	f7ff fee8 	bl	80029f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002c24:	f7ff ff03 	bl	8002a2e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002c28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002c2c:	f7ff ff42 	bl	8002ab4 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002c30:	2200      	movs	r2, #0
 8002c32:	2100      	movs	r1, #0
 8002c34:	2003      	movs	r0, #3
 8002c36:	f001 ff9c 	bl	8004b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002c3a:	2003      	movs	r0, #3
 8002c3c:	f001 ffb3 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f004 fad3 	bl	80071ec <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002c46:	bf00      	nop
 8002c48:	3738      	adds	r7, #56	; 0x38
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40002800 	.word	0x40002800

08002c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b094      	sub	sp, #80	; 0x50
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	605a      	str	r2, [r3, #4]
 8002c66:	609a      	str	r2, [r3, #8]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c6c:	f107 030c 	add.w	r3, r7, #12
 8002c70:	2230      	movs	r2, #48	; 0x30
 8002c72:	2100      	movs	r1, #0
 8002c74:	4618      	mov	r0, r3
 8002c76:	f009 ff41 	bl	800cafc <memset>
  if(huart->Instance==USART1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a2f      	ldr	r2, [pc, #188]	; (8002d3c <HAL_UART_MspInit+0xe8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d157      	bne.n	8002d34 <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c84:	2301      	movs	r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c8c:	f107 030c 	add.w	r3, r7, #12
 8002c90:	4618      	mov	r0, r3
 8002c92:	f003 ffc3 	bl	8006c1c <HAL_RCCEx_PeriphCLKConfig>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c9c:	f7ff feaa 	bl	80029f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ca0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ca4:	f7ff ff1f 	bl	8002ae6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca8:	2001      	movs	r0, #1
 8002caa:	f7ff fed1 	bl	8002a50 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cc0:	2307      	movs	r3, #7
 8002cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cce:	f002 fb03 	bl	80052d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002cd2:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <HAL_UART_MspInit+0xec>)
 8002cd4:	4a1b      	ldr	r2, [pc, #108]	; (8002d44 <HAL_UART_MspInit+0xf0>)
 8002cd6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002cd8:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <HAL_UART_MspInit+0xec>)
 8002cda:	220f      	movs	r2, #15
 8002cdc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <HAL_UART_MspInit+0xec>)
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ce4:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <HAL_UART_MspInit+0xec>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <HAL_UART_MspInit+0xec>)
 8002cec:	2280      	movs	r2, #128	; 0x80
 8002cee:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cf0:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <HAL_UART_MspInit+0xec>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cf6:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <HAL_UART_MspInit+0xec>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002cfc:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <HAL_UART_MspInit+0xec>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d02:	4b0f      	ldr	r3, [pc, #60]	; (8002d40 <HAL_UART_MspInit+0xec>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d08:	480d      	ldr	r0, [pc, #52]	; (8002d40 <HAL_UART_MspInit+0xec>)
 8002d0a:	f001 ff91 	bl	8004c30 <HAL_DMA_Init>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8002d14:	f7ff fe6e 	bl	80029f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a09      	ldr	r2, [pc, #36]	; (8002d40 <HAL_UART_MspInit+0xec>)
 8002d1c:	67da      	str	r2, [r3, #124]	; 0x7c
 8002d1e:	4a08      	ldr	r2, [pc, #32]	; (8002d40 <HAL_UART_MspInit+0xec>)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d24:	2200      	movs	r2, #0
 8002d26:	2100      	movs	r1, #0
 8002d28:	2024      	movs	r0, #36	; 0x24
 8002d2a:	f001 ff22 	bl	8004b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d2e:	2024      	movs	r0, #36	; 0x24
 8002d30:	f001 ff39 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d34:	bf00      	nop
 8002d36:	3750      	adds	r7, #80	; 0x50
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40013800 	.word	0x40013800
 8002d40:	20000550 	.word	0x20000550
 8002d44:	40020044 	.word	0x40020044

08002d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d4c:	e7fe      	b.n	8002d4c <NMI_Handler+0x4>

08002d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d52:	e7fe      	b.n	8002d52 <HardFault_Handler+0x4>

08002d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d58:	e7fe      	b.n	8002d58 <MemManage_Handler+0x4>

08002d5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d5e:	e7fe      	b.n	8002d5e <BusFault_Handler+0x4>

08002d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d64:	e7fe      	b.n	8002d64 <UsageFault_Handler+0x4>

08002d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d94:	f001 fd7a 	bl	800488c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002da0:	f7ff f880 	bl	8001ea4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002da4:	bf00      	nop
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002dac:	4802      	ldr	r0, [pc, #8]	; (8002db8 <DMA1_Channel4_IRQHandler+0x10>)
 8002dae:	f002 f904 	bl	8004fba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000550 	.word	0x20000550

08002dbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002dc0:	4802      	ldr	r0, [pc, #8]	; (8002dcc <USART1_IRQHandler+0x10>)
 8002dc2:	f004 fb85 	bl	80074d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002dc6:	bf00      	nop
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	200004bc 	.word	0x200004bc

08002dd0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002dd4:	f001 f9e6 	bl	80041a4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002dd8:	bf00      	nop
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002de0:	f001 fa18 	bl	8004214 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002de4:	bf00      	nop
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002dec:	f002 fc0c 	bl	8005608 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002df0:	bf00      	nop
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f002 fbed 	bl	80055d8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8002e06:	2010      	movs	r0, #16
 8002e08:	f002 fbe6 	bl	80055d8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <EXTI9_5_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8002e14:	2040      	movs	r0, #64	; 0x40
 8002e16:	f002 fbdf 	bl	80055d8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	af00      	add	r7, sp, #0
  return 1;
 8002e22:	2301      	movs	r3, #1
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <_kill>:

int _kill(int pid, int sig)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e38:	f009 fe28 	bl	800ca8c <__errno>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2216      	movs	r2, #22
 8002e40:	601a      	str	r2, [r3, #0]
  return -1;
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <_exit>:

void _exit (int status)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e56:	f04f 31ff 	mov.w	r1, #4294967295
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff ffe7 	bl	8002e2e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e60:	e7fe      	b.n	8002e60 <_exit+0x12>

08002e62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	e00a      	b.n	8002e8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e74:	f3af 8000 	nop.w
 8002e78:	4601      	mov	r1, r0
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	1c5a      	adds	r2, r3, #1
 8002e7e:	60ba      	str	r2, [r7, #8]
 8002e80:	b2ca      	uxtb	r2, r1
 8002e82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	3301      	adds	r3, #1
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	dbf0      	blt.n	8002e74 <_read+0x12>
  }

  return len;
 8002e92:	687b      	ldr	r3, [r7, #4]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <_close>:
  }
  return len;
}

int _close(int file)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ec4:	605a      	str	r2, [r3, #4]
  return 0;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <_isatty>:

int _isatty(int file)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002edc:	2301      	movs	r3, #1
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b085      	sub	sp, #20
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f0c:	4a14      	ldr	r2, [pc, #80]	; (8002f60 <_sbrk+0x5c>)
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <_sbrk+0x60>)
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f18:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <_sbrk+0x64>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <_sbrk+0x64>)
 8002f22:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <_sbrk+0x68>)
 8002f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <_sbrk+0x64>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d207      	bcs.n	8002f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f34:	f009 fdaa 	bl	800ca8c <__errno>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	220c      	movs	r2, #12
 8002f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f42:	e009      	b.n	8002f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f44:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <_sbrk+0x64>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f4a:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <_sbrk+0x64>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	4a05      	ldr	r2, [pc, #20]	; (8002f68 <_sbrk+0x64>)
 8002f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f56:	68fb      	ldr	r3, [r7, #12]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20003000 	.word	0x20003000
 8002f64:	00001000 	.word	0x00001000
 8002f68:	200005b0 	.word	0x200005b0
 8002f6c:	200017c0 	.word	0x200017c0

08002f70 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8002f74:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <LL_FLASH_GetUDN+0x14>)
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	1fff7580 	.word	0x1fff7580

08002f88 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002f8c:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <LL_FLASH_GetDeviceID+0x14>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	b2db      	uxtb	r3, r3
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	1fff7584 	.word	0x1fff7584

08002fa0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002fa4:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <LL_FLASH_GetSTCompanyID+0x14>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	1fff7584 	.word	0x1fff7584

08002fb8 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8002fb8:	b5b0      	push	{r4, r5, r7, lr}
 8002fba:	b090      	sub	sp, #64	; 0x40
 8002fbc:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002fbe:	2392      	movs	r3, #146	; 0x92
 8002fc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8002fc4:	4b3f      	ldr	r3, [pc, #252]	; (80030c4 <APP_BLE_Init+0x10c>)
 8002fc6:	1d3c      	adds	r4, r7, #4
 8002fc8:	461d      	mov	r5, r3
 8002fca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fd6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002fda:	c403      	stmia	r4!, {r0, r1}
 8002fdc:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8002fde:	f000 fb11 	bl	8003604 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	2002      	movs	r0, #2
 8002fe6:	f009 fae3 	bl	800c5b0 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8002fea:	4a37      	ldr	r2, [pc, #220]	; (80030c8 <APP_BLE_Init+0x110>)
 8002fec:	2100      	movs	r1, #0
 8002fee:	2004      	movs	r0, #4
 8002ff0:	f009 fc0a 	bl	800c808 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f008 f87a 	bl	800b0f0 <SHCI_C2_BLE_Init>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8003002:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003006:	2b00      	cmp	r3, #0
 8003008:	d008      	beq.n	800301c <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800300a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800300e:	4619      	mov	r1, r3
 8003010:	482e      	ldr	r0, [pc, #184]	; (80030cc <APP_BLE_Init+0x114>)
 8003012:	f00a f9e5 	bl	800d3e0 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8003016:	f7ff fced 	bl	80029f4 <Error_Handler>
 800301a:	e002      	b.n	8003022 <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800301c:	482c      	ldr	r0, [pc, #176]	; (80030d0 <APP_BLE_Init+0x118>)
 800301e:	f00a f9df 	bl	800d3e0 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8003022:	f000 fb05 	bl	8003630 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8003026:	f008 ffc3 	bl	800bfb0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800302a:	4b2a      	ldr	r3, [pc, #168]	; (80030d4 <APP_BLE_Init+0x11c>)
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8003032:	4b28      	ldr	r3, [pc, #160]	; (80030d4 <APP_BLE_Init+0x11c>)
 8003034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003038:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800303a:	4a27      	ldr	r2, [pc, #156]	; (80030d8 <APP_BLE_Init+0x120>)
 800303c:	2100      	movs	r1, #0
 800303e:	2001      	movs	r0, #1
 8003040:	f009 fbe2 	bl	800c808 <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 8003044:	4a25      	ldr	r2, [pc, #148]	; (80030dc <APP_BLE_Init+0x124>)
 8003046:	2100      	movs	r1, #0
 8003048:	2002      	movs	r0, #2
 800304a:	f009 fbdd 	bl	800c808 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800304e:	2006      	movs	r0, #6
 8003050:	f007 fa75 	bl	800a53e <aci_hal_set_radio_activity_mask>
 8003054:	4603      	mov	r3, r0
 8003056:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800305a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800305e:	2b00      	cmp	r3, #0
 8003060:	d006      	beq.n	8003070 <APP_BLE_Init+0xb8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8003062:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003066:	4619      	mov	r1, r3
 8003068:	481d      	ldr	r0, [pc, #116]	; (80030e0 <APP_BLE_Init+0x128>)
 800306a:	f00a f9b9 	bl	800d3e0 <iprintf>
 800306e:	e002      	b.n	8003076 <APP_BLE_Init+0xbe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8003070:	481c      	ldr	r0, [pc, #112]	; (80030e4 <APP_BLE_Init+0x12c>)
 8003072:	f00a f9b5 	bl	800d3e0 <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 8003076:	4b1c      	ldr	r3, [pc, #112]	; (80030e8 <APP_BLE_Init+0x130>)
 8003078:	2200      	movs	r2, #0
 800307a:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 800307c:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <APP_BLE_Init+0x134>)
 800307e:	2201      	movs	r2, #1
 8003080:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8003082:	f000 ff25 	bl	8003ed0 <P2PS_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8003086:	4b1a      	ldr	r3, [pc, #104]	; (80030f0 <APP_BLE_Init+0x138>)
 8003088:	2200      	movs	r2, #0
 800308a:	491a      	ldr	r1, [pc, #104]	; (80030f4 <APP_BLE_Init+0x13c>)
 800308c:	2000      	movs	r0, #0
 800308e:	f7ff f8ab 	bl	80021e8 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8003092:	4b19      	ldr	r3, [pc, #100]	; (80030f8 <APP_BLE_Init+0x140>)
 8003094:	2200      	movs	r2, #0
 8003096:	4919      	ldr	r1, [pc, #100]	; (80030fc <APP_BLE_Init+0x144>)
 8003098:	2000      	movs	r0, #0
 800309a:	f7ff f8a5 	bl	80021e8 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800309e:	4b0d      	ldr	r3, [pc, #52]	; (80030d4 <APP_BLE_Init+0x11c>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80030a4:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <APP_BLE_Init+0x11c>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 80030aa:	4b15      	ldr	r3, [pc, #84]	; (8003100 <APP_BLE_Init+0x148>)
 80030ac:	2280      	movs	r2, #128	; 0x80
 80030ae:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 80030b0:	4b14      	ldr	r3, [pc, #80]	; (8003104 <APP_BLE_Init+0x14c>)
 80030b2:	22a0      	movs	r2, #160	; 0xa0
 80030b4:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80030b6:	2001      	movs	r0, #1
 80030b8:	f000 fc64 	bl	8003984 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80030bc:	bf00      	nop
}
 80030be:	3740      	adds	r7, #64	; 0x40
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bdb0      	pop	{r4, r5, r7, pc}
 80030c4:	0800fb94 	.word	0x0800fb94
 80030c8:	0800ab09 	.word	0x0800ab09
 80030cc:	0800fab8 	.word	0x0800fab8
 80030d0:	0800faf0 	.word	0x0800faf0
 80030d4:	200005bc 	.word	0x200005bc
 80030d8:	08003b65 	.word	0x08003b65
 80030dc:	08003cad 	.word	0x08003cad
 80030e0:	0800fb18 	.word	0x0800fb18
 80030e4:	0800fb5c 	.word	0x0800fb5c
 80030e8:	20000648 	.word	0x20000648
 80030ec:	20000649 	.word	0x20000649
 80030f0:	08003bc5 	.word	0x08003bc5
 80030f4:	2000063d 	.word	0x2000063d
 80030f8:	08003bd5 	.word	0x08003bd5
 80030fc:	2000063e 	.word	0x2000063e
 8003100:	20000640 	.word	0x20000640
 8003104:	20000642 	.word	0x20000642

08003108 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8003108:	b5b0      	push	{r4, r5, r7, lr}
 800310a:	b090      	sub	sp, #64	; 0x40
 800310c:	af04      	add	r7, sp, #16
 800310e:	6078      	str	r0, [r7, #4]
	printf("start notification\n\r");
 8003110:	4896      	ldr	r0, [pc, #600]	; (800336c <SVCCTL_App_Notification+0x264>)
 8003112:	f00a f965 	bl	800d3e0 <iprintf>
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8003116:	2392      	movs	r3, #146	; 0x92
 8003118:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3301      	adds	r3, #1
 8003120:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (p_event_pckt->evt)
 8003122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2bff      	cmp	r3, #255	; 0xff
 8003128:	f000 8140 	beq.w	80033ac <SVCCTL_App_Notification+0x2a4>
 800312c:	2bff      	cmp	r3, #255	; 0xff
 800312e:	f300 821c 	bgt.w	800356a <SVCCTL_App_Notification+0x462>
 8003132:	2b05      	cmp	r3, #5
 8003134:	d002      	beq.n	800313c <SVCCTL_App_Notification+0x34>
 8003136:	2b3e      	cmp	r3, #62	; 0x3e
 8003138:	d02e      	beq.n	8003198 <SVCCTL_App_Notification+0x90>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800313a:	e216      	b.n	800356a <SVCCTL_App_Notification+0x462>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800313c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313e:	3302      	adds	r3, #2
 8003140:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003148:	b29a      	uxth	r2, r3
 800314a:	4b89      	ldr	r3, [pc, #548]	; (8003370 <SVCCTL_App_Notification+0x268>)
 800314c:	8adb      	ldrh	r3, [r3, #22]
 800314e:	429a      	cmp	r2, r3
 8003150:	d114      	bne.n	800317c <SVCCTL_App_Notification+0x74>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8003152:	4b87      	ldr	r3, [pc, #540]	; (8003370 <SVCCTL_App_Notification+0x268>)
 8003154:	2200      	movs	r2, #0
 8003156:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8003158:	4b85      	ldr	r3, [pc, #532]	; (8003370 <SVCCTL_App_Notification+0x268>)
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 8003160:	4884      	ldr	r0, [pc, #528]	; (8003374 <SVCCTL_App_Notification+0x26c>)
 8003162:	f00a f9d9 	bl	800d518 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800316c:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800316e:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8003174:	461a      	mov	r2, r3
 8003176:	4880      	ldr	r0, [pc, #512]	; (8003378 <SVCCTL_App_Notification+0x270>)
 8003178:	f00a f932 	bl	800d3e0 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800317c:	2001      	movs	r0, #1
 800317e:	f000 fc01 	bl	8003984 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8003182:	4b7e      	ldr	r3, [pc, #504]	; (800337c <SVCCTL_App_Notification+0x274>)
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8003188:	4b79      	ldr	r3, [pc, #484]	; (8003370 <SVCCTL_App_Notification+0x268>)
 800318a:	8ada      	ldrh	r2, [r3, #22]
 800318c:	4b7b      	ldr	r3, [pc, #492]	; (800337c <SVCCTL_App_Notification+0x274>)
 800318e:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 8003190:	487a      	ldr	r0, [pc, #488]	; (800337c <SVCCTL_App_Notification+0x274>)
 8003192:	f000 fe89 	bl	8003ea8 <P2PS_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8003196:	e1eb      	b.n	8003570 <SVCCTL_App_Notification+0x468>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319a:	3302      	adds	r3, #2
 800319c:	61fb      	str	r3, [r7, #28]
      switch (p_meta_evt->subevent)
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b0c      	cmp	r3, #12
 80031a4:	d033      	beq.n	800320e <SVCCTL_App_Notification+0x106>
 80031a6:	2b0c      	cmp	r3, #12
 80031a8:	f300 80de 	bgt.w	8003368 <SVCCTL_App_Notification+0x260>
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d06c      	beq.n	800328a <SVCCTL_App_Notification+0x182>
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	f040 80d9 	bne.w	8003368 <SVCCTL_App_Notification+0x260>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3301      	adds	r3, #1
 80031ba:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 80031bc:	4870      	ldr	r0, [pc, #448]	; (8003380 <SVCCTL_App_Notification+0x278>)
 80031be:	f00a f9ab 	bl	800d518 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80031c8:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd f992 	bl	80004f4 <__aeabi_i2d>
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	4b6b      	ldr	r3, [pc, #428]	; (8003384 <SVCCTL_App_Notification+0x27c>)
 80031d6:	f7fd f9f7 	bl	80005c8 <__aeabi_dmul>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4610      	mov	r0, r2
 80031e0:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80031e8:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80031ea:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	9400      	str	r4, [sp, #0]
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4860      	ldr	r0, [pc, #384]	; (8003388 <SVCCTL_App_Notification+0x280>)
 8003208:	f00a f8ea 	bl	800d3e0 <iprintf>
          break;
 800320c:	e0ad      	b.n	800336a <SVCCTL_App_Notification+0x262>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3301      	adds	r3, #1
 8003212:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 8003214:	485d      	ldr	r0, [pc, #372]	; (800338c <SVCCTL_App_Notification+0x284>)
 8003216:	f00a f8e3 	bl	800d3e0 <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <SVCCTL_App_Notification+0x122>
            APP_DBG_MSG("status ok \n");
 8003222:	485b      	ldr	r0, [pc, #364]	; (8003390 <SVCCTL_App_Notification+0x288>)
 8003224:	f00a f978 	bl	800d518 <puts>
 8003228:	e002      	b.n	8003230 <SVCCTL_App_Notification+0x128>
            APP_DBG_MSG("status nok \n");
 800322a:	485a      	ldr	r0, [pc, #360]	; (8003394 <SVCCTL_App_Notification+0x28c>)
 800322c:	f00a f974 	bl	800d518 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 8003230:	4b4f      	ldr	r3, [pc, #316]	; (8003370 <SVCCTL_App_Notification+0x268>)
 8003232:	8adb      	ldrh	r3, [r3, #22]
 8003234:	f107 020a 	add.w	r2, r7, #10
 8003238:	f107 010b 	add.w	r1, r7, #11
 800323c:	4618      	mov	r0, r3
 800323e:	f007 f9f6 	bl	800a62e <hci_le_read_phy>
 8003242:	4603      	mov	r3, r0
 8003244:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8003248:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <SVCCTL_App_Notification+0x150>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 8003250:	4851      	ldr	r0, [pc, #324]	; (8003398 <SVCCTL_App_Notification+0x290>)
 8003252:	f00a f8c5 	bl	800d3e0 <iprintf>
          break;
 8003256:	e088      	b.n	800336a <SVCCTL_App_Notification+0x262>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 8003258:	4850      	ldr	r0, [pc, #320]	; (800339c <SVCCTL_App_Notification+0x294>)
 800325a:	f00a f95d 	bl	800d518 <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 800325e:	7afb      	ldrb	r3, [r7, #11]
 8003260:	2b02      	cmp	r3, #2
 8003262:	d10a      	bne.n	800327a <SVCCTL_App_Notification+0x172>
 8003264:	7abb      	ldrb	r3, [r7, #10]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d107      	bne.n	800327a <SVCCTL_App_Notification+0x172>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800326a:	7afb      	ldrb	r3, [r7, #11]
 800326c:	4619      	mov	r1, r3
 800326e:	7abb      	ldrb	r3, [r7, #10]
 8003270:	461a      	mov	r2, r3
 8003272:	484b      	ldr	r0, [pc, #300]	; (80033a0 <SVCCTL_App_Notification+0x298>)
 8003274:	f00a f8b4 	bl	800d3e0 <iprintf>
          break;
 8003278:	e077      	b.n	800336a <SVCCTL_App_Notification+0x262>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800327a:	7afb      	ldrb	r3, [r7, #11]
 800327c:	4619      	mov	r1, r3
 800327e:	7abb      	ldrb	r3, [r7, #10]
 8003280:	461a      	mov	r2, r3
 8003282:	4847      	ldr	r0, [pc, #284]	; (80033a0 <SVCCTL_App_Notification+0x298>)
 8003284:	f00a f8ac 	bl	800d3e0 <iprintf>
          break;
 8003288:	e06f      	b.n	800336a <SVCCTL_App_Notification+0x262>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	3301      	adds	r3, #1
 800328e:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8003290:	4b37      	ldr	r3, [pc, #220]	; (8003370 <SVCCTL_App_Notification+0x268>)
 8003292:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff f820 	bl	80022dc <HW_TS_Stop>
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	4619      	mov	r1, r3
 80032a6:	483f      	ldr	r0, [pc, #252]	; (80033a4 <SVCCTL_App_Notification+0x29c>)
 80032a8:	f00a f89a 	bl	800d3e0 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80032b0:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80032b6:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80032bc:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80032c2:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80032c8:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80032ce:	9302      	str	r3, [sp, #8]
 80032d0:	9101      	str	r1, [sp, #4]
 80032d2:	9200      	str	r2, [sp, #0]
 80032d4:	462b      	mov	r3, r5
 80032d6:	4622      	mov	r2, r4
 80032d8:	4601      	mov	r1, r0
 80032da:	4833      	ldr	r0, [pc, #204]	; (80033a8 <SVCCTL_App_Notification+0x2a0>)
 80032dc:	f00a f880 	bl	800d3e0 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80032e6:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd f903 	bl	80004f4 <__aeabi_i2d>
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <SVCCTL_App_Notification+0x27c>)
 80032f4:	f7fd f968 	bl	80005c8 <__aeabi_dmul>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4610      	mov	r0, r2
 80032fe:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8003306:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003308:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8003310:	b29b      	uxth	r3, r3
 8003312:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	9400      	str	r4, [sp, #0]
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4818      	ldr	r0, [pc, #96]	; (8003388 <SVCCTL_App_Notification+0x280>)
 8003326:	f00a f85b 	bl	800d3e0 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800332a:	4b11      	ldr	r3, [pc, #68]	; (8003370 <SVCCTL_App_Notification+0x268>)
 800332c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003330:	2b04      	cmp	r3, #4
 8003332:	d104      	bne.n	800333e <SVCCTL_App_Notification+0x236>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8003334:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <SVCCTL_App_Notification+0x268>)
 8003336:	2206      	movs	r2, #6
 8003338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800333c:	e003      	b.n	8003346 <SVCCTL_App_Notification+0x23e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800333e:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <SVCCTL_App_Notification+0x268>)
 8003340:	2205      	movs	r2, #5
 8003342:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800334c:	b29a      	uxth	r2, r3
 800334e:	4b08      	ldr	r3, [pc, #32]	; (8003370 <SVCCTL_App_Notification+0x268>)
 8003350:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8003352:	4b0a      	ldr	r3, [pc, #40]	; (800337c <SVCCTL_App_Notification+0x274>)
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <SVCCTL_App_Notification+0x268>)
 800335a:	8ada      	ldrh	r2, [r3, #22]
 800335c:	4b07      	ldr	r3, [pc, #28]	; (800337c <SVCCTL_App_Notification+0x274>)
 800335e:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 8003360:	4806      	ldr	r0, [pc, #24]	; (800337c <SVCCTL_App_Notification+0x274>)
 8003362:	f000 fda1 	bl	8003ea8 <P2PS_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8003366:	e000      	b.n	800336a <SVCCTL_App_Notification+0x262>
          break;
 8003368:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800336a:	e101      	b.n	8003570 <SVCCTL_App_Notification+0x468>
 800336c:	0800fbd0 	.word	0x0800fbd0
 8003370:	200005bc 	.word	0x200005bc
 8003374:	0800fbe8 	.word	0x0800fbe8
 8003378:	0800fc14 	.word	0x0800fc14
 800337c:	20000644 	.word	0x20000644
 8003380:	0800fc50 	.word	0x0800fc50
 8003384:	3ff40000 	.word	0x3ff40000
 8003388:	0800fc84 	.word	0x0800fc84
 800338c:	0800fcf0 	.word	0x0800fcf0
 8003390:	0800fd20 	.word	0x0800fd20
 8003394:	0800fd2c 	.word	0x0800fd2c
 8003398:	0800fd38 	.word	0x0800fd38
 800339c:	0800fd58 	.word	0x0800fd58
 80033a0:	0800fd78 	.word	0x0800fd78
 80033a4:	0800fd9c 	.word	0x0800fd9c
 80033a8:	0800fde4 	.word	0x0800fde4
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ae:	3302      	adds	r3, #2
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
      switch (p_blecore_evt->ecode)
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033bc:	f000 80c1 	beq.w	8003542 <SVCCTL_App_Notification+0x43a>
 80033c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c4:	f300 80d3 	bgt.w	800356e <SVCCTL_App_Notification+0x466>
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	f000 80c2 	beq.w	8003552 <SVCCTL_App_Notification+0x44a>
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	f2c0 80cd 	blt.w	800356e <SVCCTL_App_Notification+0x466>
 80033d4:	f240 420a 	movw	r2, #1034	; 0x40a
 80033d8:	4293      	cmp	r3, r2
 80033da:	f300 80c8 	bgt.w	800356e <SVCCTL_App_Notification+0x466>
 80033de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e2:	f2c0 80c4 	blt.w	800356e <SVCCTL_App_Notification+0x466>
 80033e6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80033ea:	2b0a      	cmp	r3, #10
 80033ec:	f200 80bf 	bhi.w	800356e <SVCCTL_App_Notification+0x466>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <SVCCTL_App_Notification+0x2f0>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	08003425 	.word	0x08003425
 80033fc:	0800350d 	.word	0x0800350d
 8003400:	0800342d 	.word	0x0800342d
 8003404:	08003463 	.word	0x08003463
 8003408:	0800346b 	.word	0x0800346b
 800340c:	08003473 	.word	0x08003473
 8003410:	0800356f 	.word	0x0800356f
 8003414:	0800354b 	.word	0x0800354b
 8003418:	080034a7 	.word	0x080034a7
 800341c:	080034b7 	.word	0x080034b7
 8003420:	080034af 	.word	0x080034af
          APP_DBG_MSG(">>== ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 8003424:	4855      	ldr	r0, [pc, #340]	; (800357c <SVCCTL_App_Notification+0x474>)
 8003426:	f00a f877 	bl	800d518 <puts>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 800342a:	e09d      	b.n	8003568 <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800342c:	4854      	ldr	r0, [pc, #336]	; (8003580 <SVCCTL_App_Notification+0x478>)
 800342e:	f00a f873 	bl	800d518 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 8003432:	4b54      	ldr	r3, [pc, #336]	; (8003584 <SVCCTL_App_Notification+0x47c>)
 8003434:	8adb      	ldrh	r3, [r3, #22]
 8003436:	4954      	ldr	r1, [pc, #336]	; (8003588 <SVCCTL_App_Notification+0x480>)
 8003438:	4618      	mov	r0, r3
 800343a:	f006 fa83 	bl	8009944 <aci_gap_pass_key_resp>
 800343e:	4603      	mov	r3, r0
 8003440:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8003444:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003448:	2b00      	cmp	r3, #0
 800344a:	d006      	beq.n	800345a <SVCCTL_App_Notification+0x352>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800344c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003450:	4619      	mov	r1, r3
 8003452:	484e      	ldr	r0, [pc, #312]	; (800358c <SVCCTL_App_Notification+0x484>)
 8003454:	f009 ffc4 	bl	800d3e0 <iprintf>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 8003458:	e086      	b.n	8003568 <SVCCTL_App_Notification+0x460>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800345a:	484d      	ldr	r0, [pc, #308]	; (8003590 <SVCCTL_App_Notification+0x488>)
 800345c:	f00a f85c 	bl	800d518 <puts>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 8003460:	e082      	b.n	8003568 <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG(">>== ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE\n");
 8003462:	484c      	ldr	r0, [pc, #304]	; (8003594 <SVCCTL_App_Notification+0x48c>)
 8003464:	f00a f858 	bl	800d518 <puts>
          break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 8003468:	e07e      	b.n	8003568 <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG("==>> ACI_GAP_SLAVE_SECURITY_INITIATED_VSEVT_CODE \n");
 800346a:	484b      	ldr	r0, [pc, #300]	; (8003598 <SVCCTL_App_Notification+0x490>)
 800346c:	f00a f854 	bl	800d518 <puts>
          break; /* ACI_GAP_SLAVE_SECURITY_INITIATED_VSEVT_CODE */
 8003470:	e07a      	b.n	8003568 <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG("==>> ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 8003472:	484a      	ldr	r0, [pc, #296]	; (800359c <SVCCTL_App_Notification+0x494>)
 8003474:	f00a f850 	bl	800d518 <puts>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8003478:	4b42      	ldr	r3, [pc, #264]	; (8003584 <SVCCTL_App_Notification+0x47c>)
 800347a:	8adb      	ldrh	r3, [r3, #22]
 800347c:	4618      	mov	r0, r3
 800347e:	f006 fc0b 	bl	8009c98 <aci_gap_allow_rebond>
 8003482:	4603      	mov	r3, r0
 8003484:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8003488:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800348c:	2b00      	cmp	r3, #0
 800348e:	d006      	beq.n	800349e <SVCCTL_App_Notification+0x396>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Fail, reason: 0x%x\n", ret);
 8003490:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003494:	4619      	mov	r1, r3
 8003496:	4842      	ldr	r0, [pc, #264]	; (80035a0 <SVCCTL_App_Notification+0x498>)
 8003498:	f009 ffa2 	bl	800d3e0 <iprintf>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800349c:	e064      	b.n	8003568 <SVCCTL_App_Notification+0x460>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Success \n");
 800349e:	4841      	ldr	r0, [pc, #260]	; (80035a4 <SVCCTL_App_Notification+0x49c>)
 80034a0:	f00a f83a 	bl	800d518 <puts>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 80034a4:	e060      	b.n	8003568 <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG(">>== ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 80034a6:	4840      	ldr	r0, [pc, #256]	; (80035a8 <SVCCTL_App_Notification+0x4a0>)
 80034a8:	f00a f836 	bl	800d518 <puts>
          break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 80034ac:	e05c      	b.n	8003568 <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 80034ae:	483f      	ldr	r0, [pc, #252]	; (80035ac <SVCCTL_App_Notification+0x4a4>)
 80034b0:	f00a f832 	bl	800d518 <puts>
          break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */    
 80034b4:	e058      	b.n	8003568 <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 80034b6:	483e      	ldr	r0, [pc, #248]	; (80035b0 <SVCCTL_App_Notification+0x4a8>)
 80034b8:	f00a f82e 	bl	800d518 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 80034c0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80034c4:	4619      	mov	r1, r3
 80034c6:	483b      	ldr	r0, [pc, #236]	; (80035b4 <SVCCTL_App_Notification+0x4ac>)
 80034c8:	f009 ff8a 	bl	800d3e0 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 80034d0:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80034d4:	4619      	mov	r1, r3
 80034d6:	4838      	ldr	r0, [pc, #224]	; (80035b8 <SVCCTL_App_Notification+0x4b0>)
 80034d8:	f009 ff82 	bl	800d3e0 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 80034dc:	4b29      	ldr	r3, [pc, #164]	; (8003584 <SVCCTL_App_Notification+0x47c>)
 80034de:	8adb      	ldrh	r3, [r3, #22]
 80034e0:	2101      	movs	r1, #1
 80034e2:	4618      	mov	r0, r3
 80034e4:	f006 fc2c 	bl	8009d40 <aci_gap_numeric_comparison_value_confirm_yesno>
 80034e8:	4603      	mov	r3, r0
 80034ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 80034ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d006      	beq.n	8003504 <SVCCTL_App_Notification+0x3fc>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 80034f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80034fa:	4619      	mov	r1, r3
 80034fc:	482f      	ldr	r0, [pc, #188]	; (80035bc <SVCCTL_App_Notification+0x4b4>)
 80034fe:	f009 ff6f 	bl	800d3e0 <iprintf>
          break;
 8003502:	e031      	b.n	8003568 <SVCCTL_App_Notification+0x460>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 8003504:	482e      	ldr	r0, [pc, #184]	; (80035c0 <SVCCTL_App_Notification+0x4b8>)
 8003506:	f00a f807 	bl	800d518 <puts>
          break;
 800350a:	e02d      	b.n	8003568 <SVCCTL_App_Notification+0x460>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	3302      	adds	r3, #2
 8003510:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8003512:	482c      	ldr	r0, [pc, #176]	; (80035c4 <SVCCTL_App_Notification+0x4bc>)
 8003514:	f00a f800 	bl	800d518 <puts>
          if (pairing_complete->Status == 0)
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	789b      	ldrb	r3, [r3, #2]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d103      	bne.n	8003528 <SVCCTL_App_Notification+0x420>
            APP_DBG_MSG("     - Pairing Success\n");
 8003520:	4829      	ldr	r0, [pc, #164]	; (80035c8 <SVCCTL_App_Notification+0x4c0>)
 8003522:	f009 fff9 	bl	800d518 <puts>
 8003526:	e008      	b.n	800353a <SVCCTL_App_Notification+0x432>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n",pairing_complete->Status, pairing_complete->Reason);
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	789b      	ldrb	r3, [r3, #2]
 800352c:	4619      	mov	r1, r3
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	78db      	ldrb	r3, [r3, #3]
 8003532:	461a      	mov	r2, r3
 8003534:	4825      	ldr	r0, [pc, #148]	; (80035cc <SVCCTL_App_Notification+0x4c4>)
 8003536:	f009 ff53 	bl	800d3e0 <iprintf>
          APP_DBG_MSG("\n");
 800353a:	200a      	movs	r0, #10
 800353c:	f009 ff68 	bl	800d410 <putchar>
          break;    
 8003540:	e012      	b.n	8003568 <SVCCTL_App_Notification+0x460>
          mutex = 1;
 8003542:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <SVCCTL_App_Notification+0x4c8>)
 8003544:	2201      	movs	r2, #1
 8003546:	701a      	strb	r2, [r3, #0]
          break;
 8003548:	e00e      	b.n	8003568 <SVCCTL_App_Notification+0x460>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800354a:	4822      	ldr	r0, [pc, #136]	; (80035d4 <SVCCTL_App_Notification+0x4cc>)
 800354c:	f009 ff48 	bl	800d3e0 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8003550:	e00a      	b.n	8003568 <SVCCTL_App_Notification+0x460>
          BSP_LED_On(LED_GREEN);
 8003552:	2001      	movs	r0, #1
 8003554:	f000 fff4 	bl	8004540 <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8003558:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <SVCCTL_App_Notification+0x47c>)
 800355a:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800355e:	210a      	movs	r1, #10
 8003560:	4618      	mov	r0, r3
 8003562:	f7fe ff3f 	bl	80023e4 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8003566:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8003568:	e001      	b.n	800356e <SVCCTL_App_Notification+0x466>
      break;
 800356a:	bf00      	nop
 800356c:	e000      	b.n	8003570 <SVCCTL_App_Notification+0x468>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800356e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8003570:	2301      	movs	r3, #1
}
 8003572:	4618      	mov	r0, r3
 8003574:	3730      	adds	r7, #48	; 0x30
 8003576:	46bd      	mov	sp, r7
 8003578:	bdb0      	pop	{r4, r5, r7, pc}
 800357a:	bf00      	nop
 800357c:	0800fe34 	.word	0x0800fe34
 8003580:	0800fe64 	.word	0x0800fe64
 8003584:	200005bc 	.word	0x200005bc
 8003588:	0001e240 	.word	0x0001e240
 800358c:	0800fe8c 	.word	0x0800fe8c
 8003590:	0800fec0 	.word	0x0800fec0
 8003594:	0800fee8 	.word	0x0800fee8
 8003598:	0800ff14 	.word	0x0800ff14
 800359c:	0800ff48 	.word	0x0800ff48
 80035a0:	0800ff6c 	.word	0x0800ff6c
 80035a4:	0800ff9c 	.word	0x0800ff9c
 80035a8:	0800ffc4 	.word	0x0800ffc4
 80035ac:	0800fff0 	.word	0x0800fff0
 80035b0:	08010020 	.word	0x08010020
 80035b4:	08010054 	.word	0x08010054
 80035b8:	08010070 	.word	0x08010070
 80035bc:	08010088 	.word	0x08010088
 80035c0:	080100d8 	.word	0x080100d8
 80035c4:	08010120 	.word	0x08010120
 80035c8:	0801014c 	.word	0x0801014c
 80035cc:	08010164 	.word	0x08010164
 80035d0:	20000649 	.word	0x20000649
 80035d4:	080101a0 	.word	0x080101a0

080035d8 <APP_BLE_Key_Button1_Action>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 80035dc:	f000 fca4 	bl	8003f28 <P2PS_APP_SW1_Button_Action>
}
 80035e0:	bf00      	nop
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )    
  UTIL_SEQ_SetTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, CFG_SCH_PRIO_0);
 80035e8:	2100      	movs	r1, #0
 80035ea:	2002      	movs	r0, #2
 80035ec:	f009 f92e 	bl	800c84c <UTIL_SEQ_SetTask>
#endif
  
  return;
 80035f0:	bf00      	nop
}
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
	...

08003604 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <Ble_Tl_Init+0x20>)
 800360c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800360e:	4b06      	ldr	r3, [pc, #24]	; (8003628 <Ble_Tl_Init+0x24>)
 8003610:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8003612:	463b      	mov	r3, r7
 8003614:	4619      	mov	r1, r3
 8003616:	4805      	ldr	r0, [pc, #20]	; (800362c <Ble_Tl_Init+0x28>)
 8003618:	f007 fa5a 	bl	800aad0 <hci_init>

  return;
 800361c:	bf00      	nop
}
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	20030028 	.word	0x20030028
 8003628:	08003d55 	.word	0x08003d55
 800362c:	08003d1d 	.word	0x08003d1d

08003630 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8003630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003632:	b08d      	sub	sp, #52	; 0x34
 8003634:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8003636:	2300      	movs	r3, #0
 8003638:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800363a:	2392      	movs	r3, #146	; 0x92
 800363c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800363e:	48a2      	ldr	r0, [pc, #648]	; (80038c8 <Ble_Hci_Gap_Gatt_Init+0x298>)
 8003640:	f009 ff6a 	bl	800d518 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8003644:	f006 ffcf 	bl	800a5e6 <hci_reset>
 8003648:	4603      	mov	r3, r0
 800364a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800364c:	7dfb      	ldrb	r3, [r7, #23]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8003652:	7dfb      	ldrb	r3, [r7, #23]
 8003654:	4619      	mov	r1, r3
 8003656:	489d      	ldr	r0, [pc, #628]	; (80038cc <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8003658:	f009 fec2 	bl	800d3e0 <iprintf>
 800365c:	e002      	b.n	8003664 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800365e:	489c      	ldr	r0, [pc, #624]	; (80038d0 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8003660:	f009 ff5a 	bl	800d518 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8003664:	f000 fa3a 	bl	8003adc <BleGetBdAddress>
 8003668:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	2106      	movs	r1, #6
 800366e:	2000      	movs	r0, #0
 8003670:	f006 fe79 	bl	800a366 <aci_hal_write_config_data>
 8003674:	4603      	mov	r3, r0
 8003676:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003678:	7dfb      	ldrb	r3, [r7, #23]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d005      	beq.n	800368a <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800367e:	7dfb      	ldrb	r3, [r7, #23]
 8003680:	4619      	mov	r1, r3
 8003682:	4894      	ldr	r0, [pc, #592]	; (80038d4 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8003684:	f009 feac 	bl	800d3e0 <iprintf>
 8003688:	e021      	b.n	80036ce <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800368a:	4893      	ldr	r0, [pc, #588]	; (80038d8 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800368c:	f009 ff44 	bl	800d518 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	3305      	adds	r3, #5
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	3304      	adds	r3, #4
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	461c      	mov	r4, r3
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	3303      	adds	r3, #3
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	461d      	mov	r5, r3
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	3302      	adds	r3, #2
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	3301      	adds	r3, #1
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	4619      	mov	r1, r3
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	9302      	str	r3, [sp, #8]
 80036be:	9101      	str	r1, [sp, #4]
 80036c0:	9200      	str	r2, [sp, #0]
 80036c2:	462b      	mov	r3, r5
 80036c4:	4622      	mov	r2, r4
 80036c6:	4601      	mov	r1, r0
 80036c8:	4884      	ldr	r0, [pc, #528]	; (80038dc <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 80036ca:	f009 fe89 	bl	800d3e0 <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	795a      	ldrb	r2, [r3, #5]
 80036d2:	4b83      	ldr	r3, [pc, #524]	; (80038e0 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 80036d4:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	791a      	ldrb	r2, [r3, #4]
 80036da:	4b81      	ldr	r3, [pc, #516]	; (80038e0 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 80036dc:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	78da      	ldrb	r2, [r3, #3]
 80036e2:	4b7f      	ldr	r3, [pc, #508]	; (80038e0 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 80036e4:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	789a      	ldrb	r2, [r3, #2]
 80036ea:	4b7d      	ldr	r3, [pc, #500]	; (80038e0 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 80036ec:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	785a      	ldrb	r2, [r3, #1]
 80036f2:	4b7b      	ldr	r3, [pc, #492]	; (80038e0 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 80036f4:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	781a      	ldrb	r2, [r3, #0]
 80036fa:	4b79      	ldr	r3, [pc, #484]	; (80038e0 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 80036fc:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80036fe:	4a79      	ldr	r2, [pc, #484]	; (80038e4 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8003700:	2110      	movs	r1, #16
 8003702:	2018      	movs	r0, #24
 8003704:	f006 fe2f 	bl	800a366 <aci_hal_write_config_data>
 8003708:	4603      	mov	r3, r0
 800370a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800370c:	7dfb      	ldrb	r3, [r7, #23]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <Ble_Hci_Gap_Gatt_Init+0xee>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8003712:	7dfb      	ldrb	r3, [r7, #23]
 8003714:	4619      	mov	r1, r3
 8003716:	4874      	ldr	r0, [pc, #464]	; (80038e8 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 8003718:	f009 fe62 	bl	800d3e0 <iprintf>
 800371c:	e002      	b.n	8003724 <Ble_Hci_Gap_Gatt_Init+0xf4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800371e:	4873      	ldr	r0, [pc, #460]	; (80038ec <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003720:	f009 fefa 	bl	800d518 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8003724:	4a72      	ldr	r2, [pc, #456]	; (80038f0 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8003726:	2110      	movs	r1, #16
 8003728:	2008      	movs	r0, #8
 800372a:	f006 fe1c 	bl	800a366 <aci_hal_write_config_data>
 800372e:	4603      	mov	r3, r0
 8003730:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003732:	7dfb      	ldrb	r3, [r7, #23]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <Ble_Hci_Gap_Gatt_Init+0x114>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	4619      	mov	r1, r3
 800373c:	486d      	ldr	r0, [pc, #436]	; (80038f4 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800373e:	f009 fe4f 	bl	800d3e0 <iprintf>
 8003742:	e002      	b.n	800374a <Ble_Hci_Gap_Gatt_Init+0x11a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8003744:	486c      	ldr	r0, [pc, #432]	; (80038f8 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8003746:	f009 fee7 	bl	800d518 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800374a:	2118      	movs	r1, #24
 800374c:	2001      	movs	r0, #1
 800374e:	f006 fe8f 	bl	800a470 <aci_hal_set_tx_power_level>
 8003752:	4603      	mov	r3, r0
 8003754:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003756:	7dfb      	ldrb	r3, [r7, #23]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <Ble_Hci_Gap_Gatt_Init+0x138>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800375c:	7dfb      	ldrb	r3, [r7, #23]
 800375e:	4619      	mov	r1, r3
 8003760:	4866      	ldr	r0, [pc, #408]	; (80038fc <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8003762:	f009 fe3d 	bl	800d3e0 <iprintf>
 8003766:	e002      	b.n	800376e <Ble_Hci_Gap_Gatt_Init+0x13e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8003768:	4865      	ldr	r0, [pc, #404]	; (8003900 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800376a:	f009 fed5 	bl	800d518 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800376e:	f006 fb4e 	bl	8009e0e <aci_gatt_init>
 8003772:	4603      	mov	r3, r0
 8003774:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003776:	7dfb      	ldrb	r3, [r7, #23]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d005      	beq.n	8003788 <Ble_Hci_Gap_Gatt_Init+0x158>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	4619      	mov	r1, r3
 8003780:	4860      	ldr	r0, [pc, #384]	; (8003904 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8003782:	f009 fe2d 	bl	800d3e0 <iprintf>
 8003786:	e002      	b.n	800378e <Ble_Hci_Gap_Gatt_Init+0x15e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8003788:	485f      	ldr	r0, [pc, #380]	; (8003908 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800378a:	f009 fec5 	bl	800d518 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d02b      	beq.n	80037f8 <Ble_Hci_Gap_Gatt_Init+0x1c8>
  {
    const char *name = "P2PSRV1";
 80037a0:	4b5a      	ldr	r3, [pc, #360]	; (800390c <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 80037a2:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80037a4:	1dba      	adds	r2, r7, #6
 80037a6:	7bf8      	ldrb	r0, [r7, #15]
 80037a8:	1cbb      	adds	r3, r7, #2
 80037aa:	9301      	str	r3, [sp, #4]
 80037ac:	1d3b      	adds	r3, r7, #4
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	4613      	mov	r3, r2
 80037b2:	2207      	movs	r2, #7
 80037b4:	2100      	movs	r1, #0
 80037b6:	f006 f92c 	bl	8009a12 <aci_gap_init>
 80037ba:	4603      	mov	r3, r0
 80037bc:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 80037be:	7dfb      	ldrb	r3, [r7, #23]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d005      	beq.n	80037d0 <Ble_Hci_Gap_Gatt_Init+0x1a0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 80037c4:	7dfb      	ldrb	r3, [r7, #23]
 80037c6:	4619      	mov	r1, r3
 80037c8:	4851      	ldr	r0, [pc, #324]	; (8003910 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 80037ca:	f009 fe09 	bl	800d3e0 <iprintf>
 80037ce:	e002      	b.n	80037d6 <Ble_Hci_Gap_Gatt_Init+0x1a6>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 80037d0:	4850      	ldr	r0, [pc, #320]	; (8003914 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 80037d2:	f009 fea1 	bl	800d518 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80037d6:	88fc      	ldrh	r4, [r7, #6]
 80037d8:	88bd      	ldrh	r5, [r7, #4]
 80037da:	68b8      	ldr	r0, [r7, #8]
 80037dc:	f7fc fcda 	bl	8000194 <strlen>
 80037e0:	4603      	mov	r3, r0
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	4613      	mov	r3, r2
 80037ea:	2200      	movs	r2, #0
 80037ec:	4629      	mov	r1, r5
 80037ee:	4620      	mov	r0, r4
 80037f0:	f006 fd10 	bl	800a214 <aci_gatt_update_char_value>
 80037f4:	4603      	mov	r3, r0
 80037f6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80037f8:	88f8      	ldrh	r0, [r7, #6]
 80037fa:	8879      	ldrh	r1, [r7, #2]
 80037fc:	463b      	mov	r3, r7
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	2302      	movs	r3, #2
 8003802:	2200      	movs	r2, #0
 8003804:	f006 fd06 	bl	800a214 <aci_gatt_update_char_value>
 8003808:	4603      	mov	r3, r0
 800380a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800380c:	2202      	movs	r2, #2
 800380e:	2102      	movs	r1, #2
 8003810:	2000      	movs	r0, #0
 8003812:	f006 ff8a 	bl	800a72a <hci_le_set_default_phy>
 8003816:	4603      	mov	r3, r0
 8003818:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800381a:	7dfb      	ldrb	r3, [r7, #23]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <Ble_Hci_Gap_Gatt_Init+0x1fc>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 8003820:	7dfb      	ldrb	r3, [r7, #23]
 8003822:	4619      	mov	r1, r3
 8003824:	483c      	ldr	r0, [pc, #240]	; (8003918 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8003826:	f009 fddb 	bl	800d3e0 <iprintf>
 800382a:	e002      	b.n	8003832 <Ble_Hci_Gap_Gatt_Init+0x202>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800382c:	483b      	ldr	r0, [pc, #236]	; (800391c <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800382e:	f009 fe73 	bl	800d518 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8003832:	4b3b      	ldr	r3, [pc, #236]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8003834:	2201      	movs	r2, #1
 8003836:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8003838:	4b39      	ldr	r3, [pc, #228]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f005 ff69 	bl	8009714 <aci_gap_set_io_capability>
 8003842:	4603      	mov	r3, r0
 8003844:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003846:	7dfb      	ldrb	r3, [r7, #23]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <Ble_Hci_Gap_Gatt_Init+0x228>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	4619      	mov	r1, r3
 8003850:	4834      	ldr	r0, [pc, #208]	; (8003924 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 8003852:	f009 fdc5 	bl	800d3e0 <iprintf>
 8003856:	e002      	b.n	800385e <Ble_Hci_Gap_Gatt_Init+0x22e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8003858:	4833      	ldr	r0, [pc, #204]	; (8003928 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800385a:	f009 fe5d 	bl	800d518 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800385e:	4b30      	ldr	r3, [pc, #192]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8003860:	2201      	movs	r2, #1
 8003862:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8003864:	4b2e      	ldr	r3, [pc, #184]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8003866:	2208      	movs	r2, #8
 8003868:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800386a:	4b2d      	ldr	r3, [pc, #180]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800386c:	2210      	movs	r2, #16
 800386e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8003870:	4b2b      	ldr	r3, [pc, #172]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8003872:	2200      	movs	r2, #0
 8003874:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8003876:	4b2a      	ldr	r3, [pc, #168]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8003878:	4a2c      	ldr	r2, [pc, #176]	; (800392c <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800387a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800387c:	4b28      	ldr	r3, [pc, #160]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800387e:	2201      	movs	r2, #1
 8003880:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8003882:	4b27      	ldr	r3, [pc, #156]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8003884:	789c      	ldrb	r4, [r3, #2]
 8003886:	4b26      	ldr	r3, [pc, #152]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8003888:	785d      	ldrb	r5, [r3, #1]
 800388a:	4b25      	ldr	r3, [pc, #148]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800388c:	791b      	ldrb	r3, [r3, #4]
 800388e:	4a24      	ldr	r2, [pc, #144]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8003890:	7952      	ldrb	r2, [r2, #5]
 8003892:	4923      	ldr	r1, [pc, #140]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8003894:	78c9      	ldrb	r1, [r1, #3]
 8003896:	4822      	ldr	r0, [pc, #136]	; (8003920 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8003898:	6880      	ldr	r0, [r0, #8]
 800389a:	2600      	movs	r6, #0
 800389c:	9604      	str	r6, [sp, #16]
 800389e:	9003      	str	r0, [sp, #12]
 80038a0:	9102      	str	r1, [sp, #8]
 80038a2:	9201      	str	r2, [sp, #4]
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	2300      	movs	r3, #0
 80038a8:	2201      	movs	r2, #1
 80038aa:	4629      	mov	r1, r5
 80038ac:	4620      	mov	r0, r4
 80038ae:	f005 ff85 	bl	80097bc <aci_gap_set_authentication_requirement>
 80038b2:	4603      	mov	r3, r0
 80038b4:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d03b      	beq.n	8003934 <Ble_Hci_Gap_Gatt_Init+0x304>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 80038bc:	7dfb      	ldrb	r3, [r7, #23]
 80038be:	4619      	mov	r1, r3
 80038c0:	481b      	ldr	r0, [pc, #108]	; (8003930 <Ble_Hci_Gap_Gatt_Init+0x300>)
 80038c2:	f009 fd8d 	bl	800d3e0 <iprintf>
 80038c6:	e038      	b.n	800393a <Ble_Hci_Gap_Gatt_Init+0x30a>
 80038c8:	080101c8 	.word	0x080101c8
 80038cc:	080101f4 	.word	0x080101f4
 80038d0:	08010224 	.word	0x08010224
 80038d4:	08010244 	.word	0x08010244
 80038d8:	080102a0 	.word	0x080102a0
 80038dc:	080102ec 	.word	0x080102ec
 80038e0:	20000010 	.word	0x20000010
 80038e4:	08010d04 	.word	0x08010d04
 80038e8:	08010328 	.word	0x08010328
 80038ec:	08010380 	.word	0x08010380
 80038f0:	08010d14 	.word	0x08010d14
 80038f4:	080103c8 	.word	0x080103c8
 80038f8:	08010420 	.word	0x08010420
 80038fc:	08010468 	.word	0x08010468
 8003900:	080104a8 	.word	0x080104a8
 8003904:	080104d8 	.word	0x080104d8
 8003908:	0801050c 	.word	0x0801050c
 800390c:	08010530 	.word	0x08010530
 8003910:	08010538 	.word	0x08010538
 8003914:	08010568 	.word	0x08010568
 8003918:	08010588 	.word	0x08010588
 800391c:	080105c4 	.word	0x080105c4
 8003920:	200005bc 	.word	0x200005bc
 8003924:	080105f0 	.word	0x080105f0
 8003928:	08010630 	.word	0x08010630
 800392c:	0001b207 	.word	0x0001b207
 8003930:	08010660 	.word	0x08010660
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 8003934:	480e      	ldr	r0, [pc, #56]	; (8003970 <Ble_Hci_Gap_Gatt_Init+0x340>)
 8003936:	f009 fdef 	bl	800d518 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800393a:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <Ble_Hci_Gap_Gatt_Init+0x344>)
 800393c:	789b      	ldrb	r3, [r3, #2]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00f      	beq.n	8003962 <Ble_Hci_Gap_Gatt_Init+0x332>
  {
    ret = aci_gap_configure_whitelist();
 8003942:	f006 f985 	bl	8009c50 <aci_gap_configure_filter_accept_list>
 8003946:	4603      	mov	r3, r0
 8003948:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800394a:	7dfb      	ldrb	r3, [r7, #23]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <Ble_Hci_Gap_Gatt_Init+0x32c>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	4619      	mov	r1, r3
 8003954:	4808      	ldr	r0, [pc, #32]	; (8003978 <Ble_Hci_Gap_Gatt_Init+0x348>)
 8003956:	f009 fd43 	bl	800d3e0 <iprintf>
 800395a:	e002      	b.n	8003962 <Ble_Hci_Gap_Gatt_Init+0x332>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800395c:	4807      	ldr	r0, [pc, #28]	; (800397c <Ble_Hci_Gap_Gatt_Init+0x34c>)
 800395e:	f009 fddb 	bl	800d518 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 8003962:	4807      	ldr	r0, [pc, #28]	; (8003980 <Ble_Hci_Gap_Gatt_Init+0x350>)
 8003964:	f009 fd3c 	bl	800d3e0 <iprintf>
}
 8003968:	bf00      	nop
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003970:	080106ac 	.word	0x080106ac
 8003974:	200005bc 	.word	0x200005bc
 8003978:	080106e8 	.word	0x080106e8
 800397c:	08010728 	.word	0x08010728
 8003980:	08010758 	.word	0x08010758

08003984 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08c      	sub	sp, #48	; 0x30
 8003988:	af08      	add	r7, sp, #32
 800398a:	4603      	mov	r3, r0
 800398c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800398e:	2392      	movs	r3, #146	; 0x92
 8003990:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d106      	bne.n	80039a6 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8003998:	4b41      	ldr	r3, [pc, #260]	; (8003aa0 <Adv_Request+0x11c>)
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800399e:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <Adv_Request+0x120>)
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	81bb      	strh	r3, [r7, #12]
 80039a4:	e005      	b.n	80039b2 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 80039a6:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 80039aa:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 80039ac:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80039b0:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80039b2:	4b3d      	ldr	r3, [pc, #244]	; (8003aa8 <Adv_Request+0x124>)
 80039b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fe fc8f 	bl	80022dc <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d119      	bne.n	80039f8 <Adv_Request+0x74>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 80039c4:	4b38      	ldr	r3, [pc, #224]	; (8003aa8 <Adv_Request+0x124>)
 80039c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d004      	beq.n	80039d8 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 80039ce:	4b36      	ldr	r3, [pc, #216]	; (8003aa8 <Adv_Request+0x124>)
 80039d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d10f      	bne.n	80039f8 <Adv_Request+0x74>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 80039d8:	f005 fd7e 	bl	80094d8 <aci_gap_set_non_discoverable>
 80039dc:	4603      	mov	r3, r0
 80039de:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 80039e0:	7afb      	ldrb	r3, [r7, #11]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d005      	beq.n	80039f2 <Adv_Request+0x6e>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 80039e6:	7afb      	ldrb	r3, [r7, #11]
 80039e8:	4619      	mov	r1, r3
 80039ea:	4830      	ldr	r0, [pc, #192]	; (8003aac <Adv_Request+0x128>)
 80039ec:	f009 fcf8 	bl	800d3e0 <iprintf>
 80039f0:	e002      	b.n	80039f8 <Adv_Request+0x74>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 80039f2:	482f      	ldr	r0, [pc, #188]	; (8003ab0 <Adv_Request+0x12c>)
 80039f4:	f009 fd90 	bl	800d518 <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80039f8:	4a2b      	ldr	r2, [pc, #172]	; (8003aa8 <Adv_Request+0x124>)
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 8003a00:	4b29      	ldr	r3, [pc, #164]	; (8003aa8 <Adv_Request+0x124>)
 8003a02:	7e1b      	ldrb	r3, [r3, #24]
 8003a04:	89ba      	ldrh	r2, [r7, #12]
 8003a06:	89f9      	ldrh	r1, [r7, #14]
 8003a08:	2000      	movs	r0, #0
 8003a0a:	9006      	str	r0, [sp, #24]
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	9005      	str	r0, [sp, #20]
 8003a10:	4828      	ldr	r0, [pc, #160]	; (8003ab4 <Adv_Request+0x130>)
 8003a12:	9004      	str	r0, [sp, #16]
 8003a14:	9303      	str	r3, [sp, #12]
 8003a16:	4b28      	ldr	r3, [pc, #160]	; (8003ab8 <Adv_Request+0x134>)
 8003a18:	9302      	str	r3, [sp, #8]
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	2300      	movs	r3, #0
 8003a24:	2000      	movs	r0, #0
 8003a26:	f005 fd7b 	bl	8009520 <aci_gap_set_discoverable>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8003a2e:	7afb      	ldrb	r3, [r7, #11]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <Adv_Request+0xbc>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 8003a34:	7afb      	ldrb	r3, [r7, #11]
 8003a36:	4619      	mov	r1, r3
 8003a38:	4820      	ldr	r0, [pc, #128]	; (8003abc <Adv_Request+0x138>)
 8003a3a:	f009 fcd1 	bl	800d3e0 <iprintf>
 8003a3e:	e002      	b.n	8003a46 <Adv_Request+0xc2>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 8003a40:	481f      	ldr	r0, [pc, #124]	; (8003ac0 <Adv_Request+0x13c>)
 8003a42:	f009 fd69 	bl	800d518 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 8003a46:	491f      	ldr	r1, [pc, #124]	; (8003ac4 <Adv_Request+0x140>)
 8003a48:	200e      	movs	r0, #14
 8003a4a:	f006 f88f 	bl	8009b6c <aci_gap_update_adv_data>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 8003a52:	7afb      	ldrb	r3, [r7, #11]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00e      	beq.n	8003a76 <Adv_Request+0xf2>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 8003a58:	79fb      	ldrb	r3, [r7, #7]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d105      	bne.n	8003a6a <Adv_Request+0xe6>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 8003a5e:	7afb      	ldrb	r3, [r7, #11]
 8003a60:	4619      	mov	r1, r3
 8003a62:	4819      	ldr	r0, [pc, #100]	; (8003ac8 <Adv_Request+0x144>)
 8003a64:	f009 fcbc 	bl	800d3e0 <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 8003a68:	e017      	b.n	8003a9a <Adv_Request+0x116>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 8003a6a:	7afb      	ldrb	r3, [r7, #11]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4817      	ldr	r0, [pc, #92]	; (8003acc <Adv_Request+0x148>)
 8003a70:	f009 fcb6 	bl	800d3e0 <iprintf>
  return;
 8003a74:	e011      	b.n	8003a9a <Adv_Request+0x116>
    if (NewStatus == APP_BLE_FAST_ADV)
 8003a76:	79fb      	ldrb	r3, [r7, #7]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d10a      	bne.n	8003a92 <Adv_Request+0x10e>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8003a7c:	4814      	ldr	r0, [pc, #80]	; (8003ad0 <Adv_Request+0x14c>)
 8003a7e:	f009 fcaf 	bl	800d3e0 <iprintf>
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <Adv_Request+0x124>)
 8003a84:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003a88:	4912      	ldr	r1, [pc, #72]	; (8003ad4 <Adv_Request+0x150>)
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe fcaa 	bl	80023e4 <HW_TS_Start>
  return;
 8003a90:	e003      	b.n	8003a9a <Adv_Request+0x116>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 8003a92:	4811      	ldr	r0, [pc, #68]	; (8003ad8 <Adv_Request+0x154>)
 8003a94:	f009 fca4 	bl	800d3e0 <iprintf>
  return;
 8003a98:	bf00      	nop
}
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20000640 	.word	0x20000640
 8003aa4:	20000642 	.word	0x20000642
 8003aa8:	200005bc 	.word	0x200005bc
 8003aac:	08010784 	.word	0x08010784
 8003ab0:	080107d0 	.word	0x080107d0
 8003ab4:	200005d5 	.word	0x200005d5
 8003ab8:	08010d24 	.word	0x08010d24
 8003abc:	08010818 	.word	0x08010818
 8003ac0:	08010850 	.word	0x08010850
 8003ac4:	20000010 	.word	0x20000010
 8003ac8:	08010878 	.word	0x08010878
 8003acc:	080108ac 	.word	0x080108ac
 8003ad0:	080108e4 	.word	0x080108e4
 8003ad4:	0001e046 	.word	0x0001e046
 8003ad8:	0801090c 	.word	0x0801090c

08003adc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8003ae2:	f7ff fa45 	bl	8002f70 <LL_FLASH_GetUDN>
 8003ae6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	d023      	beq.n	8003b38 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8003af0:	f7ff fa56 	bl	8002fa0 <LL_FLASH_GetSTCompanyID>
 8003af4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8003af6:	f7ff fa47 	bl	8002f88 <LL_FLASH_GetDeviceID>
 8003afa:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	4b16      	ldr	r3, [pc, #88]	; (8003b5c <BleGetBdAddress+0x80>)
 8003b02:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <BleGetBdAddress+0x80>)
 8003b0c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <BleGetBdAddress+0x80>)
 8003b14:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <BleGetBdAddress+0x80>)
 8003b1c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	0a1b      	lsrs	r3, r3, #8
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <BleGetBdAddress+0x80>)
 8003b26:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	0c1b      	lsrs	r3, r3, #16
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <BleGetBdAddress+0x80>)
 8003b30:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <BleGetBdAddress+0x80>)
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	e00b      	b.n	8003b50 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f007 f985 	bl	800ae48 <OTP_Read>
 8003b3e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d002      	beq.n	8003b4c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	617b      	str	r3, [r7, #20]
 8003b4a:	e001      	b.n	8003b50 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <BleGetBdAddress+0x84>)
 8003b4e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8003b50:	697b      	ldr	r3, [r7, #20]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	200005b4 	.word	0x200005b4
 8003b60:	08010cfc 	.word	0x08010cfc

08003b64 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	f000 fd02 	bl	8004574 <BSP_LED_Off>
  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8003b70:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <Adv_Cancel+0x50>)
 8003b72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b76:	2b05      	cmp	r3, #5
 8003b78:	d017      	beq.n	8003baa <Adv_Cancel+0x46>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003b7a:	2392      	movs	r3, #146	; 0x92
 8003b7c:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8003b7e:	f005 fcab 	bl	80094d8 <aci_gap_set_non_discoverable>
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <Adv_Cancel+0x50>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <Adv_Cancel+0x38>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8003b94:	4808      	ldr	r0, [pc, #32]	; (8003bb8 <Adv_Cancel+0x54>)
 8003b96:	f009 fc23 	bl	800d3e0 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8003b9a:	e006      	b.n	8003baa <Adv_Cancel+0x46>
      APP_DBG_MSG("  \r\n\r");
 8003b9c:	4807      	ldr	r0, [pc, #28]	; (8003bbc <Adv_Cancel+0x58>)
 8003b9e:	f009 fc1f 	bl	800d3e0 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8003ba2:	4807      	ldr	r0, [pc, #28]	; (8003bc0 <Adv_Cancel+0x5c>)
 8003ba4:	f009 fc1c 	bl	800d3e0 <iprintf>
  return;
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
}
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	200005bc 	.word	0x200005bc
 8003bb8:	0801093c 	.word	0x0801093c
 8003bbc:	08010960 	.word	0x08010960
 8003bc0:	08010968 	.word	0x08010968

08003bc4 <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8003bc8:	2100      	movs	r1, #0
 8003bca:	2001      	movs	r0, #1
 8003bcc:	f008 fe3e 	bl	800c84c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 8003bd0:	bf00      	nop
}
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 8003bd8:	2001      	movs	r0, #1
 8003bda:	f000 fccb 	bl	8004574 <BSP_LED_Off>
  /* USER CODE END Switch_OFF_GPIO */
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
	...

08003be4 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 8003be4:	b590      	push	{r4, r7, lr}
 8003be6:	b089      	sub	sp, #36	; 0x24
 8003be8:	af02      	add	r7, sp, #8
 8003bea:	4603      	mov	r3, r0
 8003bec:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 8003bee:	4b29      	ldr	r3, [pc, #164]	; (8003c94 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d149      	bne.n	8003c8a <BLE_SVC_L2CAP_Conn_Update+0xa6>
  {
    mutex = 0;
 8003bf6:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 8003bfc:	4b26      	ldr	r3, [pc, #152]	; (8003c98 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	3301      	adds	r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	bfb8      	it	lt
 8003c0a:	425b      	neglt	r3, r3
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	4b22      	ldr	r3, [pc, #136]	; (8003c98 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8003c10:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 8003c12:	4b21      	ldr	r3, [pc, #132]	; (8003c98 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	4a21      	ldr	r2, [pc, #132]	; (8003c9c <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	ed93 7a00 	vldr	s14, [r3]
 8003c20:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8003c24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c2c:	ee17 3a90 	vmov	r3, s15
 8003c30:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 8003c32:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	4a19      	ldr	r2, [pc, #100]	; (8003c9c <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	4413      	add	r3, r2
 8003c3c:	ed93 7a00 	vldr	s14, [r3]
 8003c40:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8003c44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c4c:	ee17 3a90 	vmov	r3, s15
 8003c50:	82bb      	strh	r3, [r7, #20]
    uint16_t slave_latency = L2CAP_SLAVE_LATENCY;
 8003c52:	2300      	movs	r3, #0
 8003c54:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 8003c56:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c5a:	823b      	strh	r3, [r7, #16]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8003c5c:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <BLE_SVC_L2CAP_Conn_Update+0xbc>)
 8003c5e:	8ad8      	ldrh	r0, [r3, #22]
 8003c60:	8a7c      	ldrh	r4, [r7, #18]
 8003c62:	8aba      	ldrh	r2, [r7, #20]
 8003c64:	8af9      	ldrh	r1, [r7, #22]
 8003c66:	8a3b      	ldrh	r3, [r7, #16]
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	4623      	mov	r3, r4
 8003c6c:	f006 fdda 	bl	800a824 <aci_l2cap_connection_parameter_update_req>
 8003c70:	4603      	mov	r3, r0
 8003c72:	73fb      	strb	r3, [r7, #15]
                                                    interval_min, interval_max,
                                                    slave_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <BLE_SVC_L2CAP_Conn_Update+0x9e>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 8003c7a:	480a      	ldr	r0, [pc, #40]	; (8003ca4 <BLE_SVC_L2CAP_Conn_Update+0xc0>)
 8003c7c:	f009 fbb0 	bl	800d3e0 <iprintf>

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 8003c80:	e003      	b.n	8003c8a <BLE_SVC_L2CAP_Conn_Update+0xa6>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 8003c82:	4809      	ldr	r0, [pc, #36]	; (8003ca8 <BLE_SVC_L2CAP_Conn_Update+0xc4>)
 8003c84:	f009 fbac 	bl	800d3e0 <iprintf>
  return;
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
}
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd90      	pop	{r4, r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20000649 	.word	0x20000649
 8003c98:	20000648 	.word	0x20000648
 8003c9c:	20000008 	.word	0x20000008
 8003ca0:	200005bc 	.word	0x200005bc
 8003ca4:	08010984 	.word	0x08010984
 8003ca8:	080109ac 	.word	0x080109ac

08003cac <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 8003cb0:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <Connection_Interval_Update_Req+0x28>)
 8003cb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d00a      	beq.n	8003cd0 <Connection_Interval_Update_Req+0x24>
 8003cba:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <Connection_Interval_Update_Req+0x28>)
 8003cbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8003cc4:	4b03      	ldr	r3, [pc, #12]	; (8003cd4 <Connection_Interval_Update_Req+0x28>)
 8003cc6:	8adb      	ldrh	r3, [r3, #22]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff ff8b 	bl	8003be4 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 8003cce:	bf00      	nop
 8003cd0:	bf00      	nop
}
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	200005bc 	.word	0x200005bc

08003cd8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	2004      	movs	r0, #4
 8003ce4:	f008 fdb2 	bl	800c84c <UTIL_SEQ_SetTask>

  return;
 8003ce8:	bf00      	nop
}
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	f008 fe13 	bl	800c924 <UTIL_SEQ_SetEvt>

  return;
 8003cfe:	bf00      	nop
}
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003d0e:	2001      	movs	r0, #1
 8003d10:	f008 fe28 	bl	800c964 <UTIL_SEQ_WaitEvt>

  return;
 8003d14:	bf00      	nop
}
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f008 f990 	bl	800c054 <SVCCTL_UserEvtRx>
 8003d34:	4603      	mov	r3, r0
 8003d36:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8003d38:	7afb      	ldrb	r3, [r7, #11]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8003d44:	e003      	b.n	8003d4e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	701a      	strb	r2, [r3, #0]
  return;
 8003d4c:	bf00      	nop
}
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <BLE_StatusNot+0x16>
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d006      	beq.n	8003d76 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8003d68:	e00b      	b.n	8003d82 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003d6a:	233f      	movs	r3, #63	; 0x3f
 8003d6c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f008 fd98 	bl	800c8a4 <UTIL_SEQ_PauseTask>
      break;
 8003d74:	e005      	b.n	8003d82 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003d76:	233f      	movs	r3, #63	; 0x3f
 8003d78:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f008 fdb2 	bl	800c8e4 <UTIL_SEQ_ResumeTask>
      break;
 8003d80:	bf00      	nop
  }

  return;
 8003d82:	bf00      	nop
}
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
	...

08003d8c <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d01a      	beq.n	8003dd2 <P2PS_STM_App_Notification+0x46>
 8003d9c:	2b03      	cmp	r3, #3
 8003d9e:	dc6b      	bgt.n	8003e78 <P2PS_STM_App_Notification+0xec>
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <P2PS_STM_App_Notification+0x1e>
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d00a      	beq.n	8003dbe <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8003da8:	e066      	b.n	8003e78 <P2PS_STM_App_Notification+0xec>
      P2P_Server_App_Context.Notification_Status = 1;
 8003daa:	4b37      	ldr	r3, [pc, #220]	; (8003e88 <P2PS_STM_App_Notification+0xfc>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 8003db0:	4836      	ldr	r0, [pc, #216]	; (8003e8c <P2PS_STM_App_Notification+0x100>)
 8003db2:	f009 fbb1 	bl	800d518 <puts>
      APP_DBG_MSG(" \n\r");
 8003db6:	4836      	ldr	r0, [pc, #216]	; (8003e90 <P2PS_STM_App_Notification+0x104>)
 8003db8:	f009 fb12 	bl	800d3e0 <iprintf>
      break;
 8003dbc:	e05f      	b.n	8003e7e <P2PS_STM_App_Notification+0xf2>
      P2P_Server_App_Context.Notification_Status = 0;
 8003dbe:	4b32      	ldr	r3, [pc, #200]	; (8003e88 <P2PS_STM_App_Notification+0xfc>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 8003dc4:	4833      	ldr	r0, [pc, #204]	; (8003e94 <P2PS_STM_App_Notification+0x108>)
 8003dc6:	f009 fba7 	bl	800d518 <puts>
      APP_DBG_MSG(" \n\r");
 8003dca:	4831      	ldr	r0, [pc, #196]	; (8003e90 <P2PS_STM_App_Notification+0x104>)
 8003dcc:	f009 fb08 	bl	800d3e0 <iprintf>
      break;
 8003dd0:	e055      	b.n	8003e7e <P2PS_STM_App_Notification+0xf2>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d123      	bne.n	8003e24 <P2PS_STM_App_Notification+0x98>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	3301      	adds	r3, #1
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d10b      	bne.n	8003e00 <P2PS_STM_App_Notification+0x74>
          BSP_LED_On(LED_BLUE);
 8003de8:	2000      	movs	r0, #0
 8003dea:	f000 fba9 	bl	8004540 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n"); 
 8003dee:	482a      	ldr	r0, [pc, #168]	; (8003e98 <P2PS_STM_App_Notification+0x10c>)
 8003df0:	f009 fb92 	bl	800d518 <puts>
          APP_DBG_MSG(" \n\r");
 8003df4:	4826      	ldr	r0, [pc, #152]	; (8003e90 <P2PS_STM_App_Notification+0x104>)
 8003df6:	f009 faf3 	bl	800d3e0 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8003dfa:	4b23      	ldr	r3, [pc, #140]	; (8003e88 <P2PS_STM_App_Notification+0xfc>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	3301      	adds	r3, #1
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10b      	bne.n	8003e24 <P2PS_STM_App_Notification+0x98>
          BSP_LED_Off(LED_BLUE);
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	f000 fbb1 	bl	8004574 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n"); 
 8003e12:	4822      	ldr	r0, [pc, #136]	; (8003e9c <P2PS_STM_App_Notification+0x110>)
 8003e14:	f009 fb80 	bl	800d518 <puts>
          APP_DBG_MSG(" \n\r");
 8003e18:	481d      	ldr	r0, [pc, #116]	; (8003e90 <P2PS_STM_App_Notification+0x104>)
 8003e1a:	f009 fae1 	bl	800d3e0 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8003e1e:	4b1a      	ldr	r3, [pc, #104]	; (8003e88 <P2PS_STM_App_Notification+0xfc>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d126      	bne.n	8003e7c <P2PS_STM_App_Notification+0xf0>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	3301      	adds	r3, #1
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d10b      	bne.n	8003e52 <P2PS_STM_App_Notification+0xc6>
          BSP_LED_On(LED_BLUE);
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	f000 fb80 	bl	8004540 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n"); 
 8003e40:	4817      	ldr	r0, [pc, #92]	; (8003ea0 <P2PS_STM_App_Notification+0x114>)
 8003e42:	f009 fb69 	bl	800d518 <puts>
          APP_DBG_MSG(" \n\r");
 8003e46:	4812      	ldr	r0, [pc, #72]	; (8003e90 <P2PS_STM_App_Notification+0x104>)
 8003e48:	f009 faca 	bl	800d3e0 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8003e4c:	4b0e      	ldr	r3, [pc, #56]	; (8003e88 <P2PS_STM_App_Notification+0xfc>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	3301      	adds	r3, #1
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10e      	bne.n	8003e7c <P2PS_STM_App_Notification+0xf0>
          BSP_LED_Off(LED_BLUE);
 8003e5e:	2000      	movs	r0, #0
 8003e60:	f000 fb88 	bl	8004574 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n"); 
 8003e64:	480f      	ldr	r0, [pc, #60]	; (8003ea4 <P2PS_STM_App_Notification+0x118>)
 8003e66:	f009 fb57 	bl	800d518 <puts>
          APP_DBG_MSG(" \n\r");
 8003e6a:	4809      	ldr	r0, [pc, #36]	; (8003e90 <P2PS_STM_App_Notification+0x104>)
 8003e6c:	f009 fab8 	bl	800d3e0 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <P2PS_STM_App_Notification+0xfc>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	709a      	strb	r2, [r3, #2]
      break;
 8003e76:	e001      	b.n	8003e7c <P2PS_STM_App_Notification+0xf0>
      break;
 8003e78:	bf00      	nop
 8003e7a:	e000      	b.n	8003e7e <P2PS_STM_App_Notification+0xf2>
      break;
 8003e7c:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8003e7e:	bf00      	nop
}
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	2000064c 	.word	0x2000064c
 8003e8c:	080109dc 	.word	0x080109dc
 8003e90:	08010a10 	.word	0x08010a10
 8003e94:	08010a14 	.word	0x08010a14
 8003e98:	08010a48 	.word	0x08010a48
 8003e9c:	08010a70 	.word	0x08010a70
 8003ea0:	08010a98 	.word	0x08010a98
 8003ea4:	08010ac0 	.word	0x08010ac0

08003ea8 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <P2PS_APP_Notification+0x1c>
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d000      	beq.n	8003ebe <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8003ebc:	e003      	b.n	8003ec6 <P2PS_APP_Notification+0x1e>
      P2PS_APP_LED_BUTTON_context_Init();
 8003ebe:	f000 f819 	bl	8003ef4 <P2PS_APP_LED_BUTTON_context_Init>
    break;
 8003ec2:	e000      	b.n	8003ec6 <P2PS_APP_Notification+0x1e>
    break;
 8003ec4:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8003ec6:	bf00      	nop
}
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 8003ed4:	4a05      	ldr	r2, [pc, #20]	; (8003eec <P2PS_APP_Init+0x1c>)
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	2008      	movs	r0, #8
 8003eda:	f008 fc95 	bl	800c808 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 8003ede:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <P2PS_APP_Init+0x20>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 8003ee4:	f000 f806 	bl	8003ef4 <P2PS_APP_LED_BUTTON_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 8003ee8:	bf00      	nop
}
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	08003f39 	.word	0x08003f39
 8003ef0:	2000064c 	.word	0x2000064c

08003ef4 <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  
  BSP_LED_Off(LED_BLUE);
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f000 fb3b 	bl	8004574 <BSP_LED_Off>
  APP_DBG_MSG("LED BLUE OFF\n");
 8003efe:	4808      	ldr	r0, [pc, #32]	; (8003f20 <P2PS_APP_LED_BUTTON_context_Init+0x2c>)
 8003f00:	f009 fb0a 	bl	800d518 <puts>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 8003f04:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 8003f06:	2201      	movs	r2, #1
 8003f08:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 8003f10:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8003f16:	4b03      	ldr	r3, [pc, #12]	; (8003f24 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 8003f1c:	bf00      	nop
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	08010ae8 	.word	0x08010ae8
 8003f24:	2000064c 	.word	0x2000064c

08003f28 <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	2008      	movs	r0, #8
 8003f30:	f008 fc8c 	bl	800c84c <UTIL_SEQ_SetTask>

  return;
 8003f34:	bf00      	nop
}
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
 
  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <P2PS_Send_Notification+0x44>)
 8003f3e:	791b      	ldrb	r3, [r3, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d103      	bne.n	8003f4c <P2PS_Send_Notification+0x14>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 8003f44:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <P2PS_Send_Notification+0x44>)
 8003f46:	2201      	movs	r2, #1
 8003f48:	711a      	strb	r2, [r3, #4]
 8003f4a:	e002      	b.n	8003f52 <P2PS_Send_Notification+0x1a>
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8003f4c:	4b0b      	ldr	r3, [pc, #44]	; (8003f7c <P2PS_Send_Notification+0x44>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	711a      	strb	r2, [r3, #4]
  }
  
   if(P2P_Server_App_Context.Notification_Status){ 
 8003f52:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <P2PS_Send_Notification+0x44>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00b      	beq.n	8003f72 <P2PS_Send_Notification+0x3a>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
 8003f5a:	4809      	ldr	r0, [pc, #36]	; (8003f80 <P2PS_Send_Notification+0x48>)
 8003f5c:	f009 fa40 	bl	800d3e0 <iprintf>
    APP_DBG_MSG(" \n\r");
 8003f60:	4808      	ldr	r0, [pc, #32]	; (8003f84 <P2PS_Send_Notification+0x4c>)
 8003f62:	f009 fa3d 	bl	800d3e0 <iprintf>
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.ButtonControl);
 8003f66:	4908      	ldr	r1, [pc, #32]	; (8003f88 <P2PS_Send_Notification+0x50>)
 8003f68:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8003f6c:	f007 f89e 	bl	800b0ac <P2PS_STM_App_Update_Char>
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;
 8003f70:	e003      	b.n	8003f7a <P2PS_Send_Notification+0x42>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
 8003f72:	4806      	ldr	r0, [pc, #24]	; (8003f8c <P2PS_Send_Notification+0x54>)
 8003f74:	f009 fa34 	bl	800d3e0 <iprintf>
  return;
 8003f78:	bf00      	nop
}
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	2000064c 	.word	0x2000064c
 8003f80:	08010af8 	.word	0x08010af8
 8003f84:	08010a10 	.word	0x08010a10
 8003f88:	2000064f 	.word	0x2000064f
 8003f8c:	08010b38 	.word	0x08010b38

08003f90 <LL_PWR_EnableBootC2>:
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <LL_PWR_EnableBootC2+0x1c>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	4a04      	ldr	r2, [pc, #16]	; (8003fac <LL_PWR_EnableBootC2+0x1c>)
 8003f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f9e:	60d3      	str	r3, [r2, #12]
}
 8003fa0:	bf00      	nop
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	58000400 	.word	0x58000400

08003fb0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8003fb8:	4b06      	ldr	r3, [pc, #24]	; (8003fd4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003fba:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003fbe:	4905      	ldr	r1, [pc, #20]	; (8003fd4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	58000800 	.word	0x58000800

08003fd8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003fe2:	6a1a      	ldr	r2, [r3, #32]
 8003fe4:	4904      	ldr	r1, [pc, #16]	; (8003ff8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	620b      	str	r3, [r1, #32]
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	58000800 	.word	0x58000800

08003ffc <LL_AHB3_GRP1_EnableClock>:
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004008:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800400a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4313      	orrs	r3, r2
 8004012:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004018:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004020:	68fb      	ldr	r3, [r7, #12]
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800402e:	b480      	push	{r7}
 8004030:	b085      	sub	sp, #20
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8004036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800403e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4313      	orrs	r3, r2
 8004046:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800404a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4013      	ands	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004058:	68fb      	ldr	r3, [r7, #12]
}
 800405a:	bf00      	nop
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	601a      	str	r2, [r3, #0]
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f043 0201 	orr.w	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	601a      	str	r2, [r3, #0]
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	041b      	lsls	r3, r3, #16
 80040b8:	43db      	mvns	r3, r3
 80040ba:	401a      	ands	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	605a      	str	r2, [r3, #4]
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	041b      	lsls	r3, r3, #16
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	605a      	str	r2, [r3, #4]
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	43db      	mvns	r3, r3
 8004102:	401a      	ands	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	605a      	str	r2, [r3, #4]
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	609a      	str	r2, [r3, #8]
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	041a      	lsls	r2, r3, #16
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	609a      	str	r2, [r3, #8]
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	4013      	ands	r3, r2
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d101      	bne.n	800416a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69da      	ldr	r2, [r3, #28]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	4013      	ands	r3, r2
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d101      	bne.n	8004194 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80041a8:	2102      	movs	r1, #2
 80041aa:	4819      	ldr	r0, [pc, #100]	; (8004210 <HW_IPCC_Rx_Handler+0x6c>)
 80041ac:	f7ff ffe4 	bl	8004178 <LL_C2_IPCC_IsActiveFlag_CHx>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <HW_IPCC_Rx_Handler+0x26>
 80041b6:	4b16      	ldr	r3, [pc, #88]	; (8004210 <HW_IPCC_Rx_Handler+0x6c>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	43db      	mvns	r3, r3
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 80041c4:	f000 f8da 	bl	800437c <HW_IPCC_SYS_EvtHandler>
 80041c8:	e01f      	b.n	800420a <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80041ca:	2101      	movs	r1, #1
 80041cc:	4810      	ldr	r0, [pc, #64]	; (8004210 <HW_IPCC_Rx_Handler+0x6c>)
 80041ce:	f7ff ffd3 	bl	8004178 <LL_C2_IPCC_IsActiveFlag_CHx>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HW_IPCC_Rx_Handler+0x46>
 80041d8:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <HW_IPCC_Rx_Handler+0x6c>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d102      	bne.n	80041ea <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 80041e4:	f000 f88e 	bl	8004304 <HW_IPCC_BLE_EvtHandler>
 80041e8:	e00f      	b.n	800420a <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80041ea:	2108      	movs	r1, #8
 80041ec:	4808      	ldr	r0, [pc, #32]	; (8004210 <HW_IPCC_Rx_Handler+0x6c>)
 80041ee:	f7ff ffc3 	bl	8004178 <LL_C2_IPCC_IsActiveFlag_CHx>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d009      	beq.n	800420c <HW_IPCC_Rx_Handler+0x68>
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HW_IPCC_Rx_Handler+0x6c>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	43db      	mvns	r3, r3
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8004206:	f000 f905 	bl	8004414 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800420a:	bf00      	nop
 800420c:	bf00      	nop
}
 800420e:	bd80      	pop	{r7, pc}
 8004210:	58000c00 	.word	0x58000c00

08004214 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8004218:	2102      	movs	r1, #2
 800421a:	481a      	ldr	r0, [pc, #104]	; (8004284 <HW_IPCC_Tx_Handler+0x70>)
 800421c:	f7ff ff97 	bl	800414e <LL_C1_IPCC_IsActiveFlag_CHx>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d109      	bne.n	800423a <HW_IPCC_Tx_Handler+0x26>
 8004226:	4b17      	ldr	r3, [pc, #92]	; (8004284 <HW_IPCC_Tx_Handler+0x70>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	43db      	mvns	r3, r3
 800422c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8004234:	f000 f896 	bl	8004364 <HW_IPCC_SYS_CmdEvtHandler>
 8004238:	e020      	b.n	800427c <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800423a:	2108      	movs	r1, #8
 800423c:	4811      	ldr	r0, [pc, #68]	; (8004284 <HW_IPCC_Tx_Handler+0x70>)
 800423e:	f7ff ff86 	bl	800414e <LL_C1_IPCC_IsActiveFlag_CHx>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d109      	bne.n	800425c <HW_IPCC_Tx_Handler+0x48>
 8004248:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <HW_IPCC_Tx_Handler+0x70>)
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	43db      	mvns	r3, r3
 800424e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8004256:	f000 f8bf 	bl	80043d8 <HW_IPCC_MM_FreeBufHandler>
 800425a:	e00f      	b.n	800427c <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800425c:	2120      	movs	r1, #32
 800425e:	4809      	ldr	r0, [pc, #36]	; (8004284 <HW_IPCC_Tx_Handler+0x70>)
 8004260:	f7ff ff75 	bl	800414e <LL_C1_IPCC_IsActiveFlag_CHx>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d109      	bne.n	800427e <HW_IPCC_Tx_Handler+0x6a>
 800426a:	4b06      	ldr	r3, [pc, #24]	; (8004284 <HW_IPCC_Tx_Handler+0x70>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	43db      	mvns	r3, r3
 8004270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8004278:	f000 f850 	bl	800431c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800427c:	bf00      	nop
 800427e:	bf00      	nop
}
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	58000c00 	.word	0x58000c00

08004288 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800428c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004290:	f7ff fecd 	bl	800402e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8004294:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004298:	f7ff fe9e 	bl	8003fd8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800429c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80042a0:	f7ff fe86 	bl	8003fb0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80042a4:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80042a6:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80042a8:	f7ff fe72 	bl	8003f90 <LL_PWR_EnableBootC2>

  return;
 80042ac:	bf00      	nop
}
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80042b4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80042b8:	f7ff fea0 	bl	8003ffc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80042bc:	4806      	ldr	r0, [pc, #24]	; (80042d8 <HW_IPCC_Init+0x28>)
 80042be:	f7ff fee2 	bl	8004086 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80042c2:	4805      	ldr	r0, [pc, #20]	; (80042d8 <HW_IPCC_Init+0x28>)
 80042c4:	f7ff fecf 	bl	8004066 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80042c8:	202c      	movs	r0, #44	; 0x2c
 80042ca:	f000 fc6c 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80042ce:	202d      	movs	r0, #45	; 0x2d
 80042d0:	f000 fc69 	bl	8004ba6 <HAL_NVIC_EnableIRQ>

  return;
 80042d4:	bf00      	nop
}
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	58000c00 	.word	0x58000c00

080042dc <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80042e0:	2101      	movs	r1, #1
 80042e2:	4802      	ldr	r0, [pc, #8]	; (80042ec <HW_IPCC_BLE_Init+0x10>)
 80042e4:	f7ff ff04 	bl	80040f0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80042e8:	bf00      	nop
}
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	58000c00 	.word	0x58000c00

080042f0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 80042f4:	2101      	movs	r1, #1
 80042f6:	4802      	ldr	r0, [pc, #8]	; (8004300 <HW_IPCC_BLE_SendCmd+0x10>)
 80042f8:	f7ff ff1a 	bl	8004130 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80042fc:	bf00      	nop
}
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	58000c00 	.word	0x58000c00

08004304 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8004308:	f007 ff88 	bl	800c21c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800430c:	2101      	movs	r1, #1
 800430e:	4802      	ldr	r0, [pc, #8]	; (8004318 <HW_IPCC_BLE_EvtHandler+0x14>)
 8004310:	f7ff ff00 	bl	8004114 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004314:	bf00      	nop
}
 8004316:	bd80      	pop	{r7, pc}
 8004318:	58000c00 	.word	0x58000c00

0800431c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8004320:	2120      	movs	r1, #32
 8004322:	4803      	ldr	r0, [pc, #12]	; (8004330 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8004324:	f7ff fed2 	bl	80040cc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8004328:	f007 ffa8 	bl	800c27c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800432c:	bf00      	nop
}
 800432e:	bd80      	pop	{r7, pc}
 8004330:	58000c00 	.word	0x58000c00

08004334 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8004338:	2102      	movs	r1, #2
 800433a:	4802      	ldr	r0, [pc, #8]	; (8004344 <HW_IPCC_SYS_Init+0x10>)
 800433c:	f7ff fed8 	bl	80040f0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004340:	bf00      	nop
}
 8004342:	bd80      	pop	{r7, pc}
 8004344:	58000c00 	.word	0x58000c00

08004348 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800434c:	2102      	movs	r1, #2
 800434e:	4804      	ldr	r0, [pc, #16]	; (8004360 <HW_IPCC_SYS_SendCmd+0x18>)
 8004350:	f7ff feee 	bl	8004130 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004354:	2102      	movs	r1, #2
 8004356:	4802      	ldr	r0, [pc, #8]	; (8004360 <HW_IPCC_SYS_SendCmd+0x18>)
 8004358:	f7ff fea5 	bl	80040a6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800435c:	bf00      	nop
}
 800435e:	bd80      	pop	{r7, pc}
 8004360:	58000c00 	.word	0x58000c00

08004364 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004368:	2102      	movs	r1, #2
 800436a:	4803      	ldr	r0, [pc, #12]	; (8004378 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800436c:	f7ff feae 	bl	80040cc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8004370:	f007 ffd4 	bl	800c31c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8004374:	bf00      	nop
}
 8004376:	bd80      	pop	{r7, pc}
 8004378:	58000c00 	.word	0x58000c00

0800437c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8004380:	f007 ffe2 	bl	800c348 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8004384:	2102      	movs	r1, #2
 8004386:	4802      	ldr	r0, [pc, #8]	; (8004390 <HW_IPCC_SYS_EvtHandler+0x14>)
 8004388:	f7ff fec4 	bl	8004114 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800438c:	bf00      	nop
}
 800438e:	bd80      	pop	{r7, pc}
 8004390:	58000c00 	.word	0x58000c00

08004394 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800439c:	2108      	movs	r1, #8
 800439e:	480c      	ldr	r0, [pc, #48]	; (80043d0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80043a0:	f7ff fed5 	bl	800414e <LL_C1_IPCC_IsActiveFlag_CHx>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d007      	beq.n	80043ba <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80043aa:	4a0a      	ldr	r2, [pc, #40]	; (80043d4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80043b0:	2108      	movs	r1, #8
 80043b2:	4807      	ldr	r0, [pc, #28]	; (80043d0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80043b4:	f7ff fe77 	bl	80040a6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80043b8:	e006      	b.n	80043c8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80043be:	2108      	movs	r1, #8
 80043c0:	4803      	ldr	r0, [pc, #12]	; (80043d0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80043c2:	f7ff feb5 	bl	8004130 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80043c6:	bf00      	nop
}
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	58000c00 	.word	0x58000c00
 80043d4:	20000654 	.word	0x20000654

080043d8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80043dc:	2108      	movs	r1, #8
 80043de:	4806      	ldr	r0, [pc, #24]	; (80043f8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80043e0:	f7ff fe74 	bl	80040cc <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HW_IPCC_MM_FreeBufHandler+0x24>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80043ea:	2108      	movs	r1, #8
 80043ec:	4802      	ldr	r0, [pc, #8]	; (80043f8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80043ee:	f7ff fe9f 	bl	8004130 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80043f2:	bf00      	nop
}
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	58000c00 	.word	0x58000c00
 80043fc:	20000654 	.word	0x20000654

08004400 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004404:	2108      	movs	r1, #8
 8004406:	4802      	ldr	r0, [pc, #8]	; (8004410 <HW_IPCC_TRACES_Init+0x10>)
 8004408:	f7ff fe72 	bl	80040f0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800440c:	bf00      	nop
}
 800440e:	bd80      	pop	{r7, pc}
 8004410:	58000c00 	.word	0x58000c00

08004414 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8004418:	f008 f83e 	bl	800c498 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800441c:	2108      	movs	r1, #8
 800441e:	4802      	ldr	r0, [pc, #8]	; (8004428 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8004420:	f7ff fe78 	bl	8004114 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004424:	bf00      	nop
}
 8004426:	bd80      	pop	{r7, pc}
 8004428:	58000c00 	.word	0x58000c00

0800442c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800442c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800442e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004430:	3304      	adds	r3, #4

08004432 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004432:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004434:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004436:	d3f9      	bcc.n	800442c <CopyDataInit>
  bx lr
 8004438:	4770      	bx	lr

0800443a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800443a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800443c:	3004      	adds	r0, #4

0800443e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800443e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004440:	d3fb      	bcc.n	800443a <FillZerobss>
  bx lr
 8004442:	4770      	bx	lr

08004444 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004444:	480c      	ldr	r0, [pc, #48]	; (8004478 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8004446:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004448:	f000 f954 	bl	80046f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800444c:	480b      	ldr	r0, [pc, #44]	; (800447c <LoopForever+0x8>)
 800444e:	490c      	ldr	r1, [pc, #48]	; (8004480 <LoopForever+0xc>)
 8004450:	4a0c      	ldr	r2, [pc, #48]	; (8004484 <LoopForever+0x10>)
 8004452:	2300      	movs	r3, #0
 8004454:	f7ff ffed 	bl	8004432 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004458:	480b      	ldr	r0, [pc, #44]	; (8004488 <LoopForever+0x14>)
 800445a:	490c      	ldr	r1, [pc, #48]	; (800448c <LoopForever+0x18>)
 800445c:	2300      	movs	r3, #0
 800445e:	f7ff ffee 	bl	800443e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004462:	480b      	ldr	r0, [pc, #44]	; (8004490 <LoopForever+0x1c>)
 8004464:	490b      	ldr	r1, [pc, #44]	; (8004494 <LoopForever+0x20>)
 8004466:	2300      	movs	r3, #0
 8004468:	f7ff ffe9 	bl	800443e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800446c:	f008 fb14 	bl	800ca98 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8004470:	f7fe f96a 	bl	8002748 <main>

08004474 <LoopForever>:

LoopForever:
  b LoopForever
 8004474:	e7fe      	b.n	8004474 <LoopForever>
 8004476:	0000      	.short	0x0000
  ldr   r0, =_estack
 8004478:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 800447c:	20000008 	.word	0x20000008
 8004480:	20000234 	.word	0x20000234
 8004484:	0801120c 	.word	0x0801120c
  INIT_BSS _sbss, _ebss
 8004488:	20000270 	.word	0x20000270
 800448c:	200017c0 	.word	0x200017c0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004490:	200301e4 	.word	0x200301e4
 8004494:	20030a67 	.word	0x20030a67

08004498 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004498:	e7fe      	b.n	8004498 <ADC1_IRQHandler>

0800449a <LL_AHB2_GRP1_EnableClock>:
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80044a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80044b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4013      	ands	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80044be:	68fb      	ldr	r3, [r7, #12]
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80044d6:	f107 030c 	add.w	r3, r7, #12
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	605a      	str	r2, [r3, #4]
 80044e0:	609a      	str	r2, [r3, #8]
 80044e2:	60da      	str	r2, [r3, #12]
 80044e4:	611a      	str	r2, [r3, #16]

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80044e6:	2002      	movs	r0, #2
 80044e8:	f7ff ffd7 	bl	800449a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 80044ec:	79fb      	ldrb	r3, [r7, #7]
 80044ee:	4a12      	ldr	r2, [pc, #72]	; (8004538 <BSP_LED_Init+0x6c>)
 80044f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044f4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 80044f6:	2301      	movs	r3, #1
 80044f8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80044fe:	2302      	movs	r3, #2
 8004500:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	4a0d      	ldr	r2, [pc, #52]	; (800453c <BSP_LED_Init+0x70>)
 8004506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800450a:	f107 020c 	add.w	r2, r7, #12
 800450e:	4611      	mov	r1, r2
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fee1 	bl	80052d8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	4a08      	ldr	r2, [pc, #32]	; (800453c <BSP_LED_Init+0x70>)
 800451a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	4a05      	ldr	r2, [pc, #20]	; (8004538 <BSP_LED_Init+0x6c>)
 8004522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004526:	2200      	movs	r2, #0
 8004528:	4619      	mov	r1, r3
 800452a:	f001 f83d 	bl	80055a8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3720      	adds	r7, #32
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	08010d2c 	.word	0x08010d2c
 800453c:	20000020 	.word	0x20000020

08004540 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800454a:	79fb      	ldrb	r3, [r7, #7]
 800454c:	4a07      	ldr	r2, [pc, #28]	; (800456c <BSP_LED_On+0x2c>)
 800454e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004552:	79fb      	ldrb	r3, [r7, #7]
 8004554:	4a06      	ldr	r2, [pc, #24]	; (8004570 <BSP_LED_On+0x30>)
 8004556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800455a:	2201      	movs	r2, #1
 800455c:	4619      	mov	r1, r3
 800455e:	f001 f823 	bl	80055a8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20000020 	.word	0x20000020
 8004570:	08010d2c 	.word	0x08010d2c

08004574 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	4a07      	ldr	r2, [pc, #28]	; (80045a0 <BSP_LED_Off+0x2c>)
 8004582:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	4a06      	ldr	r2, [pc, #24]	; (80045a4 <BSP_LED_Off+0x30>)
 800458a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800458e:	2200      	movs	r2, #0
 8004590:	4619      	mov	r1, r3
 8004592:	f001 f809 	bl	80055a8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20000020 	.word	0x20000020
 80045a4:	08010d2c 	.word	0x08010d2c

080045a8 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	460a      	mov	r2, r1
 80045b2:	71fb      	strb	r3, [r7, #7]
 80045b4:	4613      	mov	r3, r2
 80045b6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 80045b8:	f107 030c 	add.w	r3, r7, #12
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	605a      	str	r2, [r3, #4]
 80045c2:	609a      	str	r2, [r3, #8]
 80045c4:	60da      	str	r2, [r3, #12]
 80045c6:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_SW1_EXTI_Callback, BUTTON_SW2_EXTI_Callback, BUTTON_SW3_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY, BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_SW1_EXTI_LINE, BUTTON_SW2_EXTI_LINE, BUTTON_SW3_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80045c8:	79fb      	ldrb	r3, [r7, #7]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d103      	bne.n	80045d6 <BSP_PB_Init+0x2e>
 80045ce:	2001      	movs	r0, #1
 80045d0:	f7ff ff63 	bl	800449a <LL_AHB2_GRP1_EnableClock>
 80045d4:	e00c      	b.n	80045f0 <BSP_PB_Init+0x48>
 80045d6:	79fb      	ldrb	r3, [r7, #7]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d103      	bne.n	80045e4 <BSP_PB_Init+0x3c>
 80045dc:	2010      	movs	r0, #16
 80045de:	f7ff ff5c 	bl	800449a <LL_AHB2_GRP1_EnableClock>
 80045e2:	e005      	b.n	80045f0 <BSP_PB_Init+0x48>
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d102      	bne.n	80045f0 <BSP_PB_Init+0x48>
 80045ea:	2001      	movs	r0, #1
 80045ec:	f7ff ff55 	bl	800449a <LL_AHB2_GRP1_EnableClock>

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	4a29      	ldr	r2, [pc, #164]	; (8004698 <BSP_PB_Init+0xf0>)
 80045f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045f8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80045fa:	2301      	movs	r3, #1
 80045fc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80045fe:	2302      	movs	r3, #2
 8004600:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8004602:	79bb      	ldrb	r3, [r7, #6]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10c      	bne.n	8004622 <BSP_PB_Init+0x7a>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8004608:	2300      	movs	r3, #0
 800460a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800460c:	79fb      	ldrb	r3, [r7, #7]
 800460e:	4a23      	ldr	r2, [pc, #140]	; (800469c <BSP_PB_Init+0xf4>)
 8004610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004614:	f107 020c 	add.w	r2, r7, #12
 8004618:	4611      	mov	r1, r2
 800461a:	4618      	mov	r0, r3
 800461c:	f000 fe5c 	bl	80052d8 <HAL_GPIO_Init>
 8004620:	e035      	b.n	800468e <BSP_PB_Init+0xe6>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8004622:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004626:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	4a1c      	ldr	r2, [pc, #112]	; (800469c <BSP_PB_Init+0xf4>)
 800462c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004630:	f107 020c 	add.w	r2, r7, #12
 8004634:	4611      	mov	r1, r2
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fe4e 	bl	80052d8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	4a17      	ldr	r2, [pc, #92]	; (80046a0 <BSP_PB_Init+0xf8>)
 8004642:	441a      	add	r2, r3
 8004644:	79fb      	ldrb	r3, [r7, #7]
 8004646:	4917      	ldr	r1, [pc, #92]	; (80046a4 <BSP_PB_Init+0xfc>)
 8004648:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800464c:	4619      	mov	r1, r3
 800464e:	4610      	mov	r0, r2
 8004650:	f000 fe0c 	bl	800526c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 8004654:	79fb      	ldrb	r3, [r7, #7]
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	4a11      	ldr	r2, [pc, #68]	; (80046a0 <BSP_PB_Init+0xf8>)
 800465a:	1898      	adds	r0, r3, r2
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	4a12      	ldr	r2, [pc, #72]	; (80046a8 <BSP_PB_Init+0x100>)
 8004660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004664:	461a      	mov	r2, r3
 8004666:	2100      	movs	r1, #0
 8004668:	f000 fde6 	bl	8005238 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 800466c:	79fb      	ldrb	r3, [r7, #7]
 800466e:	4a0f      	ldr	r2, [pc, #60]	; (80046ac <BSP_PB_Init+0x104>)
 8004670:	56d0      	ldrsb	r0, [r2, r3]
 8004672:	79fb      	ldrb	r3, [r7, #7]
 8004674:	4a0e      	ldr	r2, [pc, #56]	; (80046b0 <BSP_PB_Init+0x108>)
 8004676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800467a:	2200      	movs	r2, #0
 800467c:	4619      	mov	r1, r3
 800467e:	f000 fa78 	bl	8004b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8004682:	79fb      	ldrb	r3, [r7, #7]
 8004684:	4a09      	ldr	r2, [pc, #36]	; (80046ac <BSP_PB_Init+0x104>)
 8004686:	56d3      	ldrsb	r3, [r2, r3]
 8004688:	4618      	mov	r0, r3
 800468a:	f000 fa8c 	bl	8004ba6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3720      	adds	r7, #32
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	08010d34 	.word	0x08010d34
 800469c:	2000002c 	.word	0x2000002c
 80046a0:	20000658 	.word	0x20000658
 80046a4:	08010d40 	.word	0x08010d40
 80046a8:	20000038 	.word	0x20000038
 80046ac:	08010d3c 	.word	0x08010d3c
 80046b0:	20000044 	.word	0x20000044

080046b4 <BSP_PB_Callback>:
  *           @arg BUTTON_SW2
  *           @arg BUTTON_SW3
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <BUTTON_SW1_EXTI_Callback>:
/**
  * @brief  Button SW1 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW1_EXTI_Callback(void)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW1);
 80046ce:	2000      	movs	r0, #0
 80046d0:	f7ff fff0 	bl	80046b4 <BSP_PB_Callback>
}
 80046d4:	bf00      	nop
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <BUTTON_SW2_EXTI_Callback>:
/**
  * @brief  Button SW2 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW2_EXTI_Callback(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW2);
 80046dc:	2001      	movs	r0, #1
 80046de:	f7ff ffe9 	bl	80046b4 <BSP_PB_Callback>
}
 80046e2:	bf00      	nop
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <BUTTON_SW3_EXTI_Callback>:
/**
  * @brief  Button SW3 EXTI line detection callback.
  * @retval None
  */
static void BUTTON_SW3_EXTI_Callback(void)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_SW3);
 80046ea:	2002      	movs	r0, #2
 80046ec:	f7ff ffe2 	bl	80046b4 <BSP_PB_Callback>
}
 80046f0:	bf00      	nop
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80046f8:	4b24      	ldr	r3, [pc, #144]	; (800478c <SystemInit+0x98>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80046fe:	4b23      	ldr	r3, [pc, #140]	; (800478c <SystemInit+0x98>)
 8004700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004704:	4a21      	ldr	r2, [pc, #132]	; (800478c <SystemInit+0x98>)
 8004706:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800470a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800470e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004718:	f043 0301 	orr.w	r3, r3, #1
 800471c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800471e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004722:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004726:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004732:	4b17      	ldr	r3, [pc, #92]	; (8004790 <SystemInit+0x9c>)
 8004734:	4013      	ands	r3, r2
 8004736:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800473c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004740:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004744:	f023 0305 	bic.w	r3, r3, #5
 8004748:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800474c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004754:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004758:	f023 0301 	bic.w	r3, r3, #1
 800475c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004764:	4a0b      	ldr	r2, [pc, #44]	; (8004794 <SystemInit+0xa0>)
 8004766:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004776:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477c:	2200      	movs	r2, #0
 800477e:	619a      	str	r2, [r3, #24]
}
 8004780:	bf00      	nop
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	e000ed00 	.word	0xe000ed00
 8004790:	faf6fefb 	.word	0xfaf6fefb
 8004794:	22041000 	.word	0x22041000

08004798 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8004798:	b480      	push	{r7}
 800479a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800479c:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	4a04      	ldr	r2, [pc, #16]	; (80047b4 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	6053      	str	r3, [r2, #4]
}
 80047a8:	bf00      	nop
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	e0042000 	.word	0xe0042000

080047b8 <LL_DBGMCU_EnableDBGStopMode>:
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80047bc:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4a04      	ldr	r2, [pc, #16]	; (80047d4 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80047c2:	f043 0302 	orr.w	r3, r3, #2
 80047c6:	6053      	str	r3, [r2, #4]
}
 80047c8:	bf00      	nop
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	e0042000 	.word	0xe0042000

080047d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047e2:	4b0c      	ldr	r3, [pc, #48]	; (8004814 <HAL_Init+0x3c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a0b      	ldr	r2, [pc, #44]	; (8004814 <HAL_Init+0x3c>)
 80047e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047ee:	2003      	movs	r0, #3
 80047f0:	f000 f9b4 	bl	8004b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80047f4:	2000      	movs	r0, #0
 80047f6:	f000 f80f 	bl	8004818 <HAL_InitTick>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	71fb      	strb	r3, [r7, #7]
 8004804:	e001      	b.n	800480a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004806:	f7fe f987 	bl	8002b18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800480a:	79fb      	ldrb	r3, [r7, #7]
}
 800480c:	4618      	mov	r0, r3
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	58004000 	.word	0x58004000

08004818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004824:	4b17      	ldr	r3, [pc, #92]	; (8004884 <HAL_InitTick+0x6c>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d024      	beq.n	8004876 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800482c:	f001 ffe0 	bl	80067f0 <HAL_RCC_GetHCLKFreq>
 8004830:	4602      	mov	r2, r0
 8004832:	4b14      	ldr	r3, [pc, #80]	; (8004884 <HAL_InitTick+0x6c>)
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	4619      	mov	r1, r3
 8004838:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800483c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004840:	fbb2 f3f3 	udiv	r3, r2, r3
 8004844:	4618      	mov	r0, r3
 8004846:	f000 f9ca 	bl	8004bde <HAL_SYSTICK_Config>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10f      	bne.n	8004870 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b0f      	cmp	r3, #15
 8004854:	d809      	bhi.n	800486a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004856:	2200      	movs	r2, #0
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	f04f 30ff 	mov.w	r0, #4294967295
 800485e:	f000 f988 	bl	8004b72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004862:	4a09      	ldr	r2, [pc, #36]	; (8004888 <HAL_InitTick+0x70>)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6013      	str	r3, [r2, #0]
 8004868:	e007      	b.n	800487a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
 800486e:	e004      	b.n	800487a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
 8004874:	e001      	b.n	800487a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800487a:	7bfb      	ldrb	r3, [r7, #15]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	20000058 	.word	0x20000058
 8004888:	20000054 	.word	0x20000054

0800488c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <HAL_IncTick+0x20>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <HAL_IncTick+0x24>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4413      	add	r3, r2
 800489c:	4a04      	ldr	r2, [pc, #16]	; (80048b0 <HAL_IncTick+0x24>)
 800489e:	6013      	str	r3, [r2, #0]
}
 80048a0:	bf00      	nop
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20000058 	.word	0x20000058
 80048b0:	20000670 	.word	0x20000670

080048b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return uwTick;
 80048b8:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <HAL_GetTick+0x14>)
 80048ba:	681b      	ldr	r3, [r3, #0]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20000670 	.word	0x20000670

080048cc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80048d0:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <HAL_GetTickPrio+0x14>)
 80048d2:	681b      	ldr	r3, [r3, #0]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	20000054 	.word	0x20000054

080048e4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80048e8:	f7ff ff56 	bl	8004798 <LL_DBGMCU_EnableDBGSleepMode>
}
 80048ec:	bf00      	nop
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80048f4:	f7ff ff60 	bl	80047b8 <LL_DBGMCU_EnableDBGStopMode>
}
 80048f8:	bf00      	nop
 80048fa:	bd80      	pop	{r7, pc}

080048fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800490c:	4b0c      	ldr	r3, [pc, #48]	; (8004940 <__NVIC_SetPriorityGrouping+0x44>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004912:	68ba      	ldr	r2, [r7, #8]
 8004914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004918:	4013      	ands	r3, r2
 800491a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800492c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800492e:	4a04      	ldr	r2, [pc, #16]	; (8004940 <__NVIC_SetPriorityGrouping+0x44>)
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	60d3      	str	r3, [r2, #12]
}
 8004934:	bf00      	nop
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	e000ed00 	.word	0xe000ed00

08004944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004944:	b480      	push	{r7}
 8004946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004948:	4b04      	ldr	r3, [pc, #16]	; (800495c <__NVIC_GetPriorityGrouping+0x18>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	0a1b      	lsrs	r3, r3, #8
 800494e:	f003 0307 	and.w	r3, r3, #7
}
 8004952:	4618      	mov	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	e000ed00 	.word	0xe000ed00

08004960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	4603      	mov	r3, r0
 8004968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800496a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496e:	2b00      	cmp	r3, #0
 8004970:	db0b      	blt.n	800498a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004972:	79fb      	ldrb	r3, [r7, #7]
 8004974:	f003 021f 	and.w	r2, r3, #31
 8004978:	4907      	ldr	r1, [pc, #28]	; (8004998 <__NVIC_EnableIRQ+0x38>)
 800497a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497e:	095b      	lsrs	r3, r3, #5
 8004980:	2001      	movs	r0, #1
 8004982:	fa00 f202 	lsl.w	r2, r0, r2
 8004986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	e000e100 	.word	0xe000e100

0800499c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	db12      	blt.n	80049d4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ae:	79fb      	ldrb	r3, [r7, #7]
 80049b0:	f003 021f 	and.w	r2, r3, #31
 80049b4:	490a      	ldr	r1, [pc, #40]	; (80049e0 <__NVIC_DisableIRQ+0x44>)
 80049b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	2001      	movs	r0, #1
 80049be:	fa00 f202 	lsl.w	r2, r0, r2
 80049c2:	3320      	adds	r3, #32
 80049c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80049c8:	f3bf 8f4f 	dsb	sy
}
 80049cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049ce:	f3bf 8f6f 	isb	sy
}
 80049d2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	e000e100 	.word	0xe000e100

080049e4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	db0c      	blt.n	8004a10 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	f003 021f 	and.w	r2, r3, #31
 80049fc:	4907      	ldr	r1, [pc, #28]	; (8004a1c <__NVIC_SetPendingIRQ+0x38>)
 80049fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a02:	095b      	lsrs	r3, r3, #5
 8004a04:	2001      	movs	r0, #1
 8004a06:	fa00 f202 	lsl.w	r2, r0, r2
 8004a0a:	3340      	adds	r3, #64	; 0x40
 8004a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	e000e100 	.word	0xe000e100

08004a20 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	db0c      	blt.n	8004a4c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	f003 021f 	and.w	r2, r3, #31
 8004a38:	4907      	ldr	r1, [pc, #28]	; (8004a58 <__NVIC_ClearPendingIRQ+0x38>)
 8004a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	2001      	movs	r0, #1
 8004a42:	fa00 f202 	lsl.w	r2, r0, r2
 8004a46:	3360      	adds	r3, #96	; 0x60
 8004a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr
 8004a58:	e000e100 	.word	0xe000e100

08004a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	4603      	mov	r3, r0
 8004a64:	6039      	str	r1, [r7, #0]
 8004a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	db0a      	blt.n	8004a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	490c      	ldr	r1, [pc, #48]	; (8004aa8 <__NVIC_SetPriority+0x4c>)
 8004a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a7a:	0112      	lsls	r2, r2, #4
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	440b      	add	r3, r1
 8004a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a84:	e00a      	b.n	8004a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	4908      	ldr	r1, [pc, #32]	; (8004aac <__NVIC_SetPriority+0x50>)
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	f003 030f 	and.w	r3, r3, #15
 8004a92:	3b04      	subs	r3, #4
 8004a94:	0112      	lsls	r2, r2, #4
 8004a96:	b2d2      	uxtb	r2, r2
 8004a98:	440b      	add	r3, r1
 8004a9a:	761a      	strb	r2, [r3, #24]
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	e000e100 	.word	0xe000e100
 8004aac:	e000ed00 	.word	0xe000ed00

08004ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b089      	sub	sp, #36	; 0x24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f1c3 0307 	rsb	r3, r3, #7
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	bf28      	it	cs
 8004ace:	2304      	movcs	r3, #4
 8004ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	2b06      	cmp	r3, #6
 8004ad8:	d902      	bls.n	8004ae0 <NVIC_EncodePriority+0x30>
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	3b03      	subs	r3, #3
 8004ade:	e000      	b.n	8004ae2 <NVIC_EncodePriority+0x32>
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	43da      	mvns	r2, r3
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	401a      	ands	r2, r3
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004af8:	f04f 31ff 	mov.w	r1, #4294967295
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	fa01 f303 	lsl.w	r3, r1, r3
 8004b02:	43d9      	mvns	r1, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b08:	4313      	orrs	r3, r2
         );
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3724      	adds	r7, #36	; 0x24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
	...

08004b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b28:	d301      	bcc.n	8004b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e00f      	b.n	8004b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b2e:	4a0a      	ldr	r2, [pc, #40]	; (8004b58 <SysTick_Config+0x40>)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b36:	210f      	movs	r1, #15
 8004b38:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3c:	f7ff ff8e 	bl	8004a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b40:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <SysTick_Config+0x40>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b46:	4b04      	ldr	r3, [pc, #16]	; (8004b58 <SysTick_Config+0x40>)
 8004b48:	2207      	movs	r2, #7
 8004b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	e000e010 	.word	0xe000e010

08004b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f7ff fec9 	bl	80048fc <__NVIC_SetPriorityGrouping>
}
 8004b6a:	bf00      	nop
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b086      	sub	sp, #24
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	4603      	mov	r3, r0
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	607a      	str	r2, [r7, #4]
 8004b7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b80:	f7ff fee0 	bl	8004944 <__NVIC_GetPriorityGrouping>
 8004b84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	68b9      	ldr	r1, [r7, #8]
 8004b8a:	6978      	ldr	r0, [r7, #20]
 8004b8c:	f7ff ff90 	bl	8004ab0 <NVIC_EncodePriority>
 8004b90:	4602      	mov	r2, r0
 8004b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b96:	4611      	mov	r1, r2
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff ff5f 	bl	8004a5c <__NVIC_SetPriority>
}
 8004b9e:	bf00      	nop
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	4603      	mov	r3, r0
 8004bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff fed3 	bl	8004960 <__NVIC_EnableIRQ>
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b082      	sub	sp, #8
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	4603      	mov	r3, r0
 8004bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff fee3 	bl	800499c <__NVIC_DisableIRQ>
}
 8004bd6:	bf00      	nop
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7ff ff96 	bl	8004b18 <SysTick_Config>
 8004bec:	4603      	mov	r3, r0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b082      	sub	sp, #8
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff feed 	bl	80049e4 <__NVIC_SetPendingIRQ>
}
 8004c0a:	bf00      	nop
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	4603      	mov	r3, r0
 8004c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7ff fefd 	bl	8004a20 <__NVIC_ClearPendingIRQ>
}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
	...

08004c30 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e078      	b.n	8004d34 <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	461a      	mov	r2, r3
 8004c48:	4b3c      	ldr	r3, [pc, #240]	; (8004d3c <HAL_DMA_Init+0x10c>)
 8004c4a:	4413      	add	r3, r2
 8004c4c:	4a3c      	ldr	r2, [pc, #240]	; (8004d40 <HAL_DMA_Init+0x110>)
 8004c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c52:	091b      	lsrs	r3, r3, #4
 8004c54:	009a      	lsls	r2, r3, #2
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a39      	ldr	r2, [pc, #228]	; (8004d44 <HAL_DMA_Init+0x114>)
 8004c5e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c7a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004c84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fa6e 	bl	8005194 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cc0:	d102      	bne.n	8004cc8 <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685a      	ldr	r2, [r3, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cd0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004cd4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004cde:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d010      	beq.n	8004d0a <HAL_DMA_Init+0xda>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d80c      	bhi.n	8004d0a <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fa7b 	bl	80051ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d06:	605a      	str	r2, [r3, #4]
 8004d08:	e008      	b.n	8004d1c <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	bffdfff8 	.word	0xbffdfff8
 8004d40:	cccccccd 	.word	0xcccccccd
 8004d44:	40020000 	.word	0x40020000

08004d48 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_DMA_Start_IT+0x20>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e066      	b.n	8004e36 <HAL_DMA_Start_IT+0xee>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d155      	bne.n	8004e28 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0201 	bic.w	r2, r2, #1
 8004d98:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	68b9      	ldr	r1, [r7, #8]
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 f9b9 	bl	8005118 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d008      	beq.n	8004dc0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f042 020e 	orr.w	r2, r2, #14
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	e00f      	b.n	8004de0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0204 	bic.w	r2, r2, #4
 8004dce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 020a 	orr.w	r2, r2, #10
 8004dde:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dfc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d007      	beq.n	8004e16 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e14:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 0201 	orr.w	r2, r2, #1
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	e005      	b.n	8004e34 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004e30:	2302      	movs	r3, #2
 8004e32:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e04f      	b.n	8004ef0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d008      	beq.n	8004e6e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2204      	movs	r2, #4
 8004e60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e040      	b.n	8004ef0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 020e 	bic.w	r2, r2, #14
 8004e7c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0201 	bic.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	f003 021c 	and.w	r2, r3, #28
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	2101      	movs	r1, #1
 8004eac:	fa01 f202 	lsl.w	r2, r1, r2
 8004eb0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004eba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00c      	beq.n	8004ede <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ece:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ed2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004edc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d005      	beq.n	8004f20 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2204      	movs	r2, #4
 8004f18:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	73fb      	strb	r3, [r7, #15]
 8004f1e:	e047      	b.n	8004fb0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 020e 	bic.w	r2, r2, #14
 8004f2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0201 	bic.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f54:	f003 021c 	and.w	r2, r3, #28
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f62:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004f6c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00c      	beq.n	8004f90 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f84:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004f8e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	4798      	blx	r3
    }
  }
  return status;
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd6:	f003 031c 	and.w	r3, r3, #28
 8004fda:	2204      	movs	r2, #4
 8004fdc:	409a      	lsls	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d026      	beq.n	8005034 <HAL_DMA_IRQHandler+0x7a>
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d021      	beq.n	8005034 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d107      	bne.n	800500e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0204 	bic.w	r2, r2, #4
 800500c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005012:	f003 021c 	and.w	r2, r3, #28
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	2104      	movs	r1, #4
 800501c:	fa01 f202 	lsl.w	r2, r1, r2
 8005020:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	2b00      	cmp	r3, #0
 8005028:	d071      	beq.n	800510e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005032:	e06c      	b.n	800510e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005038:	f003 031c 	and.w	r3, r3, #28
 800503c:	2202      	movs	r2, #2
 800503e:	409a      	lsls	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d02e      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xec>
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d029      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10b      	bne.n	8005078 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 020a 	bic.w	r2, r2, #10
 800506e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507c:	f003 021c 	and.w	r2, r3, #28
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	2102      	movs	r1, #2
 8005086:	fa01 f202 	lsl.w	r2, r1, r2
 800508a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d038      	beq.n	800510e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80050a4:	e033      	b.n	800510e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050aa:	f003 031c 	and.w	r3, r3, #28
 80050ae:	2208      	movs	r2, #8
 80050b0:	409a      	lsls	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4013      	ands	r3, r2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d02a      	beq.n	8005110 <HAL_DMA_IRQHandler+0x156>
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f003 0308 	and.w	r3, r3, #8
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d025      	beq.n	8005110 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 020e 	bic.w	r2, r2, #14
 80050d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d8:	f003 021c 	and.w	r2, r3, #28
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	2101      	movs	r1, #1
 80050e2:	fa01 f202 	lsl.w	r2, r1, r2
 80050e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005102:	2b00      	cmp	r3, #0
 8005104:	d004      	beq.n	8005110 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800510e:	bf00      	nop
 8005110:	bf00      	nop
}
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800512e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005134:	2b00      	cmp	r3, #0
 8005136:	d004      	beq.n	8005142 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005140:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005146:	f003 021c 	and.w	r2, r3, #28
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	2101      	movs	r1, #1
 8005150:	fa01 f202 	lsl.w	r2, r1, r2
 8005154:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	683a      	ldr	r2, [r7, #0]
 800515c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b10      	cmp	r3, #16
 8005164:	d108      	bne.n	8005178 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005176:	e007      	b.n	8005188 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	60da      	str	r2, [r3, #12]
}
 8005188:	bf00      	nop
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a0:	089b      	lsrs	r3, r3, #2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80051a8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	3b08      	subs	r3, #8
 80051b8:	4a0a      	ldr	r2, [pc, #40]	; (80051e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80051ba:	fba2 2303 	umull	r2, r3, r2, r3
 80051be:	091b      	lsrs	r3, r3, #4
 80051c0:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a08      	ldr	r2, [pc, #32]	; (80051e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80051c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f003 031f 	and.w	r3, r3, #31
 80051ce:	2201      	movs	r2, #1
 80051d0:	409a      	lsls	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051d6:	bf00      	nop
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	cccccccd 	.word	0xcccccccd
 80051e8:	40020880 	.word	0x40020880

080051ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051fc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4b0b      	ldr	r3, [pc, #44]	; (8005230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	461a      	mov	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a09      	ldr	r2, [pc, #36]	; (8005234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8005210:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3b01      	subs	r3, #1
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	2201      	movs	r2, #1
 800521c:	409a      	lsls	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005222:	bf00      	nop
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	1000823f 	.word	0x1000823f
 8005234:	40020940 	.word	0x40020940

08005238 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	460b      	mov	r3, r1
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800524a:	7afb      	ldrb	r3, [r7, #11]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d103      	bne.n	8005258 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	605a      	str	r2, [r3, #4]
      break;
 8005256:	e002      	b.n	800525e <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	75fb      	strb	r3, [r7, #23]
      break;
 800525c:	bf00      	nop
  }

  return status;
 800525e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005260:	4618      	mov	r0, r3
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e003      	b.n	8005288 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005286:	2300      	movs	r3, #0
  }
}
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	0c1b      	lsrs	r3, r3, #16
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 031f 	and.w	r3, r3, #31
 80052b0:	2201      	movs	r2, #1
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	015b      	lsls	r3, r3, #5
 80052bc:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 80052c0:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80052c4:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	601a      	str	r2, [r3, #0]
}
 80052cc:	bf00      	nop
 80052ce:	371c      	adds	r7, #28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052e6:	e146      	b.n	8005576 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	2101      	movs	r1, #1
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	fa01 f303 	lsl.w	r3, r1, r3
 80052f4:	4013      	ands	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 8138 	beq.w	8005570 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f003 0303 	and.w	r3, r3, #3
 8005308:	2b01      	cmp	r3, #1
 800530a:	d005      	beq.n	8005318 <HAL_GPIO_Init+0x40>
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f003 0303 	and.w	r3, r3, #3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d130      	bne.n	800537a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	2203      	movs	r2, #3
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	43db      	mvns	r3, r3
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4013      	ands	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	68da      	ldr	r2, [r3, #12]
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800534e:	2201      	movs	r2, #1
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	fa02 f303 	lsl.w	r3, r2, r3
 8005356:	43db      	mvns	r3, r3
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4013      	ands	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	091b      	lsrs	r3, r3, #4
 8005364:	f003 0201 	and.w	r2, r3, #1
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	fa02 f303 	lsl.w	r3, r2, r3
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	4313      	orrs	r3, r2
 8005372:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	2b03      	cmp	r3, #3
 8005384:	d017      	beq.n	80053b6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	2203      	movs	r2, #3
 8005392:	fa02 f303 	lsl.w	r3, r2, r3
 8005396:	43db      	mvns	r3, r3
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4013      	ands	r3, r2
 800539c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	fa02 f303 	lsl.w	r3, r2, r3
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f003 0303 	and.w	r3, r3, #3
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d123      	bne.n	800540a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	08da      	lsrs	r2, r3, #3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3208      	adds	r2, #8
 80053ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	220f      	movs	r2, #15
 80053da:	fa02 f303 	lsl.w	r3, r2, r3
 80053de:	43db      	mvns	r3, r3
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4013      	ands	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	691a      	ldr	r2, [r3, #16]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	fa02 f303 	lsl.w	r3, r2, r3
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	08da      	lsrs	r2, r3, #3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3208      	adds	r2, #8
 8005404:	6939      	ldr	r1, [r7, #16]
 8005406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	2203      	movs	r2, #3
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43db      	mvns	r3, r3
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	4013      	ands	r3, r2
 8005420:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f003 0203 	and.w	r2, r3, #3
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	005b      	lsls	r3, r3, #1
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 8092 	beq.w	8005570 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800544c:	4a51      	ldr	r2, [pc, #324]	; (8005594 <HAL_GPIO_Init+0x2bc>)
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	089b      	lsrs	r3, r3, #2
 8005452:	3302      	adds	r3, #2
 8005454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005458:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f003 0303 	and.w	r3, r3, #3
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	220f      	movs	r2, #15
 8005464:	fa02 f303 	lsl.w	r3, r2, r3
 8005468:	43db      	mvns	r3, r3
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4013      	ands	r3, r2
 800546e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005476:	d013      	beq.n	80054a0 <HAL_GPIO_Init+0x1c8>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a47      	ldr	r2, [pc, #284]	; (8005598 <HAL_GPIO_Init+0x2c0>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d00d      	beq.n	800549c <HAL_GPIO_Init+0x1c4>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a46      	ldr	r2, [pc, #280]	; (800559c <HAL_GPIO_Init+0x2c4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d007      	beq.n	8005498 <HAL_GPIO_Init+0x1c0>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a45      	ldr	r2, [pc, #276]	; (80055a0 <HAL_GPIO_Init+0x2c8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d101      	bne.n	8005494 <HAL_GPIO_Init+0x1bc>
 8005490:	2304      	movs	r3, #4
 8005492:	e006      	b.n	80054a2 <HAL_GPIO_Init+0x1ca>
 8005494:	2307      	movs	r3, #7
 8005496:	e004      	b.n	80054a2 <HAL_GPIO_Init+0x1ca>
 8005498:	2302      	movs	r3, #2
 800549a:	e002      	b.n	80054a2 <HAL_GPIO_Init+0x1ca>
 800549c:	2301      	movs	r3, #1
 800549e:	e000      	b.n	80054a2 <HAL_GPIO_Init+0x1ca>
 80054a0:	2300      	movs	r3, #0
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	f002 0203 	and.w	r2, r2, #3
 80054a8:	0092      	lsls	r2, r2, #2
 80054aa:	4093      	lsls	r3, r2
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80054b2:	4938      	ldr	r1, [pc, #224]	; (8005594 <HAL_GPIO_Init+0x2bc>)
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	089b      	lsrs	r3, r3, #2
 80054b8:	3302      	adds	r3, #2
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054c0:	4b38      	ldr	r3, [pc, #224]	; (80055a4 <HAL_GPIO_Init+0x2cc>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	43db      	mvns	r3, r3
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4013      	ands	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80054e4:	4a2f      	ldr	r2, [pc, #188]	; (80055a4 <HAL_GPIO_Init+0x2cc>)
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80054ea:	4b2e      	ldr	r3, [pc, #184]	; (80055a4 <HAL_GPIO_Init+0x2cc>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	43db      	mvns	r3, r3
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4013      	ands	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4313      	orrs	r3, r2
 800550c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800550e:	4a25      	ldr	r2, [pc, #148]	; (80055a4 <HAL_GPIO_Init+0x2cc>)
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005514:	4b23      	ldr	r3, [pc, #140]	; (80055a4 <HAL_GPIO_Init+0x2cc>)
 8005516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800551a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	43db      	mvns	r3, r3
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4013      	ands	r3, r2
 8005524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800553a:	4a1a      	ldr	r2, [pc, #104]	; (80055a4 <HAL_GPIO_Init+0x2cc>)
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8005542:	4b18      	ldr	r3, [pc, #96]	; (80055a4 <HAL_GPIO_Init+0x2cc>)
 8005544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	43db      	mvns	r3, r3
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4013      	ands	r3, r2
 8005552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005568:	4a0e      	ldr	r2, [pc, #56]	; (80055a4 <HAL_GPIO_Init+0x2cc>)
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	3301      	adds	r3, #1
 8005574:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	fa22 f303 	lsr.w	r3, r2, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	f47f aeb1 	bne.w	80052e8 <HAL_GPIO_Init+0x10>
  }
}
 8005586:	bf00      	nop
 8005588:	bf00      	nop
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	40010000 	.word	0x40010000
 8005598:	48000400 	.word	0x48000400
 800559c:	48000800 	.word	0x48000800
 80055a0:	48001000 	.word	0x48001000
 80055a4:	58000800 	.word	0x58000800

080055a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	807b      	strh	r3, [r7, #2]
 80055b4:	4613      	mov	r3, r2
 80055b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055b8:	787b      	ldrb	r3, [r7, #1]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055be:	887a      	ldrh	r2, [r7, #2]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055c4:	e002      	b.n	80055cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055c6:	887a      	ldrh	r2, [r7, #2]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	4603      	mov	r3, r0
 80055e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80055e2:	4b08      	ldr	r3, [pc, #32]	; (8005604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	4013      	ands	r3, r2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d006      	beq.n	80055fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055ee:	4a05      	ldr	r2, [pc, #20]	; (8005604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055f0:	88fb      	ldrh	r3, [r7, #6]
 80055f2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fc f852 	bl	80016a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80055fc:	bf00      	nop
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	58000800 	.word	0x58000800

08005608 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800560e:	4b0a      	ldr	r3, [pc, #40]	; (8005638 <HAL_HSEM_IRQHandler+0x30>)
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005614:	4b08      	ldr	r3, [pc, #32]	; (8005638 <HAL_HSEM_IRQHandler+0x30>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	43db      	mvns	r3, r3
 800561c:	4906      	ldr	r1, [pc, #24]	; (8005638 <HAL_HSEM_IRQHandler+0x30>)
 800561e:	4013      	ands	r3, r2
 8005620:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005622:	4a05      	ldr	r2, [pc, #20]	; (8005638 <HAL_HSEM_IRQHandler+0x30>)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f807 	bl	800563c <HAL_HSEM_FreeCallback>
}
 800562e:	bf00      	nop
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	58001500 	.word	0x58001500

0800563c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005658:	2300      	movs	r3, #0
 800565a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d01e      	beq.n	80056a0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005662:	4b13      	ldr	r3, [pc, #76]	; (80056b0 <HAL_IPCC_Init+0x60>)
 8005664:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d102      	bne.n	8005678 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7fd fa60 	bl	8002b38 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005678:	68b8      	ldr	r0, [r7, #8]
 800567a:	f000 f85b 	bl	8005734 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f82c 	bl	80056e8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800569e:	e001      	b.n	80056a4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3710      	adds	r7, #16
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	58000c00 	.word	0x58000c00

080056b4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	4613      	mov	r3, r2
 80056c0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80056c2:	bf00      	nop
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	4613      	mov	r3, r2
 80056da:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	3714      	adds	r7, #20
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80056f0:	2300      	movs	r3, #0
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	e00f      	b.n	8005716 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	4a0b      	ldr	r2, [pc, #44]	; (800572c <IPCC_SetDefaultCallbacks+0x44>)
 8005700:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3306      	adds	r3, #6
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	4a08      	ldr	r2, [pc, #32]	; (8005730 <IPCC_SetDefaultCallbacks+0x48>)
 800570e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3301      	adds	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b05      	cmp	r3, #5
 800571a:	d9ec      	bls.n	80056f6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	080056b5 	.word	0x080056b5
 8005730:	080056cf 	.word	0x080056cf

08005734 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8005748:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	223f      	movs	r2, #63	; 0x3f
 800574e:	609a      	str	r2, [r3, #8]
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005760:	4b05      	ldr	r3, [pc, #20]	; (8005778 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a04      	ldr	r2, [pc, #16]	; (8005778 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800576a:	6013      	str	r3, [r2, #0]
}
 800576c:	bf00      	nop
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	58000400 	.word	0x58000400

0800577c <LL_PWR_EnableSRAM2Retention>:
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8005780:	4b05      	ldr	r3, [pc, #20]	; (8005798 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	4a04      	ldr	r2, [pc, #16]	; (8005798 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8005786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800578a:	6093      	str	r3, [r2, #8]
}
 800578c:	bf00      	nop
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	58000400 	.word	0x58000400

0800579c <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 80057a0:	f7ff ffec 	bl	800577c <LL_PWR_EnableSRAM2Retention>
}
 80057a4:	bf00      	nop
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80057ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ba:	d101      	bne.n	80057c0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80057bc:	2301      	movs	r3, #1
 80057be:	e000      	b.n	80057c2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <LL_RCC_HSE_Enable>:
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80057d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057de:	6013      	str	r3, [r2, #0]
}
 80057e0:	bf00      	nop
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <LL_RCC_HSE_Disable>:
{
 80057ea:	b480      	push	{r7}
 80057ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80057ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057fc:	6013      	str	r3, [r2, #0]
}
 80057fe:	bf00      	nop
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <LL_RCC_HSE_IsReady>:
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800580c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005816:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800581a:	d101      	bne.n	8005820 <LL_RCC_HSE_IsReady+0x18>
 800581c:	2301      	movs	r3, #1
 800581e:	e000      	b.n	8005822 <LL_RCC_HSE_IsReady+0x1a>
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <LL_RCC_HSI_Enable>:
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800583a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800583e:	6013      	str	r3, [r2, #0]
}
 8005840:	bf00      	nop
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <LL_RCC_HSI_Disable>:
{
 800584a:	b480      	push	{r7}
 800584c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800584e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800585c:	6013      	str	r3, [r2, #0]
}
 800585e:	bf00      	nop
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <LL_RCC_HSI_IsReady>:
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800586c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005876:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800587a:	d101      	bne.n	8005880 <LL_RCC_HSI_IsReady+0x18>
 800587c:	2301      	movs	r3, #1
 800587e:	e000      	b.n	8005882 <LL_RCC_HSI_IsReady+0x1a>
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <LL_RCC_HSI_SetCalibTrimming>:
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	061b      	lsls	r3, r3, #24
 80058a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058a6:	4313      	orrs	r3, r2
 80058a8:	604b      	str	r3, [r1, #4]
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <LL_RCC_LSE_Enable>:
{
 80058b6:	b480      	push	{r7}
 80058b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80058ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058c6:	f043 0301 	orr.w	r3, r3, #1
 80058ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80058ce:	bf00      	nop
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <LL_RCC_LSE_Disable>:
{
 80058d8:	b480      	push	{r7}
 80058da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80058dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80058f0:	bf00      	nop
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <LL_RCC_LSE_EnableBypass>:
{
 80058fa:	b480      	push	{r7}
 80058fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80058fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005906:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800590a:	f043 0304 	orr.w	r3, r3, #4
 800590e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005912:	bf00      	nop
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <LL_RCC_LSE_DisableBypass>:
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005928:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800592c:	f023 0304 	bic.w	r3, r3, #4
 8005930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <LL_RCC_LSE_IsReady>:
{
 800593e:	b480      	push	{r7}
 8005940:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b02      	cmp	r3, #2
 8005950:	d101      	bne.n	8005956 <LL_RCC_LSE_IsReady+0x18>
 8005952:	2301      	movs	r3, #1
 8005954:	e000      	b.n	8005958 <LL_RCC_LSE_IsReady+0x1a>
 8005956:	2300      	movs	r3, #0
}
 8005958:	4618      	mov	r0, r3
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <LL_RCC_LSI1_Enable>:
{
 8005962:	b480      	push	{r7}
 8005964:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800596a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800596e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800597a:	bf00      	nop
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <LL_RCC_LSI1_Disable>:
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005990:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005994:	f023 0301 	bic.w	r3, r3, #1
 8005998:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800599c:	bf00      	nop
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <LL_RCC_LSI1_IsReady>:
{
 80059a6:	b480      	push	{r7}
 80059a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80059aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d101      	bne.n	80059be <LL_RCC_LSI1_IsReady+0x18>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <LL_RCC_LSI1_IsReady+0x1a>
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <LL_RCC_LSI2_Enable>:
{
 80059ca:	b480      	push	{r7}
 80059cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80059ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059da:	f043 0304 	orr.w	r3, r3, #4
 80059de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80059e2:	bf00      	nop
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <LL_RCC_LSI2_Disable>:
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80059f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059fc:	f023 0304 	bic.w	r3, r3, #4
 8005a00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005a04:	bf00      	nop
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <LL_RCC_LSI2_IsReady>:
{
 8005a0e:	b480      	push	{r7}
 8005a10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005a12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	d101      	bne.n	8005a26 <LL_RCC_LSI2_IsReady+0x18>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e000      	b.n	8005a28 <LL_RCC_LSI2_IsReady+0x1a>
 8005a26:	2300      	movs	r3, #0
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <LL_RCC_LSI2_SetTrimming>:
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	021b      	lsls	r3, r3, #8
 8005a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <LL_RCC_MSI_Enable>:
{
 8005a60:	b480      	push	{r7}
 8005a62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a6e:	f043 0301 	orr.w	r3, r3, #1
 8005a72:	6013      	str	r3, [r2, #0]
}
 8005a74:	bf00      	nop
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <LL_RCC_MSI_Disable>:
{
 8005a7e:	b480      	push	{r7}
 8005a80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a8c:	f023 0301 	bic.w	r3, r3, #1
 8005a90:	6013      	str	r3, [r2, #0]
}
 8005a92:	bf00      	nop
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <LL_RCC_MSI_IsReady>:
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f003 0302 	and.w	r3, r3, #2
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d101      	bne.n	8005ab2 <LL_RCC_MSI_IsReady+0x16>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e000      	b.n	8005ab4 <LL_RCC_MSI_IsReady+0x18>
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <LL_RCC_MSI_SetRange>:
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ad0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	600b      	str	r3, [r1, #0]
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <LL_RCC_MSI_GetRange>:
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005af6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2bb0      	cmp	r3, #176	; 0xb0
 8005afc:	d901      	bls.n	8005b02 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005afe:	23b0      	movs	r3, #176	; 0xb0
 8005b00:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005b02:	687b      	ldr	r3, [r7, #4]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	021b      	lsls	r3, r3, #8
 8005b26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	604b      	str	r3, [r1, #4]
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <LL_RCC_SetSysClkSource>:
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f023 0203 	bic.w	r2, r3, #3
 8005b4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	608b      	str	r3, [r1, #8]
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <LL_RCC_GetSysClkSource>:
{
 8005b62:	b480      	push	{r7}
 8005b64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f003 030c 	and.w	r3, r3, #12
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <LL_RCC_SetAHBPrescaler>:
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b083      	sub	sp, #12
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	608b      	str	r3, [r1, #8]
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005bb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <LL_RCC_SetAHB4Prescaler>:
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bda:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005bde:	f023 020f 	bic.w	r2, r3, #15
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	091b      	lsrs	r3, r3, #4
 8005be6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <LL_RCC_SetAPB1Prescaler>:
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	608b      	str	r3, [r1, #8]
}
 8005c18:	bf00      	nop
 8005c1a:	370c      	adds	r7, #12
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <LL_RCC_SetAPB2Prescaler>:
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	608b      	str	r3, [r1, #8]
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <LL_RCC_GetAHBPrescaler>:
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <LL_RCC_GetAHB4Prescaler>:
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c70:	011b      	lsls	r3, r3, #4
 8005c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <LL_RCC_GetAPB1Prescaler>:
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <LL_RCC_GetAPB2Prescaler>:
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cc2:	6013      	str	r3, [r2, #0]
}
 8005cc4:	bf00      	nop
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ce0:	6013      	str	r3, [r2, #0]
}
 8005ce2:	bf00      	nop
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005cec:	b480      	push	{r7}
 8005cee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005cfe:	d101      	bne.n	8005d04 <LL_RCC_PLL_IsReady+0x18>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <LL_RCC_PLL_IsReady+0x1a>
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	0a1b      	lsrs	r3, r3, #8
 8005d1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005d42:	b480      	push	{r7}
 8005d44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr

08005d5a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f003 0303 	and.w	r3, r3, #3
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005d72:	b480      	push	{r7}
 8005d74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d84:	d101      	bne.n	8005d8a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e000      	b.n	8005d8c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005d96:	b480      	push	{r7}
 8005d98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005da6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005daa:	d101      	bne.n	8005db0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005dac:	2301      	movs	r3, #1
 8005dae:	e000      	b.n	8005db2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005db0:	2300      	movs	r3, #0
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dd0:	d101      	bne.n	8005dd6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e000      	b.n	8005dd8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005de2:	b480      	push	{r7}
 8005de4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005df4:	d101      	bne.n	8005dfa <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005df6:	2301      	movs	r3, #1
 8005df8:	e000      	b.n	8005dfc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005e06:	b480      	push	{r7}
 8005e08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e18:	d101      	bne.n	8005e1e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e000      	b.n	8005e20 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
	...

08005e2c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e2c:	b590      	push	{r4, r7, lr}
 8005e2e:	b08d      	sub	sp, #52	; 0x34
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e324      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0320 	and.w	r3, r3, #32
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 808d 	beq.w	8005f66 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e4c:	f7ff fe89 	bl	8005b62 <LL_RCC_GetSysClkSource>
 8005e50:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e52:	f7ff ff82 	bl	8005d5a <LL_RCC_PLL_GetMainSource>
 8005e56:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d005      	beq.n	8005e6a <HAL_RCC_OscConfig+0x3e>
 8005e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e60:	2b0c      	cmp	r3, #12
 8005e62:	d147      	bne.n	8005ef4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d144      	bne.n	8005ef4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e308      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005e7a:	f7ff fe34 	bl	8005ae6 <LL_RCC_MSI_GetRange>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	429c      	cmp	r4, r3
 8005e82:	d914      	bls.n	8005eae <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 fcf1 	bl	8006870 <RCC_SetFlashLatencyFromMSIRange>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e2f7      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7ff fe0e 	bl	8005abe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7ff fe32 	bl	8005b10 <LL_RCC_MSI_SetCalibTrimming>
 8005eac:	e013      	b.n	8005ed6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff fe03 	bl	8005abe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7ff fe27 	bl	8005b10 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fcd2 	bl	8006870 <RCC_SetFlashLatencyFromMSIRange>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e2d8      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005ed6:	f000 fc8b 	bl	80067f0 <HAL_RCC_GetHCLKFreq>
 8005eda:	4603      	mov	r3, r0
 8005edc:	4aa4      	ldr	r2, [pc, #656]	; (8006170 <HAL_RCC_OscConfig+0x344>)
 8005ede:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ee0:	4ba4      	ldr	r3, [pc, #656]	; (8006174 <HAL_RCC_OscConfig+0x348>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fe fc97 	bl	8004818 <HAL_InitTick>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d039      	beq.n	8005f64 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e2c9      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01e      	beq.n	8005f3a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005efc:	f7ff fdb0 	bl	8005a60 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f00:	f7fe fcd8 	bl	80048b4 <HAL_GetTick>
 8005f04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f08:	f7fe fcd4 	bl	80048b4 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e2b6      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005f1a:	f7ff fdbf 	bl	8005a9c <LL_RCC_MSI_IsReady>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0f1      	beq.n	8005f08 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff fdc8 	bl	8005abe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fdec 	bl	8005b10 <LL_RCC_MSI_SetCalibTrimming>
 8005f38:	e015      	b.n	8005f66 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005f3a:	f7ff fda0 	bl	8005a7e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005f3e:	f7fe fcb9 	bl	80048b4 <HAL_GetTick>
 8005f42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005f44:	e008      	b.n	8005f58 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005f46:	f7fe fcb5 	bl	80048b4 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e297      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005f58:	f7ff fda0 	bl	8005a9c <LL_RCC_MSI_IsReady>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f1      	bne.n	8005f46 <HAL_RCC_OscConfig+0x11a>
 8005f62:	e000      	b.n	8005f66 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005f64:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d047      	beq.n	8006002 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f72:	f7ff fdf6 	bl	8005b62 <LL_RCC_GetSysClkSource>
 8005f76:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f78:	f7ff feef 	bl	8005d5a <LL_RCC_PLL_GetMainSource>
 8005f7c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d005      	beq.n	8005f90 <HAL_RCC_OscConfig+0x164>
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	2b0c      	cmp	r3, #12
 8005f88:	d108      	bne.n	8005f9c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	2b03      	cmp	r3, #3
 8005f8e:	d105      	bne.n	8005f9c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d134      	bne.n	8006002 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e275      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa4:	d102      	bne.n	8005fac <HAL_RCC_OscConfig+0x180>
 8005fa6:	f7ff fc11 	bl	80057cc <LL_RCC_HSE_Enable>
 8005faa:	e001      	b.n	8005fb0 <HAL_RCC_OscConfig+0x184>
 8005fac:	f7ff fc1d 	bl	80057ea <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d012      	beq.n	8005fde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb8:	f7fe fc7c 	bl	80048b4 <HAL_GetTick>
 8005fbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fc0:	f7fe fc78 	bl	80048b4 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b64      	cmp	r3, #100	; 0x64
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e25a      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005fd2:	f7ff fc19 	bl	8005808 <LL_RCC_HSE_IsReady>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0f1      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x194>
 8005fdc:	e011      	b.n	8006002 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fde:	f7fe fc69 	bl	80048b4 <HAL_GetTick>
 8005fe2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005fe4:	e008      	b.n	8005ff8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fe6:	f7fe fc65 	bl	80048b4 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b64      	cmp	r3, #100	; 0x64
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e247      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005ff8:	f7ff fc06 	bl	8005808 <LL_RCC_HSE_IsReady>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f1      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d04c      	beq.n	80060a8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800600e:	f7ff fda8 	bl	8005b62 <LL_RCC_GetSysClkSource>
 8006012:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006014:	f7ff fea1 	bl	8005d5a <LL_RCC_PLL_GetMainSource>
 8006018:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	2b04      	cmp	r3, #4
 800601e:	d005      	beq.n	800602c <HAL_RCC_OscConfig+0x200>
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2b0c      	cmp	r3, #12
 8006024:	d10e      	bne.n	8006044 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	2b02      	cmp	r3, #2
 800602a:	d10b      	bne.n	8006044 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d101      	bne.n	8006038 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	e227      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	4618      	mov	r0, r3
 800603e:	f7ff fc25 	bl	800588c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006042:	e031      	b.n	80060a8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d019      	beq.n	8006080 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800604c:	f7ff fbee 	bl	800582c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006050:	f7fe fc30 	bl	80048b4 <HAL_GetTick>
 8006054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006058:	f7fe fc2c 	bl	80048b4 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e20e      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 800606a:	f7ff fbfd 	bl	8005868 <LL_RCC_HSI_IsReady>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0f1      	beq.n	8006058 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff fc07 	bl	800588c <LL_RCC_HSI_SetCalibTrimming>
 800607e:	e013      	b.n	80060a8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006080:	f7ff fbe3 	bl	800584a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006084:	f7fe fc16 	bl	80048b4 <HAL_GetTick>
 8006088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800608a:	e008      	b.n	800609e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800608c:	f7fe fc12 	bl	80048b4 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b02      	cmp	r3, #2
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e1f4      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 800609e:	f7ff fbe3 	bl	8005868 <LL_RCC_HSI_IsReady>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1f1      	bne.n	800608c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d106      	bne.n	80060c2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 80a3 	beq.w	8006208 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d076      	beq.n	80061b8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0310 	and.w	r3, r3, #16
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d046      	beq.n	8006164 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80060d6:	f7ff fc66 	bl	80059a6 <LL_RCC_LSI1_IsReady>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d113      	bne.n	8006108 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80060e0:	f7ff fc3f 	bl	8005962 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060e4:	f7fe fbe6 	bl	80048b4 <HAL_GetTick>
 80060e8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80060ea:	e008      	b.n	80060fe <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80060ec:	f7fe fbe2 	bl	80048b4 <HAL_GetTick>
 80060f0:	4602      	mov	r2, r0
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d901      	bls.n	80060fe <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e1c4      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80060fe:	f7ff fc52 	bl	80059a6 <LL_RCC_LSI1_IsReady>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0f1      	beq.n	80060ec <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006108:	f7ff fc5f 	bl	80059ca <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800610c:	f7fe fbd2 	bl	80048b4 <HAL_GetTick>
 8006110:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006112:	e008      	b.n	8006126 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006114:	f7fe fbce 	bl	80048b4 <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b03      	cmp	r3, #3
 8006120:	d901      	bls.n	8006126 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e1b0      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006126:	f7ff fc72 	bl	8005a0e <LL_RCC_LSI2_IsReady>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0f1      	beq.n	8006114 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	4618      	mov	r0, r3
 8006136:	f7ff fc7c 	bl	8005a32 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800613a:	f7ff fc23 	bl	8005984 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613e:	f7fe fbb9 	bl	80048b4 <HAL_GetTick>
 8006142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006144:	e008      	b.n	8006158 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006146:	f7fe fbb5 	bl	80048b4 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e197      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8006158:	f7ff fc25 	bl	80059a6 <LL_RCC_LSI1_IsReady>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1f1      	bne.n	8006146 <HAL_RCC_OscConfig+0x31a>
 8006162:	e051      	b.n	8006208 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8006164:	f7ff fbfd 	bl	8005962 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006168:	f7fe fba4 	bl	80048b4 <HAL_GetTick>
 800616c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800616e:	e00c      	b.n	800618a <HAL_RCC_OscConfig+0x35e>
 8006170:	20000050 	.word	0x20000050
 8006174:	20000054 	.word	0x20000054
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006178:	f7fe fb9c 	bl	80048b4 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e17e      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800618a:	f7ff fc0c 	bl	80059a6 <LL_RCC_LSI1_IsReady>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d0f1      	beq.n	8006178 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006194:	f7ff fc2a 	bl	80059ec <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800619a:	f7fe fb8b 	bl	80048b4 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e16d      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80061ac:	f7ff fc2f 	bl	8005a0e <LL_RCC_LSI2_IsReady>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1f1      	bne.n	800619a <HAL_RCC_OscConfig+0x36e>
 80061b6:	e027      	b.n	8006208 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80061b8:	f7ff fc18 	bl	80059ec <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061bc:	f7fe fb7a 	bl	80048b4 <HAL_GetTick>
 80061c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80061c2:	e008      	b.n	80061d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80061c4:	f7fe fb76 	bl	80048b4 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e158      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80061d6:	f7ff fc1a 	bl	8005a0e <LL_RCC_LSI2_IsReady>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1f1      	bne.n	80061c4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80061e0:	f7ff fbd0 	bl	8005984 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061e4:	f7fe fb66 	bl	80048b4 <HAL_GetTick>
 80061e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80061ea:	e008      	b.n	80061fe <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80061ec:	f7fe fb62 	bl	80048b4 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d901      	bls.n	80061fe <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e144      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80061fe:	f7ff fbd2 	bl	80059a6 <LL_RCC_LSI1_IsReady>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1f1      	bne.n	80061ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b00      	cmp	r3, #0
 8006212:	d05b      	beq.n	80062cc <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006214:	4b9e      	ldr	r3, [pc, #632]	; (8006490 <HAL_RCC_OscConfig+0x664>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621c:	2b00      	cmp	r3, #0
 800621e:	d114      	bne.n	800624a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006220:	f7ff fa9c 	bl	800575c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006224:	f7fe fb46 	bl	80048b4 <HAL_GetTick>
 8006228:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800622a:	e008      	b.n	800623e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800622c:	f7fe fb42 	bl	80048b4 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b02      	cmp	r3, #2
 8006238:	d901      	bls.n	800623e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e124      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800623e:	4b94      	ldr	r3, [pc, #592]	; (8006490 <HAL_RCC_OscConfig+0x664>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006246:	2b00      	cmp	r3, #0
 8006248:	d0f0      	beq.n	800622c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d102      	bne.n	8006258 <HAL_RCC_OscConfig+0x42c>
 8006252:	f7ff fb30 	bl	80058b6 <LL_RCC_LSE_Enable>
 8006256:	e00c      	b.n	8006272 <HAL_RCC_OscConfig+0x446>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	2b05      	cmp	r3, #5
 800625e:	d104      	bne.n	800626a <HAL_RCC_OscConfig+0x43e>
 8006260:	f7ff fb4b 	bl	80058fa <LL_RCC_LSE_EnableBypass>
 8006264:	f7ff fb27 	bl	80058b6 <LL_RCC_LSE_Enable>
 8006268:	e003      	b.n	8006272 <HAL_RCC_OscConfig+0x446>
 800626a:	f7ff fb35 	bl	80058d8 <LL_RCC_LSE_Disable>
 800626e:	f7ff fb55 	bl	800591c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d014      	beq.n	80062a4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800627a:	f7fe fb1b 	bl	80048b4 <HAL_GetTick>
 800627e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006280:	e00a      	b.n	8006298 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006282:	f7fe fb17 	bl	80048b4 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006290:	4293      	cmp	r3, r2
 8006292:	d901      	bls.n	8006298 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e0f7      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006298:	f7ff fb51 	bl	800593e <LL_RCC_LSE_IsReady>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0ef      	beq.n	8006282 <HAL_RCC_OscConfig+0x456>
 80062a2:	e013      	b.n	80062cc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a4:	f7fe fb06 	bl	80048b4 <HAL_GetTick>
 80062a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80062aa:	e00a      	b.n	80062c2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ac:	f7fe fb02 	bl	80048b4 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e0e2      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 80062c2:	f7ff fb3c 	bl	800593e <LL_RCC_LSE_IsReady>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1ef      	bne.n	80062ac <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 80d8 	beq.w	8006486 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062d6:	f7ff fc44 	bl	8005b62 <LL_RCC_GetSysClkSource>
 80062da:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80062dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e8:	2b02      	cmp	r3, #2
 80062ea:	f040 80a6 	bne.w	800643a <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f003 0203 	and.w	r2, r3, #3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d123      	bne.n	8006344 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006306:	429a      	cmp	r2, r3
 8006308:	d11c      	bne.n	8006344 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	0a1b      	lsrs	r3, r3, #8
 800630e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006316:	429a      	cmp	r2, r3
 8006318:	d114      	bne.n	8006344 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006324:	429a      	cmp	r2, r3
 8006326:	d10d      	bne.n	8006344 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006332:	429a      	cmp	r2, r3
 8006334:	d106      	bne.n	8006344 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006340:	429a      	cmp	r2, r3
 8006342:	d054      	beq.n	80063ee <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	2b0c      	cmp	r3, #12
 8006348:	d04f      	beq.n	80063ea <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800634a:	f7ff fcc0 	bl	8005cce <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800634e:	f7fe fab1 	bl	80048b4 <HAL_GetTick>
 8006352:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006354:	e008      	b.n	8006368 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006356:	f7fe faad 	bl	80048b4 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	2b02      	cmp	r3, #2
 8006362:	d901      	bls.n	8006368 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e08f      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1ef      	bne.n	8006356 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	4b45      	ldr	r3, [pc, #276]	; (8006494 <HAL_RCC_OscConfig+0x668>)
 800637e:	4013      	ands	r3, r2
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006388:	4311      	orrs	r1, r2
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800638e:	0212      	lsls	r2, r2, #8
 8006390:	4311      	orrs	r1, r2
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006396:	4311      	orrs	r1, r2
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800639c:	4311      	orrs	r1, r2
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80063a2:	430a      	orrs	r2, r1
 80063a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80063ac:	f7ff fc80 	bl	8005cb0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80063c0:	f7fe fa78 	bl	80048b4 <HAL_GetTick>
 80063c4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063c6:	e008      	b.n	80063da <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c8:	f7fe fa74 	bl	80048b4 <HAL_GetTick>
 80063cc:	4602      	mov	r2, r0
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d901      	bls.n	80063da <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e056      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d0ef      	beq.n	80063c8 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063e8:	e04d      	b.n	8006486 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e04c      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d144      	bne.n	8006486 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80063fc:	f7ff fc58 	bl	8005cb0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800640a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800640e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006410:	f7fe fa50 	bl	80048b4 <HAL_GetTick>
 8006414:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006416:	e008      	b.n	800642a <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006418:	f7fe fa4c 	bl	80048b4 <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	2b02      	cmp	r3, #2
 8006424:	d901      	bls.n	800642a <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e02e      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800642a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d0ef      	beq.n	8006418 <HAL_RCC_OscConfig+0x5ec>
 8006438:	e025      	b.n	8006486 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	2b0c      	cmp	r3, #12
 800643e:	d020      	beq.n	8006482 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006440:	f7ff fc45 	bl	8005cce <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006444:	f7fe fa36 	bl	80048b4 <HAL_GetTick>
 8006448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800644c:	f7fe fa32 	bl	80048b4 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e014      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800645e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1ef      	bne.n	800644c <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 800646c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006476:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800647a:	f023 0303 	bic.w	r3, r3, #3
 800647e:	60d3      	str	r3, [r2, #12]
 8006480:	e001      	b.n	8006486 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e000      	b.n	8006488 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3734      	adds	r7, #52	; 0x34
 800648c:	46bd      	mov	sp, r7
 800648e:	bd90      	pop	{r4, r7, pc}
 8006490:	58000400 	.word	0x58000400
 8006494:	11c1808c 	.word	0x11c1808c

08006498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e12d      	b.n	8006708 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064ac:	4b98      	ldr	r3, [pc, #608]	; (8006710 <HAL_RCC_ClockConfig+0x278>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d91b      	bls.n	80064f2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ba:	4b95      	ldr	r3, [pc, #596]	; (8006710 <HAL_RCC_ClockConfig+0x278>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f023 0207 	bic.w	r2, r3, #7
 80064c2:	4993      	ldr	r1, [pc, #588]	; (8006710 <HAL_RCC_ClockConfig+0x278>)
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ca:	f7fe f9f3 	bl	80048b4 <HAL_GetTick>
 80064ce:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064d0:	e008      	b.n	80064e4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80064d2:	f7fe f9ef 	bl	80048b4 <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e111      	b.n	8006708 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064e4:	4b8a      	ldr	r3, [pc, #552]	; (8006710 <HAL_RCC_ClockConfig+0x278>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d1ef      	bne.n	80064d2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d016      	beq.n	800652c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	4618      	mov	r0, r3
 8006504:	f7ff fb39 	bl	8005b7a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006508:	f7fe f9d4 	bl	80048b4 <HAL_GetTick>
 800650c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800650e:	e008      	b.n	8006522 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006510:	f7fe f9d0 	bl	80048b4 <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e0f2      	b.n	8006708 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006522:	f7ff fc26 	bl	8005d72 <LL_RCC_IsActiveFlag_HPRE>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0f1      	beq.n	8006510 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0320 	and.w	r3, r3, #32
 8006534:	2b00      	cmp	r3, #0
 8006536:	d016      	beq.n	8006566 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	4618      	mov	r0, r3
 800653e:	f7ff fb30 	bl	8005ba2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006542:	f7fe f9b7 	bl	80048b4 <HAL_GetTick>
 8006546:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006548:	e008      	b.n	800655c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800654a:	f7fe f9b3 	bl	80048b4 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	2b02      	cmp	r3, #2
 8006556:	d901      	bls.n	800655c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006558:	2303      	movs	r3, #3
 800655a:	e0d5      	b.n	8006708 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800655c:	f7ff fc1b 	bl	8005d96 <LL_RCC_IsActiveFlag_C2HPRE>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d0f1      	beq.n	800654a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656e:	2b00      	cmp	r3, #0
 8006570:	d016      	beq.n	80065a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff fb29 	bl	8005bce <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800657c:	f7fe f99a 	bl	80048b4 <HAL_GetTick>
 8006580:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006582:	e008      	b.n	8006596 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006584:	f7fe f996 	bl	80048b4 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b02      	cmp	r3, #2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e0b8      	b.n	8006708 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006596:	f7ff fc11 	bl	8005dbc <LL_RCC_IsActiveFlag_SHDHPRE>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0f1      	beq.n	8006584 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d016      	beq.n	80065da <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff fb23 	bl	8005bfc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80065b6:	f7fe f97d 	bl	80048b4 <HAL_GetTick>
 80065ba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80065bc:	e008      	b.n	80065d0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065be:	f7fe f979 	bl	80048b4 <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d901      	bls.n	80065d0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80065cc:	2303      	movs	r3, #3
 80065ce:	e09b      	b.n	8006708 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80065d0:	f7ff fc07 	bl	8005de2 <LL_RCC_IsActiveFlag_PPRE1>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d0f1      	beq.n	80065be <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0308 	and.w	r3, r3, #8
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d017      	beq.n	8006616 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7ff fb19 	bl	8005c24 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80065f2:	f7fe f95f 	bl	80048b4 <HAL_GetTick>
 80065f6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80065f8:	e008      	b.n	800660c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80065fa:	f7fe f95b 	bl	80048b4 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b02      	cmp	r3, #2
 8006606:	d901      	bls.n	800660c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e07d      	b.n	8006708 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800660c:	f7ff fbfb 	bl	8005e06 <LL_RCC_IsActiveFlag_PPRE2>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0f1      	beq.n	80065fa <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d043      	beq.n	80066aa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2b02      	cmp	r3, #2
 8006628:	d106      	bne.n	8006638 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800662a:	f7ff f8ed 	bl	8005808 <LL_RCC_HSE_IsReady>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d11e      	bne.n	8006672 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e067      	b.n	8006708 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	2b03      	cmp	r3, #3
 800663e:	d106      	bne.n	800664e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006640:	f7ff fb54 	bl	8005cec <LL_RCC_PLL_IsReady>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d113      	bne.n	8006672 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e05c      	b.n	8006708 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d106      	bne.n	8006664 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006656:	f7ff fa21 	bl	8005a9c <LL_RCC_MSI_IsReady>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d108      	bne.n	8006672 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e051      	b.n	8006708 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006664:	f7ff f900 	bl	8005868 <LL_RCC_HSI_IsReady>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e04a      	b.n	8006708 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff fa5f 	bl	8005b3a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800667c:	f7fe f91a 	bl	80048b4 <HAL_GetTick>
 8006680:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006682:	e00a      	b.n	800669a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006684:	f7fe f916 	bl	80048b4 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006692:	4293      	cmp	r3, r2
 8006694:	d901      	bls.n	800669a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e036      	b.n	8006708 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800669a:	f7ff fa62 	bl	8005b62 <LL_RCC_GetSysClkSource>
 800669e:	4602      	mov	r2, r0
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d1ec      	bne.n	8006684 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066aa:	4b19      	ldr	r3, [pc, #100]	; (8006710 <HAL_RCC_ClockConfig+0x278>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d21b      	bcs.n	80066f0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066b8:	4b15      	ldr	r3, [pc, #84]	; (8006710 <HAL_RCC_ClockConfig+0x278>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f023 0207 	bic.w	r2, r3, #7
 80066c0:	4913      	ldr	r1, [pc, #76]	; (8006710 <HAL_RCC_ClockConfig+0x278>)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066c8:	f7fe f8f4 	bl	80048b4 <HAL_GetTick>
 80066cc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80066d0:	f7fe f8f0 	bl	80048b4 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e012      	b.n	8006708 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e2:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <HAL_RCC_ClockConfig+0x278>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d1ef      	bne.n	80066d0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80066f0:	f000 f87e 	bl	80067f0 <HAL_RCC_GetHCLKFreq>
 80066f4:	4603      	mov	r3, r0
 80066f6:	4a07      	ldr	r2, [pc, #28]	; (8006714 <HAL_RCC_ClockConfig+0x27c>)
 80066f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80066fa:	f7fe f8e7 	bl	80048cc <HAL_GetTickPrio>
 80066fe:	4603      	mov	r3, r0
 8006700:	4618      	mov	r0, r3
 8006702:	f7fe f889 	bl	8004818 <HAL_InitTick>
 8006706:	4603      	mov	r3, r0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	58004000 	.word	0x58004000
 8006714:	20000050 	.word	0x20000050

08006718 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006718:	b590      	push	{r4, r7, lr}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800671e:	f7ff fa20 	bl	8005b62 <LL_RCC_GetSysClkSource>
 8006722:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10a      	bne.n	8006740 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800672a:	f7ff f9dc 	bl	8005ae6 <LL_RCC_MSI_GetRange>
 800672e:	4603      	mov	r3, r0
 8006730:	091b      	lsrs	r3, r3, #4
 8006732:	f003 030f 	and.w	r3, r3, #15
 8006736:	4a2b      	ldr	r2, [pc, #172]	; (80067e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	e04b      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b04      	cmp	r3, #4
 8006744:	d102      	bne.n	800674c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006746:	4b28      	ldr	r3, [pc, #160]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006748:	60fb      	str	r3, [r7, #12]
 800674a:	e045      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b08      	cmp	r3, #8
 8006750:	d10a      	bne.n	8006768 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006752:	f7ff f829 	bl	80057a8 <LL_RCC_HSE_IsEnabledDiv2>
 8006756:	4603      	mov	r3, r0
 8006758:	2b01      	cmp	r3, #1
 800675a:	d102      	bne.n	8006762 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800675c:	4b22      	ldr	r3, [pc, #136]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800675e:	60fb      	str	r3, [r7, #12]
 8006760:	e03a      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006762:	4b22      	ldr	r3, [pc, #136]	; (80067ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8006764:	60fb      	str	r3, [r7, #12]
 8006766:	e037      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006768:	f7ff faf7 	bl	8005d5a <LL_RCC_PLL_GetMainSource>
 800676c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b02      	cmp	r3, #2
 8006772:	d003      	beq.n	800677c <HAL_RCC_GetSysClockFreq+0x64>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	2b03      	cmp	r3, #3
 8006778:	d003      	beq.n	8006782 <HAL_RCC_GetSysClockFreq+0x6a>
 800677a:	e00d      	b.n	8006798 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800677c:	4b1a      	ldr	r3, [pc, #104]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800677e:	60bb      	str	r3, [r7, #8]
        break;
 8006780:	e015      	b.n	80067ae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006782:	f7ff f811 	bl	80057a8 <LL_RCC_HSE_IsEnabledDiv2>
 8006786:	4603      	mov	r3, r0
 8006788:	2b01      	cmp	r3, #1
 800678a:	d102      	bne.n	8006792 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800678c:	4b16      	ldr	r3, [pc, #88]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800678e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006790:	e00d      	b.n	80067ae <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006792:	4b16      	ldr	r3, [pc, #88]	; (80067ec <HAL_RCC_GetSysClockFreq+0xd4>)
 8006794:	60bb      	str	r3, [r7, #8]
        break;
 8006796:	e00a      	b.n	80067ae <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006798:	f7ff f9a5 	bl	8005ae6 <LL_RCC_MSI_GetRange>
 800679c:	4603      	mov	r3, r0
 800679e:	091b      	lsrs	r3, r3, #4
 80067a0:	f003 030f 	and.w	r3, r3, #15
 80067a4:	4a0f      	ldr	r2, [pc, #60]	; (80067e4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80067a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067aa:	60bb      	str	r3, [r7, #8]
        break;
 80067ac:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80067ae:	f7ff faaf 	bl	8005d10 <LL_RCC_PLL_GetN>
 80067b2:	4602      	mov	r2, r0
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	fb03 f402 	mul.w	r4, r3, r2
 80067ba:	f7ff fac2 	bl	8005d42 <LL_RCC_PLL_GetDivider>
 80067be:	4603      	mov	r3, r0
 80067c0:	091b      	lsrs	r3, r3, #4
 80067c2:	3301      	adds	r3, #1
 80067c4:	fbb4 f4f3 	udiv	r4, r4, r3
 80067c8:	f7ff faaf 	bl	8005d2a <LL_RCC_PLL_GetR>
 80067cc:	4603      	mov	r3, r0
 80067ce:	0f5b      	lsrs	r3, r3, #29
 80067d0:	3301      	adds	r3, #1
 80067d2:	fbb4 f3f3 	udiv	r3, r4, r3
 80067d6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80067d8:	68fb      	ldr	r3, [r7, #12]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd90      	pop	{r4, r7, pc}
 80067e2:	bf00      	nop
 80067e4:	08010dac 	.word	0x08010dac
 80067e8:	00f42400 	.word	0x00f42400
 80067ec:	01e84800 	.word	0x01e84800

080067f0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067f0:	b598      	push	{r3, r4, r7, lr}
 80067f2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80067f4:	f7ff ff90 	bl	8006718 <HAL_RCC_GetSysClockFreq>
 80067f8:	4604      	mov	r4, r0
 80067fa:	f7ff fa27 	bl	8005c4c <LL_RCC_GetAHBPrescaler>
 80067fe:	4603      	mov	r3, r0
 8006800:	091b      	lsrs	r3, r3, #4
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	4a03      	ldr	r2, [pc, #12]	; (8006814 <HAL_RCC_GetHCLKFreq+0x24>)
 8006808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800680c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006810:	4618      	mov	r0, r3
 8006812:	bd98      	pop	{r3, r4, r7, pc}
 8006814:	08010d4c 	.word	0x08010d4c

08006818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006818:	b598      	push	{r3, r4, r7, lr}
 800681a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800681c:	f7ff ffe8 	bl	80067f0 <HAL_RCC_GetHCLKFreq>
 8006820:	4604      	mov	r4, r0
 8006822:	f7ff fa2d 	bl	8005c80 <LL_RCC_GetAPB1Prescaler>
 8006826:	4603      	mov	r3, r0
 8006828:	0a1b      	lsrs	r3, r3, #8
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	4a04      	ldr	r2, [pc, #16]	; (8006840 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006834:	f003 031f 	and.w	r3, r3, #31
 8006838:	fa24 f303 	lsr.w	r3, r4, r3
}
 800683c:	4618      	mov	r0, r3
 800683e:	bd98      	pop	{r3, r4, r7, pc}
 8006840:	08010d8c 	.word	0x08010d8c

08006844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006844:	b598      	push	{r3, r4, r7, lr}
 8006846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006848:	f7ff ffd2 	bl	80067f0 <HAL_RCC_GetHCLKFreq>
 800684c:	4604      	mov	r4, r0
 800684e:	f7ff fa23 	bl	8005c98 <LL_RCC_GetAPB2Prescaler>
 8006852:	4603      	mov	r3, r0
 8006854:	0adb      	lsrs	r3, r3, #11
 8006856:	f003 0307 	and.w	r3, r3, #7
 800685a:	4a04      	ldr	r2, [pc, #16]	; (800686c <HAL_RCC_GetPCLK2Freq+0x28>)
 800685c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006860:	f003 031f 	and.w	r3, r3, #31
 8006864:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006868:	4618      	mov	r0, r3
 800686a:	bd98      	pop	{r3, r4, r7, pc}
 800686c:	08010d8c 	.word	0x08010d8c

08006870 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2bb0      	cmp	r3, #176	; 0xb0
 800687c:	d903      	bls.n	8006886 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800687e:	4b14      	ldr	r3, [pc, #80]	; (80068d0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8006880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	e007      	b.n	8006896 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	091b      	lsrs	r3, r3, #4
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	4a10      	ldr	r2, [pc, #64]	; (80068d0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8006890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006894:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006896:	f7ff f9e5 	bl	8005c64 <LL_RCC_GetAHB4Prescaler>
 800689a:	4603      	mov	r3, r0
 800689c:	091b      	lsrs	r3, r3, #4
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	4a0c      	ldr	r2, [pc, #48]	; (80068d4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80068a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ae:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	4a09      	ldr	r2, [pc, #36]	; (80068d8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80068b4:	fba2 2303 	umull	r2, r3, r2, r3
 80068b8:	0c9b      	lsrs	r3, r3, #18
 80068ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 f80c 	bl	80068dc <RCC_SetFlashLatency>
 80068c4:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	08010dac 	.word	0x08010dac
 80068d4:	08010d4c 	.word	0x08010d4c
 80068d8:	431bde83 	.word	0x431bde83

080068dc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80068dc:	b590      	push	{r4, r7, lr}
 80068de:	b08f      	sub	sp, #60	; 0x3c
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80068e6:	4b24      	ldr	r3, [pc, #144]	; (8006978 <RCC_SetFlashLatency+0x9c>)
 80068e8:	f107 041c 	add.w	r4, r7, #28
 80068ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80068f2:	4b22      	ldr	r3, [pc, #136]	; (800697c <RCC_SetFlashLatency+0xa0>)
 80068f4:	f107 040c 	add.w	r4, r7, #12
 80068f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80068fe:	2300      	movs	r3, #0
 8006900:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006902:	2300      	movs	r3, #0
 8006904:	633b      	str	r3, [r7, #48]	; 0x30
 8006906:	e013      	b.n	8006930 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	3338      	adds	r3, #56	; 0x38
 800690e:	443b      	add	r3, r7
 8006910:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	429a      	cmp	r2, r3
 8006918:	d807      	bhi.n	800692a <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	3338      	adds	r3, #56	; 0x38
 8006920:	443b      	add	r3, r7
 8006922:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006926:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8006928:	e005      	b.n	8006936 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	3301      	adds	r3, #1
 800692e:	633b      	str	r3, [r7, #48]	; 0x30
 8006930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006932:	2b03      	cmp	r3, #3
 8006934:	d9e8      	bls.n	8006908 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006936:	4b12      	ldr	r3, [pc, #72]	; (8006980 <RCC_SetFlashLatency+0xa4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f023 0207 	bic.w	r2, r3, #7
 800693e:	4910      	ldr	r1, [pc, #64]	; (8006980 <RCC_SetFlashLatency+0xa4>)
 8006940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006942:	4313      	orrs	r3, r2
 8006944:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006946:	f7fd ffb5 	bl	80048b4 <HAL_GetTick>
 800694a:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800694c:	e008      	b.n	8006960 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800694e:	f7fd ffb1 	bl	80048b4 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d901      	bls.n	8006960 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e007      	b.n	8006970 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006960:	4b07      	ldr	r3, [pc, #28]	; (8006980 <RCC_SetFlashLatency+0xa4>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0307 	and.w	r3, r3, #7
 8006968:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800696a:	429a      	cmp	r2, r3
 800696c:	d1ef      	bne.n	800694e <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	373c      	adds	r7, #60	; 0x3c
 8006974:	46bd      	mov	sp, r7
 8006976:	bd90      	pop	{r4, r7, pc}
 8006978:	08010b84 	.word	0x08010b84
 800697c:	08010b94 	.word	0x08010b94
 8006980:	58004000 	.word	0x58004000

08006984 <LL_RCC_LSE_IsEnabled>:
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800698c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b01      	cmp	r3, #1
 8006996:	d101      	bne.n	800699c <LL_RCC_LSE_IsEnabled+0x18>
 8006998:	2301      	movs	r3, #1
 800699a:	e000      	b.n	800699e <LL_RCC_LSE_IsEnabled+0x1a>
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <LL_RCC_LSE_IsReady>:
{
 80069a8:	b480      	push	{r7}
 80069aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80069ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d101      	bne.n	80069c0 <LL_RCC_LSE_IsReady+0x18>
 80069bc:	2301      	movs	r3, #1
 80069be:	e000      	b.n	80069c2 <LL_RCC_LSE_IsReady+0x1a>
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <LL_RCC_SetRFWKPClockSource>:
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80069d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80069e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <LL_RCC_SetSMPSClockSource>:
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	f023 0203 	bic.w	r2, r3, #3
 8006a0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <LL_RCC_SetSMPSPrescaler>:
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <LL_RCC_SetUSARTClockSource>:
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a58:	f023 0203 	bic.w	r2, r3, #3
 8006a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <LL_RCC_SetLPUARTClockSource>:
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <LL_RCC_SetI2CClockSource>:
{
 8006aa0:	b480      	push	{r7}
 8006aa2:	b083      	sub	sp, #12
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	091b      	lsrs	r3, r3, #4
 8006ab4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006ab8:	43db      	mvns	r3, r3
 8006aba:	401a      	ands	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	011b      	lsls	r3, r3, #4
 8006ac0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006ac4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006ace:	bf00      	nop
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <LL_RCC_SetLPTIMClockSource>:
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ae6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	0c1b      	lsrs	r3, r3, #16
 8006aee:	041b      	lsls	r3, r3, #16
 8006af0:	43db      	mvns	r3, r3
 8006af2:	401a      	ands	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	041b      	lsls	r3, r3, #16
 8006af8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006afc:	4313      	orrs	r3, r2
 8006afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b02:	bf00      	nop
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <LL_RCC_SetRNGClockSource>:
{
 8006b0e:	b480      	push	{r7}
 8006b10:	b083      	sub	sp, #12
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b2e:	bf00      	nop
 8006b30:	370c      	adds	r7, #12
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <LL_RCC_SetCLK48ClockSource>:
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b083      	sub	sp, #12
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <LL_RCC_SetADCClockSource>:
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006b7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006b86:	bf00      	nop
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <LL_RCC_SetRTCClockSource>:
{
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006bb2:	bf00      	nop
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <LL_RCC_GetRTCClockSource>:
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <LL_RCC_ForceBackupDomainReset>:
{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006bf0:	bf00      	nop
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <LL_RCC_ReleaseBackupDomainReset>:
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006c12:	bf00      	nop
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006c24:	2300      	movs	r3, #0
 8006c26:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006c28:	2300      	movs	r3, #0
 8006c2a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d046      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8006c38:	f7ff ffc1 	bl	8006bbe <LL_RCC_GetRTCClockSource>
 8006c3c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d03c      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8006c48:	f7fe fd88 	bl	800575c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d105      	bne.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a1b      	ldr	r3, [r3, #32]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7ff ff9b 	bl	8006b92 <LL_RCC_SetRTCClockSource>
 8006c5c:	e02e      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c66:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8006c68:	f7ff ffb6 	bl	8006bd8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8006c6c:	f7ff ffc5 	bl	8006bfa <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006c7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006c88:	f7ff fe7c 	bl	8006984 <LL_RCC_LSE_IsEnabled>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d114      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c92:	f7fd fe0f 	bl	80048b4 <HAL_GetTick>
 8006c96:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006c98:	e00b      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c9a:	f7fd fe0b 	bl	80048b4 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d902      	bls.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	77fb      	strb	r3, [r7, #31]
              break;
 8006cb0:	e004      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006cb2:	f7ff fe79 	bl	80069a8 <LL_RCC_LSE_IsReady>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d1ee      	bne.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006cbc:	7ffb      	ldrb	r3, [r7, #31]
 8006cbe:	77bb      	strb	r3, [r7, #30]
 8006cc0:	e001      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc2:	7ffb      	ldrb	r3, [r7, #31]
 8006cc4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d004      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7ff feb6 	bl	8006a48 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d004      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7ff fec1 	bl	8006a74 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0310 	and.w	r3, r3, #16
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d004      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7ff fee9 	bl	8006ada <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0320 	and.w	r3, r3, #32
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d004      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7ff fede 	bl	8006ada <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0304 	and.w	r3, r3, #4
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d004      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7ff feb6 	bl	8006aa0 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d02b      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d48:	d008      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x140>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d52:	d003      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x140>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d105      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7ff fed4 	bl	8006b0e <LL_RCC_SetRNGClockSource>
 8006d66:	e00a      	b.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	699b      	ldr	r3, [r3, #24]
 8006d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	2000      	movs	r0, #0
 8006d74:	f7ff fecb 	bl	8006b0e <LL_RCC_SetRNGClockSource>
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f7ff fede 	bl	8006b3a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006d86:	d107      	bne.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d96:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d011      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	69db      	ldr	r3, [r3, #28]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7ff fedc 	bl	8006b66 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006db6:	d107      	bne.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dc6:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d004      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7ff fdf7 	bl	80069cc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d009      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7ff fe16 	bl	8006a20 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7ff fdfd 	bl	80069f8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006dfe:	7fbb      	ldrb	r3, [r7, #30]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3720      	adds	r7, #32
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e027      	b.n	8006e6a <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	7a5b      	ldrb	r3, [r3, #9]
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d105      	bne.n	8006e30 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7fb fea8 	bl	8002b80 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f023 0120 	bic.w	r1, r3, #32
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f042 0204 	orr.w	r2, r2, #4
 8006e5a:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
	...

08006e74 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e09f      	b.n	8006fc6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d106      	bne.n	8006ea0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7fb fe9a 	bl	8002bd4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006ea8:	4b49      	ldr	r3, [pc, #292]	; (8006fd0 <HAL_RTC_Init+0x15c>)
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f003 0310 	and.w	r3, r3, #16
 8006eb0:	2b10      	cmp	r3, #16
 8006eb2:	d07e      	beq.n	8006fb2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	22ca      	movs	r2, #202	; 0xca
 8006eba:	625a      	str	r2, [r3, #36]	; 0x24
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2253      	movs	r2, #83	; 0x53
 8006ec2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f8ab 	bl	8007020 <RTC_EnterInitMode>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00a      	beq.n	8006ee6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	22ff      	movs	r2, #255	; 0xff
 8006ed6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2204      	movs	r2, #4
 8006edc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	73fb      	strb	r3, [r7, #15]
 8006ee4:	e067      	b.n	8006fb6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	6812      	ldr	r2, [r2, #0]
 8006ef0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ef8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	6899      	ldr	r1, [r3, #8]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	68d2      	ldr	r2, [r2, #12]
 8006f20:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	6919      	ldr	r1, [r3, #16]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	041a      	lsls	r2, r3, #16
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68da      	ldr	r2, [r3, #12]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f44:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0202 	bic.w	r2, r2, #2
 8006f54:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	69da      	ldr	r2, [r3, #28]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	431a      	orrs	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f003 0320 	and.w	r3, r3, #32
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d113      	bne.n	8006fa4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f829 	bl	8006fd4 <HAL_RTC_WaitForSynchro>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00d      	beq.n	8006fa4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	22ff      	movs	r2, #255	; 0xff
 8006f8e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2204      	movs	r2, #4
 8006f94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e010      	b.n	8006fc6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	22ff      	movs	r2, #255	; 0xff
 8006faa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	73fb      	strb	r3, [r7, #15]
 8006fb0:	e001      	b.n	8006fb6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d103      	bne.n	8006fc4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	40002800 	.word	0x40002800

08006fd4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68da      	ldr	r2, [r3, #12]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006fea:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006fec:	f7fd fc62 	bl	80048b4 <HAL_GetTick>
 8006ff0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ff2:	e009      	b.n	8007008 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ff4:	f7fd fc5e 	bl	80048b4 <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007002:	d901      	bls.n	8007008 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e007      	b.n	8007018 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	f003 0320 	and.w	r3, r3, #32
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0ee      	beq.n	8006ff4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007032:	2b00      	cmp	r3, #0
 8007034:	d119      	bne.n	800706a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f04f 32ff 	mov.w	r2, #4294967295
 800703e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007040:	f7fd fc38 	bl	80048b4 <HAL_GetTick>
 8007044:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007046:	e009      	b.n	800705c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007048:	f7fd fc34 	bl	80048b4 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007056:	d901      	bls.n	800705c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e007      	b.n	800706c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007066:	2b00      	cmp	r3, #0
 8007068:	d0ee      	beq.n	8007048 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d101      	bne.n	800708e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800708a:	2302      	movs	r3, #2
 800708c:	e0a8      	b.n	80071e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2202      	movs	r2, #2
 800709a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	22ca      	movs	r2, #202	; 0xca
 80070a4:	625a      	str	r2, [r3, #36]	; 0x24
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2253      	movs	r2, #83	; 0x53
 80070ac:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d020      	beq.n	80070fe <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80070bc:	f7fd fbfa 	bl	80048b4 <HAL_GetTick>
 80070c0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80070c2:	e015      	b.n	80070f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80070c4:	f7fd fbf6 	bl	80048b4 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070d2:	d90d      	bls.n	80070f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	22ff      	movs	r2, #255	; 0xff
 80070da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2203      	movs	r2, #3
 80070e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e077      	b.n	80071e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	f003 0304 	and.w	r3, r3, #4
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1e2      	bne.n	80070c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800710c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	b2da      	uxtb	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800711e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007120:	f7fd fbc8 	bl	80048b4 <HAL_GetTick>
 8007124:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007126:	e015      	b.n	8007154 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007128:	f7fd fbc4 	bl	80048b4 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007136:	d90d      	bls.n	8007154 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	22ff      	movs	r2, #255	; 0xff
 800713e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2203      	movs	r2, #3
 8007144:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e045      	b.n	80071e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f003 0304 	and.w	r3, r3, #4
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0e2      	beq.n	8007128 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 0207 	bic.w	r2, r2, #7
 8007178:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6899      	ldr	r1, [r3, #8]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	430a      	orrs	r2, r1
 8007188:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800718a:	4b17      	ldr	r3, [pc, #92]	; (80071e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800718c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007190:	4a15      	ldr	r2, [pc, #84]	; (80071e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007192:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007196:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800719a:	4b13      	ldr	r3, [pc, #76]	; (80071e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a12      	ldr	r2, [pc, #72]	; (80071e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80071a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071a4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071b4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689a      	ldr	r2, [r3, #8]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071c4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	22ff      	movs	r2, #255	; 0xff
 80071cc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	58000800 	.word	0x58000800

080071ec <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d101      	bne.n	8007202 <HAL_RTCEx_EnableBypassShadow+0x16>
 80071fe:	2302      	movs	r3, #2
 8007200:	e024      	b.n	800724c <HAL_RTCEx_EnableBypassShadow+0x60>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2202      	movs	r2, #2
 800720e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	22ca      	movs	r2, #202	; 0xca
 8007218:	625a      	str	r2, [r3, #36]	; 0x24
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2253      	movs	r2, #83	; 0x53
 8007220:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f042 0220 	orr.w	r2, r2, #32
 8007230:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	22ff      	movs	r2, #255	; 0xff
 8007238:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <LL_RCC_GetUSARTClockSource>:
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007264:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4013      	ands	r3, r2
}
 800726c:	4618      	mov	r0, r3
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <LL_RCC_GetLPUARTClockSource>:
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007284:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4013      	ands	r3, r2
}
 800728c:	4618      	mov	r0, r3
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e042      	b.n	8007330 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d106      	bne.n	80072c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7fb fcc9 	bl	8002c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2224      	movs	r2, #36	; 0x24
 80072c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 0201 	bic.w	r2, r2, #1
 80072d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fe60 	bl	8007fa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 fc35 	bl	8007b58 <UART_SetConfig>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072f4:	2301      	movs	r3, #1
 80072f6:	e01b      	b.n	8007330 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	685a      	ldr	r2, [r3, #4]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007306:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	689a      	ldr	r2, [r3, #8]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007316:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f042 0201 	orr.w	r2, r2, #1
 8007326:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fedf 	bl	80080ec <UART_CheckIdleState>
 800732e:	4603      	mov	r3, r0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3708      	adds	r7, #8
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b08a      	sub	sp, #40	; 0x28
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	4613      	mov	r3, r2
 8007344:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800734c:	2b20      	cmp	r3, #32
 800734e:	d137      	bne.n	80073c0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d002      	beq.n	800735c <HAL_UART_Receive_IT+0x24>
 8007356:	88fb      	ldrh	r3, [r7, #6]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d101      	bne.n	8007360 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e030      	b.n	80073c2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a18      	ldr	r2, [pc, #96]	; (80073cc <HAL_UART_Receive_IT+0x94>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d01f      	beq.n	80073b0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d018      	beq.n	80073b0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	e853 3f00 	ldrex	r3, [r3]
 800738a:	613b      	str	r3, [r7, #16]
   return(result);
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	461a      	mov	r2, r3
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	623b      	str	r3, [r7, #32]
 800739e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073a0:	69f9      	ldr	r1, [r7, #28]
 80073a2:	6a3a      	ldr	r2, [r7, #32]
 80073a4:	e841 2300 	strex	r3, r2, [r1]
 80073a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d1e6      	bne.n	800737e <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 80073b0:	88fb      	ldrh	r3, [r7, #6]
 80073b2:	461a      	mov	r2, r3
 80073b4:	68b9      	ldr	r1, [r7, #8]
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f000 ffaa 	bl	8008310 <UART_Start_Receive_IT>
 80073bc:	4603      	mov	r3, r0
 80073be:	e000      	b.n	80073c2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073c0:	2302      	movs	r3, #2
  }
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3728      	adds	r7, #40	; 0x28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	40008000 	.word	0x40008000

080073d0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08a      	sub	sp, #40	; 0x28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	4613      	mov	r3, r2
 80073dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e4:	2b20      	cmp	r3, #32
 80073e6:	d167      	bne.n	80074b8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <HAL_UART_Transmit_DMA+0x24>
 80073ee:	88fb      	ldrh	r3, [r7, #6]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e060      	b.n	80074ba <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	88fa      	ldrh	r2, [r7, #6]
 8007402:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	88fa      	ldrh	r2, [r7, #6]
 800740a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2221      	movs	r2, #33	; 0x21
 800741a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007422:	2b00      	cmp	r3, #0
 8007424:	d028      	beq.n	8007478 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800742a:	4a26      	ldr	r2, [pc, #152]	; (80074c4 <HAL_UART_Transmit_DMA+0xf4>)
 800742c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007432:	4a25      	ldr	r2, [pc, #148]	; (80074c8 <HAL_UART_Transmit_DMA+0xf8>)
 8007434:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800743a:	4a24      	ldr	r2, [pc, #144]	; (80074cc <HAL_UART_Transmit_DMA+0xfc>)
 800743c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007442:	2200      	movs	r2, #0
 8007444:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800744e:	4619      	mov	r1, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3328      	adds	r3, #40	; 0x28
 8007456:	461a      	mov	r2, r3
 8007458:	88fb      	ldrh	r3, [r7, #6]
 800745a:	f7fd fc75 	bl	8004d48 <HAL_DMA_Start_IT>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d009      	beq.n	8007478 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2210      	movs	r2, #16
 8007468:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2220      	movs	r2, #32
 8007470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e020      	b.n	80074ba <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2240      	movs	r2, #64	; 0x40
 800747e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3308      	adds	r3, #8
 8007486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	613b      	str	r3, [r7, #16]
   return(result);
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007496:	627b      	str	r3, [r7, #36]	; 0x24
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	3308      	adds	r3, #8
 800749e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074a0:	623a      	str	r2, [r7, #32]
 80074a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a4:	69f9      	ldr	r1, [r7, #28]
 80074a6:	6a3a      	ldr	r2, [r7, #32]
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e5      	bne.n	8007480 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	e000      	b.n	80074ba <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80074b8:	2302      	movs	r3, #2
  }
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3728      	adds	r7, #40	; 0x28
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	080086a3 	.word	0x080086a3
 80074c8:	0800873d 	.word	0x0800873d
 80074cc:	08008759 	.word	0x08008759

080074d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b0ba      	sub	sp, #232	; 0xe8
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80074f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80074fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80074fe:	4013      	ands	r3, r2
 8007500:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007504:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007508:	2b00      	cmp	r3, #0
 800750a:	d11b      	bne.n	8007544 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800750c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007510:	f003 0320 	and.w	r3, r3, #32
 8007514:	2b00      	cmp	r3, #0
 8007516:	d015      	beq.n	8007544 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800751c:	f003 0320 	and.w	r3, r3, #32
 8007520:	2b00      	cmp	r3, #0
 8007522:	d105      	bne.n	8007530 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d009      	beq.n	8007544 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 82e3 	beq.w	8007b00 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4798      	blx	r3
      }
      return;
 8007542:	e2dd      	b.n	8007b00 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 8123 	beq.w	8007794 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800754e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007552:	4b8d      	ldr	r3, [pc, #564]	; (8007788 <HAL_UART_IRQHandler+0x2b8>)
 8007554:	4013      	ands	r3, r2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d106      	bne.n	8007568 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800755a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800755e:	4b8b      	ldr	r3, [pc, #556]	; (800778c <HAL_UART_IRQHandler+0x2bc>)
 8007560:	4013      	ands	r3, r2
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 8116 	beq.w	8007794 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800756c:	f003 0301 	and.w	r3, r3, #1
 8007570:	2b00      	cmp	r3, #0
 8007572:	d011      	beq.n	8007598 <HAL_UART_IRQHandler+0xc8>
 8007574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00b      	beq.n	8007598 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2201      	movs	r2, #1
 8007586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800758e:	f043 0201 	orr.w	r2, r3, #1
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800759c:	f003 0302 	and.w	r3, r3, #2
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d011      	beq.n	80075c8 <HAL_UART_IRQHandler+0xf8>
 80075a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00b      	beq.n	80075c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2202      	movs	r2, #2
 80075b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075be:	f043 0204 	orr.w	r2, r3, #4
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075cc:	f003 0304 	and.w	r3, r3, #4
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d011      	beq.n	80075f8 <HAL_UART_IRQHandler+0x128>
 80075d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00b      	beq.n	80075f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2204      	movs	r2, #4
 80075e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ee:	f043 0202 	orr.w	r2, r3, #2
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075fc:	f003 0308 	and.w	r3, r3, #8
 8007600:	2b00      	cmp	r3, #0
 8007602:	d017      	beq.n	8007634 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007608:	f003 0320 	and.w	r3, r3, #32
 800760c:	2b00      	cmp	r3, #0
 800760e:	d105      	bne.n	800761c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007610:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007614:	4b5c      	ldr	r3, [pc, #368]	; (8007788 <HAL_UART_IRQHandler+0x2b8>)
 8007616:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00b      	beq.n	8007634 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2208      	movs	r2, #8
 8007622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800762a:	f043 0208 	orr.w	r2, r3, #8
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800763c:	2b00      	cmp	r3, #0
 800763e:	d012      	beq.n	8007666 <HAL_UART_IRQHandler+0x196>
 8007640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007644:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00c      	beq.n	8007666 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007654:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765c:	f043 0220 	orr.w	r2, r3, #32
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 8249 	beq.w	8007b04 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007676:	f003 0320 	and.w	r3, r3, #32
 800767a:	2b00      	cmp	r3, #0
 800767c:	d013      	beq.n	80076a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800767e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	d105      	bne.n	8007696 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800768a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800768e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d007      	beq.n	80076a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800769a:	2b00      	cmp	r3, #0
 800769c:	d003      	beq.n	80076a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ba:	2b40      	cmp	r3, #64	; 0x40
 80076bc:	d005      	beq.n	80076ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d054      	beq.n	8007774 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 ff83 	bl	80085d6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076da:	2b40      	cmp	r3, #64	; 0x40
 80076dc:	d146      	bne.n	800776c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3308      	adds	r3, #8
 80076e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076ec:	e853 3f00 	ldrex	r3, [r3]
 80076f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3308      	adds	r3, #8
 8007706:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800770a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800770e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007716:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800771a:	e841 2300 	strex	r3, r2, [r1]
 800771e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1d9      	bne.n	80076de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007730:	2b00      	cmp	r3, #0
 8007732:	d017      	beq.n	8007764 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800773a:	4a15      	ldr	r2, [pc, #84]	; (8007790 <HAL_UART_IRQHandler+0x2c0>)
 800773c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007744:	4618      	mov	r0, r3
 8007746:	f7fd fbd9 	bl	8004efc <HAL_DMA_Abort_IT>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d019      	beq.n	8007784 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800775e:	4610      	mov	r0, r2
 8007760:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007762:	e00f      	b.n	8007784 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f9e1 	bl	8007b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800776a:	e00b      	b.n	8007784 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f9dd 	bl	8007b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007772:	e007      	b.n	8007784 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f9d9 	bl	8007b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007782:	e1bf      	b.n	8007b04 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007784:	bf00      	nop
    return;
 8007786:	e1bd      	b.n	8007b04 <HAL_UART_IRQHandler+0x634>
 8007788:	10000001 	.word	0x10000001
 800778c:	04000120 	.word	0x04000120
 8007790:	080087d9 	.word	0x080087d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007798:	2b01      	cmp	r3, #1
 800779a:	f040 8153 	bne.w	8007a44 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800779e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077a2:	f003 0310 	and.w	r3, r3, #16
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 814c 	beq.w	8007a44 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077b0:	f003 0310 	and.w	r3, r3, #16
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 8145 	beq.w	8007a44 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2210      	movs	r2, #16
 80077c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077cc:	2b40      	cmp	r3, #64	; 0x40
 80077ce:	f040 80bb 	bne.w	8007948 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 818f 	beq.w	8007b08 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80077f4:	429a      	cmp	r2, r3
 80077f6:	f080 8187 	bcs.w	8007b08 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007800:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f003 0320 	and.w	r3, r3, #32
 8007812:	2b00      	cmp	r3, #0
 8007814:	f040 8087 	bne.w	8007926 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800782c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007830:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007834:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007846:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800784e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007852:	e841 2300 	strex	r3, r2, [r1]
 8007856:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800785a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1da      	bne.n	8007818 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	3308      	adds	r3, #8
 8007868:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800786c:	e853 3f00 	ldrex	r3, [r3]
 8007870:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007872:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007874:	f023 0301 	bic.w	r3, r3, #1
 8007878:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3308      	adds	r3, #8
 8007882:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007886:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800788a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800788e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007892:	e841 2300 	strex	r3, r2, [r1]
 8007896:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1e1      	bne.n	8007862 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3308      	adds	r3, #8
 80078a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078a8:	e853 3f00 	ldrex	r3, [r3]
 80078ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3308      	adds	r3, #8
 80078be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078ca:	e841 2300 	strex	r3, r2, [r1]
 80078ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1e3      	bne.n	800789e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2220      	movs	r2, #32
 80078da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078ec:	e853 3f00 	ldrex	r3, [r3]
 80078f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078f4:	f023 0310 	bic.w	r3, r3, #16
 80078f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007906:	65bb      	str	r3, [r7, #88]	; 0x58
 8007908:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800790c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800790e:	e841 2300 	strex	r3, r2, [r1]
 8007912:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1e4      	bne.n	80078e4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007920:	4618      	mov	r0, r3
 8007922:	f7fd fa8c 	bl	8004e3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2202      	movs	r2, #2
 800792a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007938:	b29b      	uxth	r3, r3
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	b29b      	uxth	r3, r3
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f8fd 	bl	8007b40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007946:	e0df      	b.n	8007b08 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007954:	b29b      	uxth	r3, r3
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007962:	b29b      	uxth	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 80d1 	beq.w	8007b0c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800796a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 80cc 	beq.w	8007b0c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797c:	e853 3f00 	ldrex	r3, [r3]
 8007980:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007984:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007988:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	461a      	mov	r2, r3
 8007992:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007996:	647b      	str	r3, [r7, #68]	; 0x44
 8007998:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800799c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800799e:	e841 2300 	strex	r3, r2, [r1]
 80079a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1e4      	bne.n	8007974 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	3308      	adds	r3, #8
 80079b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b4:	e853 3f00 	ldrex	r3, [r3]
 80079b8:	623b      	str	r3, [r7, #32]
   return(result);
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079c0:	f023 0301 	bic.w	r3, r3, #1
 80079c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	3308      	adds	r3, #8
 80079ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079d2:	633a      	str	r2, [r7, #48]	; 0x30
 80079d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079da:	e841 2300 	strex	r3, r2, [r1]
 80079de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1e1      	bne.n	80079aa <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	e853 3f00 	ldrex	r3, [r3]
 8007a06:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f023 0310 	bic.w	r3, r3, #16
 8007a0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a1c:	61fb      	str	r3, [r7, #28]
 8007a1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a20:	69b9      	ldr	r1, [r7, #24]
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	e841 2300 	strex	r3, r2, [r1]
 8007a28:	617b      	str	r3, [r7, #20]
   return(result);
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1e4      	bne.n	80079fa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f000 f87f 	bl	8007b40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a42:	e063      	b.n	8007b0c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00e      	beq.n	8007a6e <HAL_UART_IRQHandler+0x59e>
 8007a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d008      	beq.n	8007a6e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 fc14 	bl	8009294 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a6c:	e051      	b.n	8007b12 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d014      	beq.n	8007aa4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d105      	bne.n	8007a92 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d008      	beq.n	8007aa4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d03a      	beq.n	8007b10 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	4798      	blx	r3
    }
    return;
 8007aa2:	e035      	b.n	8007b10 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d009      	beq.n	8007ac4 <HAL_UART_IRQHandler+0x5f4>
 8007ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fea1 	bl	8008804 <UART_EndTransmit_IT>
    return;
 8007ac2:	e026      	b.n	8007b12 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d009      	beq.n	8007ae4 <HAL_UART_IRQHandler+0x614>
 8007ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 fbed 	bl	80092bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ae2:	e016      	b.n	8007b12 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d010      	beq.n	8007b12 <HAL_UART_IRQHandler+0x642>
 8007af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	da0c      	bge.n	8007b12 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 fbd5 	bl	80092a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007afe:	e008      	b.n	8007b12 <HAL_UART_IRQHandler+0x642>
      return;
 8007b00:	bf00      	nop
 8007b02:	e006      	b.n	8007b12 <HAL_UART_IRQHandler+0x642>
    return;
 8007b04:	bf00      	nop
 8007b06:	e004      	b.n	8007b12 <HAL_UART_IRQHandler+0x642>
      return;
 8007b08:	bf00      	nop
 8007b0a:	e002      	b.n	8007b12 <HAL_UART_IRQHandler+0x642>
      return;
 8007b0c:	bf00      	nop
 8007b0e:	e000      	b.n	8007b12 <HAL_UART_IRQHandler+0x642>
    return;
 8007b10:	bf00      	nop
  }
}
 8007b12:	37e8      	adds	r7, #232	; 0xe8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b5c:	b08c      	sub	sp, #48	; 0x30
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	689a      	ldr	r2, [r3, #8]
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	431a      	orrs	r2, r3
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	695b      	ldr	r3, [r3, #20]
 8007b76:	431a      	orrs	r2, r3
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	69db      	ldr	r3, [r3, #28]
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	4baf      	ldr	r3, [pc, #700]	; (8007e44 <UART_SetConfig+0x2ec>)
 8007b88:	4013      	ands	r3, r2
 8007b8a:	697a      	ldr	r2, [r7, #20]
 8007b8c:	6812      	ldr	r2, [r2, #0]
 8007b8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b90:	430b      	orrs	r3, r1
 8007b92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	68da      	ldr	r2, [r3, #12]
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	699b      	ldr	r3, [r3, #24]
 8007bae:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4aa4      	ldr	r2, [pc, #656]	; (8007e48 <UART_SetConfig+0x2f0>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d004      	beq.n	8007bc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007bce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	6812      	ldr	r2, [r2, #0]
 8007bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007be2:	f023 010f 	bic.w	r1, r3, #15
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a95      	ldr	r2, [pc, #596]	; (8007e4c <UART_SetConfig+0x2f4>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d125      	bne.n	8007c48 <UART_SetConfig+0xf0>
 8007bfc:	2003      	movs	r0, #3
 8007bfe:	f7ff fb2b 	bl	8007258 <LL_RCC_GetUSARTClockSource>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b03      	cmp	r3, #3
 8007c06:	d81b      	bhi.n	8007c40 <UART_SetConfig+0xe8>
 8007c08:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <UART_SetConfig+0xb8>)
 8007c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0e:	bf00      	nop
 8007c10:	08007c21 	.word	0x08007c21
 8007c14:	08007c31 	.word	0x08007c31
 8007c18:	08007c29 	.word	0x08007c29
 8007c1c:	08007c39 	.word	0x08007c39
 8007c20:	2301      	movs	r3, #1
 8007c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c26:	e042      	b.n	8007cae <UART_SetConfig+0x156>
 8007c28:	2302      	movs	r3, #2
 8007c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c2e:	e03e      	b.n	8007cae <UART_SetConfig+0x156>
 8007c30:	2304      	movs	r3, #4
 8007c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c36:	e03a      	b.n	8007cae <UART_SetConfig+0x156>
 8007c38:	2308      	movs	r3, #8
 8007c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c3e:	e036      	b.n	8007cae <UART_SetConfig+0x156>
 8007c40:	2310      	movs	r3, #16
 8007c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c46:	e032      	b.n	8007cae <UART_SetConfig+0x156>
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a7e      	ldr	r2, [pc, #504]	; (8007e48 <UART_SetConfig+0x2f0>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d12a      	bne.n	8007ca8 <UART_SetConfig+0x150>
 8007c52:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007c56:	f7ff fb0f 	bl	8007278 <LL_RCC_GetLPUARTClockSource>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c60:	d01a      	beq.n	8007c98 <UART_SetConfig+0x140>
 8007c62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c66:	d81b      	bhi.n	8007ca0 <UART_SetConfig+0x148>
 8007c68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c6c:	d00c      	beq.n	8007c88 <UART_SetConfig+0x130>
 8007c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c72:	d815      	bhi.n	8007ca0 <UART_SetConfig+0x148>
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d003      	beq.n	8007c80 <UART_SetConfig+0x128>
 8007c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c7c:	d008      	beq.n	8007c90 <UART_SetConfig+0x138>
 8007c7e:	e00f      	b.n	8007ca0 <UART_SetConfig+0x148>
 8007c80:	2300      	movs	r3, #0
 8007c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c86:	e012      	b.n	8007cae <UART_SetConfig+0x156>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c8e:	e00e      	b.n	8007cae <UART_SetConfig+0x156>
 8007c90:	2304      	movs	r3, #4
 8007c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c96:	e00a      	b.n	8007cae <UART_SetConfig+0x156>
 8007c98:	2308      	movs	r3, #8
 8007c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c9e:	e006      	b.n	8007cae <UART_SetConfig+0x156>
 8007ca0:	2310      	movs	r3, #16
 8007ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ca6:	e002      	b.n	8007cae <UART_SetConfig+0x156>
 8007ca8:	2310      	movs	r3, #16
 8007caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a65      	ldr	r2, [pc, #404]	; (8007e48 <UART_SetConfig+0x2f0>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	f040 8097 	bne.w	8007de8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007cba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cbe:	2b08      	cmp	r3, #8
 8007cc0:	d823      	bhi.n	8007d0a <UART_SetConfig+0x1b2>
 8007cc2:	a201      	add	r2, pc, #4	; (adr r2, 8007cc8 <UART_SetConfig+0x170>)
 8007cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc8:	08007ced 	.word	0x08007ced
 8007ccc:	08007d0b 	.word	0x08007d0b
 8007cd0:	08007cf5 	.word	0x08007cf5
 8007cd4:	08007d0b 	.word	0x08007d0b
 8007cd8:	08007cfb 	.word	0x08007cfb
 8007cdc:	08007d0b 	.word	0x08007d0b
 8007ce0:	08007d0b 	.word	0x08007d0b
 8007ce4:	08007d0b 	.word	0x08007d0b
 8007ce8:	08007d03 	.word	0x08007d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cec:	f7fe fd94 	bl	8006818 <HAL_RCC_GetPCLK1Freq>
 8007cf0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cf2:	e010      	b.n	8007d16 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cf4:	4b56      	ldr	r3, [pc, #344]	; (8007e50 <UART_SetConfig+0x2f8>)
 8007cf6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cf8:	e00d      	b.n	8007d16 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cfa:	f7fe fd0d 	bl	8006718 <HAL_RCC_GetSysClockFreq>
 8007cfe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d00:	e009      	b.n	8007d16 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d08:	e005      	b.n	8007d16 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 812b 	beq.w	8007f74 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	4a4c      	ldr	r2, [pc, #304]	; (8007e54 <UART_SetConfig+0x2fc>)
 8007d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d28:	461a      	mov	r2, r3
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d30:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	4613      	mov	r3, r2
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	4413      	add	r3, r2
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d305      	bcc.n	8007d4e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d48:	69ba      	ldr	r2, [r7, #24]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d903      	bls.n	8007d56 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d54:	e10e      	b.n	8007f74 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d58:	2200      	movs	r2, #0
 8007d5a:	60bb      	str	r3, [r7, #8]
 8007d5c:	60fa      	str	r2, [r7, #12]
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	4a3c      	ldr	r2, [pc, #240]	; (8007e54 <UART_SetConfig+0x2fc>)
 8007d64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	603b      	str	r3, [r7, #0]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d78:	f7f8 fefe 	bl	8000b78 <__aeabi_uldivmod>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	460b      	mov	r3, r1
 8007d80:	4610      	mov	r0, r2
 8007d82:	4619      	mov	r1, r3
 8007d84:	f04f 0200 	mov.w	r2, #0
 8007d88:	f04f 0300 	mov.w	r3, #0
 8007d8c:	020b      	lsls	r3, r1, #8
 8007d8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d92:	0202      	lsls	r2, r0, #8
 8007d94:	6979      	ldr	r1, [r7, #20]
 8007d96:	6849      	ldr	r1, [r1, #4]
 8007d98:	0849      	lsrs	r1, r1, #1
 8007d9a:	2000      	movs	r0, #0
 8007d9c:	460c      	mov	r4, r1
 8007d9e:	4605      	mov	r5, r0
 8007da0:	eb12 0804 	adds.w	r8, r2, r4
 8007da4:	eb43 0905 	adc.w	r9, r3, r5
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	2200      	movs	r2, #0
 8007dae:	469a      	mov	sl, r3
 8007db0:	4693      	mov	fp, r2
 8007db2:	4652      	mov	r2, sl
 8007db4:	465b      	mov	r3, fp
 8007db6:	4640      	mov	r0, r8
 8007db8:	4649      	mov	r1, r9
 8007dba:	f7f8 fedd 	bl	8000b78 <__aeabi_uldivmod>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	4613      	mov	r3, r2
 8007dc4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dcc:	d308      	bcc.n	8007de0 <UART_SetConfig+0x288>
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dd4:	d204      	bcs.n	8007de0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	6a3a      	ldr	r2, [r7, #32]
 8007ddc:	60da      	str	r2, [r3, #12]
 8007dde:	e0c9      	b.n	8007f74 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007de6:	e0c5      	b.n	8007f74 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	69db      	ldr	r3, [r3, #28]
 8007dec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007df0:	d16d      	bne.n	8007ece <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007df2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007df6:	3b01      	subs	r3, #1
 8007df8:	2b07      	cmp	r3, #7
 8007dfa:	d82d      	bhi.n	8007e58 <UART_SetConfig+0x300>
 8007dfc:	a201      	add	r2, pc, #4	; (adr r2, 8007e04 <UART_SetConfig+0x2ac>)
 8007dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e02:	bf00      	nop
 8007e04:	08007e25 	.word	0x08007e25
 8007e08:	08007e2d 	.word	0x08007e2d
 8007e0c:	08007e59 	.word	0x08007e59
 8007e10:	08007e33 	.word	0x08007e33
 8007e14:	08007e59 	.word	0x08007e59
 8007e18:	08007e59 	.word	0x08007e59
 8007e1c:	08007e59 	.word	0x08007e59
 8007e20:	08007e3b 	.word	0x08007e3b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e24:	f7fe fd0e 	bl	8006844 <HAL_RCC_GetPCLK2Freq>
 8007e28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e2a:	e01b      	b.n	8007e64 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e2c:	4b08      	ldr	r3, [pc, #32]	; (8007e50 <UART_SetConfig+0x2f8>)
 8007e2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e30:	e018      	b.n	8007e64 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e32:	f7fe fc71 	bl	8006718 <HAL_RCC_GetSysClockFreq>
 8007e36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e38:	e014      	b.n	8007e64 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e40:	e010      	b.n	8007e64 <UART_SetConfig+0x30c>
 8007e42:	bf00      	nop
 8007e44:	cfff69f3 	.word	0xcfff69f3
 8007e48:	40008000 	.word	0x40008000
 8007e4c:	40013800 	.word	0x40013800
 8007e50:	00f42400 	.word	0x00f42400
 8007e54:	08010dec 	.word	0x08010dec
      default:
        pclk = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f000 8084 	beq.w	8007f74 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e70:	4a4b      	ldr	r2, [pc, #300]	; (8007fa0 <UART_SetConfig+0x448>)
 8007e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e76:	461a      	mov	r2, r3
 8007e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e7e:	005a      	lsls	r2, r3, #1
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	085b      	lsrs	r3, r3, #1
 8007e86:	441a      	add	r2, r3
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e90:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	2b0f      	cmp	r3, #15
 8007e96:	d916      	bls.n	8007ec6 <UART_SetConfig+0x36e>
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e9e:	d212      	bcs.n	8007ec6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	f023 030f 	bic.w	r3, r3, #15
 8007ea8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	085b      	lsrs	r3, r3, #1
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	f003 0307 	and.w	r3, r3, #7
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	8bfb      	ldrh	r3, [r7, #30]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	8bfa      	ldrh	r2, [r7, #30]
 8007ec2:	60da      	str	r2, [r3, #12]
 8007ec4:	e056      	b.n	8007f74 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ecc:	e052      	b.n	8007f74 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ece:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	2b07      	cmp	r3, #7
 8007ed6:	d822      	bhi.n	8007f1e <UART_SetConfig+0x3c6>
 8007ed8:	a201      	add	r2, pc, #4	; (adr r2, 8007ee0 <UART_SetConfig+0x388>)
 8007eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ede:	bf00      	nop
 8007ee0:	08007f01 	.word	0x08007f01
 8007ee4:	08007f09 	.word	0x08007f09
 8007ee8:	08007f1f 	.word	0x08007f1f
 8007eec:	08007f0f 	.word	0x08007f0f
 8007ef0:	08007f1f 	.word	0x08007f1f
 8007ef4:	08007f1f 	.word	0x08007f1f
 8007ef8:	08007f1f 	.word	0x08007f1f
 8007efc:	08007f17 	.word	0x08007f17
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f00:	f7fe fca0 	bl	8006844 <HAL_RCC_GetPCLK2Freq>
 8007f04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f06:	e010      	b.n	8007f2a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f08:	4b26      	ldr	r3, [pc, #152]	; (8007fa4 <UART_SetConfig+0x44c>)
 8007f0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f0c:	e00d      	b.n	8007f2a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f0e:	f7fe fc03 	bl	8006718 <HAL_RCC_GetSysClockFreq>
 8007f12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f14:	e009      	b.n	8007f2a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f1c:	e005      	b.n	8007f2a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f28:	bf00      	nop
    }

    if (pclk != 0U)
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d021      	beq.n	8007f74 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f34:	4a1a      	ldr	r2, [pc, #104]	; (8007fa0 <UART_SetConfig+0x448>)
 8007f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	085b      	lsrs	r3, r3, #1
 8007f48:	441a      	add	r2, r3
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f54:	6a3b      	ldr	r3, [r7, #32]
 8007f56:	2b0f      	cmp	r3, #15
 8007f58:	d909      	bls.n	8007f6e <UART_SetConfig+0x416>
 8007f5a:	6a3b      	ldr	r3, [r7, #32]
 8007f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f60:	d205      	bcs.n	8007f6e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f62:	6a3b      	ldr	r3, [r7, #32]
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60da      	str	r2, [r3, #12]
 8007f6c:	e002      	b.n	8007f74 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	2200      	movs	r2, #0
 8007f88:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007f90:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3730      	adds	r7, #48	; 0x30
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f9e:	bf00      	nop
 8007fa0:	08010dec 	.word	0x08010dec
 8007fa4:	00f42400 	.word	0x00f42400

08007fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb4:	f003 0308 	and.w	r3, r3, #8
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00a      	beq.n	8007fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd6:	f003 0301 	and.w	r3, r3, #1
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00a      	beq.n	8007ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	430a      	orrs	r2, r1
 8007ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff8:	f003 0302 	and.w	r3, r3, #2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d00a      	beq.n	8008016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	430a      	orrs	r2, r1
 8008014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800801a:	f003 0304 	and.w	r3, r3, #4
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00a      	beq.n	8008038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	430a      	orrs	r2, r1
 8008036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803c:	f003 0310 	and.w	r3, r3, #16
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00a      	beq.n	800805a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	430a      	orrs	r2, r1
 8008058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805e:	f003 0320 	and.w	r3, r3, #32
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00a      	beq.n	800807c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	430a      	orrs	r2, r1
 800807a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008084:	2b00      	cmp	r3, #0
 8008086:	d01a      	beq.n	80080be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080a6:	d10a      	bne.n	80080be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	430a      	orrs	r2, r1
 80080bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00a      	beq.n	80080e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	430a      	orrs	r2, r1
 80080de:	605a      	str	r2, [r3, #4]
  }
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b098      	sub	sp, #96	; 0x60
 80080f0:	af02      	add	r7, sp, #8
 80080f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080fc:	f7fc fbda 	bl	80048b4 <HAL_GetTick>
 8008100:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 0308 	and.w	r3, r3, #8
 800810c:	2b08      	cmp	r3, #8
 800810e:	d12f      	bne.n	8008170 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008114:	9300      	str	r3, [sp, #0]
 8008116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008118:	2200      	movs	r2, #0
 800811a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 f88e 	bl	8008240 <UART_WaitOnFlagUntilTimeout>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d022      	beq.n	8008170 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008132:	e853 3f00 	ldrex	r3, [r3]
 8008136:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800813a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800813e:	653b      	str	r3, [r7, #80]	; 0x50
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	461a      	mov	r2, r3
 8008146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008148:	647b      	str	r3, [r7, #68]	; 0x44
 800814a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800814e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008150:	e841 2300 	strex	r3, r2, [r1]
 8008154:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1e6      	bne.n	800812a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2220      	movs	r2, #32
 8008160:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800816c:	2303      	movs	r3, #3
 800816e:	e063      	b.n	8008238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0304 	and.w	r3, r3, #4
 800817a:	2b04      	cmp	r3, #4
 800817c:	d149      	bne.n	8008212 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800817e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008186:	2200      	movs	r2, #0
 8008188:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f000 f857 	bl	8008240 <UART_WaitOnFlagUntilTimeout>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d03c      	beq.n	8008212 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a0:	e853 3f00 	ldrex	r3, [r3]
 80081a4:	623b      	str	r3, [r7, #32]
   return(result);
 80081a6:	6a3b      	ldr	r3, [r7, #32]
 80081a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b6:	633b      	str	r3, [r7, #48]	; 0x30
 80081b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081be:	e841 2300 	strex	r3, r2, [r1]
 80081c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1e6      	bne.n	8008198 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3308      	adds	r3, #8
 80081d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	e853 3f00 	ldrex	r3, [r3]
 80081d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f023 0301 	bic.w	r3, r3, #1
 80081e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3308      	adds	r3, #8
 80081e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081ea:	61fa      	str	r2, [r7, #28]
 80081ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ee:	69b9      	ldr	r1, [r7, #24]
 80081f0:	69fa      	ldr	r2, [r7, #28]
 80081f2:	e841 2300 	strex	r3, r2, [r1]
 80081f6:	617b      	str	r3, [r7, #20]
   return(result);
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1e5      	bne.n	80081ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2220      	movs	r2, #32
 8008202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e012      	b.n	8008238 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2220      	movs	r2, #32
 8008216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2220      	movs	r2, #32
 800821e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3758      	adds	r7, #88	; 0x58
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	603b      	str	r3, [r7, #0]
 800824c:	4613      	mov	r3, r2
 800824e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008250:	e049      	b.n	80082e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008258:	d045      	beq.n	80082e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800825a:	f7fc fb2b 	bl	80048b4 <HAL_GetTick>
 800825e:	4602      	mov	r2, r0
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	1ad3      	subs	r3, r2, r3
 8008264:	69ba      	ldr	r2, [r7, #24]
 8008266:	429a      	cmp	r2, r3
 8008268:	d302      	bcc.n	8008270 <UART_WaitOnFlagUntilTimeout+0x30>
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e048      	b.n	8008306 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 0304 	and.w	r3, r3, #4
 800827e:	2b00      	cmp	r3, #0
 8008280:	d031      	beq.n	80082e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	69db      	ldr	r3, [r3, #28]
 8008288:	f003 0308 	and.w	r3, r3, #8
 800828c:	2b08      	cmp	r3, #8
 800828e:	d110      	bne.n	80082b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2208      	movs	r2, #8
 8008296:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f000 f99c 	bl	80085d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2208      	movs	r2, #8
 80082a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e029      	b.n	8008306 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	69db      	ldr	r3, [r3, #28]
 80082b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082c0:	d111      	bne.n	80082e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 f982 	bl	80085d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2220      	movs	r2, #32
 80082d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e00f      	b.n	8008306 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69da      	ldr	r2, [r3, #28]
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	4013      	ands	r3, r2
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	bf0c      	ite	eq
 80082f6:	2301      	moveq	r3, #1
 80082f8:	2300      	movne	r3, #0
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	461a      	mov	r2, r3
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	429a      	cmp	r2, r3
 8008302:	d0a6      	beq.n	8008252 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
	...

08008310 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008310:	b480      	push	{r7}
 8008312:	b0a3      	sub	sp, #140	; 0x8c
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	4613      	mov	r3, r2
 800831c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	88fa      	ldrh	r2, [r7, #6]
 8008328:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	88fa      	ldrh	r2, [r7, #6]
 8008330:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008342:	d10e      	bne.n	8008362 <UART_Start_Receive_IT+0x52>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d105      	bne.n	8008358 <UART_Start_Receive_IT+0x48>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008352:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008356:	e02d      	b.n	80083b4 <UART_Start_Receive_IT+0xa4>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	22ff      	movs	r2, #255	; 0xff
 800835c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008360:	e028      	b.n	80083b4 <UART_Start_Receive_IT+0xa4>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10d      	bne.n	8008386 <UART_Start_Receive_IT+0x76>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d104      	bne.n	800837c <UART_Start_Receive_IT+0x6c>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	22ff      	movs	r2, #255	; 0xff
 8008376:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800837a:	e01b      	b.n	80083b4 <UART_Start_Receive_IT+0xa4>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	227f      	movs	r2, #127	; 0x7f
 8008380:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008384:	e016      	b.n	80083b4 <UART_Start_Receive_IT+0xa4>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800838e:	d10d      	bne.n	80083ac <UART_Start_Receive_IT+0x9c>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d104      	bne.n	80083a2 <UART_Start_Receive_IT+0x92>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	227f      	movs	r2, #127	; 0x7f
 800839c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083a0:	e008      	b.n	80083b4 <UART_Start_Receive_IT+0xa4>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	223f      	movs	r2, #63	; 0x3f
 80083a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083aa:	e003      	b.n	80083b4 <UART_Start_Receive_IT+0xa4>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2222      	movs	r2, #34	; 0x22
 80083c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	3308      	adds	r3, #8
 80083ca:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083ce:	e853 3f00 	ldrex	r3, [r3]
 80083d2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80083d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083d6:	f043 0301 	orr.w	r3, r3, #1
 80083da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	3308      	adds	r3, #8
 80083e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80083e8:	673a      	str	r2, [r7, #112]	; 0x70
 80083ea:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80083ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80083f0:	e841 2300 	strex	r3, r2, [r1]
 80083f4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80083f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1e3      	bne.n	80083c4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008404:	d14f      	bne.n	80084a6 <UART_Start_Receive_IT+0x196>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800840c:	88fa      	ldrh	r2, [r7, #6]
 800840e:	429a      	cmp	r2, r3
 8008410:	d349      	bcc.n	80084a6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800841a:	d107      	bne.n	800842c <UART_Start_Receive_IT+0x11c>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d103      	bne.n	800842c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	4a47      	ldr	r2, [pc, #284]	; (8008544 <UART_Start_Receive_IT+0x234>)
 8008428:	675a      	str	r2, [r3, #116]	; 0x74
 800842a:	e002      	b.n	8008432 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4a46      	ldr	r2, [pc, #280]	; (8008548 <UART_Start_Receive_IT+0x238>)
 8008430:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d01a      	beq.n	8008470 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008442:	e853 3f00 	ldrex	r3, [r3]
 8008446:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800844a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800844e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	461a      	mov	r2, r3
 8008458:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800845c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800845e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008460:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008462:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008464:	e841 2300 	strex	r3, r2, [r1]
 8008468:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800846a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1e4      	bne.n	800843a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3308      	adds	r3, #8
 8008476:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800847a:	e853 3f00 	ldrex	r3, [r3]
 800847e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008486:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3308      	adds	r3, #8
 800848e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008490:	64ba      	str	r2, [r7, #72]	; 0x48
 8008492:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008494:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008498:	e841 2300 	strex	r3, r2, [r1]
 800849c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800849e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1e5      	bne.n	8008470 <UART_Start_Receive_IT+0x160>
 80084a4:	e046      	b.n	8008534 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ae:	d107      	bne.n	80084c0 <UART_Start_Receive_IT+0x1b0>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d103      	bne.n	80084c0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4a24      	ldr	r2, [pc, #144]	; (800854c <UART_Start_Receive_IT+0x23c>)
 80084bc:	675a      	str	r2, [r3, #116]	; 0x74
 80084be:	e002      	b.n	80084c6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4a23      	ldr	r2, [pc, #140]	; (8008550 <UART_Start_Receive_IT+0x240>)
 80084c4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d019      	beq.n	8008502 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80084e2:	677b      	str	r3, [r7, #116]	; 0x74
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	461a      	mov	r2, r3
 80084ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084ec:	637b      	str	r3, [r7, #52]	; 0x34
 80084ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084f4:	e841 2300 	strex	r3, r2, [r1]
 80084f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e6      	bne.n	80084ce <UART_Start_Receive_IT+0x1be>
 8008500:	e018      	b.n	8008534 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	e853 3f00 	ldrex	r3, [r3]
 800850e:	613b      	str	r3, [r7, #16]
   return(result);
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f043 0320 	orr.w	r3, r3, #32
 8008516:	67bb      	str	r3, [r7, #120]	; 0x78
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	461a      	mov	r2, r3
 800851e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008520:	623b      	str	r3, [r7, #32]
 8008522:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008524:	69f9      	ldr	r1, [r7, #28]
 8008526:	6a3a      	ldr	r2, [r7, #32]
 8008528:	e841 2300 	strex	r3, r2, [r1]
 800852c:	61bb      	str	r3, [r7, #24]
   return(result);
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e6      	bne.n	8008502 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	378c      	adds	r7, #140	; 0x8c
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	08008f2d 	.word	0x08008f2d
 8008548:	08008bcd 	.word	0x08008bcd
 800854c:	08008a15 	.word	0x08008a15
 8008550:	0800885d 	.word	0x0800885d

08008554 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008554:	b480      	push	{r7}
 8008556:	b08f      	sub	sp, #60	; 0x3c
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	61fb      	str	r3, [r7, #28]
   return(result);
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008570:	637b      	str	r3, [r7, #52]	; 0x34
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800857c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008582:	e841 2300 	strex	r3, r2, [r1]
 8008586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1e6      	bne.n	800855c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3308      	adds	r3, #8
 8008594:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	e853 3f00 	ldrex	r3, [r3]
 800859c:	60bb      	str	r3, [r7, #8]
   return(result);
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80085a4:	633b      	str	r3, [r7, #48]	; 0x30
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3308      	adds	r3, #8
 80085ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ae:	61ba      	str	r2, [r7, #24]
 80085b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b2:	6979      	ldr	r1, [r7, #20]
 80085b4:	69ba      	ldr	r2, [r7, #24]
 80085b6:	e841 2300 	strex	r3, r2, [r1]
 80085ba:	613b      	str	r3, [r7, #16]
   return(result);
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d1e5      	bne.n	800858e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2220      	movs	r2, #32
 80085c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80085ca:	bf00      	nop
 80085cc:	373c      	adds	r7, #60	; 0x3c
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr

080085d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b095      	sub	sp, #84	; 0x54
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	461a      	mov	r2, r3
 80085fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085fc:	643b      	str	r3, [r7, #64]	; 0x40
 80085fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008602:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008604:	e841 2300 	strex	r3, r2, [r1]
 8008608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800860a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e6      	bne.n	80085de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3308      	adds	r3, #8
 8008616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	e853 3f00 	ldrex	r3, [r3]
 800861e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008626:	f023 0301 	bic.w	r3, r3, #1
 800862a:	64bb      	str	r3, [r7, #72]	; 0x48
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3308      	adds	r3, #8
 8008632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008634:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008636:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008638:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800863a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800863c:	e841 2300 	strex	r3, r2, [r1]
 8008640:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1e3      	bne.n	8008610 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800864c:	2b01      	cmp	r3, #1
 800864e:	d118      	bne.n	8008682 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	e853 3f00 	ldrex	r3, [r3]
 800865c:	60bb      	str	r3, [r7, #8]
   return(result);
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	f023 0310 	bic.w	r3, r3, #16
 8008664:	647b      	str	r3, [r7, #68]	; 0x44
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	461a      	mov	r2, r3
 800866c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800866e:	61bb      	str	r3, [r7, #24]
 8008670:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008672:	6979      	ldr	r1, [r7, #20]
 8008674:	69ba      	ldr	r2, [r7, #24]
 8008676:	e841 2300 	strex	r3, r2, [r1]
 800867a:	613b      	str	r3, [r7, #16]
   return(result);
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1e6      	bne.n	8008650 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2220      	movs	r2, #32
 8008686:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008696:	bf00      	nop
 8008698:	3754      	adds	r7, #84	; 0x54
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b090      	sub	sp, #64	; 0x40
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ae:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d137      	bne.n	800872e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80086be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c0:	2200      	movs	r2, #0
 80086c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3308      	adds	r3, #8
 80086cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d0:	e853 3f00 	ldrex	r3, [r3]
 80086d4:	623b      	str	r3, [r7, #32]
   return(result);
 80086d6:	6a3b      	ldr	r3, [r7, #32]
 80086d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80086de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3308      	adds	r3, #8
 80086e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086e6:	633a      	str	r2, [r7, #48]	; 0x30
 80086e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086ee:	e841 2300 	strex	r3, r2, [r1]
 80086f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1e5      	bne.n	80086c6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	e853 3f00 	ldrex	r3, [r3]
 8008706:	60fb      	str	r3, [r7, #12]
   return(result);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800870e:	637b      	str	r3, [r7, #52]	; 0x34
 8008710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	461a      	mov	r2, r3
 8008716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008718:	61fb      	str	r3, [r7, #28]
 800871a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871c:	69b9      	ldr	r1, [r7, #24]
 800871e:	69fa      	ldr	r2, [r7, #28]
 8008720:	e841 2300 	strex	r3, r2, [r1]
 8008724:	617b      	str	r3, [r7, #20]
   return(result);
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e6      	bne.n	80086fa <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800872c:	e002      	b.n	8008734 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800872e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008730:	f7f9 ff74 	bl	800261c <HAL_UART_TxCpltCallback>
}
 8008734:	bf00      	nop
 8008736:	3740      	adds	r7, #64	; 0x40
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008748:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f7ff f9e4 	bl	8007b18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008750:	bf00      	nop
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008764:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800876c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008774:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008780:	2b80      	cmp	r3, #128	; 0x80
 8008782:	d109      	bne.n	8008798 <UART_DMAError+0x40>
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	2b21      	cmp	r3, #33	; 0x21
 8008788:	d106      	bne.n	8008798 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2200      	movs	r2, #0
 800878e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008792:	6978      	ldr	r0, [r7, #20]
 8008794:	f7ff fede 	bl	8008554 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a2:	2b40      	cmp	r3, #64	; 0x40
 80087a4:	d109      	bne.n	80087ba <UART_DMAError+0x62>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2b22      	cmp	r3, #34	; 0x22
 80087aa:	d106      	bne.n	80087ba <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80087b4:	6978      	ldr	r0, [r7, #20]
 80087b6:	f7ff ff0e 	bl	80085d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087c0:	f043 0210 	orr.w	r2, r3, #16
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087ca:	6978      	ldr	r0, [r7, #20]
 80087cc:	f7ff f9ae 	bl	8007b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087d0:	bf00      	nop
 80087d2:	3718      	adds	r7, #24
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2200      	movs	r2, #0
 80087ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f7ff f998 	bl	8007b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087fc:	bf00      	nop
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b088      	sub	sp, #32
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	e853 3f00 	ldrex	r3, [r3]
 8008818:	60bb      	str	r3, [r7, #8]
   return(result);
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008820:	61fb      	str	r3, [r7, #28]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	461a      	mov	r2, r3
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	61bb      	str	r3, [r7, #24]
 800882c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882e:	6979      	ldr	r1, [r7, #20]
 8008830:	69ba      	ldr	r2, [r7, #24]
 8008832:	e841 2300 	strex	r3, r2, [r1]
 8008836:	613b      	str	r3, [r7, #16]
   return(result);
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1e6      	bne.n	800880c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2220      	movs	r2, #32
 8008842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7f9 fee5 	bl	800261c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008852:	bf00      	nop
 8008854:	3720      	adds	r7, #32
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
	...

0800885c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b09c      	sub	sp, #112	; 0x70
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800886a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008874:	2b22      	cmp	r3, #34	; 0x22
 8008876:	f040 80be 	bne.w	80089f6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008884:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008888:	b2d9      	uxtb	r1, r3
 800888a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800888e:	b2da      	uxtb	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008894:	400a      	ands	r2, r1
 8008896:	b2d2      	uxtb	r2, r2
 8008898:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	3b01      	subs	r3, #1
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088bc:	b29b      	uxth	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f040 80a1 	bne.w	8008a06 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80088d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80088e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80088e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80088f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e6      	bne.n	80088c4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3308      	adds	r3, #8
 80088fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008900:	e853 3f00 	ldrex	r3, [r3]
 8008904:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008908:	f023 0301 	bic.w	r3, r3, #1
 800890c:	667b      	str	r3, [r7, #100]	; 0x64
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3308      	adds	r3, #8
 8008914:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008916:	647a      	str	r2, [r7, #68]	; 0x44
 8008918:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800891c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800891e:	e841 2300 	strex	r3, r2, [r1]
 8008922:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e5      	bne.n	80088f6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2220      	movs	r2, #32
 800892e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a33      	ldr	r2, [pc, #204]	; (8008a10 <UART_RxISR_8BIT+0x1b4>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d01f      	beq.n	8008988 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008952:	2b00      	cmp	r3, #0
 8008954:	d018      	beq.n	8008988 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	623b      	str	r3, [r7, #32]
   return(result);
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800896a:	663b      	str	r3, [r7, #96]	; 0x60
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	461a      	mov	r2, r3
 8008972:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008974:	633b      	str	r3, [r7, #48]	; 0x30
 8008976:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800897a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800897c:	e841 2300 	strex	r3, r2, [r1]
 8008980:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e6      	bne.n	8008956 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800898c:	2b01      	cmp	r3, #1
 800898e:	d12e      	bne.n	80089ee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	e853 3f00 	ldrex	r3, [r3]
 80089a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f023 0310 	bic.w	r3, r3, #16
 80089aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	461a      	mov	r2, r3
 80089b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089b4:	61fb      	str	r3, [r7, #28]
 80089b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	69b9      	ldr	r1, [r7, #24]
 80089ba:	69fa      	ldr	r2, [r7, #28]
 80089bc:	e841 2300 	strex	r3, r2, [r1]
 80089c0:	617b      	str	r3, [r7, #20]
   return(result);
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e6      	bne.n	8008996 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	69db      	ldr	r3, [r3, #28]
 80089ce:	f003 0310 	and.w	r3, r3, #16
 80089d2:	2b10      	cmp	r3, #16
 80089d4:	d103      	bne.n	80089de <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2210      	movs	r2, #16
 80089dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089e4:	4619      	mov	r1, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f7ff f8aa 	bl	8007b40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089ec:	e00b      	b.n	8008a06 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7f9 fdf6 	bl	80025e0 <HAL_UART_RxCpltCallback>
}
 80089f4:	e007      	b.n	8008a06 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	699a      	ldr	r2, [r3, #24]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f042 0208 	orr.w	r2, r2, #8
 8008a04:	619a      	str	r2, [r3, #24]
}
 8008a06:	bf00      	nop
 8008a08:	3770      	adds	r7, #112	; 0x70
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	40008000 	.word	0x40008000

08008a14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b09c      	sub	sp, #112	; 0x70
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a22:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a2c:	2b22      	cmp	r3, #34	; 0x22
 8008a2e:	f040 80be 	bne.w	8008bae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a40:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a42:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008a46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	b29a      	uxth	r2, r3
 8008a4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a56:	1c9a      	adds	r2, r3, #2
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	3b01      	subs	r3, #1
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f040 80a1 	bne.w	8008bbe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a84:	e853 3f00 	ldrex	r3, [r3]
 8008a88:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a90:	667b      	str	r3, [r7, #100]	; 0x64
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	461a      	mov	r2, r3
 8008a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a9a:	657b      	str	r3, [r7, #84]	; 0x54
 8008a9c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008aa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008aa2:	e841 2300 	strex	r3, r2, [r1]
 8008aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1e6      	bne.n	8008a7c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	3308      	adds	r3, #8
 8008ab4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab8:	e853 3f00 	ldrex	r3, [r3]
 8008abc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac0:	f023 0301 	bic.w	r3, r3, #1
 8008ac4:	663b      	str	r3, [r7, #96]	; 0x60
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3308      	adds	r3, #8
 8008acc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ace:	643a      	str	r2, [r7, #64]	; 0x40
 8008ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ad4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ad6:	e841 2300 	strex	r3, r2, [r1]
 8008ada:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1e5      	bne.n	8008aae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2220      	movs	r2, #32
 8008ae6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a33      	ldr	r2, [pc, #204]	; (8008bc8 <UART_RxISR_16BIT+0x1b4>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d01f      	beq.n	8008b40 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d018      	beq.n	8008b40 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	e853 3f00 	ldrex	r3, [r3]
 8008b1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b2e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b34:	e841 2300 	strex	r3, r2, [r1]
 8008b38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1e6      	bne.n	8008b0e <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d12e      	bne.n	8008ba6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	e853 3f00 	ldrex	r3, [r3]
 8008b5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	f023 0310 	bic.w	r3, r3, #16
 8008b62:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b6c:	61bb      	str	r3, [r7, #24]
 8008b6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b70:	6979      	ldr	r1, [r7, #20]
 8008b72:	69ba      	ldr	r2, [r7, #24]
 8008b74:	e841 2300 	strex	r3, r2, [r1]
 8008b78:	613b      	str	r3, [r7, #16]
   return(result);
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d1e6      	bne.n	8008b4e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	69db      	ldr	r3, [r3, #28]
 8008b86:	f003 0310 	and.w	r3, r3, #16
 8008b8a:	2b10      	cmp	r3, #16
 8008b8c:	d103      	bne.n	8008b96 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	2210      	movs	r2, #16
 8008b94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7fe ffce 	bl	8007b40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ba4:	e00b      	b.n	8008bbe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7f9 fd1a 	bl	80025e0 <HAL_UART_RxCpltCallback>
}
 8008bac:	e007      	b.n	8008bbe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	699a      	ldr	r2, [r3, #24]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f042 0208 	orr.w	r2, r2, #8
 8008bbc:	619a      	str	r2, [r3, #24]
}
 8008bbe:	bf00      	nop
 8008bc0:	3770      	adds	r7, #112	; 0x70
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	40008000 	.word	0x40008000

08008bcc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b0ac      	sub	sp, #176	; 0xb0
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008bda:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	69db      	ldr	r3, [r3, #28]
 8008be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c02:	2b22      	cmp	r3, #34	; 0x22
 8008c04:	f040 8182 	bne.w	8008f0c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c0e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c12:	e125      	b.n	8008e60 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c1e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008c22:	b2d9      	uxtb	r1, r3
 8008c24:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c2e:	400a      	ands	r2, r1
 8008c30:	b2d2      	uxtb	r2, r2
 8008c32:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c38:	1c5a      	adds	r2, r3, #1
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	3b01      	subs	r3, #1
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	69db      	ldr	r3, [r3, #28]
 8008c56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c5e:	f003 0307 	and.w	r3, r3, #7
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d053      	beq.n	8008d0e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d011      	beq.n	8008c96 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008c72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00b      	beq.n	8008c96 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2201      	movs	r2, #1
 8008c84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c8c:	f043 0201 	orr.w	r2, r3, #1
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c9a:	f003 0302 	and.w	r3, r3, #2
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d011      	beq.n	8008cc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008ca2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00b      	beq.n	8008cc6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cbc:	f043 0204 	orr.w	r2, r3, #4
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cca:	f003 0304 	and.w	r3, r3, #4
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d011      	beq.n	8008cf6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008cd6:	f003 0301 	and.w	r3, r3, #1
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00b      	beq.n	8008cf6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2204      	movs	r2, #4
 8008ce4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cec:	f043 0202 	orr.w	r2, r3, #2
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d006      	beq.n	8008d0e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7fe ff13 	bl	8007b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f040 80a2 	bne.w	8008e60 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d24:	e853 3f00 	ldrex	r3, [r3]
 8008d28:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d40:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d42:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008d44:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008d46:	e841 2300 	strex	r3, r2, [r1]
 8008d4a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008d4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1e4      	bne.n	8008d1c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	3308      	adds	r3, #8
 8008d58:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d5c:	e853 3f00 	ldrex	r3, [r3]
 8008d60:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008d62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d68:	f023 0301 	bic.w	r3, r3, #1
 8008d6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	3308      	adds	r3, #8
 8008d76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d7a:	66ba      	str	r2, [r7, #104]	; 0x68
 8008d7c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008d80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d82:	e841 2300 	strex	r3, r2, [r1]
 8008d86:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008d88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1e1      	bne.n	8008d52 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2220      	movs	r2, #32
 8008d92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a5f      	ldr	r2, [pc, #380]	; (8008f24 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d021      	beq.n	8008df0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d01a      	beq.n	8008df0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dc2:	e853 3f00 	ldrex	r3, [r3]
 8008dc6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ddc:	657b      	str	r3, [r7, #84]	; 0x54
 8008dde:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008de2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008de4:	e841 2300 	strex	r3, r2, [r1]
 8008de8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1e4      	bne.n	8008dba <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d130      	bne.n	8008e5a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e06:	e853 3f00 	ldrex	r3, [r3]
 8008e0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0e:	f023 0310 	bic.w	r3, r3, #16
 8008e12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e20:	643b      	str	r3, [r7, #64]	; 0x40
 8008e22:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e28:	e841 2300 	strex	r3, r2, [r1]
 8008e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d1e4      	bne.n	8008dfe <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	69db      	ldr	r3, [r3, #28]
 8008e3a:	f003 0310 	and.w	r3, r3, #16
 8008e3e:	2b10      	cmp	r3, #16
 8008e40:	d103      	bne.n	8008e4a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2210      	movs	r2, #16
 8008e48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e50:	4619      	mov	r1, r3
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7fe fe74 	bl	8007b40 <HAL_UARTEx_RxEventCallback>
 8008e58:	e002      	b.n	8008e60 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7f9 fbc0 	bl	80025e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e60:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d006      	beq.n	8008e76 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008e68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e6c:	f003 0320 	and.w	r3, r3, #32
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f47f aecf 	bne.w	8008c14 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e7c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008e80:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d049      	beq.n	8008f1c <UART_RxISR_8BIT_FIFOEN+0x350>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e8e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d242      	bcs.n	8008f1c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3308      	adds	r3, #8
 8008e9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	e853 3f00 	ldrex	r3, [r3]
 8008ea4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008eac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3308      	adds	r3, #8
 8008eb6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008eba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ebc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ec2:	e841 2300 	strex	r3, r2, [r1]
 8008ec6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1e3      	bne.n	8008e96 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a15      	ldr	r2, [pc, #84]	; (8008f28 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008ed2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	e853 3f00 	ldrex	r3, [r3]
 8008ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	f043 0320 	orr.w	r3, r3, #32
 8008ee8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ef6:	61bb      	str	r3, [r7, #24]
 8008ef8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efa:	6979      	ldr	r1, [r7, #20]
 8008efc:	69ba      	ldr	r2, [r7, #24]
 8008efe:	e841 2300 	strex	r3, r2, [r1]
 8008f02:	613b      	str	r3, [r7, #16]
   return(result);
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1e4      	bne.n	8008ed4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f0a:	e007      	b.n	8008f1c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	699a      	ldr	r2, [r3, #24]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f042 0208 	orr.w	r2, r2, #8
 8008f1a:	619a      	str	r2, [r3, #24]
}
 8008f1c:	bf00      	nop
 8008f1e:	37b0      	adds	r7, #176	; 0xb0
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	40008000 	.word	0x40008000
 8008f28:	0800885d 	.word	0x0800885d

08008f2c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b0ae      	sub	sp, #184	; 0xb8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f3a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	69db      	ldr	r3, [r3, #28]
 8008f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f62:	2b22      	cmp	r3, #34	; 0x22
 8008f64:	f040 8186 	bne.w	8009274 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f6e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f72:	e129      	b.n	80091c8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008f86:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008f8a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008f8e:	4013      	ands	r3, r2
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f9c:	1c9a      	adds	r2, r3, #2
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	3b01      	subs	r3, #1
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	69db      	ldr	r3, [r3, #28]
 8008fba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008fbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fc2:	f003 0307 	and.w	r3, r3, #7
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d053      	beq.n	8009072 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008fca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fce:	f003 0301 	and.w	r3, r3, #1
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d011      	beq.n	8008ffa <UART_RxISR_16BIT_FIFOEN+0xce>
 8008fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00b      	beq.n	8008ffa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff0:	f043 0201 	orr.w	r2, r3, #1
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ffa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ffe:	f003 0302 	and.w	r3, r3, #2
 8009002:	2b00      	cmp	r3, #0
 8009004:	d011      	beq.n	800902a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009006:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800900a:	f003 0301 	and.w	r3, r3, #1
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00b      	beq.n	800902a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2202      	movs	r2, #2
 8009018:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009020:	f043 0204 	orr.w	r2, r3, #4
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800902a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800902e:	f003 0304 	and.w	r3, r3, #4
 8009032:	2b00      	cmp	r3, #0
 8009034:	d011      	beq.n	800905a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009036:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00b      	beq.n	800905a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2204      	movs	r2, #4
 8009048:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009050:	f043 0202 	orr.w	r2, r3, #2
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009060:	2b00      	cmp	r3, #0
 8009062:	d006      	beq.n	8009072 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7fe fd61 	bl	8007b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009078:	b29b      	uxth	r3, r3
 800907a:	2b00      	cmp	r3, #0
 800907c:	f040 80a4 	bne.w	80091c8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009088:	e853 3f00 	ldrex	r3, [r3]
 800908c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800908e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009094:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	461a      	mov	r2, r3
 800909e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80090a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090a6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80090aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80090ae:	e841 2300 	strex	r3, r2, [r1]
 80090b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80090b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e2      	bne.n	8009080 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3308      	adds	r3, #8
 80090c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090c4:	e853 3f00 	ldrex	r3, [r3]
 80090c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80090ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090d0:	f023 0301 	bic.w	r3, r3, #1
 80090d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3308      	adds	r3, #8
 80090de:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80090e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80090e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80090e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80090ea:	e841 2300 	strex	r3, r2, [r1]
 80090ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80090f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1e1      	bne.n	80090ba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2220      	movs	r2, #32
 80090fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2200      	movs	r2, #0
 8009102:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2200      	movs	r2, #0
 8009108:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a5f      	ldr	r2, [pc, #380]	; (800928c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d021      	beq.n	8009158 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d01a      	beq.n	8009158 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800912a:	e853 3f00 	ldrex	r3, [r3]
 800912e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009130:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009132:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009136:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009144:	65bb      	str	r3, [r7, #88]	; 0x58
 8009146:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009148:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800914a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800914c:	e841 2300 	strex	r3, r2, [r1]
 8009150:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1e4      	bne.n	8009122 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800915c:	2b01      	cmp	r3, #1
 800915e:	d130      	bne.n	80091c2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800916c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916e:	e853 3f00 	ldrex	r3, [r3]
 8009172:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009176:	f023 0310 	bic.w	r3, r3, #16
 800917a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009188:	647b      	str	r3, [r7, #68]	; 0x44
 800918a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800918e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009190:	e841 2300 	strex	r3, r2, [r1]
 8009194:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1e4      	bne.n	8009166 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	f003 0310 	and.w	r3, r3, #16
 80091a6:	2b10      	cmp	r3, #16
 80091a8:	d103      	bne.n	80091b2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2210      	movs	r2, #16
 80091b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091b8:	4619      	mov	r1, r3
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f7fe fcc0 	bl	8007b40 <HAL_UARTEx_RxEventCallback>
 80091c0:	e002      	b.n	80091c8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7f9 fa0c 	bl	80025e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091c8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d006      	beq.n	80091de <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80091d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80091d4:	f003 0320 	and.w	r3, r3, #32
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f47f aecb 	bne.w	8008f74 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091e4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091e8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d049      	beq.n	8009284 <UART_RxISR_16BIT_FIFOEN+0x358>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091f6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d242      	bcs.n	8009284 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	3308      	adds	r3, #8
 8009204:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009208:	e853 3f00 	ldrex	r3, [r3]
 800920c:	623b      	str	r3, [r7, #32]
   return(result);
 800920e:	6a3b      	ldr	r3, [r7, #32]
 8009210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3308      	adds	r3, #8
 800921e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009222:	633a      	str	r2, [r7, #48]	; 0x30
 8009224:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009226:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800922a:	e841 2300 	strex	r3, r2, [r1]
 800922e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1e3      	bne.n	80091fe <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a15      	ldr	r2, [pc, #84]	; (8009290 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800923a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	e853 3f00 	ldrex	r3, [r3]
 8009248:	60fb      	str	r3, [r7, #12]
   return(result);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f043 0320 	orr.w	r3, r3, #32
 8009250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	461a      	mov	r2, r3
 800925a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800925e:	61fb      	str	r3, [r7, #28]
 8009260:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009262:	69b9      	ldr	r1, [r7, #24]
 8009264:	69fa      	ldr	r2, [r7, #28]
 8009266:	e841 2300 	strex	r3, r2, [r1]
 800926a:	617b      	str	r3, [r7, #20]
   return(result);
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1e4      	bne.n	800923c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009272:	e007      	b.n	8009284 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	699a      	ldr	r2, [r3, #24]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f042 0208 	orr.w	r2, r2, #8
 8009282:	619a      	str	r2, [r3, #24]
}
 8009284:	bf00      	nop
 8009286:	37b8      	adds	r7, #184	; 0xb8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	40008000 	.word	0x40008000
 8009290:	08008a15 	.word	0x08008a15

08009294 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800929c:	bf00      	nop
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80092b0:	bf00      	nop
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80092c4:	bf00      	nop
 80092c6:	370c      	adds	r7, #12
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b085      	sub	sp, #20
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d101      	bne.n	80092e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80092e2:	2302      	movs	r3, #2
 80092e4:	e027      	b.n	8009336 <HAL_UARTEx_DisableFifoMode+0x66>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2224      	movs	r2, #36	; 0x24
 80092f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f022 0201 	bic.w	r2, r2, #1
 800930c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009314:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2220      	movs	r2, #32
 8009328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3714      	adds	r7, #20
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009352:	2b01      	cmp	r3, #1
 8009354:	d101      	bne.n	800935a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009356:	2302      	movs	r3, #2
 8009358:	e02d      	b.n	80093b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2201      	movs	r2, #1
 800935e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2224      	movs	r2, #36	; 0x24
 8009366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f022 0201 	bic.w	r2, r2, #1
 8009380:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	683a      	ldr	r2, [r7, #0]
 8009392:	430a      	orrs	r2, r1
 8009394:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f850 	bl	800943c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2220      	movs	r2, #32
 80093a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b084      	sub	sp, #16
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d101      	bne.n	80093d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80093d2:	2302      	movs	r3, #2
 80093d4:	e02d      	b.n	8009432 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2201      	movs	r2, #1
 80093da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2224      	movs	r2, #36	; 0x24
 80093e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f022 0201 	bic.w	r2, r2, #1
 80093fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	430a      	orrs	r2, r1
 8009410:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f812 	bl	800943c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2220      	movs	r2, #32
 8009424:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009430:	2300      	movs	r3, #0
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
	...

0800943c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800943c:	b480      	push	{r7}
 800943e:	b085      	sub	sp, #20
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009448:	2b00      	cmp	r3, #0
 800944a:	d108      	bne.n	800945e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800945c:	e031      	b.n	80094c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800945e:	2308      	movs	r3, #8
 8009460:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009462:	2308      	movs	r3, #8
 8009464:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	0e5b      	lsrs	r3, r3, #25
 800946e:	b2db      	uxtb	r3, r3
 8009470:	f003 0307 	and.w	r3, r3, #7
 8009474:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	0f5b      	lsrs	r3, r3, #29
 800947e:	b2db      	uxtb	r3, r3
 8009480:	f003 0307 	and.w	r3, r3, #7
 8009484:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009486:	7bbb      	ldrb	r3, [r7, #14]
 8009488:	7b3a      	ldrb	r2, [r7, #12]
 800948a:	4911      	ldr	r1, [pc, #68]	; (80094d0 <UARTEx_SetNbDataToProcess+0x94>)
 800948c:	5c8a      	ldrb	r2, [r1, r2]
 800948e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009492:	7b3a      	ldrb	r2, [r7, #12]
 8009494:	490f      	ldr	r1, [pc, #60]	; (80094d4 <UARTEx_SetNbDataToProcess+0x98>)
 8009496:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009498:	fb93 f3f2 	sdiv	r3, r3, r2
 800949c:	b29a      	uxth	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
 80094a6:	7b7a      	ldrb	r2, [r7, #13]
 80094a8:	4909      	ldr	r1, [pc, #36]	; (80094d0 <UARTEx_SetNbDataToProcess+0x94>)
 80094aa:	5c8a      	ldrb	r2, [r1, r2]
 80094ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80094b0:	7b7a      	ldrb	r2, [r7, #13]
 80094b2:	4908      	ldr	r1, [pc, #32]	; (80094d4 <UARTEx_SetNbDataToProcess+0x98>)
 80094b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80094b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80094c2:	bf00      	nop
 80094c4:	3714      	adds	r7, #20
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	08010e04 	.word	0x08010e04
 80094d4:	08010e0c 	.word	0x08010e0c

080094d8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b088      	sub	sp, #32
 80094dc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80094de:	2300      	movs	r3, #0
 80094e0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80094e2:	f107 0308 	add.w	r3, r7, #8
 80094e6:	2218      	movs	r2, #24
 80094e8:	2100      	movs	r1, #0
 80094ea:	4618      	mov	r0, r3
 80094ec:	f001 fc9c 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x3f;
 80094f0:	233f      	movs	r3, #63	; 0x3f
 80094f2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80094f4:	2381      	movs	r3, #129	; 0x81
 80094f6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80094f8:	1dfb      	adds	r3, r7, #7
 80094fa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80094fc:	2301      	movs	r3, #1
 80094fe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009500:	f107 0308 	add.w	r3, r7, #8
 8009504:	2100      	movs	r1, #0
 8009506:	4618      	mov	r0, r3
 8009508:	f001 fb4c 	bl	800aba4 <hci_send_req>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	da01      	bge.n	8009516 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009512:	23ff      	movs	r3, #255	; 0xff
 8009514:	e000      	b.n	8009518 <aci_gap_set_non_discoverable+0x40>
  return status;
 8009516:	79fb      	ldrb	r3, [r7, #7]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3720      	adds	r7, #32
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8009520:	b5b0      	push	{r4, r5, r7, lr}
 8009522:	b0ce      	sub	sp, #312	; 0x138
 8009524:	af00      	add	r7, sp, #0
 8009526:	4605      	mov	r5, r0
 8009528:	460c      	mov	r4, r1
 800952a:	4610      	mov	r0, r2
 800952c:	4619      	mov	r1, r3
 800952e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009532:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009536:	462a      	mov	r2, r5
 8009538:	701a      	strb	r2, [r3, #0]
 800953a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800953e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009542:	4622      	mov	r2, r4
 8009544:	801a      	strh	r2, [r3, #0]
 8009546:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800954a:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800954e:	4602      	mov	r2, r0
 8009550:	801a      	strh	r2, [r3, #0]
 8009552:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009556:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800955a:	460a      	mov	r2, r1
 800955c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800955e:	f107 0310 	add.w	r3, r7, #16
 8009562:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8009566:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800956a:	3308      	adds	r3, #8
 800956c:	f107 0210 	add.w	r2, r7, #16
 8009570:	4413      	add	r3, r2
 8009572:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8009576:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800957a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800957e:	4413      	add	r3, r2
 8009580:	3309      	adds	r3, #9
 8009582:	f107 0210 	add.w	r2, r7, #16
 8009586:	4413      	add	r3, r2
 8009588:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800958c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009590:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009594:	2200      	movs	r2, #0
 8009596:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800959e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80095a2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80095a6:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80095aa:	7812      	ldrb	r2, [r2, #0]
 80095ac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80095ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095b2:	3301      	adds	r3, #1
 80095b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80095b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80095bc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80095c0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80095c4:	8812      	ldrh	r2, [r2, #0]
 80095c6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80095ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095ce:	3302      	adds	r3, #2
 80095d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80095d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80095d8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80095dc:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80095e0:	8812      	ldrh	r2, [r2, #0]
 80095e2:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80095e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095ea:	3302      	adds	r3, #2
 80095ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80095f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80095f4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80095f8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80095fc:	7812      	ldrb	r2, [r2, #0]
 80095fe:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009600:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009604:	3301      	adds	r3, #1
 8009606:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800960a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800960e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009612:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009614:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009618:	3301      	adds	r3, #1
 800961a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800961e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009622:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009626:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8009628:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800962c:	3301      	adds	r3, #1
 800962e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8009632:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009636:	3308      	adds	r3, #8
 8009638:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800963c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8009640:	4618      	mov	r0, r3
 8009642:	f001 fbe1 	bl	800ae08 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8009646:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800964a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800964e:	4413      	add	r3, r2
 8009650:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8009654:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009658:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800965c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800965e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009662:	3301      	adds	r3, #1
 8009664:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8009668:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800966c:	3301      	adds	r3, #1
 800966e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009672:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8009676:	4618      	mov	r0, r3
 8009678:	f001 fbc6 	bl	800ae08 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800967c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8009680:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009684:	4413      	add	r3, r2
 8009686:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800968a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800968e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8009692:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009694:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009698:	3302      	adds	r3, #2
 800969a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800969e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80096a2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80096a6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80096a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096ac:	3302      	adds	r3, #2
 80096ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80096b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096b6:	2218      	movs	r2, #24
 80096b8:	2100      	movs	r1, #0
 80096ba:	4618      	mov	r0, r3
 80096bc:	f001 fbb4 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x3f;
 80096c0:	233f      	movs	r3, #63	; 0x3f
 80096c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80096c6:	2383      	movs	r3, #131	; 0x83
 80096c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80096cc:	f107 0310 	add.w	r3, r7, #16
 80096d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80096d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80096d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80096dc:	f107 030f 	add.w	r3, r7, #15
 80096e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80096e4:	2301      	movs	r3, #1
 80096e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096ee:	2100      	movs	r1, #0
 80096f0:	4618      	mov	r0, r3
 80096f2:	f001 fa57 	bl	800aba4 <hci_send_req>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	da01      	bge.n	8009700 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80096fc:	23ff      	movs	r3, #255	; 0xff
 80096fe:	e004      	b.n	800970a <aci_gap_set_discoverable+0x1ea>
  return status;
 8009700:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009704:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009708:	781b      	ldrb	r3, [r3, #0]
}
 800970a:	4618      	mov	r0, r3
 800970c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8009710:	46bd      	mov	sp, r7
 8009712:	bdb0      	pop	{r4, r5, r7, pc}

08009714 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b0cc      	sub	sp, #304	; 0x130
 8009718:	af00      	add	r7, sp, #0
 800971a:	4602      	mov	r2, r0
 800971c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009720:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009724:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8009726:	f107 0310 	add.w	r3, r7, #16
 800972a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800972e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009732:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009736:	2200      	movs	r2, #0
 8009738:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800973a:	2300      	movs	r3, #0
 800973c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8009740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009744:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009748:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800974c:	7812      	ldrb	r2, [r2, #0]
 800974e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009750:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009754:	3301      	adds	r3, #1
 8009756:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800975a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800975e:	2218      	movs	r2, #24
 8009760:	2100      	movs	r1, #0
 8009762:	4618      	mov	r0, r3
 8009764:	f001 fb60 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009768:	233f      	movs	r3, #63	; 0x3f
 800976a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800976e:	2385      	movs	r3, #133	; 0x85
 8009770:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009774:	f107 0310 	add.w	r3, r7, #16
 8009778:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800977c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009780:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009784:	f107 030f 	add.w	r3, r7, #15
 8009788:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800978c:	2301      	movs	r3, #1
 800978e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009792:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009796:	2100      	movs	r1, #0
 8009798:	4618      	mov	r0, r3
 800979a:	f001 fa03 	bl	800aba4 <hci_send_req>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	da01      	bge.n	80097a8 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80097a4:	23ff      	movs	r3, #255	; 0xff
 80097a6:	e004      	b.n	80097b2 <aci_gap_set_io_capability+0x9e>
  return status;
 80097a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ac:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80097b0:	781b      	ldrb	r3, [r3, #0]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}

080097bc <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80097bc:	b5b0      	push	{r4, r5, r7, lr}
 80097be:	b0cc      	sub	sp, #304	; 0x130
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	4605      	mov	r5, r0
 80097c4:	460c      	mov	r4, r1
 80097c6:	4610      	mov	r0, r2
 80097c8:	4619      	mov	r1, r3
 80097ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ce:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80097d2:	462a      	mov	r2, r5
 80097d4:	701a      	strb	r2, [r3, #0]
 80097d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097da:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80097de:	4622      	mov	r2, r4
 80097e0:	701a      	strb	r2, [r3, #0]
 80097e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097e6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80097ea:	4602      	mov	r2, r0
 80097ec:	701a      	strb	r2, [r3, #0]
 80097ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80097f6:	460a      	mov	r2, r1
 80097f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80097fa:	f107 0310 	add.w	r3, r7, #16
 80097fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009806:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800980a:	2200      	movs	r2, #0
 800980c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8009814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009818:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800981c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009820:	7812      	ldrb	r2, [r2, #0]
 8009822:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009824:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009828:	3301      	adds	r3, #1
 800982a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800982e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009832:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009836:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800983a:	7812      	ldrb	r2, [r2, #0]
 800983c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800983e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009842:	3301      	adds	r3, #1
 8009844:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8009848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800984c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009850:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009854:	7812      	ldrb	r2, [r2, #0]
 8009856:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009858:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800985c:	3301      	adds	r3, #1
 800985e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8009862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009866:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800986a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800986e:	7812      	ldrb	r2, [r2, #0]
 8009870:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8009872:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009876:	3301      	adds	r3, #1
 8009878:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800987c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009880:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8009884:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009886:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800988a:	3301      	adds	r3, #1
 800988c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8009890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009894:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8009898:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800989a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800989e:	3301      	adds	r3, #1
 80098a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80098a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098a8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80098ac:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80098ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098b2:	3301      	adds	r3, #1
 80098b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80098b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098bc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80098c0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80098c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098c8:	3304      	adds	r3, #4
 80098ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80098ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098d2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80098d6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80098d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098dc:	3301      	adds	r3, #1
 80098de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80098e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80098e6:	2218      	movs	r2, #24
 80098e8:	2100      	movs	r1, #0
 80098ea:	4618      	mov	r0, r3
 80098ec:	f001 fa9c 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x3f;
 80098f0:	233f      	movs	r3, #63	; 0x3f
 80098f2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80098f6:	2386      	movs	r3, #134	; 0x86
 80098f8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80098fc:	f107 0310 	add.w	r3, r7, #16
 8009900:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009904:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009908:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800990c:	f107 030f 	add.w	r3, r7, #15
 8009910:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009914:	2301      	movs	r3, #1
 8009916:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800991a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800991e:	2100      	movs	r1, #0
 8009920:	4618      	mov	r0, r3
 8009922:	f001 f93f 	bl	800aba4 <hci_send_req>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	da01      	bge.n	8009930 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800992c:	23ff      	movs	r3, #255	; 0xff
 800992e:	e004      	b.n	800993a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8009930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009934:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009938:	781b      	ldrb	r3, [r3, #0]
}
 800993a:	4618      	mov	r0, r3
 800993c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009940:	46bd      	mov	sp, r7
 8009942:	bdb0      	pop	{r4, r5, r7, pc}

08009944 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b0cc      	sub	sp, #304	; 0x130
 8009948:	af00      	add	r7, sp, #0
 800994a:	4602      	mov	r2, r0
 800994c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009954:	6019      	str	r1, [r3, #0]
 8009956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800995a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800995e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8009960:	f107 0310 	add.w	r3, r7, #16
 8009964:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800996c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009970:	2200      	movs	r2, #0
 8009972:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009974:	2300      	movs	r3, #0
 8009976:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800997a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800997e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009982:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009986:	8812      	ldrh	r2, [r2, #0]
 8009988:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800998a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800998e:	3302      	adds	r3, #2
 8009990:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8009994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009998:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800999c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80099a0:	6812      	ldr	r2, [r2, #0]
 80099a2:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80099a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099aa:	3304      	adds	r3, #4
 80099ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80099b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80099b4:	2218      	movs	r2, #24
 80099b6:	2100      	movs	r1, #0
 80099b8:	4618      	mov	r0, r3
 80099ba:	f001 fa35 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x3f;
 80099be:	233f      	movs	r3, #63	; 0x3f
 80099c0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 80099c4:	2388      	movs	r3, #136	; 0x88
 80099c6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80099ca:	f107 0310 	add.w	r3, r7, #16
 80099ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80099d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80099da:	f107 030f 	add.w	r3, r7, #15
 80099de:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80099e2:	2301      	movs	r3, #1
 80099e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80099e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80099ec:	2100      	movs	r1, #0
 80099ee:	4618      	mov	r0, r3
 80099f0:	f001 f8d8 	bl	800aba4 <hci_send_req>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	da01      	bge.n	80099fe <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80099fa:	23ff      	movs	r3, #255	; 0xff
 80099fc:	e004      	b.n	8009a08 <aci_gap_pass_key_resp+0xc4>
  return status;
 80099fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a02:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009a06:	781b      	ldrb	r3, [r3, #0]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8009a12:	b590      	push	{r4, r7, lr}
 8009a14:	b0cd      	sub	sp, #308	; 0x134
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	4604      	mov	r4, r0
 8009a1a:	4608      	mov	r0, r1
 8009a1c:	4611      	mov	r1, r2
 8009a1e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a22:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8009a26:	6013      	str	r3, [r2, #0]
 8009a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a2c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009a30:	4622      	mov	r2, r4
 8009a32:	701a      	strb	r2, [r3, #0]
 8009a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a38:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	701a      	strb	r2, [r3, #0]
 8009a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a44:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009a48:	460a      	mov	r2, r1
 8009a4a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8009a4c:	f107 0310 	add.w	r3, r7, #16
 8009a50:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009a54:	f107 0308 	add.w	r3, r7, #8
 8009a58:	2207      	movs	r2, #7
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f001 f9e3 	bl	800ae28 <Osal_MemSet>
  int index_input = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8009a68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a70:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009a74:	7812      	ldrb	r2, [r2, #0]
 8009a76:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009a78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8009a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a8a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009a8e:	7812      	ldrb	r2, [r2, #0]
 8009a90:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009a92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a96:	3301      	adds	r3, #1
 8009a98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009aa0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009aa4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009aa8:	7812      	ldrb	r2, [r2, #0]
 8009aaa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009aac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ab6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009aba:	2218      	movs	r2, #24
 8009abc:	2100      	movs	r1, #0
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f001 f9b2 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ac4:	233f      	movs	r3, #63	; 0x3f
 8009ac6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8009aca:	238a      	movs	r3, #138	; 0x8a
 8009acc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009ad0:	f107 0310 	add.w	r3, r7, #16
 8009ad4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009ad8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009adc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8009ae0:	f107 0308 	add.w	r3, r7, #8
 8009ae4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009ae8:	2307      	movs	r3, #7
 8009aea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009aee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009af2:	2100      	movs	r1, #0
 8009af4:	4618      	mov	r0, r3
 8009af6:	f001 f855 	bl	800aba4 <hci_send_req>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	da01      	bge.n	8009b04 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8009b00:	23ff      	movs	r3, #255	; 0xff
 8009b02:	e02e      	b.n	8009b62 <aci_gap_init+0x150>
  if ( resp.Status )
 8009b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b08:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d005      	beq.n	8009b1e <aci_gap_init+0x10c>
    return resp.Status;
 8009b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	e021      	b.n	8009b62 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8009b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b22:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009b26:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8009b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b3c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009b40:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8009b4a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8009b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b50:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8009b54:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8009b5e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd90      	pop	{r4, r7, pc}

08009b6c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b0cc      	sub	sp, #304	; 0x130
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4602      	mov	r2, r0
 8009b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009b7c:	6019      	str	r1, [r3, #0]
 8009b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b82:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009b86:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009b88:	f107 0310 	add.w	r3, r7, #16
 8009b8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b94:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009b98:	2200      	movs	r2, #0
 8009b9a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8009ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ba6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009baa:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009bae:	7812      	ldrb	r2, [r2, #0]
 8009bb0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009bb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bc0:	1c58      	adds	r0, r3, #1
 8009bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bc6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009bca:	781a      	ldrb	r2, [r3, #0]
 8009bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009bd4:	6819      	ldr	r1, [r3, #0]
 8009bd6:	f001 f917 	bl	800ae08 <Osal_MemCpy>
  index_input += AdvDataLen;
 8009bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009bde:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009be8:	4413      	add	r3, r2
 8009bea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009bee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009bf2:	2218      	movs	r2, #24
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f001 f916 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009bfc:	233f      	movs	r3, #63	; 0x3f
 8009bfe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8009c02:	238e      	movs	r3, #142	; 0x8e
 8009c04:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009c08:	f107 0310 	add.w	r3, r7, #16
 8009c0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009c10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c14:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009c18:	f107 030f 	add.w	r3, r7, #15
 8009c1c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009c20:	2301      	movs	r3, #1
 8009c22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f000 ffb9 	bl	800aba4 <hci_send_req>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	da01      	bge.n	8009c3c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009c38:	23ff      	movs	r3, #255	; 0xff
 8009c3a:	e004      	b.n	8009c46 <aci_gap_update_adv_data+0xda>
  return status;
 8009c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c40:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009c44:	781b      	ldrb	r3, [r3, #0]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b088      	sub	sp, #32
 8009c54:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c5a:	f107 0308 	add.w	r3, r7, #8
 8009c5e:	2218      	movs	r2, #24
 8009c60:	2100      	movs	r1, #0
 8009c62:	4618      	mov	r0, r3
 8009c64:	f001 f8e0 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009c68:	233f      	movs	r3, #63	; 0x3f
 8009c6a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009c6c:	2392      	movs	r3, #146	; 0x92
 8009c6e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009c70:	1dfb      	adds	r3, r7, #7
 8009c72:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009c74:	2301      	movs	r3, #1
 8009c76:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c78:	f107 0308 	add.w	r3, r7, #8
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f000 ff90 	bl	800aba4 <hci_send_req>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	da01      	bge.n	8009c8e <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009c8a:	23ff      	movs	r3, #255	; 0xff
 8009c8c:	e000      	b.n	8009c90 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8009c8e:	79fb      	ldrb	r3, [r7, #7]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3720      	adds	r7, #32
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b0cc      	sub	sp, #304	; 0x130
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ca4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009ca8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 8009caa:	f107 0310 	add.w	r3, r7, #16
 8009cae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cb6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009cba:	2200      	movs	r2, #0
 8009cbc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009cc8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ccc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009cd0:	8812      	ldrh	r2, [r2, #0]
 8009cd2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009cd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009cd8:	3302      	adds	r3, #2
 8009cda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009cde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009ce2:	2218      	movs	r2, #24
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f001 f89e 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009cec:	233f      	movs	r3, #63	; 0x3f
 8009cee:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 8009cf2:	2395      	movs	r3, #149	; 0x95
 8009cf4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009cf8:	f107 0310 	add.w	r3, r7, #16
 8009cfc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009d00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d04:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009d08:	f107 030f 	add.w	r3, r7, #15
 8009d0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009d10:	2301      	movs	r3, #1
 8009d12:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d16:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009d1a:	2100      	movs	r1, #0
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f000 ff41 	bl	800aba4 <hci_send_req>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	da01      	bge.n	8009d2c <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 8009d28:	23ff      	movs	r3, #255	; 0xff
 8009d2a:	e004      	b.n	8009d36 <aci_gap_allow_rebond+0x9e>
  return status;
 8009d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d30:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009d34:	781b      	ldrb	r3, [r3, #0]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b0cc      	sub	sp, #304	; 0x130
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	4602      	mov	r2, r0
 8009d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d4c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009d50:	801a      	strh	r2, [r3, #0]
 8009d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d56:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009d5a:	460a      	mov	r2, r1
 8009d5c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8009d5e:	f107 0310 	add.w	r3, r7, #16
 8009d62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d6a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009d6e:	2200      	movs	r2, #0
 8009d70:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009d72:	2300      	movs	r3, #0
 8009d74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d7c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d80:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009d84:	8812      	ldrh	r2, [r2, #0]
 8009d86:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009d88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d8c:	3302      	adds	r3, #2
 8009d8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8009d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d9a:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009d9e:	7812      	ldrb	r2, [r2, #0]
 8009da0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009da2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009da6:	3301      	adds	r3, #1
 8009da8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009dac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009db0:	2218      	movs	r2, #24
 8009db2:	2100      	movs	r1, #0
 8009db4:	4618      	mov	r0, r3
 8009db6:	f001 f837 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009dba:	233f      	movs	r3, #63	; 0x3f
 8009dbc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8009dc0:	23a5      	movs	r3, #165	; 0xa5
 8009dc2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009dc6:	f107 0310 	add.w	r3, r7, #16
 8009dca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009dce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009dd6:	f107 030f 	add.w	r3, r7, #15
 8009dda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009dde:	2301      	movs	r3, #1
 8009de0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009de4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009de8:	2100      	movs	r1, #0
 8009dea:	4618      	mov	r0, r3
 8009dec:	f000 feda 	bl	800aba4 <hci_send_req>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	da01      	bge.n	8009dfa <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8009df6:	23ff      	movs	r3, #255	; 0xff
 8009df8:	e004      	b.n	8009e04 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8009dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009dfe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009e02:	781b      	ldrb	r3, [r3, #0]
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b088      	sub	sp, #32
 8009e12:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009e14:	2300      	movs	r3, #0
 8009e16:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e18:	f107 0308 	add.w	r3, r7, #8
 8009e1c:	2218      	movs	r2, #24
 8009e1e:	2100      	movs	r1, #0
 8009e20:	4618      	mov	r0, r3
 8009e22:	f001 f801 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009e26:	233f      	movs	r3, #63	; 0x3f
 8009e28:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009e2a:	f240 1301 	movw	r3, #257	; 0x101
 8009e2e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009e30:	1dfb      	adds	r3, r7, #7
 8009e32:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009e34:	2301      	movs	r3, #1
 8009e36:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e38:	f107 0308 	add.w	r3, r7, #8
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f000 feb0 	bl	800aba4 <hci_send_req>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	da01      	bge.n	8009e4e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8009e4a:	23ff      	movs	r3, #255	; 0xff
 8009e4c:	e000      	b.n	8009e50 <aci_gatt_init+0x42>
  return status;
 8009e4e:	79fb      	ldrb	r3, [r7, #7]
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3720      	adds	r7, #32
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8009e58:	b590      	push	{r4, r7, lr}
 8009e5a:	b0cf      	sub	sp, #316	; 0x13c
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	4604      	mov	r4, r0
 8009e60:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8009e64:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8009e68:	6001      	str	r1, [r0, #0]
 8009e6a:	4610      	mov	r0, r2
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009e72:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009e76:	4622      	mov	r2, r4
 8009e78:	701a      	strb	r2, [r3, #0]
 8009e7a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009e7e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009e82:	4602      	mov	r2, r0
 8009e84:	701a      	strb	r2, [r3, #0]
 8009e86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009e8a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009e8e:	460a      	mov	r2, r1
 8009e90:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009e92:	f107 0310 	add.w	r3, r7, #16
 8009e96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8009e9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009e9e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d00a      	beq.n	8009ebe <aci_gatt_add_service+0x66>
 8009ea8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009eac:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d101      	bne.n	8009eba <aci_gatt_add_service+0x62>
 8009eb6:	2311      	movs	r3, #17
 8009eb8:	e002      	b.n	8009ec0 <aci_gatt_add_service+0x68>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e000      	b.n	8009ec0 <aci_gatt_add_service+0x68>
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	f107 0210 	add.w	r2, r7, #16
 8009ec4:	4413      	add	r3, r2
 8009ec6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009eca:	f107 030c 	add.w	r3, r7, #12
 8009ece:	2203      	movs	r2, #3
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f000 ffa8 	bl	800ae28 <Osal_MemSet>
  int index_input = 0;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8009ede:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009ee2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009ee6:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8009eea:	7812      	ldrb	r2, [r2, #0]
 8009eec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009eee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8009ef8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009efc:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d002      	beq.n	8009f0c <aci_gatt_add_service+0xb4>
 8009f06:	2b02      	cmp	r3, #2
 8009f08:	d004      	beq.n	8009f14 <aci_gatt_add_service+0xbc>
 8009f0a:	e007      	b.n	8009f1c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8009f0c:	2302      	movs	r3, #2
 8009f0e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009f12:	e005      	b.n	8009f20 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009f14:	2310      	movs	r3, #16
 8009f16:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009f1a:	e001      	b.n	8009f20 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009f1c:	2397      	movs	r3, #151	; 0x97
 8009f1e:	e06c      	b.n	8009ffa <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009f20:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009f24:	1c58      	adds	r0, r3, #1
 8009f26:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009f2a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009f2e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009f32:	6819      	ldr	r1, [r3, #0]
 8009f34:	f000 ff68 	bl	800ae08 <Osal_MemCpy>
    index_input += size;
 8009f38:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8009f3c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009f40:	4413      	add	r3, r2
 8009f42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8009f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f4a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009f4e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009f52:	7812      	ldrb	r2, [r2, #0]
 8009f54:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009f56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f64:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009f68:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8009f6c:	7812      	ldrb	r2, [r2, #0]
 8009f6e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009f70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f74:	3301      	adds	r3, #1
 8009f76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009f7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009f7e:	2218      	movs	r2, #24
 8009f80:	2100      	movs	r1, #0
 8009f82:	4618      	mov	r0, r3
 8009f84:	f000 ff50 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009f88:	233f      	movs	r3, #63	; 0x3f
 8009f8a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8009f8e:	f44f 7381 	mov.w	r3, #258	; 0x102
 8009f92:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009f96:	f107 0310 	add.w	r3, r7, #16
 8009f9a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009f9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009fa2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8009fa6:	f107 030c 	add.w	r3, r7, #12
 8009faa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009fae:	2303      	movs	r3, #3
 8009fb0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009fb4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009fb8:	2100      	movs	r1, #0
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f000 fdf2 	bl	800aba4 <hci_send_req>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	da01      	bge.n	8009fca <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8009fc6:	23ff      	movs	r3, #255	; 0xff
 8009fc8:	e017      	b.n	8009ffa <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8009fca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009fce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d005      	beq.n	8009fe4 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8009fd8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009fdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	e00a      	b.n	8009ffa <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8009fe4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009fe8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009fec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8009ff6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800a000:	46bd      	mov	sp, r7
 800a002:	bd90      	pop	{r4, r7, pc}

0800a004 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800a004:	b590      	push	{r4, r7, lr}
 800a006:	b0d1      	sub	sp, #324	; 0x144
 800a008:	af00      	add	r7, sp, #0
 800a00a:	4604      	mov	r4, r0
 800a00c:	4608      	mov	r0, r1
 800a00e:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800a012:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800a016:	600a      	str	r2, [r1, #0]
 800a018:	4619      	mov	r1, r3
 800a01a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a01e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a022:	4622      	mov	r2, r4
 800a024:	801a      	strh	r2, [r3, #0]
 800a026:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a02a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a02e:	4602      	mov	r2, r0
 800a030:	701a      	strb	r2, [r3, #0]
 800a032:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a036:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800a03a:	460a      	mov	r2, r1
 800a03c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800a03e:	f107 0318 	add.w	r3, r7, #24
 800a042:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800a046:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a04a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d00a      	beq.n	800a06a <aci_gatt_add_char+0x66>
 800a054:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a058:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d101      	bne.n	800a066 <aci_gatt_add_char+0x62>
 800a062:	2313      	movs	r3, #19
 800a064:	e002      	b.n	800a06c <aci_gatt_add_char+0x68>
 800a066:	2303      	movs	r3, #3
 800a068:	e000      	b.n	800a06c <aci_gatt_add_char+0x68>
 800a06a:	2305      	movs	r3, #5
 800a06c:	f107 0218 	add.w	r2, r7, #24
 800a070:	4413      	add	r3, r2
 800a072:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a076:	f107 0314 	add.w	r3, r7, #20
 800a07a:	2203      	movs	r2, #3
 800a07c:	2100      	movs	r1, #0
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 fed2 	bl	800ae28 <Osal_MemSet>
  int index_input = 0;
 800a084:	2300      	movs	r3, #0
 800a086:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800a08a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a08e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a092:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800a096:	8812      	ldrh	r2, [r2, #0]
 800a098:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a09a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a09e:	3302      	adds	r3, #2
 800a0a0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800a0a4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a0a8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a0ac:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800a0b0:	7812      	ldrb	r2, [r2, #0]
 800a0b2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a0b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800a0be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a0c2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d002      	beq.n	800a0d2 <aci_gatt_add_char+0xce>
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d004      	beq.n	800a0da <aci_gatt_add_char+0xd6>
 800a0d0:	e007      	b.n	800a0e2 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800a0d2:	2302      	movs	r3, #2
 800a0d4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800a0d8:	e005      	b.n	800a0e6 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800a0da:	2310      	movs	r3, #16
 800a0dc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800a0e0:	e001      	b.n	800a0e6 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800a0e2:	2397      	movs	r3, #151	; 0x97
 800a0e4:	e091      	b.n	800a20a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800a0e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a0ea:	1cd8      	adds	r0, r3, #3
 800a0ec:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800a0f0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a0f4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a0f8:	6819      	ldr	r1, [r3, #0]
 800a0fa:	f000 fe85 	bl	800ae08 <Osal_MemCpy>
    index_input += size;
 800a0fe:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800a102:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800a106:	4413      	add	r3, r2
 800a108:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800a10c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a110:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a114:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800a118:	8812      	ldrh	r2, [r2, #0]
 800a11a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a11c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a120:	3302      	adds	r3, #2
 800a122:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800a126:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a12a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800a12e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800a130:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a134:	3301      	adds	r3, #1
 800a136:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800a13a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a13e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800a142:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800a144:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a148:	3301      	adds	r3, #1
 800a14a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800a14e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a152:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800a156:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800a158:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a15c:	3301      	adds	r3, #1
 800a15e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800a162:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a166:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800a16a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800a16c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a170:	3301      	adds	r3, #1
 800a172:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800a176:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a17a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800a17e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800a180:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a184:	3301      	adds	r3, #1
 800a186:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a18a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a18e:	2218      	movs	r2, #24
 800a190:	2100      	movs	r1, #0
 800a192:	4618      	mov	r0, r3
 800a194:	f000 fe48 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a198:	233f      	movs	r3, #63	; 0x3f
 800a19a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800a19e:	f44f 7382 	mov.w	r3, #260	; 0x104
 800a1a2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800a1a6:	f107 0318 	add.w	r3, r7, #24
 800a1aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800a1ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a1b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800a1b6:	f107 0314 	add.w	r3, r7, #20
 800a1ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800a1be:	2303      	movs	r3, #3
 800a1c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a1c4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f000 fcea 	bl	800aba4 <hci_send_req>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	da01      	bge.n	800a1da <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800a1d6:	23ff      	movs	r3, #255	; 0xff
 800a1d8:	e017      	b.n	800a20a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800a1da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a1de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d005      	beq.n	800a1f4 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800a1e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a1ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	e00a      	b.n	800a20a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800a1f4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a1f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1fc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a200:	b29a      	uxth	r2, r3
 800a202:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800a206:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800a210:	46bd      	mov	sp, r7
 800a212:	bd90      	pop	{r4, r7, pc}

0800a214 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800a214:	b5b0      	push	{r4, r5, r7, lr}
 800a216:	b0cc      	sub	sp, #304	; 0x130
 800a218:	af00      	add	r7, sp, #0
 800a21a:	4605      	mov	r5, r0
 800a21c:	460c      	mov	r4, r1
 800a21e:	4610      	mov	r0, r2
 800a220:	4619      	mov	r1, r3
 800a222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a226:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a22a:	462a      	mov	r2, r5
 800a22c:	801a      	strh	r2, [r3, #0]
 800a22e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a232:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a236:	4622      	mov	r2, r4
 800a238:	801a      	strh	r2, [r3, #0]
 800a23a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a23e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800a242:	4602      	mov	r2, r0
 800a244:	701a      	strb	r2, [r3, #0]
 800a246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a24a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a24e:	460a      	mov	r2, r1
 800a250:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800a252:	f107 0310 	add.w	r3, r7, #16
 800a256:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a25a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a25e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a262:	2200      	movs	r2, #0
 800a264:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800a26c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a270:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a274:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a278:	8812      	ldrh	r2, [r2, #0]
 800a27a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a27c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a280:	3302      	adds	r3, #2
 800a282:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800a286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a28a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a28e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a292:	8812      	ldrh	r2, [r2, #0]
 800a294:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a296:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a29a:	3302      	adds	r3, #2
 800a29c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800a2a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a2a8:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800a2ac:	7812      	ldrb	r2, [r2, #0]
 800a2ae:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a2b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800a2ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a2c2:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800a2c6:	7812      	ldrb	r2, [r2, #0]
 800a2c8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a2ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800a2d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2d8:	1d98      	adds	r0, r3, #6
 800a2da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2de:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800a2ea:	f000 fd8d 	bl	800ae08 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800a2ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2f2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a302:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a306:	2218      	movs	r2, #24
 800a308:	2100      	movs	r1, #0
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 fd8c 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a310:	233f      	movs	r3, #63	; 0x3f
 800a312:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800a316:	f44f 7383 	mov.w	r3, #262	; 0x106
 800a31a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a31e:	f107 0310 	add.w	r3, r7, #16
 800a322:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a326:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a32a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a32e:	f107 030f 	add.w	r3, r7, #15
 800a332:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a336:	2301      	movs	r3, #1
 800a338:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a33c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a340:	2100      	movs	r1, #0
 800a342:	4618      	mov	r0, r3
 800a344:	f000 fc2e 	bl	800aba4 <hci_send_req>
 800a348:	4603      	mov	r3, r0
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	da01      	bge.n	800a352 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800a34e:	23ff      	movs	r3, #255	; 0xff
 800a350:	e004      	b.n	800a35c <aci_gatt_update_char_value+0x148>
  return status;
 800a352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a356:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a35a:	781b      	ldrb	r3, [r3, #0]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a362:	46bd      	mov	sp, r7
 800a364:	bdb0      	pop	{r4, r5, r7, pc}

0800a366 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b0cc      	sub	sp, #304	; 0x130
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a370:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a374:	601a      	str	r2, [r3, #0]
 800a376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a37a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a37e:	4602      	mov	r2, r0
 800a380:	701a      	strb	r2, [r3, #0]
 800a382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a386:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a38a:	460a      	mov	r2, r1
 800a38c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800a38e:	f107 0310 	add.w	r3, r7, #16
 800a392:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a39a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a39e:	2200      	movs	r2, #0
 800a3a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800a3a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a3b0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a3b4:	7812      	ldrb	r2, [r2, #0]
 800a3b6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a3b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3bc:	3301      	adds	r3, #1
 800a3be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800a3c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a3ca:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a3ce:	7812      	ldrb	r2, [r2, #0]
 800a3d0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a3d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800a3dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3e0:	1c98      	adds	r0, r3, #2
 800a3e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3e6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a3ea:	781a      	ldrb	r2, [r3, #0]
 800a3ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3f4:	6819      	ldr	r1, [r3, #0]
 800a3f6:	f000 fd07 	bl	800ae08 <Osal_MemCpy>
  index_input += Length;
 800a3fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3fe:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a408:	4413      	add	r3, r2
 800a40a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a40e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a412:	2218      	movs	r2, #24
 800a414:	2100      	movs	r1, #0
 800a416:	4618      	mov	r0, r3
 800a418:	f000 fd06 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a41c:	233f      	movs	r3, #63	; 0x3f
 800a41e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800a422:	230c      	movs	r3, #12
 800a424:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a428:	f107 0310 	add.w	r3, r7, #16
 800a42c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a430:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a434:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a438:	f107 030f 	add.w	r3, r7, #15
 800a43c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a440:	2301      	movs	r3, #1
 800a442:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a446:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a44a:	2100      	movs	r1, #0
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 fba9 	bl	800aba4 <hci_send_req>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	da01      	bge.n	800a45c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800a458:	23ff      	movs	r3, #255	; 0xff
 800a45a:	e004      	b.n	800a466 <aci_hal_write_config_data+0x100>
  return status;
 800a45c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a460:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a464:	781b      	ldrb	r3, [r3, #0]
}
 800a466:	4618      	mov	r0, r3
 800a468:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b0cc      	sub	sp, #304	; 0x130
 800a474:	af00      	add	r7, sp, #0
 800a476:	4602      	mov	r2, r0
 800a478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a47c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a480:	701a      	strb	r2, [r3, #0]
 800a482:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a486:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a48a:	460a      	mov	r2, r1
 800a48c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800a48e:	f107 0310 	add.w	r3, r7, #16
 800a492:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a49a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a49e:	2200      	movs	r2, #0
 800a4a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800a4a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a4b0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a4b4:	7812      	ldrb	r2, [r2, #0]
 800a4b6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a4b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4bc:	3301      	adds	r3, #1
 800a4be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800a4c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a4ca:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a4ce:	7812      	ldrb	r2, [r2, #0]
 800a4d0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a4d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a4dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a4e0:	2218      	movs	r2, #24
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	f000 fc9f 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a4ea:	233f      	movs	r3, #63	; 0x3f
 800a4ec:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800a4f0:	230f      	movs	r3, #15
 800a4f2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a4f6:	f107 0310 	add.w	r3, r7, #16
 800a4fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a4fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a502:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a506:	f107 030f 	add.w	r3, r7, #15
 800a50a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a50e:	2301      	movs	r3, #1
 800a510:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a514:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a518:	2100      	movs	r1, #0
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 fb42 	bl	800aba4 <hci_send_req>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	da01      	bge.n	800a52a <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800a526:	23ff      	movs	r3, #255	; 0xff
 800a528:	e004      	b.n	800a534 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800a52a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a52e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a532:	781b      	ldrb	r3, [r3, #0]
}
 800a534:	4618      	mov	r0, r3
 800a536:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b0cc      	sub	sp, #304	; 0x130
 800a542:	af00      	add	r7, sp, #0
 800a544:	4602      	mov	r2, r0
 800a546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a54a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a54e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800a550:	f107 0310 	add.w	r3, r7, #16
 800a554:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a55c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a560:	2200      	movs	r2, #0
 800a562:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a564:	2300      	movs	r3, #0
 800a566:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800a56a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a56e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a572:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a576:	8812      	ldrh	r2, [r2, #0]
 800a578:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a57a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a57e:	3302      	adds	r3, #2
 800a580:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a584:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a588:	2218      	movs	r2, #24
 800a58a:	2100      	movs	r1, #0
 800a58c:	4618      	mov	r0, r3
 800a58e:	f000 fc4b 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a592:	233f      	movs	r3, #63	; 0x3f
 800a594:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800a598:	2318      	movs	r3, #24
 800a59a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a59e:	f107 0310 	add.w	r3, r7, #16
 800a5a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a5a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a5ae:	f107 030f 	add.w	r3, r7, #15
 800a5b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a5bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f000 faee 	bl	800aba4 <hci_send_req>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	da01      	bge.n	800a5d2 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800a5ce:	23ff      	movs	r3, #255	; 0xff
 800a5d0:	e004      	b.n	800a5dc <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800a5d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5d6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a5da:	781b      	ldrb	r3, [r3, #0]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b088      	sub	sp, #32
 800a5ea:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a5f0:	f107 0308 	add.w	r3, r7, #8
 800a5f4:	2218      	movs	r2, #24
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f000 fc15 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x03;
 800a5fe:	2303      	movs	r3, #3
 800a600:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800a602:	2303      	movs	r3, #3
 800a604:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a606:	1dfb      	adds	r3, r7, #7
 800a608:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a60a:	2301      	movs	r3, #1
 800a60c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a60e:	f107 0308 	add.w	r3, r7, #8
 800a612:	2100      	movs	r1, #0
 800a614:	4618      	mov	r0, r3
 800a616:	f000 fac5 	bl	800aba4 <hci_send_req>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	da01      	bge.n	800a624 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a620:	23ff      	movs	r3, #255	; 0xff
 800a622:	e000      	b.n	800a626 <hci_reset+0x40>
  return status;
 800a624:	79fb      	ldrb	r3, [r7, #7]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3720      	adds	r7, #32
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b0ce      	sub	sp, #312	; 0x138
 800a632:	af00      	add	r7, sp, #0
 800a634:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a638:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a63c:	6019      	str	r1, [r3, #0]
 800a63e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a642:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a646:	601a      	str	r2, [r3, #0]
 800a648:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a64c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a650:	4602      	mov	r2, r0
 800a652:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800a654:	f107 0318 	add.w	r3, r7, #24
 800a658:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a65c:	f107 0310 	add.w	r3, r7, #16
 800a660:	2205      	movs	r2, #5
 800a662:	2100      	movs	r1, #0
 800a664:	4618      	mov	r0, r3
 800a666:	f000 fbdf 	bl	800ae28 <Osal_MemSet>
  int index_input = 0;
 800a66a:	2300      	movs	r3, #0
 800a66c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800a670:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a674:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a678:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a67c:	8812      	ldrh	r2, [r2, #0]
 800a67e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a680:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a684:	3302      	adds	r3, #2
 800a686:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a68a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a68e:	2218      	movs	r2, #24
 800a690:	2100      	movs	r1, #0
 800a692:	4618      	mov	r0, r3
 800a694:	f000 fbc8 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x08;
 800a698:	2308      	movs	r3, #8
 800a69a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800a69e:	2330      	movs	r3, #48	; 0x30
 800a6a0:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800a6a4:	f107 0318 	add.w	r3, r7, #24
 800a6a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800a6ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a6b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800a6b4:	f107 0310 	add.w	r3, r7, #16
 800a6b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800a6bc:	2305      	movs	r3, #5
 800a6be:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a6c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f000 fa6b 	bl	800aba4 <hci_send_req>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	da01      	bge.n	800a6d8 <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800a6d4:	23ff      	movs	r3, #255	; 0xff
 800a6d6:	e023      	b.n	800a720 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800a6d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a6dc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a6e0:	781b      	ldrb	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d005      	beq.n	800a6f2 <hci_le_read_phy+0xc4>
    return resp.Status;
 800a6e6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a6ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	e016      	b.n	800a720 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800a6f2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a6f6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a6fa:	78da      	ldrb	r2, [r3, #3]
 800a6fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a700:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800a708:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a70c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a710:	791a      	ldrb	r2, [r3, #4]
 800a712:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a716:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800a72a:	b590      	push	{r4, r7, lr}
 800a72c:	b0cd      	sub	sp, #308	; 0x134
 800a72e:	af00      	add	r7, sp, #0
 800a730:	4604      	mov	r4, r0
 800a732:	4608      	mov	r0, r1
 800a734:	4611      	mov	r1, r2
 800a736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a73a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a73e:	4622      	mov	r2, r4
 800a740:	701a      	strb	r2, [r3, #0]
 800a742:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a746:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a74a:	4602      	mov	r2, r0
 800a74c:	701a      	strb	r2, [r3, #0]
 800a74e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a752:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a756:	460a      	mov	r2, r1
 800a758:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800a75a:	f107 0310 	add.w	r3, r7, #16
 800a75e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a766:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a76a:	2200      	movs	r2, #0
 800a76c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a76e:	2300      	movs	r3, #0
 800a770:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800a774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a778:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a77c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a780:	7812      	ldrb	r2, [r2, #0]
 800a782:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a784:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a788:	3301      	adds	r3, #1
 800a78a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800a78e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a792:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a796:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a79a:	7812      	ldrb	r2, [r2, #0]
 800a79c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a79e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800a7a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7ac:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a7b0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a7b4:	7812      	ldrb	r2, [r2, #0]
 800a7b6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a7b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7bc:	3301      	adds	r3, #1
 800a7be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a7c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a7c6:	2218      	movs	r2, #24
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f000 fb2c 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x08;
 800a7d0:	2308      	movs	r3, #8
 800a7d2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800a7d6:	2331      	movs	r3, #49	; 0x31
 800a7d8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a7dc:	f107 0310 	add.w	r3, r7, #16
 800a7e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a7e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a7e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a7ec:	f107 030f 	add.w	r3, r7, #15
 800a7f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a7fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a7fe:	2100      	movs	r1, #0
 800a800:	4618      	mov	r0, r3
 800a802:	f000 f9cf 	bl	800aba4 <hci_send_req>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	da01      	bge.n	800a810 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800a80c:	23ff      	movs	r3, #255	; 0xff
 800a80e:	e004      	b.n	800a81a <hci_le_set_default_phy+0xf0>
  return status;
 800a810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a814:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a818:	781b      	ldrb	r3, [r3, #0]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a820:	46bd      	mov	sp, r7
 800a822:	bd90      	pop	{r4, r7, pc}

0800a824 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 800a824:	b5b0      	push	{r4, r5, r7, lr}
 800a826:	b0cc      	sub	sp, #304	; 0x130
 800a828:	af00      	add	r7, sp, #0
 800a82a:	4605      	mov	r5, r0
 800a82c:	460c      	mov	r4, r1
 800a82e:	4610      	mov	r0, r2
 800a830:	4619      	mov	r1, r3
 800a832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a836:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a83a:	462a      	mov	r2, r5
 800a83c:	801a      	strh	r2, [r3, #0]
 800a83e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a842:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a846:	4622      	mov	r2, r4
 800a848:	801a      	strh	r2, [r3, #0]
 800a84a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a84e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a852:	4602      	mov	r2, r0
 800a854:	801a      	strh	r2, [r3, #0]
 800a856:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a85a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a85e:	460a      	mov	r2, r1
 800a860:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 800a862:	f107 0310 	add.w	r3, r7, #16
 800a866:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a86a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a86e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a872:	2200      	movs	r2, #0
 800a874:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a876:	2300      	movs	r3, #0
 800a878:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a87c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a880:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a884:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a888:	8812      	ldrh	r2, [r2, #0]
 800a88a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a88c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a890:	3302      	adds	r3, #2
 800a892:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800a896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a89a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a89e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a8a2:	8812      	ldrh	r2, [r2, #0]
 800a8a4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a8a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8aa:	3302      	adds	r3, #2
 800a8ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800a8b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a8b8:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800a8bc:	8812      	ldrh	r2, [r2, #0]
 800a8be:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800a8c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8c4:	3302      	adds	r3, #2
 800a8c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Latency = Latency;
 800a8ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a8d2:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800a8d6:	8812      	ldrh	r2, [r2, #0]
 800a8d8:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800a8da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8de:	3302      	adds	r3, #2
 800a8e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 800a8e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8e8:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800a8ec:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800a8ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8f2:	3302      	adds	r3, #2
 800a8f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a8f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a8fc:	2218      	movs	r2, #24
 800a8fe:	2100      	movs	r1, #0
 800a900:	4618      	mov	r0, r3
 800a902:	f000 fa91 	bl	800ae28 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a906:	233f      	movs	r3, #63	; 0x3f
 800a908:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 800a90c:	f240 1381 	movw	r3, #385	; 0x181
 800a910:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800a914:	230f      	movs	r3, #15
 800a916:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800a91a:	f107 0310 	add.w	r3, r7, #16
 800a91e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a922:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a926:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a92a:	f107 030f 	add.w	r3, r7, #15
 800a92e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a932:	2301      	movs	r3, #1
 800a934:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a938:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a93c:	2100      	movs	r1, #0
 800a93e:	4618      	mov	r0, r3
 800a940:	f000 f930 	bl	800aba4 <hci_send_req>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	da01      	bge.n	800a94e <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 800a94a:	23ff      	movs	r3, #255	; 0xff
 800a94c:	e004      	b.n	800a958 <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 800a94e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a952:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a956:	781b      	ldrb	r3, [r3, #0]
}
 800a958:	4618      	mov	r0, r3
 800a95a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a95e:	46bd      	mov	sp, r7
 800a960:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a964 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b086      	sub	sp, #24
 800a968:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a96a:	f3ef 8310 	mrs	r3, PRIMASK
 800a96e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a970:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800a972:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a974:	b672      	cpsid	i
}
 800a976:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800a978:	1cbb      	adds	r3, r7, #2
 800a97a:	4619      	mov	r1, r3
 800a97c:	4812      	ldr	r0, [pc, #72]	; (800a9c8 <DbgTrace_TxCpltCallback+0x64>)
 800a97e:	f001 f8f8 	bl	800bb72 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800a982:	1cbb      	adds	r3, r7, #2
 800a984:	4619      	mov	r1, r3
 800a986:	4810      	ldr	r0, [pc, #64]	; (800a9c8 <DbgTrace_TxCpltCallback+0x64>)
 800a988:	f001 f9e4 	bl	800bd54 <CircularQueue_Sense>
 800a98c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00c      	beq.n	800a9ae <DbgTrace_TxCpltCallback+0x4a>
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	f383 8810 	msr	PRIMASK, r3
}
 800a99e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800a9a0:	887b      	ldrh	r3, [r7, #2]
 800a9a2:	4a0a      	ldr	r2, [pc, #40]	; (800a9cc <DbgTrace_TxCpltCallback+0x68>)
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	6938      	ldr	r0, [r7, #16]
 800a9a8:	f7f6 fb91 	bl	80010ce <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800a9ac:	e008      	b.n	800a9c0 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800a9ae:	4b08      	ldr	r3, [pc, #32]	; (800a9d0 <DbgTrace_TxCpltCallback+0x6c>)
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	701a      	strb	r2, [r3, #0]
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f383 8810 	msr	PRIMASK, r3
}
 800a9be:	bf00      	nop
}
 800a9c0:	bf00      	nop
 800a9c2:	3718      	adds	r7, #24
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}
 800a9c8:	20000674 	.word	0x20000674
 800a9cc:	0800a965 	.word	0x0800a965
 800a9d0:	20000059 	.word	0x20000059

0800a9d4 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800a9da:	f7f6 fb72 	bl	80010c2 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800a9de:	2302      	movs	r3, #2
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a9e8:	4903      	ldr	r1, [pc, #12]	; (800a9f8 <DbgTraceInit+0x24>)
 800a9ea:	4804      	ldr	r0, [pc, #16]	; (800a9fc <DbgTraceInit+0x28>)
 800a9ec:	f000 fe68 	bl	800b6c0 <CircularQueue_Init>
#endif 
#endif
  return;
 800a9f0:	bf00      	nop
}
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	20000694 	.word	0x20000694
 800a9fc:	20000674 	.word	0x20000674

0800aa00 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	68b9      	ldr	r1, [r7, #8]
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f000 f805 	bl	800aa20 <DbgTraceWrite>
 800aa16:	4603      	mov	r3, r0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b08a      	sub	sp, #40	; 0x28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa30:	f3ef 8310 	mrs	r3, PRIMASK
 800aa34:	61bb      	str	r3, [r7, #24]
  return(result);
 800aa36:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800aa38:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa40:	d102      	bne.n	800aa48 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800aa42:	2300      	movs	r3, #0
 800aa44:	627b      	str	r3, [r7, #36]	; 0x24
 800aa46:	e037      	b.n	800aab8 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d006      	beq.n	800aa5c <DbgTraceWrite+0x3c>
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	d003      	beq.n	800aa5c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800aa54:	f04f 33ff 	mov.w	r3, #4294967295
 800aa58:	627b      	str	r3, [r7, #36]	; 0x24
 800aa5a:	e02d      	b.n	800aab8 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d02a      	beq.n	800aab8 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800aa66:	b672      	cpsid	i
}
 800aa68:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	2301      	movs	r3, #1
 800aa70:	68b9      	ldr	r1, [r7, #8]
 800aa72:	4814      	ldr	r0, [pc, #80]	; (800aac4 <DbgTraceWrite+0xa4>)
 800aa74:	f000 fe56 	bl	800b724 <CircularQueue_Add>
 800aa78:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d015      	beq.n	800aaac <DbgTraceWrite+0x8c>
 800aa80:	4b11      	ldr	r3, [pc, #68]	; (800aac8 <DbgTraceWrite+0xa8>)
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d010      	beq.n	800aaac <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800aa8a:	4b0f      	ldr	r3, [pc, #60]	; (800aac8 <DbgTraceWrite+0xa8>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	701a      	strb	r2, [r3, #0]
 800aa90:	6a3b      	ldr	r3, [r7, #32]
 800aa92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	f383 8810 	msr	PRIMASK, r3
}
 800aa9a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	4a0a      	ldr	r2, [pc, #40]	; (800aacc <DbgTraceWrite+0xac>)
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	69f8      	ldr	r0, [r7, #28]
 800aaa6:	f7f6 fb12 	bl	80010ce <DbgOutputTraces>
 800aaaa:	e005      	b.n	800aab8 <DbgTraceWrite+0x98>
 800aaac:	6a3b      	ldr	r3, [r7, #32]
 800aaae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	f383 8810 	msr	PRIMASK, r3
}
 800aab6:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800aab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3728      	adds	r7, #40	; 0x28
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	20000674 	.word	0x20000674
 800aac8:	20000059 	.word	0x20000059
 800aacc:	0800a965 	.word	0x0800a965

0800aad0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	685b      	ldr	r3, [r3, #4]
 800aade:	4a08      	ldr	r2, [pc, #32]	; (800ab00 <hci_init+0x30>)
 800aae0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800aae2:	4a08      	ldr	r2, [pc, #32]	; (800ab04 <hci_init+0x34>)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800aae8:	4806      	ldr	r0, [pc, #24]	; (800ab04 <hci_init+0x34>)
 800aaea:	f000 f979 	bl	800ade0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f000 f8da 	bl	800acac <TlInit>

  return;
 800aaf8:	bf00      	nop
}
 800aafa:	3708      	adds	r7, #8
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	200016bc 	.word	0x200016bc
 800ab04:	20001694 	.word	0x20001694

0800ab08 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ab0e:	4822      	ldr	r0, [pc, #136]	; (800ab98 <hci_user_evt_proc+0x90>)
 800ab10:	f000 fd28 	bl	800b564 <LST_is_empty>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d12b      	bne.n	800ab72 <hci_user_evt_proc+0x6a>
 800ab1a:	4b20      	ldr	r3, [pc, #128]	; (800ab9c <hci_user_evt_proc+0x94>)
 800ab1c:	781b      	ldrb	r3, [r3, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d027      	beq.n	800ab72 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800ab22:	f107 030c 	add.w	r3, r7, #12
 800ab26:	4619      	mov	r1, r3
 800ab28:	481b      	ldr	r0, [pc, #108]	; (800ab98 <hci_user_evt_proc+0x90>)
 800ab2a:	f000 fdaa 	bl	800b682 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800ab2e:	4b1c      	ldr	r3, [pc, #112]	; (800aba0 <hci_user_evt_proc+0x98>)
 800ab30:	69db      	ldr	r3, [r3, #28]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00c      	beq.n	800ab50 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800ab3e:	4b18      	ldr	r3, [pc, #96]	; (800aba0 <hci_user_evt_proc+0x98>)
 800ab40:	69db      	ldr	r3, [r3, #28]
 800ab42:	1d3a      	adds	r2, r7, #4
 800ab44:	4610      	mov	r0, r2
 800ab46:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800ab48:	793a      	ldrb	r2, [r7, #4]
 800ab4a:	4b14      	ldr	r3, [pc, #80]	; (800ab9c <hci_user_evt_proc+0x94>)
 800ab4c:	701a      	strb	r2, [r3, #0]
 800ab4e:	e002      	b.n	800ab56 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800ab50:	4b12      	ldr	r3, [pc, #72]	; (800ab9c <hci_user_evt_proc+0x94>)
 800ab52:	2201      	movs	r2, #1
 800ab54:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800ab56:	4b11      	ldr	r3, [pc, #68]	; (800ab9c <hci_user_evt_proc+0x94>)
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d004      	beq.n	800ab68 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	4618      	mov	r0, r3
 800ab62:	f001 fc4f 	bl	800c404 <TL_MM_EvtDone>
 800ab66:	e004      	b.n	800ab72 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	480a      	ldr	r0, [pc, #40]	; (800ab98 <hci_user_evt_proc+0x90>)
 800ab6e:	f000 fd1b 	bl	800b5a8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ab72:	4809      	ldr	r0, [pc, #36]	; (800ab98 <hci_user_evt_proc+0x90>)
 800ab74:	f000 fcf6 	bl	800b564 <LST_is_empty>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d107      	bne.n	800ab8e <hci_user_evt_proc+0x86>
 800ab7e:	4b07      	ldr	r3, [pc, #28]	; (800ab9c <hci_user_evt_proc+0x94>)
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d003      	beq.n	800ab8e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800ab86:	4804      	ldr	r0, [pc, #16]	; (800ab98 <hci_user_evt_proc+0x90>)
 800ab88:	f7f9 f8a6 	bl	8003cd8 <hci_notify_asynch_evt>
  }


  return;
 800ab8c:	bf00      	nop
 800ab8e:	bf00      	nop
}
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20000238 	.word	0x20000238
 800ab9c:	20000244 	.word	0x20000244
 800aba0:	20001694 	.word	0x20001694

0800aba4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b088      	sub	sp, #32
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	460b      	mov	r3, r1
 800abae:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800abb0:	2000      	movs	r0, #0
 800abb2:	f000 f8d1 	bl	800ad58 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800abb6:	2300      	movs	r3, #0
 800abb8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	885b      	ldrh	r3, [r3, #2]
 800abbe:	b21b      	sxth	r3, r3
 800abc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abc4:	b21a      	sxth	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	881b      	ldrh	r3, [r3, #0]
 800abca:	029b      	lsls	r3, r3, #10
 800abcc:	b21b      	sxth	r3, r3
 800abce:	4313      	orrs	r3, r2
 800abd0:	b21b      	sxth	r3, r3
 800abd2:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800abd4:	4b33      	ldr	r3, [pc, #204]	; (800aca4 <hci_send_req+0x100>)
 800abd6:	2201      	movs	r2, #1
 800abd8:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	68db      	ldr	r3, [r3, #12]
 800abde:	b2d9      	uxtb	r1, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	689a      	ldr	r2, [r3, #8]
 800abe4:	8bbb      	ldrh	r3, [r7, #28]
 800abe6:	4618      	mov	r0, r3
 800abe8:	f000 f890 	bl	800ad0c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800abec:	e04e      	b.n	800ac8c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800abee:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800abf2:	f7f9 f888 	bl	8003d06 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800abf6:	e043      	b.n	800ac80 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800abf8:	f107 030c 	add.w	r3, r7, #12
 800abfc:	4619      	mov	r1, r3
 800abfe:	482a      	ldr	r0, [pc, #168]	; (800aca8 <hci_send_req+0x104>)
 800ac00:	f000 fd3f 	bl	800b682 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	7a5b      	ldrb	r3, [r3, #9]
 800ac08:	2b0f      	cmp	r3, #15
 800ac0a:	d114      	bne.n	800ac36 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	330b      	adds	r3, #11
 800ac10:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	885b      	ldrh	r3, [r3, #2]
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	8bba      	ldrh	r2, [r7, #28]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d104      	bne.n	800ac28 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	693a      	ldr	r2, [r7, #16]
 800ac24:	7812      	ldrb	r2, [r2, #0]
 800ac26:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	785b      	ldrb	r3, [r3, #1]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d027      	beq.n	800ac80 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800ac30:	2301      	movs	r3, #1
 800ac32:	77fb      	strb	r3, [r7, #31]
 800ac34:	e024      	b.n	800ac80 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	330b      	adds	r3, #11
 800ac3a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	8bba      	ldrh	r2, [r7, #28]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d114      	bne.n	800ac74 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	7a9b      	ldrb	r3, [r3, #10]
 800ac4e:	3b03      	subs	r3, #3
 800ac50:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	695a      	ldr	r2, [r3, #20]
 800ac56:	7dfb      	ldrb	r3, [r7, #23]
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	bfa8      	it	ge
 800ac5c:	461a      	movge	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6918      	ldr	r0, [r3, #16]
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	1cd9      	adds	r1, r3, #3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	695b      	ldr	r3, [r3, #20]
 800ac6e:	461a      	mov	r2, r3
 800ac70:	f001 ff36 	bl	800cae0 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d001      	beq.n	800ac80 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ac80:	4809      	ldr	r0, [pc, #36]	; (800aca8 <hci_send_req+0x104>)
 800ac82:	f000 fc6f 	bl	800b564 <LST_is_empty>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d0b5      	beq.n	800abf8 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800ac8c:	7ffb      	ldrb	r3, [r7, #31]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d0ad      	beq.n	800abee <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800ac92:	2001      	movs	r0, #1
 800ac94:	f000 f860 	bl	800ad58 <NotifyCmdStatus>

  return 0;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3720      	adds	r7, #32
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	200016c0 	.word	0x200016c0
 800aca8:	200016b4 	.word	0x200016b4

0800acac <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b086      	sub	sp, #24
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800acb4:	480f      	ldr	r0, [pc, #60]	; (800acf4 <TlInit+0x48>)
 800acb6:	f000 fc45 	bl	800b544 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800acba:	4a0f      	ldr	r2, [pc, #60]	; (800acf8 <TlInit+0x4c>)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800acc0:	480e      	ldr	r0, [pc, #56]	; (800acfc <TlInit+0x50>)
 800acc2:	f000 fc3f 	bl	800b544 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800acc6:	4b0e      	ldr	r3, [pc, #56]	; (800ad00 <TlInit+0x54>)
 800acc8:	2201      	movs	r2, #1
 800acca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800accc:	4b0d      	ldr	r3, [pc, #52]	; (800ad04 <TlInit+0x58>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00a      	beq.n	800acea <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800acd8:	4b0b      	ldr	r3, [pc, #44]	; (800ad08 <TlInit+0x5c>)
 800acda:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800acdc:	4b09      	ldr	r3, [pc, #36]	; (800ad04 <TlInit+0x58>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f107 0208 	add.w	r2, r7, #8
 800ace4:	4610      	mov	r0, r2
 800ace6:	4798      	blx	r3
  }

  return;
 800ace8:	bf00      	nop
 800acea:	bf00      	nop
}
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	200016b4 	.word	0x200016b4
 800acf8:	20000240 	.word	0x20000240
 800acfc:	20000238 	.word	0x20000238
 800ad00:	20000244 	.word	0x20000244
 800ad04:	20001694 	.word	0x20001694
 800ad08:	0800ad99 	.word	0x0800ad99

0800ad0c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b082      	sub	sp, #8
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	4603      	mov	r3, r0
 800ad14:	603a      	str	r2, [r7, #0]
 800ad16:	80fb      	strh	r3, [r7, #6]
 800ad18:	460b      	mov	r3, r1
 800ad1a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800ad1c:	4b0c      	ldr	r3, [pc, #48]	; (800ad50 <SendCmd+0x44>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	88fa      	ldrh	r2, [r7, #6]
 800ad22:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800ad26:	4b0a      	ldr	r3, [pc, #40]	; (800ad50 <SendCmd+0x44>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	797a      	ldrb	r2, [r7, #5]
 800ad2c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800ad2e:	4b08      	ldr	r3, [pc, #32]	; (800ad50 <SendCmd+0x44>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	330c      	adds	r3, #12
 800ad34:	797a      	ldrb	r2, [r7, #5]
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f001 fed1 	bl	800cae0 <memcpy>

  hciContext.io.Send(0,0);
 800ad3e:	4b05      	ldr	r3, [pc, #20]	; (800ad54 <SendCmd+0x48>)
 800ad40:	691b      	ldr	r3, [r3, #16]
 800ad42:	2100      	movs	r1, #0
 800ad44:	2000      	movs	r0, #0
 800ad46:	4798      	blx	r3

  return;
 800ad48:	bf00      	nop
}
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	20000240 	.word	0x20000240
 800ad54:	20001694 	.word	0x20001694

0800ad58 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b082      	sub	sp, #8
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	4603      	mov	r3, r0
 800ad60:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800ad62:	79fb      	ldrb	r3, [r7, #7]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d108      	bne.n	800ad7a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800ad68:	4b0a      	ldr	r3, [pc, #40]	; (800ad94 <NotifyCmdStatus+0x3c>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d00d      	beq.n	800ad8c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800ad70:	4b08      	ldr	r3, [pc, #32]	; (800ad94 <NotifyCmdStatus+0x3c>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2000      	movs	r0, #0
 800ad76:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800ad78:	e008      	b.n	800ad8c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800ad7a:	4b06      	ldr	r3, [pc, #24]	; (800ad94 <NotifyCmdStatus+0x3c>)
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d004      	beq.n	800ad8c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800ad82:	4b04      	ldr	r3, [pc, #16]	; (800ad94 <NotifyCmdStatus+0x3c>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	2001      	movs	r0, #1
 800ad88:	4798      	blx	r3
  return;
 800ad8a:	bf00      	nop
 800ad8c:	bf00      	nop
}
 800ad8e:	3708      	adds	r7, #8
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}
 800ad94:	200016bc 	.word	0x200016bc

0800ad98 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	7a5b      	ldrb	r3, [r3, #9]
 800ada4:	2b0f      	cmp	r3, #15
 800ada6:	d003      	beq.n	800adb0 <TlEvtReceived+0x18>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	7a5b      	ldrb	r3, [r3, #9]
 800adac:	2b0e      	cmp	r3, #14
 800adae:	d107      	bne.n	800adc0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800adb0:	6879      	ldr	r1, [r7, #4]
 800adb2:	4809      	ldr	r0, [pc, #36]	; (800add8 <TlEvtReceived+0x40>)
 800adb4:	f000 fc1e 	bl	800b5f4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800adb8:	2000      	movs	r0, #0
 800adba:	f7f8 ff99 	bl	8003cf0 <hci_cmd_resp_release>
 800adbe:	e006      	b.n	800adce <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800adc0:	6879      	ldr	r1, [r7, #4]
 800adc2:	4806      	ldr	r0, [pc, #24]	; (800addc <TlEvtReceived+0x44>)
 800adc4:	f000 fc16 	bl	800b5f4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800adc8:	4804      	ldr	r0, [pc, #16]	; (800addc <TlEvtReceived+0x44>)
 800adca:	f7f8 ff85 	bl	8003cd8 <hci_notify_asynch_evt>
  }

  return;
 800adce:	bf00      	nop
}
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	200016b4 	.word	0x200016b4
 800addc:	20000238 	.word	0x20000238

0800ade0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4a05      	ldr	r2, [pc, #20]	; (800ae00 <hci_register_io_bus+0x20>)
 800adec:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4a04      	ldr	r2, [pc, #16]	; (800ae04 <hci_register_io_bus+0x24>)
 800adf2:	611a      	str	r2, [r3, #16]

  return;
 800adf4:	bf00      	nop
}
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr
 800ae00:	0800c17d 	.word	0x0800c17d
 800ae04:	0800c1e5 	.word	0x0800c1e5

0800ae08 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	68b9      	ldr	r1, [r7, #8]
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f001 fe61 	bl	800cae0 <memcpy>
 800ae1e:	4603      	mov	r3, r0
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	68b9      	ldr	r1, [r7, #8]
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	f001 fe5f 	bl	800cafc <memset>
 800ae3e:	4603      	mov	r3, r0
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	4603      	mov	r3, r0
 800ae50:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ae52:	4b0f      	ldr	r3, [pc, #60]	; (800ae90 <OTP_Read+0x48>)
 800ae54:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ae56:	e002      	b.n	800ae5e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	3b08      	subs	r3, #8
 800ae5c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	3307      	adds	r3, #7
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	79fa      	ldrb	r2, [r7, #7]
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d003      	beq.n	800ae72 <OTP_Read+0x2a>
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	4a09      	ldr	r2, [pc, #36]	; (800ae94 <OTP_Read+0x4c>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d1f2      	bne.n	800ae58 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	3307      	adds	r3, #7
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	79fa      	ldrb	r2, [r7, #7]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d001      	beq.n	800ae82 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800ae82:	68fb      	ldr	r3, [r7, #12]
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3714      	adds	r7, #20
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8e:	4770      	bx	lr
 800ae90:	1fff73f8 	.word	0x1fff73f8
 800ae94:	1fff7000 	.word	0x1fff7000

0800ae98 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b08a      	sub	sp, #40	; 0x28
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800aea0:	2300      	movs	r3, #0
 800aea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800aeac:	6a3b      	ldr	r3, [r7, #32]
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	2bff      	cmp	r3, #255	; 0xff
 800aeb2:	d14f      	bne.n	800af54 <PeerToPeer_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800aeb4:	6a3b      	ldr	r3, [r7, #32]
 800aeb6:	3302      	adds	r3, #2
 800aeb8:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	881b      	ldrh	r3, [r3, #0]
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	461a      	mov	r2, r3
 800aec2:	f640 4301 	movw	r3, #3073	; 0xc01
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d140      	bne.n	800af4c <PeerToPeer_Event_Handler+0xb4>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	3302      	adds	r3, #2
 800aece:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	885b      	ldrh	r3, [r3, #2]
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	461a      	mov	r2, r3
 800aed8:	4b22      	ldr	r3, [pc, #136]	; (800af64 <PeerToPeer_Event_Handler+0xcc>)
 800aeda:	889b      	ldrh	r3, [r3, #4]
 800aedc:	3302      	adds	r3, #2
 800aede:	429a      	cmp	r2, r3
 800aee0:	d118      	bne.n	800af14 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 800aee2:	2301      	movs	r3, #1
 800aee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	7a1b      	ldrb	r3, [r3, #8]
 800aeec:	f003 0301 	and.w	r3, r3, #1
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d007      	beq.n	800af04 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800aef4:	2300      	movs	r3, #0
 800aef6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800aef8:	f107 0308 	add.w	r3, r7, #8
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7f8 ff45 	bl	8003d8c <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 800af02:	e025      	b.n	800af50 <PeerToPeer_Event_Handler+0xb8>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800af04:	2301      	movs	r3, #1
 800af06:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800af08:	f107 0308 	add.w	r3, r7, #8
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7f8 ff3d 	bl	8003d8c <P2PS_STM_App_Notification>
        break;
 800af12:	e01d      	b.n	800af50 <PeerToPeer_Event_Handler+0xb8>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	885b      	ldrh	r3, [r3, #2]
 800af18:	b29b      	uxth	r3, r3
 800af1a:	461a      	mov	r2, r3
 800af1c:	4b11      	ldr	r3, [pc, #68]	; (800af64 <PeerToPeer_Event_Handler+0xcc>)
 800af1e:	885b      	ldrh	r3, [r3, #2]
 800af20:	3301      	adds	r3, #1
 800af22:	429a      	cmp	r2, r3
 800af24:	d114      	bne.n	800af50 <PeerToPeer_Event_Handler+0xb8>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 800af26:	4810      	ldr	r0, [pc, #64]	; (800af68 <PeerToPeer_Event_Handler+0xd0>)
 800af28:	f002 faf6 	bl	800d518 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800af2c:	2303      	movs	r3, #3
 800af2e:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	88db      	ldrh	r3, [r3, #6]
 800af34:	b29b      	uxth	r3, r3
 800af36:	b2db      	uxtb	r3, r3
 800af38:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	3308      	adds	r3, #8
 800af3e:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800af40:	f107 0308 	add.w	r3, r7, #8
 800af44:	4618      	mov	r0, r3
 800af46:	f7f8 ff21 	bl	8003d8c <P2PS_STM_App_Notification>
        break;
 800af4a:	e001      	b.n	800af50 <PeerToPeer_Event_Handler+0xb8>

        default:
          break;
 800af4c:	bf00      	nop
 800af4e:	e002      	b.n	800af56 <PeerToPeer_Event_Handler+0xbe>
        break;
 800af50:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800af52:	e000      	b.n	800af56 <PeerToPeer_Event_Handler+0xbe>

    default:
      break;
 800af54:	bf00      	nop
  }

  return(return_value);
 800af56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800af5a:	4618      	mov	r0, r3
 800af5c:	3728      	adds	r7, #40	; 0x28
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}
 800af62:	bf00      	nop
 800af64:	20000248 	.word	0x20000248
 800af68:	08010ba4 	.word	0x08010ba4

0800af6c <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b08a      	sub	sp, #40	; 0x28
 800af70:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800af72:	484a      	ldr	r0, [pc, #296]	; (800b09c <P2PS_STM_Init+0x130>)
 800af74:	f001 f854 	bl	800c020 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800af78:	238f      	movs	r3, #143	; 0x8f
 800af7a:	703b      	strb	r3, [r7, #0]
 800af7c:	23e5      	movs	r3, #229	; 0xe5
 800af7e:	707b      	strb	r3, [r7, #1]
 800af80:	23b3      	movs	r3, #179	; 0xb3
 800af82:	70bb      	strb	r3, [r7, #2]
 800af84:	23d5      	movs	r3, #213	; 0xd5
 800af86:	70fb      	strb	r3, [r7, #3]
 800af88:	232e      	movs	r3, #46	; 0x2e
 800af8a:	713b      	strb	r3, [r7, #4]
 800af8c:	237f      	movs	r3, #127	; 0x7f
 800af8e:	717b      	strb	r3, [r7, #5]
 800af90:	234a      	movs	r3, #74	; 0x4a
 800af92:	71bb      	strb	r3, [r7, #6]
 800af94:	2398      	movs	r3, #152	; 0x98
 800af96:	71fb      	strb	r3, [r7, #7]
 800af98:	232a      	movs	r3, #42	; 0x2a
 800af9a:	723b      	strb	r3, [r7, #8]
 800af9c:	2348      	movs	r3, #72	; 0x48
 800af9e:	727b      	strb	r3, [r7, #9]
 800afa0:	237a      	movs	r3, #122	; 0x7a
 800afa2:	72bb      	strb	r3, [r7, #10]
 800afa4:	23cc      	movs	r3, #204	; 0xcc
 800afa6:	72fb      	strb	r3, [r7, #11]
 800afa8:	2340      	movs	r3, #64	; 0x40
 800afaa:	733b      	strb	r3, [r7, #12]
 800afac:	23fe      	movs	r3, #254	; 0xfe
 800afae:	737b      	strb	r3, [r7, #13]
 800afb0:	2300      	movs	r3, #0
 800afb2:	73bb      	strb	r3, [r7, #14]
 800afb4:	2300      	movs	r3, #0
 800afb6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800afb8:	4639      	mov	r1, r7
 800afba:	4b39      	ldr	r3, [pc, #228]	; (800b0a0 <P2PS_STM_Init+0x134>)
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	2308      	movs	r3, #8
 800afc0:	2201      	movs	r2, #1
 800afc2:	2002      	movs	r0, #2
 800afc4:	f7fe ff48 	bl	8009e58 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800afc8:	2319      	movs	r3, #25
 800afca:	703b      	strb	r3, [r7, #0]
 800afcc:	23ed      	movs	r3, #237	; 0xed
 800afce:	707b      	strb	r3, [r7, #1]
 800afd0:	2382      	movs	r3, #130	; 0x82
 800afd2:	70bb      	strb	r3, [r7, #2]
 800afd4:	23ae      	movs	r3, #174	; 0xae
 800afd6:	70fb      	strb	r3, [r7, #3]
 800afd8:	23ed      	movs	r3, #237	; 0xed
 800afda:	713b      	strb	r3, [r7, #4]
 800afdc:	2321      	movs	r3, #33	; 0x21
 800afde:	717b      	strb	r3, [r7, #5]
 800afe0:	234c      	movs	r3, #76	; 0x4c
 800afe2:	71bb      	strb	r3, [r7, #6]
 800afe4:	239d      	movs	r3, #157	; 0x9d
 800afe6:	71fb      	strb	r3, [r7, #7]
 800afe8:	2341      	movs	r3, #65	; 0x41
 800afea:	723b      	strb	r3, [r7, #8]
 800afec:	2345      	movs	r3, #69	; 0x45
 800afee:	727b      	strb	r3, [r7, #9]
 800aff0:	2322      	movs	r3, #34	; 0x22
 800aff2:	72bb      	strb	r3, [r7, #10]
 800aff4:	238e      	movs	r3, #142	; 0x8e
 800aff6:	72fb      	strb	r3, [r7, #11]
 800aff8:	2341      	movs	r3, #65	; 0x41
 800affa:	733b      	strb	r3, [r7, #12]
 800affc:	23fe      	movs	r3, #254	; 0xfe
 800affe:	737b      	strb	r3, [r7, #13]
 800b000:	2300      	movs	r3, #0
 800b002:	73bb      	strb	r3, [r7, #14]
 800b004:	2300      	movs	r3, #0
 800b006:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b008:	4b25      	ldr	r3, [pc, #148]	; (800b0a0 <P2PS_STM_Init+0x134>)
 800b00a:	8818      	ldrh	r0, [r3, #0]
 800b00c:	463a      	mov	r2, r7
 800b00e:	4b25      	ldr	r3, [pc, #148]	; (800b0a4 <P2PS_STM_Init+0x138>)
 800b010:	9305      	str	r3, [sp, #20]
 800b012:	2301      	movs	r3, #1
 800b014:	9304      	str	r3, [sp, #16]
 800b016:	230a      	movs	r3, #10
 800b018:	9303      	str	r3, [sp, #12]
 800b01a:	2301      	movs	r3, #1
 800b01c:	9302      	str	r3, [sp, #8]
 800b01e:	2300      	movs	r3, #0
 800b020:	9301      	str	r3, [sp, #4]
 800b022:	2306      	movs	r3, #6
 800b024:	9300      	str	r3, [sp, #0]
 800b026:	2302      	movs	r3, #2
 800b028:	2102      	movs	r1, #2
 800b02a:	f7fe ffeb 	bl	800a004 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800b02e:	2319      	movs	r3, #25
 800b030:	703b      	strb	r3, [r7, #0]
 800b032:	23ed      	movs	r3, #237	; 0xed
 800b034:	707b      	strb	r3, [r7, #1]
 800b036:	2382      	movs	r3, #130	; 0x82
 800b038:	70bb      	strb	r3, [r7, #2]
 800b03a:	23ae      	movs	r3, #174	; 0xae
 800b03c:	70fb      	strb	r3, [r7, #3]
 800b03e:	23ed      	movs	r3, #237	; 0xed
 800b040:	713b      	strb	r3, [r7, #4]
 800b042:	2321      	movs	r3, #33	; 0x21
 800b044:	717b      	strb	r3, [r7, #5]
 800b046:	234c      	movs	r3, #76	; 0x4c
 800b048:	71bb      	strb	r3, [r7, #6]
 800b04a:	239d      	movs	r3, #157	; 0x9d
 800b04c:	71fb      	strb	r3, [r7, #7]
 800b04e:	2341      	movs	r3, #65	; 0x41
 800b050:	723b      	strb	r3, [r7, #8]
 800b052:	2345      	movs	r3, #69	; 0x45
 800b054:	727b      	strb	r3, [r7, #9]
 800b056:	2322      	movs	r3, #34	; 0x22
 800b058:	72bb      	strb	r3, [r7, #10]
 800b05a:	238e      	movs	r3, #142	; 0x8e
 800b05c:	72fb      	strb	r3, [r7, #11]
 800b05e:	2342      	movs	r3, #66	; 0x42
 800b060:	733b      	strb	r3, [r7, #12]
 800b062:	23fe      	movs	r3, #254	; 0xfe
 800b064:	737b      	strb	r3, [r7, #13]
 800b066:	2300      	movs	r3, #0
 800b068:	73bb      	strb	r3, [r7, #14]
 800b06a:	2300      	movs	r3, #0
 800b06c:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b06e:	4b0c      	ldr	r3, [pc, #48]	; (800b0a0 <P2PS_STM_Init+0x134>)
 800b070:	8818      	ldrh	r0, [r3, #0]
 800b072:	463a      	mov	r2, r7
 800b074:	4b0c      	ldr	r3, [pc, #48]	; (800b0a8 <P2PS_STM_Init+0x13c>)
 800b076:	9305      	str	r3, [sp, #20]
 800b078:	2301      	movs	r3, #1
 800b07a:	9304      	str	r3, [sp, #16]
 800b07c:	230a      	movs	r3, #10
 800b07e:	9303      	str	r3, [sp, #12]
 800b080:	2301      	movs	r3, #1
 800b082:	9302      	str	r3, [sp, #8]
 800b084:	2300      	movs	r3, #0
 800b086:	9301      	str	r3, [sp, #4]
 800b088:	2310      	movs	r3, #16
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	2302      	movs	r3, #2
 800b08e:	2102      	movs	r1, #2
 800b090:	f7fe ffb8 	bl	800a004 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800b094:	bf00      	nop
}
 800b096:	3710      	adds	r7, #16
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	0800ae99 	.word	0x0800ae99
 800b0a0:	20000248 	.word	0x20000248
 800b0a4:	2000024a 	.word	0x2000024a
 800b0a8:	2000024c 	.word	0x2000024c

0800b0ac <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b086      	sub	sp, #24
 800b0b0:	af02      	add	r7, sp, #8
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	6039      	str	r1, [r7, #0]
 800b0b6:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800b0b8:	2392      	movs	r3, #146	; 0x92
 800b0ba:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800b0bc:	88fb      	ldrh	r3, [r7, #6]
 800b0be:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d10c      	bne.n	800b0e0 <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b0c6:	4b09      	ldr	r3, [pc, #36]	; (800b0ec <P2PS_STM_App_Update_Char+0x40>)
 800b0c8:	8818      	ldrh	r0, [r3, #0]
 800b0ca:	4b08      	ldr	r3, [pc, #32]	; (800b0ec <P2PS_STM_App_Update_Char+0x40>)
 800b0cc:	8899      	ldrh	r1, [r3, #4]
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	9300      	str	r3, [sp, #0]
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f7ff f89d 	bl	800a214 <aci_gatt_update_char_value>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             2, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 800b0de:	e000      	b.n	800b0e2 <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 800b0e0:	bf00      	nop
  }

  return result;
 800b0e2:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3710      	adds	r7, #16
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	20000248 	.word	0x20000248

0800b0f0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b088      	sub	sp, #32
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b0f8:	f107 030c 	add.w	r3, r7, #12
 800b0fc:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	212e      	movs	r1, #46	; 0x2e
 800b108:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800b10c:	f000 f94c 	bl	800b3a8 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	330b      	adds	r3, #11
 800b114:	78db      	ldrb	r3, [r3, #3]
}
 800b116:	4618      	mov	r0, r3
 800b118:	3720      	adds	r7, #32
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b088      	sub	sp, #32
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b126:	f107 030c 	add.w	r3, r7, #12
 800b12a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	210f      	movs	r1, #15
 800b136:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800b13a:	f000 f935 	bl	800b3a8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	330b      	adds	r3, #11
 800b142:	78db      	ldrb	r3, [r3, #3]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3720      	adds	r7, #32
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b088      	sub	sp, #32
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b154:	f107 030c 	add.w	r3, r7, #12
 800b158:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	2110      	movs	r1, #16
 800b160:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800b164:	f000 f920 	bl	800b3a8 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	330b      	adds	r3, #11
 800b16c:	78db      	ldrb	r3, [r3, #3]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3720      	adds	r7, #32
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
	...

0800b178 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800b178:	b480      	push	{r7}
 800b17a:	b08b      	sub	sp, #44	; 0x2c
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800b180:	2300      	movs	r3, #0
 800b182:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800b184:	2300      	movs	r3, #0
 800b186:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800b18c:	2300      	movs	r3, #0
 800b18e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800b190:	2300      	movs	r3, #0
 800b192:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800b194:	2300      	movs	r3, #0
 800b196:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800b198:	2300      	movs	r3, #0
 800b19a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800b19c:	2300      	movs	r3, #0
 800b19e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800b1a0:	4b4a      	ldr	r3, [pc, #296]	; (800b2cc <SHCI_GetWirelessFwInfo+0x154>)
 800b1a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b1a8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b1b2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a44      	ldr	r2, [pc, #272]	; (800b2d0 <SHCI_GetWirelessFwInfo+0x158>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d10f      	bne.n	800b1e4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	695b      	ldr	r3, [r3, #20]
 800b1c8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	699b      	ldr	r3, [r3, #24]
 800b1ce:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	69db      	ldr	r3, [r3, #28]
 800b1d4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	691b      	ldr	r3, [r3, #16]
 800b1e0:	617b      	str	r3, [r7, #20]
 800b1e2:	e01a      	b.n	800b21a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b1ec:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800b1f0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	691b      	ldr	r3, [r3, #16]
 800b1f8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	695b      	ldr	r3, [r3, #20]
 800b200:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	699b      	ldr	r3, [r3, #24]
 800b208:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	689b      	ldr	r3, [r3, #8]
 800b218:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800b21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21c:	0e1b      	lsrs	r3, r3, #24
 800b21e:	b2da      	uxtb	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800b224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b226:	0c1b      	lsrs	r3, r3, #16
 800b228:	b2da      	uxtb	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800b22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b230:	0a1b      	lsrs	r3, r3, #8
 800b232:	b2da      	uxtb	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800b238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23a:	091b      	lsrs	r3, r3, #4
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	f003 030f 	and.w	r3, r3, #15
 800b242:	b2da      	uxtb	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800b248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24a:	b2db      	uxtb	r3, r3
 800b24c:	f003 030f 	and.w	r3, r3, #15
 800b250:	b2da      	uxtb	r2, r3
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b256:	6a3b      	ldr	r3, [r7, #32]
 800b258:	0e1b      	lsrs	r3, r3, #24
 800b25a:	b2da      	uxtb	r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b260:	6a3b      	ldr	r3, [r7, #32]
 800b262:	0c1b      	lsrs	r3, r3, #16
 800b264:	b2da      	uxtb	r2, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800b26a:	6a3b      	ldr	r3, [r7, #32]
 800b26c:	0a1b      	lsrs	r3, r3, #8
 800b26e:	b2da      	uxtb	r2, r3
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b274:	6a3b      	ldr	r3, [r7, #32]
 800b276:	b2da      	uxtb	r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	b2da      	uxtb	r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	0e1b      	lsrs	r3, r3, #24
 800b288:	b2da      	uxtb	r2, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	0c1b      	lsrs	r3, r3, #16
 800b292:	b2da      	uxtb	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	0a1b      	lsrs	r3, r3, #8
 800b29c:	b2da      	uxtb	r2, r3
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	0e1b      	lsrs	r3, r3, #24
 800b2a6:	b2da      	uxtb	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	0c1b      	lsrs	r3, r3, #16
 800b2b0:	b2da      	uxtb	r2, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	b2da      	uxtb	r2, r3
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	372c      	adds	r7, #44	; 0x2c
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr
 800b2cc:	58004000 	.word	0x58004000
 800b2d0:	a94656b9 	.word	0xa94656b9

0800b2d4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	4a08      	ldr	r2, [pc, #32]	; (800b304 <shci_init+0x30>)
 800b2e4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800b2e6:	4a08      	ldr	r2, [pc, #32]	; (800b308 <shci_init+0x34>)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800b2ec:	4806      	ldr	r0, [pc, #24]	; (800b308 <shci_init+0x34>)
 800b2ee:	f000 f915 	bl	800b51c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f000 f898 	bl	800b42c <TlInit>

  return;
 800b2fc:	bf00      	nop
}
 800b2fe:	3708      	adds	r7, #8
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	200016e4 	.word	0x200016e4
 800b308:	200016c4 	.word	0x200016c4

0800b30c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b312:	4822      	ldr	r0, [pc, #136]	; (800b39c <shci_user_evt_proc+0x90>)
 800b314:	f000 f926 	bl	800b564 <LST_is_empty>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d12b      	bne.n	800b376 <shci_user_evt_proc+0x6a>
 800b31e:	4b20      	ldr	r3, [pc, #128]	; (800b3a0 <shci_user_evt_proc+0x94>)
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d027      	beq.n	800b376 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b326:	f107 030c 	add.w	r3, r7, #12
 800b32a:	4619      	mov	r1, r3
 800b32c:	481b      	ldr	r0, [pc, #108]	; (800b39c <shci_user_evt_proc+0x90>)
 800b32e:	f000 f9a8 	bl	800b682 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800b332:	4b1c      	ldr	r3, [pc, #112]	; (800b3a4 <shci_user_evt_proc+0x98>)
 800b334:	69db      	ldr	r3, [r3, #28]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00c      	beq.n	800b354 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800b33e:	2301      	movs	r3, #1
 800b340:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b342:	4b18      	ldr	r3, [pc, #96]	; (800b3a4 <shci_user_evt_proc+0x98>)
 800b344:	69db      	ldr	r3, [r3, #28]
 800b346:	1d3a      	adds	r2, r7, #4
 800b348:	4610      	mov	r0, r2
 800b34a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b34c:	793a      	ldrb	r2, [r7, #4]
 800b34e:	4b14      	ldr	r3, [pc, #80]	; (800b3a0 <shci_user_evt_proc+0x94>)
 800b350:	701a      	strb	r2, [r3, #0]
 800b352:	e002      	b.n	800b35a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b354:	4b12      	ldr	r3, [pc, #72]	; (800b3a0 <shci_user_evt_proc+0x94>)
 800b356:	2201      	movs	r2, #1
 800b358:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800b35a:	4b11      	ldr	r3, [pc, #68]	; (800b3a0 <shci_user_evt_proc+0x94>)
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d004      	beq.n	800b36c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	4618      	mov	r0, r3
 800b366:	f001 f84d 	bl	800c404 <TL_MM_EvtDone>
 800b36a:	e004      	b.n	800b376 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	4619      	mov	r1, r3
 800b370:	480a      	ldr	r0, [pc, #40]	; (800b39c <shci_user_evt_proc+0x90>)
 800b372:	f000 f919 	bl	800b5a8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b376:	4809      	ldr	r0, [pc, #36]	; (800b39c <shci_user_evt_proc+0x90>)
 800b378:	f000 f8f4 	bl	800b564 <LST_is_empty>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d107      	bne.n	800b392 <shci_user_evt_proc+0x86>
 800b382:	4b07      	ldr	r3, [pc, #28]	; (800b3a0 <shci_user_evt_proc+0x94>)
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d003      	beq.n	800b392 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800b38a:	4804      	ldr	r0, [pc, #16]	; (800b39c <shci_user_evt_proc+0x90>)
 800b38c:	f7f6 f966 	bl	800165c <shci_notify_asynch_evt>
  }


  return;
 800b390:	bf00      	nop
 800b392:	bf00      	nop
}
 800b394:	3710      	adds	r7, #16
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	2000025c 	.word	0x2000025c
 800b3a0:	2000026c 	.word	0x2000026c
 800b3a4:	200016c4 	.word	0x200016c4

0800b3a8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60ba      	str	r2, [r7, #8]
 800b3b0:	607b      	str	r3, [r7, #4]
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	81fb      	strh	r3, [r7, #14]
 800b3b6:	460b      	mov	r3, r1
 800b3b8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800b3ba:	2000      	movs	r0, #0
 800b3bc:	f000 f868 	bl	800b490 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800b3c0:	4b17      	ldr	r3, [pc, #92]	; (800b420 <shci_send+0x78>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	89fa      	ldrh	r2, [r7, #14]
 800b3c6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800b3ca:	4b15      	ldr	r3, [pc, #84]	; (800b420 <shci_send+0x78>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	7b7a      	ldrb	r2, [r7, #13]
 800b3d0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800b3d2:	4b13      	ldr	r3, [pc, #76]	; (800b420 <shci_send+0x78>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	330c      	adds	r3, #12
 800b3d8:	7b7a      	ldrb	r2, [r7, #13]
 800b3da:	68b9      	ldr	r1, [r7, #8]
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f001 fb7f 	bl	800cae0 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800b3e2:	4b10      	ldr	r3, [pc, #64]	; (800b424 <shci_send+0x7c>)
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800b3e8:	4b0f      	ldr	r3, [pc, #60]	; (800b428 <shci_send+0x80>)
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800b3f2:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800b3f6:	f7f6 f948 	bl	800168a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f103 0008 	add.w	r0, r3, #8
 800b400:	4b07      	ldr	r3, [pc, #28]	; (800b420 <shci_send+0x78>)
 800b402:	6819      	ldr	r1, [r3, #0]
 800b404:	4b06      	ldr	r3, [pc, #24]	; (800b420 <shci_send+0x78>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	789b      	ldrb	r3, [r3, #2]
 800b40a:	3303      	adds	r3, #3
 800b40c:	461a      	mov	r2, r3
 800b40e:	f001 fb67 	bl	800cae0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b412:	2001      	movs	r0, #1
 800b414:	f000 f83c 	bl	800b490 <Cmd_SetStatus>

  return;
 800b418:	bf00      	nop
}
 800b41a:	3710      	adds	r7, #16
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	20000268 	.word	0x20000268
 800b424:	200016e8 	.word	0x200016e8
 800b428:	200016c4 	.word	0x200016c4

0800b42c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800b434:	4a10      	ldr	r2, [pc, #64]	; (800b478 <TlInit+0x4c>)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800b43a:	4810      	ldr	r0, [pc, #64]	; (800b47c <TlInit+0x50>)
 800b43c:	f000 f882 	bl	800b544 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800b440:	2001      	movs	r0, #1
 800b442:	f000 f825 	bl	800b490 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b446:	4b0e      	ldr	r3, [pc, #56]	; (800b480 <TlInit+0x54>)
 800b448:	2201      	movs	r2, #1
 800b44a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800b44c:	4b0d      	ldr	r3, [pc, #52]	; (800b484 <TlInit+0x58>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d00c      	beq.n	800b46e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800b458:	4b0b      	ldr	r3, [pc, #44]	; (800b488 <TlInit+0x5c>)
 800b45a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800b45c:	4b0b      	ldr	r3, [pc, #44]	; (800b48c <TlInit+0x60>)
 800b45e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800b460:	4b08      	ldr	r3, [pc, #32]	; (800b484 <TlInit+0x58>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f107 020c 	add.w	r2, r7, #12
 800b468:	4610      	mov	r0, r2
 800b46a:	4798      	blx	r3
  }

  return;
 800b46c:	bf00      	nop
 800b46e:	bf00      	nop
}
 800b470:	3718      	adds	r7, #24
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	20000268 	.word	0x20000268
 800b47c:	2000025c 	.word	0x2000025c
 800b480:	2000026c 	.word	0x2000026c
 800b484:	200016c4 	.word	0x200016c4
 800b488:	0800b4e1 	.word	0x0800b4e1
 800b48c:	0800b4f9 	.word	0x0800b4f9

0800b490 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	4603      	mov	r3, r0
 800b498:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800b49a:	79fb      	ldrb	r3, [r7, #7]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d10b      	bne.n	800b4b8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800b4a0:	4b0d      	ldr	r3, [pc, #52]	; (800b4d8 <Cmd_SetStatus+0x48>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d003      	beq.n	800b4b0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800b4a8:	4b0b      	ldr	r3, [pc, #44]	; (800b4d8 <Cmd_SetStatus+0x48>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2000      	movs	r0, #0
 800b4ae:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800b4b0:	4b0a      	ldr	r3, [pc, #40]	; (800b4dc <Cmd_SetStatus+0x4c>)
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800b4b6:	e00b      	b.n	800b4d0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800b4b8:	4b08      	ldr	r3, [pc, #32]	; (800b4dc <Cmd_SetStatus+0x4c>)
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800b4be:	4b06      	ldr	r3, [pc, #24]	; (800b4d8 <Cmd_SetStatus+0x48>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d004      	beq.n	800b4d0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800b4c6:	4b04      	ldr	r3, [pc, #16]	; (800b4d8 <Cmd_SetStatus+0x48>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2001      	movs	r0, #1
 800b4cc:	4798      	blx	r3
  return;
 800b4ce:	bf00      	nop
 800b4d0:	bf00      	nop
}
 800b4d2:	3708      	adds	r7, #8
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bd80      	pop	{r7, pc}
 800b4d8:	200016e4 	.word	0x200016e4
 800b4dc:	20000264 	.word	0x20000264

0800b4e0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800b4e8:	2000      	movs	r0, #0
 800b4ea:	f7f6 f8c3 	bl	8001674 <shci_cmd_resp_release>

  return;
 800b4ee:	bf00      	nop
}
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
	...

0800b4f8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800b500:	6879      	ldr	r1, [r7, #4]
 800b502:	4805      	ldr	r0, [pc, #20]	; (800b518 <TlUserEvtReceived+0x20>)
 800b504:	f000 f876 	bl	800b5f4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b508:	4803      	ldr	r0, [pc, #12]	; (800b518 <TlUserEvtReceived+0x20>)
 800b50a:	f7f6 f8a7 	bl	800165c <shci_notify_asynch_evt>

  return;
 800b50e:	bf00      	nop
}
 800b510:	3708      	adds	r7, #8
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
 800b516:	bf00      	nop
 800b518:	2000025c 	.word	0x2000025c

0800b51c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	4a05      	ldr	r2, [pc, #20]	; (800b53c <shci_register_io_bus+0x20>)
 800b528:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	4a04      	ldr	r2, [pc, #16]	; (800b540 <shci_register_io_bus+0x24>)
 800b52e:	611a      	str	r2, [r3, #16]

  return;
 800b530:	bf00      	nop
}
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr
 800b53c:	0800c291 	.word	0x0800c291
 800b540:	0800c2e5 	.word	0x0800c2e5

0800b544 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	605a      	str	r2, [r3, #4]
}
 800b558:	bf00      	nop
 800b55a:	370c      	adds	r7, #12
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800b564:	b480      	push	{r7}
 800b566:	b087      	sub	sp, #28
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b56c:	f3ef 8310 	mrs	r3, PRIMASK
 800b570:	60fb      	str	r3, [r7, #12]
  return(result);
 800b572:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b574:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b576:	b672      	cpsid	i
}
 800b578:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	429a      	cmp	r2, r3
 800b582:	d102      	bne.n	800b58a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800b584:	2301      	movs	r3, #1
 800b586:	75fb      	strb	r3, [r7, #23]
 800b588:	e001      	b.n	800b58e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800b58a:	2300      	movs	r3, #0
 800b58c:	75fb      	strb	r3, [r7, #23]
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	f383 8810 	msr	PRIMASK, r3
}
 800b598:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800b59a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	371c      	adds	r7, #28
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr

0800b5a8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b087      	sub	sp, #28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5b2:	f3ef 8310 	mrs	r3, PRIMASK
 800b5b6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b5ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b5bc:	b672      	cpsid	i
}
 800b5be:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	683a      	ldr	r2, [r7, #0]
 800b5d2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	683a      	ldr	r2, [r7, #0]
 800b5da:	605a      	str	r2, [r3, #4]
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	f383 8810 	msr	PRIMASK, r3
}
 800b5e6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b5e8:	bf00      	nop
 800b5ea:	371c      	adds	r7, #28
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b087      	sub	sp, #28
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b5fe:	f3ef 8310 	mrs	r3, PRIMASK
 800b602:	60fb      	str	r3, [r7, #12]
  return(result);
 800b604:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b606:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b608:	b672      	cpsid	i
}
 800b60a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	685a      	ldr	r2, [r3, #4]
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	683a      	ldr	r2, [r7, #0]
 800b61e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	683a      	ldr	r2, [r7, #0]
 800b626:	601a      	str	r2, [r3, #0]
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	f383 8810 	msr	PRIMASK, r3
}
 800b632:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b634:	bf00      	nop
 800b636:	371c      	adds	r7, #28
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800b640:	b480      	push	{r7}
 800b642:	b087      	sub	sp, #28
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b648:	f3ef 8310 	mrs	r3, PRIMASK
 800b64c:	60fb      	str	r3, [r7, #12]
  return(result);
 800b64e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b650:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b652:	b672      	cpsid	i
}
 800b654:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	6812      	ldr	r2, [r2, #0]
 800b65e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	687a      	ldr	r2, [r7, #4]
 800b666:	6852      	ldr	r2, [r2, #4]
 800b668:	605a      	str	r2, [r3, #4]
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	f383 8810 	msr	PRIMASK, r3
}
 800b674:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b676:	bf00      	nop
 800b678:	371c      	adds	r7, #28
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b086      	sub	sp, #24
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
 800b68a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b68c:	f3ef 8310 	mrs	r3, PRIMASK
 800b690:	60fb      	str	r3, [r7, #12]
  return(result);
 800b692:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b694:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b696:	b672      	cpsid	i
}
 800b698:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681a      	ldr	r2, [r3, #0]
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f7ff ffca 	bl	800b640 <LST_remove_node>
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	f383 8810 	msr	PRIMASK, r3
}
 800b6b6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b6b8:	bf00      	nop
 800b6ba:	3718      	adds	r7, #24
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b085      	sub	sp, #20
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	607a      	str	r2, [r7, #4]
 800b6cc:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	887a      	ldrh	r2, [r7, #2]
 800b6f6:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	7e3a      	ldrb	r2, [r7, #24]
 800b6fc:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800b6fe:	7e3b      	ldrb	r3, [r7, #24]
 800b700:	f003 0302 	and.w	r3, r3, #2
 800b704:	2b00      	cmp	r3, #0
 800b706:	d006      	beq.n	800b716 <CircularQueue_Init+0x56>
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	891b      	ldrh	r3, [r3, #8]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d002      	beq.n	800b716 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800b710:	f04f 33ff 	mov.w	r3, #4294967295
 800b714:	e000      	b.n	800b718 <CircularQueue_Init+0x58>
  }
  return 0;
 800b716:	2300      	movs	r3, #0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3714      	adds	r7, #20
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b08e      	sub	sp, #56	; 0x38
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	603b      	str	r3, [r7, #0]
 800b730:	4613      	mov	r3, r2
 800b732:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800b734:	2300      	movs	r3, #0
 800b736:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800b738:	2300      	movs	r3, #0
 800b73a:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800b73c:	2300      	movs	r3, #0
 800b73e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800b740:	2300      	movs	r3, #0
 800b742:	62bb      	str	r3, [r7, #40]	; 0x28
 800b744:	2300      	movs	r3, #0
 800b746:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800b748:	2300      	movs	r3, #0
 800b74a:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800b74c:	2300      	movs	r3, #0
 800b74e:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	891b      	ldrh	r3, [r3, #8]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d101      	bne.n	800b75c <CircularQueue_Add+0x38>
 800b758:	2302      	movs	r3, #2
 800b75a:	e000      	b.n	800b75e <CircularQueue_Add+0x3a>
 800b75c:	2300      	movs	r3, #0
 800b75e:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	695b      	ldr	r3, [r3, #20]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d02a      	beq.n	800b7be <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	891b      	ldrh	r3, [r3, #8]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d123      	bne.n	800b7b8 <CircularQueue_Add+0x94>
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	691b      	ldr	r3, [r3, #16]
 800b778:	4413      	add	r3, r2
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	b29a      	uxth	r2, r3
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	6819      	ldr	r1, [r3, #0]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	1c58      	adds	r0, r3, #1
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	4298      	cmp	r0, r3
 800b78e:	d306      	bcc.n	800b79e <CircularQueue_Add+0x7a>
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6918      	ldr	r0, [r3, #16]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	1ac3      	subs	r3, r0, r3
 800b79a:	3301      	adds	r3, #1
 800b79c:	e002      	b.n	800b7a4 <CircularQueue_Add+0x80>
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	691b      	ldr	r3, [r3, #16]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	440b      	add	r3, r1
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	021b      	lsls	r3, r3, #8
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	4413      	add	r3, r2
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	3302      	adds	r3, #2
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	e001      	b.n	800b7bc <CircularQueue_Add+0x98>
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	891b      	ldrh	r3, [r3, #8]
 800b7bc:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	891b      	ldrh	r3, [r3, #8]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d002      	beq.n	800b7cc <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	891b      	ldrh	r3, [r3, #8]
 800b7ca:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	691a      	ldr	r2, [r3, #16]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	68db      	ldr	r3, [r3, #12]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d307      	bcc.n	800b7e8 <CircularQueue_Add+0xc4>
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	685a      	ldr	r2, [r3, #4]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6919      	ldr	r1, [r3, #16]
 800b7e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b7e2:	440b      	add	r3, r1
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	e000      	b.n	800b7ea <CircularQueue_Add+0xc6>
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800b7ec:	88fa      	ldrh	r2, [r7, #6]
 800b7ee:	7ffb      	ldrb	r3, [r7, #31]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	fb02 f303 	mul.w	r3, r2, r3
 800b7fa:	69ba      	ldr	r2, [r7, #24]
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d80b      	bhi.n	800b818 <CircularQueue_Add+0xf4>
 800b800:	88fa      	ldrh	r2, [r7, #6]
 800b802:	7ffb      	ldrb	r3, [r7, #31]
 800b804:	4413      	add	r3, r2
 800b806:	461a      	mov	r2, r3
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	fbb3 f1f2 	udiv	r1, r3, r2
 800b80e:	fb01 f202 	mul.w	r2, r1, r2
 800b812:	1a9b      	subs	r3, r3, r2
 800b814:	b2db      	uxtb	r3, r3
 800b816:	e000      	b.n	800b81a <CircularQueue_Add+0xf6>
 800b818:	2300      	movs	r3, #0
 800b81a:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800b81c:	7dfa      	ldrb	r2, [r7, #23]
 800b81e:	7ffb      	ldrb	r3, [r7, #31]
 800b820:	429a      	cmp	r2, r3
 800b822:	bf8c      	ite	hi
 800b824:	2301      	movhi	r3, #1
 800b826:	2300      	movls	r3, #0
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800b82c:	7fbb      	ldrb	r3, [r7, #30]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d008      	beq.n	800b844 <CircularQueue_Add+0x120>
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	7f1b      	ldrb	r3, [r3, #28]
 800b836:	f003 0301 	and.w	r3, r3, #1
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d002      	beq.n	800b844 <CircularQueue_Add+0x120>
 800b83e:	7dfb      	ldrb	r3, [r7, #23]
 800b840:	b29b      	uxth	r3, r3
 800b842:	e000      	b.n	800b846 <CircularQueue_Add+0x122>
 800b844:	8bbb      	ldrh	r3, [r7, #28]
 800b846:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800b848:	7fbb      	ldrb	r3, [r7, #30]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d008      	beq.n	800b860 <CircularQueue_Add+0x13c>
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	7f1b      	ldrb	r3, [r3, #28]
 800b852:	f003 0302 	and.w	r3, r3, #2
 800b856:	2b00      	cmp	r3, #0
 800b858:	d002      	beq.n	800b860 <CircularQueue_Add+0x13c>
 800b85a:	7ffb      	ldrb	r3, [r7, #31]
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	e000      	b.n	800b862 <CircularQueue_Add+0x13e>
 800b860:	8bbb      	ldrh	r3, [r7, #28]
 800b862:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800b864:	88fb      	ldrh	r3, [r7, #6]
 800b866:	2b00      	cmp	r3, #0
 800b868:	f000 817e 	beq.w	800bb68 <CircularQueue_Add+0x444>
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	695a      	ldr	r2, [r3, #20]
 800b870:	88f9      	ldrh	r1, [r7, #6]
 800b872:	7ffb      	ldrb	r3, [r7, #31]
 800b874:	440b      	add	r3, r1
 800b876:	4619      	mov	r1, r3
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	fb01 f303 	mul.w	r3, r1, r3
 800b87e:	441a      	add	r2, r3
 800b880:	8bbb      	ldrh	r3, [r7, #28]
 800b882:	441a      	add	r2, r3
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	429a      	cmp	r2, r3
 800b88a:	f200 816d 	bhi.w	800bb68 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800b88e:	2300      	movs	r3, #0
 800b890:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b892:	e14a      	b.n	800bb2a <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	691a      	ldr	r2, [r3, #16]
 800b898:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b89a:	441a      	add	r2, r3
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	429a      	cmp	r2, r3
 800b8a2:	d307      	bcc.n	800b8b4 <CircularQueue_Add+0x190>
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	691a      	ldr	r2, [r3, #16]
 800b8a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b8aa:	441a      	add	r2, r3
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	e003      	b.n	800b8bc <CircularQueue_Add+0x198>
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	691a      	ldr	r2, [r3, #16]
 800b8b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b8ba:	4413      	add	r3, r2
 800b8bc:	68fa      	ldr	r2, [r7, #12]
 800b8be:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	691b      	ldr	r3, [r3, #16]
 800b8c4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	891b      	ldrh	r3, [r3, #8]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d130      	bne.n	800b930 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d4:	1c59      	adds	r1, r3, #1
 800b8d6:	6339      	str	r1, [r7, #48]	; 0x30
 800b8d8:	4413      	add	r3, r2
 800b8da:	88fa      	ldrh	r2, [r7, #6]
 800b8dc:	b2d2      	uxtb	r2, r2
 800b8de:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d304      	bcc.n	800b8f4 <CircularQueue_Add+0x1d0>
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8f0:	1ad3      	subs	r3, r2, r3
 800b8f2:	e000      	b.n	800b8f6 <CircularQueue_Add+0x1d2>
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f6:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800b8f8:	88fb      	ldrh	r3, [r7, #6]
 800b8fa:	0a1b      	lsrs	r3, r3, #8
 800b8fc:	b298      	uxth	r0, r3
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b904:	1c59      	adds	r1, r3, #1
 800b906:	6339      	str	r1, [r7, #48]	; 0x30
 800b908:	4413      	add	r3, r2
 800b90a:	b2c2      	uxtb	r2, r0
 800b90c:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b914:	429a      	cmp	r2, r3
 800b916:	d304      	bcc.n	800b922 <CircularQueue_Add+0x1fe>
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b91e:	1ad3      	subs	r3, r2, r3
 800b920:	e000      	b.n	800b924 <CircularQueue_Add+0x200>
 800b922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b924:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	695b      	ldr	r3, [r3, #20]
 800b92a:	1c9a      	adds	r2, r3, #2
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800b930:	88fa      	ldrh	r2, [r7, #6]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	6859      	ldr	r1, [r3, #4]
 800b936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b938:	1acb      	subs	r3, r1, r3
 800b93a:	4293      	cmp	r3, r2
 800b93c:	bf28      	it	cs
 800b93e:	4613      	movcs	r3, r2
 800b940:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800b942:	88fb      	ldrh	r3, [r7, #6]
 800b944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b946:	429a      	cmp	r2, r3
 800b948:	d007      	beq.n	800b95a <CircularQueue_Add+0x236>
 800b94a:	88fb      	ldrh	r3, [r7, #6]
 800b94c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b94e:	429a      	cmp	r2, r3
 800b950:	d225      	bcs.n	800b99e <CircularQueue_Add+0x27a>
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	7f1b      	ldrb	r3, [r3, #28]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d121      	bne.n	800b99e <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681a      	ldr	r2, [r3, #0]
 800b95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b960:	18d0      	adds	r0, r2, r3
 800b962:	88fb      	ldrh	r3, [r7, #6]
 800b964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b966:	fb02 f303 	mul.w	r3, r2, r3
 800b96a:	68ba      	ldr	r2, [r7, #8]
 800b96c:	4413      	add	r3, r2
 800b96e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b970:	4619      	mov	r1, r3
 800b972:	f001 f8b5 	bl	800cae0 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	695a      	ldr	r2, [r3, #20]
 800b97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97c:	441a      	add	r2, r3
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800b982:	2300      	movs	r3, #0
 800b984:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800b986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b988:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800b98a:	88fa      	ldrh	r2, [r7, #6]
 800b98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98e:	1ad3      	subs	r3, r2, r3
 800b990:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800b992:	7ffb      	ldrb	r3, [r7, #31]
 800b994:	b29a      	uxth	r2, r3
 800b996:	88fb      	ldrh	r3, [r7, #6]
 800b998:	4413      	add	r3, r2
 800b99a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b99c:	e0a4      	b.n	800bae8 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800b99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f000 80a1 	beq.w	800bae8 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	7f1b      	ldrb	r3, [r3, #28]
 800b9aa:	f003 0301 	and.w	r3, r3, #1
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d03a      	beq.n	800ba28 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	891b      	ldrh	r3, [r3, #8]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d10d      	bne.n	800b9d6 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c0:	3b02      	subs	r3, #2
 800b9c2:	4413      	add	r3, r2
 800b9c4:	22ff      	movs	r2, #255	; 0xff
 800b9c6:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	4413      	add	r3, r2
 800b9d2:	22ff      	movs	r2, #255	; 0xff
 800b9d4:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	695a      	ldr	r2, [r3, #20]
 800b9da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9dc:	441a      	add	r2, r3
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800b9e6:	88fb      	ldrh	r3, [r7, #6]
 800b9e8:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	891b      	ldrh	r3, [r3, #8]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d16f      	bne.n	800bad6 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fc:	1c59      	adds	r1, r3, #1
 800b9fe:	6339      	str	r1, [r7, #48]	; 0x30
 800ba00:	4413      	add	r3, r2
 800ba02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba04:	b2d2      	uxtb	r2, r2
 800ba06:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ba08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0a:	0a18      	lsrs	r0, r3, #8
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681a      	ldr	r2, [r3, #0]
 800ba10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba12:	1c59      	adds	r1, r3, #1
 800ba14:	6339      	str	r1, [r7, #48]	; 0x30
 800ba16:	4413      	add	r3, r2
 800ba18:	b2c2      	uxtb	r2, r0
 800ba1a:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	695b      	ldr	r3, [r3, #20]
 800ba20:	1c9a      	adds	r2, r3, #2
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	615a      	str	r2, [r3, #20]
 800ba26:	e056      	b.n	800bad6 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	7f1b      	ldrb	r3, [r3, #28]
 800ba2c:	f003 0302 	and.w	r3, r3, #2
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d050      	beq.n	800bad6 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	891b      	ldrh	r3, [r3, #8]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d14a      	bne.n	800bad2 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba42:	3b02      	subs	r3, #2
 800ba44:	4413      	add	r3, r2
 800ba46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba48:	b2d2      	uxtb	r2, r2
 800ba4a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ba4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4e:	0a19      	lsrs	r1, r3, #8
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba56:	3b01      	subs	r3, #1
 800ba58:	4413      	add	r3, r2
 800ba5a:	b2ca      	uxtb	r2, r1
 800ba5c:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba64:	18d0      	adds	r0, r2, r3
 800ba66:	88fb      	ldrh	r3, [r7, #6]
 800ba68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba6a:	fb02 f303 	mul.w	r3, r2, r3
 800ba6e:	68ba      	ldr	r2, [r7, #8]
 800ba70:	4413      	add	r3, r2
 800ba72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba74:	4619      	mov	r1, r3
 800ba76:	f001 f833 	bl	800cae0 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	695a      	ldr	r2, [r3, #20]
 800ba7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba80:	441a      	add	r2, r3
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800ba86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba88:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800ba8a:	88fa      	ldrh	r2, [r7, #6]
 800ba8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	699b      	ldr	r3, [r3, #24]
 800ba96:	1c5a      	adds	r2, r3, #1
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa6:	1c59      	adds	r1, r3, #1
 800baa8:	6339      	str	r1, [r7, #48]	; 0x30
 800baaa:	4413      	add	r3, r2
 800baac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baae:	b2d2      	uxtb	r2, r2
 800bab0:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800bab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab4:	0a18      	lsrs	r0, r3, #8
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800babc:	1c59      	adds	r1, r3, #1
 800babe:	6339      	str	r1, [r7, #48]	; 0x30
 800bac0:	4413      	add	r3, r2
 800bac2:	b2c2      	uxtb	r2, r0
 800bac4:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	695b      	ldr	r3, [r3, #20]
 800baca:	1c9a      	adds	r2, r3, #2
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	615a      	str	r2, [r3, #20]
 800bad0:	e001      	b.n	800bad6 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800bad2:	2300      	movs	r3, #0
 800bad4:	e049      	b.n	800bb6a <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800bad6:	7ffb      	ldrb	r3, [r7, #31]
 800bad8:	b29a      	uxth	r2, r3
 800bada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800badc:	b29b      	uxth	r3, r3
 800bade:	4413      	add	r3, r2
 800bae0:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2200      	movs	r2, #0
 800bae6:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800bae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baea:	2b00      	cmp	r3, #0
 800baec:	d015      	beq.n	800bb1a <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf4:	18d0      	adds	r0, r2, r3
 800baf6:	88fb      	ldrh	r3, [r7, #6]
 800baf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bafa:	fb03 f202 	mul.w	r2, r3, r2
 800bafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb00:	4413      	add	r3, r2
 800bb02:	68ba      	ldr	r2, [r7, #8]
 800bb04:	4413      	add	r3, r2
 800bb06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb08:	4619      	mov	r1, r3
 800bb0a:	f000 ffe9 	bl	800cae0 <memcpy>
        q->byteCount += NbBytesToCopy;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	695a      	ldr	r2, [r3, #20]
 800bb12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb14:	441a      	add	r2, r3
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	699b      	ldr	r3, [r3, #24]
 800bb1e:	1c5a      	adds	r2, r3, #1
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800bb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb26:	3301      	adds	r3, #1
 800bb28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	f4ff aeb0 	bcc.w	800b894 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6919      	ldr	r1, [r3, #16]
 800bb3c:	7ffb      	ldrb	r3, [r7, #31]
 800bb3e:	4419      	add	r1, r3
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	4299      	cmp	r1, r3
 800bb46:	d307      	bcc.n	800bb58 <CircularQueue_Add+0x434>
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6919      	ldr	r1, [r3, #16]
 800bb4c:	7ffb      	ldrb	r3, [r7, #31]
 800bb4e:	4419      	add	r1, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	1acb      	subs	r3, r1, r3
 800bb56:	e003      	b.n	800bb60 <CircularQueue_Add+0x43c>
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6919      	ldr	r1, [r3, #16]
 800bb5c:	7ffb      	ldrb	r3, [r7, #31]
 800bb5e:	440b      	add	r3, r1
 800bb60:	4413      	add	r3, r2
 800bb62:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800bb64:	6a3b      	ldr	r3, [r7, #32]
 800bb66:	e000      	b.n	800bb6a <CircularQueue_Add+0x446>
    return NULL;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3738      	adds	r7, #56	; 0x38
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800bb72:	b480      	push	{r7}
 800bb74:	b085      	sub	sp, #20
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
 800bb7a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800bb80:	2300      	movs	r3, #0
 800bb82:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	891b      	ldrh	r3, [r3, #8]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d101      	bne.n	800bb90 <CircularQueue_Remove+0x1e>
 800bb8c:	2302      	movs	r3, #2
 800bb8e:	e000      	b.n	800bb92 <CircularQueue_Remove+0x20>
 800bb90:	2300      	movs	r3, #0
 800bb92:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800bb94:	2300      	movs	r3, #0
 800bb96:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f000 80cc 	beq.w	800bd3a <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	891b      	ldrh	r3, [r3, #8]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d121      	bne.n	800bbee <CircularQueue_Remove+0x7c>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	b29a      	uxth	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6819      	ldr	r1, [r3, #0]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	68db      	ldr	r3, [r3, #12]
 800bbc0:	1c58      	adds	r0, r3, #1
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	685b      	ldr	r3, [r3, #4]
 800bbc6:	4298      	cmp	r0, r3
 800bbc8:	d306      	bcc.n	800bbd8 <CircularQueue_Remove+0x66>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	68d8      	ldr	r0, [r3, #12]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	1ac3      	subs	r3, r0, r3
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	e002      	b.n	800bbde <CircularQueue_Remove+0x6c>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	3301      	adds	r3, #1
 800bbde:	440b      	add	r3, r1
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	021b      	lsls	r3, r3, #8
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	4413      	add	r3, r2
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	e001      	b.n	800bbf2 <CircularQueue_Remove+0x80>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	891b      	ldrh	r3, [r3, #8]
 800bbf2:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	7f1b      	ldrb	r3, [r3, #28]
 800bbf8:	f003 0301 	and.w	r3, r3, #1
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d057      	beq.n	800bcb0 <CircularQueue_Remove+0x13e>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	7f1b      	ldrb	r3, [r3, #28]
 800bc04:	f003 0302 	and.w	r3, r3, #2
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d151      	bne.n	800bcb0 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bc0c:	897b      	ldrh	r3, [r7, #10]
 800bc0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d103      	bne.n	800bc1e <CircularQueue_Remove+0xac>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	891b      	ldrh	r3, [r3, #8]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d012      	beq.n	800bc44 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	68da      	ldr	r2, [r3, #12]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d942      	bls.n	800bcb0 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	891b      	ldrh	r3, [r3, #8]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d03e      	beq.n	800bcb0 <CircularQueue_Remove+0x13e>
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	685a      	ldr	r2, [r3, #4]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	1ad3      	subs	r3, r2, r3
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	8912      	ldrh	r2, [r2, #8]
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d235      	bcs.n	800bcb0 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	695a      	ldr	r2, [r3, #20]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	68d9      	ldr	r1, [r3, #12]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	1acb      	subs	r3, r1, r3
 800bc52:	441a      	add	r2, r3
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	891b      	ldrh	r3, [r3, #8]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d121      	bne.n	800bcaa <CircularQueue_Remove+0x138>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	4413      	add	r3, r2
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6819      	ldr	r1, [r3, #0]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	1c58      	adds	r0, r3, #1
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	4298      	cmp	r0, r3
 800bc84:	d306      	bcc.n	800bc94 <CircularQueue_Remove+0x122>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	68d8      	ldr	r0, [r3, #12]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	1ac3      	subs	r3, r0, r3
 800bc90:	3301      	adds	r3, #1
 800bc92:	e002      	b.n	800bc9a <CircularQueue_Remove+0x128>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	440b      	add	r3, r1
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	021b      	lsls	r3, r3, #8
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	4413      	add	r3, r2
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	e001      	b.n	800bcae <CircularQueue_Remove+0x13c>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	891b      	ldrh	r3, [r3, #8]
 800bcae:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	68d9      	ldr	r1, [r3, #12]
 800bcb8:	7a7b      	ldrb	r3, [r7, #9]
 800bcba:	4419      	add	r1, r3
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	4299      	cmp	r1, r3
 800bcc2:	d307      	bcc.n	800bcd4 <CircularQueue_Remove+0x162>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	68d9      	ldr	r1, [r3, #12]
 800bcc8:	7a7b      	ldrb	r3, [r7, #9]
 800bcca:	4419      	add	r1, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	1acb      	subs	r3, r1, r3
 800bcd2:	e003      	b.n	800bcdc <CircularQueue_Remove+0x16a>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	68d9      	ldr	r1, [r3, #12]
 800bcd8:	7a7b      	ldrb	r3, [r7, #9]
 800bcda:	440b      	add	r3, r1
 800bcdc:	4413      	add	r3, r2
 800bcde:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	695b      	ldr	r3, [r3, #20]
 800bce4:	8979      	ldrh	r1, [r7, #10]
 800bce6:	7a7a      	ldrb	r2, [r7, #9]
 800bce8:	440a      	add	r2, r1
 800bcea:	1a9a      	subs	r2, r3, r2
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	695b      	ldr	r3, [r3, #20]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d01b      	beq.n	800bd30 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	68da      	ldr	r2, [r3, #12]
 800bcfc:	897b      	ldrh	r3, [r7, #10]
 800bcfe:	441a      	add	r2, r3
 800bd00:	7a7b      	ldrb	r3, [r7, #9]
 800bd02:	441a      	add	r2, r3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d309      	bcc.n	800bd20 <CircularQueue_Remove+0x1ae>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	68da      	ldr	r2, [r3, #12]
 800bd10:	897b      	ldrh	r3, [r7, #10]
 800bd12:	441a      	add	r2, r3
 800bd14:	7a7b      	ldrb	r3, [r7, #9]
 800bd16:	441a      	add	r2, r3
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	1ad3      	subs	r3, r2, r3
 800bd1e:	e005      	b.n	800bd2c <CircularQueue_Remove+0x1ba>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	68da      	ldr	r2, [r3, #12]
 800bd24:	897b      	ldrh	r3, [r7, #10]
 800bd26:	441a      	add	r2, r3
 800bd28:	7a7b      	ldrb	r3, [r7, #9]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	699b      	ldr	r3, [r3, #24]
 800bd34:	1e5a      	subs	r2, r3, #1
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d002      	beq.n	800bd46 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	897a      	ldrh	r2, [r7, #10]
 800bd44:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800bd46:	68fb      	ldr	r3, [r7, #12]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3714      	adds	r7, #20
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b087      	sub	sp, #28
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800bd62:	2300      	movs	r3, #0
 800bd64:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	891b      	ldrh	r3, [r3, #8]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d101      	bne.n	800bd72 <CircularQueue_Sense+0x1e>
 800bd6e:	2302      	movs	r3, #2
 800bd70:	e000      	b.n	800bd74 <CircularQueue_Sense+0x20>
 800bd72:	2300      	movs	r3, #0
 800bd74:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800bd76:	2300      	movs	r3, #0
 800bd78:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	695b      	ldr	r3, [r3, #20]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	f000 8090 	beq.w	800bea8 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	891b      	ldrh	r3, [r3, #8]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d121      	bne.n	800bdda <CircularQueue_Sense+0x86>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	4413      	add	r3, r2
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	b29a      	uxth	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6819      	ldr	r1, [r3, #0]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	1c58      	adds	r0, r3, #1
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	685b      	ldr	r3, [r3, #4]
 800bdb2:	4298      	cmp	r0, r3
 800bdb4:	d306      	bcc.n	800bdc4 <CircularQueue_Sense+0x70>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	68d8      	ldr	r0, [r3, #12]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	1ac3      	subs	r3, r0, r3
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	e002      	b.n	800bdca <CircularQueue_Sense+0x76>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	440b      	add	r3, r1
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	b29b      	uxth	r3, r3
 800bdd0:	021b      	lsls	r3, r3, #8
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	4413      	add	r3, r2
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	e001      	b.n	800bdde <CircularQueue_Sense+0x8a>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	891b      	ldrh	r3, [r3, #8]
 800bdde:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	7f1b      	ldrb	r3, [r3, #28]
 800bde4:	f003 0301 	and.w	r3, r3, #1
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d048      	beq.n	800be7e <CircularQueue_Sense+0x12a>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	7f1b      	ldrb	r3, [r3, #28]
 800bdf0:	f003 0302 	and.w	r3, r3, #2
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d142      	bne.n	800be7e <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800bdf8:	8a7b      	ldrh	r3, [r7, #18]
 800bdfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d103      	bne.n	800be0a <CircularQueue_Sense+0xb6>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	891b      	ldrh	r3, [r3, #8]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d012      	beq.n	800be30 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	68da      	ldr	r2, [r3, #12]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800be12:	429a      	cmp	r2, r3
 800be14:	d933      	bls.n	800be7e <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	891b      	ldrh	r3, [r3, #8]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d02f      	beq.n	800be7e <CircularQueue_Sense+0x12a>
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	685a      	ldr	r2, [r3, #4]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	1ad3      	subs	r3, r2, r3
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	8912      	ldrh	r2, [r2, #8]
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d226      	bcs.n	800be7e <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800be30:	2300      	movs	r3, #0
 800be32:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	891b      	ldrh	r3, [r3, #8]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d11d      	bne.n	800be78 <CircularQueue_Sense+0x124>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	4413      	add	r3, r2
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	b29a      	uxth	r2, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6819      	ldr	r1, [r3, #0]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	1c58      	adds	r0, r3, #1
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	4298      	cmp	r0, r3
 800be56:	d305      	bcc.n	800be64 <CircularQueue_Sense+0x110>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	685b      	ldr	r3, [r3, #4]
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	1ac3      	subs	r3, r0, r3
 800be60:	3301      	adds	r3, #1
 800be62:	e001      	b.n	800be68 <CircularQueue_Sense+0x114>
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	3301      	adds	r3, #1
 800be68:	440b      	add	r3, r1
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	021b      	lsls	r3, r3, #8
 800be70:	b29b      	uxth	r3, r3
 800be72:	4413      	add	r3, r2
 800be74:	b29b      	uxth	r3, r3
 800be76:	e001      	b.n	800be7c <CircularQueue_Sense+0x128>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	891b      	ldrh	r3, [r3, #8]
 800be7c:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	7af9      	ldrb	r1, [r7, #11]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	4419      	add	r1, r3
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	4299      	cmp	r1, r3
 800be8e:	d306      	bcc.n	800be9e <CircularQueue_Sense+0x14a>
 800be90:	7af9      	ldrb	r1, [r7, #11]
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	4419      	add	r1, r3
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	1acb      	subs	r3, r1, r3
 800be9c:	e002      	b.n	800bea4 <CircularQueue_Sense+0x150>
 800be9e:	7af9      	ldrb	r1, [r7, #11]
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	440b      	add	r3, r1
 800bea4:	4413      	add	r3, r2
 800bea6:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d002      	beq.n	800beb4 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	8a7a      	ldrh	r2, [r7, #18]
 800beb2:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800beb4:	697b      	ldr	r3, [r7, #20]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	371c      	adds	r7, #28
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr

0800bec2 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800bec2:	b480      	push	{r7}
 800bec4:	af00      	add	r7, sp, #0
  return;
 800bec6:	bf00      	nop
}
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800bed0:	b480      	push	{r7}
 800bed2:	af00      	add	r7, sp, #0
  return;
 800bed4:	bf00      	nop
}
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr

0800bede <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800bede:	b480      	push	{r7}
 800bee0:	af00      	add	r7, sp, #0
  return;
 800bee2:	bf00      	nop
}
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800beec:	b480      	push	{r7}
 800beee:	af00      	add	r7, sp, #0
  return;
 800bef0:	bf00      	nop
}
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr

0800befa <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800befa:	b480      	push	{r7}
 800befc:	af00      	add	r7, sp, #0
  return;
 800befe:	bf00      	nop
}
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800bf08:	b480      	push	{r7}
 800bf0a:	af00      	add	r7, sp, #0
  return;
 800bf0c:	bf00      	nop
}
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf14:	4770      	bx	lr

0800bf16 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800bf16:	b480      	push	{r7}
 800bf18:	af00      	add	r7, sp, #0
  return;
 800bf1a:	bf00      	nop
}
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr

0800bf24 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800bf24:	b480      	push	{r7}
 800bf26:	af00      	add	r7, sp, #0
  return;
 800bf28:	bf00      	nop
}
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr

0800bf32 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800bf32:	b480      	push	{r7}
 800bf34:	af00      	add	r7, sp, #0
  return;
 800bf36:	bf00      	nop
}
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800bf40:	b480      	push	{r7}
 800bf42:	af00      	add	r7, sp, #0
  return;
 800bf44:	bf00      	nop
}
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr

0800bf4e <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800bf4e:	b480      	push	{r7}
 800bf50:	af00      	add	r7, sp, #0
  return;
 800bf52:	bf00      	nop
}
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	af00      	add	r7, sp, #0
  return;
 800bf60:	bf00      	nop
}
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr

0800bf6a <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 800bf6a:	b480      	push	{r7}
 800bf6c:	af00      	add	r7, sp, #0
  return;
 800bf6e:	bf00      	nop
}
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800bf78:	b480      	push	{r7}
 800bf7a:	af00      	add	r7, sp, #0
  return;
 800bf7c:	bf00      	nop
}
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr

0800bf86 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800bf86:	b480      	push	{r7}
 800bf88:	af00      	add	r7, sp, #0
  return;
 800bf8a:	bf00      	nop
}
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800bf94:	b480      	push	{r7}
 800bf96:	af00      	add	r7, sp, #0
  return;
 800bf98:	bf00      	nop
}
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr

0800bfa2 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800bfa2:	b480      	push	{r7}
 800bfa4:	af00      	add	r7, sp, #0
  return;
 800bfa6:	bf00      	nop
}
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800bfb4:	4b04      	ldr	r3, [pc, #16]	; (800bfc8 <SVCCTL_Init+0x18>)
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800bfba:	4b04      	ldr	r3, [pc, #16]	; (800bfcc <SVCCTL_Init+0x1c>)
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800bfc0:	f000 f806 	bl	800bfd0 <SVCCTL_SvcInit>

  return;
 800bfc4:	bf00      	nop
}
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	20000250 	.word	0x20000250
 800bfcc:	20000258 	.word	0x20000258

0800bfd0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	af00      	add	r7, sp, #0
  BAS_Init();
 800bfd4:	f7ff ff75 	bl	800bec2 <BAS_Init>

  BLS_Init();
 800bfd8:	f7ff ff7a 	bl	800bed0 <BLS_Init>

  CRS_STM_Init();
 800bfdc:	f7ff ff7f 	bl	800bede <CRS_STM_Init>

  DIS_Init();
 800bfe0:	f7ff ff84 	bl	800beec <DIS_Init>

  EDS_STM_Init();
 800bfe4:	f7ff ff89 	bl	800befa <EDS_STM_Init>

  HIDS_Init();
 800bfe8:	f7ff ff8e 	bl	800bf08 <HIDS_Init>

  HRS_Init();
 800bfec:	f7ff ff93 	bl	800bf16 <HRS_Init>

  HTS_Init();
 800bff0:	f7ff ff98 	bl	800bf24 <HTS_Init>

  IAS_Init();
 800bff4:	f7ff ff9d 	bl	800bf32 <IAS_Init>

  LLS_Init();
 800bff8:	f7ff ffa2 	bl	800bf40 <LLS_Init>

  TPS_Init();
 800bffc:	f7ff ffa7 	bl	800bf4e <TPS_Init>

  MOTENV_STM_Init();
 800c000:	f7ff ffac 	bl	800bf5c <MOTENV_STM_Init>

  P2PS_STM_Init();
 800c004:	f7fe ffb2 	bl	800af6c <P2PS_STM_Init>

  ZDD_STM_Init();
 800c008:	f7ff ffaf 	bl	800bf6a <ZDD_STM_Init>

  OTAS_STM_Init();
 800c00c:	f7ff ffb4 	bl	800bf78 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800c010:	f7ff ffc0 	bl	800bf94 <BVOPUS_STM_Init>

  MESH_Init();
 800c014:	f7ff ffb7 	bl	800bf86 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800c018:	f7ff ffc3 	bl	800bfa2 <SVCCTL_InitCustomSvc>
  
  return;
 800c01c:	bf00      	nop
}
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800c020:	b480      	push	{r7}
 800c022:	b083      	sub	sp, #12
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800c028:	4b09      	ldr	r3, [pc, #36]	; (800c050 <SVCCTL_RegisterSvcHandler+0x30>)
 800c02a:	791b      	ldrb	r3, [r3, #4]
 800c02c:	4619      	mov	r1, r3
 800c02e:	4a08      	ldr	r2, [pc, #32]	; (800c050 <SVCCTL_RegisterSvcHandler+0x30>)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800c036:	4b06      	ldr	r3, [pc, #24]	; (800c050 <SVCCTL_RegisterSvcHandler+0x30>)
 800c038:	791b      	ldrb	r3, [r3, #4]
 800c03a:	3301      	adds	r3, #1
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	4b04      	ldr	r3, [pc, #16]	; (800c050 <SVCCTL_RegisterSvcHandler+0x30>)
 800c040:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800c042:	bf00      	nop
}
 800c044:	370c      	adds	r7, #12
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr
 800c04e:	bf00      	nop
 800c050:	20000250 	.word	0x20000250

0800c054 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b086      	sub	sp, #24
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	3301      	adds	r3, #1
 800c060:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800c062:	2300      	movs	r3, #0
 800c064:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	2bff      	cmp	r3, #255	; 0xff
 800c06c:	d125      	bne.n	800c0ba <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	3302      	adds	r3, #2
 800c072:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	881b      	ldrh	r3, [r3, #0]
 800c078:	b29b      	uxth	r3, r3
 800c07a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c07e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c082:	d118      	bne.n	800c0b6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c084:	2300      	movs	r3, #0
 800c086:	757b      	strb	r3, [r7, #21]
 800c088:	e00d      	b.n	800c0a6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800c08a:	7d7b      	ldrb	r3, [r7, #21]
 800c08c:	4a1a      	ldr	r2, [pc, #104]	; (800c0f8 <SVCCTL_UserEvtRx+0xa4>)
 800c08e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	4798      	blx	r3
 800c096:	4603      	mov	r3, r0
 800c098:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800c09a:	7dfb      	ldrb	r3, [r7, #23]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d108      	bne.n	800c0b2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c0a0:	7d7b      	ldrb	r3, [r7, #21]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	757b      	strb	r3, [r7, #21]
 800c0a6:	4b14      	ldr	r3, [pc, #80]	; (800c0f8 <SVCCTL_UserEvtRx+0xa4>)
 800c0a8:	791b      	ldrb	r3, [r3, #4]
 800c0aa:	7d7a      	ldrb	r2, [r7, #21]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d3ec      	bcc.n	800c08a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800c0b0:	e002      	b.n	800c0b8 <SVCCTL_UserEvtRx+0x64>
              break;
 800c0b2:	bf00      	nop
          break;
 800c0b4:	e000      	b.n	800c0b8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800c0b6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800c0b8:	e000      	b.n	800c0bc <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800c0ba:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800c0bc:	7dfb      	ldrb	r3, [r7, #23]
 800c0be:	2b02      	cmp	r3, #2
 800c0c0:	d00f      	beq.n	800c0e2 <SVCCTL_UserEvtRx+0x8e>
 800c0c2:	2b02      	cmp	r3, #2
 800c0c4:	dc10      	bgt.n	800c0e8 <SVCCTL_UserEvtRx+0x94>
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d002      	beq.n	800c0d0 <SVCCTL_UserEvtRx+0x7c>
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d006      	beq.n	800c0dc <SVCCTL_UserEvtRx+0x88>
 800c0ce:	e00b      	b.n	800c0e8 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f7f7 f819 	bl	8003108 <SVCCTL_App_Notification>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	75bb      	strb	r3, [r7, #22]
      break;
 800c0da:	e008      	b.n	800c0ee <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	75bb      	strb	r3, [r7, #22]
      break;
 800c0e0:	e005      	b.n	800c0ee <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	75bb      	strb	r3, [r7, #22]
      break;
 800c0e6:	e002      	b.n	800c0ee <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	75bb      	strb	r3, [r7, #22]
      break;
 800c0ec:	bf00      	nop
  }

  return (return_status);
 800c0ee:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3718      	adds	r7, #24
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	20000250 	.word	0x20000250

0800c0fc <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c100:	f7f8 f8c2 	bl	8004288 <HW_IPCC_Enable>

  return;
 800c104:	bf00      	nop
}
 800c106:	bd80      	pop	{r7, pc}

0800c108 <TL_Init>:


void TL_Init( void )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c10c:	4b10      	ldr	r3, [pc, #64]	; (800c150 <TL_Init+0x48>)
 800c10e:	4a11      	ldr	r2, [pc, #68]	; (800c154 <TL_Init+0x4c>)
 800c110:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c112:	4b0f      	ldr	r3, [pc, #60]	; (800c150 <TL_Init+0x48>)
 800c114:	4a10      	ldr	r2, [pc, #64]	; (800c158 <TL_Init+0x50>)
 800c116:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c118:	4b0d      	ldr	r3, [pc, #52]	; (800c150 <TL_Init+0x48>)
 800c11a:	4a10      	ldr	r2, [pc, #64]	; (800c15c <TL_Init+0x54>)
 800c11c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c11e:	4b0c      	ldr	r3, [pc, #48]	; (800c150 <TL_Init+0x48>)
 800c120:	4a0f      	ldr	r2, [pc, #60]	; (800c160 <TL_Init+0x58>)
 800c122:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800c124:	4b0a      	ldr	r3, [pc, #40]	; (800c150 <TL_Init+0x48>)
 800c126:	4a0f      	ldr	r2, [pc, #60]	; (800c164 <TL_Init+0x5c>)
 800c128:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c12a:	4b09      	ldr	r3, [pc, #36]	; (800c150 <TL_Init+0x48>)
 800c12c:	4a0e      	ldr	r2, [pc, #56]	; (800c168 <TL_Init+0x60>)
 800c12e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c130:	4b07      	ldr	r3, [pc, #28]	; (800c150 <TL_Init+0x48>)
 800c132:	4a0e      	ldr	r2, [pc, #56]	; (800c16c <TL_Init+0x64>)
 800c134:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c136:	4b06      	ldr	r3, [pc, #24]	; (800c150 <TL_Init+0x48>)
 800c138:	4a0d      	ldr	r2, [pc, #52]	; (800c170 <TL_Init+0x68>)
 800c13a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c13c:	4b04      	ldr	r3, [pc, #16]	; (800c150 <TL_Init+0x48>)
 800c13e:	4a0d      	ldr	r2, [pc, #52]	; (800c174 <TL_Init+0x6c>)
 800c140:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c142:	4b03      	ldr	r3, [pc, #12]	; (800c150 <TL_Init+0x48>)
 800c144:	4a0c      	ldr	r2, [pc, #48]	; (800c178 <TL_Init+0x70>)
 800c146:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c148:	f7f8 f8b2 	bl	80042b0 <HW_IPCC_Init>

  return;
 800c14c:	bf00      	nop
}
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	20030000 	.word	0x20030000
 800c154:	20030134 	.word	0x20030134
 800c158:	20030154 	.word	0x20030154
 800c15c:	20030164 	.word	0x20030164
 800c160:	20030174 	.word	0x20030174
 800c164:	2003017c 	.word	0x2003017c
 800c168:	20030184 	.word	0x20030184
 800c16c:	2003018c 	.word	0x2003018c
 800c170:	200301a8 	.word	0x200301a8
 800c174:	200301ac 	.word	0x200301ac
 800c178:	200301b8 	.word	0x200301b8

0800c17c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800c188:	4811      	ldr	r0, [pc, #68]	; (800c1d0 <TL_BLE_Init+0x54>)
 800c18a:	f7ff f9db 	bl	800b544 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800c18e:	4b11      	ldr	r3, [pc, #68]	; (800c1d4 <TL_BLE_Init+0x58>)
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	689a      	ldr	r2, [r3, #8]
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	68da      	ldr	r2, [r3, #12]
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	4a0c      	ldr	r2, [pc, #48]	; (800c1d8 <TL_BLE_Init+0x5c>)
 800c1a8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	4a08      	ldr	r2, [pc, #32]	; (800c1d0 <TL_BLE_Init+0x54>)
 800c1ae:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800c1b0:	f7f8 f894 	bl	80042dc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a08      	ldr	r2, [pc, #32]	; (800c1dc <TL_BLE_Init+0x60>)
 800c1ba:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	4a07      	ldr	r2, [pc, #28]	; (800c1e0 <TL_BLE_Init+0x64>)
 800c1c2:	6013      	str	r3, [r2, #0]

  return 0;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3710      	adds	r7, #16
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	200301d4 	.word	0x200301d4
 800c1d4:	20030000 	.word	0x20030000
 800c1d8:	20030a58 	.word	0x20030a58
 800c1dc:	200016f4 	.word	0x200016f4
 800c1e0:	200016f8 	.word	0x200016f8

0800c1e4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800c1f0:	4b09      	ldr	r3, [pc, #36]	; (800c218 <TL_BLE_SendCmd+0x34>)
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800c1fa:	4b07      	ldr	r3, [pc, #28]	; (800c218 <TL_BLE_SendCmd+0x34>)
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4619      	mov	r1, r3
 800c202:	2001      	movs	r0, #1
 800c204:	f000 f96c 	bl	800c4e0 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800c208:	f7f8 f872 	bl	80042f0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3708      	adds	r7, #8
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	20030000 	.word	0x20030000

0800c21c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c222:	e01c      	b.n	800c25e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c224:	1d3b      	adds	r3, r7, #4
 800c226:	4619      	mov	r1, r3
 800c228:	4812      	ldr	r0, [pc, #72]	; (800c274 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c22a:	f7ff fa2a 	bl	800b682 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	7a5b      	ldrb	r3, [r3, #9]
 800c232:	2b0f      	cmp	r3, #15
 800c234:	d003      	beq.n	800c23e <HW_IPCC_BLE_RxEvtNot+0x22>
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	7a5b      	ldrb	r3, [r3, #9]
 800c23a:	2b0e      	cmp	r3, #14
 800c23c:	d105      	bne.n	800c24a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	4619      	mov	r1, r3
 800c242:	2002      	movs	r0, #2
 800c244:	f000 f94c 	bl	800c4e0 <OutputDbgTrace>
 800c248:	e004      	b.n	800c254 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4619      	mov	r1, r3
 800c24e:	2003      	movs	r0, #3
 800c250:	f000 f946 	bl	800c4e0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c254:	4b08      	ldr	r3, [pc, #32]	; (800c278 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	4610      	mov	r0, r2
 800c25c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c25e:	4805      	ldr	r0, [pc, #20]	; (800c274 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c260:	f7ff f980 	bl	800b564 <LST_is_empty>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d0dc      	beq.n	800c224 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c26a:	bf00      	nop
}
 800c26c:	3708      	adds	r7, #8
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}
 800c272:	bf00      	nop
 800c274:	200301d4 	.word	0x200301d4
 800c278:	200016f4 	.word	0x200016f4

0800c27c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c280:	4b02      	ldr	r3, [pc, #8]	; (800c28c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4798      	blx	r3

  return;
 800c286:	bf00      	nop
}
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	200016f8 	.word	0x200016f8

0800c290 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c29c:	480d      	ldr	r0, [pc, #52]	; (800c2d4 <TL_SYS_Init+0x44>)
 800c29e:	f7ff f951 	bl	800b544 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c2a2:	4b0d      	ldr	r3, [pc, #52]	; (800c2d8 <TL_SYS_Init+0x48>)
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	689a      	ldr	r2, [r3, #8]
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	4a08      	ldr	r2, [pc, #32]	; (800c2d4 <TL_SYS_Init+0x44>)
 800c2b4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c2b6:	f7f8 f83d 	bl	8004334 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a07      	ldr	r2, [pc, #28]	; (800c2dc <TL_SYS_Init+0x4c>)
 800c2c0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	4a06      	ldr	r2, [pc, #24]	; (800c2e0 <TL_SYS_Init+0x50>)
 800c2c8:	6013      	str	r3, [r2, #0]

  return 0;
 800c2ca:	2300      	movs	r3, #0
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3710      	adds	r7, #16
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	200301dc 	.word	0x200301dc
 800c2d8:	20030000 	.word	0x20030000
 800c2dc:	200016fc 	.word	0x200016fc
 800c2e0:	20001700 	.word	0x20001700

0800c2e4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c2f0:	4b09      	ldr	r3, [pc, #36]	; (800c318 <TL_SYS_SendCmd+0x34>)
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	2210      	movs	r2, #16
 800c2f8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c2fa:	4b07      	ldr	r3, [pc, #28]	; (800c318 <TL_SYS_SendCmd+0x34>)
 800c2fc:	68db      	ldr	r3, [r3, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4619      	mov	r1, r3
 800c302:	2004      	movs	r0, #4
 800c304:	f000 f8ec 	bl	800c4e0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800c308:	f7f8 f81e 	bl	8004348 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c30c:	2300      	movs	r3, #0
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3708      	adds	r7, #8
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	20030000 	.word	0x20030000

0800c31c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c320:	4b07      	ldr	r3, [pc, #28]	; (800c340 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4619      	mov	r1, r3
 800c328:	2005      	movs	r0, #5
 800c32a:	f000 f8d9 	bl	800c4e0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c32e:	4b05      	ldr	r3, [pc, #20]	; (800c344 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4a03      	ldr	r2, [pc, #12]	; (800c340 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c334:	68d2      	ldr	r2, [r2, #12]
 800c336:	6812      	ldr	r2, [r2, #0]
 800c338:	4610      	mov	r0, r2
 800c33a:	4798      	blx	r3

  return;
 800c33c:	bf00      	nop
}
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	20030000 	.word	0x20030000
 800c344:	200016fc 	.word	0x200016fc

0800c348 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c34e:	e00e      	b.n	800c36e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c350:	1d3b      	adds	r3, r7, #4
 800c352:	4619      	mov	r1, r3
 800c354:	480b      	ldr	r0, [pc, #44]	; (800c384 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c356:	f7ff f994 	bl	800b682 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4619      	mov	r1, r3
 800c35e:	2006      	movs	r0, #6
 800c360:	f000 f8be 	bl	800c4e0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c364:	4b08      	ldr	r3, [pc, #32]	; (800c388 <HW_IPCC_SYS_EvtNot+0x40>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	4610      	mov	r0, r2
 800c36c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c36e:	4805      	ldr	r0, [pc, #20]	; (800c384 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c370:	f7ff f8f8 	bl	800b564 <LST_is_empty>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d0ea      	beq.n	800c350 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c37a:	bf00      	nop
}
 800c37c:	3708      	adds	r7, #8
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}
 800c382:	bf00      	nop
 800c384:	200301dc 	.word	0x200301dc
 800c388:	20001700 	.word	0x20001700

0800c38c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b082      	sub	sp, #8
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c394:	4817      	ldr	r0, [pc, #92]	; (800c3f4 <TL_MM_Init+0x68>)
 800c396:	f7ff f8d5 	bl	800b544 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c39a:	4817      	ldr	r0, [pc, #92]	; (800c3f8 <TL_MM_Init+0x6c>)
 800c39c:	f7ff f8d2 	bl	800b544 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c3a0:	4b16      	ldr	r3, [pc, #88]	; (800c3fc <TL_MM_Init+0x70>)
 800c3a2:	691b      	ldr	r3, [r3, #16]
 800c3a4:	4a16      	ldr	r2, [pc, #88]	; (800c400 <TL_MM_Init+0x74>)
 800c3a6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c3a8:	4b15      	ldr	r3, [pc, #84]	; (800c400 <TL_MM_Init+0x74>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	6892      	ldr	r2, [r2, #8]
 800c3b0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c3b2:	4b13      	ldr	r3, [pc, #76]	; (800c400 <TL_MM_Init+0x74>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	68d2      	ldr	r2, [r2, #12]
 800c3ba:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c3bc:	4b10      	ldr	r3, [pc, #64]	; (800c400 <TL_MM_Init+0x74>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a0c      	ldr	r2, [pc, #48]	; (800c3f4 <TL_MM_Init+0x68>)
 800c3c2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c3c4:	4b0e      	ldr	r3, [pc, #56]	; (800c400 <TL_MM_Init+0x74>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	6812      	ldr	r2, [r2, #0]
 800c3cc:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c3ce:	4b0c      	ldr	r3, [pc, #48]	; (800c400 <TL_MM_Init+0x74>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	6852      	ldr	r2, [r2, #4]
 800c3d6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c3d8:	4b09      	ldr	r3, [pc, #36]	; (800c400 <TL_MM_Init+0x74>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	6912      	ldr	r2, [r2, #16]
 800c3e0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c3e2:	4b07      	ldr	r3, [pc, #28]	; (800c400 <TL_MM_Init+0x74>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	6952      	ldr	r2, [r2, #20]
 800c3ea:	619a      	str	r2, [r3, #24]

  return;
 800c3ec:	bf00      	nop
}
 800c3ee:	3708      	adds	r7, #8
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	200301c4 	.word	0x200301c4
 800c3f8:	200016ec 	.word	0x200016ec
 800c3fc:	20030000 	.word	0x20030000
 800c400:	20001704 	.word	0x20001704

0800c404 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c40c:	6879      	ldr	r1, [r7, #4]
 800c40e:	4807      	ldr	r0, [pc, #28]	; (800c42c <TL_MM_EvtDone+0x28>)
 800c410:	f7ff f8f0 	bl	800b5f4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800c414:	6879      	ldr	r1, [r7, #4]
 800c416:	2000      	movs	r0, #0
 800c418:	f000 f862 	bl	800c4e0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c41c:	4804      	ldr	r0, [pc, #16]	; (800c430 <TL_MM_EvtDone+0x2c>)
 800c41e:	f7f7 ffb9 	bl	8004394 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c422:	bf00      	nop
}
 800c424:	3708      	adds	r7, #8
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	200016ec 	.word	0x200016ec
 800c430:	0800c435 	.word	0x0800c435

0800c434 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c43a:	e00c      	b.n	800c456 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c43c:	1d3b      	adds	r3, r7, #4
 800c43e:	4619      	mov	r1, r3
 800c440:	480a      	ldr	r0, [pc, #40]	; (800c46c <SendFreeBuf+0x38>)
 800c442:	f7ff f91e 	bl	800b682 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c446:	4b0a      	ldr	r3, [pc, #40]	; (800c470 <SendFreeBuf+0x3c>)
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	4611      	mov	r1, r2
 800c450:	4618      	mov	r0, r3
 800c452:	f7ff f8cf 	bl	800b5f4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c456:	4805      	ldr	r0, [pc, #20]	; (800c46c <SendFreeBuf+0x38>)
 800c458:	f7ff f884 	bl	800b564 <LST_is_empty>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d0ec      	beq.n	800c43c <SendFreeBuf+0x8>
  }

  return;
 800c462:	bf00      	nop
}
 800c464:	3708      	adds	r7, #8
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	200016ec 	.word	0x200016ec
 800c470:	20030000 	.word	0x20030000

0800c474 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c474:	b580      	push	{r7, lr}
 800c476:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c478:	4805      	ldr	r0, [pc, #20]	; (800c490 <TL_TRACES_Init+0x1c>)
 800c47a:	f7ff f863 	bl	800b544 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c47e:	4b05      	ldr	r3, [pc, #20]	; (800c494 <TL_TRACES_Init+0x20>)
 800c480:	695b      	ldr	r3, [r3, #20]
 800c482:	4a03      	ldr	r2, [pc, #12]	; (800c490 <TL_TRACES_Init+0x1c>)
 800c484:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c486:	f7f7 ffbb 	bl	8004400 <HW_IPCC_TRACES_Init>

  return;
 800c48a:	bf00      	nop
}
 800c48c:	bd80      	pop	{r7, pc}
 800c48e:	bf00      	nop
 800c490:	200301cc 	.word	0x200301cc
 800c494:	20030000 	.word	0x20030000

0800c498 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c49e:	e008      	b.n	800c4b2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c4a0:	1d3b      	adds	r3, r7, #4
 800c4a2:	4619      	mov	r1, r3
 800c4a4:	4808      	ldr	r0, [pc, #32]	; (800c4c8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c4a6:	f7ff f8ec 	bl	800b682 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f000 f80d 	bl	800c4cc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c4b2:	4805      	ldr	r0, [pc, #20]	; (800c4c8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c4b4:	f7ff f856 	bl	800b564 <LST_is_empty>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d0f0      	beq.n	800c4a0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c4be:	bf00      	nop
}
 800c4c0:	3708      	adds	r7, #8
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	200301cc 	.word	0x200301cc

0800c4cc <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800c4d4:	bf00      	nop
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	6039      	str	r1, [r7, #0]
 800c4ea:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800c4ec:	79fb      	ldrb	r3, [r7, #7]
 800c4ee:	2b06      	cmp	r3, #6
 800c4f0:	d845      	bhi.n	800c57e <OutputDbgTrace+0x9e>
 800c4f2:	a201      	add	r2, pc, #4	; (adr r2, 800c4f8 <OutputDbgTrace+0x18>)
 800c4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4f8:	0800c515 	.word	0x0800c515
 800c4fc:	0800c539 	.word	0x0800c539
 800c500:	0800c53f 	.word	0x0800c53f
 800c504:	0800c553 	.word	0x0800c553
 800c508:	0800c55f 	.word	0x0800c55f
 800c50c:	0800c565 	.word	0x0800c565
 800c510:	0800c573 	.word	0x0800c573
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	7a5b      	ldrb	r3, [r3, #9]
 800c51c:	2bff      	cmp	r3, #255	; 0xff
 800c51e:	d005      	beq.n	800c52c <OutputDbgTrace+0x4c>
 800c520:	2bff      	cmp	r3, #255	; 0xff
 800c522:	dc05      	bgt.n	800c530 <OutputDbgTrace+0x50>
 800c524:	2b0e      	cmp	r3, #14
 800c526:	d005      	beq.n	800c534 <OutputDbgTrace+0x54>
 800c528:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800c52a:	e001      	b.n	800c530 <OutputDbgTrace+0x50>
          break;
 800c52c:	bf00      	nop
 800c52e:	e027      	b.n	800c580 <OutputDbgTrace+0xa0>
          break;
 800c530:	bf00      	nop
 800c532:	e025      	b.n	800c580 <OutputDbgTrace+0xa0>
          break;
 800c534:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800c536:	e023      	b.n	800c580 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c53c:	e020      	b.n	800c580 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	7a5b      	ldrb	r3, [r3, #9]
 800c546:	2b0e      	cmp	r3, #14
 800c548:	d001      	beq.n	800c54e <OutputDbgTrace+0x6e>
 800c54a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c54c:	e000      	b.n	800c550 <OutputDbgTrace+0x70>
          break;
 800c54e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c550:	e016      	b.n	800c580 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	7a5b      	ldrb	r3, [r3, #9]
 800c55a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c55c:	e010      	b.n	800c580 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c562:	e00d      	b.n	800c580 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	7a5b      	ldrb	r3, [r3, #9]
 800c56c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c56e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c570:	e006      	b.n	800c580 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	7a5b      	ldrb	r3, [r3, #9]
 800c57a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c57c:	e000      	b.n	800c580 <OutputDbgTrace+0xa0>

    default:
      break;
 800c57e:	bf00      	nop
  }

  return;
 800c580:	bf00      	nop
}
 800c582:	3714      	adds	r7, #20
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr

0800c58c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800c58c:	b480      	push	{r7}
 800c58e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800c590:	4b05      	ldr	r3, [pc, #20]	; (800c5a8 <UTIL_LPM_Init+0x1c>)
 800c592:	2200      	movs	r2, #0
 800c594:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800c596:	4b05      	ldr	r3, [pc, #20]	; (800c5ac <UTIL_LPM_Init+0x20>)
 800c598:	2200      	movs	r2, #0
 800c59a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800c59c:	bf00      	nop
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr
 800c5a6:	bf00      	nop
 800c5a8:	20001708 	.word	0x20001708
 800c5ac:	2000170c 	.word	0x2000170c

0800c5b0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b087      	sub	sp, #28
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5bc:	f3ef 8310 	mrs	r3, PRIMASK
 800c5c0:	613b      	str	r3, [r7, #16]
  return(result);
 800c5c2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800c5c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c5c6:	b672      	cpsid	i
}
 800c5c8:	bf00      	nop
  
  switch(state)
 800c5ca:	78fb      	ldrb	r3, [r7, #3]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d008      	beq.n	800c5e2 <UTIL_LPM_SetOffMode+0x32>
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d10e      	bne.n	800c5f2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800c5d4:	4b0d      	ldr	r3, [pc, #52]	; (800c60c <UTIL_LPM_SetOffMode+0x5c>)
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	4313      	orrs	r3, r2
 800c5dc:	4a0b      	ldr	r2, [pc, #44]	; (800c60c <UTIL_LPM_SetOffMode+0x5c>)
 800c5de:	6013      	str	r3, [r2, #0]
      break;
 800c5e0:	e008      	b.n	800c5f4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	43da      	mvns	r2, r3
 800c5e6:	4b09      	ldr	r3, [pc, #36]	; (800c60c <UTIL_LPM_SetOffMode+0x5c>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4013      	ands	r3, r2
 800c5ec:	4a07      	ldr	r2, [pc, #28]	; (800c60c <UTIL_LPM_SetOffMode+0x5c>)
 800c5ee:	6013      	str	r3, [r2, #0]
      break;
 800c5f0:	e000      	b.n	800c5f4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800c5f2:	bf00      	nop
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f383 8810 	msr	PRIMASK, r3
}
 800c5fe:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800c600:	bf00      	nop
 800c602:	371c      	adds	r7, #28
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr
 800c60c:	2000170c 	.word	0x2000170c

0800c610 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b090      	sub	sp, #64	; 0x40
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800c618:	4b73      	ldr	r3, [pc, #460]	; (800c7e8 <UTIL_SEQ_Run+0x1d8>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800c61e:	4b72      	ldr	r3, [pc, #456]	; (800c7e8 <UTIL_SEQ_Run+0x1d8>)
 800c620:	681a      	ldr	r2, [r3, #0]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	4013      	ands	r3, r2
 800c626:	4a70      	ldr	r2, [pc, #448]	; (800c7e8 <UTIL_SEQ_Run+0x1d8>)
 800c628:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800c62a:	4b70      	ldr	r3, [pc, #448]	; (800c7ec <UTIL_SEQ_Run+0x1dc>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c630:	4b6f      	ldr	r3, [pc, #444]	; (800c7f0 <UTIL_SEQ_Run+0x1e0>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c636:	4b6f      	ldr	r3, [pc, #444]	; (800c7f4 <UTIL_SEQ_Run+0x1e4>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800c63c:	4b6e      	ldr	r3, [pc, #440]	; (800c7f8 <UTIL_SEQ_Run+0x1e8>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c642:	e08d      	b.n	800c760 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800c644:	2300      	movs	r3, #0
 800c646:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c648:	e002      	b.n	800c650 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800c64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c64c:	3301      	adds	r3, #1
 800c64e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800c650:	4a6a      	ldr	r2, [pc, #424]	; (800c7fc <UTIL_SEQ_Run+0x1ec>)
 800c652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c654:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65a:	401a      	ands	r2, r3
 800c65c:	4b62      	ldr	r3, [pc, #392]	; (800c7e8 <UTIL_SEQ_Run+0x1d8>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4013      	ands	r3, r2
 800c662:	2b00      	cmp	r3, #0
 800c664:	d0f1      	beq.n	800c64a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800c666:	4a65      	ldr	r2, [pc, #404]	; (800c7fc <UTIL_SEQ_Run+0x1ec>)
 800c668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c66a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c670:	401a      	ands	r2, r3
 800c672:	4b5d      	ldr	r3, [pc, #372]	; (800c7e8 <UTIL_SEQ_Run+0x1d8>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	4013      	ands	r3, r2
 800c678:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800c67a:	4a60      	ldr	r2, [pc, #384]	; (800c7fc <UTIL_SEQ_Run+0x1ec>)
 800c67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c67e:	00db      	lsls	r3, r3, #3
 800c680:	4413      	add	r3, r2
 800c682:	685a      	ldr	r2, [r3, #4]
 800c684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c686:	4013      	ands	r3, r2
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d106      	bne.n	800c69a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800c68c:	4a5b      	ldr	r2, [pc, #364]	; (800c7fc <UTIL_SEQ_Run+0x1ec>)
 800c68e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c690:	00db      	lsls	r3, r3, #3
 800c692:	4413      	add	r3, r2
 800c694:	f04f 32ff 	mov.w	r2, #4294967295
 800c698:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800c69a:	4a58      	ldr	r2, [pc, #352]	; (800c7fc <UTIL_SEQ_Run+0x1ec>)
 800c69c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c69e:	00db      	lsls	r3, r3, #3
 800c6a0:	4413      	add	r3, r2
 800c6a2:	685a      	ldr	r2, [r3, #4]
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a6:	4013      	ands	r3, r2
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f000 f9b3 	bl	800ca14 <SEQ_BitPosition>
 800c6ae:	4603      	mov	r3, r0
 800c6b0:	461a      	mov	r2, r3
 800c6b2:	4b53      	ldr	r3, [pc, #332]	; (800c800 <UTIL_SEQ_Run+0x1f0>)
 800c6b4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800c6b6:	4a51      	ldr	r2, [pc, #324]	; (800c7fc <UTIL_SEQ_Run+0x1ec>)
 800c6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ba:	00db      	lsls	r3, r3, #3
 800c6bc:	4413      	add	r3, r2
 800c6be:	685a      	ldr	r2, [r3, #4]
 800c6c0:	4b4f      	ldr	r3, [pc, #316]	; (800c800 <UTIL_SEQ_Run+0x1f0>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	2101      	movs	r1, #1
 800c6c6:	fa01 f303 	lsl.w	r3, r1, r3
 800c6ca:	43db      	mvns	r3, r3
 800c6cc:	401a      	ands	r2, r3
 800c6ce:	494b      	ldr	r1, [pc, #300]	; (800c7fc <UTIL_SEQ_Run+0x1ec>)
 800c6d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6d2:	00db      	lsls	r3, r3, #3
 800c6d4:	440b      	add	r3, r1
 800c6d6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6d8:	f3ef 8310 	mrs	r3, PRIMASK
 800c6dc:	61bb      	str	r3, [r7, #24]
  return(result);
 800c6de:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c6e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800c6e2:	b672      	cpsid	i
}
 800c6e4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800c6e6:	4b46      	ldr	r3, [pc, #280]	; (800c800 <UTIL_SEQ_Run+0x1f0>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2201      	movs	r2, #1
 800c6ec:	fa02 f303 	lsl.w	r3, r2, r3
 800c6f0:	43da      	mvns	r2, r3
 800c6f2:	4b3e      	ldr	r3, [pc, #248]	; (800c7ec <UTIL_SEQ_Run+0x1dc>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4013      	ands	r3, r2
 800c6f8:	4a3c      	ldr	r2, [pc, #240]	; (800c7ec <UTIL_SEQ_Run+0x1dc>)
 800c6fa:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c6fc:	2302      	movs	r3, #2
 800c6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c700:	e013      	b.n	800c72a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800c702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c704:	3b01      	subs	r3, #1
 800c706:	4a3d      	ldr	r2, [pc, #244]	; (800c7fc <UTIL_SEQ_Run+0x1ec>)
 800c708:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c70c:	4b3c      	ldr	r3, [pc, #240]	; (800c800 <UTIL_SEQ_Run+0x1f0>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2201      	movs	r2, #1
 800c712:	fa02 f303 	lsl.w	r3, r2, r3
 800c716:	43da      	mvns	r2, r3
 800c718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c71a:	3b01      	subs	r3, #1
 800c71c:	400a      	ands	r2, r1
 800c71e:	4937      	ldr	r1, [pc, #220]	; (800c7fc <UTIL_SEQ_Run+0x1ec>)
 800c720:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800c724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c726:	3b01      	subs	r3, #1
 800c728:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c72a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d1e8      	bne.n	800c702 <UTIL_SEQ_Run+0xf2>
 800c730:	6a3b      	ldr	r3, [r7, #32]
 800c732:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	f383 8810 	msr	PRIMASK, r3
}
 800c73a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800c73c:	4b30      	ldr	r3, [pc, #192]	; (800c800 <UTIL_SEQ_Run+0x1f0>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a30      	ldr	r2, [pc, #192]	; (800c804 <UTIL_SEQ_Run+0x1f4>)
 800c742:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c746:	4798      	blx	r3

    local_taskset = TaskSet;
 800c748:	4b28      	ldr	r3, [pc, #160]	; (800c7ec <UTIL_SEQ_Run+0x1dc>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800c74e:	4b28      	ldr	r3, [pc, #160]	; (800c7f0 <UTIL_SEQ_Run+0x1e0>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800c754:	4b27      	ldr	r3, [pc, #156]	; (800c7f4 <UTIL_SEQ_Run+0x1e4>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800c75a:	4b27      	ldr	r3, [pc, #156]	; (800c7f8 <UTIL_SEQ_Run+0x1e8>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800c760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c764:	401a      	ands	r2, r3
 800c766:	4b20      	ldr	r3, [pc, #128]	; (800c7e8 <UTIL_SEQ_Run+0x1d8>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4013      	ands	r3, r2
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d005      	beq.n	800c77c <UTIL_SEQ_Run+0x16c>
 800c770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c774:	4013      	ands	r3, r2
 800c776:	2b00      	cmp	r3, #0
 800c778:	f43f af64 	beq.w	800c644 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800c77c:	4b20      	ldr	r3, [pc, #128]	; (800c800 <UTIL_SEQ_Run+0x1f0>)
 800c77e:	f04f 32ff 	mov.w	r2, #4294967295
 800c782:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800c784:	f000 f938 	bl	800c9f8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c788:	f3ef 8310 	mrs	r3, PRIMASK
 800c78c:	613b      	str	r3, [r7, #16]
  return(result);
 800c78e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800c790:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c792:	b672      	cpsid	i
}
 800c794:	bf00      	nop
  local_taskset = TaskSet;
 800c796:	4b15      	ldr	r3, [pc, #84]	; (800c7ec <UTIL_SEQ_Run+0x1dc>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800c79c:	4b14      	ldr	r3, [pc, #80]	; (800c7f0 <UTIL_SEQ_Run+0x1e0>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800c7a2:	4b14      	ldr	r3, [pc, #80]	; (800c7f4 <UTIL_SEQ_Run+0x1e4>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800c7a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ac:	401a      	ands	r2, r3
 800c7ae:	4b0e      	ldr	r3, [pc, #56]	; (800c7e8 <UTIL_SEQ_Run+0x1d8>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4013      	ands	r3, r2
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d107      	bne.n	800c7c8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800c7b8:	4b0f      	ldr	r3, [pc, #60]	; (800c7f8 <UTIL_SEQ_Run+0x1e8>)
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7be:	4013      	ands	r3, r2
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d101      	bne.n	800c7c8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800c7c4:	f7f4 ff36 	bl	8001634 <UTIL_SEQ_Idle>
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f383 8810 	msr	PRIMASK, r3
}
 800c7d2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800c7d4:	f000 f917 	bl	800ca06 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800c7d8:	4a03      	ldr	r2, [pc, #12]	; (800c7e8 <UTIL_SEQ_Run+0x1d8>)
 800c7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7dc:	6013      	str	r3, [r2, #0]

  return;
 800c7de:	bf00      	nop
}
 800c7e0:	3740      	adds	r7, #64	; 0x40
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	20000060 	.word	0x20000060
 800c7ec:	20001710 	.word	0x20001710
 800c7f0:	20001714 	.word	0x20001714
 800c7f4:	2000005c 	.word	0x2000005c
 800c7f8:	20001718 	.word	0x20001718
 800c7fc:	200017a0 	.word	0x200017a0
 800c800:	2000171c 	.word	0x2000171c
 800c804:	20001720 	.word	0x20001720

0800c808 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b088      	sub	sp, #32
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c814:	f3ef 8310 	mrs	r3, PRIMASK
 800c818:	617b      	str	r3, [r7, #20]
  return(result);
 800c81a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800c81c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800c81e:	b672      	cpsid	i
}
 800c820:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800c822:	68f8      	ldr	r0, [r7, #12]
 800c824:	f000 f8f6 	bl	800ca14 <SEQ_BitPosition>
 800c828:	4603      	mov	r3, r0
 800c82a:	4619      	mov	r1, r3
 800c82c:	4a06      	ldr	r2, [pc, #24]	; (800c848 <UTIL_SEQ_RegTask+0x40>)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c838:	69bb      	ldr	r3, [r7, #24]
 800c83a:	f383 8810 	msr	PRIMASK, r3
}
 800c83e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800c840:	bf00      	nop
}
 800c842:	3720      	adds	r7, #32
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}
 800c848:	20001720 	.word	0x20001720

0800c84c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800c84c:	b480      	push	{r7}
 800c84e:	b087      	sub	sp, #28
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c856:	f3ef 8310 	mrs	r3, PRIMASK
 800c85a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c85c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c85e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c860:	b672      	cpsid	i
}
 800c862:	bf00      	nop

  TaskSet |= TaskId_bm;
 800c864:	4b0d      	ldr	r3, [pc, #52]	; (800c89c <UTIL_SEQ_SetTask+0x50>)
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	4313      	orrs	r3, r2
 800c86c:	4a0b      	ldr	r2, [pc, #44]	; (800c89c <UTIL_SEQ_SetTask+0x50>)
 800c86e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800c870:	4a0b      	ldr	r2, [pc, #44]	; (800c8a0 <UTIL_SEQ_SetTask+0x54>)
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	431a      	orrs	r2, r3
 800c87c:	4908      	ldr	r1, [pc, #32]	; (800c8a0 <UTIL_SEQ_SetTask+0x54>)
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	f383 8810 	msr	PRIMASK, r3
}
 800c88e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c890:	bf00      	nop
}
 800c892:	371c      	adds	r7, #28
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr
 800c89c:	20001710 	.word	0x20001710
 800c8a0:	200017a0 	.word	0x200017a0

0800c8a4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b087      	sub	sp, #28
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8ac:	f3ef 8310 	mrs	r3, PRIMASK
 800c8b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c8b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c8b6:	b672      	cpsid	i
}
 800c8b8:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	43da      	mvns	r2, r3
 800c8be:	4b08      	ldr	r3, [pc, #32]	; (800c8e0 <UTIL_SEQ_PauseTask+0x3c>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4013      	ands	r3, r2
 800c8c4:	4a06      	ldr	r2, [pc, #24]	; (800c8e0 <UTIL_SEQ_PauseTask+0x3c>)
 800c8c6:	6013      	str	r3, [r2, #0]
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	f383 8810 	msr	PRIMASK, r3
}
 800c8d2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c8d4:	bf00      	nop
}
 800c8d6:	371c      	adds	r7, #28
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr
 800c8e0:	2000005c 	.word	0x2000005c

0800c8e4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b087      	sub	sp, #28
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8ec:	f3ef 8310 	mrs	r3, PRIMASK
 800c8f0:	60fb      	str	r3, [r7, #12]
  return(result);
 800c8f2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c8f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c8f6:	b672      	cpsid	i
}
 800c8f8:	bf00      	nop

  TaskMask |= TaskId_bm;
 800c8fa:	4b09      	ldr	r3, [pc, #36]	; (800c920 <UTIL_SEQ_ResumeTask+0x3c>)
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	4313      	orrs	r3, r2
 800c902:	4a07      	ldr	r2, [pc, #28]	; (800c920 <UTIL_SEQ_ResumeTask+0x3c>)
 800c904:	6013      	str	r3, [r2, #0]
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	f383 8810 	msr	PRIMASK, r3
}
 800c910:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c912:	bf00      	nop
}
 800c914:	371c      	adds	r7, #28
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	2000005c 	.word	0x2000005c

0800c924 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800c924:	b480      	push	{r7}
 800c926:	b087      	sub	sp, #28
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c92c:	f3ef 8310 	mrs	r3, PRIMASK
 800c930:	60fb      	str	r3, [r7, #12]
  return(result);
 800c932:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c934:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c936:	b672      	cpsid	i
}
 800c938:	bf00      	nop

  EvtSet |= EvtId_bm;
 800c93a:	4b09      	ldr	r3, [pc, #36]	; (800c960 <UTIL_SEQ_SetEvt+0x3c>)
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	4313      	orrs	r3, r2
 800c942:	4a07      	ldr	r2, [pc, #28]	; (800c960 <UTIL_SEQ_SetEvt+0x3c>)
 800c944:	6013      	str	r3, [r2, #0]
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	f383 8810 	msr	PRIMASK, r3
}
 800c950:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800c952:	bf00      	nop
}
 800c954:	371c      	adds	r7, #28
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	20001714 	.word	0x20001714

0800c964 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b088      	sub	sp, #32
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800c96c:	4b1f      	ldr	r3, [pc, #124]	; (800c9ec <UTIL_SEQ_WaitEvt+0x88>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800c972:	4b1e      	ldr	r3, [pc, #120]	; (800c9ec <UTIL_SEQ_WaitEvt+0x88>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c97a:	d102      	bne.n	800c982 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800c97c:	2300      	movs	r3, #0
 800c97e:	61fb      	str	r3, [r7, #28]
 800c980:	e005      	b.n	800c98e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800c982:	4b1a      	ldr	r3, [pc, #104]	; (800c9ec <UTIL_SEQ_WaitEvt+0x88>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2201      	movs	r2, #1
 800c988:	fa02 f303 	lsl.w	r3, r2, r3
 800c98c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800c98e:	4b18      	ldr	r3, [pc, #96]	; (800c9f0 <UTIL_SEQ_WaitEvt+0x8c>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800c994:	4a16      	ldr	r2, [pc, #88]	; (800c9f0 <UTIL_SEQ_WaitEvt+0x8c>)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800c99a:	e003      	b.n	800c9a4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800c99c:	6879      	ldr	r1, [r7, #4]
 800c99e:	69f8      	ldr	r0, [r7, #28]
 800c9a0:	f7f4 fe4f 	bl	8001642 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800c9a4:	4b13      	ldr	r3, [pc, #76]	; (800c9f4 <UTIL_SEQ_WaitEvt+0x90>)
 800c9a6:	681a      	ldr	r2, [r3, #0]
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	4013      	ands	r3, r2
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d0f5      	beq.n	800c99c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800c9b0:	4a0e      	ldr	r2, [pc, #56]	; (800c9ec <UTIL_SEQ_WaitEvt+0x88>)
 800c9b2:	69bb      	ldr	r3, [r7, #24]
 800c9b4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9b6:	f3ef 8310 	mrs	r3, PRIMASK
 800c9ba:	60bb      	str	r3, [r7, #8]
  return(result);
 800c9bc:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800c9be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c9c0:	b672      	cpsid	i
}
 800c9c2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	43da      	mvns	r2, r3
 800c9c8:	4b0a      	ldr	r3, [pc, #40]	; (800c9f4 <UTIL_SEQ_WaitEvt+0x90>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4013      	ands	r3, r2
 800c9ce:	4a09      	ldr	r2, [pc, #36]	; (800c9f4 <UTIL_SEQ_WaitEvt+0x90>)
 800c9d0:	6013      	str	r3, [r2, #0]
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f383 8810 	msr	PRIMASK, r3
}
 800c9dc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800c9de:	4a04      	ldr	r2, [pc, #16]	; (800c9f0 <UTIL_SEQ_WaitEvt+0x8c>)
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	6013      	str	r3, [r2, #0]
  return;
 800c9e4:	bf00      	nop
}
 800c9e6:	3720      	adds	r7, #32
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	2000171c 	.word	0x2000171c
 800c9f0:	20001718 	.word	0x20001718
 800c9f4:	20001714 	.word	0x20001714

0800c9f8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800c9fc:	bf00      	nop
}
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr

0800ca06 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800ca06:	b480      	push	{r7}
 800ca08:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ca0a:	bf00      	nop
}
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	0c1b      	lsrs	r3, r3, #16
 800ca28:	041b      	lsls	r3, r3, #16
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d104      	bne.n	800ca38 <SEQ_BitPosition+0x24>
 800ca2e:	2310      	movs	r3, #16
 800ca30:	73fb      	strb	r3, [r7, #15]
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	041b      	lsls	r3, r3, #16
 800ca36:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d105      	bne.n	800ca4e <SEQ_BitPosition+0x3a>
 800ca42:	7bfb      	ldrb	r3, [r7, #15]
 800ca44:	3308      	adds	r3, #8
 800ca46:	73fb      	strb	r3, [r7, #15]
 800ca48:	68bb      	ldr	r3, [r7, #8]
 800ca4a:	021b      	lsls	r3, r3, #8
 800ca4c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d105      	bne.n	800ca64 <SEQ_BitPosition+0x50>
 800ca58:	7bfb      	ldrb	r3, [r7, #15]
 800ca5a:	3304      	adds	r3, #4
 800ca5c:	73fb      	strb	r3, [r7, #15]
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	011b      	lsls	r3, r3, #4
 800ca62:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	0f1b      	lsrs	r3, r3, #28
 800ca68:	4a07      	ldr	r2, [pc, #28]	; (800ca88 <SEQ_BitPosition+0x74>)
 800ca6a:	5cd2      	ldrb	r2, [r2, r3]
 800ca6c:	7bfb      	ldrb	r3, [r7, #15]
 800ca6e:	4413      	add	r3, r2
 800ca70:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800ca72:	7bfb      	ldrb	r3, [r7, #15]
 800ca74:	f1c3 031f 	rsb	r3, r3, #31
 800ca78:	b2db      	uxtb	r3, r3
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3714      	adds	r7, #20
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr
 800ca86:	bf00      	nop
 800ca88:	08010e14 	.word	0x08010e14

0800ca8c <__errno>:
 800ca8c:	4b01      	ldr	r3, [pc, #4]	; (800ca94 <__errno+0x8>)
 800ca8e:	6818      	ldr	r0, [r3, #0]
 800ca90:	4770      	bx	lr
 800ca92:	bf00      	nop
 800ca94:	20000064 	.word	0x20000064

0800ca98 <__libc_init_array>:
 800ca98:	b570      	push	{r4, r5, r6, lr}
 800ca9a:	4d0d      	ldr	r5, [pc, #52]	; (800cad0 <__libc_init_array+0x38>)
 800ca9c:	4c0d      	ldr	r4, [pc, #52]	; (800cad4 <__libc_init_array+0x3c>)
 800ca9e:	1b64      	subs	r4, r4, r5
 800caa0:	10a4      	asrs	r4, r4, #2
 800caa2:	2600      	movs	r6, #0
 800caa4:	42a6      	cmp	r6, r4
 800caa6:	d109      	bne.n	800cabc <__libc_init_array+0x24>
 800caa8:	4d0b      	ldr	r5, [pc, #44]	; (800cad8 <__libc_init_array+0x40>)
 800caaa:	4c0c      	ldr	r4, [pc, #48]	; (800cadc <__libc_init_array+0x44>)
 800caac:	f002 fe20 	bl	800f6f0 <_init>
 800cab0:	1b64      	subs	r4, r4, r5
 800cab2:	10a4      	asrs	r4, r4, #2
 800cab4:	2600      	movs	r6, #0
 800cab6:	42a6      	cmp	r6, r4
 800cab8:	d105      	bne.n	800cac6 <__libc_init_array+0x2e>
 800caba:	bd70      	pop	{r4, r5, r6, pc}
 800cabc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cac0:	4798      	blx	r3
 800cac2:	3601      	adds	r6, #1
 800cac4:	e7ee      	b.n	800caa4 <__libc_init_array+0xc>
 800cac6:	f855 3b04 	ldr.w	r3, [r5], #4
 800caca:	4798      	blx	r3
 800cacc:	3601      	adds	r6, #1
 800cace:	e7f2      	b.n	800cab6 <__libc_init_array+0x1e>
 800cad0:	08011204 	.word	0x08011204
 800cad4:	08011204 	.word	0x08011204
 800cad8:	08011204 	.word	0x08011204
 800cadc:	08011208 	.word	0x08011208

0800cae0 <memcpy>:
 800cae0:	440a      	add	r2, r1
 800cae2:	4291      	cmp	r1, r2
 800cae4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cae8:	d100      	bne.n	800caec <memcpy+0xc>
 800caea:	4770      	bx	lr
 800caec:	b510      	push	{r4, lr}
 800caee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800caf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800caf6:	4291      	cmp	r1, r2
 800caf8:	d1f9      	bne.n	800caee <memcpy+0xe>
 800cafa:	bd10      	pop	{r4, pc}

0800cafc <memset>:
 800cafc:	4402      	add	r2, r0
 800cafe:	4603      	mov	r3, r0
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d100      	bne.n	800cb06 <memset+0xa>
 800cb04:	4770      	bx	lr
 800cb06:	f803 1b01 	strb.w	r1, [r3], #1
 800cb0a:	e7f9      	b.n	800cb00 <memset+0x4>

0800cb0c <__cvt>:
 800cb0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb10:	ec55 4b10 	vmov	r4, r5, d0
 800cb14:	2d00      	cmp	r5, #0
 800cb16:	460e      	mov	r6, r1
 800cb18:	4619      	mov	r1, r3
 800cb1a:	462b      	mov	r3, r5
 800cb1c:	bfbb      	ittet	lt
 800cb1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800cb22:	461d      	movlt	r5, r3
 800cb24:	2300      	movge	r3, #0
 800cb26:	232d      	movlt	r3, #45	; 0x2d
 800cb28:	700b      	strb	r3, [r1, #0]
 800cb2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800cb30:	4691      	mov	r9, r2
 800cb32:	f023 0820 	bic.w	r8, r3, #32
 800cb36:	bfbc      	itt	lt
 800cb38:	4622      	movlt	r2, r4
 800cb3a:	4614      	movlt	r4, r2
 800cb3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb40:	d005      	beq.n	800cb4e <__cvt+0x42>
 800cb42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800cb46:	d100      	bne.n	800cb4a <__cvt+0x3e>
 800cb48:	3601      	adds	r6, #1
 800cb4a:	2102      	movs	r1, #2
 800cb4c:	e000      	b.n	800cb50 <__cvt+0x44>
 800cb4e:	2103      	movs	r1, #3
 800cb50:	ab03      	add	r3, sp, #12
 800cb52:	9301      	str	r3, [sp, #4]
 800cb54:	ab02      	add	r3, sp, #8
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	ec45 4b10 	vmov	d0, r4, r5
 800cb5c:	4653      	mov	r3, sl
 800cb5e:	4632      	mov	r2, r6
 800cb60:	f000 fe2e 	bl	800d7c0 <_dtoa_r>
 800cb64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800cb68:	4607      	mov	r7, r0
 800cb6a:	d102      	bne.n	800cb72 <__cvt+0x66>
 800cb6c:	f019 0f01 	tst.w	r9, #1
 800cb70:	d022      	beq.n	800cbb8 <__cvt+0xac>
 800cb72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cb76:	eb07 0906 	add.w	r9, r7, r6
 800cb7a:	d110      	bne.n	800cb9e <__cvt+0x92>
 800cb7c:	783b      	ldrb	r3, [r7, #0]
 800cb7e:	2b30      	cmp	r3, #48	; 0x30
 800cb80:	d10a      	bne.n	800cb98 <__cvt+0x8c>
 800cb82:	2200      	movs	r2, #0
 800cb84:	2300      	movs	r3, #0
 800cb86:	4620      	mov	r0, r4
 800cb88:	4629      	mov	r1, r5
 800cb8a:	f7f3 ff85 	bl	8000a98 <__aeabi_dcmpeq>
 800cb8e:	b918      	cbnz	r0, 800cb98 <__cvt+0x8c>
 800cb90:	f1c6 0601 	rsb	r6, r6, #1
 800cb94:	f8ca 6000 	str.w	r6, [sl]
 800cb98:	f8da 3000 	ldr.w	r3, [sl]
 800cb9c:	4499      	add	r9, r3
 800cb9e:	2200      	movs	r2, #0
 800cba0:	2300      	movs	r3, #0
 800cba2:	4620      	mov	r0, r4
 800cba4:	4629      	mov	r1, r5
 800cba6:	f7f3 ff77 	bl	8000a98 <__aeabi_dcmpeq>
 800cbaa:	b108      	cbz	r0, 800cbb0 <__cvt+0xa4>
 800cbac:	f8cd 900c 	str.w	r9, [sp, #12]
 800cbb0:	2230      	movs	r2, #48	; 0x30
 800cbb2:	9b03      	ldr	r3, [sp, #12]
 800cbb4:	454b      	cmp	r3, r9
 800cbb6:	d307      	bcc.n	800cbc8 <__cvt+0xbc>
 800cbb8:	9b03      	ldr	r3, [sp, #12]
 800cbba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbbc:	1bdb      	subs	r3, r3, r7
 800cbbe:	4638      	mov	r0, r7
 800cbc0:	6013      	str	r3, [r2, #0]
 800cbc2:	b004      	add	sp, #16
 800cbc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbc8:	1c59      	adds	r1, r3, #1
 800cbca:	9103      	str	r1, [sp, #12]
 800cbcc:	701a      	strb	r2, [r3, #0]
 800cbce:	e7f0      	b.n	800cbb2 <__cvt+0xa6>

0800cbd0 <__exponent>:
 800cbd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	2900      	cmp	r1, #0
 800cbd6:	bfb8      	it	lt
 800cbd8:	4249      	neglt	r1, r1
 800cbda:	f803 2b02 	strb.w	r2, [r3], #2
 800cbde:	bfb4      	ite	lt
 800cbe0:	222d      	movlt	r2, #45	; 0x2d
 800cbe2:	222b      	movge	r2, #43	; 0x2b
 800cbe4:	2909      	cmp	r1, #9
 800cbe6:	7042      	strb	r2, [r0, #1]
 800cbe8:	dd2a      	ble.n	800cc40 <__exponent+0x70>
 800cbea:	f10d 0407 	add.w	r4, sp, #7
 800cbee:	46a4      	mov	ip, r4
 800cbf0:	270a      	movs	r7, #10
 800cbf2:	46a6      	mov	lr, r4
 800cbf4:	460a      	mov	r2, r1
 800cbf6:	fb91 f6f7 	sdiv	r6, r1, r7
 800cbfa:	fb07 1516 	mls	r5, r7, r6, r1
 800cbfe:	3530      	adds	r5, #48	; 0x30
 800cc00:	2a63      	cmp	r2, #99	; 0x63
 800cc02:	f104 34ff 	add.w	r4, r4, #4294967295
 800cc06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cc0a:	4631      	mov	r1, r6
 800cc0c:	dcf1      	bgt.n	800cbf2 <__exponent+0x22>
 800cc0e:	3130      	adds	r1, #48	; 0x30
 800cc10:	f1ae 0502 	sub.w	r5, lr, #2
 800cc14:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cc18:	1c44      	adds	r4, r0, #1
 800cc1a:	4629      	mov	r1, r5
 800cc1c:	4561      	cmp	r1, ip
 800cc1e:	d30a      	bcc.n	800cc36 <__exponent+0x66>
 800cc20:	f10d 0209 	add.w	r2, sp, #9
 800cc24:	eba2 020e 	sub.w	r2, r2, lr
 800cc28:	4565      	cmp	r5, ip
 800cc2a:	bf88      	it	hi
 800cc2c:	2200      	movhi	r2, #0
 800cc2e:	4413      	add	r3, r2
 800cc30:	1a18      	subs	r0, r3, r0
 800cc32:	b003      	add	sp, #12
 800cc34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cc3e:	e7ed      	b.n	800cc1c <__exponent+0x4c>
 800cc40:	2330      	movs	r3, #48	; 0x30
 800cc42:	3130      	adds	r1, #48	; 0x30
 800cc44:	7083      	strb	r3, [r0, #2]
 800cc46:	70c1      	strb	r1, [r0, #3]
 800cc48:	1d03      	adds	r3, r0, #4
 800cc4a:	e7f1      	b.n	800cc30 <__exponent+0x60>

0800cc4c <_printf_float>:
 800cc4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc50:	ed2d 8b02 	vpush	{d8}
 800cc54:	b08d      	sub	sp, #52	; 0x34
 800cc56:	460c      	mov	r4, r1
 800cc58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cc5c:	4616      	mov	r6, r2
 800cc5e:	461f      	mov	r7, r3
 800cc60:	4605      	mov	r5, r0
 800cc62:	f001 fd53 	bl	800e70c <_localeconv_r>
 800cc66:	f8d0 a000 	ldr.w	sl, [r0]
 800cc6a:	4650      	mov	r0, sl
 800cc6c:	f7f3 fa92 	bl	8000194 <strlen>
 800cc70:	2300      	movs	r3, #0
 800cc72:	930a      	str	r3, [sp, #40]	; 0x28
 800cc74:	6823      	ldr	r3, [r4, #0]
 800cc76:	9305      	str	r3, [sp, #20]
 800cc78:	f8d8 3000 	ldr.w	r3, [r8]
 800cc7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cc80:	3307      	adds	r3, #7
 800cc82:	f023 0307 	bic.w	r3, r3, #7
 800cc86:	f103 0208 	add.w	r2, r3, #8
 800cc8a:	f8c8 2000 	str.w	r2, [r8]
 800cc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cc96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cc9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cc9e:	9307      	str	r3, [sp, #28]
 800cca0:	f8cd 8018 	str.w	r8, [sp, #24]
 800cca4:	ee08 0a10 	vmov	s16, r0
 800cca8:	4b9f      	ldr	r3, [pc, #636]	; (800cf28 <_printf_float+0x2dc>)
 800ccaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccae:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb2:	f7f3 ff23 	bl	8000afc <__aeabi_dcmpun>
 800ccb6:	bb88      	cbnz	r0, 800cd1c <_printf_float+0xd0>
 800ccb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ccbc:	4b9a      	ldr	r3, [pc, #616]	; (800cf28 <_printf_float+0x2dc>)
 800ccbe:	f04f 32ff 	mov.w	r2, #4294967295
 800ccc2:	f7f3 fefd 	bl	8000ac0 <__aeabi_dcmple>
 800ccc6:	bb48      	cbnz	r0, 800cd1c <_printf_float+0xd0>
 800ccc8:	2200      	movs	r2, #0
 800ccca:	2300      	movs	r3, #0
 800cccc:	4640      	mov	r0, r8
 800ccce:	4649      	mov	r1, r9
 800ccd0:	f7f3 feec 	bl	8000aac <__aeabi_dcmplt>
 800ccd4:	b110      	cbz	r0, 800ccdc <_printf_float+0x90>
 800ccd6:	232d      	movs	r3, #45	; 0x2d
 800ccd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccdc:	4b93      	ldr	r3, [pc, #588]	; (800cf2c <_printf_float+0x2e0>)
 800ccde:	4894      	ldr	r0, [pc, #592]	; (800cf30 <_printf_float+0x2e4>)
 800cce0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cce4:	bf94      	ite	ls
 800cce6:	4698      	movls	r8, r3
 800cce8:	4680      	movhi	r8, r0
 800ccea:	2303      	movs	r3, #3
 800ccec:	6123      	str	r3, [r4, #16]
 800ccee:	9b05      	ldr	r3, [sp, #20]
 800ccf0:	f023 0204 	bic.w	r2, r3, #4
 800ccf4:	6022      	str	r2, [r4, #0]
 800ccf6:	f04f 0900 	mov.w	r9, #0
 800ccfa:	9700      	str	r7, [sp, #0]
 800ccfc:	4633      	mov	r3, r6
 800ccfe:	aa0b      	add	r2, sp, #44	; 0x2c
 800cd00:	4621      	mov	r1, r4
 800cd02:	4628      	mov	r0, r5
 800cd04:	f000 f9d8 	bl	800d0b8 <_printf_common>
 800cd08:	3001      	adds	r0, #1
 800cd0a:	f040 8090 	bne.w	800ce2e <_printf_float+0x1e2>
 800cd0e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd12:	b00d      	add	sp, #52	; 0x34
 800cd14:	ecbd 8b02 	vpop	{d8}
 800cd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd1c:	4642      	mov	r2, r8
 800cd1e:	464b      	mov	r3, r9
 800cd20:	4640      	mov	r0, r8
 800cd22:	4649      	mov	r1, r9
 800cd24:	f7f3 feea 	bl	8000afc <__aeabi_dcmpun>
 800cd28:	b140      	cbz	r0, 800cd3c <_printf_float+0xf0>
 800cd2a:	464b      	mov	r3, r9
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	bfbc      	itt	lt
 800cd30:	232d      	movlt	r3, #45	; 0x2d
 800cd32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cd36:	487f      	ldr	r0, [pc, #508]	; (800cf34 <_printf_float+0x2e8>)
 800cd38:	4b7f      	ldr	r3, [pc, #508]	; (800cf38 <_printf_float+0x2ec>)
 800cd3a:	e7d1      	b.n	800cce0 <_printf_float+0x94>
 800cd3c:	6863      	ldr	r3, [r4, #4]
 800cd3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cd42:	9206      	str	r2, [sp, #24]
 800cd44:	1c5a      	adds	r2, r3, #1
 800cd46:	d13f      	bne.n	800cdc8 <_printf_float+0x17c>
 800cd48:	2306      	movs	r3, #6
 800cd4a:	6063      	str	r3, [r4, #4]
 800cd4c:	9b05      	ldr	r3, [sp, #20]
 800cd4e:	6861      	ldr	r1, [r4, #4]
 800cd50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cd54:	2300      	movs	r3, #0
 800cd56:	9303      	str	r3, [sp, #12]
 800cd58:	ab0a      	add	r3, sp, #40	; 0x28
 800cd5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cd5e:	ab09      	add	r3, sp, #36	; 0x24
 800cd60:	ec49 8b10 	vmov	d0, r8, r9
 800cd64:	9300      	str	r3, [sp, #0]
 800cd66:	6022      	str	r2, [r4, #0]
 800cd68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cd6c:	4628      	mov	r0, r5
 800cd6e:	f7ff fecd 	bl	800cb0c <__cvt>
 800cd72:	9b06      	ldr	r3, [sp, #24]
 800cd74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd76:	2b47      	cmp	r3, #71	; 0x47
 800cd78:	4680      	mov	r8, r0
 800cd7a:	d108      	bne.n	800cd8e <_printf_float+0x142>
 800cd7c:	1cc8      	adds	r0, r1, #3
 800cd7e:	db02      	blt.n	800cd86 <_printf_float+0x13a>
 800cd80:	6863      	ldr	r3, [r4, #4]
 800cd82:	4299      	cmp	r1, r3
 800cd84:	dd41      	ble.n	800ce0a <_printf_float+0x1be>
 800cd86:	f1ab 0b02 	sub.w	fp, fp, #2
 800cd8a:	fa5f fb8b 	uxtb.w	fp, fp
 800cd8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cd92:	d820      	bhi.n	800cdd6 <_printf_float+0x18a>
 800cd94:	3901      	subs	r1, #1
 800cd96:	465a      	mov	r2, fp
 800cd98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cd9c:	9109      	str	r1, [sp, #36]	; 0x24
 800cd9e:	f7ff ff17 	bl	800cbd0 <__exponent>
 800cda2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cda4:	1813      	adds	r3, r2, r0
 800cda6:	2a01      	cmp	r2, #1
 800cda8:	4681      	mov	r9, r0
 800cdaa:	6123      	str	r3, [r4, #16]
 800cdac:	dc02      	bgt.n	800cdb4 <_printf_float+0x168>
 800cdae:	6822      	ldr	r2, [r4, #0]
 800cdb0:	07d2      	lsls	r2, r2, #31
 800cdb2:	d501      	bpl.n	800cdb8 <_printf_float+0x16c>
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	6123      	str	r3, [r4, #16]
 800cdb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d09c      	beq.n	800ccfa <_printf_float+0xae>
 800cdc0:	232d      	movs	r3, #45	; 0x2d
 800cdc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdc6:	e798      	b.n	800ccfa <_printf_float+0xae>
 800cdc8:	9a06      	ldr	r2, [sp, #24]
 800cdca:	2a47      	cmp	r2, #71	; 0x47
 800cdcc:	d1be      	bne.n	800cd4c <_printf_float+0x100>
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d1bc      	bne.n	800cd4c <_printf_float+0x100>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	e7b9      	b.n	800cd4a <_printf_float+0xfe>
 800cdd6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cdda:	d118      	bne.n	800ce0e <_printf_float+0x1c2>
 800cddc:	2900      	cmp	r1, #0
 800cdde:	6863      	ldr	r3, [r4, #4]
 800cde0:	dd0b      	ble.n	800cdfa <_printf_float+0x1ae>
 800cde2:	6121      	str	r1, [r4, #16]
 800cde4:	b913      	cbnz	r3, 800cdec <_printf_float+0x1a0>
 800cde6:	6822      	ldr	r2, [r4, #0]
 800cde8:	07d0      	lsls	r0, r2, #31
 800cdea:	d502      	bpl.n	800cdf2 <_printf_float+0x1a6>
 800cdec:	3301      	adds	r3, #1
 800cdee:	440b      	add	r3, r1
 800cdf0:	6123      	str	r3, [r4, #16]
 800cdf2:	65a1      	str	r1, [r4, #88]	; 0x58
 800cdf4:	f04f 0900 	mov.w	r9, #0
 800cdf8:	e7de      	b.n	800cdb8 <_printf_float+0x16c>
 800cdfa:	b913      	cbnz	r3, 800ce02 <_printf_float+0x1b6>
 800cdfc:	6822      	ldr	r2, [r4, #0]
 800cdfe:	07d2      	lsls	r2, r2, #31
 800ce00:	d501      	bpl.n	800ce06 <_printf_float+0x1ba>
 800ce02:	3302      	adds	r3, #2
 800ce04:	e7f4      	b.n	800cdf0 <_printf_float+0x1a4>
 800ce06:	2301      	movs	r3, #1
 800ce08:	e7f2      	b.n	800cdf0 <_printf_float+0x1a4>
 800ce0a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ce0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce10:	4299      	cmp	r1, r3
 800ce12:	db05      	blt.n	800ce20 <_printf_float+0x1d4>
 800ce14:	6823      	ldr	r3, [r4, #0]
 800ce16:	6121      	str	r1, [r4, #16]
 800ce18:	07d8      	lsls	r0, r3, #31
 800ce1a:	d5ea      	bpl.n	800cdf2 <_printf_float+0x1a6>
 800ce1c:	1c4b      	adds	r3, r1, #1
 800ce1e:	e7e7      	b.n	800cdf0 <_printf_float+0x1a4>
 800ce20:	2900      	cmp	r1, #0
 800ce22:	bfd4      	ite	le
 800ce24:	f1c1 0202 	rsble	r2, r1, #2
 800ce28:	2201      	movgt	r2, #1
 800ce2a:	4413      	add	r3, r2
 800ce2c:	e7e0      	b.n	800cdf0 <_printf_float+0x1a4>
 800ce2e:	6823      	ldr	r3, [r4, #0]
 800ce30:	055a      	lsls	r2, r3, #21
 800ce32:	d407      	bmi.n	800ce44 <_printf_float+0x1f8>
 800ce34:	6923      	ldr	r3, [r4, #16]
 800ce36:	4642      	mov	r2, r8
 800ce38:	4631      	mov	r1, r6
 800ce3a:	4628      	mov	r0, r5
 800ce3c:	47b8      	blx	r7
 800ce3e:	3001      	adds	r0, #1
 800ce40:	d12c      	bne.n	800ce9c <_printf_float+0x250>
 800ce42:	e764      	b.n	800cd0e <_printf_float+0xc2>
 800ce44:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ce48:	f240 80e0 	bls.w	800d00c <_printf_float+0x3c0>
 800ce4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce50:	2200      	movs	r2, #0
 800ce52:	2300      	movs	r3, #0
 800ce54:	f7f3 fe20 	bl	8000a98 <__aeabi_dcmpeq>
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	d034      	beq.n	800cec6 <_printf_float+0x27a>
 800ce5c:	4a37      	ldr	r2, [pc, #220]	; (800cf3c <_printf_float+0x2f0>)
 800ce5e:	2301      	movs	r3, #1
 800ce60:	4631      	mov	r1, r6
 800ce62:	4628      	mov	r0, r5
 800ce64:	47b8      	blx	r7
 800ce66:	3001      	adds	r0, #1
 800ce68:	f43f af51 	beq.w	800cd0e <_printf_float+0xc2>
 800ce6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce70:	429a      	cmp	r2, r3
 800ce72:	db02      	blt.n	800ce7a <_printf_float+0x22e>
 800ce74:	6823      	ldr	r3, [r4, #0]
 800ce76:	07d8      	lsls	r0, r3, #31
 800ce78:	d510      	bpl.n	800ce9c <_printf_float+0x250>
 800ce7a:	ee18 3a10 	vmov	r3, s16
 800ce7e:	4652      	mov	r2, sl
 800ce80:	4631      	mov	r1, r6
 800ce82:	4628      	mov	r0, r5
 800ce84:	47b8      	blx	r7
 800ce86:	3001      	adds	r0, #1
 800ce88:	f43f af41 	beq.w	800cd0e <_printf_float+0xc2>
 800ce8c:	f04f 0800 	mov.w	r8, #0
 800ce90:	f104 091a 	add.w	r9, r4, #26
 800ce94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce96:	3b01      	subs	r3, #1
 800ce98:	4543      	cmp	r3, r8
 800ce9a:	dc09      	bgt.n	800ceb0 <_printf_float+0x264>
 800ce9c:	6823      	ldr	r3, [r4, #0]
 800ce9e:	079b      	lsls	r3, r3, #30
 800cea0:	f100 8105 	bmi.w	800d0ae <_printf_float+0x462>
 800cea4:	68e0      	ldr	r0, [r4, #12]
 800cea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cea8:	4298      	cmp	r0, r3
 800ceaa:	bfb8      	it	lt
 800ceac:	4618      	movlt	r0, r3
 800ceae:	e730      	b.n	800cd12 <_printf_float+0xc6>
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	464a      	mov	r2, r9
 800ceb4:	4631      	mov	r1, r6
 800ceb6:	4628      	mov	r0, r5
 800ceb8:	47b8      	blx	r7
 800ceba:	3001      	adds	r0, #1
 800cebc:	f43f af27 	beq.w	800cd0e <_printf_float+0xc2>
 800cec0:	f108 0801 	add.w	r8, r8, #1
 800cec4:	e7e6      	b.n	800ce94 <_printf_float+0x248>
 800cec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	dc39      	bgt.n	800cf40 <_printf_float+0x2f4>
 800cecc:	4a1b      	ldr	r2, [pc, #108]	; (800cf3c <_printf_float+0x2f0>)
 800cece:	2301      	movs	r3, #1
 800ced0:	4631      	mov	r1, r6
 800ced2:	4628      	mov	r0, r5
 800ced4:	47b8      	blx	r7
 800ced6:	3001      	adds	r0, #1
 800ced8:	f43f af19 	beq.w	800cd0e <_printf_float+0xc2>
 800cedc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cee0:	4313      	orrs	r3, r2
 800cee2:	d102      	bne.n	800ceea <_printf_float+0x29e>
 800cee4:	6823      	ldr	r3, [r4, #0]
 800cee6:	07d9      	lsls	r1, r3, #31
 800cee8:	d5d8      	bpl.n	800ce9c <_printf_float+0x250>
 800ceea:	ee18 3a10 	vmov	r3, s16
 800ceee:	4652      	mov	r2, sl
 800cef0:	4631      	mov	r1, r6
 800cef2:	4628      	mov	r0, r5
 800cef4:	47b8      	blx	r7
 800cef6:	3001      	adds	r0, #1
 800cef8:	f43f af09 	beq.w	800cd0e <_printf_float+0xc2>
 800cefc:	f04f 0900 	mov.w	r9, #0
 800cf00:	f104 0a1a 	add.w	sl, r4, #26
 800cf04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf06:	425b      	negs	r3, r3
 800cf08:	454b      	cmp	r3, r9
 800cf0a:	dc01      	bgt.n	800cf10 <_printf_float+0x2c4>
 800cf0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf0e:	e792      	b.n	800ce36 <_printf_float+0x1ea>
 800cf10:	2301      	movs	r3, #1
 800cf12:	4652      	mov	r2, sl
 800cf14:	4631      	mov	r1, r6
 800cf16:	4628      	mov	r0, r5
 800cf18:	47b8      	blx	r7
 800cf1a:	3001      	adds	r0, #1
 800cf1c:	f43f aef7 	beq.w	800cd0e <_printf_float+0xc2>
 800cf20:	f109 0901 	add.w	r9, r9, #1
 800cf24:	e7ee      	b.n	800cf04 <_printf_float+0x2b8>
 800cf26:	bf00      	nop
 800cf28:	7fefffff 	.word	0x7fefffff
 800cf2c:	08010e28 	.word	0x08010e28
 800cf30:	08010e2c 	.word	0x08010e2c
 800cf34:	08010e34 	.word	0x08010e34
 800cf38:	08010e30 	.word	0x08010e30
 800cf3c:	08010e38 	.word	0x08010e38
 800cf40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf44:	429a      	cmp	r2, r3
 800cf46:	bfa8      	it	ge
 800cf48:	461a      	movge	r2, r3
 800cf4a:	2a00      	cmp	r2, #0
 800cf4c:	4691      	mov	r9, r2
 800cf4e:	dc37      	bgt.n	800cfc0 <_printf_float+0x374>
 800cf50:	f04f 0b00 	mov.w	fp, #0
 800cf54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf58:	f104 021a 	add.w	r2, r4, #26
 800cf5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cf5e:	9305      	str	r3, [sp, #20]
 800cf60:	eba3 0309 	sub.w	r3, r3, r9
 800cf64:	455b      	cmp	r3, fp
 800cf66:	dc33      	bgt.n	800cfd0 <_printf_float+0x384>
 800cf68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	db3b      	blt.n	800cfe8 <_printf_float+0x39c>
 800cf70:	6823      	ldr	r3, [r4, #0]
 800cf72:	07da      	lsls	r2, r3, #31
 800cf74:	d438      	bmi.n	800cfe8 <_printf_float+0x39c>
 800cf76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf78:	9a05      	ldr	r2, [sp, #20]
 800cf7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cf7c:	1a9a      	subs	r2, r3, r2
 800cf7e:	eba3 0901 	sub.w	r9, r3, r1
 800cf82:	4591      	cmp	r9, r2
 800cf84:	bfa8      	it	ge
 800cf86:	4691      	movge	r9, r2
 800cf88:	f1b9 0f00 	cmp.w	r9, #0
 800cf8c:	dc35      	bgt.n	800cffa <_printf_float+0x3ae>
 800cf8e:	f04f 0800 	mov.w	r8, #0
 800cf92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cf96:	f104 0a1a 	add.w	sl, r4, #26
 800cf9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf9e:	1a9b      	subs	r3, r3, r2
 800cfa0:	eba3 0309 	sub.w	r3, r3, r9
 800cfa4:	4543      	cmp	r3, r8
 800cfa6:	f77f af79 	ble.w	800ce9c <_printf_float+0x250>
 800cfaa:	2301      	movs	r3, #1
 800cfac:	4652      	mov	r2, sl
 800cfae:	4631      	mov	r1, r6
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	47b8      	blx	r7
 800cfb4:	3001      	adds	r0, #1
 800cfb6:	f43f aeaa 	beq.w	800cd0e <_printf_float+0xc2>
 800cfba:	f108 0801 	add.w	r8, r8, #1
 800cfbe:	e7ec      	b.n	800cf9a <_printf_float+0x34e>
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	4631      	mov	r1, r6
 800cfc4:	4642      	mov	r2, r8
 800cfc6:	4628      	mov	r0, r5
 800cfc8:	47b8      	blx	r7
 800cfca:	3001      	adds	r0, #1
 800cfcc:	d1c0      	bne.n	800cf50 <_printf_float+0x304>
 800cfce:	e69e      	b.n	800cd0e <_printf_float+0xc2>
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	4631      	mov	r1, r6
 800cfd4:	4628      	mov	r0, r5
 800cfd6:	9205      	str	r2, [sp, #20]
 800cfd8:	47b8      	blx	r7
 800cfda:	3001      	adds	r0, #1
 800cfdc:	f43f ae97 	beq.w	800cd0e <_printf_float+0xc2>
 800cfe0:	9a05      	ldr	r2, [sp, #20]
 800cfe2:	f10b 0b01 	add.w	fp, fp, #1
 800cfe6:	e7b9      	b.n	800cf5c <_printf_float+0x310>
 800cfe8:	ee18 3a10 	vmov	r3, s16
 800cfec:	4652      	mov	r2, sl
 800cfee:	4631      	mov	r1, r6
 800cff0:	4628      	mov	r0, r5
 800cff2:	47b8      	blx	r7
 800cff4:	3001      	adds	r0, #1
 800cff6:	d1be      	bne.n	800cf76 <_printf_float+0x32a>
 800cff8:	e689      	b.n	800cd0e <_printf_float+0xc2>
 800cffa:	9a05      	ldr	r2, [sp, #20]
 800cffc:	464b      	mov	r3, r9
 800cffe:	4442      	add	r2, r8
 800d000:	4631      	mov	r1, r6
 800d002:	4628      	mov	r0, r5
 800d004:	47b8      	blx	r7
 800d006:	3001      	adds	r0, #1
 800d008:	d1c1      	bne.n	800cf8e <_printf_float+0x342>
 800d00a:	e680      	b.n	800cd0e <_printf_float+0xc2>
 800d00c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d00e:	2a01      	cmp	r2, #1
 800d010:	dc01      	bgt.n	800d016 <_printf_float+0x3ca>
 800d012:	07db      	lsls	r3, r3, #31
 800d014:	d538      	bpl.n	800d088 <_printf_float+0x43c>
 800d016:	2301      	movs	r3, #1
 800d018:	4642      	mov	r2, r8
 800d01a:	4631      	mov	r1, r6
 800d01c:	4628      	mov	r0, r5
 800d01e:	47b8      	blx	r7
 800d020:	3001      	adds	r0, #1
 800d022:	f43f ae74 	beq.w	800cd0e <_printf_float+0xc2>
 800d026:	ee18 3a10 	vmov	r3, s16
 800d02a:	4652      	mov	r2, sl
 800d02c:	4631      	mov	r1, r6
 800d02e:	4628      	mov	r0, r5
 800d030:	47b8      	blx	r7
 800d032:	3001      	adds	r0, #1
 800d034:	f43f ae6b 	beq.w	800cd0e <_printf_float+0xc2>
 800d038:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d03c:	2200      	movs	r2, #0
 800d03e:	2300      	movs	r3, #0
 800d040:	f7f3 fd2a 	bl	8000a98 <__aeabi_dcmpeq>
 800d044:	b9d8      	cbnz	r0, 800d07e <_printf_float+0x432>
 800d046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d048:	f108 0201 	add.w	r2, r8, #1
 800d04c:	3b01      	subs	r3, #1
 800d04e:	4631      	mov	r1, r6
 800d050:	4628      	mov	r0, r5
 800d052:	47b8      	blx	r7
 800d054:	3001      	adds	r0, #1
 800d056:	d10e      	bne.n	800d076 <_printf_float+0x42a>
 800d058:	e659      	b.n	800cd0e <_printf_float+0xc2>
 800d05a:	2301      	movs	r3, #1
 800d05c:	4652      	mov	r2, sl
 800d05e:	4631      	mov	r1, r6
 800d060:	4628      	mov	r0, r5
 800d062:	47b8      	blx	r7
 800d064:	3001      	adds	r0, #1
 800d066:	f43f ae52 	beq.w	800cd0e <_printf_float+0xc2>
 800d06a:	f108 0801 	add.w	r8, r8, #1
 800d06e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d070:	3b01      	subs	r3, #1
 800d072:	4543      	cmp	r3, r8
 800d074:	dcf1      	bgt.n	800d05a <_printf_float+0x40e>
 800d076:	464b      	mov	r3, r9
 800d078:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d07c:	e6dc      	b.n	800ce38 <_printf_float+0x1ec>
 800d07e:	f04f 0800 	mov.w	r8, #0
 800d082:	f104 0a1a 	add.w	sl, r4, #26
 800d086:	e7f2      	b.n	800d06e <_printf_float+0x422>
 800d088:	2301      	movs	r3, #1
 800d08a:	4642      	mov	r2, r8
 800d08c:	e7df      	b.n	800d04e <_printf_float+0x402>
 800d08e:	2301      	movs	r3, #1
 800d090:	464a      	mov	r2, r9
 800d092:	4631      	mov	r1, r6
 800d094:	4628      	mov	r0, r5
 800d096:	47b8      	blx	r7
 800d098:	3001      	adds	r0, #1
 800d09a:	f43f ae38 	beq.w	800cd0e <_printf_float+0xc2>
 800d09e:	f108 0801 	add.w	r8, r8, #1
 800d0a2:	68e3      	ldr	r3, [r4, #12]
 800d0a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d0a6:	1a5b      	subs	r3, r3, r1
 800d0a8:	4543      	cmp	r3, r8
 800d0aa:	dcf0      	bgt.n	800d08e <_printf_float+0x442>
 800d0ac:	e6fa      	b.n	800cea4 <_printf_float+0x258>
 800d0ae:	f04f 0800 	mov.w	r8, #0
 800d0b2:	f104 0919 	add.w	r9, r4, #25
 800d0b6:	e7f4      	b.n	800d0a2 <_printf_float+0x456>

0800d0b8 <_printf_common>:
 800d0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0bc:	4616      	mov	r6, r2
 800d0be:	4699      	mov	r9, r3
 800d0c0:	688a      	ldr	r2, [r1, #8]
 800d0c2:	690b      	ldr	r3, [r1, #16]
 800d0c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	bfb8      	it	lt
 800d0cc:	4613      	movlt	r3, r2
 800d0ce:	6033      	str	r3, [r6, #0]
 800d0d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0d4:	4607      	mov	r7, r0
 800d0d6:	460c      	mov	r4, r1
 800d0d8:	b10a      	cbz	r2, 800d0de <_printf_common+0x26>
 800d0da:	3301      	adds	r3, #1
 800d0dc:	6033      	str	r3, [r6, #0]
 800d0de:	6823      	ldr	r3, [r4, #0]
 800d0e0:	0699      	lsls	r1, r3, #26
 800d0e2:	bf42      	ittt	mi
 800d0e4:	6833      	ldrmi	r3, [r6, #0]
 800d0e6:	3302      	addmi	r3, #2
 800d0e8:	6033      	strmi	r3, [r6, #0]
 800d0ea:	6825      	ldr	r5, [r4, #0]
 800d0ec:	f015 0506 	ands.w	r5, r5, #6
 800d0f0:	d106      	bne.n	800d100 <_printf_common+0x48>
 800d0f2:	f104 0a19 	add.w	sl, r4, #25
 800d0f6:	68e3      	ldr	r3, [r4, #12]
 800d0f8:	6832      	ldr	r2, [r6, #0]
 800d0fa:	1a9b      	subs	r3, r3, r2
 800d0fc:	42ab      	cmp	r3, r5
 800d0fe:	dc26      	bgt.n	800d14e <_printf_common+0x96>
 800d100:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d104:	1e13      	subs	r3, r2, #0
 800d106:	6822      	ldr	r2, [r4, #0]
 800d108:	bf18      	it	ne
 800d10a:	2301      	movne	r3, #1
 800d10c:	0692      	lsls	r2, r2, #26
 800d10e:	d42b      	bmi.n	800d168 <_printf_common+0xb0>
 800d110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d114:	4649      	mov	r1, r9
 800d116:	4638      	mov	r0, r7
 800d118:	47c0      	blx	r8
 800d11a:	3001      	adds	r0, #1
 800d11c:	d01e      	beq.n	800d15c <_printf_common+0xa4>
 800d11e:	6823      	ldr	r3, [r4, #0]
 800d120:	68e5      	ldr	r5, [r4, #12]
 800d122:	6832      	ldr	r2, [r6, #0]
 800d124:	f003 0306 	and.w	r3, r3, #6
 800d128:	2b04      	cmp	r3, #4
 800d12a:	bf08      	it	eq
 800d12c:	1aad      	subeq	r5, r5, r2
 800d12e:	68a3      	ldr	r3, [r4, #8]
 800d130:	6922      	ldr	r2, [r4, #16]
 800d132:	bf0c      	ite	eq
 800d134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d138:	2500      	movne	r5, #0
 800d13a:	4293      	cmp	r3, r2
 800d13c:	bfc4      	itt	gt
 800d13e:	1a9b      	subgt	r3, r3, r2
 800d140:	18ed      	addgt	r5, r5, r3
 800d142:	2600      	movs	r6, #0
 800d144:	341a      	adds	r4, #26
 800d146:	42b5      	cmp	r5, r6
 800d148:	d11a      	bne.n	800d180 <_printf_common+0xc8>
 800d14a:	2000      	movs	r0, #0
 800d14c:	e008      	b.n	800d160 <_printf_common+0xa8>
 800d14e:	2301      	movs	r3, #1
 800d150:	4652      	mov	r2, sl
 800d152:	4649      	mov	r1, r9
 800d154:	4638      	mov	r0, r7
 800d156:	47c0      	blx	r8
 800d158:	3001      	adds	r0, #1
 800d15a:	d103      	bne.n	800d164 <_printf_common+0xac>
 800d15c:	f04f 30ff 	mov.w	r0, #4294967295
 800d160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d164:	3501      	adds	r5, #1
 800d166:	e7c6      	b.n	800d0f6 <_printf_common+0x3e>
 800d168:	18e1      	adds	r1, r4, r3
 800d16a:	1c5a      	adds	r2, r3, #1
 800d16c:	2030      	movs	r0, #48	; 0x30
 800d16e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d172:	4422      	add	r2, r4
 800d174:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d17c:	3302      	adds	r3, #2
 800d17e:	e7c7      	b.n	800d110 <_printf_common+0x58>
 800d180:	2301      	movs	r3, #1
 800d182:	4622      	mov	r2, r4
 800d184:	4649      	mov	r1, r9
 800d186:	4638      	mov	r0, r7
 800d188:	47c0      	blx	r8
 800d18a:	3001      	adds	r0, #1
 800d18c:	d0e6      	beq.n	800d15c <_printf_common+0xa4>
 800d18e:	3601      	adds	r6, #1
 800d190:	e7d9      	b.n	800d146 <_printf_common+0x8e>
	...

0800d194 <_printf_i>:
 800d194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d198:	7e0f      	ldrb	r7, [r1, #24]
 800d19a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d19c:	2f78      	cmp	r7, #120	; 0x78
 800d19e:	4691      	mov	r9, r2
 800d1a0:	4680      	mov	r8, r0
 800d1a2:	460c      	mov	r4, r1
 800d1a4:	469a      	mov	sl, r3
 800d1a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d1aa:	d807      	bhi.n	800d1bc <_printf_i+0x28>
 800d1ac:	2f62      	cmp	r7, #98	; 0x62
 800d1ae:	d80a      	bhi.n	800d1c6 <_printf_i+0x32>
 800d1b0:	2f00      	cmp	r7, #0
 800d1b2:	f000 80d8 	beq.w	800d366 <_printf_i+0x1d2>
 800d1b6:	2f58      	cmp	r7, #88	; 0x58
 800d1b8:	f000 80a3 	beq.w	800d302 <_printf_i+0x16e>
 800d1bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d1c4:	e03a      	b.n	800d23c <_printf_i+0xa8>
 800d1c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1ca:	2b15      	cmp	r3, #21
 800d1cc:	d8f6      	bhi.n	800d1bc <_printf_i+0x28>
 800d1ce:	a101      	add	r1, pc, #4	; (adr r1, 800d1d4 <_printf_i+0x40>)
 800d1d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1d4:	0800d22d 	.word	0x0800d22d
 800d1d8:	0800d241 	.word	0x0800d241
 800d1dc:	0800d1bd 	.word	0x0800d1bd
 800d1e0:	0800d1bd 	.word	0x0800d1bd
 800d1e4:	0800d1bd 	.word	0x0800d1bd
 800d1e8:	0800d1bd 	.word	0x0800d1bd
 800d1ec:	0800d241 	.word	0x0800d241
 800d1f0:	0800d1bd 	.word	0x0800d1bd
 800d1f4:	0800d1bd 	.word	0x0800d1bd
 800d1f8:	0800d1bd 	.word	0x0800d1bd
 800d1fc:	0800d1bd 	.word	0x0800d1bd
 800d200:	0800d34d 	.word	0x0800d34d
 800d204:	0800d271 	.word	0x0800d271
 800d208:	0800d32f 	.word	0x0800d32f
 800d20c:	0800d1bd 	.word	0x0800d1bd
 800d210:	0800d1bd 	.word	0x0800d1bd
 800d214:	0800d36f 	.word	0x0800d36f
 800d218:	0800d1bd 	.word	0x0800d1bd
 800d21c:	0800d271 	.word	0x0800d271
 800d220:	0800d1bd 	.word	0x0800d1bd
 800d224:	0800d1bd 	.word	0x0800d1bd
 800d228:	0800d337 	.word	0x0800d337
 800d22c:	682b      	ldr	r3, [r5, #0]
 800d22e:	1d1a      	adds	r2, r3, #4
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	602a      	str	r2, [r5, #0]
 800d234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d23c:	2301      	movs	r3, #1
 800d23e:	e0a3      	b.n	800d388 <_printf_i+0x1f4>
 800d240:	6820      	ldr	r0, [r4, #0]
 800d242:	6829      	ldr	r1, [r5, #0]
 800d244:	0606      	lsls	r6, r0, #24
 800d246:	f101 0304 	add.w	r3, r1, #4
 800d24a:	d50a      	bpl.n	800d262 <_printf_i+0xce>
 800d24c:	680e      	ldr	r6, [r1, #0]
 800d24e:	602b      	str	r3, [r5, #0]
 800d250:	2e00      	cmp	r6, #0
 800d252:	da03      	bge.n	800d25c <_printf_i+0xc8>
 800d254:	232d      	movs	r3, #45	; 0x2d
 800d256:	4276      	negs	r6, r6
 800d258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d25c:	485e      	ldr	r0, [pc, #376]	; (800d3d8 <_printf_i+0x244>)
 800d25e:	230a      	movs	r3, #10
 800d260:	e019      	b.n	800d296 <_printf_i+0x102>
 800d262:	680e      	ldr	r6, [r1, #0]
 800d264:	602b      	str	r3, [r5, #0]
 800d266:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d26a:	bf18      	it	ne
 800d26c:	b236      	sxthne	r6, r6
 800d26e:	e7ef      	b.n	800d250 <_printf_i+0xbc>
 800d270:	682b      	ldr	r3, [r5, #0]
 800d272:	6820      	ldr	r0, [r4, #0]
 800d274:	1d19      	adds	r1, r3, #4
 800d276:	6029      	str	r1, [r5, #0]
 800d278:	0601      	lsls	r1, r0, #24
 800d27a:	d501      	bpl.n	800d280 <_printf_i+0xec>
 800d27c:	681e      	ldr	r6, [r3, #0]
 800d27e:	e002      	b.n	800d286 <_printf_i+0xf2>
 800d280:	0646      	lsls	r6, r0, #25
 800d282:	d5fb      	bpl.n	800d27c <_printf_i+0xe8>
 800d284:	881e      	ldrh	r6, [r3, #0]
 800d286:	4854      	ldr	r0, [pc, #336]	; (800d3d8 <_printf_i+0x244>)
 800d288:	2f6f      	cmp	r7, #111	; 0x6f
 800d28a:	bf0c      	ite	eq
 800d28c:	2308      	moveq	r3, #8
 800d28e:	230a      	movne	r3, #10
 800d290:	2100      	movs	r1, #0
 800d292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d296:	6865      	ldr	r5, [r4, #4]
 800d298:	60a5      	str	r5, [r4, #8]
 800d29a:	2d00      	cmp	r5, #0
 800d29c:	bfa2      	ittt	ge
 800d29e:	6821      	ldrge	r1, [r4, #0]
 800d2a0:	f021 0104 	bicge.w	r1, r1, #4
 800d2a4:	6021      	strge	r1, [r4, #0]
 800d2a6:	b90e      	cbnz	r6, 800d2ac <_printf_i+0x118>
 800d2a8:	2d00      	cmp	r5, #0
 800d2aa:	d04d      	beq.n	800d348 <_printf_i+0x1b4>
 800d2ac:	4615      	mov	r5, r2
 800d2ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800d2b2:	fb03 6711 	mls	r7, r3, r1, r6
 800d2b6:	5dc7      	ldrb	r7, [r0, r7]
 800d2b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d2bc:	4637      	mov	r7, r6
 800d2be:	42bb      	cmp	r3, r7
 800d2c0:	460e      	mov	r6, r1
 800d2c2:	d9f4      	bls.n	800d2ae <_printf_i+0x11a>
 800d2c4:	2b08      	cmp	r3, #8
 800d2c6:	d10b      	bne.n	800d2e0 <_printf_i+0x14c>
 800d2c8:	6823      	ldr	r3, [r4, #0]
 800d2ca:	07de      	lsls	r6, r3, #31
 800d2cc:	d508      	bpl.n	800d2e0 <_printf_i+0x14c>
 800d2ce:	6923      	ldr	r3, [r4, #16]
 800d2d0:	6861      	ldr	r1, [r4, #4]
 800d2d2:	4299      	cmp	r1, r3
 800d2d4:	bfde      	ittt	le
 800d2d6:	2330      	movle	r3, #48	; 0x30
 800d2d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d2dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d2e0:	1b52      	subs	r2, r2, r5
 800d2e2:	6122      	str	r2, [r4, #16]
 800d2e4:	f8cd a000 	str.w	sl, [sp]
 800d2e8:	464b      	mov	r3, r9
 800d2ea:	aa03      	add	r2, sp, #12
 800d2ec:	4621      	mov	r1, r4
 800d2ee:	4640      	mov	r0, r8
 800d2f0:	f7ff fee2 	bl	800d0b8 <_printf_common>
 800d2f4:	3001      	adds	r0, #1
 800d2f6:	d14c      	bne.n	800d392 <_printf_i+0x1fe>
 800d2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2fc:	b004      	add	sp, #16
 800d2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d302:	4835      	ldr	r0, [pc, #212]	; (800d3d8 <_printf_i+0x244>)
 800d304:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d308:	6829      	ldr	r1, [r5, #0]
 800d30a:	6823      	ldr	r3, [r4, #0]
 800d30c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d310:	6029      	str	r1, [r5, #0]
 800d312:	061d      	lsls	r5, r3, #24
 800d314:	d514      	bpl.n	800d340 <_printf_i+0x1ac>
 800d316:	07df      	lsls	r7, r3, #31
 800d318:	bf44      	itt	mi
 800d31a:	f043 0320 	orrmi.w	r3, r3, #32
 800d31e:	6023      	strmi	r3, [r4, #0]
 800d320:	b91e      	cbnz	r6, 800d32a <_printf_i+0x196>
 800d322:	6823      	ldr	r3, [r4, #0]
 800d324:	f023 0320 	bic.w	r3, r3, #32
 800d328:	6023      	str	r3, [r4, #0]
 800d32a:	2310      	movs	r3, #16
 800d32c:	e7b0      	b.n	800d290 <_printf_i+0xfc>
 800d32e:	6823      	ldr	r3, [r4, #0]
 800d330:	f043 0320 	orr.w	r3, r3, #32
 800d334:	6023      	str	r3, [r4, #0]
 800d336:	2378      	movs	r3, #120	; 0x78
 800d338:	4828      	ldr	r0, [pc, #160]	; (800d3dc <_printf_i+0x248>)
 800d33a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d33e:	e7e3      	b.n	800d308 <_printf_i+0x174>
 800d340:	0659      	lsls	r1, r3, #25
 800d342:	bf48      	it	mi
 800d344:	b2b6      	uxthmi	r6, r6
 800d346:	e7e6      	b.n	800d316 <_printf_i+0x182>
 800d348:	4615      	mov	r5, r2
 800d34a:	e7bb      	b.n	800d2c4 <_printf_i+0x130>
 800d34c:	682b      	ldr	r3, [r5, #0]
 800d34e:	6826      	ldr	r6, [r4, #0]
 800d350:	6961      	ldr	r1, [r4, #20]
 800d352:	1d18      	adds	r0, r3, #4
 800d354:	6028      	str	r0, [r5, #0]
 800d356:	0635      	lsls	r5, r6, #24
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	d501      	bpl.n	800d360 <_printf_i+0x1cc>
 800d35c:	6019      	str	r1, [r3, #0]
 800d35e:	e002      	b.n	800d366 <_printf_i+0x1d2>
 800d360:	0670      	lsls	r0, r6, #25
 800d362:	d5fb      	bpl.n	800d35c <_printf_i+0x1c8>
 800d364:	8019      	strh	r1, [r3, #0]
 800d366:	2300      	movs	r3, #0
 800d368:	6123      	str	r3, [r4, #16]
 800d36a:	4615      	mov	r5, r2
 800d36c:	e7ba      	b.n	800d2e4 <_printf_i+0x150>
 800d36e:	682b      	ldr	r3, [r5, #0]
 800d370:	1d1a      	adds	r2, r3, #4
 800d372:	602a      	str	r2, [r5, #0]
 800d374:	681d      	ldr	r5, [r3, #0]
 800d376:	6862      	ldr	r2, [r4, #4]
 800d378:	2100      	movs	r1, #0
 800d37a:	4628      	mov	r0, r5
 800d37c:	f7f2 ff18 	bl	80001b0 <memchr>
 800d380:	b108      	cbz	r0, 800d386 <_printf_i+0x1f2>
 800d382:	1b40      	subs	r0, r0, r5
 800d384:	6060      	str	r0, [r4, #4]
 800d386:	6863      	ldr	r3, [r4, #4]
 800d388:	6123      	str	r3, [r4, #16]
 800d38a:	2300      	movs	r3, #0
 800d38c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d390:	e7a8      	b.n	800d2e4 <_printf_i+0x150>
 800d392:	6923      	ldr	r3, [r4, #16]
 800d394:	462a      	mov	r2, r5
 800d396:	4649      	mov	r1, r9
 800d398:	4640      	mov	r0, r8
 800d39a:	47d0      	blx	sl
 800d39c:	3001      	adds	r0, #1
 800d39e:	d0ab      	beq.n	800d2f8 <_printf_i+0x164>
 800d3a0:	6823      	ldr	r3, [r4, #0]
 800d3a2:	079b      	lsls	r3, r3, #30
 800d3a4:	d413      	bmi.n	800d3ce <_printf_i+0x23a>
 800d3a6:	68e0      	ldr	r0, [r4, #12]
 800d3a8:	9b03      	ldr	r3, [sp, #12]
 800d3aa:	4298      	cmp	r0, r3
 800d3ac:	bfb8      	it	lt
 800d3ae:	4618      	movlt	r0, r3
 800d3b0:	e7a4      	b.n	800d2fc <_printf_i+0x168>
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	4632      	mov	r2, r6
 800d3b6:	4649      	mov	r1, r9
 800d3b8:	4640      	mov	r0, r8
 800d3ba:	47d0      	blx	sl
 800d3bc:	3001      	adds	r0, #1
 800d3be:	d09b      	beq.n	800d2f8 <_printf_i+0x164>
 800d3c0:	3501      	adds	r5, #1
 800d3c2:	68e3      	ldr	r3, [r4, #12]
 800d3c4:	9903      	ldr	r1, [sp, #12]
 800d3c6:	1a5b      	subs	r3, r3, r1
 800d3c8:	42ab      	cmp	r3, r5
 800d3ca:	dcf2      	bgt.n	800d3b2 <_printf_i+0x21e>
 800d3cc:	e7eb      	b.n	800d3a6 <_printf_i+0x212>
 800d3ce:	2500      	movs	r5, #0
 800d3d0:	f104 0619 	add.w	r6, r4, #25
 800d3d4:	e7f5      	b.n	800d3c2 <_printf_i+0x22e>
 800d3d6:	bf00      	nop
 800d3d8:	08010e3a 	.word	0x08010e3a
 800d3dc:	08010e4b 	.word	0x08010e4b

0800d3e0 <iprintf>:
 800d3e0:	b40f      	push	{r0, r1, r2, r3}
 800d3e2:	4b0a      	ldr	r3, [pc, #40]	; (800d40c <iprintf+0x2c>)
 800d3e4:	b513      	push	{r0, r1, r4, lr}
 800d3e6:	681c      	ldr	r4, [r3, #0]
 800d3e8:	b124      	cbz	r4, 800d3f4 <iprintf+0x14>
 800d3ea:	69a3      	ldr	r3, [r4, #24]
 800d3ec:	b913      	cbnz	r3, 800d3f4 <iprintf+0x14>
 800d3ee:	4620      	mov	r0, r4
 800d3f0:	f001 f8ee 	bl	800e5d0 <__sinit>
 800d3f4:	ab05      	add	r3, sp, #20
 800d3f6:	9a04      	ldr	r2, [sp, #16]
 800d3f8:	68a1      	ldr	r1, [r4, #8]
 800d3fa:	9301      	str	r3, [sp, #4]
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	f001 fe9d 	bl	800f13c <_vfiprintf_r>
 800d402:	b002      	add	sp, #8
 800d404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d408:	b004      	add	sp, #16
 800d40a:	4770      	bx	lr
 800d40c:	20000064 	.word	0x20000064

0800d410 <putchar>:
 800d410:	4b09      	ldr	r3, [pc, #36]	; (800d438 <putchar+0x28>)
 800d412:	b513      	push	{r0, r1, r4, lr}
 800d414:	681c      	ldr	r4, [r3, #0]
 800d416:	4601      	mov	r1, r0
 800d418:	b134      	cbz	r4, 800d428 <putchar+0x18>
 800d41a:	69a3      	ldr	r3, [r4, #24]
 800d41c:	b923      	cbnz	r3, 800d428 <putchar+0x18>
 800d41e:	9001      	str	r0, [sp, #4]
 800d420:	4620      	mov	r0, r4
 800d422:	f001 f8d5 	bl	800e5d0 <__sinit>
 800d426:	9901      	ldr	r1, [sp, #4]
 800d428:	68a2      	ldr	r2, [r4, #8]
 800d42a:	4620      	mov	r0, r4
 800d42c:	b002      	add	sp, #8
 800d42e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d432:	f001 bfb3 	b.w	800f39c <_putc_r>
 800d436:	bf00      	nop
 800d438:	20000064 	.word	0x20000064

0800d43c <_puts_r>:
 800d43c:	b570      	push	{r4, r5, r6, lr}
 800d43e:	460e      	mov	r6, r1
 800d440:	4605      	mov	r5, r0
 800d442:	b118      	cbz	r0, 800d44c <_puts_r+0x10>
 800d444:	6983      	ldr	r3, [r0, #24]
 800d446:	b90b      	cbnz	r3, 800d44c <_puts_r+0x10>
 800d448:	f001 f8c2 	bl	800e5d0 <__sinit>
 800d44c:	69ab      	ldr	r3, [r5, #24]
 800d44e:	68ac      	ldr	r4, [r5, #8]
 800d450:	b913      	cbnz	r3, 800d458 <_puts_r+0x1c>
 800d452:	4628      	mov	r0, r5
 800d454:	f001 f8bc 	bl	800e5d0 <__sinit>
 800d458:	4b2c      	ldr	r3, [pc, #176]	; (800d50c <_puts_r+0xd0>)
 800d45a:	429c      	cmp	r4, r3
 800d45c:	d120      	bne.n	800d4a0 <_puts_r+0x64>
 800d45e:	686c      	ldr	r4, [r5, #4]
 800d460:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d462:	07db      	lsls	r3, r3, #31
 800d464:	d405      	bmi.n	800d472 <_puts_r+0x36>
 800d466:	89a3      	ldrh	r3, [r4, #12]
 800d468:	0598      	lsls	r0, r3, #22
 800d46a:	d402      	bmi.n	800d472 <_puts_r+0x36>
 800d46c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d46e:	f001 f952 	bl	800e716 <__retarget_lock_acquire_recursive>
 800d472:	89a3      	ldrh	r3, [r4, #12]
 800d474:	0719      	lsls	r1, r3, #28
 800d476:	d51d      	bpl.n	800d4b4 <_puts_r+0x78>
 800d478:	6923      	ldr	r3, [r4, #16]
 800d47a:	b1db      	cbz	r3, 800d4b4 <_puts_r+0x78>
 800d47c:	3e01      	subs	r6, #1
 800d47e:	68a3      	ldr	r3, [r4, #8]
 800d480:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d484:	3b01      	subs	r3, #1
 800d486:	60a3      	str	r3, [r4, #8]
 800d488:	bb39      	cbnz	r1, 800d4da <_puts_r+0x9e>
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	da38      	bge.n	800d500 <_puts_r+0xc4>
 800d48e:	4622      	mov	r2, r4
 800d490:	210a      	movs	r1, #10
 800d492:	4628      	mov	r0, r5
 800d494:	f000 f848 	bl	800d528 <__swbuf_r>
 800d498:	3001      	adds	r0, #1
 800d49a:	d011      	beq.n	800d4c0 <_puts_r+0x84>
 800d49c:	250a      	movs	r5, #10
 800d49e:	e011      	b.n	800d4c4 <_puts_r+0x88>
 800d4a0:	4b1b      	ldr	r3, [pc, #108]	; (800d510 <_puts_r+0xd4>)
 800d4a2:	429c      	cmp	r4, r3
 800d4a4:	d101      	bne.n	800d4aa <_puts_r+0x6e>
 800d4a6:	68ac      	ldr	r4, [r5, #8]
 800d4a8:	e7da      	b.n	800d460 <_puts_r+0x24>
 800d4aa:	4b1a      	ldr	r3, [pc, #104]	; (800d514 <_puts_r+0xd8>)
 800d4ac:	429c      	cmp	r4, r3
 800d4ae:	bf08      	it	eq
 800d4b0:	68ec      	ldreq	r4, [r5, #12]
 800d4b2:	e7d5      	b.n	800d460 <_puts_r+0x24>
 800d4b4:	4621      	mov	r1, r4
 800d4b6:	4628      	mov	r0, r5
 800d4b8:	f000 f888 	bl	800d5cc <__swsetup_r>
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	d0dd      	beq.n	800d47c <_puts_r+0x40>
 800d4c0:	f04f 35ff 	mov.w	r5, #4294967295
 800d4c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4c6:	07da      	lsls	r2, r3, #31
 800d4c8:	d405      	bmi.n	800d4d6 <_puts_r+0x9a>
 800d4ca:	89a3      	ldrh	r3, [r4, #12]
 800d4cc:	059b      	lsls	r3, r3, #22
 800d4ce:	d402      	bmi.n	800d4d6 <_puts_r+0x9a>
 800d4d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4d2:	f001 f921 	bl	800e718 <__retarget_lock_release_recursive>
 800d4d6:	4628      	mov	r0, r5
 800d4d8:	bd70      	pop	{r4, r5, r6, pc}
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	da04      	bge.n	800d4e8 <_puts_r+0xac>
 800d4de:	69a2      	ldr	r2, [r4, #24]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	dc06      	bgt.n	800d4f2 <_puts_r+0xb6>
 800d4e4:	290a      	cmp	r1, #10
 800d4e6:	d004      	beq.n	800d4f2 <_puts_r+0xb6>
 800d4e8:	6823      	ldr	r3, [r4, #0]
 800d4ea:	1c5a      	adds	r2, r3, #1
 800d4ec:	6022      	str	r2, [r4, #0]
 800d4ee:	7019      	strb	r1, [r3, #0]
 800d4f0:	e7c5      	b.n	800d47e <_puts_r+0x42>
 800d4f2:	4622      	mov	r2, r4
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	f000 f817 	bl	800d528 <__swbuf_r>
 800d4fa:	3001      	adds	r0, #1
 800d4fc:	d1bf      	bne.n	800d47e <_puts_r+0x42>
 800d4fe:	e7df      	b.n	800d4c0 <_puts_r+0x84>
 800d500:	6823      	ldr	r3, [r4, #0]
 800d502:	250a      	movs	r5, #10
 800d504:	1c5a      	adds	r2, r3, #1
 800d506:	6022      	str	r2, [r4, #0]
 800d508:	701d      	strb	r5, [r3, #0]
 800d50a:	e7db      	b.n	800d4c4 <_puts_r+0x88>
 800d50c:	08010f0c 	.word	0x08010f0c
 800d510:	08010f2c 	.word	0x08010f2c
 800d514:	08010eec 	.word	0x08010eec

0800d518 <puts>:
 800d518:	4b02      	ldr	r3, [pc, #8]	; (800d524 <puts+0xc>)
 800d51a:	4601      	mov	r1, r0
 800d51c:	6818      	ldr	r0, [r3, #0]
 800d51e:	f7ff bf8d 	b.w	800d43c <_puts_r>
 800d522:	bf00      	nop
 800d524:	20000064 	.word	0x20000064

0800d528 <__swbuf_r>:
 800d528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d52a:	460e      	mov	r6, r1
 800d52c:	4614      	mov	r4, r2
 800d52e:	4605      	mov	r5, r0
 800d530:	b118      	cbz	r0, 800d53a <__swbuf_r+0x12>
 800d532:	6983      	ldr	r3, [r0, #24]
 800d534:	b90b      	cbnz	r3, 800d53a <__swbuf_r+0x12>
 800d536:	f001 f84b 	bl	800e5d0 <__sinit>
 800d53a:	4b21      	ldr	r3, [pc, #132]	; (800d5c0 <__swbuf_r+0x98>)
 800d53c:	429c      	cmp	r4, r3
 800d53e:	d12b      	bne.n	800d598 <__swbuf_r+0x70>
 800d540:	686c      	ldr	r4, [r5, #4]
 800d542:	69a3      	ldr	r3, [r4, #24]
 800d544:	60a3      	str	r3, [r4, #8]
 800d546:	89a3      	ldrh	r3, [r4, #12]
 800d548:	071a      	lsls	r2, r3, #28
 800d54a:	d52f      	bpl.n	800d5ac <__swbuf_r+0x84>
 800d54c:	6923      	ldr	r3, [r4, #16]
 800d54e:	b36b      	cbz	r3, 800d5ac <__swbuf_r+0x84>
 800d550:	6923      	ldr	r3, [r4, #16]
 800d552:	6820      	ldr	r0, [r4, #0]
 800d554:	1ac0      	subs	r0, r0, r3
 800d556:	6963      	ldr	r3, [r4, #20]
 800d558:	b2f6      	uxtb	r6, r6
 800d55a:	4283      	cmp	r3, r0
 800d55c:	4637      	mov	r7, r6
 800d55e:	dc04      	bgt.n	800d56a <__swbuf_r+0x42>
 800d560:	4621      	mov	r1, r4
 800d562:	4628      	mov	r0, r5
 800d564:	f000 ffa0 	bl	800e4a8 <_fflush_r>
 800d568:	bb30      	cbnz	r0, 800d5b8 <__swbuf_r+0x90>
 800d56a:	68a3      	ldr	r3, [r4, #8]
 800d56c:	3b01      	subs	r3, #1
 800d56e:	60a3      	str	r3, [r4, #8]
 800d570:	6823      	ldr	r3, [r4, #0]
 800d572:	1c5a      	adds	r2, r3, #1
 800d574:	6022      	str	r2, [r4, #0]
 800d576:	701e      	strb	r6, [r3, #0]
 800d578:	6963      	ldr	r3, [r4, #20]
 800d57a:	3001      	adds	r0, #1
 800d57c:	4283      	cmp	r3, r0
 800d57e:	d004      	beq.n	800d58a <__swbuf_r+0x62>
 800d580:	89a3      	ldrh	r3, [r4, #12]
 800d582:	07db      	lsls	r3, r3, #31
 800d584:	d506      	bpl.n	800d594 <__swbuf_r+0x6c>
 800d586:	2e0a      	cmp	r6, #10
 800d588:	d104      	bne.n	800d594 <__swbuf_r+0x6c>
 800d58a:	4621      	mov	r1, r4
 800d58c:	4628      	mov	r0, r5
 800d58e:	f000 ff8b 	bl	800e4a8 <_fflush_r>
 800d592:	b988      	cbnz	r0, 800d5b8 <__swbuf_r+0x90>
 800d594:	4638      	mov	r0, r7
 800d596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d598:	4b0a      	ldr	r3, [pc, #40]	; (800d5c4 <__swbuf_r+0x9c>)
 800d59a:	429c      	cmp	r4, r3
 800d59c:	d101      	bne.n	800d5a2 <__swbuf_r+0x7a>
 800d59e:	68ac      	ldr	r4, [r5, #8]
 800d5a0:	e7cf      	b.n	800d542 <__swbuf_r+0x1a>
 800d5a2:	4b09      	ldr	r3, [pc, #36]	; (800d5c8 <__swbuf_r+0xa0>)
 800d5a4:	429c      	cmp	r4, r3
 800d5a6:	bf08      	it	eq
 800d5a8:	68ec      	ldreq	r4, [r5, #12]
 800d5aa:	e7ca      	b.n	800d542 <__swbuf_r+0x1a>
 800d5ac:	4621      	mov	r1, r4
 800d5ae:	4628      	mov	r0, r5
 800d5b0:	f000 f80c 	bl	800d5cc <__swsetup_r>
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	d0cb      	beq.n	800d550 <__swbuf_r+0x28>
 800d5b8:	f04f 37ff 	mov.w	r7, #4294967295
 800d5bc:	e7ea      	b.n	800d594 <__swbuf_r+0x6c>
 800d5be:	bf00      	nop
 800d5c0:	08010f0c 	.word	0x08010f0c
 800d5c4:	08010f2c 	.word	0x08010f2c
 800d5c8:	08010eec 	.word	0x08010eec

0800d5cc <__swsetup_r>:
 800d5cc:	4b32      	ldr	r3, [pc, #200]	; (800d698 <__swsetup_r+0xcc>)
 800d5ce:	b570      	push	{r4, r5, r6, lr}
 800d5d0:	681d      	ldr	r5, [r3, #0]
 800d5d2:	4606      	mov	r6, r0
 800d5d4:	460c      	mov	r4, r1
 800d5d6:	b125      	cbz	r5, 800d5e2 <__swsetup_r+0x16>
 800d5d8:	69ab      	ldr	r3, [r5, #24]
 800d5da:	b913      	cbnz	r3, 800d5e2 <__swsetup_r+0x16>
 800d5dc:	4628      	mov	r0, r5
 800d5de:	f000 fff7 	bl	800e5d0 <__sinit>
 800d5e2:	4b2e      	ldr	r3, [pc, #184]	; (800d69c <__swsetup_r+0xd0>)
 800d5e4:	429c      	cmp	r4, r3
 800d5e6:	d10f      	bne.n	800d608 <__swsetup_r+0x3c>
 800d5e8:	686c      	ldr	r4, [r5, #4]
 800d5ea:	89a3      	ldrh	r3, [r4, #12]
 800d5ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5f0:	0719      	lsls	r1, r3, #28
 800d5f2:	d42c      	bmi.n	800d64e <__swsetup_r+0x82>
 800d5f4:	06dd      	lsls	r5, r3, #27
 800d5f6:	d411      	bmi.n	800d61c <__swsetup_r+0x50>
 800d5f8:	2309      	movs	r3, #9
 800d5fa:	6033      	str	r3, [r6, #0]
 800d5fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d600:	81a3      	strh	r3, [r4, #12]
 800d602:	f04f 30ff 	mov.w	r0, #4294967295
 800d606:	e03e      	b.n	800d686 <__swsetup_r+0xba>
 800d608:	4b25      	ldr	r3, [pc, #148]	; (800d6a0 <__swsetup_r+0xd4>)
 800d60a:	429c      	cmp	r4, r3
 800d60c:	d101      	bne.n	800d612 <__swsetup_r+0x46>
 800d60e:	68ac      	ldr	r4, [r5, #8]
 800d610:	e7eb      	b.n	800d5ea <__swsetup_r+0x1e>
 800d612:	4b24      	ldr	r3, [pc, #144]	; (800d6a4 <__swsetup_r+0xd8>)
 800d614:	429c      	cmp	r4, r3
 800d616:	bf08      	it	eq
 800d618:	68ec      	ldreq	r4, [r5, #12]
 800d61a:	e7e6      	b.n	800d5ea <__swsetup_r+0x1e>
 800d61c:	0758      	lsls	r0, r3, #29
 800d61e:	d512      	bpl.n	800d646 <__swsetup_r+0x7a>
 800d620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d622:	b141      	cbz	r1, 800d636 <__swsetup_r+0x6a>
 800d624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d628:	4299      	cmp	r1, r3
 800d62a:	d002      	beq.n	800d632 <__swsetup_r+0x66>
 800d62c:	4630      	mov	r0, r6
 800d62e:	f001 fc7b 	bl	800ef28 <_free_r>
 800d632:	2300      	movs	r3, #0
 800d634:	6363      	str	r3, [r4, #52]	; 0x34
 800d636:	89a3      	ldrh	r3, [r4, #12]
 800d638:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d63c:	81a3      	strh	r3, [r4, #12]
 800d63e:	2300      	movs	r3, #0
 800d640:	6063      	str	r3, [r4, #4]
 800d642:	6923      	ldr	r3, [r4, #16]
 800d644:	6023      	str	r3, [r4, #0]
 800d646:	89a3      	ldrh	r3, [r4, #12]
 800d648:	f043 0308 	orr.w	r3, r3, #8
 800d64c:	81a3      	strh	r3, [r4, #12]
 800d64e:	6923      	ldr	r3, [r4, #16]
 800d650:	b94b      	cbnz	r3, 800d666 <__swsetup_r+0x9a>
 800d652:	89a3      	ldrh	r3, [r4, #12]
 800d654:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d65c:	d003      	beq.n	800d666 <__swsetup_r+0x9a>
 800d65e:	4621      	mov	r1, r4
 800d660:	4630      	mov	r0, r6
 800d662:	f001 f87f 	bl	800e764 <__smakebuf_r>
 800d666:	89a0      	ldrh	r0, [r4, #12]
 800d668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d66c:	f010 0301 	ands.w	r3, r0, #1
 800d670:	d00a      	beq.n	800d688 <__swsetup_r+0xbc>
 800d672:	2300      	movs	r3, #0
 800d674:	60a3      	str	r3, [r4, #8]
 800d676:	6963      	ldr	r3, [r4, #20]
 800d678:	425b      	negs	r3, r3
 800d67a:	61a3      	str	r3, [r4, #24]
 800d67c:	6923      	ldr	r3, [r4, #16]
 800d67e:	b943      	cbnz	r3, 800d692 <__swsetup_r+0xc6>
 800d680:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d684:	d1ba      	bne.n	800d5fc <__swsetup_r+0x30>
 800d686:	bd70      	pop	{r4, r5, r6, pc}
 800d688:	0781      	lsls	r1, r0, #30
 800d68a:	bf58      	it	pl
 800d68c:	6963      	ldrpl	r3, [r4, #20]
 800d68e:	60a3      	str	r3, [r4, #8]
 800d690:	e7f4      	b.n	800d67c <__swsetup_r+0xb0>
 800d692:	2000      	movs	r0, #0
 800d694:	e7f7      	b.n	800d686 <__swsetup_r+0xba>
 800d696:	bf00      	nop
 800d698:	20000064 	.word	0x20000064
 800d69c:	08010f0c 	.word	0x08010f0c
 800d6a0:	08010f2c 	.word	0x08010f2c
 800d6a4:	08010eec 	.word	0x08010eec

0800d6a8 <quorem>:
 800d6a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ac:	6903      	ldr	r3, [r0, #16]
 800d6ae:	690c      	ldr	r4, [r1, #16]
 800d6b0:	42a3      	cmp	r3, r4
 800d6b2:	4607      	mov	r7, r0
 800d6b4:	f2c0 8081 	blt.w	800d7ba <quorem+0x112>
 800d6b8:	3c01      	subs	r4, #1
 800d6ba:	f101 0814 	add.w	r8, r1, #20
 800d6be:	f100 0514 	add.w	r5, r0, #20
 800d6c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6c6:	9301      	str	r3, [sp, #4]
 800d6c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d6cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d6d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d6dc:	fbb2 f6f3 	udiv	r6, r2, r3
 800d6e0:	d331      	bcc.n	800d746 <quorem+0x9e>
 800d6e2:	f04f 0e00 	mov.w	lr, #0
 800d6e6:	4640      	mov	r0, r8
 800d6e8:	46ac      	mov	ip, r5
 800d6ea:	46f2      	mov	sl, lr
 800d6ec:	f850 2b04 	ldr.w	r2, [r0], #4
 800d6f0:	b293      	uxth	r3, r2
 800d6f2:	fb06 e303 	mla	r3, r6, r3, lr
 800d6f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	ebaa 0303 	sub.w	r3, sl, r3
 800d700:	f8dc a000 	ldr.w	sl, [ip]
 800d704:	0c12      	lsrs	r2, r2, #16
 800d706:	fa13 f38a 	uxtah	r3, r3, sl
 800d70a:	fb06 e202 	mla	r2, r6, r2, lr
 800d70e:	9300      	str	r3, [sp, #0]
 800d710:	9b00      	ldr	r3, [sp, #0]
 800d712:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d716:	b292      	uxth	r2, r2
 800d718:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d71c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d720:	f8bd 3000 	ldrh.w	r3, [sp]
 800d724:	4581      	cmp	r9, r0
 800d726:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d72a:	f84c 3b04 	str.w	r3, [ip], #4
 800d72e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d732:	d2db      	bcs.n	800d6ec <quorem+0x44>
 800d734:	f855 300b 	ldr.w	r3, [r5, fp]
 800d738:	b92b      	cbnz	r3, 800d746 <quorem+0x9e>
 800d73a:	9b01      	ldr	r3, [sp, #4]
 800d73c:	3b04      	subs	r3, #4
 800d73e:	429d      	cmp	r5, r3
 800d740:	461a      	mov	r2, r3
 800d742:	d32e      	bcc.n	800d7a2 <quorem+0xfa>
 800d744:	613c      	str	r4, [r7, #16]
 800d746:	4638      	mov	r0, r7
 800d748:	f001 fad6 	bl	800ecf8 <__mcmp>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	db24      	blt.n	800d79a <quorem+0xf2>
 800d750:	3601      	adds	r6, #1
 800d752:	4628      	mov	r0, r5
 800d754:	f04f 0c00 	mov.w	ip, #0
 800d758:	f858 2b04 	ldr.w	r2, [r8], #4
 800d75c:	f8d0 e000 	ldr.w	lr, [r0]
 800d760:	b293      	uxth	r3, r2
 800d762:	ebac 0303 	sub.w	r3, ip, r3
 800d766:	0c12      	lsrs	r2, r2, #16
 800d768:	fa13 f38e 	uxtah	r3, r3, lr
 800d76c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d770:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d774:	b29b      	uxth	r3, r3
 800d776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d77a:	45c1      	cmp	r9, r8
 800d77c:	f840 3b04 	str.w	r3, [r0], #4
 800d780:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d784:	d2e8      	bcs.n	800d758 <quorem+0xb0>
 800d786:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d78a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d78e:	b922      	cbnz	r2, 800d79a <quorem+0xf2>
 800d790:	3b04      	subs	r3, #4
 800d792:	429d      	cmp	r5, r3
 800d794:	461a      	mov	r2, r3
 800d796:	d30a      	bcc.n	800d7ae <quorem+0x106>
 800d798:	613c      	str	r4, [r7, #16]
 800d79a:	4630      	mov	r0, r6
 800d79c:	b003      	add	sp, #12
 800d79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7a2:	6812      	ldr	r2, [r2, #0]
 800d7a4:	3b04      	subs	r3, #4
 800d7a6:	2a00      	cmp	r2, #0
 800d7a8:	d1cc      	bne.n	800d744 <quorem+0x9c>
 800d7aa:	3c01      	subs	r4, #1
 800d7ac:	e7c7      	b.n	800d73e <quorem+0x96>
 800d7ae:	6812      	ldr	r2, [r2, #0]
 800d7b0:	3b04      	subs	r3, #4
 800d7b2:	2a00      	cmp	r2, #0
 800d7b4:	d1f0      	bne.n	800d798 <quorem+0xf0>
 800d7b6:	3c01      	subs	r4, #1
 800d7b8:	e7eb      	b.n	800d792 <quorem+0xea>
 800d7ba:	2000      	movs	r0, #0
 800d7bc:	e7ee      	b.n	800d79c <quorem+0xf4>
	...

0800d7c0 <_dtoa_r>:
 800d7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7c4:	ed2d 8b04 	vpush	{d8-d9}
 800d7c8:	ec57 6b10 	vmov	r6, r7, d0
 800d7cc:	b093      	sub	sp, #76	; 0x4c
 800d7ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d7d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d7d4:	9106      	str	r1, [sp, #24]
 800d7d6:	ee10 aa10 	vmov	sl, s0
 800d7da:	4604      	mov	r4, r0
 800d7dc:	9209      	str	r2, [sp, #36]	; 0x24
 800d7de:	930c      	str	r3, [sp, #48]	; 0x30
 800d7e0:	46bb      	mov	fp, r7
 800d7e2:	b975      	cbnz	r5, 800d802 <_dtoa_r+0x42>
 800d7e4:	2010      	movs	r0, #16
 800d7e6:	f000 fffd 	bl	800e7e4 <malloc>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	6260      	str	r0, [r4, #36]	; 0x24
 800d7ee:	b920      	cbnz	r0, 800d7fa <_dtoa_r+0x3a>
 800d7f0:	4ba7      	ldr	r3, [pc, #668]	; (800da90 <_dtoa_r+0x2d0>)
 800d7f2:	21ea      	movs	r1, #234	; 0xea
 800d7f4:	48a7      	ldr	r0, [pc, #668]	; (800da94 <_dtoa_r+0x2d4>)
 800d7f6:	f001 fe7f 	bl	800f4f8 <__assert_func>
 800d7fa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d7fe:	6005      	str	r5, [r0, #0]
 800d800:	60c5      	str	r5, [r0, #12]
 800d802:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d804:	6819      	ldr	r1, [r3, #0]
 800d806:	b151      	cbz	r1, 800d81e <_dtoa_r+0x5e>
 800d808:	685a      	ldr	r2, [r3, #4]
 800d80a:	604a      	str	r2, [r1, #4]
 800d80c:	2301      	movs	r3, #1
 800d80e:	4093      	lsls	r3, r2
 800d810:	608b      	str	r3, [r1, #8]
 800d812:	4620      	mov	r0, r4
 800d814:	f001 f82e 	bl	800e874 <_Bfree>
 800d818:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d81a:	2200      	movs	r2, #0
 800d81c:	601a      	str	r2, [r3, #0]
 800d81e:	1e3b      	subs	r3, r7, #0
 800d820:	bfaa      	itet	ge
 800d822:	2300      	movge	r3, #0
 800d824:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d828:	f8c8 3000 	strge.w	r3, [r8]
 800d82c:	4b9a      	ldr	r3, [pc, #616]	; (800da98 <_dtoa_r+0x2d8>)
 800d82e:	bfbc      	itt	lt
 800d830:	2201      	movlt	r2, #1
 800d832:	f8c8 2000 	strlt.w	r2, [r8]
 800d836:	ea33 030b 	bics.w	r3, r3, fp
 800d83a:	d11b      	bne.n	800d874 <_dtoa_r+0xb4>
 800d83c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d83e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d842:	6013      	str	r3, [r2, #0]
 800d844:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d848:	4333      	orrs	r3, r6
 800d84a:	f000 8592 	beq.w	800e372 <_dtoa_r+0xbb2>
 800d84e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d850:	b963      	cbnz	r3, 800d86c <_dtoa_r+0xac>
 800d852:	4b92      	ldr	r3, [pc, #584]	; (800da9c <_dtoa_r+0x2dc>)
 800d854:	e022      	b.n	800d89c <_dtoa_r+0xdc>
 800d856:	4b92      	ldr	r3, [pc, #584]	; (800daa0 <_dtoa_r+0x2e0>)
 800d858:	9301      	str	r3, [sp, #4]
 800d85a:	3308      	adds	r3, #8
 800d85c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d85e:	6013      	str	r3, [r2, #0]
 800d860:	9801      	ldr	r0, [sp, #4]
 800d862:	b013      	add	sp, #76	; 0x4c
 800d864:	ecbd 8b04 	vpop	{d8-d9}
 800d868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d86c:	4b8b      	ldr	r3, [pc, #556]	; (800da9c <_dtoa_r+0x2dc>)
 800d86e:	9301      	str	r3, [sp, #4]
 800d870:	3303      	adds	r3, #3
 800d872:	e7f3      	b.n	800d85c <_dtoa_r+0x9c>
 800d874:	2200      	movs	r2, #0
 800d876:	2300      	movs	r3, #0
 800d878:	4650      	mov	r0, sl
 800d87a:	4659      	mov	r1, fp
 800d87c:	f7f3 f90c 	bl	8000a98 <__aeabi_dcmpeq>
 800d880:	ec4b ab19 	vmov	d9, sl, fp
 800d884:	4680      	mov	r8, r0
 800d886:	b158      	cbz	r0, 800d8a0 <_dtoa_r+0xe0>
 800d888:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d88a:	2301      	movs	r3, #1
 800d88c:	6013      	str	r3, [r2, #0]
 800d88e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d890:	2b00      	cmp	r3, #0
 800d892:	f000 856b 	beq.w	800e36c <_dtoa_r+0xbac>
 800d896:	4883      	ldr	r0, [pc, #524]	; (800daa4 <_dtoa_r+0x2e4>)
 800d898:	6018      	str	r0, [r3, #0]
 800d89a:	1e43      	subs	r3, r0, #1
 800d89c:	9301      	str	r3, [sp, #4]
 800d89e:	e7df      	b.n	800d860 <_dtoa_r+0xa0>
 800d8a0:	ec4b ab10 	vmov	d0, sl, fp
 800d8a4:	aa10      	add	r2, sp, #64	; 0x40
 800d8a6:	a911      	add	r1, sp, #68	; 0x44
 800d8a8:	4620      	mov	r0, r4
 800d8aa:	f001 facb 	bl	800ee44 <__d2b>
 800d8ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d8b2:	ee08 0a10 	vmov	s16, r0
 800d8b6:	2d00      	cmp	r5, #0
 800d8b8:	f000 8084 	beq.w	800d9c4 <_dtoa_r+0x204>
 800d8bc:	ee19 3a90 	vmov	r3, s19
 800d8c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d8c8:	4656      	mov	r6, sl
 800d8ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d8ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d8d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d8d6:	4b74      	ldr	r3, [pc, #464]	; (800daa8 <_dtoa_r+0x2e8>)
 800d8d8:	2200      	movs	r2, #0
 800d8da:	4630      	mov	r0, r6
 800d8dc:	4639      	mov	r1, r7
 800d8de:	f7f2 fcbb 	bl	8000258 <__aeabi_dsub>
 800d8e2:	a365      	add	r3, pc, #404	; (adr r3, 800da78 <_dtoa_r+0x2b8>)
 800d8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e8:	f7f2 fe6e 	bl	80005c8 <__aeabi_dmul>
 800d8ec:	a364      	add	r3, pc, #400	; (adr r3, 800da80 <_dtoa_r+0x2c0>)
 800d8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f2:	f7f2 fcb3 	bl	800025c <__adddf3>
 800d8f6:	4606      	mov	r6, r0
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	460f      	mov	r7, r1
 800d8fc:	f7f2 fdfa 	bl	80004f4 <__aeabi_i2d>
 800d900:	a361      	add	r3, pc, #388	; (adr r3, 800da88 <_dtoa_r+0x2c8>)
 800d902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d906:	f7f2 fe5f 	bl	80005c8 <__aeabi_dmul>
 800d90a:	4602      	mov	r2, r0
 800d90c:	460b      	mov	r3, r1
 800d90e:	4630      	mov	r0, r6
 800d910:	4639      	mov	r1, r7
 800d912:	f7f2 fca3 	bl	800025c <__adddf3>
 800d916:	4606      	mov	r6, r0
 800d918:	460f      	mov	r7, r1
 800d91a:	f7f3 f905 	bl	8000b28 <__aeabi_d2iz>
 800d91e:	2200      	movs	r2, #0
 800d920:	9000      	str	r0, [sp, #0]
 800d922:	2300      	movs	r3, #0
 800d924:	4630      	mov	r0, r6
 800d926:	4639      	mov	r1, r7
 800d928:	f7f3 f8c0 	bl	8000aac <__aeabi_dcmplt>
 800d92c:	b150      	cbz	r0, 800d944 <_dtoa_r+0x184>
 800d92e:	9800      	ldr	r0, [sp, #0]
 800d930:	f7f2 fde0 	bl	80004f4 <__aeabi_i2d>
 800d934:	4632      	mov	r2, r6
 800d936:	463b      	mov	r3, r7
 800d938:	f7f3 f8ae 	bl	8000a98 <__aeabi_dcmpeq>
 800d93c:	b910      	cbnz	r0, 800d944 <_dtoa_r+0x184>
 800d93e:	9b00      	ldr	r3, [sp, #0]
 800d940:	3b01      	subs	r3, #1
 800d942:	9300      	str	r3, [sp, #0]
 800d944:	9b00      	ldr	r3, [sp, #0]
 800d946:	2b16      	cmp	r3, #22
 800d948:	d85a      	bhi.n	800da00 <_dtoa_r+0x240>
 800d94a:	9a00      	ldr	r2, [sp, #0]
 800d94c:	4b57      	ldr	r3, [pc, #348]	; (800daac <_dtoa_r+0x2ec>)
 800d94e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d956:	ec51 0b19 	vmov	r0, r1, d9
 800d95a:	f7f3 f8a7 	bl	8000aac <__aeabi_dcmplt>
 800d95e:	2800      	cmp	r0, #0
 800d960:	d050      	beq.n	800da04 <_dtoa_r+0x244>
 800d962:	9b00      	ldr	r3, [sp, #0]
 800d964:	3b01      	subs	r3, #1
 800d966:	9300      	str	r3, [sp, #0]
 800d968:	2300      	movs	r3, #0
 800d96a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d96c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d96e:	1b5d      	subs	r5, r3, r5
 800d970:	1e6b      	subs	r3, r5, #1
 800d972:	9305      	str	r3, [sp, #20]
 800d974:	bf45      	ittet	mi
 800d976:	f1c5 0301 	rsbmi	r3, r5, #1
 800d97a:	9304      	strmi	r3, [sp, #16]
 800d97c:	2300      	movpl	r3, #0
 800d97e:	2300      	movmi	r3, #0
 800d980:	bf4c      	ite	mi
 800d982:	9305      	strmi	r3, [sp, #20]
 800d984:	9304      	strpl	r3, [sp, #16]
 800d986:	9b00      	ldr	r3, [sp, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	db3d      	blt.n	800da08 <_dtoa_r+0x248>
 800d98c:	9b05      	ldr	r3, [sp, #20]
 800d98e:	9a00      	ldr	r2, [sp, #0]
 800d990:	920a      	str	r2, [sp, #40]	; 0x28
 800d992:	4413      	add	r3, r2
 800d994:	9305      	str	r3, [sp, #20]
 800d996:	2300      	movs	r3, #0
 800d998:	9307      	str	r3, [sp, #28]
 800d99a:	9b06      	ldr	r3, [sp, #24]
 800d99c:	2b09      	cmp	r3, #9
 800d99e:	f200 8089 	bhi.w	800dab4 <_dtoa_r+0x2f4>
 800d9a2:	2b05      	cmp	r3, #5
 800d9a4:	bfc4      	itt	gt
 800d9a6:	3b04      	subgt	r3, #4
 800d9a8:	9306      	strgt	r3, [sp, #24]
 800d9aa:	9b06      	ldr	r3, [sp, #24]
 800d9ac:	f1a3 0302 	sub.w	r3, r3, #2
 800d9b0:	bfcc      	ite	gt
 800d9b2:	2500      	movgt	r5, #0
 800d9b4:	2501      	movle	r5, #1
 800d9b6:	2b03      	cmp	r3, #3
 800d9b8:	f200 8087 	bhi.w	800daca <_dtoa_r+0x30a>
 800d9bc:	e8df f003 	tbb	[pc, r3]
 800d9c0:	59383a2d 	.word	0x59383a2d
 800d9c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d9c8:	441d      	add	r5, r3
 800d9ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d9ce:	2b20      	cmp	r3, #32
 800d9d0:	bfc1      	itttt	gt
 800d9d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d9d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d9da:	fa0b f303 	lslgt.w	r3, fp, r3
 800d9de:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d9e2:	bfda      	itte	le
 800d9e4:	f1c3 0320 	rsble	r3, r3, #32
 800d9e8:	fa06 f003 	lslle.w	r0, r6, r3
 800d9ec:	4318      	orrgt	r0, r3
 800d9ee:	f7f2 fd71 	bl	80004d4 <__aeabi_ui2d>
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	4606      	mov	r6, r0
 800d9f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d9fa:	3d01      	subs	r5, #1
 800d9fc:	930e      	str	r3, [sp, #56]	; 0x38
 800d9fe:	e76a      	b.n	800d8d6 <_dtoa_r+0x116>
 800da00:	2301      	movs	r3, #1
 800da02:	e7b2      	b.n	800d96a <_dtoa_r+0x1aa>
 800da04:	900b      	str	r0, [sp, #44]	; 0x2c
 800da06:	e7b1      	b.n	800d96c <_dtoa_r+0x1ac>
 800da08:	9b04      	ldr	r3, [sp, #16]
 800da0a:	9a00      	ldr	r2, [sp, #0]
 800da0c:	1a9b      	subs	r3, r3, r2
 800da0e:	9304      	str	r3, [sp, #16]
 800da10:	4253      	negs	r3, r2
 800da12:	9307      	str	r3, [sp, #28]
 800da14:	2300      	movs	r3, #0
 800da16:	930a      	str	r3, [sp, #40]	; 0x28
 800da18:	e7bf      	b.n	800d99a <_dtoa_r+0x1da>
 800da1a:	2300      	movs	r3, #0
 800da1c:	9308      	str	r3, [sp, #32]
 800da1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da20:	2b00      	cmp	r3, #0
 800da22:	dc55      	bgt.n	800dad0 <_dtoa_r+0x310>
 800da24:	2301      	movs	r3, #1
 800da26:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800da2a:	461a      	mov	r2, r3
 800da2c:	9209      	str	r2, [sp, #36]	; 0x24
 800da2e:	e00c      	b.n	800da4a <_dtoa_r+0x28a>
 800da30:	2301      	movs	r3, #1
 800da32:	e7f3      	b.n	800da1c <_dtoa_r+0x25c>
 800da34:	2300      	movs	r3, #0
 800da36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da38:	9308      	str	r3, [sp, #32]
 800da3a:	9b00      	ldr	r3, [sp, #0]
 800da3c:	4413      	add	r3, r2
 800da3e:	9302      	str	r3, [sp, #8]
 800da40:	3301      	adds	r3, #1
 800da42:	2b01      	cmp	r3, #1
 800da44:	9303      	str	r3, [sp, #12]
 800da46:	bfb8      	it	lt
 800da48:	2301      	movlt	r3, #1
 800da4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800da4c:	2200      	movs	r2, #0
 800da4e:	6042      	str	r2, [r0, #4]
 800da50:	2204      	movs	r2, #4
 800da52:	f102 0614 	add.w	r6, r2, #20
 800da56:	429e      	cmp	r6, r3
 800da58:	6841      	ldr	r1, [r0, #4]
 800da5a:	d93d      	bls.n	800dad8 <_dtoa_r+0x318>
 800da5c:	4620      	mov	r0, r4
 800da5e:	f000 fec9 	bl	800e7f4 <_Balloc>
 800da62:	9001      	str	r0, [sp, #4]
 800da64:	2800      	cmp	r0, #0
 800da66:	d13b      	bne.n	800dae0 <_dtoa_r+0x320>
 800da68:	4b11      	ldr	r3, [pc, #68]	; (800dab0 <_dtoa_r+0x2f0>)
 800da6a:	4602      	mov	r2, r0
 800da6c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800da70:	e6c0      	b.n	800d7f4 <_dtoa_r+0x34>
 800da72:	2301      	movs	r3, #1
 800da74:	e7df      	b.n	800da36 <_dtoa_r+0x276>
 800da76:	bf00      	nop
 800da78:	636f4361 	.word	0x636f4361
 800da7c:	3fd287a7 	.word	0x3fd287a7
 800da80:	8b60c8b3 	.word	0x8b60c8b3
 800da84:	3fc68a28 	.word	0x3fc68a28
 800da88:	509f79fb 	.word	0x509f79fb
 800da8c:	3fd34413 	.word	0x3fd34413
 800da90:	08010e69 	.word	0x08010e69
 800da94:	08010e80 	.word	0x08010e80
 800da98:	7ff00000 	.word	0x7ff00000
 800da9c:	08010e65 	.word	0x08010e65
 800daa0:	08010e5c 	.word	0x08010e5c
 800daa4:	08010e39 	.word	0x08010e39
 800daa8:	3ff80000 	.word	0x3ff80000
 800daac:	08010fd0 	.word	0x08010fd0
 800dab0:	08010edb 	.word	0x08010edb
 800dab4:	2501      	movs	r5, #1
 800dab6:	2300      	movs	r3, #0
 800dab8:	9306      	str	r3, [sp, #24]
 800daba:	9508      	str	r5, [sp, #32]
 800dabc:	f04f 33ff 	mov.w	r3, #4294967295
 800dac0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dac4:	2200      	movs	r2, #0
 800dac6:	2312      	movs	r3, #18
 800dac8:	e7b0      	b.n	800da2c <_dtoa_r+0x26c>
 800daca:	2301      	movs	r3, #1
 800dacc:	9308      	str	r3, [sp, #32]
 800dace:	e7f5      	b.n	800dabc <_dtoa_r+0x2fc>
 800dad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dad2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800dad6:	e7b8      	b.n	800da4a <_dtoa_r+0x28a>
 800dad8:	3101      	adds	r1, #1
 800dada:	6041      	str	r1, [r0, #4]
 800dadc:	0052      	lsls	r2, r2, #1
 800dade:	e7b8      	b.n	800da52 <_dtoa_r+0x292>
 800dae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dae2:	9a01      	ldr	r2, [sp, #4]
 800dae4:	601a      	str	r2, [r3, #0]
 800dae6:	9b03      	ldr	r3, [sp, #12]
 800dae8:	2b0e      	cmp	r3, #14
 800daea:	f200 809d 	bhi.w	800dc28 <_dtoa_r+0x468>
 800daee:	2d00      	cmp	r5, #0
 800daf0:	f000 809a 	beq.w	800dc28 <_dtoa_r+0x468>
 800daf4:	9b00      	ldr	r3, [sp, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	dd32      	ble.n	800db60 <_dtoa_r+0x3a0>
 800dafa:	4ab7      	ldr	r2, [pc, #732]	; (800ddd8 <_dtoa_r+0x618>)
 800dafc:	f003 030f 	and.w	r3, r3, #15
 800db00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800db04:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db08:	9b00      	ldr	r3, [sp, #0]
 800db0a:	05d8      	lsls	r0, r3, #23
 800db0c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800db10:	d516      	bpl.n	800db40 <_dtoa_r+0x380>
 800db12:	4bb2      	ldr	r3, [pc, #712]	; (800dddc <_dtoa_r+0x61c>)
 800db14:	ec51 0b19 	vmov	r0, r1, d9
 800db18:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800db1c:	f7f2 fe7e 	bl	800081c <__aeabi_ddiv>
 800db20:	f007 070f 	and.w	r7, r7, #15
 800db24:	4682      	mov	sl, r0
 800db26:	468b      	mov	fp, r1
 800db28:	2503      	movs	r5, #3
 800db2a:	4eac      	ldr	r6, [pc, #688]	; (800dddc <_dtoa_r+0x61c>)
 800db2c:	b957      	cbnz	r7, 800db44 <_dtoa_r+0x384>
 800db2e:	4642      	mov	r2, r8
 800db30:	464b      	mov	r3, r9
 800db32:	4650      	mov	r0, sl
 800db34:	4659      	mov	r1, fp
 800db36:	f7f2 fe71 	bl	800081c <__aeabi_ddiv>
 800db3a:	4682      	mov	sl, r0
 800db3c:	468b      	mov	fp, r1
 800db3e:	e028      	b.n	800db92 <_dtoa_r+0x3d2>
 800db40:	2502      	movs	r5, #2
 800db42:	e7f2      	b.n	800db2a <_dtoa_r+0x36a>
 800db44:	07f9      	lsls	r1, r7, #31
 800db46:	d508      	bpl.n	800db5a <_dtoa_r+0x39a>
 800db48:	4640      	mov	r0, r8
 800db4a:	4649      	mov	r1, r9
 800db4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800db50:	f7f2 fd3a 	bl	80005c8 <__aeabi_dmul>
 800db54:	3501      	adds	r5, #1
 800db56:	4680      	mov	r8, r0
 800db58:	4689      	mov	r9, r1
 800db5a:	107f      	asrs	r7, r7, #1
 800db5c:	3608      	adds	r6, #8
 800db5e:	e7e5      	b.n	800db2c <_dtoa_r+0x36c>
 800db60:	f000 809b 	beq.w	800dc9a <_dtoa_r+0x4da>
 800db64:	9b00      	ldr	r3, [sp, #0]
 800db66:	4f9d      	ldr	r7, [pc, #628]	; (800dddc <_dtoa_r+0x61c>)
 800db68:	425e      	negs	r6, r3
 800db6a:	4b9b      	ldr	r3, [pc, #620]	; (800ddd8 <_dtoa_r+0x618>)
 800db6c:	f006 020f 	and.w	r2, r6, #15
 800db70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db78:	ec51 0b19 	vmov	r0, r1, d9
 800db7c:	f7f2 fd24 	bl	80005c8 <__aeabi_dmul>
 800db80:	1136      	asrs	r6, r6, #4
 800db82:	4682      	mov	sl, r0
 800db84:	468b      	mov	fp, r1
 800db86:	2300      	movs	r3, #0
 800db88:	2502      	movs	r5, #2
 800db8a:	2e00      	cmp	r6, #0
 800db8c:	d17a      	bne.n	800dc84 <_dtoa_r+0x4c4>
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d1d3      	bne.n	800db3a <_dtoa_r+0x37a>
 800db92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db94:	2b00      	cmp	r3, #0
 800db96:	f000 8082 	beq.w	800dc9e <_dtoa_r+0x4de>
 800db9a:	4b91      	ldr	r3, [pc, #580]	; (800dde0 <_dtoa_r+0x620>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	4650      	mov	r0, sl
 800dba0:	4659      	mov	r1, fp
 800dba2:	f7f2 ff83 	bl	8000aac <__aeabi_dcmplt>
 800dba6:	2800      	cmp	r0, #0
 800dba8:	d079      	beq.n	800dc9e <_dtoa_r+0x4de>
 800dbaa:	9b03      	ldr	r3, [sp, #12]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d076      	beq.n	800dc9e <_dtoa_r+0x4de>
 800dbb0:	9b02      	ldr	r3, [sp, #8]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	dd36      	ble.n	800dc24 <_dtoa_r+0x464>
 800dbb6:	9b00      	ldr	r3, [sp, #0]
 800dbb8:	4650      	mov	r0, sl
 800dbba:	4659      	mov	r1, fp
 800dbbc:	1e5f      	subs	r7, r3, #1
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	4b88      	ldr	r3, [pc, #544]	; (800dde4 <_dtoa_r+0x624>)
 800dbc2:	f7f2 fd01 	bl	80005c8 <__aeabi_dmul>
 800dbc6:	9e02      	ldr	r6, [sp, #8]
 800dbc8:	4682      	mov	sl, r0
 800dbca:	468b      	mov	fp, r1
 800dbcc:	3501      	adds	r5, #1
 800dbce:	4628      	mov	r0, r5
 800dbd0:	f7f2 fc90 	bl	80004f4 <__aeabi_i2d>
 800dbd4:	4652      	mov	r2, sl
 800dbd6:	465b      	mov	r3, fp
 800dbd8:	f7f2 fcf6 	bl	80005c8 <__aeabi_dmul>
 800dbdc:	4b82      	ldr	r3, [pc, #520]	; (800dde8 <_dtoa_r+0x628>)
 800dbde:	2200      	movs	r2, #0
 800dbe0:	f7f2 fb3c 	bl	800025c <__adddf3>
 800dbe4:	46d0      	mov	r8, sl
 800dbe6:	46d9      	mov	r9, fp
 800dbe8:	4682      	mov	sl, r0
 800dbea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800dbee:	2e00      	cmp	r6, #0
 800dbf0:	d158      	bne.n	800dca4 <_dtoa_r+0x4e4>
 800dbf2:	4b7e      	ldr	r3, [pc, #504]	; (800ddec <_dtoa_r+0x62c>)
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	4640      	mov	r0, r8
 800dbf8:	4649      	mov	r1, r9
 800dbfa:	f7f2 fb2d 	bl	8000258 <__aeabi_dsub>
 800dbfe:	4652      	mov	r2, sl
 800dc00:	465b      	mov	r3, fp
 800dc02:	4680      	mov	r8, r0
 800dc04:	4689      	mov	r9, r1
 800dc06:	f7f2 ff6f 	bl	8000ae8 <__aeabi_dcmpgt>
 800dc0a:	2800      	cmp	r0, #0
 800dc0c:	f040 8295 	bne.w	800e13a <_dtoa_r+0x97a>
 800dc10:	4652      	mov	r2, sl
 800dc12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800dc16:	4640      	mov	r0, r8
 800dc18:	4649      	mov	r1, r9
 800dc1a:	f7f2 ff47 	bl	8000aac <__aeabi_dcmplt>
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	f040 8289 	bne.w	800e136 <_dtoa_r+0x976>
 800dc24:	ec5b ab19 	vmov	sl, fp, d9
 800dc28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	f2c0 8148 	blt.w	800dec0 <_dtoa_r+0x700>
 800dc30:	9a00      	ldr	r2, [sp, #0]
 800dc32:	2a0e      	cmp	r2, #14
 800dc34:	f300 8144 	bgt.w	800dec0 <_dtoa_r+0x700>
 800dc38:	4b67      	ldr	r3, [pc, #412]	; (800ddd8 <_dtoa_r+0x618>)
 800dc3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	f280 80d5 	bge.w	800ddf4 <_dtoa_r+0x634>
 800dc4a:	9b03      	ldr	r3, [sp, #12]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	f300 80d1 	bgt.w	800ddf4 <_dtoa_r+0x634>
 800dc52:	f040 826f 	bne.w	800e134 <_dtoa_r+0x974>
 800dc56:	4b65      	ldr	r3, [pc, #404]	; (800ddec <_dtoa_r+0x62c>)
 800dc58:	2200      	movs	r2, #0
 800dc5a:	4640      	mov	r0, r8
 800dc5c:	4649      	mov	r1, r9
 800dc5e:	f7f2 fcb3 	bl	80005c8 <__aeabi_dmul>
 800dc62:	4652      	mov	r2, sl
 800dc64:	465b      	mov	r3, fp
 800dc66:	f7f2 ff35 	bl	8000ad4 <__aeabi_dcmpge>
 800dc6a:	9e03      	ldr	r6, [sp, #12]
 800dc6c:	4637      	mov	r7, r6
 800dc6e:	2800      	cmp	r0, #0
 800dc70:	f040 8245 	bne.w	800e0fe <_dtoa_r+0x93e>
 800dc74:	9d01      	ldr	r5, [sp, #4]
 800dc76:	2331      	movs	r3, #49	; 0x31
 800dc78:	f805 3b01 	strb.w	r3, [r5], #1
 800dc7c:	9b00      	ldr	r3, [sp, #0]
 800dc7e:	3301      	adds	r3, #1
 800dc80:	9300      	str	r3, [sp, #0]
 800dc82:	e240      	b.n	800e106 <_dtoa_r+0x946>
 800dc84:	07f2      	lsls	r2, r6, #31
 800dc86:	d505      	bpl.n	800dc94 <_dtoa_r+0x4d4>
 800dc88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc8c:	f7f2 fc9c 	bl	80005c8 <__aeabi_dmul>
 800dc90:	3501      	adds	r5, #1
 800dc92:	2301      	movs	r3, #1
 800dc94:	1076      	asrs	r6, r6, #1
 800dc96:	3708      	adds	r7, #8
 800dc98:	e777      	b.n	800db8a <_dtoa_r+0x3ca>
 800dc9a:	2502      	movs	r5, #2
 800dc9c:	e779      	b.n	800db92 <_dtoa_r+0x3d2>
 800dc9e:	9f00      	ldr	r7, [sp, #0]
 800dca0:	9e03      	ldr	r6, [sp, #12]
 800dca2:	e794      	b.n	800dbce <_dtoa_r+0x40e>
 800dca4:	9901      	ldr	r1, [sp, #4]
 800dca6:	4b4c      	ldr	r3, [pc, #304]	; (800ddd8 <_dtoa_r+0x618>)
 800dca8:	4431      	add	r1, r6
 800dcaa:	910d      	str	r1, [sp, #52]	; 0x34
 800dcac:	9908      	ldr	r1, [sp, #32]
 800dcae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dcb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dcb6:	2900      	cmp	r1, #0
 800dcb8:	d043      	beq.n	800dd42 <_dtoa_r+0x582>
 800dcba:	494d      	ldr	r1, [pc, #308]	; (800ddf0 <_dtoa_r+0x630>)
 800dcbc:	2000      	movs	r0, #0
 800dcbe:	f7f2 fdad 	bl	800081c <__aeabi_ddiv>
 800dcc2:	4652      	mov	r2, sl
 800dcc4:	465b      	mov	r3, fp
 800dcc6:	f7f2 fac7 	bl	8000258 <__aeabi_dsub>
 800dcca:	9d01      	ldr	r5, [sp, #4]
 800dccc:	4682      	mov	sl, r0
 800dcce:	468b      	mov	fp, r1
 800dcd0:	4649      	mov	r1, r9
 800dcd2:	4640      	mov	r0, r8
 800dcd4:	f7f2 ff28 	bl	8000b28 <__aeabi_d2iz>
 800dcd8:	4606      	mov	r6, r0
 800dcda:	f7f2 fc0b 	bl	80004f4 <__aeabi_i2d>
 800dcde:	4602      	mov	r2, r0
 800dce0:	460b      	mov	r3, r1
 800dce2:	4640      	mov	r0, r8
 800dce4:	4649      	mov	r1, r9
 800dce6:	f7f2 fab7 	bl	8000258 <__aeabi_dsub>
 800dcea:	3630      	adds	r6, #48	; 0x30
 800dcec:	f805 6b01 	strb.w	r6, [r5], #1
 800dcf0:	4652      	mov	r2, sl
 800dcf2:	465b      	mov	r3, fp
 800dcf4:	4680      	mov	r8, r0
 800dcf6:	4689      	mov	r9, r1
 800dcf8:	f7f2 fed8 	bl	8000aac <__aeabi_dcmplt>
 800dcfc:	2800      	cmp	r0, #0
 800dcfe:	d163      	bne.n	800ddc8 <_dtoa_r+0x608>
 800dd00:	4642      	mov	r2, r8
 800dd02:	464b      	mov	r3, r9
 800dd04:	4936      	ldr	r1, [pc, #216]	; (800dde0 <_dtoa_r+0x620>)
 800dd06:	2000      	movs	r0, #0
 800dd08:	f7f2 faa6 	bl	8000258 <__aeabi_dsub>
 800dd0c:	4652      	mov	r2, sl
 800dd0e:	465b      	mov	r3, fp
 800dd10:	f7f2 fecc 	bl	8000aac <__aeabi_dcmplt>
 800dd14:	2800      	cmp	r0, #0
 800dd16:	f040 80b5 	bne.w	800de84 <_dtoa_r+0x6c4>
 800dd1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd1c:	429d      	cmp	r5, r3
 800dd1e:	d081      	beq.n	800dc24 <_dtoa_r+0x464>
 800dd20:	4b30      	ldr	r3, [pc, #192]	; (800dde4 <_dtoa_r+0x624>)
 800dd22:	2200      	movs	r2, #0
 800dd24:	4650      	mov	r0, sl
 800dd26:	4659      	mov	r1, fp
 800dd28:	f7f2 fc4e 	bl	80005c8 <__aeabi_dmul>
 800dd2c:	4b2d      	ldr	r3, [pc, #180]	; (800dde4 <_dtoa_r+0x624>)
 800dd2e:	4682      	mov	sl, r0
 800dd30:	468b      	mov	fp, r1
 800dd32:	4640      	mov	r0, r8
 800dd34:	4649      	mov	r1, r9
 800dd36:	2200      	movs	r2, #0
 800dd38:	f7f2 fc46 	bl	80005c8 <__aeabi_dmul>
 800dd3c:	4680      	mov	r8, r0
 800dd3e:	4689      	mov	r9, r1
 800dd40:	e7c6      	b.n	800dcd0 <_dtoa_r+0x510>
 800dd42:	4650      	mov	r0, sl
 800dd44:	4659      	mov	r1, fp
 800dd46:	f7f2 fc3f 	bl	80005c8 <__aeabi_dmul>
 800dd4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd4c:	9d01      	ldr	r5, [sp, #4]
 800dd4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd50:	4682      	mov	sl, r0
 800dd52:	468b      	mov	fp, r1
 800dd54:	4649      	mov	r1, r9
 800dd56:	4640      	mov	r0, r8
 800dd58:	f7f2 fee6 	bl	8000b28 <__aeabi_d2iz>
 800dd5c:	4606      	mov	r6, r0
 800dd5e:	f7f2 fbc9 	bl	80004f4 <__aeabi_i2d>
 800dd62:	3630      	adds	r6, #48	; 0x30
 800dd64:	4602      	mov	r2, r0
 800dd66:	460b      	mov	r3, r1
 800dd68:	4640      	mov	r0, r8
 800dd6a:	4649      	mov	r1, r9
 800dd6c:	f7f2 fa74 	bl	8000258 <__aeabi_dsub>
 800dd70:	f805 6b01 	strb.w	r6, [r5], #1
 800dd74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dd76:	429d      	cmp	r5, r3
 800dd78:	4680      	mov	r8, r0
 800dd7a:	4689      	mov	r9, r1
 800dd7c:	f04f 0200 	mov.w	r2, #0
 800dd80:	d124      	bne.n	800ddcc <_dtoa_r+0x60c>
 800dd82:	4b1b      	ldr	r3, [pc, #108]	; (800ddf0 <_dtoa_r+0x630>)
 800dd84:	4650      	mov	r0, sl
 800dd86:	4659      	mov	r1, fp
 800dd88:	f7f2 fa68 	bl	800025c <__adddf3>
 800dd8c:	4602      	mov	r2, r0
 800dd8e:	460b      	mov	r3, r1
 800dd90:	4640      	mov	r0, r8
 800dd92:	4649      	mov	r1, r9
 800dd94:	f7f2 fea8 	bl	8000ae8 <__aeabi_dcmpgt>
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	d173      	bne.n	800de84 <_dtoa_r+0x6c4>
 800dd9c:	4652      	mov	r2, sl
 800dd9e:	465b      	mov	r3, fp
 800dda0:	4913      	ldr	r1, [pc, #76]	; (800ddf0 <_dtoa_r+0x630>)
 800dda2:	2000      	movs	r0, #0
 800dda4:	f7f2 fa58 	bl	8000258 <__aeabi_dsub>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	460b      	mov	r3, r1
 800ddac:	4640      	mov	r0, r8
 800ddae:	4649      	mov	r1, r9
 800ddb0:	f7f2 fe7c 	bl	8000aac <__aeabi_dcmplt>
 800ddb4:	2800      	cmp	r0, #0
 800ddb6:	f43f af35 	beq.w	800dc24 <_dtoa_r+0x464>
 800ddba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ddbc:	1e6b      	subs	r3, r5, #1
 800ddbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800ddc0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ddc4:	2b30      	cmp	r3, #48	; 0x30
 800ddc6:	d0f8      	beq.n	800ddba <_dtoa_r+0x5fa>
 800ddc8:	9700      	str	r7, [sp, #0]
 800ddca:	e049      	b.n	800de60 <_dtoa_r+0x6a0>
 800ddcc:	4b05      	ldr	r3, [pc, #20]	; (800dde4 <_dtoa_r+0x624>)
 800ddce:	f7f2 fbfb 	bl	80005c8 <__aeabi_dmul>
 800ddd2:	4680      	mov	r8, r0
 800ddd4:	4689      	mov	r9, r1
 800ddd6:	e7bd      	b.n	800dd54 <_dtoa_r+0x594>
 800ddd8:	08010fd0 	.word	0x08010fd0
 800dddc:	08010fa8 	.word	0x08010fa8
 800dde0:	3ff00000 	.word	0x3ff00000
 800dde4:	40240000 	.word	0x40240000
 800dde8:	401c0000 	.word	0x401c0000
 800ddec:	40140000 	.word	0x40140000
 800ddf0:	3fe00000 	.word	0x3fe00000
 800ddf4:	9d01      	ldr	r5, [sp, #4]
 800ddf6:	4656      	mov	r6, sl
 800ddf8:	465f      	mov	r7, fp
 800ddfa:	4642      	mov	r2, r8
 800ddfc:	464b      	mov	r3, r9
 800ddfe:	4630      	mov	r0, r6
 800de00:	4639      	mov	r1, r7
 800de02:	f7f2 fd0b 	bl	800081c <__aeabi_ddiv>
 800de06:	f7f2 fe8f 	bl	8000b28 <__aeabi_d2iz>
 800de0a:	4682      	mov	sl, r0
 800de0c:	f7f2 fb72 	bl	80004f4 <__aeabi_i2d>
 800de10:	4642      	mov	r2, r8
 800de12:	464b      	mov	r3, r9
 800de14:	f7f2 fbd8 	bl	80005c8 <__aeabi_dmul>
 800de18:	4602      	mov	r2, r0
 800de1a:	460b      	mov	r3, r1
 800de1c:	4630      	mov	r0, r6
 800de1e:	4639      	mov	r1, r7
 800de20:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800de24:	f7f2 fa18 	bl	8000258 <__aeabi_dsub>
 800de28:	f805 6b01 	strb.w	r6, [r5], #1
 800de2c:	9e01      	ldr	r6, [sp, #4]
 800de2e:	9f03      	ldr	r7, [sp, #12]
 800de30:	1bae      	subs	r6, r5, r6
 800de32:	42b7      	cmp	r7, r6
 800de34:	4602      	mov	r2, r0
 800de36:	460b      	mov	r3, r1
 800de38:	d135      	bne.n	800dea6 <_dtoa_r+0x6e6>
 800de3a:	f7f2 fa0f 	bl	800025c <__adddf3>
 800de3e:	4642      	mov	r2, r8
 800de40:	464b      	mov	r3, r9
 800de42:	4606      	mov	r6, r0
 800de44:	460f      	mov	r7, r1
 800de46:	f7f2 fe4f 	bl	8000ae8 <__aeabi_dcmpgt>
 800de4a:	b9d0      	cbnz	r0, 800de82 <_dtoa_r+0x6c2>
 800de4c:	4642      	mov	r2, r8
 800de4e:	464b      	mov	r3, r9
 800de50:	4630      	mov	r0, r6
 800de52:	4639      	mov	r1, r7
 800de54:	f7f2 fe20 	bl	8000a98 <__aeabi_dcmpeq>
 800de58:	b110      	cbz	r0, 800de60 <_dtoa_r+0x6a0>
 800de5a:	f01a 0f01 	tst.w	sl, #1
 800de5e:	d110      	bne.n	800de82 <_dtoa_r+0x6c2>
 800de60:	4620      	mov	r0, r4
 800de62:	ee18 1a10 	vmov	r1, s16
 800de66:	f000 fd05 	bl	800e874 <_Bfree>
 800de6a:	2300      	movs	r3, #0
 800de6c:	9800      	ldr	r0, [sp, #0]
 800de6e:	702b      	strb	r3, [r5, #0]
 800de70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de72:	3001      	adds	r0, #1
 800de74:	6018      	str	r0, [r3, #0]
 800de76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de78:	2b00      	cmp	r3, #0
 800de7a:	f43f acf1 	beq.w	800d860 <_dtoa_r+0xa0>
 800de7e:	601d      	str	r5, [r3, #0]
 800de80:	e4ee      	b.n	800d860 <_dtoa_r+0xa0>
 800de82:	9f00      	ldr	r7, [sp, #0]
 800de84:	462b      	mov	r3, r5
 800de86:	461d      	mov	r5, r3
 800de88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de8c:	2a39      	cmp	r2, #57	; 0x39
 800de8e:	d106      	bne.n	800de9e <_dtoa_r+0x6de>
 800de90:	9a01      	ldr	r2, [sp, #4]
 800de92:	429a      	cmp	r2, r3
 800de94:	d1f7      	bne.n	800de86 <_dtoa_r+0x6c6>
 800de96:	9901      	ldr	r1, [sp, #4]
 800de98:	2230      	movs	r2, #48	; 0x30
 800de9a:	3701      	adds	r7, #1
 800de9c:	700a      	strb	r2, [r1, #0]
 800de9e:	781a      	ldrb	r2, [r3, #0]
 800dea0:	3201      	adds	r2, #1
 800dea2:	701a      	strb	r2, [r3, #0]
 800dea4:	e790      	b.n	800ddc8 <_dtoa_r+0x608>
 800dea6:	4ba6      	ldr	r3, [pc, #664]	; (800e140 <_dtoa_r+0x980>)
 800dea8:	2200      	movs	r2, #0
 800deaa:	f7f2 fb8d 	bl	80005c8 <__aeabi_dmul>
 800deae:	2200      	movs	r2, #0
 800deb0:	2300      	movs	r3, #0
 800deb2:	4606      	mov	r6, r0
 800deb4:	460f      	mov	r7, r1
 800deb6:	f7f2 fdef 	bl	8000a98 <__aeabi_dcmpeq>
 800deba:	2800      	cmp	r0, #0
 800debc:	d09d      	beq.n	800ddfa <_dtoa_r+0x63a>
 800debe:	e7cf      	b.n	800de60 <_dtoa_r+0x6a0>
 800dec0:	9a08      	ldr	r2, [sp, #32]
 800dec2:	2a00      	cmp	r2, #0
 800dec4:	f000 80d7 	beq.w	800e076 <_dtoa_r+0x8b6>
 800dec8:	9a06      	ldr	r2, [sp, #24]
 800deca:	2a01      	cmp	r2, #1
 800decc:	f300 80ba 	bgt.w	800e044 <_dtoa_r+0x884>
 800ded0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ded2:	2a00      	cmp	r2, #0
 800ded4:	f000 80b2 	beq.w	800e03c <_dtoa_r+0x87c>
 800ded8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dedc:	9e07      	ldr	r6, [sp, #28]
 800dede:	9d04      	ldr	r5, [sp, #16]
 800dee0:	9a04      	ldr	r2, [sp, #16]
 800dee2:	441a      	add	r2, r3
 800dee4:	9204      	str	r2, [sp, #16]
 800dee6:	9a05      	ldr	r2, [sp, #20]
 800dee8:	2101      	movs	r1, #1
 800deea:	441a      	add	r2, r3
 800deec:	4620      	mov	r0, r4
 800deee:	9205      	str	r2, [sp, #20]
 800def0:	f000 fd78 	bl	800e9e4 <__i2b>
 800def4:	4607      	mov	r7, r0
 800def6:	2d00      	cmp	r5, #0
 800def8:	dd0c      	ble.n	800df14 <_dtoa_r+0x754>
 800defa:	9b05      	ldr	r3, [sp, #20]
 800defc:	2b00      	cmp	r3, #0
 800defe:	dd09      	ble.n	800df14 <_dtoa_r+0x754>
 800df00:	42ab      	cmp	r3, r5
 800df02:	9a04      	ldr	r2, [sp, #16]
 800df04:	bfa8      	it	ge
 800df06:	462b      	movge	r3, r5
 800df08:	1ad2      	subs	r2, r2, r3
 800df0a:	9204      	str	r2, [sp, #16]
 800df0c:	9a05      	ldr	r2, [sp, #20]
 800df0e:	1aed      	subs	r5, r5, r3
 800df10:	1ad3      	subs	r3, r2, r3
 800df12:	9305      	str	r3, [sp, #20]
 800df14:	9b07      	ldr	r3, [sp, #28]
 800df16:	b31b      	cbz	r3, 800df60 <_dtoa_r+0x7a0>
 800df18:	9b08      	ldr	r3, [sp, #32]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	f000 80af 	beq.w	800e07e <_dtoa_r+0x8be>
 800df20:	2e00      	cmp	r6, #0
 800df22:	dd13      	ble.n	800df4c <_dtoa_r+0x78c>
 800df24:	4639      	mov	r1, r7
 800df26:	4632      	mov	r2, r6
 800df28:	4620      	mov	r0, r4
 800df2a:	f000 fe1b 	bl	800eb64 <__pow5mult>
 800df2e:	ee18 2a10 	vmov	r2, s16
 800df32:	4601      	mov	r1, r0
 800df34:	4607      	mov	r7, r0
 800df36:	4620      	mov	r0, r4
 800df38:	f000 fd6a 	bl	800ea10 <__multiply>
 800df3c:	ee18 1a10 	vmov	r1, s16
 800df40:	4680      	mov	r8, r0
 800df42:	4620      	mov	r0, r4
 800df44:	f000 fc96 	bl	800e874 <_Bfree>
 800df48:	ee08 8a10 	vmov	s16, r8
 800df4c:	9b07      	ldr	r3, [sp, #28]
 800df4e:	1b9a      	subs	r2, r3, r6
 800df50:	d006      	beq.n	800df60 <_dtoa_r+0x7a0>
 800df52:	ee18 1a10 	vmov	r1, s16
 800df56:	4620      	mov	r0, r4
 800df58:	f000 fe04 	bl	800eb64 <__pow5mult>
 800df5c:	ee08 0a10 	vmov	s16, r0
 800df60:	2101      	movs	r1, #1
 800df62:	4620      	mov	r0, r4
 800df64:	f000 fd3e 	bl	800e9e4 <__i2b>
 800df68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	4606      	mov	r6, r0
 800df6e:	f340 8088 	ble.w	800e082 <_dtoa_r+0x8c2>
 800df72:	461a      	mov	r2, r3
 800df74:	4601      	mov	r1, r0
 800df76:	4620      	mov	r0, r4
 800df78:	f000 fdf4 	bl	800eb64 <__pow5mult>
 800df7c:	9b06      	ldr	r3, [sp, #24]
 800df7e:	2b01      	cmp	r3, #1
 800df80:	4606      	mov	r6, r0
 800df82:	f340 8081 	ble.w	800e088 <_dtoa_r+0x8c8>
 800df86:	f04f 0800 	mov.w	r8, #0
 800df8a:	6933      	ldr	r3, [r6, #16]
 800df8c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800df90:	6918      	ldr	r0, [r3, #16]
 800df92:	f000 fcd7 	bl	800e944 <__hi0bits>
 800df96:	f1c0 0020 	rsb	r0, r0, #32
 800df9a:	9b05      	ldr	r3, [sp, #20]
 800df9c:	4418      	add	r0, r3
 800df9e:	f010 001f 	ands.w	r0, r0, #31
 800dfa2:	f000 8092 	beq.w	800e0ca <_dtoa_r+0x90a>
 800dfa6:	f1c0 0320 	rsb	r3, r0, #32
 800dfaa:	2b04      	cmp	r3, #4
 800dfac:	f340 808a 	ble.w	800e0c4 <_dtoa_r+0x904>
 800dfb0:	f1c0 001c 	rsb	r0, r0, #28
 800dfb4:	9b04      	ldr	r3, [sp, #16]
 800dfb6:	4403      	add	r3, r0
 800dfb8:	9304      	str	r3, [sp, #16]
 800dfba:	9b05      	ldr	r3, [sp, #20]
 800dfbc:	4403      	add	r3, r0
 800dfbe:	4405      	add	r5, r0
 800dfc0:	9305      	str	r3, [sp, #20]
 800dfc2:	9b04      	ldr	r3, [sp, #16]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	dd07      	ble.n	800dfd8 <_dtoa_r+0x818>
 800dfc8:	ee18 1a10 	vmov	r1, s16
 800dfcc:	461a      	mov	r2, r3
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f000 fe22 	bl	800ec18 <__lshift>
 800dfd4:	ee08 0a10 	vmov	s16, r0
 800dfd8:	9b05      	ldr	r3, [sp, #20]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	dd05      	ble.n	800dfea <_dtoa_r+0x82a>
 800dfde:	4631      	mov	r1, r6
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f000 fe18 	bl	800ec18 <__lshift>
 800dfe8:	4606      	mov	r6, r0
 800dfea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d06e      	beq.n	800e0ce <_dtoa_r+0x90e>
 800dff0:	ee18 0a10 	vmov	r0, s16
 800dff4:	4631      	mov	r1, r6
 800dff6:	f000 fe7f 	bl	800ecf8 <__mcmp>
 800dffa:	2800      	cmp	r0, #0
 800dffc:	da67      	bge.n	800e0ce <_dtoa_r+0x90e>
 800dffe:	9b00      	ldr	r3, [sp, #0]
 800e000:	3b01      	subs	r3, #1
 800e002:	ee18 1a10 	vmov	r1, s16
 800e006:	9300      	str	r3, [sp, #0]
 800e008:	220a      	movs	r2, #10
 800e00a:	2300      	movs	r3, #0
 800e00c:	4620      	mov	r0, r4
 800e00e:	f000 fc53 	bl	800e8b8 <__multadd>
 800e012:	9b08      	ldr	r3, [sp, #32]
 800e014:	ee08 0a10 	vmov	s16, r0
 800e018:	2b00      	cmp	r3, #0
 800e01a:	f000 81b1 	beq.w	800e380 <_dtoa_r+0xbc0>
 800e01e:	2300      	movs	r3, #0
 800e020:	4639      	mov	r1, r7
 800e022:	220a      	movs	r2, #10
 800e024:	4620      	mov	r0, r4
 800e026:	f000 fc47 	bl	800e8b8 <__multadd>
 800e02a:	9b02      	ldr	r3, [sp, #8]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	4607      	mov	r7, r0
 800e030:	f300 808e 	bgt.w	800e150 <_dtoa_r+0x990>
 800e034:	9b06      	ldr	r3, [sp, #24]
 800e036:	2b02      	cmp	r3, #2
 800e038:	dc51      	bgt.n	800e0de <_dtoa_r+0x91e>
 800e03a:	e089      	b.n	800e150 <_dtoa_r+0x990>
 800e03c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e03e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e042:	e74b      	b.n	800dedc <_dtoa_r+0x71c>
 800e044:	9b03      	ldr	r3, [sp, #12]
 800e046:	1e5e      	subs	r6, r3, #1
 800e048:	9b07      	ldr	r3, [sp, #28]
 800e04a:	42b3      	cmp	r3, r6
 800e04c:	bfbf      	itttt	lt
 800e04e:	9b07      	ldrlt	r3, [sp, #28]
 800e050:	9607      	strlt	r6, [sp, #28]
 800e052:	1af2      	sublt	r2, r6, r3
 800e054:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e056:	bfb6      	itet	lt
 800e058:	189b      	addlt	r3, r3, r2
 800e05a:	1b9e      	subge	r6, r3, r6
 800e05c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e05e:	9b03      	ldr	r3, [sp, #12]
 800e060:	bfb8      	it	lt
 800e062:	2600      	movlt	r6, #0
 800e064:	2b00      	cmp	r3, #0
 800e066:	bfb7      	itett	lt
 800e068:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e06c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e070:	1a9d      	sublt	r5, r3, r2
 800e072:	2300      	movlt	r3, #0
 800e074:	e734      	b.n	800dee0 <_dtoa_r+0x720>
 800e076:	9e07      	ldr	r6, [sp, #28]
 800e078:	9d04      	ldr	r5, [sp, #16]
 800e07a:	9f08      	ldr	r7, [sp, #32]
 800e07c:	e73b      	b.n	800def6 <_dtoa_r+0x736>
 800e07e:	9a07      	ldr	r2, [sp, #28]
 800e080:	e767      	b.n	800df52 <_dtoa_r+0x792>
 800e082:	9b06      	ldr	r3, [sp, #24]
 800e084:	2b01      	cmp	r3, #1
 800e086:	dc18      	bgt.n	800e0ba <_dtoa_r+0x8fa>
 800e088:	f1ba 0f00 	cmp.w	sl, #0
 800e08c:	d115      	bne.n	800e0ba <_dtoa_r+0x8fa>
 800e08e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e092:	b993      	cbnz	r3, 800e0ba <_dtoa_r+0x8fa>
 800e094:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e098:	0d1b      	lsrs	r3, r3, #20
 800e09a:	051b      	lsls	r3, r3, #20
 800e09c:	b183      	cbz	r3, 800e0c0 <_dtoa_r+0x900>
 800e09e:	9b04      	ldr	r3, [sp, #16]
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	9304      	str	r3, [sp, #16]
 800e0a4:	9b05      	ldr	r3, [sp, #20]
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	9305      	str	r3, [sp, #20]
 800e0aa:	f04f 0801 	mov.w	r8, #1
 800e0ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	f47f af6a 	bne.w	800df8a <_dtoa_r+0x7ca>
 800e0b6:	2001      	movs	r0, #1
 800e0b8:	e76f      	b.n	800df9a <_dtoa_r+0x7da>
 800e0ba:	f04f 0800 	mov.w	r8, #0
 800e0be:	e7f6      	b.n	800e0ae <_dtoa_r+0x8ee>
 800e0c0:	4698      	mov	r8, r3
 800e0c2:	e7f4      	b.n	800e0ae <_dtoa_r+0x8ee>
 800e0c4:	f43f af7d 	beq.w	800dfc2 <_dtoa_r+0x802>
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	301c      	adds	r0, #28
 800e0cc:	e772      	b.n	800dfb4 <_dtoa_r+0x7f4>
 800e0ce:	9b03      	ldr	r3, [sp, #12]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	dc37      	bgt.n	800e144 <_dtoa_r+0x984>
 800e0d4:	9b06      	ldr	r3, [sp, #24]
 800e0d6:	2b02      	cmp	r3, #2
 800e0d8:	dd34      	ble.n	800e144 <_dtoa_r+0x984>
 800e0da:	9b03      	ldr	r3, [sp, #12]
 800e0dc:	9302      	str	r3, [sp, #8]
 800e0de:	9b02      	ldr	r3, [sp, #8]
 800e0e0:	b96b      	cbnz	r3, 800e0fe <_dtoa_r+0x93e>
 800e0e2:	4631      	mov	r1, r6
 800e0e4:	2205      	movs	r2, #5
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f000 fbe6 	bl	800e8b8 <__multadd>
 800e0ec:	4601      	mov	r1, r0
 800e0ee:	4606      	mov	r6, r0
 800e0f0:	ee18 0a10 	vmov	r0, s16
 800e0f4:	f000 fe00 	bl	800ecf8 <__mcmp>
 800e0f8:	2800      	cmp	r0, #0
 800e0fa:	f73f adbb 	bgt.w	800dc74 <_dtoa_r+0x4b4>
 800e0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e100:	9d01      	ldr	r5, [sp, #4]
 800e102:	43db      	mvns	r3, r3
 800e104:	9300      	str	r3, [sp, #0]
 800e106:	f04f 0800 	mov.w	r8, #0
 800e10a:	4631      	mov	r1, r6
 800e10c:	4620      	mov	r0, r4
 800e10e:	f000 fbb1 	bl	800e874 <_Bfree>
 800e112:	2f00      	cmp	r7, #0
 800e114:	f43f aea4 	beq.w	800de60 <_dtoa_r+0x6a0>
 800e118:	f1b8 0f00 	cmp.w	r8, #0
 800e11c:	d005      	beq.n	800e12a <_dtoa_r+0x96a>
 800e11e:	45b8      	cmp	r8, r7
 800e120:	d003      	beq.n	800e12a <_dtoa_r+0x96a>
 800e122:	4641      	mov	r1, r8
 800e124:	4620      	mov	r0, r4
 800e126:	f000 fba5 	bl	800e874 <_Bfree>
 800e12a:	4639      	mov	r1, r7
 800e12c:	4620      	mov	r0, r4
 800e12e:	f000 fba1 	bl	800e874 <_Bfree>
 800e132:	e695      	b.n	800de60 <_dtoa_r+0x6a0>
 800e134:	2600      	movs	r6, #0
 800e136:	4637      	mov	r7, r6
 800e138:	e7e1      	b.n	800e0fe <_dtoa_r+0x93e>
 800e13a:	9700      	str	r7, [sp, #0]
 800e13c:	4637      	mov	r7, r6
 800e13e:	e599      	b.n	800dc74 <_dtoa_r+0x4b4>
 800e140:	40240000 	.word	0x40240000
 800e144:	9b08      	ldr	r3, [sp, #32]
 800e146:	2b00      	cmp	r3, #0
 800e148:	f000 80ca 	beq.w	800e2e0 <_dtoa_r+0xb20>
 800e14c:	9b03      	ldr	r3, [sp, #12]
 800e14e:	9302      	str	r3, [sp, #8]
 800e150:	2d00      	cmp	r5, #0
 800e152:	dd05      	ble.n	800e160 <_dtoa_r+0x9a0>
 800e154:	4639      	mov	r1, r7
 800e156:	462a      	mov	r2, r5
 800e158:	4620      	mov	r0, r4
 800e15a:	f000 fd5d 	bl	800ec18 <__lshift>
 800e15e:	4607      	mov	r7, r0
 800e160:	f1b8 0f00 	cmp.w	r8, #0
 800e164:	d05b      	beq.n	800e21e <_dtoa_r+0xa5e>
 800e166:	6879      	ldr	r1, [r7, #4]
 800e168:	4620      	mov	r0, r4
 800e16a:	f000 fb43 	bl	800e7f4 <_Balloc>
 800e16e:	4605      	mov	r5, r0
 800e170:	b928      	cbnz	r0, 800e17e <_dtoa_r+0x9be>
 800e172:	4b87      	ldr	r3, [pc, #540]	; (800e390 <_dtoa_r+0xbd0>)
 800e174:	4602      	mov	r2, r0
 800e176:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e17a:	f7ff bb3b 	b.w	800d7f4 <_dtoa_r+0x34>
 800e17e:	693a      	ldr	r2, [r7, #16]
 800e180:	3202      	adds	r2, #2
 800e182:	0092      	lsls	r2, r2, #2
 800e184:	f107 010c 	add.w	r1, r7, #12
 800e188:	300c      	adds	r0, #12
 800e18a:	f7fe fca9 	bl	800cae0 <memcpy>
 800e18e:	2201      	movs	r2, #1
 800e190:	4629      	mov	r1, r5
 800e192:	4620      	mov	r0, r4
 800e194:	f000 fd40 	bl	800ec18 <__lshift>
 800e198:	9b01      	ldr	r3, [sp, #4]
 800e19a:	f103 0901 	add.w	r9, r3, #1
 800e19e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e1a2:	4413      	add	r3, r2
 800e1a4:	9305      	str	r3, [sp, #20]
 800e1a6:	f00a 0301 	and.w	r3, sl, #1
 800e1aa:	46b8      	mov	r8, r7
 800e1ac:	9304      	str	r3, [sp, #16]
 800e1ae:	4607      	mov	r7, r0
 800e1b0:	4631      	mov	r1, r6
 800e1b2:	ee18 0a10 	vmov	r0, s16
 800e1b6:	f7ff fa77 	bl	800d6a8 <quorem>
 800e1ba:	4641      	mov	r1, r8
 800e1bc:	9002      	str	r0, [sp, #8]
 800e1be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e1c2:	ee18 0a10 	vmov	r0, s16
 800e1c6:	f000 fd97 	bl	800ecf8 <__mcmp>
 800e1ca:	463a      	mov	r2, r7
 800e1cc:	9003      	str	r0, [sp, #12]
 800e1ce:	4631      	mov	r1, r6
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	f000 fdad 	bl	800ed30 <__mdiff>
 800e1d6:	68c2      	ldr	r2, [r0, #12]
 800e1d8:	f109 3bff 	add.w	fp, r9, #4294967295
 800e1dc:	4605      	mov	r5, r0
 800e1de:	bb02      	cbnz	r2, 800e222 <_dtoa_r+0xa62>
 800e1e0:	4601      	mov	r1, r0
 800e1e2:	ee18 0a10 	vmov	r0, s16
 800e1e6:	f000 fd87 	bl	800ecf8 <__mcmp>
 800e1ea:	4602      	mov	r2, r0
 800e1ec:	4629      	mov	r1, r5
 800e1ee:	4620      	mov	r0, r4
 800e1f0:	9207      	str	r2, [sp, #28]
 800e1f2:	f000 fb3f 	bl	800e874 <_Bfree>
 800e1f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e1fa:	ea43 0102 	orr.w	r1, r3, r2
 800e1fe:	9b04      	ldr	r3, [sp, #16]
 800e200:	430b      	orrs	r3, r1
 800e202:	464d      	mov	r5, r9
 800e204:	d10f      	bne.n	800e226 <_dtoa_r+0xa66>
 800e206:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e20a:	d02a      	beq.n	800e262 <_dtoa_r+0xaa2>
 800e20c:	9b03      	ldr	r3, [sp, #12]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	dd02      	ble.n	800e218 <_dtoa_r+0xa58>
 800e212:	9b02      	ldr	r3, [sp, #8]
 800e214:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e218:	f88b a000 	strb.w	sl, [fp]
 800e21c:	e775      	b.n	800e10a <_dtoa_r+0x94a>
 800e21e:	4638      	mov	r0, r7
 800e220:	e7ba      	b.n	800e198 <_dtoa_r+0x9d8>
 800e222:	2201      	movs	r2, #1
 800e224:	e7e2      	b.n	800e1ec <_dtoa_r+0xa2c>
 800e226:	9b03      	ldr	r3, [sp, #12]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	db04      	blt.n	800e236 <_dtoa_r+0xa76>
 800e22c:	9906      	ldr	r1, [sp, #24]
 800e22e:	430b      	orrs	r3, r1
 800e230:	9904      	ldr	r1, [sp, #16]
 800e232:	430b      	orrs	r3, r1
 800e234:	d122      	bne.n	800e27c <_dtoa_r+0xabc>
 800e236:	2a00      	cmp	r2, #0
 800e238:	ddee      	ble.n	800e218 <_dtoa_r+0xa58>
 800e23a:	ee18 1a10 	vmov	r1, s16
 800e23e:	2201      	movs	r2, #1
 800e240:	4620      	mov	r0, r4
 800e242:	f000 fce9 	bl	800ec18 <__lshift>
 800e246:	4631      	mov	r1, r6
 800e248:	ee08 0a10 	vmov	s16, r0
 800e24c:	f000 fd54 	bl	800ecf8 <__mcmp>
 800e250:	2800      	cmp	r0, #0
 800e252:	dc03      	bgt.n	800e25c <_dtoa_r+0xa9c>
 800e254:	d1e0      	bne.n	800e218 <_dtoa_r+0xa58>
 800e256:	f01a 0f01 	tst.w	sl, #1
 800e25a:	d0dd      	beq.n	800e218 <_dtoa_r+0xa58>
 800e25c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e260:	d1d7      	bne.n	800e212 <_dtoa_r+0xa52>
 800e262:	2339      	movs	r3, #57	; 0x39
 800e264:	f88b 3000 	strb.w	r3, [fp]
 800e268:	462b      	mov	r3, r5
 800e26a:	461d      	mov	r5, r3
 800e26c:	3b01      	subs	r3, #1
 800e26e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e272:	2a39      	cmp	r2, #57	; 0x39
 800e274:	d071      	beq.n	800e35a <_dtoa_r+0xb9a>
 800e276:	3201      	adds	r2, #1
 800e278:	701a      	strb	r2, [r3, #0]
 800e27a:	e746      	b.n	800e10a <_dtoa_r+0x94a>
 800e27c:	2a00      	cmp	r2, #0
 800e27e:	dd07      	ble.n	800e290 <_dtoa_r+0xad0>
 800e280:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e284:	d0ed      	beq.n	800e262 <_dtoa_r+0xaa2>
 800e286:	f10a 0301 	add.w	r3, sl, #1
 800e28a:	f88b 3000 	strb.w	r3, [fp]
 800e28e:	e73c      	b.n	800e10a <_dtoa_r+0x94a>
 800e290:	9b05      	ldr	r3, [sp, #20]
 800e292:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e296:	4599      	cmp	r9, r3
 800e298:	d047      	beq.n	800e32a <_dtoa_r+0xb6a>
 800e29a:	ee18 1a10 	vmov	r1, s16
 800e29e:	2300      	movs	r3, #0
 800e2a0:	220a      	movs	r2, #10
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	f000 fb08 	bl	800e8b8 <__multadd>
 800e2a8:	45b8      	cmp	r8, r7
 800e2aa:	ee08 0a10 	vmov	s16, r0
 800e2ae:	f04f 0300 	mov.w	r3, #0
 800e2b2:	f04f 020a 	mov.w	r2, #10
 800e2b6:	4641      	mov	r1, r8
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	d106      	bne.n	800e2ca <_dtoa_r+0xb0a>
 800e2bc:	f000 fafc 	bl	800e8b8 <__multadd>
 800e2c0:	4680      	mov	r8, r0
 800e2c2:	4607      	mov	r7, r0
 800e2c4:	f109 0901 	add.w	r9, r9, #1
 800e2c8:	e772      	b.n	800e1b0 <_dtoa_r+0x9f0>
 800e2ca:	f000 faf5 	bl	800e8b8 <__multadd>
 800e2ce:	4639      	mov	r1, r7
 800e2d0:	4680      	mov	r8, r0
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	220a      	movs	r2, #10
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f000 faee 	bl	800e8b8 <__multadd>
 800e2dc:	4607      	mov	r7, r0
 800e2de:	e7f1      	b.n	800e2c4 <_dtoa_r+0xb04>
 800e2e0:	9b03      	ldr	r3, [sp, #12]
 800e2e2:	9302      	str	r3, [sp, #8]
 800e2e4:	9d01      	ldr	r5, [sp, #4]
 800e2e6:	ee18 0a10 	vmov	r0, s16
 800e2ea:	4631      	mov	r1, r6
 800e2ec:	f7ff f9dc 	bl	800d6a8 <quorem>
 800e2f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e2f4:	9b01      	ldr	r3, [sp, #4]
 800e2f6:	f805 ab01 	strb.w	sl, [r5], #1
 800e2fa:	1aea      	subs	r2, r5, r3
 800e2fc:	9b02      	ldr	r3, [sp, #8]
 800e2fe:	4293      	cmp	r3, r2
 800e300:	dd09      	ble.n	800e316 <_dtoa_r+0xb56>
 800e302:	ee18 1a10 	vmov	r1, s16
 800e306:	2300      	movs	r3, #0
 800e308:	220a      	movs	r2, #10
 800e30a:	4620      	mov	r0, r4
 800e30c:	f000 fad4 	bl	800e8b8 <__multadd>
 800e310:	ee08 0a10 	vmov	s16, r0
 800e314:	e7e7      	b.n	800e2e6 <_dtoa_r+0xb26>
 800e316:	9b02      	ldr	r3, [sp, #8]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	bfc8      	it	gt
 800e31c:	461d      	movgt	r5, r3
 800e31e:	9b01      	ldr	r3, [sp, #4]
 800e320:	bfd8      	it	le
 800e322:	2501      	movle	r5, #1
 800e324:	441d      	add	r5, r3
 800e326:	f04f 0800 	mov.w	r8, #0
 800e32a:	ee18 1a10 	vmov	r1, s16
 800e32e:	2201      	movs	r2, #1
 800e330:	4620      	mov	r0, r4
 800e332:	f000 fc71 	bl	800ec18 <__lshift>
 800e336:	4631      	mov	r1, r6
 800e338:	ee08 0a10 	vmov	s16, r0
 800e33c:	f000 fcdc 	bl	800ecf8 <__mcmp>
 800e340:	2800      	cmp	r0, #0
 800e342:	dc91      	bgt.n	800e268 <_dtoa_r+0xaa8>
 800e344:	d102      	bne.n	800e34c <_dtoa_r+0xb8c>
 800e346:	f01a 0f01 	tst.w	sl, #1
 800e34a:	d18d      	bne.n	800e268 <_dtoa_r+0xaa8>
 800e34c:	462b      	mov	r3, r5
 800e34e:	461d      	mov	r5, r3
 800e350:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e354:	2a30      	cmp	r2, #48	; 0x30
 800e356:	d0fa      	beq.n	800e34e <_dtoa_r+0xb8e>
 800e358:	e6d7      	b.n	800e10a <_dtoa_r+0x94a>
 800e35a:	9a01      	ldr	r2, [sp, #4]
 800e35c:	429a      	cmp	r2, r3
 800e35e:	d184      	bne.n	800e26a <_dtoa_r+0xaaa>
 800e360:	9b00      	ldr	r3, [sp, #0]
 800e362:	3301      	adds	r3, #1
 800e364:	9300      	str	r3, [sp, #0]
 800e366:	2331      	movs	r3, #49	; 0x31
 800e368:	7013      	strb	r3, [r2, #0]
 800e36a:	e6ce      	b.n	800e10a <_dtoa_r+0x94a>
 800e36c:	4b09      	ldr	r3, [pc, #36]	; (800e394 <_dtoa_r+0xbd4>)
 800e36e:	f7ff ba95 	b.w	800d89c <_dtoa_r+0xdc>
 800e372:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e374:	2b00      	cmp	r3, #0
 800e376:	f47f aa6e 	bne.w	800d856 <_dtoa_r+0x96>
 800e37a:	4b07      	ldr	r3, [pc, #28]	; (800e398 <_dtoa_r+0xbd8>)
 800e37c:	f7ff ba8e 	b.w	800d89c <_dtoa_r+0xdc>
 800e380:	9b02      	ldr	r3, [sp, #8]
 800e382:	2b00      	cmp	r3, #0
 800e384:	dcae      	bgt.n	800e2e4 <_dtoa_r+0xb24>
 800e386:	9b06      	ldr	r3, [sp, #24]
 800e388:	2b02      	cmp	r3, #2
 800e38a:	f73f aea8 	bgt.w	800e0de <_dtoa_r+0x91e>
 800e38e:	e7a9      	b.n	800e2e4 <_dtoa_r+0xb24>
 800e390:	08010edb 	.word	0x08010edb
 800e394:	08010e38 	.word	0x08010e38
 800e398:	08010e5c 	.word	0x08010e5c

0800e39c <__sflush_r>:
 800e39c:	898a      	ldrh	r2, [r1, #12]
 800e39e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3a2:	4605      	mov	r5, r0
 800e3a4:	0710      	lsls	r0, r2, #28
 800e3a6:	460c      	mov	r4, r1
 800e3a8:	d458      	bmi.n	800e45c <__sflush_r+0xc0>
 800e3aa:	684b      	ldr	r3, [r1, #4]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	dc05      	bgt.n	800e3bc <__sflush_r+0x20>
 800e3b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	dc02      	bgt.n	800e3bc <__sflush_r+0x20>
 800e3b6:	2000      	movs	r0, #0
 800e3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e3be:	2e00      	cmp	r6, #0
 800e3c0:	d0f9      	beq.n	800e3b6 <__sflush_r+0x1a>
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e3c8:	682f      	ldr	r7, [r5, #0]
 800e3ca:	602b      	str	r3, [r5, #0]
 800e3cc:	d032      	beq.n	800e434 <__sflush_r+0x98>
 800e3ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e3d0:	89a3      	ldrh	r3, [r4, #12]
 800e3d2:	075a      	lsls	r2, r3, #29
 800e3d4:	d505      	bpl.n	800e3e2 <__sflush_r+0x46>
 800e3d6:	6863      	ldr	r3, [r4, #4]
 800e3d8:	1ac0      	subs	r0, r0, r3
 800e3da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e3dc:	b10b      	cbz	r3, 800e3e2 <__sflush_r+0x46>
 800e3de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e3e0:	1ac0      	subs	r0, r0, r3
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e3e8:	6a21      	ldr	r1, [r4, #32]
 800e3ea:	4628      	mov	r0, r5
 800e3ec:	47b0      	blx	r6
 800e3ee:	1c43      	adds	r3, r0, #1
 800e3f0:	89a3      	ldrh	r3, [r4, #12]
 800e3f2:	d106      	bne.n	800e402 <__sflush_r+0x66>
 800e3f4:	6829      	ldr	r1, [r5, #0]
 800e3f6:	291d      	cmp	r1, #29
 800e3f8:	d82c      	bhi.n	800e454 <__sflush_r+0xb8>
 800e3fa:	4a2a      	ldr	r2, [pc, #168]	; (800e4a4 <__sflush_r+0x108>)
 800e3fc:	40ca      	lsrs	r2, r1
 800e3fe:	07d6      	lsls	r6, r2, #31
 800e400:	d528      	bpl.n	800e454 <__sflush_r+0xb8>
 800e402:	2200      	movs	r2, #0
 800e404:	6062      	str	r2, [r4, #4]
 800e406:	04d9      	lsls	r1, r3, #19
 800e408:	6922      	ldr	r2, [r4, #16]
 800e40a:	6022      	str	r2, [r4, #0]
 800e40c:	d504      	bpl.n	800e418 <__sflush_r+0x7c>
 800e40e:	1c42      	adds	r2, r0, #1
 800e410:	d101      	bne.n	800e416 <__sflush_r+0x7a>
 800e412:	682b      	ldr	r3, [r5, #0]
 800e414:	b903      	cbnz	r3, 800e418 <__sflush_r+0x7c>
 800e416:	6560      	str	r0, [r4, #84]	; 0x54
 800e418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e41a:	602f      	str	r7, [r5, #0]
 800e41c:	2900      	cmp	r1, #0
 800e41e:	d0ca      	beq.n	800e3b6 <__sflush_r+0x1a>
 800e420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e424:	4299      	cmp	r1, r3
 800e426:	d002      	beq.n	800e42e <__sflush_r+0x92>
 800e428:	4628      	mov	r0, r5
 800e42a:	f000 fd7d 	bl	800ef28 <_free_r>
 800e42e:	2000      	movs	r0, #0
 800e430:	6360      	str	r0, [r4, #52]	; 0x34
 800e432:	e7c1      	b.n	800e3b8 <__sflush_r+0x1c>
 800e434:	6a21      	ldr	r1, [r4, #32]
 800e436:	2301      	movs	r3, #1
 800e438:	4628      	mov	r0, r5
 800e43a:	47b0      	blx	r6
 800e43c:	1c41      	adds	r1, r0, #1
 800e43e:	d1c7      	bne.n	800e3d0 <__sflush_r+0x34>
 800e440:	682b      	ldr	r3, [r5, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d0c4      	beq.n	800e3d0 <__sflush_r+0x34>
 800e446:	2b1d      	cmp	r3, #29
 800e448:	d001      	beq.n	800e44e <__sflush_r+0xb2>
 800e44a:	2b16      	cmp	r3, #22
 800e44c:	d101      	bne.n	800e452 <__sflush_r+0xb6>
 800e44e:	602f      	str	r7, [r5, #0]
 800e450:	e7b1      	b.n	800e3b6 <__sflush_r+0x1a>
 800e452:	89a3      	ldrh	r3, [r4, #12]
 800e454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e458:	81a3      	strh	r3, [r4, #12]
 800e45a:	e7ad      	b.n	800e3b8 <__sflush_r+0x1c>
 800e45c:	690f      	ldr	r7, [r1, #16]
 800e45e:	2f00      	cmp	r7, #0
 800e460:	d0a9      	beq.n	800e3b6 <__sflush_r+0x1a>
 800e462:	0793      	lsls	r3, r2, #30
 800e464:	680e      	ldr	r6, [r1, #0]
 800e466:	bf08      	it	eq
 800e468:	694b      	ldreq	r3, [r1, #20]
 800e46a:	600f      	str	r7, [r1, #0]
 800e46c:	bf18      	it	ne
 800e46e:	2300      	movne	r3, #0
 800e470:	eba6 0807 	sub.w	r8, r6, r7
 800e474:	608b      	str	r3, [r1, #8]
 800e476:	f1b8 0f00 	cmp.w	r8, #0
 800e47a:	dd9c      	ble.n	800e3b6 <__sflush_r+0x1a>
 800e47c:	6a21      	ldr	r1, [r4, #32]
 800e47e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e480:	4643      	mov	r3, r8
 800e482:	463a      	mov	r2, r7
 800e484:	4628      	mov	r0, r5
 800e486:	47b0      	blx	r6
 800e488:	2800      	cmp	r0, #0
 800e48a:	dc06      	bgt.n	800e49a <__sflush_r+0xfe>
 800e48c:	89a3      	ldrh	r3, [r4, #12]
 800e48e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e492:	81a3      	strh	r3, [r4, #12]
 800e494:	f04f 30ff 	mov.w	r0, #4294967295
 800e498:	e78e      	b.n	800e3b8 <__sflush_r+0x1c>
 800e49a:	4407      	add	r7, r0
 800e49c:	eba8 0800 	sub.w	r8, r8, r0
 800e4a0:	e7e9      	b.n	800e476 <__sflush_r+0xda>
 800e4a2:	bf00      	nop
 800e4a4:	20400001 	.word	0x20400001

0800e4a8 <_fflush_r>:
 800e4a8:	b538      	push	{r3, r4, r5, lr}
 800e4aa:	690b      	ldr	r3, [r1, #16]
 800e4ac:	4605      	mov	r5, r0
 800e4ae:	460c      	mov	r4, r1
 800e4b0:	b913      	cbnz	r3, 800e4b8 <_fflush_r+0x10>
 800e4b2:	2500      	movs	r5, #0
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	bd38      	pop	{r3, r4, r5, pc}
 800e4b8:	b118      	cbz	r0, 800e4c2 <_fflush_r+0x1a>
 800e4ba:	6983      	ldr	r3, [r0, #24]
 800e4bc:	b90b      	cbnz	r3, 800e4c2 <_fflush_r+0x1a>
 800e4be:	f000 f887 	bl	800e5d0 <__sinit>
 800e4c2:	4b14      	ldr	r3, [pc, #80]	; (800e514 <_fflush_r+0x6c>)
 800e4c4:	429c      	cmp	r4, r3
 800e4c6:	d11b      	bne.n	800e500 <_fflush_r+0x58>
 800e4c8:	686c      	ldr	r4, [r5, #4]
 800e4ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d0ef      	beq.n	800e4b2 <_fflush_r+0xa>
 800e4d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e4d4:	07d0      	lsls	r0, r2, #31
 800e4d6:	d404      	bmi.n	800e4e2 <_fflush_r+0x3a>
 800e4d8:	0599      	lsls	r1, r3, #22
 800e4da:	d402      	bmi.n	800e4e2 <_fflush_r+0x3a>
 800e4dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4de:	f000 f91a 	bl	800e716 <__retarget_lock_acquire_recursive>
 800e4e2:	4628      	mov	r0, r5
 800e4e4:	4621      	mov	r1, r4
 800e4e6:	f7ff ff59 	bl	800e39c <__sflush_r>
 800e4ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e4ec:	07da      	lsls	r2, r3, #31
 800e4ee:	4605      	mov	r5, r0
 800e4f0:	d4e0      	bmi.n	800e4b4 <_fflush_r+0xc>
 800e4f2:	89a3      	ldrh	r3, [r4, #12]
 800e4f4:	059b      	lsls	r3, r3, #22
 800e4f6:	d4dd      	bmi.n	800e4b4 <_fflush_r+0xc>
 800e4f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4fa:	f000 f90d 	bl	800e718 <__retarget_lock_release_recursive>
 800e4fe:	e7d9      	b.n	800e4b4 <_fflush_r+0xc>
 800e500:	4b05      	ldr	r3, [pc, #20]	; (800e518 <_fflush_r+0x70>)
 800e502:	429c      	cmp	r4, r3
 800e504:	d101      	bne.n	800e50a <_fflush_r+0x62>
 800e506:	68ac      	ldr	r4, [r5, #8]
 800e508:	e7df      	b.n	800e4ca <_fflush_r+0x22>
 800e50a:	4b04      	ldr	r3, [pc, #16]	; (800e51c <_fflush_r+0x74>)
 800e50c:	429c      	cmp	r4, r3
 800e50e:	bf08      	it	eq
 800e510:	68ec      	ldreq	r4, [r5, #12]
 800e512:	e7da      	b.n	800e4ca <_fflush_r+0x22>
 800e514:	08010f0c 	.word	0x08010f0c
 800e518:	08010f2c 	.word	0x08010f2c
 800e51c:	08010eec 	.word	0x08010eec

0800e520 <std>:
 800e520:	2300      	movs	r3, #0
 800e522:	b510      	push	{r4, lr}
 800e524:	4604      	mov	r4, r0
 800e526:	e9c0 3300 	strd	r3, r3, [r0]
 800e52a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e52e:	6083      	str	r3, [r0, #8]
 800e530:	8181      	strh	r1, [r0, #12]
 800e532:	6643      	str	r3, [r0, #100]	; 0x64
 800e534:	81c2      	strh	r2, [r0, #14]
 800e536:	6183      	str	r3, [r0, #24]
 800e538:	4619      	mov	r1, r3
 800e53a:	2208      	movs	r2, #8
 800e53c:	305c      	adds	r0, #92	; 0x5c
 800e53e:	f7fe fadd 	bl	800cafc <memset>
 800e542:	4b05      	ldr	r3, [pc, #20]	; (800e558 <std+0x38>)
 800e544:	6263      	str	r3, [r4, #36]	; 0x24
 800e546:	4b05      	ldr	r3, [pc, #20]	; (800e55c <std+0x3c>)
 800e548:	62a3      	str	r3, [r4, #40]	; 0x28
 800e54a:	4b05      	ldr	r3, [pc, #20]	; (800e560 <std+0x40>)
 800e54c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e54e:	4b05      	ldr	r3, [pc, #20]	; (800e564 <std+0x44>)
 800e550:	6224      	str	r4, [r4, #32]
 800e552:	6323      	str	r3, [r4, #48]	; 0x30
 800e554:	bd10      	pop	{r4, pc}
 800e556:	bf00      	nop
 800e558:	0800f44d 	.word	0x0800f44d
 800e55c:	0800f46f 	.word	0x0800f46f
 800e560:	0800f4a7 	.word	0x0800f4a7
 800e564:	0800f4cb 	.word	0x0800f4cb

0800e568 <_cleanup_r>:
 800e568:	4901      	ldr	r1, [pc, #4]	; (800e570 <_cleanup_r+0x8>)
 800e56a:	f000 b8af 	b.w	800e6cc <_fwalk_reent>
 800e56e:	bf00      	nop
 800e570:	0800e4a9 	.word	0x0800e4a9

0800e574 <__sfmoreglue>:
 800e574:	b570      	push	{r4, r5, r6, lr}
 800e576:	2268      	movs	r2, #104	; 0x68
 800e578:	1e4d      	subs	r5, r1, #1
 800e57a:	4355      	muls	r5, r2
 800e57c:	460e      	mov	r6, r1
 800e57e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e582:	f000 fd3d 	bl	800f000 <_malloc_r>
 800e586:	4604      	mov	r4, r0
 800e588:	b140      	cbz	r0, 800e59c <__sfmoreglue+0x28>
 800e58a:	2100      	movs	r1, #0
 800e58c:	e9c0 1600 	strd	r1, r6, [r0]
 800e590:	300c      	adds	r0, #12
 800e592:	60a0      	str	r0, [r4, #8]
 800e594:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e598:	f7fe fab0 	bl	800cafc <memset>
 800e59c:	4620      	mov	r0, r4
 800e59e:	bd70      	pop	{r4, r5, r6, pc}

0800e5a0 <__sfp_lock_acquire>:
 800e5a0:	4801      	ldr	r0, [pc, #4]	; (800e5a8 <__sfp_lock_acquire+0x8>)
 800e5a2:	f000 b8b8 	b.w	800e716 <__retarget_lock_acquire_recursive>
 800e5a6:	bf00      	nop
 800e5a8:	200017b1 	.word	0x200017b1

0800e5ac <__sfp_lock_release>:
 800e5ac:	4801      	ldr	r0, [pc, #4]	; (800e5b4 <__sfp_lock_release+0x8>)
 800e5ae:	f000 b8b3 	b.w	800e718 <__retarget_lock_release_recursive>
 800e5b2:	bf00      	nop
 800e5b4:	200017b1 	.word	0x200017b1

0800e5b8 <__sinit_lock_acquire>:
 800e5b8:	4801      	ldr	r0, [pc, #4]	; (800e5c0 <__sinit_lock_acquire+0x8>)
 800e5ba:	f000 b8ac 	b.w	800e716 <__retarget_lock_acquire_recursive>
 800e5be:	bf00      	nop
 800e5c0:	200017b2 	.word	0x200017b2

0800e5c4 <__sinit_lock_release>:
 800e5c4:	4801      	ldr	r0, [pc, #4]	; (800e5cc <__sinit_lock_release+0x8>)
 800e5c6:	f000 b8a7 	b.w	800e718 <__retarget_lock_release_recursive>
 800e5ca:	bf00      	nop
 800e5cc:	200017b2 	.word	0x200017b2

0800e5d0 <__sinit>:
 800e5d0:	b510      	push	{r4, lr}
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	f7ff fff0 	bl	800e5b8 <__sinit_lock_acquire>
 800e5d8:	69a3      	ldr	r3, [r4, #24]
 800e5da:	b11b      	cbz	r3, 800e5e4 <__sinit+0x14>
 800e5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5e0:	f7ff bff0 	b.w	800e5c4 <__sinit_lock_release>
 800e5e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e5e8:	6523      	str	r3, [r4, #80]	; 0x50
 800e5ea:	4b13      	ldr	r3, [pc, #76]	; (800e638 <__sinit+0x68>)
 800e5ec:	4a13      	ldr	r2, [pc, #76]	; (800e63c <__sinit+0x6c>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800e5f2:	42a3      	cmp	r3, r4
 800e5f4:	bf04      	itt	eq
 800e5f6:	2301      	moveq	r3, #1
 800e5f8:	61a3      	streq	r3, [r4, #24]
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	f000 f820 	bl	800e640 <__sfp>
 800e600:	6060      	str	r0, [r4, #4]
 800e602:	4620      	mov	r0, r4
 800e604:	f000 f81c 	bl	800e640 <__sfp>
 800e608:	60a0      	str	r0, [r4, #8]
 800e60a:	4620      	mov	r0, r4
 800e60c:	f000 f818 	bl	800e640 <__sfp>
 800e610:	2200      	movs	r2, #0
 800e612:	60e0      	str	r0, [r4, #12]
 800e614:	2104      	movs	r1, #4
 800e616:	6860      	ldr	r0, [r4, #4]
 800e618:	f7ff ff82 	bl	800e520 <std>
 800e61c:	68a0      	ldr	r0, [r4, #8]
 800e61e:	2201      	movs	r2, #1
 800e620:	2109      	movs	r1, #9
 800e622:	f7ff ff7d 	bl	800e520 <std>
 800e626:	68e0      	ldr	r0, [r4, #12]
 800e628:	2202      	movs	r2, #2
 800e62a:	2112      	movs	r1, #18
 800e62c:	f7ff ff78 	bl	800e520 <std>
 800e630:	2301      	movs	r3, #1
 800e632:	61a3      	str	r3, [r4, #24]
 800e634:	e7d2      	b.n	800e5dc <__sinit+0xc>
 800e636:	bf00      	nop
 800e638:	08010e24 	.word	0x08010e24
 800e63c:	0800e569 	.word	0x0800e569

0800e640 <__sfp>:
 800e640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e642:	4607      	mov	r7, r0
 800e644:	f7ff ffac 	bl	800e5a0 <__sfp_lock_acquire>
 800e648:	4b1e      	ldr	r3, [pc, #120]	; (800e6c4 <__sfp+0x84>)
 800e64a:	681e      	ldr	r6, [r3, #0]
 800e64c:	69b3      	ldr	r3, [r6, #24]
 800e64e:	b913      	cbnz	r3, 800e656 <__sfp+0x16>
 800e650:	4630      	mov	r0, r6
 800e652:	f7ff ffbd 	bl	800e5d0 <__sinit>
 800e656:	3648      	adds	r6, #72	; 0x48
 800e658:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e65c:	3b01      	subs	r3, #1
 800e65e:	d503      	bpl.n	800e668 <__sfp+0x28>
 800e660:	6833      	ldr	r3, [r6, #0]
 800e662:	b30b      	cbz	r3, 800e6a8 <__sfp+0x68>
 800e664:	6836      	ldr	r6, [r6, #0]
 800e666:	e7f7      	b.n	800e658 <__sfp+0x18>
 800e668:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e66c:	b9d5      	cbnz	r5, 800e6a4 <__sfp+0x64>
 800e66e:	4b16      	ldr	r3, [pc, #88]	; (800e6c8 <__sfp+0x88>)
 800e670:	60e3      	str	r3, [r4, #12]
 800e672:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e676:	6665      	str	r5, [r4, #100]	; 0x64
 800e678:	f000 f84c 	bl	800e714 <__retarget_lock_init_recursive>
 800e67c:	f7ff ff96 	bl	800e5ac <__sfp_lock_release>
 800e680:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e684:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e688:	6025      	str	r5, [r4, #0]
 800e68a:	61a5      	str	r5, [r4, #24]
 800e68c:	2208      	movs	r2, #8
 800e68e:	4629      	mov	r1, r5
 800e690:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e694:	f7fe fa32 	bl	800cafc <memset>
 800e698:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e69c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6a4:	3468      	adds	r4, #104	; 0x68
 800e6a6:	e7d9      	b.n	800e65c <__sfp+0x1c>
 800e6a8:	2104      	movs	r1, #4
 800e6aa:	4638      	mov	r0, r7
 800e6ac:	f7ff ff62 	bl	800e574 <__sfmoreglue>
 800e6b0:	4604      	mov	r4, r0
 800e6b2:	6030      	str	r0, [r6, #0]
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	d1d5      	bne.n	800e664 <__sfp+0x24>
 800e6b8:	f7ff ff78 	bl	800e5ac <__sfp_lock_release>
 800e6bc:	230c      	movs	r3, #12
 800e6be:	603b      	str	r3, [r7, #0]
 800e6c0:	e7ee      	b.n	800e6a0 <__sfp+0x60>
 800e6c2:	bf00      	nop
 800e6c4:	08010e24 	.word	0x08010e24
 800e6c8:	ffff0001 	.word	0xffff0001

0800e6cc <_fwalk_reent>:
 800e6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6d0:	4606      	mov	r6, r0
 800e6d2:	4688      	mov	r8, r1
 800e6d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e6d8:	2700      	movs	r7, #0
 800e6da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e6de:	f1b9 0901 	subs.w	r9, r9, #1
 800e6e2:	d505      	bpl.n	800e6f0 <_fwalk_reent+0x24>
 800e6e4:	6824      	ldr	r4, [r4, #0]
 800e6e6:	2c00      	cmp	r4, #0
 800e6e8:	d1f7      	bne.n	800e6da <_fwalk_reent+0xe>
 800e6ea:	4638      	mov	r0, r7
 800e6ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6f0:	89ab      	ldrh	r3, [r5, #12]
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d907      	bls.n	800e706 <_fwalk_reent+0x3a>
 800e6f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e6fa:	3301      	adds	r3, #1
 800e6fc:	d003      	beq.n	800e706 <_fwalk_reent+0x3a>
 800e6fe:	4629      	mov	r1, r5
 800e700:	4630      	mov	r0, r6
 800e702:	47c0      	blx	r8
 800e704:	4307      	orrs	r7, r0
 800e706:	3568      	adds	r5, #104	; 0x68
 800e708:	e7e9      	b.n	800e6de <_fwalk_reent+0x12>
	...

0800e70c <_localeconv_r>:
 800e70c:	4800      	ldr	r0, [pc, #0]	; (800e710 <_localeconv_r+0x4>)
 800e70e:	4770      	bx	lr
 800e710:	200001b8 	.word	0x200001b8

0800e714 <__retarget_lock_init_recursive>:
 800e714:	4770      	bx	lr

0800e716 <__retarget_lock_acquire_recursive>:
 800e716:	4770      	bx	lr

0800e718 <__retarget_lock_release_recursive>:
 800e718:	4770      	bx	lr

0800e71a <__swhatbuf_r>:
 800e71a:	b570      	push	{r4, r5, r6, lr}
 800e71c:	460e      	mov	r6, r1
 800e71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e722:	2900      	cmp	r1, #0
 800e724:	b096      	sub	sp, #88	; 0x58
 800e726:	4614      	mov	r4, r2
 800e728:	461d      	mov	r5, r3
 800e72a:	da08      	bge.n	800e73e <__swhatbuf_r+0x24>
 800e72c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e730:	2200      	movs	r2, #0
 800e732:	602a      	str	r2, [r5, #0]
 800e734:	061a      	lsls	r2, r3, #24
 800e736:	d410      	bmi.n	800e75a <__swhatbuf_r+0x40>
 800e738:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e73c:	e00e      	b.n	800e75c <__swhatbuf_r+0x42>
 800e73e:	466a      	mov	r2, sp
 800e740:	f000 ff1a 	bl	800f578 <_fstat_r>
 800e744:	2800      	cmp	r0, #0
 800e746:	dbf1      	blt.n	800e72c <__swhatbuf_r+0x12>
 800e748:	9a01      	ldr	r2, [sp, #4]
 800e74a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e74e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e752:	425a      	negs	r2, r3
 800e754:	415a      	adcs	r2, r3
 800e756:	602a      	str	r2, [r5, #0]
 800e758:	e7ee      	b.n	800e738 <__swhatbuf_r+0x1e>
 800e75a:	2340      	movs	r3, #64	; 0x40
 800e75c:	2000      	movs	r0, #0
 800e75e:	6023      	str	r3, [r4, #0]
 800e760:	b016      	add	sp, #88	; 0x58
 800e762:	bd70      	pop	{r4, r5, r6, pc}

0800e764 <__smakebuf_r>:
 800e764:	898b      	ldrh	r3, [r1, #12]
 800e766:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e768:	079d      	lsls	r5, r3, #30
 800e76a:	4606      	mov	r6, r0
 800e76c:	460c      	mov	r4, r1
 800e76e:	d507      	bpl.n	800e780 <__smakebuf_r+0x1c>
 800e770:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e774:	6023      	str	r3, [r4, #0]
 800e776:	6123      	str	r3, [r4, #16]
 800e778:	2301      	movs	r3, #1
 800e77a:	6163      	str	r3, [r4, #20]
 800e77c:	b002      	add	sp, #8
 800e77e:	bd70      	pop	{r4, r5, r6, pc}
 800e780:	ab01      	add	r3, sp, #4
 800e782:	466a      	mov	r2, sp
 800e784:	f7ff ffc9 	bl	800e71a <__swhatbuf_r>
 800e788:	9900      	ldr	r1, [sp, #0]
 800e78a:	4605      	mov	r5, r0
 800e78c:	4630      	mov	r0, r6
 800e78e:	f000 fc37 	bl	800f000 <_malloc_r>
 800e792:	b948      	cbnz	r0, 800e7a8 <__smakebuf_r+0x44>
 800e794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e798:	059a      	lsls	r2, r3, #22
 800e79a:	d4ef      	bmi.n	800e77c <__smakebuf_r+0x18>
 800e79c:	f023 0303 	bic.w	r3, r3, #3
 800e7a0:	f043 0302 	orr.w	r3, r3, #2
 800e7a4:	81a3      	strh	r3, [r4, #12]
 800e7a6:	e7e3      	b.n	800e770 <__smakebuf_r+0xc>
 800e7a8:	4b0d      	ldr	r3, [pc, #52]	; (800e7e0 <__smakebuf_r+0x7c>)
 800e7aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800e7ac:	89a3      	ldrh	r3, [r4, #12]
 800e7ae:	6020      	str	r0, [r4, #0]
 800e7b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7b4:	81a3      	strh	r3, [r4, #12]
 800e7b6:	9b00      	ldr	r3, [sp, #0]
 800e7b8:	6163      	str	r3, [r4, #20]
 800e7ba:	9b01      	ldr	r3, [sp, #4]
 800e7bc:	6120      	str	r0, [r4, #16]
 800e7be:	b15b      	cbz	r3, 800e7d8 <__smakebuf_r+0x74>
 800e7c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7c4:	4630      	mov	r0, r6
 800e7c6:	f000 fee9 	bl	800f59c <_isatty_r>
 800e7ca:	b128      	cbz	r0, 800e7d8 <__smakebuf_r+0x74>
 800e7cc:	89a3      	ldrh	r3, [r4, #12]
 800e7ce:	f023 0303 	bic.w	r3, r3, #3
 800e7d2:	f043 0301 	orr.w	r3, r3, #1
 800e7d6:	81a3      	strh	r3, [r4, #12]
 800e7d8:	89a0      	ldrh	r0, [r4, #12]
 800e7da:	4305      	orrs	r5, r0
 800e7dc:	81a5      	strh	r5, [r4, #12]
 800e7de:	e7cd      	b.n	800e77c <__smakebuf_r+0x18>
 800e7e0:	0800e569 	.word	0x0800e569

0800e7e4 <malloc>:
 800e7e4:	4b02      	ldr	r3, [pc, #8]	; (800e7f0 <malloc+0xc>)
 800e7e6:	4601      	mov	r1, r0
 800e7e8:	6818      	ldr	r0, [r3, #0]
 800e7ea:	f000 bc09 	b.w	800f000 <_malloc_r>
 800e7ee:	bf00      	nop
 800e7f0:	20000064 	.word	0x20000064

0800e7f4 <_Balloc>:
 800e7f4:	b570      	push	{r4, r5, r6, lr}
 800e7f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e7f8:	4604      	mov	r4, r0
 800e7fa:	460d      	mov	r5, r1
 800e7fc:	b976      	cbnz	r6, 800e81c <_Balloc+0x28>
 800e7fe:	2010      	movs	r0, #16
 800e800:	f7ff fff0 	bl	800e7e4 <malloc>
 800e804:	4602      	mov	r2, r0
 800e806:	6260      	str	r0, [r4, #36]	; 0x24
 800e808:	b920      	cbnz	r0, 800e814 <_Balloc+0x20>
 800e80a:	4b18      	ldr	r3, [pc, #96]	; (800e86c <_Balloc+0x78>)
 800e80c:	4818      	ldr	r0, [pc, #96]	; (800e870 <_Balloc+0x7c>)
 800e80e:	2166      	movs	r1, #102	; 0x66
 800e810:	f000 fe72 	bl	800f4f8 <__assert_func>
 800e814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e818:	6006      	str	r6, [r0, #0]
 800e81a:	60c6      	str	r6, [r0, #12]
 800e81c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e81e:	68f3      	ldr	r3, [r6, #12]
 800e820:	b183      	cbz	r3, 800e844 <_Balloc+0x50>
 800e822:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e824:	68db      	ldr	r3, [r3, #12]
 800e826:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e82a:	b9b8      	cbnz	r0, 800e85c <_Balloc+0x68>
 800e82c:	2101      	movs	r1, #1
 800e82e:	fa01 f605 	lsl.w	r6, r1, r5
 800e832:	1d72      	adds	r2, r6, #5
 800e834:	0092      	lsls	r2, r2, #2
 800e836:	4620      	mov	r0, r4
 800e838:	f000 fb60 	bl	800eefc <_calloc_r>
 800e83c:	b160      	cbz	r0, 800e858 <_Balloc+0x64>
 800e83e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e842:	e00e      	b.n	800e862 <_Balloc+0x6e>
 800e844:	2221      	movs	r2, #33	; 0x21
 800e846:	2104      	movs	r1, #4
 800e848:	4620      	mov	r0, r4
 800e84a:	f000 fb57 	bl	800eefc <_calloc_r>
 800e84e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e850:	60f0      	str	r0, [r6, #12]
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d1e4      	bne.n	800e822 <_Balloc+0x2e>
 800e858:	2000      	movs	r0, #0
 800e85a:	bd70      	pop	{r4, r5, r6, pc}
 800e85c:	6802      	ldr	r2, [r0, #0]
 800e85e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e862:	2300      	movs	r3, #0
 800e864:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e868:	e7f7      	b.n	800e85a <_Balloc+0x66>
 800e86a:	bf00      	nop
 800e86c:	08010e69 	.word	0x08010e69
 800e870:	08010f4c 	.word	0x08010f4c

0800e874 <_Bfree>:
 800e874:	b570      	push	{r4, r5, r6, lr}
 800e876:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e878:	4605      	mov	r5, r0
 800e87a:	460c      	mov	r4, r1
 800e87c:	b976      	cbnz	r6, 800e89c <_Bfree+0x28>
 800e87e:	2010      	movs	r0, #16
 800e880:	f7ff ffb0 	bl	800e7e4 <malloc>
 800e884:	4602      	mov	r2, r0
 800e886:	6268      	str	r0, [r5, #36]	; 0x24
 800e888:	b920      	cbnz	r0, 800e894 <_Bfree+0x20>
 800e88a:	4b09      	ldr	r3, [pc, #36]	; (800e8b0 <_Bfree+0x3c>)
 800e88c:	4809      	ldr	r0, [pc, #36]	; (800e8b4 <_Bfree+0x40>)
 800e88e:	218a      	movs	r1, #138	; 0x8a
 800e890:	f000 fe32 	bl	800f4f8 <__assert_func>
 800e894:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e898:	6006      	str	r6, [r0, #0]
 800e89a:	60c6      	str	r6, [r0, #12]
 800e89c:	b13c      	cbz	r4, 800e8ae <_Bfree+0x3a>
 800e89e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e8a0:	6862      	ldr	r2, [r4, #4]
 800e8a2:	68db      	ldr	r3, [r3, #12]
 800e8a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e8a8:	6021      	str	r1, [r4, #0]
 800e8aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e8ae:	bd70      	pop	{r4, r5, r6, pc}
 800e8b0:	08010e69 	.word	0x08010e69
 800e8b4:	08010f4c 	.word	0x08010f4c

0800e8b8 <__multadd>:
 800e8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8bc:	690d      	ldr	r5, [r1, #16]
 800e8be:	4607      	mov	r7, r0
 800e8c0:	460c      	mov	r4, r1
 800e8c2:	461e      	mov	r6, r3
 800e8c4:	f101 0c14 	add.w	ip, r1, #20
 800e8c8:	2000      	movs	r0, #0
 800e8ca:	f8dc 3000 	ldr.w	r3, [ip]
 800e8ce:	b299      	uxth	r1, r3
 800e8d0:	fb02 6101 	mla	r1, r2, r1, r6
 800e8d4:	0c1e      	lsrs	r6, r3, #16
 800e8d6:	0c0b      	lsrs	r3, r1, #16
 800e8d8:	fb02 3306 	mla	r3, r2, r6, r3
 800e8dc:	b289      	uxth	r1, r1
 800e8de:	3001      	adds	r0, #1
 800e8e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e8e4:	4285      	cmp	r5, r0
 800e8e6:	f84c 1b04 	str.w	r1, [ip], #4
 800e8ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e8ee:	dcec      	bgt.n	800e8ca <__multadd+0x12>
 800e8f0:	b30e      	cbz	r6, 800e936 <__multadd+0x7e>
 800e8f2:	68a3      	ldr	r3, [r4, #8]
 800e8f4:	42ab      	cmp	r3, r5
 800e8f6:	dc19      	bgt.n	800e92c <__multadd+0x74>
 800e8f8:	6861      	ldr	r1, [r4, #4]
 800e8fa:	4638      	mov	r0, r7
 800e8fc:	3101      	adds	r1, #1
 800e8fe:	f7ff ff79 	bl	800e7f4 <_Balloc>
 800e902:	4680      	mov	r8, r0
 800e904:	b928      	cbnz	r0, 800e912 <__multadd+0x5a>
 800e906:	4602      	mov	r2, r0
 800e908:	4b0c      	ldr	r3, [pc, #48]	; (800e93c <__multadd+0x84>)
 800e90a:	480d      	ldr	r0, [pc, #52]	; (800e940 <__multadd+0x88>)
 800e90c:	21b5      	movs	r1, #181	; 0xb5
 800e90e:	f000 fdf3 	bl	800f4f8 <__assert_func>
 800e912:	6922      	ldr	r2, [r4, #16]
 800e914:	3202      	adds	r2, #2
 800e916:	f104 010c 	add.w	r1, r4, #12
 800e91a:	0092      	lsls	r2, r2, #2
 800e91c:	300c      	adds	r0, #12
 800e91e:	f7fe f8df 	bl	800cae0 <memcpy>
 800e922:	4621      	mov	r1, r4
 800e924:	4638      	mov	r0, r7
 800e926:	f7ff ffa5 	bl	800e874 <_Bfree>
 800e92a:	4644      	mov	r4, r8
 800e92c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e930:	3501      	adds	r5, #1
 800e932:	615e      	str	r6, [r3, #20]
 800e934:	6125      	str	r5, [r4, #16]
 800e936:	4620      	mov	r0, r4
 800e938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e93c:	08010edb 	.word	0x08010edb
 800e940:	08010f4c 	.word	0x08010f4c

0800e944 <__hi0bits>:
 800e944:	0c03      	lsrs	r3, r0, #16
 800e946:	041b      	lsls	r3, r3, #16
 800e948:	b9d3      	cbnz	r3, 800e980 <__hi0bits+0x3c>
 800e94a:	0400      	lsls	r0, r0, #16
 800e94c:	2310      	movs	r3, #16
 800e94e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e952:	bf04      	itt	eq
 800e954:	0200      	lsleq	r0, r0, #8
 800e956:	3308      	addeq	r3, #8
 800e958:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e95c:	bf04      	itt	eq
 800e95e:	0100      	lsleq	r0, r0, #4
 800e960:	3304      	addeq	r3, #4
 800e962:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e966:	bf04      	itt	eq
 800e968:	0080      	lsleq	r0, r0, #2
 800e96a:	3302      	addeq	r3, #2
 800e96c:	2800      	cmp	r0, #0
 800e96e:	db05      	blt.n	800e97c <__hi0bits+0x38>
 800e970:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e974:	f103 0301 	add.w	r3, r3, #1
 800e978:	bf08      	it	eq
 800e97a:	2320      	moveq	r3, #32
 800e97c:	4618      	mov	r0, r3
 800e97e:	4770      	bx	lr
 800e980:	2300      	movs	r3, #0
 800e982:	e7e4      	b.n	800e94e <__hi0bits+0xa>

0800e984 <__lo0bits>:
 800e984:	6803      	ldr	r3, [r0, #0]
 800e986:	f013 0207 	ands.w	r2, r3, #7
 800e98a:	4601      	mov	r1, r0
 800e98c:	d00b      	beq.n	800e9a6 <__lo0bits+0x22>
 800e98e:	07da      	lsls	r2, r3, #31
 800e990:	d423      	bmi.n	800e9da <__lo0bits+0x56>
 800e992:	0798      	lsls	r0, r3, #30
 800e994:	bf49      	itett	mi
 800e996:	085b      	lsrmi	r3, r3, #1
 800e998:	089b      	lsrpl	r3, r3, #2
 800e99a:	2001      	movmi	r0, #1
 800e99c:	600b      	strmi	r3, [r1, #0]
 800e99e:	bf5c      	itt	pl
 800e9a0:	600b      	strpl	r3, [r1, #0]
 800e9a2:	2002      	movpl	r0, #2
 800e9a4:	4770      	bx	lr
 800e9a6:	b298      	uxth	r0, r3
 800e9a8:	b9a8      	cbnz	r0, 800e9d6 <__lo0bits+0x52>
 800e9aa:	0c1b      	lsrs	r3, r3, #16
 800e9ac:	2010      	movs	r0, #16
 800e9ae:	b2da      	uxtb	r2, r3
 800e9b0:	b90a      	cbnz	r2, 800e9b6 <__lo0bits+0x32>
 800e9b2:	3008      	adds	r0, #8
 800e9b4:	0a1b      	lsrs	r3, r3, #8
 800e9b6:	071a      	lsls	r2, r3, #28
 800e9b8:	bf04      	itt	eq
 800e9ba:	091b      	lsreq	r3, r3, #4
 800e9bc:	3004      	addeq	r0, #4
 800e9be:	079a      	lsls	r2, r3, #30
 800e9c0:	bf04      	itt	eq
 800e9c2:	089b      	lsreq	r3, r3, #2
 800e9c4:	3002      	addeq	r0, #2
 800e9c6:	07da      	lsls	r2, r3, #31
 800e9c8:	d403      	bmi.n	800e9d2 <__lo0bits+0x4e>
 800e9ca:	085b      	lsrs	r3, r3, #1
 800e9cc:	f100 0001 	add.w	r0, r0, #1
 800e9d0:	d005      	beq.n	800e9de <__lo0bits+0x5a>
 800e9d2:	600b      	str	r3, [r1, #0]
 800e9d4:	4770      	bx	lr
 800e9d6:	4610      	mov	r0, r2
 800e9d8:	e7e9      	b.n	800e9ae <__lo0bits+0x2a>
 800e9da:	2000      	movs	r0, #0
 800e9dc:	4770      	bx	lr
 800e9de:	2020      	movs	r0, #32
 800e9e0:	4770      	bx	lr
	...

0800e9e4 <__i2b>:
 800e9e4:	b510      	push	{r4, lr}
 800e9e6:	460c      	mov	r4, r1
 800e9e8:	2101      	movs	r1, #1
 800e9ea:	f7ff ff03 	bl	800e7f4 <_Balloc>
 800e9ee:	4602      	mov	r2, r0
 800e9f0:	b928      	cbnz	r0, 800e9fe <__i2b+0x1a>
 800e9f2:	4b05      	ldr	r3, [pc, #20]	; (800ea08 <__i2b+0x24>)
 800e9f4:	4805      	ldr	r0, [pc, #20]	; (800ea0c <__i2b+0x28>)
 800e9f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e9fa:	f000 fd7d 	bl	800f4f8 <__assert_func>
 800e9fe:	2301      	movs	r3, #1
 800ea00:	6144      	str	r4, [r0, #20]
 800ea02:	6103      	str	r3, [r0, #16]
 800ea04:	bd10      	pop	{r4, pc}
 800ea06:	bf00      	nop
 800ea08:	08010edb 	.word	0x08010edb
 800ea0c:	08010f4c 	.word	0x08010f4c

0800ea10 <__multiply>:
 800ea10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea14:	4691      	mov	r9, r2
 800ea16:	690a      	ldr	r2, [r1, #16]
 800ea18:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	bfb8      	it	lt
 800ea20:	460b      	movlt	r3, r1
 800ea22:	460c      	mov	r4, r1
 800ea24:	bfbc      	itt	lt
 800ea26:	464c      	movlt	r4, r9
 800ea28:	4699      	movlt	r9, r3
 800ea2a:	6927      	ldr	r7, [r4, #16]
 800ea2c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ea30:	68a3      	ldr	r3, [r4, #8]
 800ea32:	6861      	ldr	r1, [r4, #4]
 800ea34:	eb07 060a 	add.w	r6, r7, sl
 800ea38:	42b3      	cmp	r3, r6
 800ea3a:	b085      	sub	sp, #20
 800ea3c:	bfb8      	it	lt
 800ea3e:	3101      	addlt	r1, #1
 800ea40:	f7ff fed8 	bl	800e7f4 <_Balloc>
 800ea44:	b930      	cbnz	r0, 800ea54 <__multiply+0x44>
 800ea46:	4602      	mov	r2, r0
 800ea48:	4b44      	ldr	r3, [pc, #272]	; (800eb5c <__multiply+0x14c>)
 800ea4a:	4845      	ldr	r0, [pc, #276]	; (800eb60 <__multiply+0x150>)
 800ea4c:	f240 115d 	movw	r1, #349	; 0x15d
 800ea50:	f000 fd52 	bl	800f4f8 <__assert_func>
 800ea54:	f100 0514 	add.w	r5, r0, #20
 800ea58:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ea5c:	462b      	mov	r3, r5
 800ea5e:	2200      	movs	r2, #0
 800ea60:	4543      	cmp	r3, r8
 800ea62:	d321      	bcc.n	800eaa8 <__multiply+0x98>
 800ea64:	f104 0314 	add.w	r3, r4, #20
 800ea68:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ea6c:	f109 0314 	add.w	r3, r9, #20
 800ea70:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ea74:	9202      	str	r2, [sp, #8]
 800ea76:	1b3a      	subs	r2, r7, r4
 800ea78:	3a15      	subs	r2, #21
 800ea7a:	f022 0203 	bic.w	r2, r2, #3
 800ea7e:	3204      	adds	r2, #4
 800ea80:	f104 0115 	add.w	r1, r4, #21
 800ea84:	428f      	cmp	r7, r1
 800ea86:	bf38      	it	cc
 800ea88:	2204      	movcc	r2, #4
 800ea8a:	9201      	str	r2, [sp, #4]
 800ea8c:	9a02      	ldr	r2, [sp, #8]
 800ea8e:	9303      	str	r3, [sp, #12]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d80c      	bhi.n	800eaae <__multiply+0x9e>
 800ea94:	2e00      	cmp	r6, #0
 800ea96:	dd03      	ble.n	800eaa0 <__multiply+0x90>
 800ea98:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d05a      	beq.n	800eb56 <__multiply+0x146>
 800eaa0:	6106      	str	r6, [r0, #16]
 800eaa2:	b005      	add	sp, #20
 800eaa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaa8:	f843 2b04 	str.w	r2, [r3], #4
 800eaac:	e7d8      	b.n	800ea60 <__multiply+0x50>
 800eaae:	f8b3 a000 	ldrh.w	sl, [r3]
 800eab2:	f1ba 0f00 	cmp.w	sl, #0
 800eab6:	d024      	beq.n	800eb02 <__multiply+0xf2>
 800eab8:	f104 0e14 	add.w	lr, r4, #20
 800eabc:	46a9      	mov	r9, r5
 800eabe:	f04f 0c00 	mov.w	ip, #0
 800eac2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eac6:	f8d9 1000 	ldr.w	r1, [r9]
 800eaca:	fa1f fb82 	uxth.w	fp, r2
 800eace:	b289      	uxth	r1, r1
 800ead0:	fb0a 110b 	mla	r1, sl, fp, r1
 800ead4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ead8:	f8d9 2000 	ldr.w	r2, [r9]
 800eadc:	4461      	add	r1, ip
 800eade:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eae2:	fb0a c20b 	mla	r2, sl, fp, ip
 800eae6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eaea:	b289      	uxth	r1, r1
 800eaec:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eaf0:	4577      	cmp	r7, lr
 800eaf2:	f849 1b04 	str.w	r1, [r9], #4
 800eaf6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eafa:	d8e2      	bhi.n	800eac2 <__multiply+0xb2>
 800eafc:	9a01      	ldr	r2, [sp, #4]
 800eafe:	f845 c002 	str.w	ip, [r5, r2]
 800eb02:	9a03      	ldr	r2, [sp, #12]
 800eb04:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eb08:	3304      	adds	r3, #4
 800eb0a:	f1b9 0f00 	cmp.w	r9, #0
 800eb0e:	d020      	beq.n	800eb52 <__multiply+0x142>
 800eb10:	6829      	ldr	r1, [r5, #0]
 800eb12:	f104 0c14 	add.w	ip, r4, #20
 800eb16:	46ae      	mov	lr, r5
 800eb18:	f04f 0a00 	mov.w	sl, #0
 800eb1c:	f8bc b000 	ldrh.w	fp, [ip]
 800eb20:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eb24:	fb09 220b 	mla	r2, r9, fp, r2
 800eb28:	4492      	add	sl, r2
 800eb2a:	b289      	uxth	r1, r1
 800eb2c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800eb30:	f84e 1b04 	str.w	r1, [lr], #4
 800eb34:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eb38:	f8be 1000 	ldrh.w	r1, [lr]
 800eb3c:	0c12      	lsrs	r2, r2, #16
 800eb3e:	fb09 1102 	mla	r1, r9, r2, r1
 800eb42:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800eb46:	4567      	cmp	r7, ip
 800eb48:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eb4c:	d8e6      	bhi.n	800eb1c <__multiply+0x10c>
 800eb4e:	9a01      	ldr	r2, [sp, #4]
 800eb50:	50a9      	str	r1, [r5, r2]
 800eb52:	3504      	adds	r5, #4
 800eb54:	e79a      	b.n	800ea8c <__multiply+0x7c>
 800eb56:	3e01      	subs	r6, #1
 800eb58:	e79c      	b.n	800ea94 <__multiply+0x84>
 800eb5a:	bf00      	nop
 800eb5c:	08010edb 	.word	0x08010edb
 800eb60:	08010f4c 	.word	0x08010f4c

0800eb64 <__pow5mult>:
 800eb64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb68:	4615      	mov	r5, r2
 800eb6a:	f012 0203 	ands.w	r2, r2, #3
 800eb6e:	4606      	mov	r6, r0
 800eb70:	460f      	mov	r7, r1
 800eb72:	d007      	beq.n	800eb84 <__pow5mult+0x20>
 800eb74:	4c25      	ldr	r4, [pc, #148]	; (800ec0c <__pow5mult+0xa8>)
 800eb76:	3a01      	subs	r2, #1
 800eb78:	2300      	movs	r3, #0
 800eb7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eb7e:	f7ff fe9b 	bl	800e8b8 <__multadd>
 800eb82:	4607      	mov	r7, r0
 800eb84:	10ad      	asrs	r5, r5, #2
 800eb86:	d03d      	beq.n	800ec04 <__pow5mult+0xa0>
 800eb88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eb8a:	b97c      	cbnz	r4, 800ebac <__pow5mult+0x48>
 800eb8c:	2010      	movs	r0, #16
 800eb8e:	f7ff fe29 	bl	800e7e4 <malloc>
 800eb92:	4602      	mov	r2, r0
 800eb94:	6270      	str	r0, [r6, #36]	; 0x24
 800eb96:	b928      	cbnz	r0, 800eba4 <__pow5mult+0x40>
 800eb98:	4b1d      	ldr	r3, [pc, #116]	; (800ec10 <__pow5mult+0xac>)
 800eb9a:	481e      	ldr	r0, [pc, #120]	; (800ec14 <__pow5mult+0xb0>)
 800eb9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800eba0:	f000 fcaa 	bl	800f4f8 <__assert_func>
 800eba4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eba8:	6004      	str	r4, [r0, #0]
 800ebaa:	60c4      	str	r4, [r0, #12]
 800ebac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ebb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ebb4:	b94c      	cbnz	r4, 800ebca <__pow5mult+0x66>
 800ebb6:	f240 2171 	movw	r1, #625	; 0x271
 800ebba:	4630      	mov	r0, r6
 800ebbc:	f7ff ff12 	bl	800e9e4 <__i2b>
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	f8c8 0008 	str.w	r0, [r8, #8]
 800ebc6:	4604      	mov	r4, r0
 800ebc8:	6003      	str	r3, [r0, #0]
 800ebca:	f04f 0900 	mov.w	r9, #0
 800ebce:	07eb      	lsls	r3, r5, #31
 800ebd0:	d50a      	bpl.n	800ebe8 <__pow5mult+0x84>
 800ebd2:	4639      	mov	r1, r7
 800ebd4:	4622      	mov	r2, r4
 800ebd6:	4630      	mov	r0, r6
 800ebd8:	f7ff ff1a 	bl	800ea10 <__multiply>
 800ebdc:	4639      	mov	r1, r7
 800ebde:	4680      	mov	r8, r0
 800ebe0:	4630      	mov	r0, r6
 800ebe2:	f7ff fe47 	bl	800e874 <_Bfree>
 800ebe6:	4647      	mov	r7, r8
 800ebe8:	106d      	asrs	r5, r5, #1
 800ebea:	d00b      	beq.n	800ec04 <__pow5mult+0xa0>
 800ebec:	6820      	ldr	r0, [r4, #0]
 800ebee:	b938      	cbnz	r0, 800ec00 <__pow5mult+0x9c>
 800ebf0:	4622      	mov	r2, r4
 800ebf2:	4621      	mov	r1, r4
 800ebf4:	4630      	mov	r0, r6
 800ebf6:	f7ff ff0b 	bl	800ea10 <__multiply>
 800ebfa:	6020      	str	r0, [r4, #0]
 800ebfc:	f8c0 9000 	str.w	r9, [r0]
 800ec00:	4604      	mov	r4, r0
 800ec02:	e7e4      	b.n	800ebce <__pow5mult+0x6a>
 800ec04:	4638      	mov	r0, r7
 800ec06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec0a:	bf00      	nop
 800ec0c:	08011098 	.word	0x08011098
 800ec10:	08010e69 	.word	0x08010e69
 800ec14:	08010f4c 	.word	0x08010f4c

0800ec18 <__lshift>:
 800ec18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec1c:	460c      	mov	r4, r1
 800ec1e:	6849      	ldr	r1, [r1, #4]
 800ec20:	6923      	ldr	r3, [r4, #16]
 800ec22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec26:	68a3      	ldr	r3, [r4, #8]
 800ec28:	4607      	mov	r7, r0
 800ec2a:	4691      	mov	r9, r2
 800ec2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec30:	f108 0601 	add.w	r6, r8, #1
 800ec34:	42b3      	cmp	r3, r6
 800ec36:	db0b      	blt.n	800ec50 <__lshift+0x38>
 800ec38:	4638      	mov	r0, r7
 800ec3a:	f7ff fddb 	bl	800e7f4 <_Balloc>
 800ec3e:	4605      	mov	r5, r0
 800ec40:	b948      	cbnz	r0, 800ec56 <__lshift+0x3e>
 800ec42:	4602      	mov	r2, r0
 800ec44:	4b2a      	ldr	r3, [pc, #168]	; (800ecf0 <__lshift+0xd8>)
 800ec46:	482b      	ldr	r0, [pc, #172]	; (800ecf4 <__lshift+0xdc>)
 800ec48:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ec4c:	f000 fc54 	bl	800f4f8 <__assert_func>
 800ec50:	3101      	adds	r1, #1
 800ec52:	005b      	lsls	r3, r3, #1
 800ec54:	e7ee      	b.n	800ec34 <__lshift+0x1c>
 800ec56:	2300      	movs	r3, #0
 800ec58:	f100 0114 	add.w	r1, r0, #20
 800ec5c:	f100 0210 	add.w	r2, r0, #16
 800ec60:	4618      	mov	r0, r3
 800ec62:	4553      	cmp	r3, sl
 800ec64:	db37      	blt.n	800ecd6 <__lshift+0xbe>
 800ec66:	6920      	ldr	r0, [r4, #16]
 800ec68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec6c:	f104 0314 	add.w	r3, r4, #20
 800ec70:	f019 091f 	ands.w	r9, r9, #31
 800ec74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ec78:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ec7c:	d02f      	beq.n	800ecde <__lshift+0xc6>
 800ec7e:	f1c9 0e20 	rsb	lr, r9, #32
 800ec82:	468a      	mov	sl, r1
 800ec84:	f04f 0c00 	mov.w	ip, #0
 800ec88:	681a      	ldr	r2, [r3, #0]
 800ec8a:	fa02 f209 	lsl.w	r2, r2, r9
 800ec8e:	ea42 020c 	orr.w	r2, r2, ip
 800ec92:	f84a 2b04 	str.w	r2, [sl], #4
 800ec96:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec9a:	4298      	cmp	r0, r3
 800ec9c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800eca0:	d8f2      	bhi.n	800ec88 <__lshift+0x70>
 800eca2:	1b03      	subs	r3, r0, r4
 800eca4:	3b15      	subs	r3, #21
 800eca6:	f023 0303 	bic.w	r3, r3, #3
 800ecaa:	3304      	adds	r3, #4
 800ecac:	f104 0215 	add.w	r2, r4, #21
 800ecb0:	4290      	cmp	r0, r2
 800ecb2:	bf38      	it	cc
 800ecb4:	2304      	movcc	r3, #4
 800ecb6:	f841 c003 	str.w	ip, [r1, r3]
 800ecba:	f1bc 0f00 	cmp.w	ip, #0
 800ecbe:	d001      	beq.n	800ecc4 <__lshift+0xac>
 800ecc0:	f108 0602 	add.w	r6, r8, #2
 800ecc4:	3e01      	subs	r6, #1
 800ecc6:	4638      	mov	r0, r7
 800ecc8:	612e      	str	r6, [r5, #16]
 800ecca:	4621      	mov	r1, r4
 800eccc:	f7ff fdd2 	bl	800e874 <_Bfree>
 800ecd0:	4628      	mov	r0, r5
 800ecd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecd6:	f842 0f04 	str.w	r0, [r2, #4]!
 800ecda:	3301      	adds	r3, #1
 800ecdc:	e7c1      	b.n	800ec62 <__lshift+0x4a>
 800ecde:	3904      	subs	r1, #4
 800ece0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ece4:	f841 2f04 	str.w	r2, [r1, #4]!
 800ece8:	4298      	cmp	r0, r3
 800ecea:	d8f9      	bhi.n	800ece0 <__lshift+0xc8>
 800ecec:	e7ea      	b.n	800ecc4 <__lshift+0xac>
 800ecee:	bf00      	nop
 800ecf0:	08010edb 	.word	0x08010edb
 800ecf4:	08010f4c 	.word	0x08010f4c

0800ecf8 <__mcmp>:
 800ecf8:	b530      	push	{r4, r5, lr}
 800ecfa:	6902      	ldr	r2, [r0, #16]
 800ecfc:	690c      	ldr	r4, [r1, #16]
 800ecfe:	1b12      	subs	r2, r2, r4
 800ed00:	d10e      	bne.n	800ed20 <__mcmp+0x28>
 800ed02:	f100 0314 	add.w	r3, r0, #20
 800ed06:	3114      	adds	r1, #20
 800ed08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ed0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ed10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ed14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ed18:	42a5      	cmp	r5, r4
 800ed1a:	d003      	beq.n	800ed24 <__mcmp+0x2c>
 800ed1c:	d305      	bcc.n	800ed2a <__mcmp+0x32>
 800ed1e:	2201      	movs	r2, #1
 800ed20:	4610      	mov	r0, r2
 800ed22:	bd30      	pop	{r4, r5, pc}
 800ed24:	4283      	cmp	r3, r0
 800ed26:	d3f3      	bcc.n	800ed10 <__mcmp+0x18>
 800ed28:	e7fa      	b.n	800ed20 <__mcmp+0x28>
 800ed2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed2e:	e7f7      	b.n	800ed20 <__mcmp+0x28>

0800ed30 <__mdiff>:
 800ed30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed34:	460c      	mov	r4, r1
 800ed36:	4606      	mov	r6, r0
 800ed38:	4611      	mov	r1, r2
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	4690      	mov	r8, r2
 800ed3e:	f7ff ffdb 	bl	800ecf8 <__mcmp>
 800ed42:	1e05      	subs	r5, r0, #0
 800ed44:	d110      	bne.n	800ed68 <__mdiff+0x38>
 800ed46:	4629      	mov	r1, r5
 800ed48:	4630      	mov	r0, r6
 800ed4a:	f7ff fd53 	bl	800e7f4 <_Balloc>
 800ed4e:	b930      	cbnz	r0, 800ed5e <__mdiff+0x2e>
 800ed50:	4b3a      	ldr	r3, [pc, #232]	; (800ee3c <__mdiff+0x10c>)
 800ed52:	4602      	mov	r2, r0
 800ed54:	f240 2132 	movw	r1, #562	; 0x232
 800ed58:	4839      	ldr	r0, [pc, #228]	; (800ee40 <__mdiff+0x110>)
 800ed5a:	f000 fbcd 	bl	800f4f8 <__assert_func>
 800ed5e:	2301      	movs	r3, #1
 800ed60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ed64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed68:	bfa4      	itt	ge
 800ed6a:	4643      	movge	r3, r8
 800ed6c:	46a0      	movge	r8, r4
 800ed6e:	4630      	mov	r0, r6
 800ed70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ed74:	bfa6      	itte	ge
 800ed76:	461c      	movge	r4, r3
 800ed78:	2500      	movge	r5, #0
 800ed7a:	2501      	movlt	r5, #1
 800ed7c:	f7ff fd3a 	bl	800e7f4 <_Balloc>
 800ed80:	b920      	cbnz	r0, 800ed8c <__mdiff+0x5c>
 800ed82:	4b2e      	ldr	r3, [pc, #184]	; (800ee3c <__mdiff+0x10c>)
 800ed84:	4602      	mov	r2, r0
 800ed86:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ed8a:	e7e5      	b.n	800ed58 <__mdiff+0x28>
 800ed8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ed90:	6926      	ldr	r6, [r4, #16]
 800ed92:	60c5      	str	r5, [r0, #12]
 800ed94:	f104 0914 	add.w	r9, r4, #20
 800ed98:	f108 0514 	add.w	r5, r8, #20
 800ed9c:	f100 0e14 	add.w	lr, r0, #20
 800eda0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800eda4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800eda8:	f108 0210 	add.w	r2, r8, #16
 800edac:	46f2      	mov	sl, lr
 800edae:	2100      	movs	r1, #0
 800edb0:	f859 3b04 	ldr.w	r3, [r9], #4
 800edb4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800edb8:	fa1f f883 	uxth.w	r8, r3
 800edbc:	fa11 f18b 	uxtah	r1, r1, fp
 800edc0:	0c1b      	lsrs	r3, r3, #16
 800edc2:	eba1 0808 	sub.w	r8, r1, r8
 800edc6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800edca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800edce:	fa1f f888 	uxth.w	r8, r8
 800edd2:	1419      	asrs	r1, r3, #16
 800edd4:	454e      	cmp	r6, r9
 800edd6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800edda:	f84a 3b04 	str.w	r3, [sl], #4
 800edde:	d8e7      	bhi.n	800edb0 <__mdiff+0x80>
 800ede0:	1b33      	subs	r3, r6, r4
 800ede2:	3b15      	subs	r3, #21
 800ede4:	f023 0303 	bic.w	r3, r3, #3
 800ede8:	3304      	adds	r3, #4
 800edea:	3415      	adds	r4, #21
 800edec:	42a6      	cmp	r6, r4
 800edee:	bf38      	it	cc
 800edf0:	2304      	movcc	r3, #4
 800edf2:	441d      	add	r5, r3
 800edf4:	4473      	add	r3, lr
 800edf6:	469e      	mov	lr, r3
 800edf8:	462e      	mov	r6, r5
 800edfa:	4566      	cmp	r6, ip
 800edfc:	d30e      	bcc.n	800ee1c <__mdiff+0xec>
 800edfe:	f10c 0203 	add.w	r2, ip, #3
 800ee02:	1b52      	subs	r2, r2, r5
 800ee04:	f022 0203 	bic.w	r2, r2, #3
 800ee08:	3d03      	subs	r5, #3
 800ee0a:	45ac      	cmp	ip, r5
 800ee0c:	bf38      	it	cc
 800ee0e:	2200      	movcc	r2, #0
 800ee10:	441a      	add	r2, r3
 800ee12:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ee16:	b17b      	cbz	r3, 800ee38 <__mdiff+0x108>
 800ee18:	6107      	str	r7, [r0, #16]
 800ee1a:	e7a3      	b.n	800ed64 <__mdiff+0x34>
 800ee1c:	f856 8b04 	ldr.w	r8, [r6], #4
 800ee20:	fa11 f288 	uxtah	r2, r1, r8
 800ee24:	1414      	asrs	r4, r2, #16
 800ee26:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ee2a:	b292      	uxth	r2, r2
 800ee2c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ee30:	f84e 2b04 	str.w	r2, [lr], #4
 800ee34:	1421      	asrs	r1, r4, #16
 800ee36:	e7e0      	b.n	800edfa <__mdiff+0xca>
 800ee38:	3f01      	subs	r7, #1
 800ee3a:	e7ea      	b.n	800ee12 <__mdiff+0xe2>
 800ee3c:	08010edb 	.word	0x08010edb
 800ee40:	08010f4c 	.word	0x08010f4c

0800ee44 <__d2b>:
 800ee44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ee48:	4689      	mov	r9, r1
 800ee4a:	2101      	movs	r1, #1
 800ee4c:	ec57 6b10 	vmov	r6, r7, d0
 800ee50:	4690      	mov	r8, r2
 800ee52:	f7ff fccf 	bl	800e7f4 <_Balloc>
 800ee56:	4604      	mov	r4, r0
 800ee58:	b930      	cbnz	r0, 800ee68 <__d2b+0x24>
 800ee5a:	4602      	mov	r2, r0
 800ee5c:	4b25      	ldr	r3, [pc, #148]	; (800eef4 <__d2b+0xb0>)
 800ee5e:	4826      	ldr	r0, [pc, #152]	; (800eef8 <__d2b+0xb4>)
 800ee60:	f240 310a 	movw	r1, #778	; 0x30a
 800ee64:	f000 fb48 	bl	800f4f8 <__assert_func>
 800ee68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ee6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ee70:	bb35      	cbnz	r5, 800eec0 <__d2b+0x7c>
 800ee72:	2e00      	cmp	r6, #0
 800ee74:	9301      	str	r3, [sp, #4]
 800ee76:	d028      	beq.n	800eeca <__d2b+0x86>
 800ee78:	4668      	mov	r0, sp
 800ee7a:	9600      	str	r6, [sp, #0]
 800ee7c:	f7ff fd82 	bl	800e984 <__lo0bits>
 800ee80:	9900      	ldr	r1, [sp, #0]
 800ee82:	b300      	cbz	r0, 800eec6 <__d2b+0x82>
 800ee84:	9a01      	ldr	r2, [sp, #4]
 800ee86:	f1c0 0320 	rsb	r3, r0, #32
 800ee8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ee8e:	430b      	orrs	r3, r1
 800ee90:	40c2      	lsrs	r2, r0
 800ee92:	6163      	str	r3, [r4, #20]
 800ee94:	9201      	str	r2, [sp, #4]
 800ee96:	9b01      	ldr	r3, [sp, #4]
 800ee98:	61a3      	str	r3, [r4, #24]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	bf14      	ite	ne
 800ee9e:	2202      	movne	r2, #2
 800eea0:	2201      	moveq	r2, #1
 800eea2:	6122      	str	r2, [r4, #16]
 800eea4:	b1d5      	cbz	r5, 800eedc <__d2b+0x98>
 800eea6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eeaa:	4405      	add	r5, r0
 800eeac:	f8c9 5000 	str.w	r5, [r9]
 800eeb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eeb4:	f8c8 0000 	str.w	r0, [r8]
 800eeb8:	4620      	mov	r0, r4
 800eeba:	b003      	add	sp, #12
 800eebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eec0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eec4:	e7d5      	b.n	800ee72 <__d2b+0x2e>
 800eec6:	6161      	str	r1, [r4, #20]
 800eec8:	e7e5      	b.n	800ee96 <__d2b+0x52>
 800eeca:	a801      	add	r0, sp, #4
 800eecc:	f7ff fd5a 	bl	800e984 <__lo0bits>
 800eed0:	9b01      	ldr	r3, [sp, #4]
 800eed2:	6163      	str	r3, [r4, #20]
 800eed4:	2201      	movs	r2, #1
 800eed6:	6122      	str	r2, [r4, #16]
 800eed8:	3020      	adds	r0, #32
 800eeda:	e7e3      	b.n	800eea4 <__d2b+0x60>
 800eedc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eee0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eee4:	f8c9 0000 	str.w	r0, [r9]
 800eee8:	6918      	ldr	r0, [r3, #16]
 800eeea:	f7ff fd2b 	bl	800e944 <__hi0bits>
 800eeee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eef2:	e7df      	b.n	800eeb4 <__d2b+0x70>
 800eef4:	08010edb 	.word	0x08010edb
 800eef8:	08010f4c 	.word	0x08010f4c

0800eefc <_calloc_r>:
 800eefc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eefe:	fba1 2402 	umull	r2, r4, r1, r2
 800ef02:	b94c      	cbnz	r4, 800ef18 <_calloc_r+0x1c>
 800ef04:	4611      	mov	r1, r2
 800ef06:	9201      	str	r2, [sp, #4]
 800ef08:	f000 f87a 	bl	800f000 <_malloc_r>
 800ef0c:	9a01      	ldr	r2, [sp, #4]
 800ef0e:	4605      	mov	r5, r0
 800ef10:	b930      	cbnz	r0, 800ef20 <_calloc_r+0x24>
 800ef12:	4628      	mov	r0, r5
 800ef14:	b003      	add	sp, #12
 800ef16:	bd30      	pop	{r4, r5, pc}
 800ef18:	220c      	movs	r2, #12
 800ef1a:	6002      	str	r2, [r0, #0]
 800ef1c:	2500      	movs	r5, #0
 800ef1e:	e7f8      	b.n	800ef12 <_calloc_r+0x16>
 800ef20:	4621      	mov	r1, r4
 800ef22:	f7fd fdeb 	bl	800cafc <memset>
 800ef26:	e7f4      	b.n	800ef12 <_calloc_r+0x16>

0800ef28 <_free_r>:
 800ef28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef2a:	2900      	cmp	r1, #0
 800ef2c:	d044      	beq.n	800efb8 <_free_r+0x90>
 800ef2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef32:	9001      	str	r0, [sp, #4]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	f1a1 0404 	sub.w	r4, r1, #4
 800ef3a:	bfb8      	it	lt
 800ef3c:	18e4      	addlt	r4, r4, r3
 800ef3e:	f000 fb61 	bl	800f604 <__malloc_lock>
 800ef42:	4a1e      	ldr	r2, [pc, #120]	; (800efbc <_free_r+0x94>)
 800ef44:	9801      	ldr	r0, [sp, #4]
 800ef46:	6813      	ldr	r3, [r2, #0]
 800ef48:	b933      	cbnz	r3, 800ef58 <_free_r+0x30>
 800ef4a:	6063      	str	r3, [r4, #4]
 800ef4c:	6014      	str	r4, [r2, #0]
 800ef4e:	b003      	add	sp, #12
 800ef50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef54:	f000 bb5c 	b.w	800f610 <__malloc_unlock>
 800ef58:	42a3      	cmp	r3, r4
 800ef5a:	d908      	bls.n	800ef6e <_free_r+0x46>
 800ef5c:	6825      	ldr	r5, [r4, #0]
 800ef5e:	1961      	adds	r1, r4, r5
 800ef60:	428b      	cmp	r3, r1
 800ef62:	bf01      	itttt	eq
 800ef64:	6819      	ldreq	r1, [r3, #0]
 800ef66:	685b      	ldreq	r3, [r3, #4]
 800ef68:	1949      	addeq	r1, r1, r5
 800ef6a:	6021      	streq	r1, [r4, #0]
 800ef6c:	e7ed      	b.n	800ef4a <_free_r+0x22>
 800ef6e:	461a      	mov	r2, r3
 800ef70:	685b      	ldr	r3, [r3, #4]
 800ef72:	b10b      	cbz	r3, 800ef78 <_free_r+0x50>
 800ef74:	42a3      	cmp	r3, r4
 800ef76:	d9fa      	bls.n	800ef6e <_free_r+0x46>
 800ef78:	6811      	ldr	r1, [r2, #0]
 800ef7a:	1855      	adds	r5, r2, r1
 800ef7c:	42a5      	cmp	r5, r4
 800ef7e:	d10b      	bne.n	800ef98 <_free_r+0x70>
 800ef80:	6824      	ldr	r4, [r4, #0]
 800ef82:	4421      	add	r1, r4
 800ef84:	1854      	adds	r4, r2, r1
 800ef86:	42a3      	cmp	r3, r4
 800ef88:	6011      	str	r1, [r2, #0]
 800ef8a:	d1e0      	bne.n	800ef4e <_free_r+0x26>
 800ef8c:	681c      	ldr	r4, [r3, #0]
 800ef8e:	685b      	ldr	r3, [r3, #4]
 800ef90:	6053      	str	r3, [r2, #4]
 800ef92:	4421      	add	r1, r4
 800ef94:	6011      	str	r1, [r2, #0]
 800ef96:	e7da      	b.n	800ef4e <_free_r+0x26>
 800ef98:	d902      	bls.n	800efa0 <_free_r+0x78>
 800ef9a:	230c      	movs	r3, #12
 800ef9c:	6003      	str	r3, [r0, #0]
 800ef9e:	e7d6      	b.n	800ef4e <_free_r+0x26>
 800efa0:	6825      	ldr	r5, [r4, #0]
 800efa2:	1961      	adds	r1, r4, r5
 800efa4:	428b      	cmp	r3, r1
 800efa6:	bf04      	itt	eq
 800efa8:	6819      	ldreq	r1, [r3, #0]
 800efaa:	685b      	ldreq	r3, [r3, #4]
 800efac:	6063      	str	r3, [r4, #4]
 800efae:	bf04      	itt	eq
 800efb0:	1949      	addeq	r1, r1, r5
 800efb2:	6021      	streq	r1, [r4, #0]
 800efb4:	6054      	str	r4, [r2, #4]
 800efb6:	e7ca      	b.n	800ef4e <_free_r+0x26>
 800efb8:	b003      	add	sp, #12
 800efba:	bd30      	pop	{r4, r5, pc}
 800efbc:	200017b4 	.word	0x200017b4

0800efc0 <sbrk_aligned>:
 800efc0:	b570      	push	{r4, r5, r6, lr}
 800efc2:	4e0e      	ldr	r6, [pc, #56]	; (800effc <sbrk_aligned+0x3c>)
 800efc4:	460c      	mov	r4, r1
 800efc6:	6831      	ldr	r1, [r6, #0]
 800efc8:	4605      	mov	r5, r0
 800efca:	b911      	cbnz	r1, 800efd2 <sbrk_aligned+0x12>
 800efcc:	f000 fa2e 	bl	800f42c <_sbrk_r>
 800efd0:	6030      	str	r0, [r6, #0]
 800efd2:	4621      	mov	r1, r4
 800efd4:	4628      	mov	r0, r5
 800efd6:	f000 fa29 	bl	800f42c <_sbrk_r>
 800efda:	1c43      	adds	r3, r0, #1
 800efdc:	d00a      	beq.n	800eff4 <sbrk_aligned+0x34>
 800efde:	1cc4      	adds	r4, r0, #3
 800efe0:	f024 0403 	bic.w	r4, r4, #3
 800efe4:	42a0      	cmp	r0, r4
 800efe6:	d007      	beq.n	800eff8 <sbrk_aligned+0x38>
 800efe8:	1a21      	subs	r1, r4, r0
 800efea:	4628      	mov	r0, r5
 800efec:	f000 fa1e 	bl	800f42c <_sbrk_r>
 800eff0:	3001      	adds	r0, #1
 800eff2:	d101      	bne.n	800eff8 <sbrk_aligned+0x38>
 800eff4:	f04f 34ff 	mov.w	r4, #4294967295
 800eff8:	4620      	mov	r0, r4
 800effa:	bd70      	pop	{r4, r5, r6, pc}
 800effc:	200017b8 	.word	0x200017b8

0800f000 <_malloc_r>:
 800f000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f004:	1ccd      	adds	r5, r1, #3
 800f006:	f025 0503 	bic.w	r5, r5, #3
 800f00a:	3508      	adds	r5, #8
 800f00c:	2d0c      	cmp	r5, #12
 800f00e:	bf38      	it	cc
 800f010:	250c      	movcc	r5, #12
 800f012:	2d00      	cmp	r5, #0
 800f014:	4607      	mov	r7, r0
 800f016:	db01      	blt.n	800f01c <_malloc_r+0x1c>
 800f018:	42a9      	cmp	r1, r5
 800f01a:	d905      	bls.n	800f028 <_malloc_r+0x28>
 800f01c:	230c      	movs	r3, #12
 800f01e:	603b      	str	r3, [r7, #0]
 800f020:	2600      	movs	r6, #0
 800f022:	4630      	mov	r0, r6
 800f024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f028:	4e2e      	ldr	r6, [pc, #184]	; (800f0e4 <_malloc_r+0xe4>)
 800f02a:	f000 faeb 	bl	800f604 <__malloc_lock>
 800f02e:	6833      	ldr	r3, [r6, #0]
 800f030:	461c      	mov	r4, r3
 800f032:	bb34      	cbnz	r4, 800f082 <_malloc_r+0x82>
 800f034:	4629      	mov	r1, r5
 800f036:	4638      	mov	r0, r7
 800f038:	f7ff ffc2 	bl	800efc0 <sbrk_aligned>
 800f03c:	1c43      	adds	r3, r0, #1
 800f03e:	4604      	mov	r4, r0
 800f040:	d14d      	bne.n	800f0de <_malloc_r+0xde>
 800f042:	6834      	ldr	r4, [r6, #0]
 800f044:	4626      	mov	r6, r4
 800f046:	2e00      	cmp	r6, #0
 800f048:	d140      	bne.n	800f0cc <_malloc_r+0xcc>
 800f04a:	6823      	ldr	r3, [r4, #0]
 800f04c:	4631      	mov	r1, r6
 800f04e:	4638      	mov	r0, r7
 800f050:	eb04 0803 	add.w	r8, r4, r3
 800f054:	f000 f9ea 	bl	800f42c <_sbrk_r>
 800f058:	4580      	cmp	r8, r0
 800f05a:	d13a      	bne.n	800f0d2 <_malloc_r+0xd2>
 800f05c:	6821      	ldr	r1, [r4, #0]
 800f05e:	3503      	adds	r5, #3
 800f060:	1a6d      	subs	r5, r5, r1
 800f062:	f025 0503 	bic.w	r5, r5, #3
 800f066:	3508      	adds	r5, #8
 800f068:	2d0c      	cmp	r5, #12
 800f06a:	bf38      	it	cc
 800f06c:	250c      	movcc	r5, #12
 800f06e:	4629      	mov	r1, r5
 800f070:	4638      	mov	r0, r7
 800f072:	f7ff ffa5 	bl	800efc0 <sbrk_aligned>
 800f076:	3001      	adds	r0, #1
 800f078:	d02b      	beq.n	800f0d2 <_malloc_r+0xd2>
 800f07a:	6823      	ldr	r3, [r4, #0]
 800f07c:	442b      	add	r3, r5
 800f07e:	6023      	str	r3, [r4, #0]
 800f080:	e00e      	b.n	800f0a0 <_malloc_r+0xa0>
 800f082:	6822      	ldr	r2, [r4, #0]
 800f084:	1b52      	subs	r2, r2, r5
 800f086:	d41e      	bmi.n	800f0c6 <_malloc_r+0xc6>
 800f088:	2a0b      	cmp	r2, #11
 800f08a:	d916      	bls.n	800f0ba <_malloc_r+0xba>
 800f08c:	1961      	adds	r1, r4, r5
 800f08e:	42a3      	cmp	r3, r4
 800f090:	6025      	str	r5, [r4, #0]
 800f092:	bf18      	it	ne
 800f094:	6059      	strne	r1, [r3, #4]
 800f096:	6863      	ldr	r3, [r4, #4]
 800f098:	bf08      	it	eq
 800f09a:	6031      	streq	r1, [r6, #0]
 800f09c:	5162      	str	r2, [r4, r5]
 800f09e:	604b      	str	r3, [r1, #4]
 800f0a0:	4638      	mov	r0, r7
 800f0a2:	f104 060b 	add.w	r6, r4, #11
 800f0a6:	f000 fab3 	bl	800f610 <__malloc_unlock>
 800f0aa:	f026 0607 	bic.w	r6, r6, #7
 800f0ae:	1d23      	adds	r3, r4, #4
 800f0b0:	1af2      	subs	r2, r6, r3
 800f0b2:	d0b6      	beq.n	800f022 <_malloc_r+0x22>
 800f0b4:	1b9b      	subs	r3, r3, r6
 800f0b6:	50a3      	str	r3, [r4, r2]
 800f0b8:	e7b3      	b.n	800f022 <_malloc_r+0x22>
 800f0ba:	6862      	ldr	r2, [r4, #4]
 800f0bc:	42a3      	cmp	r3, r4
 800f0be:	bf0c      	ite	eq
 800f0c0:	6032      	streq	r2, [r6, #0]
 800f0c2:	605a      	strne	r2, [r3, #4]
 800f0c4:	e7ec      	b.n	800f0a0 <_malloc_r+0xa0>
 800f0c6:	4623      	mov	r3, r4
 800f0c8:	6864      	ldr	r4, [r4, #4]
 800f0ca:	e7b2      	b.n	800f032 <_malloc_r+0x32>
 800f0cc:	4634      	mov	r4, r6
 800f0ce:	6876      	ldr	r6, [r6, #4]
 800f0d0:	e7b9      	b.n	800f046 <_malloc_r+0x46>
 800f0d2:	230c      	movs	r3, #12
 800f0d4:	603b      	str	r3, [r7, #0]
 800f0d6:	4638      	mov	r0, r7
 800f0d8:	f000 fa9a 	bl	800f610 <__malloc_unlock>
 800f0dc:	e7a1      	b.n	800f022 <_malloc_r+0x22>
 800f0de:	6025      	str	r5, [r4, #0]
 800f0e0:	e7de      	b.n	800f0a0 <_malloc_r+0xa0>
 800f0e2:	bf00      	nop
 800f0e4:	200017b4 	.word	0x200017b4

0800f0e8 <__sfputc_r>:
 800f0e8:	6893      	ldr	r3, [r2, #8]
 800f0ea:	3b01      	subs	r3, #1
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	b410      	push	{r4}
 800f0f0:	6093      	str	r3, [r2, #8]
 800f0f2:	da08      	bge.n	800f106 <__sfputc_r+0x1e>
 800f0f4:	6994      	ldr	r4, [r2, #24]
 800f0f6:	42a3      	cmp	r3, r4
 800f0f8:	db01      	blt.n	800f0fe <__sfputc_r+0x16>
 800f0fa:	290a      	cmp	r1, #10
 800f0fc:	d103      	bne.n	800f106 <__sfputc_r+0x1e>
 800f0fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f102:	f7fe ba11 	b.w	800d528 <__swbuf_r>
 800f106:	6813      	ldr	r3, [r2, #0]
 800f108:	1c58      	adds	r0, r3, #1
 800f10a:	6010      	str	r0, [r2, #0]
 800f10c:	7019      	strb	r1, [r3, #0]
 800f10e:	4608      	mov	r0, r1
 800f110:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f114:	4770      	bx	lr

0800f116 <__sfputs_r>:
 800f116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f118:	4606      	mov	r6, r0
 800f11a:	460f      	mov	r7, r1
 800f11c:	4614      	mov	r4, r2
 800f11e:	18d5      	adds	r5, r2, r3
 800f120:	42ac      	cmp	r4, r5
 800f122:	d101      	bne.n	800f128 <__sfputs_r+0x12>
 800f124:	2000      	movs	r0, #0
 800f126:	e007      	b.n	800f138 <__sfputs_r+0x22>
 800f128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f12c:	463a      	mov	r2, r7
 800f12e:	4630      	mov	r0, r6
 800f130:	f7ff ffda 	bl	800f0e8 <__sfputc_r>
 800f134:	1c43      	adds	r3, r0, #1
 800f136:	d1f3      	bne.n	800f120 <__sfputs_r+0xa>
 800f138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f13c <_vfiprintf_r>:
 800f13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f140:	460d      	mov	r5, r1
 800f142:	b09d      	sub	sp, #116	; 0x74
 800f144:	4614      	mov	r4, r2
 800f146:	4698      	mov	r8, r3
 800f148:	4606      	mov	r6, r0
 800f14a:	b118      	cbz	r0, 800f154 <_vfiprintf_r+0x18>
 800f14c:	6983      	ldr	r3, [r0, #24]
 800f14e:	b90b      	cbnz	r3, 800f154 <_vfiprintf_r+0x18>
 800f150:	f7ff fa3e 	bl	800e5d0 <__sinit>
 800f154:	4b89      	ldr	r3, [pc, #548]	; (800f37c <_vfiprintf_r+0x240>)
 800f156:	429d      	cmp	r5, r3
 800f158:	d11b      	bne.n	800f192 <_vfiprintf_r+0x56>
 800f15a:	6875      	ldr	r5, [r6, #4]
 800f15c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f15e:	07d9      	lsls	r1, r3, #31
 800f160:	d405      	bmi.n	800f16e <_vfiprintf_r+0x32>
 800f162:	89ab      	ldrh	r3, [r5, #12]
 800f164:	059a      	lsls	r2, r3, #22
 800f166:	d402      	bmi.n	800f16e <_vfiprintf_r+0x32>
 800f168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f16a:	f7ff fad4 	bl	800e716 <__retarget_lock_acquire_recursive>
 800f16e:	89ab      	ldrh	r3, [r5, #12]
 800f170:	071b      	lsls	r3, r3, #28
 800f172:	d501      	bpl.n	800f178 <_vfiprintf_r+0x3c>
 800f174:	692b      	ldr	r3, [r5, #16]
 800f176:	b9eb      	cbnz	r3, 800f1b4 <_vfiprintf_r+0x78>
 800f178:	4629      	mov	r1, r5
 800f17a:	4630      	mov	r0, r6
 800f17c:	f7fe fa26 	bl	800d5cc <__swsetup_r>
 800f180:	b1c0      	cbz	r0, 800f1b4 <_vfiprintf_r+0x78>
 800f182:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f184:	07dc      	lsls	r4, r3, #31
 800f186:	d50e      	bpl.n	800f1a6 <_vfiprintf_r+0x6a>
 800f188:	f04f 30ff 	mov.w	r0, #4294967295
 800f18c:	b01d      	add	sp, #116	; 0x74
 800f18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f192:	4b7b      	ldr	r3, [pc, #492]	; (800f380 <_vfiprintf_r+0x244>)
 800f194:	429d      	cmp	r5, r3
 800f196:	d101      	bne.n	800f19c <_vfiprintf_r+0x60>
 800f198:	68b5      	ldr	r5, [r6, #8]
 800f19a:	e7df      	b.n	800f15c <_vfiprintf_r+0x20>
 800f19c:	4b79      	ldr	r3, [pc, #484]	; (800f384 <_vfiprintf_r+0x248>)
 800f19e:	429d      	cmp	r5, r3
 800f1a0:	bf08      	it	eq
 800f1a2:	68f5      	ldreq	r5, [r6, #12]
 800f1a4:	e7da      	b.n	800f15c <_vfiprintf_r+0x20>
 800f1a6:	89ab      	ldrh	r3, [r5, #12]
 800f1a8:	0598      	lsls	r0, r3, #22
 800f1aa:	d4ed      	bmi.n	800f188 <_vfiprintf_r+0x4c>
 800f1ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1ae:	f7ff fab3 	bl	800e718 <__retarget_lock_release_recursive>
 800f1b2:	e7e9      	b.n	800f188 <_vfiprintf_r+0x4c>
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	9309      	str	r3, [sp, #36]	; 0x24
 800f1b8:	2320      	movs	r3, #32
 800f1ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1be:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1c2:	2330      	movs	r3, #48	; 0x30
 800f1c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f388 <_vfiprintf_r+0x24c>
 800f1c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1cc:	f04f 0901 	mov.w	r9, #1
 800f1d0:	4623      	mov	r3, r4
 800f1d2:	469a      	mov	sl, r3
 800f1d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1d8:	b10a      	cbz	r2, 800f1de <_vfiprintf_r+0xa2>
 800f1da:	2a25      	cmp	r2, #37	; 0x25
 800f1dc:	d1f9      	bne.n	800f1d2 <_vfiprintf_r+0x96>
 800f1de:	ebba 0b04 	subs.w	fp, sl, r4
 800f1e2:	d00b      	beq.n	800f1fc <_vfiprintf_r+0xc0>
 800f1e4:	465b      	mov	r3, fp
 800f1e6:	4622      	mov	r2, r4
 800f1e8:	4629      	mov	r1, r5
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	f7ff ff93 	bl	800f116 <__sfputs_r>
 800f1f0:	3001      	adds	r0, #1
 800f1f2:	f000 80aa 	beq.w	800f34a <_vfiprintf_r+0x20e>
 800f1f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1f8:	445a      	add	r2, fp
 800f1fa:	9209      	str	r2, [sp, #36]	; 0x24
 800f1fc:	f89a 3000 	ldrb.w	r3, [sl]
 800f200:	2b00      	cmp	r3, #0
 800f202:	f000 80a2 	beq.w	800f34a <_vfiprintf_r+0x20e>
 800f206:	2300      	movs	r3, #0
 800f208:	f04f 32ff 	mov.w	r2, #4294967295
 800f20c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f210:	f10a 0a01 	add.w	sl, sl, #1
 800f214:	9304      	str	r3, [sp, #16]
 800f216:	9307      	str	r3, [sp, #28]
 800f218:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f21c:	931a      	str	r3, [sp, #104]	; 0x68
 800f21e:	4654      	mov	r4, sl
 800f220:	2205      	movs	r2, #5
 800f222:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f226:	4858      	ldr	r0, [pc, #352]	; (800f388 <_vfiprintf_r+0x24c>)
 800f228:	f7f0 ffc2 	bl	80001b0 <memchr>
 800f22c:	9a04      	ldr	r2, [sp, #16]
 800f22e:	b9d8      	cbnz	r0, 800f268 <_vfiprintf_r+0x12c>
 800f230:	06d1      	lsls	r1, r2, #27
 800f232:	bf44      	itt	mi
 800f234:	2320      	movmi	r3, #32
 800f236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f23a:	0713      	lsls	r3, r2, #28
 800f23c:	bf44      	itt	mi
 800f23e:	232b      	movmi	r3, #43	; 0x2b
 800f240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f244:	f89a 3000 	ldrb.w	r3, [sl]
 800f248:	2b2a      	cmp	r3, #42	; 0x2a
 800f24a:	d015      	beq.n	800f278 <_vfiprintf_r+0x13c>
 800f24c:	9a07      	ldr	r2, [sp, #28]
 800f24e:	4654      	mov	r4, sl
 800f250:	2000      	movs	r0, #0
 800f252:	f04f 0c0a 	mov.w	ip, #10
 800f256:	4621      	mov	r1, r4
 800f258:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f25c:	3b30      	subs	r3, #48	; 0x30
 800f25e:	2b09      	cmp	r3, #9
 800f260:	d94e      	bls.n	800f300 <_vfiprintf_r+0x1c4>
 800f262:	b1b0      	cbz	r0, 800f292 <_vfiprintf_r+0x156>
 800f264:	9207      	str	r2, [sp, #28]
 800f266:	e014      	b.n	800f292 <_vfiprintf_r+0x156>
 800f268:	eba0 0308 	sub.w	r3, r0, r8
 800f26c:	fa09 f303 	lsl.w	r3, r9, r3
 800f270:	4313      	orrs	r3, r2
 800f272:	9304      	str	r3, [sp, #16]
 800f274:	46a2      	mov	sl, r4
 800f276:	e7d2      	b.n	800f21e <_vfiprintf_r+0xe2>
 800f278:	9b03      	ldr	r3, [sp, #12]
 800f27a:	1d19      	adds	r1, r3, #4
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	9103      	str	r1, [sp, #12]
 800f280:	2b00      	cmp	r3, #0
 800f282:	bfbb      	ittet	lt
 800f284:	425b      	neglt	r3, r3
 800f286:	f042 0202 	orrlt.w	r2, r2, #2
 800f28a:	9307      	strge	r3, [sp, #28]
 800f28c:	9307      	strlt	r3, [sp, #28]
 800f28e:	bfb8      	it	lt
 800f290:	9204      	strlt	r2, [sp, #16]
 800f292:	7823      	ldrb	r3, [r4, #0]
 800f294:	2b2e      	cmp	r3, #46	; 0x2e
 800f296:	d10c      	bne.n	800f2b2 <_vfiprintf_r+0x176>
 800f298:	7863      	ldrb	r3, [r4, #1]
 800f29a:	2b2a      	cmp	r3, #42	; 0x2a
 800f29c:	d135      	bne.n	800f30a <_vfiprintf_r+0x1ce>
 800f29e:	9b03      	ldr	r3, [sp, #12]
 800f2a0:	1d1a      	adds	r2, r3, #4
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	9203      	str	r2, [sp, #12]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	bfb8      	it	lt
 800f2aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2ae:	3402      	adds	r4, #2
 800f2b0:	9305      	str	r3, [sp, #20]
 800f2b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f398 <_vfiprintf_r+0x25c>
 800f2b6:	7821      	ldrb	r1, [r4, #0]
 800f2b8:	2203      	movs	r2, #3
 800f2ba:	4650      	mov	r0, sl
 800f2bc:	f7f0 ff78 	bl	80001b0 <memchr>
 800f2c0:	b140      	cbz	r0, 800f2d4 <_vfiprintf_r+0x198>
 800f2c2:	2340      	movs	r3, #64	; 0x40
 800f2c4:	eba0 000a 	sub.w	r0, r0, sl
 800f2c8:	fa03 f000 	lsl.w	r0, r3, r0
 800f2cc:	9b04      	ldr	r3, [sp, #16]
 800f2ce:	4303      	orrs	r3, r0
 800f2d0:	3401      	adds	r4, #1
 800f2d2:	9304      	str	r3, [sp, #16]
 800f2d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2d8:	482c      	ldr	r0, [pc, #176]	; (800f38c <_vfiprintf_r+0x250>)
 800f2da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2de:	2206      	movs	r2, #6
 800f2e0:	f7f0 ff66 	bl	80001b0 <memchr>
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	d03f      	beq.n	800f368 <_vfiprintf_r+0x22c>
 800f2e8:	4b29      	ldr	r3, [pc, #164]	; (800f390 <_vfiprintf_r+0x254>)
 800f2ea:	bb1b      	cbnz	r3, 800f334 <_vfiprintf_r+0x1f8>
 800f2ec:	9b03      	ldr	r3, [sp, #12]
 800f2ee:	3307      	adds	r3, #7
 800f2f0:	f023 0307 	bic.w	r3, r3, #7
 800f2f4:	3308      	adds	r3, #8
 800f2f6:	9303      	str	r3, [sp, #12]
 800f2f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2fa:	443b      	add	r3, r7
 800f2fc:	9309      	str	r3, [sp, #36]	; 0x24
 800f2fe:	e767      	b.n	800f1d0 <_vfiprintf_r+0x94>
 800f300:	fb0c 3202 	mla	r2, ip, r2, r3
 800f304:	460c      	mov	r4, r1
 800f306:	2001      	movs	r0, #1
 800f308:	e7a5      	b.n	800f256 <_vfiprintf_r+0x11a>
 800f30a:	2300      	movs	r3, #0
 800f30c:	3401      	adds	r4, #1
 800f30e:	9305      	str	r3, [sp, #20]
 800f310:	4619      	mov	r1, r3
 800f312:	f04f 0c0a 	mov.w	ip, #10
 800f316:	4620      	mov	r0, r4
 800f318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f31c:	3a30      	subs	r2, #48	; 0x30
 800f31e:	2a09      	cmp	r2, #9
 800f320:	d903      	bls.n	800f32a <_vfiprintf_r+0x1ee>
 800f322:	2b00      	cmp	r3, #0
 800f324:	d0c5      	beq.n	800f2b2 <_vfiprintf_r+0x176>
 800f326:	9105      	str	r1, [sp, #20]
 800f328:	e7c3      	b.n	800f2b2 <_vfiprintf_r+0x176>
 800f32a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f32e:	4604      	mov	r4, r0
 800f330:	2301      	movs	r3, #1
 800f332:	e7f0      	b.n	800f316 <_vfiprintf_r+0x1da>
 800f334:	ab03      	add	r3, sp, #12
 800f336:	9300      	str	r3, [sp, #0]
 800f338:	462a      	mov	r2, r5
 800f33a:	4b16      	ldr	r3, [pc, #88]	; (800f394 <_vfiprintf_r+0x258>)
 800f33c:	a904      	add	r1, sp, #16
 800f33e:	4630      	mov	r0, r6
 800f340:	f7fd fc84 	bl	800cc4c <_printf_float>
 800f344:	4607      	mov	r7, r0
 800f346:	1c78      	adds	r0, r7, #1
 800f348:	d1d6      	bne.n	800f2f8 <_vfiprintf_r+0x1bc>
 800f34a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f34c:	07d9      	lsls	r1, r3, #31
 800f34e:	d405      	bmi.n	800f35c <_vfiprintf_r+0x220>
 800f350:	89ab      	ldrh	r3, [r5, #12]
 800f352:	059a      	lsls	r2, r3, #22
 800f354:	d402      	bmi.n	800f35c <_vfiprintf_r+0x220>
 800f356:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f358:	f7ff f9de 	bl	800e718 <__retarget_lock_release_recursive>
 800f35c:	89ab      	ldrh	r3, [r5, #12]
 800f35e:	065b      	lsls	r3, r3, #25
 800f360:	f53f af12 	bmi.w	800f188 <_vfiprintf_r+0x4c>
 800f364:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f366:	e711      	b.n	800f18c <_vfiprintf_r+0x50>
 800f368:	ab03      	add	r3, sp, #12
 800f36a:	9300      	str	r3, [sp, #0]
 800f36c:	462a      	mov	r2, r5
 800f36e:	4b09      	ldr	r3, [pc, #36]	; (800f394 <_vfiprintf_r+0x258>)
 800f370:	a904      	add	r1, sp, #16
 800f372:	4630      	mov	r0, r6
 800f374:	f7fd ff0e 	bl	800d194 <_printf_i>
 800f378:	e7e4      	b.n	800f344 <_vfiprintf_r+0x208>
 800f37a:	bf00      	nop
 800f37c:	08010f0c 	.word	0x08010f0c
 800f380:	08010f2c 	.word	0x08010f2c
 800f384:	08010eec 	.word	0x08010eec
 800f388:	080110a4 	.word	0x080110a4
 800f38c:	080110ae 	.word	0x080110ae
 800f390:	0800cc4d 	.word	0x0800cc4d
 800f394:	0800f117 	.word	0x0800f117
 800f398:	080110aa 	.word	0x080110aa

0800f39c <_putc_r>:
 800f39c:	b570      	push	{r4, r5, r6, lr}
 800f39e:	460d      	mov	r5, r1
 800f3a0:	4614      	mov	r4, r2
 800f3a2:	4606      	mov	r6, r0
 800f3a4:	b118      	cbz	r0, 800f3ae <_putc_r+0x12>
 800f3a6:	6983      	ldr	r3, [r0, #24]
 800f3a8:	b90b      	cbnz	r3, 800f3ae <_putc_r+0x12>
 800f3aa:	f7ff f911 	bl	800e5d0 <__sinit>
 800f3ae:	4b1c      	ldr	r3, [pc, #112]	; (800f420 <_putc_r+0x84>)
 800f3b0:	429c      	cmp	r4, r3
 800f3b2:	d124      	bne.n	800f3fe <_putc_r+0x62>
 800f3b4:	6874      	ldr	r4, [r6, #4]
 800f3b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3b8:	07d8      	lsls	r0, r3, #31
 800f3ba:	d405      	bmi.n	800f3c8 <_putc_r+0x2c>
 800f3bc:	89a3      	ldrh	r3, [r4, #12]
 800f3be:	0599      	lsls	r1, r3, #22
 800f3c0:	d402      	bmi.n	800f3c8 <_putc_r+0x2c>
 800f3c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3c4:	f7ff f9a7 	bl	800e716 <__retarget_lock_acquire_recursive>
 800f3c8:	68a3      	ldr	r3, [r4, #8]
 800f3ca:	3b01      	subs	r3, #1
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	60a3      	str	r3, [r4, #8]
 800f3d0:	da05      	bge.n	800f3de <_putc_r+0x42>
 800f3d2:	69a2      	ldr	r2, [r4, #24]
 800f3d4:	4293      	cmp	r3, r2
 800f3d6:	db1c      	blt.n	800f412 <_putc_r+0x76>
 800f3d8:	b2eb      	uxtb	r3, r5
 800f3da:	2b0a      	cmp	r3, #10
 800f3dc:	d019      	beq.n	800f412 <_putc_r+0x76>
 800f3de:	6823      	ldr	r3, [r4, #0]
 800f3e0:	1c5a      	adds	r2, r3, #1
 800f3e2:	6022      	str	r2, [r4, #0]
 800f3e4:	701d      	strb	r5, [r3, #0]
 800f3e6:	b2ed      	uxtb	r5, r5
 800f3e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3ea:	07da      	lsls	r2, r3, #31
 800f3ec:	d405      	bmi.n	800f3fa <_putc_r+0x5e>
 800f3ee:	89a3      	ldrh	r3, [r4, #12]
 800f3f0:	059b      	lsls	r3, r3, #22
 800f3f2:	d402      	bmi.n	800f3fa <_putc_r+0x5e>
 800f3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3f6:	f7ff f98f 	bl	800e718 <__retarget_lock_release_recursive>
 800f3fa:	4628      	mov	r0, r5
 800f3fc:	bd70      	pop	{r4, r5, r6, pc}
 800f3fe:	4b09      	ldr	r3, [pc, #36]	; (800f424 <_putc_r+0x88>)
 800f400:	429c      	cmp	r4, r3
 800f402:	d101      	bne.n	800f408 <_putc_r+0x6c>
 800f404:	68b4      	ldr	r4, [r6, #8]
 800f406:	e7d6      	b.n	800f3b6 <_putc_r+0x1a>
 800f408:	4b07      	ldr	r3, [pc, #28]	; (800f428 <_putc_r+0x8c>)
 800f40a:	429c      	cmp	r4, r3
 800f40c:	bf08      	it	eq
 800f40e:	68f4      	ldreq	r4, [r6, #12]
 800f410:	e7d1      	b.n	800f3b6 <_putc_r+0x1a>
 800f412:	4629      	mov	r1, r5
 800f414:	4622      	mov	r2, r4
 800f416:	4630      	mov	r0, r6
 800f418:	f7fe f886 	bl	800d528 <__swbuf_r>
 800f41c:	4605      	mov	r5, r0
 800f41e:	e7e3      	b.n	800f3e8 <_putc_r+0x4c>
 800f420:	08010f0c 	.word	0x08010f0c
 800f424:	08010f2c 	.word	0x08010f2c
 800f428:	08010eec 	.word	0x08010eec

0800f42c <_sbrk_r>:
 800f42c:	b538      	push	{r3, r4, r5, lr}
 800f42e:	4d06      	ldr	r5, [pc, #24]	; (800f448 <_sbrk_r+0x1c>)
 800f430:	2300      	movs	r3, #0
 800f432:	4604      	mov	r4, r0
 800f434:	4608      	mov	r0, r1
 800f436:	602b      	str	r3, [r5, #0]
 800f438:	f7f3 fd64 	bl	8002f04 <_sbrk>
 800f43c:	1c43      	adds	r3, r0, #1
 800f43e:	d102      	bne.n	800f446 <_sbrk_r+0x1a>
 800f440:	682b      	ldr	r3, [r5, #0]
 800f442:	b103      	cbz	r3, 800f446 <_sbrk_r+0x1a>
 800f444:	6023      	str	r3, [r4, #0]
 800f446:	bd38      	pop	{r3, r4, r5, pc}
 800f448:	200017bc 	.word	0x200017bc

0800f44c <__sread>:
 800f44c:	b510      	push	{r4, lr}
 800f44e:	460c      	mov	r4, r1
 800f450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f454:	f000 f8e2 	bl	800f61c <_read_r>
 800f458:	2800      	cmp	r0, #0
 800f45a:	bfab      	itete	ge
 800f45c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f45e:	89a3      	ldrhlt	r3, [r4, #12]
 800f460:	181b      	addge	r3, r3, r0
 800f462:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f466:	bfac      	ite	ge
 800f468:	6563      	strge	r3, [r4, #84]	; 0x54
 800f46a:	81a3      	strhlt	r3, [r4, #12]
 800f46c:	bd10      	pop	{r4, pc}

0800f46e <__swrite>:
 800f46e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f472:	461f      	mov	r7, r3
 800f474:	898b      	ldrh	r3, [r1, #12]
 800f476:	05db      	lsls	r3, r3, #23
 800f478:	4605      	mov	r5, r0
 800f47a:	460c      	mov	r4, r1
 800f47c:	4616      	mov	r6, r2
 800f47e:	d505      	bpl.n	800f48c <__swrite+0x1e>
 800f480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f484:	2302      	movs	r3, #2
 800f486:	2200      	movs	r2, #0
 800f488:	f000 f898 	bl	800f5bc <_lseek_r>
 800f48c:	89a3      	ldrh	r3, [r4, #12]
 800f48e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f496:	81a3      	strh	r3, [r4, #12]
 800f498:	4632      	mov	r2, r6
 800f49a:	463b      	mov	r3, r7
 800f49c:	4628      	mov	r0, r5
 800f49e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4a2:	f000 b817 	b.w	800f4d4 <_write_r>

0800f4a6 <__sseek>:
 800f4a6:	b510      	push	{r4, lr}
 800f4a8:	460c      	mov	r4, r1
 800f4aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4ae:	f000 f885 	bl	800f5bc <_lseek_r>
 800f4b2:	1c43      	adds	r3, r0, #1
 800f4b4:	89a3      	ldrh	r3, [r4, #12]
 800f4b6:	bf15      	itete	ne
 800f4b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f4ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f4be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f4c2:	81a3      	strheq	r3, [r4, #12]
 800f4c4:	bf18      	it	ne
 800f4c6:	81a3      	strhne	r3, [r4, #12]
 800f4c8:	bd10      	pop	{r4, pc}

0800f4ca <__sclose>:
 800f4ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4ce:	f000 b831 	b.w	800f534 <_close_r>
	...

0800f4d4 <_write_r>:
 800f4d4:	b538      	push	{r3, r4, r5, lr}
 800f4d6:	4d07      	ldr	r5, [pc, #28]	; (800f4f4 <_write_r+0x20>)
 800f4d8:	4604      	mov	r4, r0
 800f4da:	4608      	mov	r0, r1
 800f4dc:	4611      	mov	r1, r2
 800f4de:	2200      	movs	r2, #0
 800f4e0:	602a      	str	r2, [r5, #0]
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	f7fb fa8c 	bl	800aa00 <_write>
 800f4e8:	1c43      	adds	r3, r0, #1
 800f4ea:	d102      	bne.n	800f4f2 <_write_r+0x1e>
 800f4ec:	682b      	ldr	r3, [r5, #0]
 800f4ee:	b103      	cbz	r3, 800f4f2 <_write_r+0x1e>
 800f4f0:	6023      	str	r3, [r4, #0]
 800f4f2:	bd38      	pop	{r3, r4, r5, pc}
 800f4f4:	200017bc 	.word	0x200017bc

0800f4f8 <__assert_func>:
 800f4f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f4fa:	4614      	mov	r4, r2
 800f4fc:	461a      	mov	r2, r3
 800f4fe:	4b09      	ldr	r3, [pc, #36]	; (800f524 <__assert_func+0x2c>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	4605      	mov	r5, r0
 800f504:	68d8      	ldr	r0, [r3, #12]
 800f506:	b14c      	cbz	r4, 800f51c <__assert_func+0x24>
 800f508:	4b07      	ldr	r3, [pc, #28]	; (800f528 <__assert_func+0x30>)
 800f50a:	9100      	str	r1, [sp, #0]
 800f50c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f510:	4906      	ldr	r1, [pc, #24]	; (800f52c <__assert_func+0x34>)
 800f512:	462b      	mov	r3, r5
 800f514:	f000 f81e 	bl	800f554 <fiprintf>
 800f518:	f000 f89f 	bl	800f65a <abort>
 800f51c:	4b04      	ldr	r3, [pc, #16]	; (800f530 <__assert_func+0x38>)
 800f51e:	461c      	mov	r4, r3
 800f520:	e7f3      	b.n	800f50a <__assert_func+0x12>
 800f522:	bf00      	nop
 800f524:	20000064 	.word	0x20000064
 800f528:	080110b5 	.word	0x080110b5
 800f52c:	080110c2 	.word	0x080110c2
 800f530:	080110f0 	.word	0x080110f0

0800f534 <_close_r>:
 800f534:	b538      	push	{r3, r4, r5, lr}
 800f536:	4d06      	ldr	r5, [pc, #24]	; (800f550 <_close_r+0x1c>)
 800f538:	2300      	movs	r3, #0
 800f53a:	4604      	mov	r4, r0
 800f53c:	4608      	mov	r0, r1
 800f53e:	602b      	str	r3, [r5, #0]
 800f540:	f7f3 fcac 	bl	8002e9c <_close>
 800f544:	1c43      	adds	r3, r0, #1
 800f546:	d102      	bne.n	800f54e <_close_r+0x1a>
 800f548:	682b      	ldr	r3, [r5, #0]
 800f54a:	b103      	cbz	r3, 800f54e <_close_r+0x1a>
 800f54c:	6023      	str	r3, [r4, #0]
 800f54e:	bd38      	pop	{r3, r4, r5, pc}
 800f550:	200017bc 	.word	0x200017bc

0800f554 <fiprintf>:
 800f554:	b40e      	push	{r1, r2, r3}
 800f556:	b503      	push	{r0, r1, lr}
 800f558:	4601      	mov	r1, r0
 800f55a:	ab03      	add	r3, sp, #12
 800f55c:	4805      	ldr	r0, [pc, #20]	; (800f574 <fiprintf+0x20>)
 800f55e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f562:	6800      	ldr	r0, [r0, #0]
 800f564:	9301      	str	r3, [sp, #4]
 800f566:	f7ff fde9 	bl	800f13c <_vfiprintf_r>
 800f56a:	b002      	add	sp, #8
 800f56c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f570:	b003      	add	sp, #12
 800f572:	4770      	bx	lr
 800f574:	20000064 	.word	0x20000064

0800f578 <_fstat_r>:
 800f578:	b538      	push	{r3, r4, r5, lr}
 800f57a:	4d07      	ldr	r5, [pc, #28]	; (800f598 <_fstat_r+0x20>)
 800f57c:	2300      	movs	r3, #0
 800f57e:	4604      	mov	r4, r0
 800f580:	4608      	mov	r0, r1
 800f582:	4611      	mov	r1, r2
 800f584:	602b      	str	r3, [r5, #0]
 800f586:	f7f3 fc95 	bl	8002eb4 <_fstat>
 800f58a:	1c43      	adds	r3, r0, #1
 800f58c:	d102      	bne.n	800f594 <_fstat_r+0x1c>
 800f58e:	682b      	ldr	r3, [r5, #0]
 800f590:	b103      	cbz	r3, 800f594 <_fstat_r+0x1c>
 800f592:	6023      	str	r3, [r4, #0]
 800f594:	bd38      	pop	{r3, r4, r5, pc}
 800f596:	bf00      	nop
 800f598:	200017bc 	.word	0x200017bc

0800f59c <_isatty_r>:
 800f59c:	b538      	push	{r3, r4, r5, lr}
 800f59e:	4d06      	ldr	r5, [pc, #24]	; (800f5b8 <_isatty_r+0x1c>)
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	4604      	mov	r4, r0
 800f5a4:	4608      	mov	r0, r1
 800f5a6:	602b      	str	r3, [r5, #0]
 800f5a8:	f7f3 fc94 	bl	8002ed4 <_isatty>
 800f5ac:	1c43      	adds	r3, r0, #1
 800f5ae:	d102      	bne.n	800f5b6 <_isatty_r+0x1a>
 800f5b0:	682b      	ldr	r3, [r5, #0]
 800f5b2:	b103      	cbz	r3, 800f5b6 <_isatty_r+0x1a>
 800f5b4:	6023      	str	r3, [r4, #0]
 800f5b6:	bd38      	pop	{r3, r4, r5, pc}
 800f5b8:	200017bc 	.word	0x200017bc

0800f5bc <_lseek_r>:
 800f5bc:	b538      	push	{r3, r4, r5, lr}
 800f5be:	4d07      	ldr	r5, [pc, #28]	; (800f5dc <_lseek_r+0x20>)
 800f5c0:	4604      	mov	r4, r0
 800f5c2:	4608      	mov	r0, r1
 800f5c4:	4611      	mov	r1, r2
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	602a      	str	r2, [r5, #0]
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	f7f3 fc8d 	bl	8002eea <_lseek>
 800f5d0:	1c43      	adds	r3, r0, #1
 800f5d2:	d102      	bne.n	800f5da <_lseek_r+0x1e>
 800f5d4:	682b      	ldr	r3, [r5, #0]
 800f5d6:	b103      	cbz	r3, 800f5da <_lseek_r+0x1e>
 800f5d8:	6023      	str	r3, [r4, #0]
 800f5da:	bd38      	pop	{r3, r4, r5, pc}
 800f5dc:	200017bc 	.word	0x200017bc

0800f5e0 <__ascii_mbtowc>:
 800f5e0:	b082      	sub	sp, #8
 800f5e2:	b901      	cbnz	r1, 800f5e6 <__ascii_mbtowc+0x6>
 800f5e4:	a901      	add	r1, sp, #4
 800f5e6:	b142      	cbz	r2, 800f5fa <__ascii_mbtowc+0x1a>
 800f5e8:	b14b      	cbz	r3, 800f5fe <__ascii_mbtowc+0x1e>
 800f5ea:	7813      	ldrb	r3, [r2, #0]
 800f5ec:	600b      	str	r3, [r1, #0]
 800f5ee:	7812      	ldrb	r2, [r2, #0]
 800f5f0:	1e10      	subs	r0, r2, #0
 800f5f2:	bf18      	it	ne
 800f5f4:	2001      	movne	r0, #1
 800f5f6:	b002      	add	sp, #8
 800f5f8:	4770      	bx	lr
 800f5fa:	4610      	mov	r0, r2
 800f5fc:	e7fb      	b.n	800f5f6 <__ascii_mbtowc+0x16>
 800f5fe:	f06f 0001 	mvn.w	r0, #1
 800f602:	e7f8      	b.n	800f5f6 <__ascii_mbtowc+0x16>

0800f604 <__malloc_lock>:
 800f604:	4801      	ldr	r0, [pc, #4]	; (800f60c <__malloc_lock+0x8>)
 800f606:	f7ff b886 	b.w	800e716 <__retarget_lock_acquire_recursive>
 800f60a:	bf00      	nop
 800f60c:	200017b0 	.word	0x200017b0

0800f610 <__malloc_unlock>:
 800f610:	4801      	ldr	r0, [pc, #4]	; (800f618 <__malloc_unlock+0x8>)
 800f612:	f7ff b881 	b.w	800e718 <__retarget_lock_release_recursive>
 800f616:	bf00      	nop
 800f618:	200017b0 	.word	0x200017b0

0800f61c <_read_r>:
 800f61c:	b538      	push	{r3, r4, r5, lr}
 800f61e:	4d07      	ldr	r5, [pc, #28]	; (800f63c <_read_r+0x20>)
 800f620:	4604      	mov	r4, r0
 800f622:	4608      	mov	r0, r1
 800f624:	4611      	mov	r1, r2
 800f626:	2200      	movs	r2, #0
 800f628:	602a      	str	r2, [r5, #0]
 800f62a:	461a      	mov	r2, r3
 800f62c:	f7f3 fc19 	bl	8002e62 <_read>
 800f630:	1c43      	adds	r3, r0, #1
 800f632:	d102      	bne.n	800f63a <_read_r+0x1e>
 800f634:	682b      	ldr	r3, [r5, #0]
 800f636:	b103      	cbz	r3, 800f63a <_read_r+0x1e>
 800f638:	6023      	str	r3, [r4, #0]
 800f63a:	bd38      	pop	{r3, r4, r5, pc}
 800f63c:	200017bc 	.word	0x200017bc

0800f640 <__ascii_wctomb>:
 800f640:	b149      	cbz	r1, 800f656 <__ascii_wctomb+0x16>
 800f642:	2aff      	cmp	r2, #255	; 0xff
 800f644:	bf85      	ittet	hi
 800f646:	238a      	movhi	r3, #138	; 0x8a
 800f648:	6003      	strhi	r3, [r0, #0]
 800f64a:	700a      	strbls	r2, [r1, #0]
 800f64c:	f04f 30ff 	movhi.w	r0, #4294967295
 800f650:	bf98      	it	ls
 800f652:	2001      	movls	r0, #1
 800f654:	4770      	bx	lr
 800f656:	4608      	mov	r0, r1
 800f658:	4770      	bx	lr

0800f65a <abort>:
 800f65a:	b508      	push	{r3, lr}
 800f65c:	2006      	movs	r0, #6
 800f65e:	f000 f82b 	bl	800f6b8 <raise>
 800f662:	2001      	movs	r0, #1
 800f664:	f7f3 fbf3 	bl	8002e4e <_exit>

0800f668 <_raise_r>:
 800f668:	291f      	cmp	r1, #31
 800f66a:	b538      	push	{r3, r4, r5, lr}
 800f66c:	4604      	mov	r4, r0
 800f66e:	460d      	mov	r5, r1
 800f670:	d904      	bls.n	800f67c <_raise_r+0x14>
 800f672:	2316      	movs	r3, #22
 800f674:	6003      	str	r3, [r0, #0]
 800f676:	f04f 30ff 	mov.w	r0, #4294967295
 800f67a:	bd38      	pop	{r3, r4, r5, pc}
 800f67c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f67e:	b112      	cbz	r2, 800f686 <_raise_r+0x1e>
 800f680:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f684:	b94b      	cbnz	r3, 800f69a <_raise_r+0x32>
 800f686:	4620      	mov	r0, r4
 800f688:	f000 f830 	bl	800f6ec <_getpid_r>
 800f68c:	462a      	mov	r2, r5
 800f68e:	4601      	mov	r1, r0
 800f690:	4620      	mov	r0, r4
 800f692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f696:	f000 b817 	b.w	800f6c8 <_kill_r>
 800f69a:	2b01      	cmp	r3, #1
 800f69c:	d00a      	beq.n	800f6b4 <_raise_r+0x4c>
 800f69e:	1c59      	adds	r1, r3, #1
 800f6a0:	d103      	bne.n	800f6aa <_raise_r+0x42>
 800f6a2:	2316      	movs	r3, #22
 800f6a4:	6003      	str	r3, [r0, #0]
 800f6a6:	2001      	movs	r0, #1
 800f6a8:	e7e7      	b.n	800f67a <_raise_r+0x12>
 800f6aa:	2400      	movs	r4, #0
 800f6ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f6b0:	4628      	mov	r0, r5
 800f6b2:	4798      	blx	r3
 800f6b4:	2000      	movs	r0, #0
 800f6b6:	e7e0      	b.n	800f67a <_raise_r+0x12>

0800f6b8 <raise>:
 800f6b8:	4b02      	ldr	r3, [pc, #8]	; (800f6c4 <raise+0xc>)
 800f6ba:	4601      	mov	r1, r0
 800f6bc:	6818      	ldr	r0, [r3, #0]
 800f6be:	f7ff bfd3 	b.w	800f668 <_raise_r>
 800f6c2:	bf00      	nop
 800f6c4:	20000064 	.word	0x20000064

0800f6c8 <_kill_r>:
 800f6c8:	b538      	push	{r3, r4, r5, lr}
 800f6ca:	4d07      	ldr	r5, [pc, #28]	; (800f6e8 <_kill_r+0x20>)
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	4604      	mov	r4, r0
 800f6d0:	4608      	mov	r0, r1
 800f6d2:	4611      	mov	r1, r2
 800f6d4:	602b      	str	r3, [r5, #0]
 800f6d6:	f7f3 fbaa 	bl	8002e2e <_kill>
 800f6da:	1c43      	adds	r3, r0, #1
 800f6dc:	d102      	bne.n	800f6e4 <_kill_r+0x1c>
 800f6de:	682b      	ldr	r3, [r5, #0]
 800f6e0:	b103      	cbz	r3, 800f6e4 <_kill_r+0x1c>
 800f6e2:	6023      	str	r3, [r4, #0]
 800f6e4:	bd38      	pop	{r3, r4, r5, pc}
 800f6e6:	bf00      	nop
 800f6e8:	200017bc 	.word	0x200017bc

0800f6ec <_getpid_r>:
 800f6ec:	f7f3 bb97 	b.w	8002e1e <_getpid>

0800f6f0 <_init>:
 800f6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6f2:	bf00      	nop
 800f6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6f6:	bc08      	pop	{r3}
 800f6f8:	469e      	mov	lr, r3
 800f6fa:	4770      	bx	lr

0800f6fc <_fini>:
 800f6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6fe:	bf00      	nop
 800f700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f702:	bc08      	pop	{r3}
 800f704:	469e      	mov	lr, r3
 800f706:	4770      	bx	lr
