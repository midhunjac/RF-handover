
BLE_Beacon_Temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071fc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08007338  08007338  00017338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080075c8  080075c8  000175c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080075cc  080075cc  000175cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000004  080075d0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000024  080075f0  00020024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200000c0  08007689  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000f8  080076be  000200f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  2000010c  080076cf  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  080076cf  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 15 .debug_info   0002b6a7  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005f9f  00000000  00000000  0004b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000026a8  00000000  00000000  00051780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000023e0  00000000  00000000  00053e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00027511  00000000  00000000  00056208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00029f1b  00000000  00000000  0007d719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000cfaca  00000000  00000000  000a7634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  001770fe  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000a050  00000000  00000000  00177150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000010c 	.word	0x2000010c
 8000158:	00000000 	.word	0x00000000
 800015c:	08007320 	.word	0x08007320

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000110 	.word	0x20000110
 8000178:	08007320 	.word	0x08007320

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <TMP117_get_Temperature>:
   @Description   Function gives to us ambient temperature
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Return value  Float
 */
uint16_t TMP117_get_Temperature             (I2C_HandleTypeDef i2c, uint8_t TMP117_DeviceID)
{
 800018c:	b084      	sub	sp, #16
 800018e:	b580      	push	{r7, lr}
 8000190:	b082      	sub	sp, #8
 8000192:	af02      	add	r7, sp, #8
 8000194:	f107 0c08 	add.w	ip, r7, #8
 8000198:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      buf[0]=TMP117_TemperatureRegister;
 800019c:	4b14      	ldr	r3, [pc, #80]	; (80001f0 <TMP117_get_Temperature+0x64>)
 800019e:	2200      	movs	r2, #0
 80001a0:	701a      	strb	r2, [r3, #0]

      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,1,100);
 80001a2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80001a6:	b299      	uxth	r1, r3
 80001a8:	2364      	movs	r3, #100	; 0x64
 80001aa:	9300      	str	r3, [sp, #0]
 80001ac:	2301      	movs	r3, #1
 80001ae:	4a10      	ldr	r2, [pc, #64]	; (80001f0 <TMP117_get_Temperature+0x64>)
 80001b0:	f107 0008 	add.w	r0, r7, #8
 80001b4:	f001 fff2 	bl	800219c <HAL_I2C_Master_Transmit>
      HAL_I2C_Master_Receive(&i2c,TMP117_DeviceID,buf,2,100);
 80001b8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80001bc:	b299      	uxth	r1, r3
 80001be:	2364      	movs	r3, #100	; 0x64
 80001c0:	9300      	str	r3, [sp, #0]
 80001c2:	2302      	movs	r3, #2
 80001c4:	4a0a      	ldr	r2, [pc, #40]	; (80001f0 <TMP117_get_Temperature+0x64>)
 80001c6:	f107 0008 	add.w	r0, r7, #8
 80001ca:	f002 f8db 	bl	8002384 <HAL_I2C_Master_Receive>

      return (((buf[0]<<8)|buf[1]));
 80001ce:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <TMP117_get_Temperature+0x64>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	021b      	lsls	r3, r3, #8
 80001d4:	b21a      	sxth	r2, r3
 80001d6:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <TMP117_get_Temperature+0x64>)
 80001d8:	785b      	ldrb	r3, [r3, #1]
 80001da:	b21b      	sxth	r3, r3
 80001dc:	4313      	orrs	r3, r2
 80001de:	b21b      	sxth	r3, r3
 80001e0:	b29b      	uxth	r3, r3
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	46bd      	mov	sp, r7
 80001e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80001ea:	b004      	add	sp, #16
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	20000128 	.word	0x20000128

080001f4 <TMP117_set_Configuration>:
                  uint8_t first     ->  [15:8]
                  uint8_t second    ->  [7:0]
   @Return value  void
 */
void TMP117_set_Configuration            (I2C_HandleTypeDef i2c,uint8_t first,uint8_t second, uint8_t TMP117_DeviceID)
{
 80001f4:	b084      	sub	sp, #16
 80001f6:	b580      	push	{r7, lr}
 80001f8:	b082      	sub	sp, #8
 80001fa:	af02      	add	r7, sp, #8
 80001fc:	f107 0c08 	add.w	ip, r7, #8
 8000200:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      buf[0]=TMP117_ConfigurationRegister;
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <TMP117_set_Configuration+0x48>)
 8000206:	2201      	movs	r2, #1
 8000208:	701a      	strb	r2, [r3, #0]
      buf[1]=first;
 800020a:	4a0c      	ldr	r2, [pc, #48]	; (800023c <TMP117_set_Configuration+0x48>)
 800020c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000210:	7053      	strb	r3, [r2, #1]
      buf[2]=second;
 8000212:	4a0a      	ldr	r2, [pc, #40]	; (800023c <TMP117_set_Configuration+0x48>)
 8000214:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000218:	7093      	strb	r3, [r2, #2]
      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,3,100);
 800021a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800021e:	b299      	uxth	r1, r3
 8000220:	2364      	movs	r3, #100	; 0x64
 8000222:	9300      	str	r3, [sp, #0]
 8000224:	2303      	movs	r3, #3
 8000226:	4a05      	ldr	r2, [pc, #20]	; (800023c <TMP117_set_Configuration+0x48>)
 8000228:	f107 0008 	add.w	r0, r7, #8
 800022c:	f001 ffb6 	bl	800219c <HAL_I2C_Master_Transmit>
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr
 800023c:	2000012c 	.word	0x2000012c

08000240 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000240:	b5b0      	push	{r4, r5, r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000246:	4b15      	ldr	r3, [pc, #84]	; (800029c <APPD_EnableCPU2+0x5c>)
 8000248:	881a      	ldrh	r2, [r3, #0]
 800024a:	4b15      	ldr	r3, [pc, #84]	; (80002a0 <APPD_EnableCPU2+0x60>)
 800024c:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800024e:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <APPD_EnableCPU2+0x64>)
 8000250:	881a      	ldrh	r2, [r3, #0]
 8000252:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <APPD_EnableCPU2+0x60>)
 8000254:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <APPD_EnableCPU2+0x68>)
 8000258:	881a      	ldrh	r2, [r3, #0]
 800025a:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <APPD_EnableCPU2+0x60>)
 800025c:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 800025e:	4b13      	ldr	r3, [pc, #76]	; (80002ac <APPD_EnableCPU2+0x6c>)
 8000260:	881a      	ldrh	r2, [r3, #0]
 8000262:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <APPD_EnableCPU2+0x60>)
 8000264:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 8000266:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <APPD_EnableCPU2+0x70>)
 8000268:	881a      	ldrh	r2, [r3, #0]
 800026a:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <APPD_EnableCPU2+0x60>)
 800026c:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800026e:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <APPD_EnableCPU2+0x74>)
 8000270:	1d3c      	adds	r4, r7, #4
 8000272:	461d      	mov	r5, r3
 8000274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000278:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800027c:	c403      	stmia	r4!, {r0, r1}
 800027e:	8022      	strh	r2, [r4, #0]
 8000280:	3402      	adds	r4, #2
 8000282:	0c13      	lsrs	r3, r2, #16
 8000284:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000286:	f005 fe17 	bl	8005eb8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f005 f8b2 	bl	80053f6 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000292:	bf00      	nop
}
 8000294:	3720      	adds	r7, #32
 8000296:	46bd      	mov	sp, r7
 8000298:	bdb0      	pop	{r4, r5, r7, pc}
 800029a:	bf00      	nop
 800029c:	20000004 	.word	0x20000004
 80002a0:	200301e8 	.word	0x200301e8
 80002a4:	20000006 	.word	0x20000006
 80002a8:	20000008 	.word	0x20000008
 80002ac:	2000000a 	.word	0x2000000a
 80002b0:	2000000c 	.word	0x2000000c
 80002b4:	08007338 	.word	0x08007338

080002b8 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <LL_PWR_SMPS_Enable+0x1c>)
 80002be:	69db      	ldr	r3, [r3, #28]
 80002c0:	4a04      	ldr	r2, [pc, #16]	; (80002d4 <LL_PWR_SMPS_Enable+0x1c>)
 80002c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002c6:	61d3      	str	r3, [r2, #28]
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	58000400 	.word	0x58000400

080002d8 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80002e2:	69db      	ldr	r3, [r3, #28]
 80002e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80002e8:	4904      	ldr	r1, [pc, #16]	; (80002fc <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	61cb      	str	r3, [r1, #28]
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	58000400 	.word	0x58000400

08000300 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8000300:	b480      	push	{r7}
 8000302:	b087      	sub	sp, #28
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	0a1b      	lsrs	r3, r3, #8
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if(OutputVoltageLevel_calibration == 0UL)
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d108      	bne.n	800032c <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */
    
    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 800031a:	4b15      	ldr	r3, [pc, #84]	; (8000370 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	f023 020f 	bic.w	r2, r3, #15
 8000322:	4913      	ldr	r1, [pc, #76]	; (8000370 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4313      	orrs	r3, r2
 8000328:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 800032a:	e019      	b.n	8000360 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	3b06      	subs	r3, #6
 8000330:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	693a      	ldr	r2, [r7, #16]
 8000336:	4413      	add	r3, r2
 8000338:	617b      	str	r3, [r7, #20]
    if(OutputVoltageLevelTrimmed < 0)
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	2b00      	cmp	r3, #0
 800033e:	da02      	bge.n	8000346 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	e004      	b.n	8000350 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if(OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	2b0f      	cmp	r3, #15
 800034a:	dd01      	ble.n	8000350 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 800034c:	230f      	movs	r3, #15
 800034e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000352:	69db      	ldr	r3, [r3, #28]
 8000354:	f023 020f 	bic.w	r2, r3, #15
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	4905      	ldr	r1, [pc, #20]	; (8000370 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800035c:	4313      	orrs	r3, r2
 800035e:	61cb      	str	r3, [r1, #28]
}
 8000360:	bf00      	nop
 8000362:	371c      	adds	r7, #28
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	1fff7558 	.word	0x1fff7558
 8000370:	58000400 	.word	0x58000400

08000374 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <LL_C2_PWR_SetPowerMode+0x28>)
 800037e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000382:	f023 0207 	bic.w	r2, r3, #7
 8000386:	4905      	ldr	r1, [pc, #20]	; (800039c <LL_C2_PWR_SetPowerMode+0x28>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4313      	orrs	r3, r2
 800038c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	58000400 	.word	0x58000400

080003a0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80003aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80003ae:	4905      	ldr	r1, [pc, #20]	; (80003c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4313      	orrs	r3, r2
 80003b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80003b8:	bf00      	nop
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	58000800 	.word	0x58000800

080003c8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80003d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003d4:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80003d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80003da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80003e2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	021b      	lsls	r3, r3, #8
 80003ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003ee:	4313      	orrs	r3, r2
 80003f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80003f4:	bf00      	nop
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	cafecafe 	.word	0xcafecafe

08000404 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800040c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4313      	orrs	r3, r2
 800041e:	608b      	str	r3, [r1, #8]
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr

0800042c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000438:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800043c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800045a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800045e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800047c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000480:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000484:	d101      	bne.n	800048a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000486:	2301      	movs	r3, #1
 8000488:	e000      	b.n	800048c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800048a:	2300      	movs	r3, #0
}
 800048c:	4618      	mov	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr

08000496 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800049a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80004a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80004aa:	d101      	bne.n	80004b0 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80004ac:	2301      	movs	r3, #1
 80004ae:	e000      	b.n	80004b2 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80004b0:	2300      	movs	r3, #0
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80004c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80004ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4313      	orrs	r3, r2
 80004d2:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80004d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004e0:	68fb      	ldr	r3, [r7, #12]
}
 80004e2:	bf00      	nop
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
	...

080004f0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <LL_DBGMCU_GetRevisionID+0x18>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	0c1b      	lsrs	r3, r3, #16
 80004fa:	b29b      	uxth	r3, r3
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	e0042000 	.word	0xe0042000

0800050c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	685a      	ldr	r2, [r3, #4]
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	041b      	lsls	r3, r3, #16
 800051e:	431a      	orrs	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	605a      	str	r2, [r3, #4]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	685a      	ldr	r2, [r3, #4]
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	431a      	orrs	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	605a      	str	r2, [r3, #4]
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
 800055a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	695a      	ldr	r2, [r3, #20]
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	041b      	lsls	r3, r3, #16
 8000564:	431a      	orrs	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	615a      	str	r2, [r3, #20]
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	695a      	ldr	r2, [r3, #20]
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	431a      	orrs	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	615a      	str	r2, [r3, #20]
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	609a      	str	r2, [r3, #8]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	619a      	str	r2, [r3, #24]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	22ff      	movs	r2, #255	; 0xff
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	22ca      	movs	r2, #202	; 0xca
 80005f6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2253      	movs	r2, #83	; 0x53
 80005fc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800060a:	b480      	push	{r7}
 800060c:	b083      	sub	sp, #12
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	f023 0207 	bic.w	r2, r3, #7
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	431a      	orrs	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	609a      	str	r2, [r3, #8]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <MX_APPE_Config+0x18>)
 8000636:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800063a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800063c:	f000 f829 	bl	8000692 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000640:	f000 f868 	bl	8000714 <Config_HSE>

  return;
 8000644:	bf00      	nop
}
 8000646:	bd80      	pop	{r7, pc}
 8000648:	58004000 	.word	0x58004000

0800064c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000650:	f000 f874 	bl	800073c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000654:	f000 f88c 	bl	8000770 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000658:	4903      	ldr	r1, [pc, #12]	; (8000668 <MX_APPE_Init+0x1c>)
 800065a:	2000      	movs	r0, #0
 800065c:	f000 f9be 	bl	80009dc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000660:	f000 f896 	bl	8000790 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000664:	bf00      	nop
}
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200001cc 	.word	0x200001cc

0800066c <Init_Smps>:

void Init_Smps(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8000670:	2000      	movs	r0, #0
 8000672:	f7ff fe31 	bl	80002d8 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 8000676:	2004      	movs	r0, #4
 8000678:	f7ff fe42 	bl	8000300 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 800067c:	f7ff fe1c 	bl	80002b8 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000680:	bf00      	nop
}
 8000682:	bd80      	pop	{r7, pc}

08000684 <Init_Exti>:

void Init_Exti(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000688:	2050      	movs	r0, #80	; 0x50
 800068a:	f7ff fe89 	bl	80003a0 <LL_EXTI_EnableIT_32_63>

  return;
 800068e:	bf00      	nop
}
 8000690:	bd80      	pop	{r7, pc}

08000692 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000696:	f000 f804 	bl	80006a2 <Reset_BackupDomain>

  Reset_IPCC();
 800069a:	f000 f819 	bl	80006d0 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800069e:	bf00      	nop
}
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80006a6:	f7ff fee3 	bl	8000470 <LL_RCC_IsActiveFlag_PINRST>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00d      	beq.n	80006cc <Reset_BackupDomain+0x2a>
 80006b0:	f7ff fef1 	bl	8000496 <LL_RCC_IsActiveFlag_SFTRST>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d108      	bne.n	80006cc <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80006ba:	f002 faef 	bl	8002c9c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80006be:	f002 faed 	bl	8002c9c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80006c2:	f7ff feb3 	bl	800042c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80006c6:	f7ff fec2 	bl	800044e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
}
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80006d4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80006d8:	f7ff fef0 	bl	80004bc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80006dc:	213f      	movs	r1, #63	; 0x3f
 80006de:	480c      	ldr	r0, [pc, #48]	; (8000710 <Reset_IPCC+0x40>)
 80006e0:	f7ff ff5a 	bl	8000598 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80006e4:	213f      	movs	r1, #63	; 0x3f
 80006e6:	480a      	ldr	r0, [pc, #40]	; (8000710 <Reset_IPCC+0x40>)
 80006e8:	f7ff ff64 	bl	80005b4 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80006ec:	213f      	movs	r1, #63	; 0x3f
 80006ee:	4808      	ldr	r0, [pc, #32]	; (8000710 <Reset_IPCC+0x40>)
 80006f0:	f7ff ff0c 	bl	800050c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80006f4:	213f      	movs	r1, #63	; 0x3f
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <Reset_IPCC+0x40>)
 80006f8:	f7ff ff2b 	bl	8000552 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80006fc:	213f      	movs	r1, #63	; 0x3f
 80006fe:	4804      	ldr	r0, [pc, #16]	; (8000710 <Reset_IPCC+0x40>)
 8000700:	f7ff ff16 	bl	8000530 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000704:	213f      	movs	r1, #63	; 0x3f
 8000706:	4802      	ldr	r0, [pc, #8]	; (8000710 <Reset_IPCC+0x40>)
 8000708:	f7ff ff35 	bl	8000576 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800070c:	bf00      	nop
}
 800070e:	bd80      	pop	{r7, pc}
 8000710:	58000c00 	.word	0x58000c00

08000714 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800071a:	2000      	movs	r0, #0
 800071c:	f005 fc58 	bl	8005fd0 <OTP_Read>
 8000720:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d005      	beq.n	8000734 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	799b      	ldrb	r3, [r3, #6]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fe4b 	bl	80003c8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000732:	bf00      	nop
 8000734:	bf00      	nop
}
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <System_Init>:

static void System_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  Init_Smps();
 8000740:	f7ff ff94 	bl	800066c <Init_Smps>

  Init_Exti();
 8000744:	f7ff ff9e 	bl	8000684 <Init_Exti>

  Init_Rtc();
 8000748:	f000 f802 	bl	8000750 <Init_Rtc>

  return;
 800074c:	bf00      	nop
}
 800074e:	bd80      	pop	{r7, pc}

08000750 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <Init_Rtc+0x1c>)
 8000756:	f7ff ff48 	bl	80005ea <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800075a:	2100      	movs	r1, #0
 800075c:	4803      	ldr	r0, [pc, #12]	; (800076c <Init_Rtc+0x1c>)
 800075e:	f7ff ff54 	bl	800060a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000762:	4802      	ldr	r0, [pc, #8]	; (800076c <Init_Rtc+0x1c>)
 8000764:	f7ff ff34 	bl	80005d0 <LL_RTC_EnableWriteProtection>

  return;
 8000768:	bf00      	nop
}
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40002800 	.word	0x40002800

08000770 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000774:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000778:	f7ff fe44 	bl	8000404 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800077c:	f006 fae0 	bl	8006d40 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000780:	2004      	movs	r0, #4
 8000782:	f7ff fdf7 	bl	8000374 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 8000786:	f002 fac1 	bl	8002d0c <HAL_PWREx_EnableSRAMRetention>

  return;
 800078a:	bf00      	nop
}
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000796:	f005 f9d9 	bl	8005b4c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <appe_Tl_Init+0x50>)
 800079c:	2100      	movs	r1, #0
 800079e:	2010      	movs	r0, #16
 80007a0:	f006 fc42 	bl	8007028 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <appe_Tl_Init+0x54>)
 80007a6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <appe_Tl_Init+0x58>)
 80007aa:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80007ac:	463b      	mov	r3, r7
 80007ae:	4619      	mov	r1, r3
 80007b0:	480e      	ldr	r0, [pc, #56]	; (80007ec <appe_Tl_Init+0x5c>)
 80007b2:	f005 f891 	bl	80058d8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <appe_Tl_Init+0x60>)
 80007b8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <appe_Tl_Init+0x64>)
 80007bc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <appe_Tl_Init+0x68>)
 80007c0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80007c2:	f240 533c 	movw	r3, #1340	; 0x53c
 80007c6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	4618      	mov	r0, r3
 80007ce:	f005 faff 	bl	8005dd0 <TL_MM_Init>

  TL_Enable();
 80007d2:	f005 f9b5 	bl	8005b40 <TL_Enable>

  return;
 80007d6:	bf00      	nop
}
 80007d8:	3720      	adds	r7, #32
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	08005911 	.word	0x08005911
 80007e4:	20030734 	.word	0x20030734
 80007e8:	080007fd 	.word	0x080007fd
 80007ec:	08000815 	.word	0x08000815
 80007f0:	2003094c 	.word	0x2003094c
 80007f4:	20030840 	.word	0x20030840
 80007f8:	200301f8 	.word	0x200301f8

080007fc <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000806:	bf00      	nop
}
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	330b      	adds	r3, #11
 8000822:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	b29b      	uxth	r3, r3
 800082a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800082e:	2b07      	cmp	r3, #7
 8000830:	d81f      	bhi.n	8000872 <APPE_SysUserEvtRx+0x5e>
 8000832:	a201      	add	r2, pc, #4	; (adr r2, 8000838 <APPE_SysUserEvtRx+0x24>)
 8000834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000838:	08000859 	.word	0x08000859
 800083c:	0800086b 	.word	0x0800086b
 8000840:	08000873 	.word	0x08000873
 8000844:	08000873 	.word	0x08000873
 8000848:	08000873 	.word	0x08000873
 800084c:	08000873 	.word	0x08000873
 8000850:	08000873 	.word	0x08000873
 8000854:	08000873 	.word	0x08000873
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	4618      	mov	r0, r3
 800085e:	f004 fdf7 	bl	8005450 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f000 f81b 	bl	800089e <APPE_SysEvtReadyProcessing>
    break;
 8000868:	e004      	b.n	8000874 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f000 f806 	bl	800087c <APPE_SysEvtError>
    break;
 8000870:	e000      	b.n	8000874 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000872:	bf00      	nop
  }

  return;
 8000874:	bf00      	nop
}
 8000876:	3720      	adds	r7, #32
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	330b      	adds	r3, #11
 800088a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3302      	adds	r3, #2
 8000890:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000892:	bf00      	nop
}
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b08a      	sub	sp, #40	; 0x28
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	330b      	adds	r3, #11
 80008be:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80008c0:	6a3b      	ldr	r3, [r7, #32]
 80008c2:	3302      	adds	r3, #2
 80008c4:	61fb      	str	r3, [r7, #28]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d117      	bne.n	80008fe <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80008ce:	f7ff fcb7 	bl	8000240 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80008d2:	230d      	movs	r3, #13
 80008d4:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80008d6:	237f      	movs	r3, #127	; 0x7f
 80008d8:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80008da:	f7ff fe09 	bl	80004f0 <LL_DBGMCU_GetRevisionID>
 80008de:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = RevisionID;
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	4618      	mov	r0, r3
 80008ec:	f004 fd9a 	bl	8005424 <SHCI_C2_Config>

    APP_BLE_Init();
 80008f0:	f005 fc8e 	bl	8006210 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80008f4:	2100      	movs	r1, #0
 80008f6:	2001      	movs	r0, #1
 80008f8:	f006 fa34 	bl	8006d64 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80008fc:	e007      	b.n	800090e <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d103      	bne.n	800090e <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
  return;
 800090c:	bf00      	nop
 800090e:	bf00      	nop
}
 8000910:	3728      	adds	r7, #40	; 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800091a:	f04f 30ff 	mov.w	r0, #4294967295
 800091e:	f006 fa87 	bl	8006e30 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}

08000926 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 800092a:	f006 fa4b 	bl	8006dc4 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800092e:	bf00      	nop
}
 8000930:	bd80      	pop	{r7, pc}

08000932 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
 800093a:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800093c:	f04f 30ff 	mov.w	r0, #4294967295
 8000940:	f006 fa76 	bl	8006e30 <UTIL_SEQ_Run>

  return;
 8000944:	bf00      	nop
}
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000954:	2100      	movs	r1, #0
 8000956:	2010      	movs	r0, #16
 8000958:	f006 fb88 	bl	800706c <UTIL_SEQ_SetTask>
  return;
 800095c:	bf00      	nop
}
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800096c:	2002      	movs	r0, #2
 800096e:	f006 fbe9 	bl	8007144 <UTIL_SEQ_SetEvt>
  return;
 8000972:	bf00      	nop
}
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000982:	2002      	movs	r0, #2
 8000984:	f006 fbfe 	bl	8007184 <UTIL_SEQ_WaitEvt>
  return;
 8000988:	bf00      	nop
}
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <LL_EXTI_EnableIT_0_31>:
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <LL_EXTI_EnableIT_0_31+0x24>)
 800099a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800099e:	4905      	ldr	r1, [pc, #20]	; (80009b4 <LL_EXTI_EnableIT_0_31+0x24>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	58000800 	.word	0x58000800

080009b8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4904      	ldr	r1, [pc, #16]	; (80009d8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	600b      	str	r3, [r1, #0]

}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	58000800 	.word	0x58000800

080009dc <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80009e8:	4a64      	ldr	r2, [pc, #400]	; (8000b7c <HW_TS_Init+0x1a0>)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80009ee:	4b63      	ldr	r3, [pc, #396]	; (8000b7c <HW_TS_Init+0x1a0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	22ca      	movs	r2, #202	; 0xca
 80009f6:	625a      	str	r2, [r3, #36]	; 0x24
 80009f8:	4b60      	ldr	r3, [pc, #384]	; (8000b7c <HW_TS_Init+0x1a0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2253      	movs	r2, #83	; 0x53
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000a02:	4b5f      	ldr	r3, [pc, #380]	; (8000b80 <HW_TS_Init+0x1a4>)
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	4a5e      	ldr	r2, [pc, #376]	; (8000b80 <HW_TS_Init+0x1a4>)
 8000a08:	f043 0320 	orr.w	r3, r3, #32
 8000a0c:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000a0e:	4b5c      	ldr	r3, [pc, #368]	; (8000b80 <HW_TS_Init+0x1a4>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	f003 0307 	and.w	r3, r3, #7
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	f1c3 0304 	rsb	r3, r3, #4
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	4b58      	ldr	r3, [pc, #352]	; (8000b84 <HW_TS_Init+0x1a8>)
 8000a22:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000a24:	4b56      	ldr	r3, [pc, #344]	; (8000b80 <HW_TS_Init+0x1a4>)
 8000a26:	691b      	ldr	r3, [r3, #16]
 8000a28:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000a2c:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000a30:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	fa92 f2a2 	rbit	r2, r2
 8000a38:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000a3e:	697a      	ldr	r2, [r7, #20]
 8000a40:	2a00      	cmp	r2, #0
 8000a42:	d101      	bne.n	8000a48 <HW_TS_Init+0x6c>
  {
    return 32U;
 8000a44:	2220      	movs	r2, #32
 8000a46:	e003      	b.n	8000a50 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	40d3      	lsrs	r3, r2
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	3301      	adds	r3, #1
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	4b4b      	ldr	r3, [pc, #300]	; (8000b88 <HW_TS_Init+0x1ac>)
 8000a5a:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000a5c:	4b48      	ldr	r3, [pc, #288]	; (8000b80 <HW_TS_Init+0x1a4>)
 8000a5e:	691b      	ldr	r3, [r3, #16]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	3301      	adds	r3, #1
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	4b47      	ldr	r3, [pc, #284]	; (8000b8c <HW_TS_Init+0x1b0>)
 8000a6e:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000a70:	4b46      	ldr	r3, [pc, #280]	; (8000b8c <HW_TS_Init+0x1b0>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	3b01      	subs	r3, #1
 8000a76:	4a44      	ldr	r2, [pc, #272]	; (8000b88 <HW_TS_Init+0x1ac>)
 8000a78:	7812      	ldrb	r2, [r2, #0]
 8000a7a:	fb02 f303 	mul.w	r3, r2, r3
 8000a7e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000a82:	4a40      	ldr	r2, [pc, #256]	; (8000b84 <HW_TS_Init+0x1a8>)
 8000a84:	7812      	ldrb	r2, [r2, #0]
 8000a86:	40d3      	lsrs	r3, r2
 8000a88:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d904      	bls.n	8000a9e <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000a94:	4b3e      	ldr	r3, [pc, #248]	; (8000b90 <HW_TS_Init+0x1b4>)
 8000a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a9a:	801a      	strh	r2, [r3, #0]
 8000a9c:	e003      	b.n	8000aa6 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <HW_TS_Init+0x1b4>)
 8000aa4:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000aa6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000aaa:	f7ff ff85 	bl	80009b8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000aae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ab2:	f7ff ff6d 	bl	8000990 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d143      	bne.n	8000b44 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000abc:	4b35      	ldr	r3, [pc, #212]	; (8000b94 <HW_TS_Init+0x1b8>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000ac2:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <HW_TS_Init+0x1bc>)
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac8:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	77fb      	strb	r3, [r7, #31]
 8000ace:	e00c      	b.n	8000aea <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000ad0:	7ffa      	ldrb	r2, [r7, #31]
 8000ad2:	4932      	ldr	r1, [pc, #200]	; (8000b9c <HW_TS_Init+0x1c0>)
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	440b      	add	r3, r1
 8000ade:	330c      	adds	r3, #12
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000ae4:	7ffb      	ldrb	r3, [r7, #31]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	77fb      	strb	r3, [r7, #31]
 8000aea:	7ffb      	ldrb	r3, [r7, #31]
 8000aec:	2b05      	cmp	r3, #5
 8000aee:	d9ef      	bls.n	8000ad0 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000af0:	4b2b      	ldr	r3, [pc, #172]	; (8000ba0 <HW_TS_Init+0x1c4>)
 8000af2:	2206      	movs	r2, #6
 8000af4:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <HW_TS_Init+0x1a0>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <HW_TS_Init+0x1a0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b08:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <HW_TS_Init+0x1a0>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <HW_TS_Init+0x1a0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b1e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000b20:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <HW_TS_Init+0x1c8>)
 8000b22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b26:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 ff84 	bl	8001a36 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <HW_TS_Init+0x1a0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	689a      	ldr	r2, [r3, #8]
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HW_TS_Init+0x1a0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	e00a      	b.n	8000b5a <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000b44:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <HW_TS_Init+0x1a0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d002      	beq.n	8000b5a <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 ff60 	bl	8001a1a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HW_TS_Init+0x1a0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	22ff      	movs	r2, #255	; 0xff
 8000b62:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000b64:	2200      	movs	r2, #0
 8000b66:	2103      	movs	r1, #3
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 ff22 	bl	80019b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000b6e:	2003      	movs	r0, #3
 8000b70:	f000 ff39 	bl	80019e6 <HAL_NVIC_EnableIRQ>

  return;
 8000b74:	bf00      	nop
}
 8000b76:	3720      	adds	r7, #32
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000130 	.word	0x20000130
 8000b80:	40002800 	.word	0x40002800
 8000b84:	20000134 	.word	0x20000134
 8000b88:	20000135 	.word	0x20000135
 8000b8c:	20000136 	.word	0x20000136
 8000b90:	20000138 	.word	0x20000138
 8000b94:	200000bc 	.word	0x200000bc
 8000b98:	200000b8 	.word	0x200000b8
 8000b9c:	20000024 	.word	0x20000024
 8000ba0:	200000b4 	.word	0x200000b4
 8000ba4:	58000800 	.word	0x58000800

08000ba8 <LL_RCC_LSE_SetDriveCapability>:
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bb8:	f023 0218 	bic.w	r2, r3, #24
 8000bbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <LL_AHB2_GRP1_EnableClock>:
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000be2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
}
 8000bfa:	bf00      	nop
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0a:	f000 fd15 	bl	8001638 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8000c0e:	f7ff fd0f 	bl	8000630 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c12:	f000 f811 	bl	8000c38 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c16:	f000 f85b 	bl	8000cd0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8000c1a:	f000 f8b9 	bl	8000d90 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1e:	f000 f907 	bl	8000e30 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c22:	f000 f875 	bl	8000d10 <MX_I2C1_Init>
  MX_RF_Init();
 8000c26:	f000 f8c7 	bl	8000db8 <MX_RF_Init>
  MX_RTC_Init();
 8000c2a:	f000 f8cd 	bl	8000dc8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8000c2e:	f7ff fd0d 	bl	800064c <MX_APPE_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8000c32:	f7ff fe70 	bl	8000916 <MX_APPE_Process>
 8000c36:	e7fc      	b.n	8000c32 <main+0x2c>

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b098      	sub	sp, #96	; 0x60
 8000c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	2244      	movs	r2, #68	; 0x44
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f006 fb62 	bl	8007310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]
 8000c5a:	615a      	str	r2, [r3, #20]
 8000c5c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c5e:	f002 f81d 	bl	8002c9c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff ffa0 	bl	8000ba8 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000c68:	2307      	movs	r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c70:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c72:	2301      	movs	r3, #1
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7c:	2340      	movs	r3, #64	; 0x40
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 fbc5 	bl	8003418 <HAL_RCC_OscConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000c94:	f000 f946 	bl	8000f24 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000c98:	236f      	movs	r3, #111	; 0x6f
 8000c9a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 fee3 	bl	8003a84 <HAL_RCC_ClockConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000cc4:	f000 f92e 	bl	8000f24 <Error_Handler>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3760      	adds	r7, #96	; 0x60
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08c      	sub	sp, #48	; 0x30
 8000cd4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2230      	movs	r2, #48	; 0x30
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f006 fb17 	bl	8007310 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8000ce2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ce6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8000ce8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f003 fa59 	bl	80041b0 <HAL_RCCEx_PeriphCLKConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000d04:	f000 f90e 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000d08:	bf00      	nop
 8000d0a:	3730      	adds	r7, #48	; 0x30
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d16:	4a1c      	ldr	r2, [pc, #112]	; (8000d88 <MX_I2C1_Init+0x78>)
 8000d18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d1c:	4a1b      	ldr	r2, [pc, #108]	; (8000d8c <MX_I2C1_Init+0x7c>)
 8000d1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d4c:	f001 f996 	bl	800207c <HAL_I2C_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d56:	f000 f8e5 	bl	8000f24 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d5e:	f001 fe7f 	bl	8002a60 <HAL_I2CEx_ConfigAnalogFilter>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d68:	f000 f8dc 	bl	8000f24 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d70:	f001 fec1 	bl	8002af6 <HAL_I2CEx_ConfigDigitalFilter>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d7a:	f000 f8d3 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	2000013c 	.word	0x2000013c
 8000d88:	40005400 	.word	0x40005400
 8000d8c:	00303d5b 	.word	0x00303d5b

08000d90 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_IPCC_Init+0x20>)
 8000d96:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <MX_IPCC_Init+0x24>)
 8000d98:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_IPCC_Init+0x20>)
 8000d9c:	f001 fef8 	bl	8002b90 <HAL_IPCC_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000da6:	f000 f8bd 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000190 	.word	0x20000190
 8000db4:	58000c00 	.word	0x58000c00

08000db8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <MX_RTC_Init+0x60>)
 8000dce:	4a17      	ldr	r2, [pc, #92]	; (8000e2c <MX_RTC_Init+0x64>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <MX_RTC_Init+0x60>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <MX_RTC_Init+0x60>)
 8000dda:	220f      	movs	r2, #15
 8000ddc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_RTC_Init+0x60>)
 8000de0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000de4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_RTC_Init+0x60>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_RTC_Init+0x60>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <MX_RTC_Init+0x60>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <MX_RTC_Init+0x60>)
 8000dfa:	f003 facf 	bl	800439c <HAL_RTC_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8000e04:	f000 f88e 	bl	8000f24 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e0e:	4806      	ldr	r0, [pc, #24]	; (8000e28 <MX_RTC_Init+0x60>)
 8000e10:	f003 fbb2 	bl	8004578 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000e1a:	f000 f883 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000e1e:	4802      	ldr	r0, [pc, #8]	; (8000e28 <MX_RTC_Init+0x60>)
 8000e20:	f003 fc66 	bl	80046f0 <HAL_RTCEx_DeactivateWakeUpTimer>
  /* USER CODE END RTC_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200001cc 	.word	0x200001cc
 8000e2c:	40002800 	.word	0x40002800

08000e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e44:	2004      	movs	r0, #4
 8000e46:	f7ff fec5 	bl	8000bd4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4a:	2080      	movs	r0, #128	; 0x80
 8000e4c:	f7ff fec2 	bl	8000bd4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	2002      	movs	r0, #2
 8000e52:	f7ff febf 	bl	8000bd4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff febc 	bl	8000bd4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5c:	2010      	movs	r0, #16
 8000e5e:	f7ff feb9 	bl	8000bd4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e62:	2308      	movs	r3, #8
 8000e64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e66:	2303      	movs	r3, #3
 8000e68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	481f      	ldr	r0, [pc, #124]	; (8000ef0 <MX_GPIO_Init+0xc0>)
 8000e74:	f000 ff5e 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e7c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f000 ff51 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB0 PB1 PB3
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3
 8000e92:	23ef      	movs	r3, #239	; 0xef
 8000e94:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e96:	2303      	movs	r3, #3
 8000e98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4814      	ldr	r0, [pc, #80]	; (8000ef4 <MX_GPIO_Init+0xc4>)
 8000ea4:	f000 ff46 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eac:	2303      	movs	r3, #3
 8000eae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480f      	ldr	r0, [pc, #60]	; (8000ef8 <MX_GPIO_Init+0xc8>)
 8000eba:	f000 ff3b 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : Data_Ready_Pin */
  GPIO_InitStruct.Pin = Data_Ready_Pin;
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ec2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ec6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Data_Ready_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <MX_GPIO_Init+0xc4>)
 8000ed2:	f000 ff2f 	bl	8001d34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	200a      	movs	r0, #10
 8000edc:	f000 fd69 	bl	80019b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ee0:	200a      	movs	r0, #10
 8000ee2:	f000 fd80 	bl	80019e6 <HAL_NVIC_EnableIRQ>

}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	48001c00 	.word	0x48001c00
 8000ef4:	48000400 	.word	0x48000400
 8000ef8:	48001000 	.word	0x48001000

08000efc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Data_Ready_Pin) {
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	2b10      	cmp	r3, #16
 8000f0a:	d107      	bne.n	8000f1c <HAL_GPIO_EXTI_Callback+0x20>
		SystemClock_Config ();
 8000f0c:	f7ff fe94 	bl	8000c38 <SystemClock_Config>
		HAL_ResumeTick();
 8000f10:	f000 fc28 	bl	8001764 <HAL_ResumeTick>
		UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_TEMP, CFG_SCH_PRIO_0);
 8000f14:	2100      	movs	r1, #0
 8000f16:	2008      	movs	r0, #8
 8000f18:	f006 f8a8 	bl	800706c <UTIL_SEQ_SetTask>
	}
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <Error_Handler+0x8>
	...

08000f30 <LL_PWR_SetPowerMode>:
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <LL_PWR_SetPowerMode+0x24>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f023 0207 	bic.w	r2, r3, #7
 8000f40:	4904      	ldr	r1, [pc, #16]	; (8000f54 <LL_PWR_SetPowerMode+0x24>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	600b      	str	r3, [r1, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	58000400 	.word	0x58000400

08000f58 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <LL_PWR_ClearFlag_WU+0x14>)
 8000f5e:	2209      	movs	r2, #9
 8000f60:	619a      	str	r2, [r3, #24]
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	58000400 	.word	0x58000400

08000f70 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f82:	d101      	bne.n	8000f88 <LL_PWR_IsActiveFlag_C2SB+0x18>
 8000f84:	2301      	movs	r3, #1
 8000f86:	e000      	b.n	8000f8a <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	58000400 	.word	0x58000400

08000f98 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8000f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000faa:	d101      	bne.n	8000fb0 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8000fac:	2301      	movs	r3, #1
 8000fae:	e000      	b.n	8000fb2 <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	58000400 	.word	0x58000400

08000fc0 <LL_RCC_HSI_Enable>:
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <LL_RCC_HSI_IsReady>:
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff0:	d101      	bne.n	8000ff6 <LL_RCC_HSI_IsReady+0x18>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <LL_RCC_HSI_IsReady+0x1a>
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <LL_RCC_SetSysClkSource>:
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800100a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f023 0203 	bic.w	r2, r3, #3
 8001014:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4313      	orrs	r3, r2
 800101c:	608b      	str	r3, [r1, #8]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <LL_RCC_GetSysClkSource>:
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800102e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 030c 	and.w	r3, r3, #12
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <LL_RCC_SetSMPSClockSource>:
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800104a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800104e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001050:	f023 0203 	bic.w	r2, r3, #3
 8001054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4313      	orrs	r3, r2
 800105c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800106e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001076:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800107a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800107e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <LL_LPM_EnableSleep+0x1c>)
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <LL_LPM_EnableSleep+0x1c>)
 8001096:	f023 0304 	bic.w	r3, r3, #4
 800109a:	6113      	str	r3, [r2, #16]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <LL_LPM_EnableDeepSleep+0x1c>)
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <LL_LPM_EnableDeepSleep+0x1c>)
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	6113      	str	r3, [r2, #16]
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	3220      	adds	r2, #32
 80010dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e0:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <LL_HSEM_1StepLock+0x2c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d001      	beq.n	80010ea <LL_HSEM_1StepLock+0x1e>
 80010e6:	2301      	movs	r3, #1
 80010e8:	e000      	b.n	80010ec <LL_HSEM_1StepLock+0x20>
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	80000400 	.word	0x80000400

080010fc <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8001126:	f000 fb0d 	bl	8001744 <HAL_SuspendTick>
  __HAL_RCC_CLEAR_RESET_FLAGS();
 800112a:	f7ff ff9e 	bl	800106a <LL_RCC_ClearResetFlags>

  EnterLowPower();
 800112e:	f000 f835 	bl	800119c <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8001132:	f7ff ff11 	bl	8000f58 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8001136:	2003      	movs	r0, #3
 8001138:	f7ff fefa 	bl	8000f30 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 800113c:	f7ff ffb6 	bl	80010ac <LL_LPM_EnableDeepSleep>
#endif

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8001140:	bf00      	nop
}
 8001142:	bd80      	pop	{r7, pc}

08001144 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  }
#endif
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8001148:	bf00      	nop
}
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 8001156:	f000 faf5 	bl	8001744 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 800115a:	f000 f81f 	bl	800119c <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 800115e:	2001      	movs	r0, #1
 8001160:	f7ff fee6 	bl	8000f30 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001164:	f7ff ffa2 	bl	80010ac <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001168:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 800116a:	bf00      	nop
}
 800116c:	bd80      	pop	{r7, pc}

0800116e <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8001172:	f000 f84f 	bl	8001214 <ExitLowPower>

  HAL_ResumeTick();
 8001176:	f000 faf5 	bl	8001764 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 800117a:	bf00      	nop
}
 800117c:	bd80      	pop	{r7, pc}

0800117e <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8001182:	f000 fadf 	bl	8001744 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001186:	f7ff ff81 	bl	800108c <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 800118a:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 800118c:	bf00      	nop
}
 800118e:	bd80      	pop	{r7, pc}

08001190 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8001194:	f000 fae6 	bl	8001764 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8001198:	bf00      	nop
}
 800119a:	bd80      	pop	{r7, pc}

0800119c <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 80011a0:	bf00      	nop
 80011a2:	2103      	movs	r1, #3
 80011a4:	4819      	ldr	r0, [pc, #100]	; (800120c <EnterLowPower+0x70>)
 80011a6:	f7ff ff91 	bl	80010cc <LL_HSEM_1StepLock>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1f8      	bne.n	80011a2 <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 80011b0:	2104      	movs	r1, #4
 80011b2:	4816      	ldr	r0, [pc, #88]	; (800120c <EnterLowPower+0x70>)
 80011b4:	f7ff ff8a 	bl	80010cc <LL_HSEM_1StepLock>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d117      	bne.n	80011ee <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 80011be:	f7ff feeb 	bl	8000f98 <LL_PWR_IsActiveFlag_C2DS>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d104      	bne.n	80011d2 <EnterLowPower+0x36>
 80011c8:	f7ff fed2 	bl	8000f70 <LL_PWR_IsActiveFlag_C2SB>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d015      	beq.n	80011fe <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2104      	movs	r1, #4
 80011d6:	480d      	ldr	r0, [pc, #52]	; (800120c <EnterLowPower+0x70>)
 80011d8:	f7ff ff90 	bl	80010fc <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 80011dc:	f000 f834 	bl	8001248 <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <EnterLowPower+0x74>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <EnterLowPower+0x74>)
 80011e6:	f023 0307 	bic.w	r3, r3, #7
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	e007      	b.n	80011fe <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 80011ee:	f000 f82b 	bl	8001248 <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <EnterLowPower+0x74>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a06      	ldr	r2, [pc, #24]	; (8001210 <EnterLowPower+0x74>)
 80011f8:	f023 0307 	bic.w	r3, r3, #7
 80011fc:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2103      	movs	r1, #3
 8001202:	4802      	ldr	r0, [pc, #8]	; (800120c <EnterLowPower+0x70>)
 8001204:	f7ff ff7a 	bl	80010fc <LL_HSEM_ReleaseLock>

  return;
 8001208:	bf00      	nop
}
 800120a:	bd80      	pop	{r7, pc}
 800120c:	58001400 	.word	0x58001400
 8001210:	58004000 	.word	0x58004000

08001214 <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001218:	2200      	movs	r2, #0
 800121a:	2104      	movs	r1, #4
 800121c:	4809      	ldr	r0, [pc, #36]	; (8001244 <ExitLowPower+0x30>)
 800121e:	f7ff ff6d 	bl	80010fc <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001222:	bf00      	nop
 8001224:	2103      	movs	r1, #3
 8001226:	4807      	ldr	r0, [pc, #28]	; (8001244 <ExitLowPower+0x30>)
 8001228:	f7ff ff50 	bl	80010cc <LL_HSEM_1StepLock>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f8      	bne.n	8001224 <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001232:	f7ff fefa 	bl	800102a <LL_RCC_GetSysClkSource>

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
#endif

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2103      	movs	r1, #3
 800123a:	4802      	ldr	r0, [pc, #8]	; (8001244 <ExitLowPower+0x30>)
 800123c:	f7ff ff5e 	bl	80010fc <LL_HSEM_ReleaseLock>

  return;
 8001240:	bf00      	nop
}
 8001242:	bd80      	pop	{r7, pc}
 8001244:	58001400 	.word	0x58001400

08001248 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 800124c:	f7ff feb8 	bl	8000fc0 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8001250:	bf00      	nop
 8001252:	f7ff fec4 	bl	8000fde <LL_RCC_HSI_IsReady>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0fa      	beq.n	8001252 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800125c:	2001      	movs	r0, #1
 800125e:	f7ff fed0 	bl	8001002 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff feed 	bl	8001042 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8001268:	bf00      	nop
 800126a:	f7ff fede 	bl	800102a <LL_RCC_GetSysClkSource>
 800126e:	4603      	mov	r3, r0
 8001270:	2b04      	cmp	r3, #4
 8001272:	d1fa      	bne.n	800126a <Switch_On_HSI+0x22>
  return;
 8001274:	bf00      	nop
}
 8001276:	bd80      	pop	{r7, pc}

08001278 <LL_RCC_EnableRTC>:
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800127c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001284:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800128c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_AHB2_GRP1_EnableClock>:
{
 800129a:	b480      	push	{r7}
 800129c:	b085      	sub	sp, #20
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4013      	ands	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012be:	68fb      	ldr	r3, [r7, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_AHB3_GRP1_EnableClock>:
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80012d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80012e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4013      	ands	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012f0:	68fb      	ldr	r3, [r7, #12]
}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012fe:	b480      	push	{r7}
 8001300:	b085      	sub	sp, #20
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800130a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800130c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4313      	orrs	r3, r2
 8001314:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800131a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4013      	ands	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001322:	68fb      	ldr	r3, [r7, #12]
}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001334:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001338:	f7ff ffc8 	bl	80012cc <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2100      	movs	r1, #0
 8001340:	202e      	movs	r0, #46	; 0x2e
 8001342:	f000 fb36 	bl	80019b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001346:	202e      	movs	r0, #46	; 0x2e
 8001348:	f000 fb4d 	bl	80019e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b094      	sub	sp, #80	; 0x50
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2230      	movs	r2, #48	; 0x30
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f005 ffcd 	bl	8007310 <memset>
  if(hi2c->Instance==I2C1)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <HAL_I2C_MspInit+0x88>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d126      	bne.n	80013ce <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001380:	2304      	movs	r3, #4
 8001382:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001384:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001388:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	4618      	mov	r0, r3
 8001390:	f002 ff0e 	bl	80041b0 <HAL_RCCEx_PeriphCLKConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800139a:	f7ff fdc3 	bl	8000f24 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	2002      	movs	r0, #2
 80013a0:	f7ff ff7b 	bl	800129a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013aa:	2312      	movs	r3, #18
 80013ac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b6:	2304      	movs	r3, #4
 80013b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013be:	4619      	mov	r1, r3
 80013c0:	4806      	ldr	r0, [pc, #24]	; (80013dc <HAL_I2C_MspInit+0x8c>)
 80013c2:	f000 fcb7 	bl	8001d34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80013ca:	f7ff ff98 	bl	80012fe <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013ce:	bf00      	nop
 80013d0:	3750      	adds	r7, #80	; 0x50
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40005400 	.word	0x40005400
 80013dc:	48000400 	.word	0x48000400

080013e0 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a0d      	ldr	r2, [pc, #52]	; (8001424 <HAL_IPCC_MspInit+0x44>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d113      	bne.n	800141a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80013f2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80013f6:	f7ff ff69 	bl	80012cc <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	202c      	movs	r0, #44	; 0x2c
 8001400:	f000 fad7 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001404:	202c      	movs	r0, #44	; 0x2c
 8001406:	f000 faee 	bl	80019e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	202d      	movs	r0, #45	; 0x2d
 8001410:	f000 facf 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001414:	202d      	movs	r0, #45	; 0x2d
 8001416:	f000 fae6 	bl	80019e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	58000c00 	.word	0x58000c00

08001428 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08e      	sub	sp, #56	; 0x38
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	2230      	movs	r2, #48	; 0x30
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f005 ff69 	bl	8007310 <memset>
  if(hrtc->Instance==RTC)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <HAL_RTC_MspInit+0x64>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d11d      	bne.n	8001484 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001448:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800144c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800144e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001454:	f107 0308 	add.w	r3, r7, #8
 8001458:	4618      	mov	r0, r3
 800145a:	f002 fea9 	bl	80041b0 <HAL_RCCEx_PeriphCLKConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001464:	f7ff fd5e 	bl	8000f24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001468:	f7ff ff06 	bl	8001278 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800146c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001470:	f7ff ff45 	bl	80012fe <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 15, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	210f      	movs	r1, #15
 8001478:	2003      	movs	r0, #3
 800147a:	f000 fa9a 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800147e:	2003      	movs	r0, #3
 8001480:	f000 fab1 	bl	80019e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001484:	bf00      	nop
 8001486:	3738      	adds	r7, #56	; 0x38
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40002800 	.word	0x40002800

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <NMI_Handler+0x4>

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014dc:	f000 f906 	bl	80016ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <RTC_WKUP_IRQHandler+0x10>)
 80014ea:	f003 f95f 	bl	80047ac <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200001cc 	.word	0x200001cc

080014f8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Data_Ready_Pin);
 80014fc:	2010      	movs	r0, #16
 80014fe:	f000 fd81 	bl	8002004 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}

08001506 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800150a:	f005 fad5 	bl	8006ab8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}

08001512 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001516:	f005 fb07 	bl	8006b28 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}

0800151e <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001522:	f000 fd87 	bl	8002034 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001530:	4b22      	ldr	r3, [pc, #136]	; (80015bc <SystemInit+0x90>)
 8001532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001536:	4a21      	ldr	r2, [pc, #132]	; (80015bc <SystemInit+0x90>)
 8001538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800153c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800154a:	f043 0301 	orr.w	r3, r3, #1
 800154e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001554:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001558:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800155a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001564:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <SystemInit+0x94>)
 8001566:	4013      	ands	r3, r2
 8001568:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800156a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001572:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001576:	f023 0305 	bic.w	r3, r3, #5
 800157a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800157e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001582:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001586:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800158a:	f023 0301 	bic.w	r3, r3, #1
 800158e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001596:	4a0b      	ldr	r2, [pc, #44]	; (80015c4 <SystemInit+0x98>)
 8001598:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800159a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00
 80015c0:	faf6fefb 	.word	0xfaf6fefb
 80015c4:	22041000 	.word	0x22041000

080015c8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80015c8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ca:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015cc:	3304      	adds	r3, #4

080015ce <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ce:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015d0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80015d2:	d3f9      	bcc.n	80015c8 <CopyDataInit>
  bx lr
 80015d4:	4770      	bx	lr

080015d6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80015d6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80015d8:	3004      	adds	r0, #4

080015da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80015da:	4288      	cmp	r0, r1
  bcc FillZerobss
 80015dc:	d3fb      	bcc.n	80015d6 <FillZerobss>
  bx lr
 80015de:	4770      	bx	lr

080015e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015e0:	480c      	ldr	r0, [pc, #48]	; (8001614 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80015e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015e4:	f7ff ffa2 	bl	800152c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80015e8:	480b      	ldr	r0, [pc, #44]	; (8001618 <LoopForever+0x8>)
 80015ea:	490c      	ldr	r1, [pc, #48]	; (800161c <LoopForever+0xc>)
 80015ec:	4a0c      	ldr	r2, [pc, #48]	; (8001620 <LoopForever+0x10>)
 80015ee:	2300      	movs	r3, #0
 80015f0:	f7ff ffed 	bl	80015ce <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80015f4:	480b      	ldr	r0, [pc, #44]	; (8001624 <LoopForever+0x14>)
 80015f6:	490c      	ldr	r1, [pc, #48]	; (8001628 <LoopForever+0x18>)
 80015f8:	2300      	movs	r3, #0
 80015fa:	f7ff ffee 	bl	80015da <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80015fe:	480b      	ldr	r0, [pc, #44]	; (800162c <LoopForever+0x1c>)
 8001600:	490b      	ldr	r1, [pc, #44]	; (8001630 <LoopForever+0x20>)
 8001602:	2300      	movs	r3, #0
 8001604:	f7ff ffe9 	bl	80015da <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001608:	f005 fe50 	bl	80072ac <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800160c:	f7ff fafb 	bl	8000c06 <main>

08001610 <LoopForever>:

LoopForever:
  b LoopForever
 8001610:	e7fe      	b.n	8001610 <LoopForever>
 8001612:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001614:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8001618:	20000004 	.word	0x20000004
 800161c:	20000024 	.word	0x20000024
 8001620:	080075d0 	.word	0x080075d0
  INIT_BSS _sbss, _ebss
 8001624:	2000010c 	.word	0x2000010c
 8001628:	20000334 	.word	0x20000334
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800162c:	200301e4 	.word	0x200301e4
 8001630:	20030a67 	.word	0x20030a67

08001634 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001634:	e7fe      	b.n	8001634 <ADC1_IRQHandler>
	...

08001638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800163e:	2300      	movs	r3, #0
 8001640:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <HAL_Init+0x3c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <HAL_Init+0x3c>)
 8001648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800164c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800164e:	2003      	movs	r0, #3
 8001650:	f000 f9a4 	bl	800199c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001654:	200f      	movs	r0, #15
 8001656:	f000 f80f 	bl	8001678 <HAL_InitTick>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	71fb      	strb	r3, [r7, #7]
 8001664:	e001      	b.n	800166a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001666:	f7ff fe63 	bl	8001330 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800166a:	79fb      	ldrb	r3, [r7, #7]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	58004000 	.word	0x58004000

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_InitTick+0x6c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d024      	beq.n	80016d6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800168c:	f002 fba6 	bl	8003ddc <HAL_RCC_GetHCLKFreq>
 8001690:	4602      	mov	r2, r0
 8001692:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <HAL_InitTick+0x6c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	4619      	mov	r1, r3
 8001698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169c:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 f9ac 	bl	8001a02 <HAL_SYSTICK_Config>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10f      	bne.n	80016d0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b0f      	cmp	r3, #15
 80016b4:	d809      	bhi.n	80016ca <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b6:	2200      	movs	r2, #0
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	f04f 30ff 	mov.w	r0, #4294967295
 80016be:	f000 f978 	bl	80019b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016c2:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <HAL_InitTick+0x70>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	e007      	b.n	80016da <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	e004      	b.n	80016da <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	e001      	b.n	80016da <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016da:	7bfb      	ldrb	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000018 	.word	0x20000018
 80016e8:	20000014 	.word	0x20000014

080016ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_IncTick+0x20>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_IncTick+0x24>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4413      	add	r3, r2
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <HAL_IncTick+0x24>)
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000018 	.word	0x20000018
 8001710:	200001f4 	.word	0x200001f4

08001714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  return uwTick;
 8001718:	4b03      	ldr	r3, [pc, #12]	; (8001728 <HAL_GetTick+0x14>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	200001f4 	.word	0x200001f4

0800172c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <HAL_GetTickPrio+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000014 	.word	0x20000014

08001744 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <HAL_SuspendTick+0x1c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_SuspendTick+0x1c>)
 800174e:	f023 0302 	bic.w	r3, r3, #2
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000e010 	.word	0xe000e010

08001764 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_ResumeTick+0x1c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a04      	ldr	r2, [pc, #16]	; (8001780 <HAL_ResumeTick+0x1c>)
 800176e:	f043 0302 	orr.w	r3, r3, #2
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000e010 	.word	0xe000e010

08001784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <__NVIC_GetPriorityGrouping+0x18>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0307 	and.w	r3, r3, #7
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db0b      	blt.n	8001812 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 021f 	and.w	r2, r3, #31
 8001800:	4907      	ldr	r1, [pc, #28]	; (8001820 <__NVIC_EnableIRQ+0x38>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	2001      	movs	r0, #1
 800180a:	fa00 f202 	lsl.w	r2, r0, r2
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e100 	.word	0xe000e100

08001824 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	db0c      	blt.n	8001850 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	f003 021f 	and.w	r2, r3, #31
 800183c:	4907      	ldr	r1, [pc, #28]	; (800185c <__NVIC_SetPendingIRQ+0x38>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	2001      	movs	r0, #1
 8001846:	fa00 f202 	lsl.w	r2, r0, r2
 800184a:	3340      	adds	r3, #64	; 0x40
 800184c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100

08001860 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db0c      	blt.n	800188c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	4907      	ldr	r1, [pc, #28]	; (8001898 <__NVIC_ClearPendingIRQ+0x38>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2001      	movs	r0, #1
 8001882:	fa00 f202 	lsl.w	r2, r0, r2
 8001886:	3360      	adds	r3, #96	; 0x60
 8001888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100

0800189c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	db0a      	blt.n	80018c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	490c      	ldr	r1, [pc, #48]	; (80018e8 <__NVIC_SetPriority+0x4c>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	0112      	lsls	r2, r2, #4
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	440b      	add	r3, r1
 80018c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c4:	e00a      	b.n	80018dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4908      	ldr	r1, [pc, #32]	; (80018ec <__NVIC_SetPriority+0x50>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	3b04      	subs	r3, #4
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	440b      	add	r3, r1
 80018da:	761a      	strb	r2, [r3, #24]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	; 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f1c3 0307 	rsb	r3, r3, #7
 800190a:	2b04      	cmp	r3, #4
 800190c:	bf28      	it	cs
 800190e:	2304      	movcs	r3, #4
 8001910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3304      	adds	r3, #4
 8001916:	2b06      	cmp	r3, #6
 8001918:	d902      	bls.n	8001920 <NVIC_EncodePriority+0x30>
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3b03      	subs	r3, #3
 800191e:	e000      	b.n	8001922 <NVIC_EncodePriority+0x32>
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	f04f 32ff 	mov.w	r2, #4294967295
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	401a      	ands	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001938:	f04f 31ff 	mov.w	r1, #4294967295
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43d9      	mvns	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	4313      	orrs	r3, r2
         );
}
 800194a:	4618      	mov	r0, r3
 800194c:	3724      	adds	r7, #36	; 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001968:	d301      	bcc.n	800196e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196a:	2301      	movs	r3, #1
 800196c:	e00f      	b.n	800198e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <SysTick_Config+0x40>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001976:	210f      	movs	r1, #15
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f7ff ff8e 	bl	800189c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001980:	4b05      	ldr	r3, [pc, #20]	; (8001998 <SysTick_Config+0x40>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	4b04      	ldr	r3, [pc, #16]	; (8001998 <SysTick_Config+0x40>)
 8001988:	2207      	movs	r2, #7
 800198a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	e000e010 	.word	0xe000e010

0800199c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff feed 	bl	8001784 <__NVIC_SetPriorityGrouping>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019c0:	f7ff ff04 	bl	80017cc <__NVIC_GetPriorityGrouping>
 80019c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	6978      	ldr	r0, [r7, #20]
 80019cc:	f7ff ff90 	bl	80018f0 <NVIC_EncodePriority>
 80019d0:	4602      	mov	r2, r0
 80019d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff5f 	bl	800189c <__NVIC_SetPriority>
}
 80019de:	bf00      	nop
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fef7 	bl	80017e8 <__NVIC_EnableIRQ>
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffa4 	bl	8001958 <SysTick_Config>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	4603      	mov	r3, r0
 8001a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fefb 	bl	8001824 <__NVIC_SetPendingIRQ>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b082      	sub	sp, #8
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff0b 	bl	8001860 <__NVIC_ClearPendingIRQ>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_FLASH_Unlock+0x38>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	da0b      	bge.n	8001a7e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_FLASH_Unlock+0x38>)
 8001a68:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_FLASH_Unlock+0x3c>)
 8001a6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <HAL_FLASH_Unlock+0x38>)
 8001a6e:	4a09      	ldr	r2, [pc, #36]	; (8001a94 <HAL_FLASH_Unlock+0x40>)
 8001a70:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_FLASH_Unlock+0x38>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	da01      	bge.n	8001a7e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	58004000 	.word	0x58004000
 8001a90:	45670123 	.word	0x45670123
 8001a94:	cdef89ab 	.word	0xcdef89ab

08001a98 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <HAL_FLASH_Lock+0x30>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	4a08      	ldr	r2, [pc, #32]	; (8001ac8 <HAL_FLASH_Lock+0x30>)
 8001aa8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001aac:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_FLASH_Lock+0x30>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	db01      	blt.n	8001aba <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8001aba:	79fb      	ldrb	r3, [r7, #7]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	58004000 	.word	0x58004000

08001acc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8001ad4:	f7ff fe1e 	bl	8001714 <HAL_GetTick>
 8001ad8:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001ada:	e009      	b.n	8001af0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001adc:	f7ff fe1a 	bl	8001714 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d801      	bhi.n	8001af0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e054      	b.n	8001b9a <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001af0:	4b2c      	ldr	r3, [pc, #176]	; (8001ba4 <FLASH_WaitForLastOperation+0xd8>)
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afc:	d0ee      	beq.n	8001adc <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8001afe:	4b29      	ldr	r3, [pc, #164]	; (8001ba4 <FLASH_WaitForLastOperation+0xd8>)
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d002      	beq.n	8001b14 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b0e:	4b25      	ldr	r3, [pc, #148]	; (8001ba4 <FLASH_WaitForLastOperation+0xd8>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d007      	beq.n	8001b2e <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001b1e:	4b21      	ldr	r3, [pc, #132]	; (8001ba4 <FLASH_WaitForLastOperation+0xd8>)
 8001b20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b24:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001b2c:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8001b34:	4013      	ands	r3, r2
 8001b36:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d007      	beq.n	8001b52 <FLASH_WaitForLastOperation+0x86>
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <FLASH_WaitForLastOperation+0xd8>)
 8001b44:	699a      	ldr	r2, [r3, #24]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001b4c:	4915      	ldr	r1, [pc, #84]	; (8001ba4 <FLASH_WaitForLastOperation+0xd8>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	618b      	str	r3, [r1, #24]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d004      	beq.n	8001b66 <FLASH_WaitForLastOperation+0x9a>
 8001b5c:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <FLASH_WaitForLastOperation+0xd8>)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001b64:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00e      	beq.n	8001b8a <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8001b6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <FLASH_WaitForLastOperation+0xdc>)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e011      	b.n	8001b9a <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001b76:	f7ff fdcd 	bl	8001714 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d801      	bhi.n	8001b8a <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e007      	b.n	8001b9a <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <FLASH_WaitForLastOperation+0xd8>)
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b96:	d0ee      	beq.n	8001b76 <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	58004000 	.word	0x58004000
 8001ba8:	200001f8 	.word	0x200001f8

08001bac <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001bb6:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <HAL_FLASHEx_Erase+0x9c>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_FLASHEx_Erase+0x16>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e03d      	b.n	8001c3e <HAL_FLASHEx_Erase+0x92>
 8001bc2:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <HAL_FLASHEx_Erase+0x9c>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <HAL_FLASHEx_Erase+0x9c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001bce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bd2:	f7ff ff7b 	bl	8001acc <FLASH_WaitForLastOperation>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d12a      	bne.n	8001c36 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d124      	bne.n	8001c32 <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	f04f 32ff 	mov.w	r2, #4294967295
 8001bee:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	e012      	b.n	8001c1e <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8001bf8:	68b8      	ldr	r0, [r7, #8]
 8001bfa:	f000 f827 	bl	8001c4c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001bfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c02:	f7ff ff63 	bl	8001acc <FLASH_WaitForLastOperation>
 8001c06:	4603      	mov	r3, r0
 8001c08:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8001c0a:	7bfb      	ldrb	r3, [r7, #15]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d003      	beq.n	8001c18 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	601a      	str	r2, [r3, #0]
          break;
 8001c16:	e00a      	b.n	8001c2e <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	4413      	add	r3, r2
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d3e4      	bcc.n	8001bf8 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8001c2e:	f000 f86f 	bl	8001d10 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001c32:	f000 f825 	bl	8001c80 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c36:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <HAL_FLASHEx_Erase+0x9c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]

  return status;
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200001f8 	.word	0x200001f8

08001c4c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <FLASH_PageErase+0x30>)
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4313      	orrs	r3, r2
 8001c62:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <FLASH_PageErase+0x30>)
 8001c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c68:	f043 0302 	orr.w	r3, r3, #2
 8001c6c:	6153      	str	r3, [r2, #20]
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	58004000 	.word	0x58004000

08001c80 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8001c84:	4b21      	ldr	r3, [pc, #132]	; (8001d0c <FLASH_FlushCaches+0x8c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c90:	d117      	bne.n	8001cc2 <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001c92:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <FLASH_FlushCaches+0x8c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <FLASH_FlushCaches+0x8c>)
 8001c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c9c:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001c9e:	4b1b      	ldr	r3, [pc, #108]	; (8001d0c <FLASH_FlushCaches+0x8c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1a      	ldr	r2, [pc, #104]	; (8001d0c <FLASH_FlushCaches+0x8c>)
 8001ca4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b18      	ldr	r3, [pc, #96]	; (8001d0c <FLASH_FlushCaches+0x8c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a17      	ldr	r2, [pc, #92]	; (8001d0c <FLASH_FlushCaches+0x8c>)
 8001cb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cb4:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <FLASH_FlushCaches+0x8c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <FLASH_FlushCaches+0x8c>)
 8001cbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc0:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <FLASH_FlushCaches+0x8c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cce:	d117      	bne.n	8001d00 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <FLASH_FlushCaches+0x8c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <FLASH_FlushCaches+0x8c>)
 8001cd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cda:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <FLASH_FlushCaches+0x8c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <FLASH_FlushCaches+0x8c>)
 8001ce2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <FLASH_FlushCaches+0x8c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <FLASH_FlushCaches+0x8c>)
 8001cee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001cf2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <FLASH_FlushCaches+0x8c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <FLASH_FlushCaches+0x8c>)
 8001cfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cfe:	6013      	str	r3, [r2, #0]
  }
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	58004000 	.word	0x58004000

08001d10 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <FLASH_AcknowledgePageErase+0x20>)
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <FLASH_AcknowledgePageErase+0x20>)
 8001d1a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d1e:	f023 0302 	bic.w	r3, r3, #2
 8001d22:	6153      	str	r3, [r2, #20]
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	58004000 	.word	0x58004000

08001d34 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b087      	sub	sp, #28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d42:	e146      	b.n	8001fd2 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2101      	movs	r1, #1
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	4013      	ands	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 8138 	beq.w	8001fcc <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d005      	beq.n	8001d74 <HAL_GPIO_Init+0x40>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d130      	bne.n	8001dd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001daa:	2201      	movs	r2, #1
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	4013      	ands	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	091b      	lsrs	r3, r3, #4
 8001dc0:	f003 0201 	and.w	r2, r3, #1
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d017      	beq.n	8001e12 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	2203      	movs	r2, #3
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d123      	bne.n	8001e66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	08da      	lsrs	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	3208      	adds	r2, #8
 8001e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	220f      	movs	r2, #15
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	6939      	ldr	r1, [r7, #16]
 8001e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	2203      	movs	r2, #3
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0203 	and.w	r2, r3, #3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 8092 	beq.w	8001fcc <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001ea8:	4a51      	ldr	r2, [pc, #324]	; (8001ff0 <HAL_GPIO_Init+0x2bc>)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	089b      	lsrs	r3, r3, #2
 8001eae:	3302      	adds	r3, #2
 8001eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ed2:	d013      	beq.n	8001efc <HAL_GPIO_Init+0x1c8>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a47      	ldr	r2, [pc, #284]	; (8001ff4 <HAL_GPIO_Init+0x2c0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00d      	beq.n	8001ef8 <HAL_GPIO_Init+0x1c4>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a46      	ldr	r2, [pc, #280]	; (8001ff8 <HAL_GPIO_Init+0x2c4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d007      	beq.n	8001ef4 <HAL_GPIO_Init+0x1c0>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a45      	ldr	r2, [pc, #276]	; (8001ffc <HAL_GPIO_Init+0x2c8>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d101      	bne.n	8001ef0 <HAL_GPIO_Init+0x1bc>
 8001eec:	2304      	movs	r3, #4
 8001eee:	e006      	b.n	8001efe <HAL_GPIO_Init+0x1ca>
 8001ef0:	2307      	movs	r3, #7
 8001ef2:	e004      	b.n	8001efe <HAL_GPIO_Init+0x1ca>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	e002      	b.n	8001efe <HAL_GPIO_Init+0x1ca>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <HAL_GPIO_Init+0x1ca>
 8001efc:	2300      	movs	r3, #0
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	f002 0203 	and.w	r2, r2, #3
 8001f04:	0092      	lsls	r2, r2, #2
 8001f06:	4093      	lsls	r3, r2
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f0e:	4938      	ldr	r1, [pc, #224]	; (8001ff0 <HAL_GPIO_Init+0x2bc>)
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	3302      	adds	r3, #2
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f1c:	4b38      	ldr	r3, [pc, #224]	; (8002000 <HAL_GPIO_Init+0x2cc>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f40:	4a2f      	ldr	r2, [pc, #188]	; (8002000 <HAL_GPIO_Init+0x2cc>)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f46:	4b2e      	ldr	r3, [pc, #184]	; (8002000 <HAL_GPIO_Init+0x2cc>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	693a      	ldr	r2, [r7, #16]
 8001f52:	4013      	ands	r3, r2
 8001f54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f6a:	4a25      	ldr	r2, [pc, #148]	; (8002000 <HAL_GPIO_Init+0x2cc>)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f70:	4b23      	ldr	r3, [pc, #140]	; (8002000 <HAL_GPIO_Init+0x2cc>)
 8001f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	43db      	mvns	r3, r3
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f96:	4a1a      	ldr	r2, [pc, #104]	; (8002000 <HAL_GPIO_Init+0x2cc>)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001f9e:	4b18      	ldr	r3, [pc, #96]	; (8002000 <HAL_GPIO_Init+0x2cc>)
 8001fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fc4:	4a0e      	ldr	r2, [pc, #56]	; (8002000 <HAL_GPIO_Init+0x2cc>)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f47f aeb1 	bne.w	8001d44 <HAL_GPIO_Init+0x10>
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	bf00      	nop
 8001fe6:	371c      	adds	r7, #28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	48000400 	.word	0x48000400
 8001ff8:	48000800 	.word	0x48000800
 8001ffc:	48001000 	.word	0x48001000
 8002000:	58000800 	.word	0x58000800

08002004 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	88fb      	ldrh	r3, [r7, #6]
 8002014:	4013      	ands	r3, r2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d006      	beq.n	8002028 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800201a:	4a05      	ldr	r2, [pc, #20]	; (8002030 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002020:	88fb      	ldrh	r3, [r7, #6]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe ff6a 	bl	8000efc <HAL_GPIO_EXTI_Callback>
  }
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	58000800 	.word	0x58000800

08002034 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_HSEM_IRQHandler+0x30>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_HSEM_IRQHandler+0x30>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	43db      	mvns	r3, r3
 8002048:	4906      	ldr	r1, [pc, #24]	; (8002064 <HAL_HSEM_IRQHandler+0x30>)
 800204a:	4013      	ands	r3, r2
 800204c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <HAL_HSEM_IRQHandler+0x30>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f807 	bl	8002068 <HAL_HSEM_FreeCallback>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	58001500 	.word	0x58001500

08002068 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e081      	b.n	8002192 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff f954 	bl	8001350 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2224      	movs	r2, #36	; 0x24
 80020ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	e006      	b.n	8002104 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002102:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d104      	bne.n	8002116 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002114:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002128:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002138:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69d9      	ldr	r1, [r3, #28]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1a      	ldr	r2, [r3, #32]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2220      	movs	r2, #32
 800217e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af02      	add	r7, sp, #8
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	461a      	mov	r2, r3
 80021a8:	460b      	mov	r3, r1
 80021aa:	817b      	strh	r3, [r7, #10]
 80021ac:	4613      	mov	r3, r2
 80021ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b20      	cmp	r3, #32
 80021ba:	f040 80da 	bne.w	8002372 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <HAL_I2C_Master_Transmit+0x30>
 80021c8:	2302      	movs	r3, #2
 80021ca:	e0d3      	b.n	8002374 <HAL_I2C_Master_Transmit+0x1d8>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021d4:	f7ff fa9e 	bl	8001714 <HAL_GetTick>
 80021d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	2319      	movs	r3, #25
 80021e0:	2201      	movs	r2, #1
 80021e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f9e6 	bl	80025b8 <I2C_WaitOnFlagUntilTimeout>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e0be      	b.n	8002374 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2221      	movs	r2, #33	; 0x21
 80021fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2210      	movs	r2, #16
 8002202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	893a      	ldrh	r2, [r7, #8]
 8002216:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002222:	b29b      	uxth	r3, r3
 8002224:	2bff      	cmp	r3, #255	; 0xff
 8002226:	d90e      	bls.n	8002246 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	22ff      	movs	r2, #255	; 0xff
 800222c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002232:	b2da      	uxtb	r2, r3
 8002234:	8979      	ldrh	r1, [r7, #10]
 8002236:	4b51      	ldr	r3, [pc, #324]	; (800237c <HAL_I2C_Master_Transmit+0x1e0>)
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 fbdc 	bl	80029fc <I2C_TransferConfig>
 8002244:	e06c      	b.n	8002320 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002254:	b2da      	uxtb	r2, r3
 8002256:	8979      	ldrh	r1, [r7, #10]
 8002258:	4b48      	ldr	r3, [pc, #288]	; (800237c <HAL_I2C_Master_Transmit+0x1e0>)
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fbcb 	bl	80029fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002266:	e05b      	b.n	8002320 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	6a39      	ldr	r1, [r7, #32]
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 f9e3 	bl	8002638 <I2C_WaitOnTXISFlagUntilTimeout>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e07b      	b.n	8002374 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	781a      	ldrb	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	1c5a      	adds	r2, r3, #1
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002296:	b29b      	uxth	r3, r3
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d034      	beq.n	8002320 <HAL_I2C_Master_Transmit+0x184>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d130      	bne.n	8002320 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	2200      	movs	r2, #0
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 f975 	bl	80025b8 <I2C_WaitOnFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e04d      	b.n	8002374 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2bff      	cmp	r3, #255	; 0xff
 80022e0:	d90e      	bls.n	8002300 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	22ff      	movs	r2, #255	; 0xff
 80022e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	8979      	ldrh	r1, [r7, #10]
 80022f0:	2300      	movs	r3, #0
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 fb7f 	bl	80029fc <I2C_TransferConfig>
 80022fe:	e00f      	b.n	8002320 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230e:	b2da      	uxtb	r2, r3
 8002310:	8979      	ldrh	r1, [r7, #10]
 8002312:	2300      	movs	r3, #0
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 fb6e 	bl	80029fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002324:	b29b      	uxth	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d19e      	bne.n	8002268 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	6a39      	ldr	r1, [r7, #32]
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f9c2 	bl	80026b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e01a      	b.n	8002374 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2220      	movs	r2, #32
 8002344:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6859      	ldr	r1, [r3, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_I2C_Master_Transmit+0x1e4>)
 8002352:	400b      	ands	r3, r1
 8002354:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800236e:	2300      	movs	r3, #0
 8002370:	e000      	b.n	8002374 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002372:	2302      	movs	r3, #2
  }
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	80002000 	.word	0x80002000
 8002380:	fe00e800 	.word	0xfe00e800

08002384 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	461a      	mov	r2, r3
 8002390:	460b      	mov	r3, r1
 8002392:	817b      	strh	r3, [r7, #10]
 8002394:	4613      	mov	r3, r2
 8002396:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	f040 80db 	bne.w	800255c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d101      	bne.n	80023b4 <HAL_I2C_Master_Receive+0x30>
 80023b0:	2302      	movs	r3, #2
 80023b2:	e0d4      	b.n	800255e <HAL_I2C_Master_Receive+0x1da>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023bc:	f7ff f9aa 	bl	8001714 <HAL_GetTick>
 80023c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	2319      	movs	r3, #25
 80023c8:	2201      	movs	r2, #1
 80023ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f000 f8f2 	bl	80025b8 <I2C_WaitOnFlagUntilTimeout>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0bf      	b.n	800255e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2222      	movs	r2, #34	; 0x22
 80023e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2210      	movs	r2, #16
 80023ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	893a      	ldrh	r2, [r7, #8]
 80023fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240a:	b29b      	uxth	r3, r3
 800240c:	2bff      	cmp	r3, #255	; 0xff
 800240e:	d90e      	bls.n	800242e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	22ff      	movs	r2, #255	; 0xff
 8002414:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241a:	b2da      	uxtb	r2, r3
 800241c:	8979      	ldrh	r1, [r7, #10]
 800241e:	4b52      	ldr	r3, [pc, #328]	; (8002568 <HAL_I2C_Master_Receive+0x1e4>)
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 fae8 	bl	80029fc <I2C_TransferConfig>
 800242c:	e06d      	b.n	800250a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243c:	b2da      	uxtb	r2, r3
 800243e:	8979      	ldrh	r1, [r7, #10]
 8002440:	4b49      	ldr	r3, [pc, #292]	; (8002568 <HAL_I2C_Master_Receive+0x1e4>)
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fad7 	bl	80029fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800244e:	e05c      	b.n	800250a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	6a39      	ldr	r1, [r7, #32]
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 f96b 	bl	8002730 <I2C_WaitOnRXNEFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e07c      	b.n	800255e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248c:	b29b      	uxth	r3, r3
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249a:	b29b      	uxth	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d034      	beq.n	800250a <HAL_I2C_Master_Receive+0x186>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d130      	bne.n	800250a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	2200      	movs	r2, #0
 80024b0:	2180      	movs	r1, #128	; 0x80
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f880 	bl	80025b8 <I2C_WaitOnFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e04d      	b.n	800255e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2bff      	cmp	r3, #255	; 0xff
 80024ca:	d90e      	bls.n	80024ea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	22ff      	movs	r2, #255	; 0xff
 80024d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	8979      	ldrh	r1, [r7, #10]
 80024da:	2300      	movs	r3, #0
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 fa8a 	bl	80029fc <I2C_TransferConfig>
 80024e8:	e00f      	b.n	800250a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	8979      	ldrh	r1, [r7, #10]
 80024fc:	2300      	movs	r3, #0
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 fa79 	bl	80029fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d19d      	bne.n	8002450 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	6a39      	ldr	r1, [r7, #32]
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 f8cd 	bl	80026b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e01a      	b.n	800255e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2220      	movs	r2, #32
 800252e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6859      	ldr	r1, [r3, #4]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <HAL_I2C_Master_Receive+0x1e8>)
 800253c:	400b      	ands	r3, r1
 800253e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	e000      	b.n	800255e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800255c:	2302      	movs	r3, #2
  }
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	80002400 	.word	0x80002400
 800256c:	fe00e800 	.word	0xfe00e800

08002570 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b02      	cmp	r3, #2
 8002584:	d103      	bne.n	800258e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2200      	movs	r2, #0
 800258c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b01      	cmp	r3, #1
 800259a:	d007      	beq.n	80025ac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699a      	ldr	r2, [r3, #24]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	619a      	str	r2, [r3, #24]
  }
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	4613      	mov	r3, r2
 80025c6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025c8:	e022      	b.n	8002610 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d0:	d01e      	beq.n	8002610 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025d2:	f7ff f89f 	bl	8001714 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d302      	bcc.n	80025e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d113      	bne.n	8002610 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	f043 0220 	orr.w	r2, r3, #32
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e00f      	b.n	8002630 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	699a      	ldr	r2, [r3, #24]
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	4013      	ands	r3, r2
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	429a      	cmp	r2, r3
 800261e:	bf0c      	ite	eq
 8002620:	2301      	moveq	r3, #1
 8002622:	2300      	movne	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	429a      	cmp	r2, r3
 800262c:	d0cd      	beq.n	80025ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002644:	e02c      	b.n	80026a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	68b9      	ldr	r1, [r7, #8]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f8ea 	bl	8002824 <I2C_IsErrorOccurred>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e02a      	b.n	80026b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d01e      	beq.n	80026a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002662:	f7ff f857 	bl	8001714 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	429a      	cmp	r2, r3
 8002670:	d302      	bcc.n	8002678 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d113      	bne.n	80026a0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267c:	f043 0220 	orr.w	r2, r3, #32
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e007      	b.n	80026b0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d1cb      	bne.n	8002646 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026c4:	e028      	b.n	8002718 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f8aa 	bl	8002824 <I2C_IsErrorOccurred>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e026      	b.n	8002728 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026da:	f7ff f81b 	bl	8001714 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d302      	bcc.n	80026f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d113      	bne.n	8002718 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f4:	f043 0220 	orr.w	r2, r3, #32
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e007      	b.n	8002728 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b20      	cmp	r3, #32
 8002724:	d1cf      	bne.n	80026c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800273c:	e064      	b.n	8002808 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f000 f86e 	bl	8002824 <I2C_IsErrorOccurred>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e062      	b.n	8002818 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f003 0320 	and.w	r3, r3, #32
 800275c:	2b20      	cmp	r3, #32
 800275e:	d138      	bne.n	80027d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b04      	cmp	r3, #4
 800276c:	d105      	bne.n	800277a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	e04e      	b.n	8002818 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b10      	cmp	r3, #16
 8002786:	d107      	bne.n	8002798 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2210      	movs	r2, #16
 800278e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2204      	movs	r2, #4
 8002794:	645a      	str	r2, [r3, #68]	; 0x44
 8002796:	e002      	b.n	800279e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2220      	movs	r2, #32
 80027a4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80027b2:	400b      	ands	r3, r1
 80027b4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e022      	b.n	8002818 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d2:	f7fe ff9f 	bl	8001714 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d302      	bcc.n	80027e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10f      	bne.n	8002808 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e007      	b.n	8002818 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b04      	cmp	r3, #4
 8002814:	d193      	bne.n	800273e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	fe00e800 	.word	0xfe00e800

08002824 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	; 0x28
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f003 0310 	and.w	r3, r3, #16
 800284c:	2b00      	cmp	r3, #0
 800284e:	d075      	beq.n	800293c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2210      	movs	r2, #16
 8002856:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002858:	e056      	b.n	8002908 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	d052      	beq.n	8002908 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002862:	f7fe ff57 	bl	8001714 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	429a      	cmp	r2, r3
 8002870:	d302      	bcc.n	8002878 <I2C_IsErrorOccurred+0x54>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d147      	bne.n	8002908 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002882:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800288a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800289a:	d12e      	bne.n	80028fa <I2C_IsErrorOccurred+0xd6>
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028a2:	d02a      	beq.n	80028fa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80028a4:	7cfb      	ldrb	r3, [r7, #19]
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	d027      	beq.n	80028fa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028ba:	f7fe ff2b 	bl	8001714 <HAL_GetTick>
 80028be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028c0:	e01b      	b.n	80028fa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028c2:	f7fe ff27 	bl	8001714 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b19      	cmp	r3, #25
 80028ce:	d914      	bls.n	80028fa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d4:	f043 0220 	orr.w	r2, r3, #32
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	f003 0320 	and.w	r3, r3, #32
 8002904:	2b20      	cmp	r3, #32
 8002906:	d1dc      	bne.n	80028c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b20      	cmp	r3, #32
 8002914:	d003      	beq.n	800291e <I2C_IsErrorOccurred+0xfa>
 8002916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800291a:	2b00      	cmp	r3, #0
 800291c:	d09d      	beq.n	800285a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800291e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002922:	2b00      	cmp	r3, #0
 8002924:	d103      	bne.n	800292e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2220      	movs	r2, #32
 800292c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	f043 0304 	orr.w	r3, r3, #4
 8002934:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800295e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00b      	beq.n	8002988 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	f043 0308 	orr.w	r3, r3, #8
 8002976:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002980:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00b      	beq.n	80029aa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	f043 0302 	orr.w	r3, r3, #2
 8002998:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80029aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d01c      	beq.n	80029ec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f7ff fddc 	bl	8002570 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6859      	ldr	r1, [r3, #4]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <I2C_IsErrorOccurred+0x1d4>)
 80029c4:	400b      	ands	r3, r1
 80029c6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80029ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3728      	adds	r7, #40	; 0x28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	fe00e800 	.word	0xfe00e800

080029fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	817b      	strh	r3, [r7, #10]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a0e:	897b      	ldrh	r3, [r7, #10]
 8002a10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a14:	7a7b      	ldrb	r3, [r7, #9]
 8002a16:	041b      	lsls	r3, r3, #16
 8002a18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a1c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a2a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	0d5b      	lsrs	r3, r3, #21
 8002a36:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a3a:	4b08      	ldr	r3, [pc, #32]	; (8002a5c <I2C_TransferConfig+0x60>)
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	ea02 0103 	and.w	r1, r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	03ff63ff 	.word	0x03ff63ff

08002a60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	d138      	bne.n	8002ae8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e032      	b.n	8002aea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2224      	movs	r2, #36	; 0x24
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 0201 	bic.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ab2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6819      	ldr	r1, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	e000      	b.n	8002aea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ae8:	2302      	movs	r3, #2
  }
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b085      	sub	sp, #20
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b20      	cmp	r3, #32
 8002b0a:	d139      	bne.n	8002b80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e033      	b.n	8002b82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2224      	movs	r2, #36	; 0x24
 8002b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0201 	bic.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e000      	b.n	8002b82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b80:	2302      	movs	r3, #2
  }
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d01e      	beq.n	8002be0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002ba2:	4b13      	ldr	r3, [pc, #76]	; (8002bf0 <HAL_IPCC_Init+0x60>)
 8002ba4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fe fc14 	bl	80013e0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002bb8:	68b8      	ldr	r0, [r7, #8]
 8002bba:	f000 f85b 	bl	8002c74 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f82c 	bl	8002c28 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002bde:	e001      	b.n	8002be4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	58000c00 	.word	0x58000c00

08002bf4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b085      	sub	sp, #20
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	e00f      	b.n	8002c56 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	4a0b      	ldr	r2, [pc, #44]	; (8002c6c <IPCC_SetDefaultCallbacks+0x44>)
 8002c40:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	3306      	adds	r3, #6
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4a08      	ldr	r2, [pc, #32]	; (8002c70 <IPCC_SetDefaultCallbacks+0x48>)
 8002c4e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3301      	adds	r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2b05      	cmp	r3, #5
 8002c5a:	d9ec      	bls.n	8002c36 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	08002bf5 	.word	0x08002bf5
 8002c70:	08002c0f 	.word	0x08002c0f

08002c74 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002c88:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	223f      	movs	r2, #63	; 0x3f
 8002c8e:	609a      	str	r2, [r3, #8]
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002caa:	6013      	str	r3, [r2, #0]
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	58000400 	.word	0x58000400

08002cbc <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  
  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cce:	d104      	bne.n	8002cda <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f84a 	bl	8002d6c <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8002cd8:	e003      	b.n	8002ce2 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 f81b 	bl	8002d18 <HAL_PWREx_EnterSTOP0Mode>
}
 8002ce2:	bf00      	nop
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <LL_PWR_EnableSRAM2Retention>:
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8002cf0:	4b05      	ldr	r3, [pc, #20]	; (8002d08 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cfa:	6093      	str	r3, [r2, #8]
}
 8002cfc:	bf00      	nop
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	58000400 	.word	0x58000400

08002d0c <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended 
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8002d10:	f7ff ffec 	bl	8002cec <LL_PWR_EnableSRAM2Retention>
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8002d22:	4b10      	ldr	r3, [pc, #64]	; (8002d64 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a0f      	ldr	r2, [pc, #60]	; (8002d64 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002d28:	f023 0307 	bic.w	r3, r3, #7
 8002d2c:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	4a0d      	ldr	r2, [pc, #52]	; (8002d68 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002d34:	f043 0304 	orr.w	r3, r3, #4
 8002d38:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002d40:	bf30      	wfi
 8002d42:	e002      	b.n	8002d4a <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002d44:	bf40      	sev
    __WFE();
 8002d46:	bf20      	wfe
    __WFE();
 8002d48:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002d4a:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	4a06      	ldr	r2, [pc, #24]	; (8002d68 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002d50:	f023 0304 	bic.w	r3, r3, #4
 8002d54:	6113      	str	r3, [r2, #16]
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	58000400 	.word	0x58000400
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
    
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8002d76:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 0307 	bic.w	r3, r3, #7
 8002d7e:	4a0f      	ldr	r2, [pc, #60]	; (8002dbc <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002d86:	4b0e      	ldr	r3, [pc, #56]	; (8002dc0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	4a0d      	ldr	r2, [pc, #52]	; (8002dc0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002d8c:	f043 0304 	orr.w	r3, r3, #4
 8002d90:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002d98:	bf30      	wfi
 8002d9a:	e002      	b.n	8002da2 <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002d9c:	bf40      	sev
    __WFE();
 8002d9e:	bf20      	wfe
    __WFE();
 8002da0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002da2:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	4a06      	ldr	r2, [pc, #24]	; (8002dc0 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002da8:	f023 0304 	bic.w	r3, r3, #4
 8002dac:	6113      	str	r3, [r2, #16]
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	58000400 	.word	0x58000400
 8002dc0:	e000ed00 	.word	0xe000ed00

08002dc4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dd6:	d101      	bne.n	8002ddc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <LL_RCC_HSE_Enable>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dfa:	6013      	str	r3, [r2, #0]
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <LL_RCC_HSE_Disable>:
{
 8002e06:	b480      	push	{r7}
 8002e08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e18:	6013      	str	r3, [r2, #0]
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_RCC_HSE_IsReady>:
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e36:	d101      	bne.n	8002e3c <LL_RCC_HSE_IsReady+0x18>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <LL_RCC_HSE_IsReady+0x1a>
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_RCC_HSI_Enable>:
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5a:	6013      	str	r3, [r2, #0]
}
 8002e5c:	bf00      	nop
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <LL_RCC_HSI_Disable>:
{
 8002e66:	b480      	push	{r7}
 8002e68:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e78:	6013      	str	r3, [r2, #0]
}
 8002e7a:	bf00      	nop
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_RCC_HSI_IsReady>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e96:	d101      	bne.n	8002e9c <LL_RCC_HSI_IsReady+0x18>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <LL_RCC_HSI_IsReady+0x1a>
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	061b      	lsls	r3, r3, #24
 8002ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	604b      	str	r3, [r1, #4]
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <LL_RCC_LSE_Enable>:
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ede:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_RCC_LSE_Disable>:
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <LL_RCC_LSE_EnableBypass>:
{
 8002f16:	b480      	push	{r7}
 8002f18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f26:	f043 0304 	orr.w	r3, r3, #4
 8002f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f2e:	bf00      	nop
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_RCC_LSE_DisableBypass>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f48:	f023 0304 	bic.w	r3, r3, #4
 8002f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f50:	bf00      	nop
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <LL_RCC_LSE_IsReady>:
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d101      	bne.n	8002f72 <LL_RCC_LSE_IsReady+0x18>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <LL_RCC_LSE_IsReady+0x1a>
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <LL_RCC_LSI1_Enable>:
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f96:	bf00      	nop
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_RCC_LSI1_Disable>:
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <LL_RCC_LSI1_IsReady>:
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d101      	bne.n	8002fda <LL_RCC_LSI1_IsReady+0x18>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <LL_RCC_LSI1_IsReady+0x1a>
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <LL_RCC_LSI2_Enable>:
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ff6:	f043 0304 	orr.w	r3, r3, #4
 8002ffa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002ffe:	bf00      	nop
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <LL_RCC_LSI2_Disable>:
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800300c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003018:	f023 0304 	bic.w	r3, r3, #4
 800301c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <LL_RCC_LSI2_IsReady>:
{
 800302a:	b480      	push	{r7}
 800302c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800302e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b08      	cmp	r3, #8
 800303c:	d101      	bne.n	8003042 <LL_RCC_LSI2_IsReady+0x18>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <LL_RCC_LSI2_IsReady+0x1a>
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <LL_RCC_LSI2_SetTrimming>:
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800305a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800305e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_RCC_MSI_Enable>:
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6013      	str	r3, [r2, #0]
}
 8003090:	bf00      	nop
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <LL_RCC_MSI_Disable>:
{
 800309a:	b480      	push	{r7}
 800309c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800309e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030a8:	f023 0301 	bic.w	r3, r3, #1
 80030ac:	6013      	str	r3, [r2, #0]
}
 80030ae:	bf00      	nop
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <LL_RCC_MSI_IsReady>:
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80030bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d101      	bne.n	80030ce <LL_RCC_MSI_IsReady+0x16>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <LL_RCC_MSI_IsReady+0x18>
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <LL_RCC_MSI_SetRange>:
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80030e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]
}
 80030f6:	bf00      	nop
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <LL_RCC_MSI_GetRange>:
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003112:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2bb0      	cmp	r3, #176	; 0xb0
 8003118:	d901      	bls.n	800311e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800311a:	23b0      	movs	r3, #176	; 0xb0
 800311c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800311e:	687b      	ldr	r3, [r7, #4]
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <LL_RCC_MSI_SetCalibTrimming>:
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003146:	4313      	orrs	r3, r2
 8003148:	604b      	str	r3, [r1, #4]
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <LL_RCC_SetSysClkSource>:
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800315e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f023 0203 	bic.w	r2, r3, #3
 8003168:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4313      	orrs	r3, r2
 8003170:	608b      	str	r3, [r1, #8]
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <LL_RCC_GetSysClkSource>:
{
 800317e:	b480      	push	{r7}
 8003180:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 030c 	and.w	r3, r3, #12
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <LL_RCC_SetAHBPrescaler>:
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800319e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <LL_C2_RCC_SetAHBPrescaler>:
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80031c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4313      	orrs	r3, r2
 80031da:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <LL_RCC_SetAHB4Prescaler>:
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80031f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80031fa:	f023 020f 	bic.w	r2, r3, #15
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <LL_RCC_SetAPB1Prescaler>:
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800322a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4313      	orrs	r3, r2
 8003232:	608b      	str	r3, [r1, #8]
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_RCC_SetAPB2Prescaler>:
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4313      	orrs	r3, r2
 800325a:	608b      	str	r3, [r1, #8]
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <LL_RCC_GetAHBPrescaler>:
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800326c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003276:	4618      	mov	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <LL_RCC_GetAHB4Prescaler>:
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003288:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003292:	4618      	mov	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <LL_RCC_PLL_Enable>:
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80032a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ae:	6013      	str	r3, [r2, #0]
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <LL_RCC_PLL_Disable>:
{
 80032ba:	b480      	push	{r7}
 80032bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80032be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032cc:	6013      	str	r3, [r2, #0]
}
 80032ce:	bf00      	nop
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <LL_RCC_PLL_IsReady>:
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80032dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032ea:	d101      	bne.n	80032f0 <LL_RCC_PLL_IsReady+0x18>
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <LL_RCC_PLL_IsReady+0x1a>
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <LL_RCC_PLL_GetN>:
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	0a1b      	lsrs	r3, r3, #8
 8003308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800330c:	4618      	mov	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <LL_RCC_PLL_GetR>:
{
 8003316:	b480      	push	{r7}
 8003318:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800331a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003324:	4618      	mov	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <LL_RCC_PLL_GetDivider>:
{
 800332e:	b480      	push	{r7}
 8003330:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <LL_RCC_PLL_GetMainSource>:
{
 8003346:	b480      	push	{r7}
 8003348:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800334a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0303 	and.w	r3, r3, #3
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <LL_RCC_IsActiveFlag_HPRE>:
{
 800335e:	b480      	push	{r7}
 8003360:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003362:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003370:	d101      	bne.n	8003376 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8003382:	b480      	push	{r7}
 8003384:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003396:	d101      	bne.n	800339c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80033ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80033b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033bc:	d101      	bne.n	80033c2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <LL_RCC_IsActiveFlag_PPRE1>:
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80033d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033e0:	d101      	bne.n	80033e6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80033f2:	b480      	push	{r7}
 80033f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80033f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003400:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003404:	d101      	bne.n	800340a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
	...

08003418 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003418:	b590      	push	{r4, r7, lr}
 800341a:	b08d      	sub	sp, #52	; 0x34
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e324      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 808d 	beq.w	8003552 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003438:	f7ff fea1 	bl	800317e <LL_RCC_GetSysClkSource>
 800343c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800343e:	f7ff ff82 	bl	8003346 <LL_RCC_PLL_GetMainSource>
 8003442:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d005      	beq.n	8003456 <HAL_RCC_OscConfig+0x3e>
 800344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344c:	2b0c      	cmp	r3, #12
 800344e:	d147      	bne.n	80034e0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003452:	2b01      	cmp	r3, #1
 8003454:	d144      	bne.n	80034e0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e308      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003466:	f7ff fe4c 	bl	8003102 <LL_RCC_MSI_GetRange>
 800346a:	4603      	mov	r3, r0
 800346c:	429c      	cmp	r4, r3
 800346e:	d914      	bls.n	800349a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	4618      	mov	r0, r3
 8003476:	f000 fcc5 	bl	8003e04 <RCC_SetFlashLatencyFromMSIRange>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e2f7      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff fe26 	bl	80030da <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff fe4a 	bl	800312c <LL_RCC_MSI_SetCalibTrimming>
 8003498:	e013      	b.n	80034c2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff fe1b 	bl	80030da <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff fe3f 	bl	800312c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fca6 	bl	8003e04 <RCC_SetFlashLatencyFromMSIRange>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e2d8      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80034c2:	f000 fc8b 	bl	8003ddc <HAL_RCC_GetHCLKFreq>
 80034c6:	4603      	mov	r3, r0
 80034c8:	4aa4      	ldr	r2, [pc, #656]	; (800375c <HAL_RCC_OscConfig+0x344>)
 80034ca:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034cc:	4ba4      	ldr	r3, [pc, #656]	; (8003760 <HAL_RCC_OscConfig+0x348>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fe f8d1 	bl	8001678 <HAL_InitTick>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d039      	beq.n	8003550 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e2c9      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69db      	ldr	r3, [r3, #28]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01e      	beq.n	8003526 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034e8:	f7ff fdc8 	bl	800307c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034ec:	f7fe f912 	bl	8001714 <HAL_GetTick>
 80034f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034f4:	f7fe f90e 	bl	8001714 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e2b6      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003506:	f7ff fdd7 	bl	80030b8 <LL_RCC_MSI_IsReady>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f1      	beq.n	80034f4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fde0 	bl	80030da <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fe04 	bl	800312c <LL_RCC_MSI_SetCalibTrimming>
 8003524:	e015      	b.n	8003552 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003526:	f7ff fdb8 	bl	800309a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800352a:	f7fe f8f3 	bl	8001714 <HAL_GetTick>
 800352e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003532:	f7fe f8ef 	bl	8001714 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e297      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003544:	f7ff fdb8 	bl	80030b8 <LL_RCC_MSI_IsReady>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f1      	bne.n	8003532 <HAL_RCC_OscConfig+0x11a>
 800354e:	e000      	b.n	8003552 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003550:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d047      	beq.n	80035ee <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800355e:	f7ff fe0e 	bl	800317e <LL_RCC_GetSysClkSource>
 8003562:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003564:	f7ff feef 	bl	8003346 <LL_RCC_PLL_GetMainSource>
 8003568:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	2b08      	cmp	r3, #8
 800356e:	d005      	beq.n	800357c <HAL_RCC_OscConfig+0x164>
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	2b0c      	cmp	r3, #12
 8003574:	d108      	bne.n	8003588 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d105      	bne.n	8003588 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d134      	bne.n	80035ee <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e275      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003590:	d102      	bne.n	8003598 <HAL_RCC_OscConfig+0x180>
 8003592:	f7ff fc29 	bl	8002de8 <LL_RCC_HSE_Enable>
 8003596:	e001      	b.n	800359c <HAL_RCC_OscConfig+0x184>
 8003598:	f7ff fc35 	bl	8002e06 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d012      	beq.n	80035ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fe f8b6 	bl	8001714 <HAL_GetTick>
 80035a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ac:	f7fe f8b2 	bl	8001714 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	; 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e25a      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 80035be:	f7ff fc31 	bl	8002e24 <LL_RCC_HSE_IsReady>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0f1      	beq.n	80035ac <HAL_RCC_OscConfig+0x194>
 80035c8:	e011      	b.n	80035ee <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ca:	f7fe f8a3 	bl	8001714 <HAL_GetTick>
 80035ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d2:	f7fe f89f 	bl	8001714 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b64      	cmp	r3, #100	; 0x64
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e247      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 80035e4:	f7ff fc1e 	bl	8002e24 <LL_RCC_HSE_IsReady>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f1      	bne.n	80035d2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d04c      	beq.n	8003694 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035fa:	f7ff fdc0 	bl	800317e <LL_RCC_GetSysClkSource>
 80035fe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003600:	f7ff fea1 	bl	8003346 <LL_RCC_PLL_GetMainSource>
 8003604:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	2b04      	cmp	r3, #4
 800360a:	d005      	beq.n	8003618 <HAL_RCC_OscConfig+0x200>
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	2b0c      	cmp	r3, #12
 8003610:	d10e      	bne.n	8003630 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d10b      	bne.n	8003630 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e227      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fc3d 	bl	8002ea8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800362e:	e031      	b.n	8003694 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d019      	beq.n	800366c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003638:	f7ff fc06 	bl	8002e48 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fe f86a 	bl	8001714 <HAL_GetTick>
 8003640:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003644:	f7fe f866 	bl	8001714 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e20e      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003656:	f7ff fc15 	bl	8002e84 <LL_RCC_HSI_IsReady>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f1      	beq.n	8003644 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff fc1f 	bl	8002ea8 <LL_RCC_HSI_SetCalibTrimming>
 800366a:	e013      	b.n	8003694 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800366c:	f7ff fbfb 	bl	8002e66 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fe f850 	bl	8001714 <HAL_GetTick>
 8003674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003678:	f7fe f84c 	bl	8001714 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e1f4      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 800368a:	f7ff fbfb 	bl	8002e84 <LL_RCC_HSI_IsReady>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1f1      	bne.n	8003678 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d106      	bne.n	80036ae <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 80a3 	beq.w	80037f4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d076      	beq.n	80037a4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d046      	beq.n	8003750 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80036c2:	f7ff fc7e 	bl	8002fc2 <LL_RCC_LSI1_IsReady>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d113      	bne.n	80036f4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80036cc:	f7ff fc57 	bl	8002f7e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036d0:	f7fe f820 	bl	8001714 <HAL_GetTick>
 80036d4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80036d8:	f7fe f81c 	bl	8001714 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e1c4      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80036ea:	f7ff fc6a 	bl	8002fc2 <LL_RCC_LSI1_IsReady>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f1      	beq.n	80036d8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80036f4:	f7ff fc77 	bl	8002fe6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f8:	f7fe f80c 	bl	8001714 <HAL_GetTick>
 80036fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003700:	f7fe f808 	bl	8001714 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b03      	cmp	r3, #3
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e1b0      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003712:	f7ff fc8a 	bl	800302a <LL_RCC_LSI2_IsReady>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f1      	beq.n	8003700 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fc94 	bl	800304e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003726:	f7ff fc3b 	bl	8002fa0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372a:	f7fd fff3 	bl	8001714 <HAL_GetTick>
 800372e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003732:	f7fd ffef 	bl	8001714 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e197      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003744:	f7ff fc3d 	bl	8002fc2 <LL_RCC_LSI1_IsReady>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f1      	bne.n	8003732 <HAL_RCC_OscConfig+0x31a>
 800374e:	e051      	b.n	80037f4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003750:	f7ff fc15 	bl	8002f7e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fd ffde 	bl	8001714 <HAL_GetTick>
 8003758:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800375a:	e00c      	b.n	8003776 <HAL_RCC_OscConfig+0x35e>
 800375c:	20000010 	.word	0x20000010
 8003760:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003764:	f7fd ffd6 	bl	8001714 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e17e      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003776:	f7ff fc24 	bl	8002fc2 <LL_RCC_LSI1_IsReady>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f1      	beq.n	8003764 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003780:	f7ff fc42 	bl	8003008 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003786:	f7fd ffc5 	bl	8001714 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b03      	cmp	r3, #3
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e16d      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003798:	f7ff fc47 	bl	800302a <LL_RCC_LSI2_IsReady>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f1      	bne.n	8003786 <HAL_RCC_OscConfig+0x36e>
 80037a2:	e027      	b.n	80037f4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80037a4:	f7ff fc30 	bl	8003008 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a8:	f7fd ffb4 	bl	8001714 <HAL_GetTick>
 80037ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80037b0:	f7fd ffb0 	bl	8001714 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b03      	cmp	r3, #3
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e158      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80037c2:	f7ff fc32 	bl	800302a <LL_RCC_LSI2_IsReady>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1f1      	bne.n	80037b0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80037cc:	f7ff fbe8 	bl	8002fa0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d0:	f7fd ffa0 	bl	8001714 <HAL_GetTick>
 80037d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80037d8:	f7fd ff9c 	bl	8001714 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e144      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80037ea:	f7ff fbea 	bl	8002fc2 <LL_RCC_LSI1_IsReady>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1f1      	bne.n	80037d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d05b      	beq.n	80038b8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003800:	4b9e      	ldr	r3, [pc, #632]	; (8003a7c <HAL_RCC_OscConfig+0x664>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d114      	bne.n	8003836 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800380c:	f7ff fa46 	bl	8002c9c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003810:	f7fd ff80 	bl	8001714 <HAL_GetTick>
 8003814:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003818:	f7fd ff7c 	bl	8001714 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e124      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800382a:	4b94      	ldr	r3, [pc, #592]	; (8003a7c <HAL_RCC_OscConfig+0x664>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f0      	beq.n	8003818 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d102      	bne.n	8003844 <HAL_RCC_OscConfig+0x42c>
 800383e:	f7ff fb48 	bl	8002ed2 <LL_RCC_LSE_Enable>
 8003842:	e00c      	b.n	800385e <HAL_RCC_OscConfig+0x446>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	2b05      	cmp	r3, #5
 800384a:	d104      	bne.n	8003856 <HAL_RCC_OscConfig+0x43e>
 800384c:	f7ff fb63 	bl	8002f16 <LL_RCC_LSE_EnableBypass>
 8003850:	f7ff fb3f 	bl	8002ed2 <LL_RCC_LSE_Enable>
 8003854:	e003      	b.n	800385e <HAL_RCC_OscConfig+0x446>
 8003856:	f7ff fb4d 	bl	8002ef4 <LL_RCC_LSE_Disable>
 800385a:	f7ff fb6d 	bl	8002f38 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d014      	beq.n	8003890 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003866:	f7fd ff55 	bl	8001714 <HAL_GetTick>
 800386a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800386c:	e00a      	b.n	8003884 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fd ff51 	bl	8001714 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	; 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e0f7      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003884:	f7ff fb69 	bl	8002f5a <LL_RCC_LSE_IsReady>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0ef      	beq.n	800386e <HAL_RCC_OscConfig+0x456>
 800388e:	e013      	b.n	80038b8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003890:	f7fd ff40 	bl	8001714 <HAL_GetTick>
 8003894:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003896:	e00a      	b.n	80038ae <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003898:	f7fd ff3c 	bl	8001714 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e0e2      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 80038ae:	f7ff fb54 	bl	8002f5a <LL_RCC_LSE_IsReady>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1ef      	bne.n	8003898 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80d8 	beq.w	8003a72 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038c2:	f7ff fc5c 	bl	800317e <LL_RCC_GetSysClkSource>
 80038c6:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80038c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	f040 80a6 	bne.w	8003a26 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f003 0203 	and.w	r2, r3, #3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d123      	bne.n	8003930 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d11c      	bne.n	8003930 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	0a1b      	lsrs	r3, r3, #8
 80038fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003902:	429a      	cmp	r2, r3
 8003904:	d114      	bne.n	8003930 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003910:	429a      	cmp	r2, r3
 8003912:	d10d      	bne.n	8003930 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800391e:	429a      	cmp	r2, r3
 8003920:	d106      	bne.n	8003930 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800392c:	429a      	cmp	r2, r3
 800392e:	d054      	beq.n	80039da <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b0c      	cmp	r3, #12
 8003934:	d04f      	beq.n	80039d6 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003936:	f7ff fcc0 	bl	80032ba <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800393a:	f7fd feeb 	bl	8001714 <HAL_GetTick>
 800393e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003942:	f7fd fee7 	bl	8001714 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e08f      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1ef      	bne.n	8003942 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	4b45      	ldr	r3, [pc, #276]	; (8003a80 <HAL_RCC_OscConfig+0x668>)
 800396a:	4013      	ands	r3, r2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003974:	4311      	orrs	r1, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800397a:	0212      	lsls	r2, r2, #8
 800397c:	4311      	orrs	r1, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003982:	4311      	orrs	r1, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003988:	4311      	orrs	r1, r2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800398e:	430a      	orrs	r2, r1
 8003990:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003994:	4313      	orrs	r3, r2
 8003996:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003998:	f7ff fc80 	bl	800329c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800399c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039ac:	f7fd feb2 	bl	8001714 <HAL_GetTick>
 80039b0:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fd feae 	bl	8001714 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e056      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0ef      	beq.n	80039b4 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039d4:	e04d      	b.n	8003a72 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e04c      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d144      	bne.n	8003a72 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039e8:	f7ff fc58 	bl	800329c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039fc:	f7fd fe8a 	bl	8001714 <HAL_GetTick>
 8003a00:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a04:	f7fd fe86 	bl	8001714 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e02e      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0ef      	beq.n	8003a04 <HAL_RCC_OscConfig+0x5ec>
 8003a24:	e025      	b.n	8003a72 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	2b0c      	cmp	r3, #12
 8003a2a:	d020      	beq.n	8003a6e <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2c:	f7ff fc45 	bl	80032ba <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7fd fe70 	bl	8001714 <HAL_GetTick>
 8003a34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a38:	f7fd fe6c 	bl	8001714 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e014      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ef      	bne.n	8003a38 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8003a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a66:	f023 0303 	bic.w	r3, r3, #3
 8003a6a:	60d3      	str	r3, [r2, #12]
 8003a6c:	e001      	b.n	8003a72 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3734      	adds	r7, #52	; 0x34
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd90      	pop	{r4, r7, pc}
 8003a7c:	58000400 	.word	0x58000400
 8003a80:	11c1808c 	.word	0x11c1808c

08003a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e12d      	b.n	8003cf4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a98:	4b98      	ldr	r3, [pc, #608]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d91b      	bls.n	8003ade <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa6:	4b95      	ldr	r3, [pc, #596]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f023 0207 	bic.w	r2, r3, #7
 8003aae:	4993      	ldr	r1, [pc, #588]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab6:	f7fd fe2d 	bl	8001714 <HAL_GetTick>
 8003aba:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003abe:	f7fd fe29 	bl	8001714 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e111      	b.n	8003cf4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad0:	4b8a      	ldr	r3, [pc, #552]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d1ef      	bne.n	8003abe <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d016      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff fb51 	bl	8003196 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003af4:	f7fd fe0e 	bl	8001714 <HAL_GetTick>
 8003af8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003afc:	f7fd fe0a 	bl	8001714 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e0f2      	b.n	8003cf4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003b0e:	f7ff fc26 	bl	800335e <LL_RCC_IsActiveFlag_HPRE>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f1      	beq.n	8003afc <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0320 	and.w	r3, r3, #32
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d016      	beq.n	8003b52 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff fb48 	bl	80031be <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b2e:	f7fd fdf1 	bl	8001714 <HAL_GetTick>
 8003b32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b34:	e008      	b.n	8003b48 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b36:	f7fd fded 	bl	8001714 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d901      	bls.n	8003b48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e0d5      	b.n	8003cf4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003b48:	f7ff fc1b 	bl	8003382 <LL_RCC_IsActiveFlag_C2HPRE>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f1      	beq.n	8003b36 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d016      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff fb41 	bl	80031ea <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b68:	f7fd fdd4 	bl	8001714 <HAL_GetTick>
 8003b6c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b70:	f7fd fdd0 	bl	8001714 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e0b8      	b.n	8003cf4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b82:	f7ff fc11 	bl	80033a8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f1      	beq.n	8003b70 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d016      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff fb3b 	bl	8003218 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ba2:	f7fd fdb7 	bl	8001714 <HAL_GetTick>
 8003ba6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003baa:	f7fd fdb3 	bl	8001714 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e09b      	b.n	8003cf4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003bbc:	f7ff fc07 	bl	80033ce <LL_RCC_IsActiveFlag_PPRE1>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f1      	beq.n	8003baa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d017      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7ff fb31 	bl	8003240 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003bde:	f7fd fd99 	bl	8001714 <HAL_GetTick>
 8003be2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003be6:	f7fd fd95 	bl	8001714 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e07d      	b.n	8003cf4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003bf8:	f7ff fbfb 	bl	80033f2 <LL_RCC_IsActiveFlag_PPRE2>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f1      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d043      	beq.n	8003c96 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d106      	bne.n	8003c24 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003c16:	f7ff f905 	bl	8002e24 <LL_RCC_HSE_IsReady>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d11e      	bne.n	8003c5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e067      	b.n	8003cf4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b03      	cmp	r3, #3
 8003c2a:	d106      	bne.n	8003c3a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003c2c:	f7ff fb54 	bl	80032d8 <LL_RCC_PLL_IsReady>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d113      	bne.n	8003c5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e05c      	b.n	8003cf4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003c42:	f7ff fa39 	bl	80030b8 <LL_RCC_MSI_IsReady>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d108      	bne.n	8003c5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e051      	b.n	8003cf4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003c50:	f7ff f918 	bl	8002e84 <LL_RCC_HSI_IsReady>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e04a      	b.n	8003cf4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff fa77 	bl	8003156 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c68:	f7fd fd54 	bl	8001714 <HAL_GetTick>
 8003c6c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c70:	f7fd fd50 	bl	8001714 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e036      	b.n	8003cf4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c86:	f7ff fa7a 	bl	800317e <LL_RCC_GetSysClkSource>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d1ec      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c96:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d21b      	bcs.n	8003cdc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca4:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f023 0207 	bic.w	r2, r3, #7
 8003cac:	4913      	ldr	r1, [pc, #76]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb4:	f7fd fd2e 	bl	8001714 <HAL_GetTick>
 8003cb8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003cbc:	f7fd fd2a 	bl	8001714 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e012      	b.n	8003cf4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cce:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <HAL_RCC_ClockConfig+0x278>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d1ef      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003cdc:	f000 f87e 	bl	8003ddc <HAL_RCC_GetHCLKFreq>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	4a07      	ldr	r2, [pc, #28]	; (8003d00 <HAL_RCC_ClockConfig+0x27c>)
 8003ce4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003ce6:	f7fd fd21 	bl	800172c <HAL_GetTickPrio>
 8003cea:	4603      	mov	r3, r0
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fd fcc3 	bl	8001678 <HAL_InitTick>
 8003cf2:	4603      	mov	r3, r0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	58004000 	.word	0x58004000
 8003d00:	20000010 	.word	0x20000010

08003d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d04:	b590      	push	{r4, r7, lr}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d0a:	f7ff fa38 	bl	800317e <LL_RCC_GetSysClkSource>
 8003d0e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10a      	bne.n	8003d2c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003d16:	f7ff f9f4 	bl	8003102 <LL_RCC_MSI_GetRange>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	091b      	lsrs	r3, r3, #4
 8003d1e:	f003 030f 	and.w	r3, r3, #15
 8003d22:	4a2b      	ldr	r2, [pc, #172]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	e04b      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b04      	cmp	r3, #4
 8003d30:	d102      	bne.n	8003d38 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d32:	4b28      	ldr	r3, [pc, #160]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	e045      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d10a      	bne.n	8003d54 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003d3e:	f7ff f841 	bl	8002dc4 <LL_RCC_HSE_IsEnabledDiv2>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d102      	bne.n	8003d4e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003d48:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	e03a      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003d4e:	4b22      	ldr	r3, [pc, #136]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	e037      	b.n	8003dc4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003d54:	f7ff faf7 	bl	8003346 <LL_RCC_PLL_GetMainSource>
 8003d58:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d003      	beq.n	8003d68 <HAL_RCC_GetSysClockFreq+0x64>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d003      	beq.n	8003d6e <HAL_RCC_GetSysClockFreq+0x6a>
 8003d66:	e00d      	b.n	8003d84 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003d68:	4b1a      	ldr	r3, [pc, #104]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d6a:	60bb      	str	r3, [r7, #8]
        break;
 8003d6c:	e015      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003d6e:	f7ff f829 	bl	8002dc4 <LL_RCC_HSE_IsEnabledDiv2>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d102      	bne.n	8003d7e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003d78:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d7a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003d7c:	e00d      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003d7e:	4b16      	ldr	r3, [pc, #88]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d80:	60bb      	str	r3, [r7, #8]
        break;
 8003d82:	e00a      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003d84:	f7ff f9bd 	bl	8003102 <LL_RCC_MSI_GetRange>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	091b      	lsrs	r3, r3, #4
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	4a0f      	ldr	r2, [pc, #60]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d96:	60bb      	str	r3, [r7, #8]
        break;
 8003d98:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003d9a:	f7ff faaf 	bl	80032fc <LL_RCC_PLL_GetN>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	fb03 f402 	mul.w	r4, r3, r2
 8003da6:	f7ff fac2 	bl	800332e <LL_RCC_PLL_GetDivider>
 8003daa:	4603      	mov	r3, r0
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	3301      	adds	r3, #1
 8003db0:	fbb4 f4f3 	udiv	r4, r4, r3
 8003db4:	f7ff faaf 	bl	8003316 <LL_RCC_PLL_GetR>
 8003db8:	4603      	mov	r3, r0
 8003dba:	0f5b      	lsrs	r3, r3, #29
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	fbb4 f3f3 	udiv	r3, r4, r3
 8003dc2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd90      	pop	{r4, r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	08007550 	.word	0x08007550
 8003dd4:	00f42400 	.word	0x00f42400
 8003dd8:	01e84800 	.word	0x01e84800

08003ddc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ddc:	b598      	push	{r3, r4, r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003de0:	f7ff ff90 	bl	8003d04 <HAL_RCC_GetSysClockFreq>
 8003de4:	4604      	mov	r4, r0
 8003de6:	f7ff fa3f 	bl	8003268 <LL_RCC_GetAHBPrescaler>
 8003dea:	4603      	mov	r3, r0
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	f003 030f 	and.w	r3, r3, #15
 8003df2:	4a03      	ldr	r2, [pc, #12]	; (8003e00 <HAL_RCC_GetHCLKFreq+0x24>)
 8003df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	bd98      	pop	{r3, r4, r7, pc}
 8003e00:	08007510 	.word	0x08007510

08003e04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2bb0      	cmp	r3, #176	; 0xb0
 8003e10:	d903      	bls.n	8003e1a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003e12:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	e007      	b.n	8003e2a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	091b      	lsrs	r3, r3, #4
 8003e1e:	f003 030f 	and.w	r3, r3, #15
 8003e22:	4a10      	ldr	r2, [pc, #64]	; (8003e64 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e28:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003e2a:	f7ff fa29 	bl	8003280 <LL_RCC_GetAHB4Prescaler>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	091b      	lsrs	r3, r3, #4
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	4a0c      	ldr	r2, [pc, #48]	; (8003e68 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e42:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4a09      	ldr	r2, [pc, #36]	; (8003e6c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003e48:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4c:	0c9b      	lsrs	r3, r3, #18
 8003e4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 f80c 	bl	8003e70 <RCC_SetFlashLatency>
 8003e58:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	08007550 	.word	0x08007550
 8003e68:	08007510 	.word	0x08007510
 8003e6c:	431bde83 	.word	0x431bde83

08003e70 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003e70:	b590      	push	{r4, r7, lr}
 8003e72:	b08f      	sub	sp, #60	; 0x3c
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003e7a:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <RCC_SetFlashLatency+0x9c>)
 8003e7c:	f107 041c 	add.w	r4, r7, #28
 8003e80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003e86:	4b22      	ldr	r3, [pc, #136]	; (8003f10 <RCC_SetFlashLatency+0xa0>)
 8003e88:	f107 040c 	add.w	r4, r7, #12
 8003e8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003e92:	2300      	movs	r3, #0
 8003e94:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e96:	2300      	movs	r3, #0
 8003e98:	633b      	str	r3, [r7, #48]	; 0x30
 8003e9a:	e013      	b.n	8003ec4 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	3338      	adds	r3, #56	; 0x38
 8003ea2:	443b      	add	r3, r7
 8003ea4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d807      	bhi.n	8003ebe <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	3338      	adds	r3, #56	; 0x38
 8003eb4:	443b      	add	r3, r7
 8003eb6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003eba:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8003ebc:	e005      	b.n	8003eca <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec6:	2b03      	cmp	r3, #3
 8003ec8:	d9e8      	bls.n	8003e9c <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003eca:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <RCC_SetFlashLatency+0xa4>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f023 0207 	bic.w	r2, r3, #7
 8003ed2:	4910      	ldr	r1, [pc, #64]	; (8003f14 <RCC_SetFlashLatency+0xa4>)
 8003ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003eda:	f7fd fc1b 	bl	8001714 <HAL_GetTick>
 8003ede:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003ee0:	e008      	b.n	8003ef4 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ee2:	f7fd fc17 	bl	8001714 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e007      	b.n	8003f04 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003ef4:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <RCC_SetFlashLatency+0xa4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d1ef      	bne.n	8003ee2 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	373c      	adds	r7, #60	; 0x3c
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd90      	pop	{r4, r7, pc}
 8003f0c:	08007354 	.word	0x08007354
 8003f10:	08007364 	.word	0x08007364
 8003f14:	58004000 	.word	0x58004000

08003f18 <LL_RCC_LSE_IsEnabled>:
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f24:	f003 0301 	and.w	r3, r3, #1
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <LL_RCC_LSE_IsEnabled+0x18>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <LL_RCC_LSE_IsEnabled+0x1a>
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <LL_RCC_LSE_IsReady>:
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d101      	bne.n	8003f54 <LL_RCC_LSE_IsReady+0x18>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <LL_RCC_LSE_IsReady+0x1a>
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_RCC_SetRFWKPClockSource>:
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <LL_RCC_SetSMPSClockSource>:
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003f94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	f023 0203 	bic.w	r2, r3, #3
 8003f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_RCC_SetSMPSPrescaler>:
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <LL_RCC_SetUSARTClockSource>:
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003fe4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	f023 0203 	bic.w	r2, r3, #3
 8003ff0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <LL_RCC_SetLPUARTClockSource>:
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004018:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800401c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4313      	orrs	r3, r2
 8004024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <LL_RCC_SetI2CClockSource>:
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800403c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004040:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	091b      	lsrs	r3, r3, #4
 8004048:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800404c:	43db      	mvns	r3, r3
 800404e:	401a      	ands	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004058:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800405c:	4313      	orrs	r3, r2
 800405e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <LL_RCC_SetLPTIMClockSource>:
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800407a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	0c1b      	lsrs	r3, r3, #16
 8004082:	041b      	lsls	r3, r3, #16
 8004084:	43db      	mvns	r3, r3
 8004086:	401a      	ands	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	041b      	lsls	r3, r3, #16
 800408c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <LL_RCC_SetRNGClockSource>:
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80040aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80040b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <LL_RCC_SetCLK48ClockSource>:
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80040d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <LL_RCC_SetADCClockSource>:
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800410e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <LL_RCC_SetRTCClockSource>:
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800412e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004136:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800413a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004146:	bf00      	nop
 8004148:	370c      	adds	r7, #12
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <LL_RCC_GetRTCClockSource>:
{
 8004152:	b480      	push	{r7}
 8004154:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004162:	4618      	mov	r0, r3
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <LL_RCC_ForceBackupDomainReset>:
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004178:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800417c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004184:	bf00      	nop
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <LL_RCC_ReleaseBackupDomainReset>:
{
 800418e:	b480      	push	{r7}
 8004190:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800419e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80041a6:	bf00      	nop
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80041b8:	2300      	movs	r3, #0
 80041ba:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80041bc:	2300      	movs	r3, #0
 80041be:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d046      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80041cc:	f7ff ffc1 	bl	8004152 <LL_RCC_GetRTCClockSource>
 80041d0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d03c      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80041dc:	f7fe fd5e 	bl	8002c9c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d105      	bne.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff ff9b 	bl	8004126 <LL_RCC_SetRTCClockSource>
 80041f0:	e02e      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80041f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80041fc:	f7ff ffb6 	bl	800416c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004200:	f7ff ffc5 	bl	800418e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800421c:	f7ff fe7c 	bl	8003f18 <LL_RCC_LSE_IsEnabled>
 8004220:	4603      	mov	r3, r0
 8004222:	2b01      	cmp	r3, #1
 8004224:	d114      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004226:	f7fd fa75 	bl	8001714 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800422c:	e00b      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800422e:	f7fd fa71 	bl	8001714 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	f241 3288 	movw	r2, #5000	; 0x1388
 800423c:	4293      	cmp	r3, r2
 800423e:	d902      	bls.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	77fb      	strb	r3, [r7, #31]
              break;
 8004244:	e004      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004246:	f7ff fe79 	bl	8003f3c <LL_RCC_LSE_IsReady>
 800424a:	4603      	mov	r3, r0
 800424c:	2b01      	cmp	r3, #1
 800424e:	d1ee      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004250:	7ffb      	ldrb	r3, [r7, #31]
 8004252:	77bb      	strb	r3, [r7, #30]
 8004254:	e001      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004256:	7ffb      	ldrb	r3, [r7, #31]
 8004258:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d004      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff feb6 	bl	8003fdc <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d004      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff fec1 	bl	8004008 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0310 	and.w	r3, r3, #16
 800428e:	2b00      	cmp	r3, #0
 8004290:	d004      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff fee9 	bl	800406e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0320 	and.w	r3, r3, #32
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d004      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff fede 	bl	800406e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d004      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff feb6 	bl	8004034 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d02b      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042dc:	d008      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042e6:	d003      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d105      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff fed4 	bl	80040a2 <LL_RCC_SetRNGClockSource>
 80042fa:	e00a      	b.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x162>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	2000      	movs	r0, #0
 8004308:	f7ff fecb 	bl	80040a2 <LL_RCC_SetRNGClockSource>
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f7ff fede 	bl	80040ce <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800431a:	d107      	bne.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800431c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800432a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004334:	2b00      	cmp	r3, #0
 8004336:	d011      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff fedc 	bl	80040fa <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800434a:	d107      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800434c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800435a:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d004      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff fdf7 	bl	8003f60 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d009      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff fe16 	bl	8003fb4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff fdfd 	bl	8003f8c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004392:	7fbb      	ldrb	r3, [r7, #30]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e090      	b.n	80044d0 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d106      	bne.n	80043c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fd f830 	bl	8001428 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2202      	movs	r2, #2
 80043cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	22ca      	movs	r2, #202	; 0xca
 80043d6:	625a      	str	r2, [r3, #36]	; 0x24
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2253      	movs	r2, #83	; 0x53
 80043de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f89f 	bl	8004524 <RTC_EnterInitMode>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d009      	beq.n	8004400 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	22ff      	movs	r2, #255	; 0xff
 80043f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2204      	movs	r2, #4
 80043f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e067      	b.n	80044d0 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6812      	ldr	r2, [r2, #0]
 800440a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800440e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004412:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6899      	ldr	r1, [r3, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	431a      	orrs	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	68d2      	ldr	r2, [r2, #12]
 800443a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6919      	ldr	r1, [r3, #16]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	041a      	lsls	r2, r3, #16
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800445e:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0202 	bic.w	r2, r2, #2
 800446e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69da      	ldr	r2, [r3, #28]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	2b00      	cmp	r3, #0
 8004494:	d113      	bne.n	80044be <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f81e 	bl	80044d8 <HAL_RTC_WaitForSynchro>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00d      	beq.n	80044be <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	22ff      	movs	r2, #255	; 0xff
 80044a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2204      	movs	r2, #4
 80044ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e008      	b.n	80044d0 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	22ff      	movs	r2, #255	; 0xff
 80044c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80044ce:	2300      	movs	r3, #0
  }
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80044ee:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80044f0:	f7fd f910 	bl	8001714 <HAL_GetTick>
 80044f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044f6:	e009      	b.n	800450c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044f8:	f7fd f90c 	bl	8001714 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004506:	d901      	bls.n	800450c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e007      	b.n	800451c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f003 0320 	and.w	r3, r3, #32
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0ee      	beq.n	80044f8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	d119      	bne.n	800456e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f04f 32ff 	mov.w	r2, #4294967295
 8004542:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004544:	f7fd f8e6 	bl	8001714 <HAL_GetTick>
 8004548:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800454a:	e009      	b.n	8004560 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800454c:	f7fd f8e2 	bl	8001714 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800455a:	d901      	bls.n	8004560 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e007      	b.n	8004570 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0ee      	beq.n	800454c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 3020 	ldrb.w	r3, [r3, #32]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800458e:	2302      	movs	r3, #2
 8004590:	e0a8      	b.n	80046e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2202      	movs	r2, #2
 800459e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	22ca      	movs	r2, #202	; 0xca
 80045a8:	625a      	str	r2, [r3, #36]	; 0x24
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2253      	movs	r2, #83	; 0x53
 80045b0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d020      	beq.n	8004602 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80045c0:	f7fd f8a8 	bl	8001714 <HAL_GetTick>
 80045c4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80045c6:	e015      	b.n	80045f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045c8:	f7fd f8a4 	bl	8001714 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045d6:	d90d      	bls.n	80045f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	22ff      	movs	r2, #255	; 0xff
 80045de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2203      	movs	r2, #3
 80045e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e077      	b.n	80046e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1e2      	bne.n	80045c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004610:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	b2da      	uxtb	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004622:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004624:	f7fd f876 	bl	8001714 <HAL_GetTick>
 8004628:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800462a:	e015      	b.n	8004658 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800462c:	f7fd f872 	bl	8001714 <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800463a:	d90d      	bls.n	8004658 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	22ff      	movs	r2, #255	; 0xff
 8004642:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2203      	movs	r2, #3
 8004648:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e045      	b.n	80046e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0e2      	beq.n	800462c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0207 	bic.w	r2, r2, #7
 800467c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6899      	ldr	r1, [r3, #8]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	430a      	orrs	r2, r1
 800468c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800468e:	4b17      	ldr	r3, [pc, #92]	; (80046ec <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004694:	4a15      	ldr	r2, [pc, #84]	; (80046ec <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004696:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800469a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800469e:	4b13      	ldr	r3, [pc, #76]	; (80046ec <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a12      	ldr	r2, [pc, #72]	; (80046ec <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80046a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046a8:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046b8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046c8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	22ff      	movs	r2, #255	; 0xff
 80046d0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	58000800 	.word	0x58000800

080046f0 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8004702:	2302      	movs	r3, #2
 8004704:	e04d      	b.n	80047a2 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2202      	movs	r2, #2
 8004712:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	22ca      	movs	r2, #202	; 0xca
 800471c:	625a      	str	r2, [r3, #36]	; 0x24
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2253      	movs	r2, #83	; 0x53
 8004724:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004734:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004744:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8004746:	f7fc ffe5 	bl	8001714 <HAL_GetTick>
 800474a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800474c:	e015      	b.n	800477a <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800474e:	f7fc ffe1 	bl	8001714 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800475c:	d90d      	bls.n	800477a <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	22ff      	movs	r2, #255	; 0xff
 8004764:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2203      	movs	r2, #3
 800476a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e013      	b.n	80047a2 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0e2      	beq.n	800474e <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	22ff      	movs	r2, #255	; 0xff
 800478e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00b      	beq.n	80047da <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f818 	bl	80047f8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80047d8:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80047da:	4b06      	ldr	r3, [pc, #24]	; (80047f4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80047dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80047e0:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80047ea:	bf00      	nop
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	58000800 	.word	0x58000800

080047f8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800480c:	b5b0      	push	{r4, r5, r7, lr}
 800480e:	b0ce      	sub	sp, #312	; 0x138
 8004810:	af00      	add	r7, sp, #0
 8004812:	4605      	mov	r5, r0
 8004814:	460c      	mov	r4, r1
 8004816:	4610      	mov	r0, r2
 8004818:	4619      	mov	r1, r3
 800481a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800481e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8004822:	462a      	mov	r2, r5
 8004824:	701a      	strb	r2, [r3, #0]
 8004826:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800482a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800482e:	4622      	mov	r2, r4
 8004830:	801a      	strh	r2, [r3, #0]
 8004832:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004836:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800483a:	4602      	mov	r2, r0
 800483c:	801a      	strh	r2, [r3, #0]
 800483e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004842:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8004846:	460a      	mov	r2, r1
 8004848:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800484a:	f107 0310 	add.w	r3, r7, #16
 800484e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8004852:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004856:	3308      	adds	r3, #8
 8004858:	f107 0210 	add.w	r2, r7, #16
 800485c:	4413      	add	r3, r2
 800485e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004862:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004866:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800486a:	4413      	add	r3, r2
 800486c:	3309      	adds	r3, #9
 800486e:	f107 0210 	add.w	r2, r7, #16
 8004872:	4413      	add	r3, r2
 8004874:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004878:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800487c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800488a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800488e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004892:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8004896:	7812      	ldrb	r2, [r2, #0]
 8004898:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800489a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800489e:	3301      	adds	r3, #1
 80048a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80048a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80048a8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80048ac:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80048b0:	8812      	ldrh	r2, [r2, #0]
 80048b2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80048b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048ba:	3302      	adds	r3, #2
 80048bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80048c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80048c4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80048c8:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80048cc:	8812      	ldrh	r2, [r2, #0]
 80048ce:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80048d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048d6:	3302      	adds	r3, #2
 80048d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80048dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80048e0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80048e4:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80048e8:	7812      	ldrb	r2, [r2, #0]
 80048ea:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80048ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80048f0:	3301      	adds	r3, #1
 80048f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80048f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80048fa:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80048fe:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004900:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004904:	3301      	adds	r3, #1
 8004906:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800490a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800490e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004912:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8004914:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004918:	3301      	adds	r3, #1
 800491a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800491e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004922:	3308      	adds	r3, #8
 8004924:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004928:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fc21 	bl	8005174 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8004932:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004936:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800493a:	4413      	add	r3, r2
 800493c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8004940:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004944:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004948:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800494a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800494e:	3301      	adds	r3, #1
 8004950:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8004954:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004958:	3301      	adds	r3, #1
 800495a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800495e:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8004962:	4618      	mov	r0, r3
 8004964:	f000 fc06 	bl	8005174 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8004968:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800496c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004970:	4413      	add	r3, r2
 8004972:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8004976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800497a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800497e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004980:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004984:	3302      	adds	r3, #2
 8004986:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800498a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800498e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8004992:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8004994:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004998:	3302      	adds	r3, #2
 800499a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800499e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049a2:	2218      	movs	r2, #24
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fbf4 	bl	8005194 <Osal_MemSet>
  rq.ogf = 0x3f;
 80049ac:	233f      	movs	r3, #63	; 0x3f
 80049ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80049b2:	2383      	movs	r3, #131	; 0x83
 80049b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80049b8:	f107 0310 	add.w	r3, r7, #16
 80049bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80049c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80049c8:	f107 030f 	add.w	r3, r7, #15
 80049cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80049d0:	2301      	movs	r3, #1
 80049d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80049d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80049da:	2100      	movs	r1, #0
 80049dc:	4618      	mov	r0, r3
 80049de:	f000 fe4f 	bl	8005680 <hci_send_req>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	da01      	bge.n	80049ec <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80049e8:	23ff      	movs	r3, #255	; 0xff
 80049ea:	e004      	b.n	80049f6 <aci_gap_set_discoverable+0x1ea>
  return status;
 80049ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80049f0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80049f4:	781b      	ldrb	r3, [r3, #0]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bdb0      	pop	{r4, r5, r7, pc}

08004a00 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8004a00:	b590      	push	{r4, r7, lr}
 8004a02:	b0cd      	sub	sp, #308	; 0x134
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	4604      	mov	r4, r0
 8004a08:	4608      	mov	r0, r1
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a10:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a1a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004a1e:	4622      	mov	r2, r4
 8004a20:	701a      	strb	r2, [r3, #0]
 8004a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a26:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	701a      	strb	r2, [r3, #0]
 8004a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a32:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8004a36:	460a      	mov	r2, r1
 8004a38:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8004a3a:	f107 0310 	add.w	r3, r7, #16
 8004a3e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004a42:	f107 0308 	add.w	r3, r7, #8
 8004a46:	2207      	movs	r2, #7
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fba2 	bl	8005194 <Osal_MemSet>
  int index_input = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8004a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a5e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004a62:	7812      	ldrb	r2, [r2, #0]
 8004a64:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004a66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8004a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a78:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004a7c:	7812      	ldrb	r2, [r2, #0]
 8004a7e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004a80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a84:	3301      	adds	r3, #1
 8004a86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8004a8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a92:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8004a96:	7812      	ldrb	r2, [r2, #0]
 8004a98:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004a9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004aa4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004aa8:	2218      	movs	r2, #24
 8004aaa:	2100      	movs	r1, #0
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 fb71 	bl	8005194 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004ab2:	233f      	movs	r3, #63	; 0x3f
 8004ab4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8004ab8:	238a      	movs	r3, #138	; 0x8a
 8004aba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004abe:	f107 0310 	add.w	r3, r7, #16
 8004ac2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004ac6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004aca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004ace:	f107 0308 	add.w	r3, r7, #8
 8004ad2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8004ad6:	2307      	movs	r3, #7
 8004ad8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004adc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fdcc 	bl	8005680 <hci_send_req>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	da01      	bge.n	8004af2 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8004aee:	23ff      	movs	r3, #255	; 0xff
 8004af0:	e02e      	b.n	8004b50 <aci_gap_init+0x150>
  if ( resp.Status )
 8004af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <aci_gap_init+0x10c>
    return resp.Status;
 8004b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b04:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	e021      	b.n	8004b50 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8004b0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b10:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b14:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8004b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b2a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b2e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004b38:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8004b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b3e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b42:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004b4c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd90      	pop	{r4, r7, pc}

08004b5a <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b0cc      	sub	sp, #304	; 0x130
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	4602      	mov	r2, r0
 8004b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b6a:	6019      	str	r1, [r3, #0]
 8004b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b70:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004b74:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8004b76:	f107 0310 	add.w	r3, r7, #16
 8004b7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b82:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004b86:	2200      	movs	r2, #0
 8004b88:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8004b90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b98:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004b9c:	7812      	ldrb	r2, [r2, #0]
 8004b9e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004ba0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8004baa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bae:	1c58      	adds	r0, r3, #1
 8004bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004bb8:	781a      	ldrb	r2, [r3, #0]
 8004bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bc2:	6819      	ldr	r1, [r3, #0]
 8004bc4:	f000 fad6 	bl	8005174 <Osal_MemCpy>
  index_input += AdvDataLen;
 8004bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bcc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004bdc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004be0:	2218      	movs	r2, #24
 8004be2:	2100      	movs	r1, #0
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fad5 	bl	8005194 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004bea:	233f      	movs	r3, #63	; 0x3f
 8004bec:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8004bf0:	238e      	movs	r3, #142	; 0x8e
 8004bf2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004bf6:	f107 0310 	add.w	r3, r7, #16
 8004bfa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004bfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004c06:	f107 030f 	add.w	r3, r7, #15
 8004c0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004c14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c18:	2100      	movs	r1, #0
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fd30 	bl	8005680 <hci_send_req>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	da01      	bge.n	8004c2a <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8004c26:	23ff      	movs	r3, #255	; 0xff
 8004c28:	e004      	b.n	8004c34 <aci_gap_update_adv_data+0xda>
  return status;
 8004c2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004c32:	781b      	ldrb	r3, [r3, #0]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <aci_gap_delete_ad_type>:

tBleStatus aci_gap_delete_ad_type( uint8_t ADType )
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b0cc      	sub	sp, #304	; 0x130
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	4602      	mov	r2, r0
 8004c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004c4e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_delete_ad_type_cp0 *cp0 = (aci_gap_delete_ad_type_cp0*)(cmd_buffer);
 8004c50:	f107 0310 	add.w	r3, r7, #16
 8004c54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004c60:	2200      	movs	r2, #0
 8004c62:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ADType = ADType;
 8004c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c72:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004c76:	7812      	ldrb	r2, [r2, #0]
 8004c78:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004c7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c7e:	3301      	adds	r3, #1
 8004c80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004c84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c88:	2218      	movs	r2, #24
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fa81 	bl	8005194 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004c92:	233f      	movs	r3, #63	; 0x3f
 8004c94:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08f;
 8004c98:	238f      	movs	r3, #143	; 0x8f
 8004c9a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004c9e:	f107 0310 	add.w	r3, r7, #16
 8004ca2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004ca6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004caa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004cae:	f107 030f 	add.w	r3, r7, #15
 8004cb2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004cbc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fcdc 	bl	8005680 <hci_send_req>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	da01      	bge.n	8004cd2 <aci_gap_delete_ad_type+0x94>
    return BLE_STATUS_TIMEOUT;
 8004cce:	23ff      	movs	r3, #255	; 0xff
 8004cd0:	e004      	b.n	8004cdc <aci_gap_delete_ad_type+0x9e>
  return status;
 8004cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004cda:	781b      	ldrb	r3, [r3, #0]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b088      	sub	sp, #32
 8004cea:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004cec:	2300      	movs	r3, #0
 8004cee:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004cf0:	f107 0308 	add.w	r3, r7, #8
 8004cf4:	2218      	movs	r2, #24
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fa4b 	bl	8005194 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004cfe:	233f      	movs	r3, #63	; 0x3f
 8004d00:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8004d02:	f240 1301 	movw	r3, #257	; 0x101
 8004d06:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004d08:	1dfb      	adds	r3, r7, #7
 8004d0a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004d10:	f107 0308 	add.w	r3, r7, #8
 8004d14:	2100      	movs	r1, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fcb2 	bl	8005680 <hci_send_req>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	da01      	bge.n	8004d26 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8004d22:	23ff      	movs	r3, #255	; 0xff
 8004d24:	e000      	b.n	8004d28 <aci_gatt_init+0x42>
  return status;
 8004d26:	79fb      	ldrb	r3, [r7, #7]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8004d30:	b5b0      	push	{r4, r5, r7, lr}
 8004d32:	b0cc      	sub	sp, #304	; 0x130
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	4605      	mov	r5, r0
 8004d38:	460c      	mov	r4, r1
 8004d3a:	4610      	mov	r0, r2
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d42:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004d46:	462a      	mov	r2, r5
 8004d48:	801a      	strh	r2, [r3, #0]
 8004d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d52:	4622      	mov	r2, r4
 8004d54:	801a      	strh	r2, [r3, #0]
 8004d56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d5a:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8004d5e:	4602      	mov	r2, r0
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d66:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004d6a:	460a      	mov	r2, r1
 8004d6c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8004d6e:	f107 0310 	add.w	r3, r7, #16
 8004d72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8004d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d90:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004d94:	8812      	ldrh	r2, [r2, #0]
 8004d96:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004d98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8004da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004da6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004daa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004dae:	8812      	ldrh	r2, [r2, #0]
 8004db0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8004db2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004db6:	3302      	adds	r3, #2
 8004db8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8004dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dc0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004dc4:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8004dc8:	7812      	ldrb	r2, [r2, #0]
 8004dca:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004dcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8004dd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dda:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004dde:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8004de2:	7812      	ldrb	r2, [r2, #0]
 8004de4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004de6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004dea:	3301      	adds	r3, #1
 8004dec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8004df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004df4:	1d98      	adds	r0, r3, #6
 8004df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dfa:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	461a      	mov	r2, r3
 8004e02:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004e06:	f000 f9b5 	bl	8005174 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8004e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004e18:	4413      	add	r3, r2
 8004e1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004e1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e22:	2218      	movs	r2, #24
 8004e24:	2100      	movs	r1, #0
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 f9b4 	bl	8005194 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004e2c:	233f      	movs	r3, #63	; 0x3f
 8004e2e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8004e32:	f44f 7383 	mov.w	r3, #262	; 0x106
 8004e36:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004e3a:	f107 0310 	add.w	r3, r7, #16
 8004e3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004e42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004e4a:	f107 030f 	add.w	r3, r7, #15
 8004e4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004e58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fc0e 	bl	8005680 <hci_send_req>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	da01      	bge.n	8004e6e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8004e6a:	23ff      	movs	r3, #255	; 0xff
 8004e6c:	e004      	b.n	8004e78 <aci_gatt_update_char_value+0x148>
  return status;
 8004e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e72:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004e76:	781b      	ldrb	r3, [r3, #0]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bdb0      	pop	{r4, r5, r7, pc}

08004e82 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b0cc      	sub	sp, #304	; 0x130
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e96:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	701a      	strb	r2, [r3, #0]
 8004e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004ea6:	460a      	mov	r2, r1
 8004ea8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8004eaa:	f107 0310 	add.w	r3, r7, #16
 8004eae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eb6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004eba:	2200      	movs	r2, #0
 8004ebc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8004ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ecc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004ed4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ed8:	3301      	adds	r3, #1
 8004eda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8004ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ee2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ee6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004eea:	7812      	ldrb	r2, [r2, #0]
 8004eec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004eee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8004ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004efc:	1c98      	adds	r0, r3, #2
 8004efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f02:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004f06:	781a      	ldrb	r2, [r3, #0]
 8004f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f10:	6819      	ldr	r1, [r3, #0]
 8004f12:	f000 f92f 	bl	8005174 <Osal_MemCpy>
  index_input += Length;
 8004f16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f1a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004f24:	4413      	add	r3, r2
 8004f26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004f2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f2e:	2218      	movs	r2, #24
 8004f30:	2100      	movs	r1, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 f92e 	bl	8005194 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004f38:	233f      	movs	r3, #63	; 0x3f
 8004f3a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8004f3e:	230c      	movs	r3, #12
 8004f40:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004f44:	f107 0310 	add.w	r3, r7, #16
 8004f48:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004f4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004f54:	f107 030f 	add.w	r3, r7, #15
 8004f58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004f62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f66:	2100      	movs	r1, #0
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fb89 	bl	8005680 <hci_send_req>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	da01      	bge.n	8004f78 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8004f74:	23ff      	movs	r3, #255	; 0xff
 8004f76:	e004      	b.n	8004f82 <aci_hal_write_config_data+0x100>
  return status;
 8004f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f7c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004f80:	781b      	ldrb	r3, [r3, #0]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b0cc      	sub	sp, #304	; 0x130
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	4602      	mov	r2, r0
 8004f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f98:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004f9c:	701a      	strb	r2, [r3, #0]
 8004f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004fa6:	460a      	mov	r2, r1
 8004fa8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8004faa:	f107 0310 	add.w	r3, r7, #16
 8004fae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004fba:	2200      	movs	r2, #0
 8004fbc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8004fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fcc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004fd0:	7812      	ldrb	r2, [r2, #0]
 8004fd2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004fd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fd8:	3301      	adds	r3, #1
 8004fda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8004fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fe2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fe6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004fea:	7812      	ldrb	r2, [r2, #0]
 8004fec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004fee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004ff8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ffc:	2218      	movs	r2, #24
 8004ffe:	2100      	movs	r1, #0
 8005000:	4618      	mov	r0, r3
 8005002:	f000 f8c7 	bl	8005194 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005006:	233f      	movs	r3, #63	; 0x3f
 8005008:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800500c:	230f      	movs	r3, #15
 800500e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005012:	f107 0310 	add.w	r3, r7, #16
 8005016:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800501a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800501e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005022:	f107 030f 	add.w	r3, r7, #15
 8005026:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800502a:	2301      	movs	r3, #1
 800502c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005030:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005034:	2100      	movs	r1, #0
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fb22 	bl	8005680 <hci_send_req>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	da01      	bge.n	8005046 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8005042:	23ff      	movs	r3, #255	; 0xff
 8005044:	e004      	b.n	8005050 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8005046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800504e:	781b      	ldrb	r3, [r3, #0]
}
 8005050:	4618      	mov	r0, r3
 8005052:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b088      	sub	sp, #32
 800505e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005060:	2300      	movs	r3, #0
 8005062:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005064:	f107 0308 	add.w	r3, r7, #8
 8005068:	2218      	movs	r2, #24
 800506a:	2100      	movs	r1, #0
 800506c:	4618      	mov	r0, r3
 800506e:	f000 f891 	bl	8005194 <Osal_MemSet>
  rq.ogf = 0x03;
 8005072:	2303      	movs	r3, #3
 8005074:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8005076:	2303      	movs	r3, #3
 8005078:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800507a:	1dfb      	adds	r3, r7, #7
 800507c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800507e:	2301      	movs	r3, #1
 8005080:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005082:	f107 0308 	add.w	r3, r7, #8
 8005086:	2100      	movs	r1, #0
 8005088:	4618      	mov	r0, r3
 800508a:	f000 faf9 	bl	8005680 <hci_send_req>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	da01      	bge.n	8005098 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005094:	23ff      	movs	r3, #255	; 0xff
 8005096:	e000      	b.n	800509a <hci_reset+0x40>
  return status;
 8005098:	79fb      	ldrb	r3, [r7, #7]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3720      	adds	r7, #32
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <hci_le_set_scan_response_data>:
  return status;
}

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b0cc      	sub	sp, #304	; 0x130
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	4602      	mov	r2, r0
 80050aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050b2:	6019      	str	r1, [r3, #0]
 80050b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80050bc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 80050be:	f107 0310 	add.w	r3, r7, #16
 80050c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80050c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ca:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80050ce:	2200      	movs	r2, #0
 80050d0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80050d2:	2300      	movs	r3, #0
 80050d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 80050d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050e0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80050e4:	7812      	ldrb	r2, [r2, #0]
 80050e6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80050e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050ec:	3301      	adds	r3, #1
 80050ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 80050f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050f6:	1c58      	adds	r0, r3, #1
 80050f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005100:	221f      	movs	r2, #31
 8005102:	6819      	ldr	r1, [r3, #0]
 8005104:	f000 f836 	bl	8005174 <Osal_MemCpy>
  index_input += 31;
 8005108:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800510c:	331f      	adds	r3, #31
 800510e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005112:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005116:	2218      	movs	r2, #24
 8005118:	2100      	movs	r1, #0
 800511a:	4618      	mov	r0, r3
 800511c:	f000 f83a 	bl	8005194 <Osal_MemSet>
  rq.ogf = 0x08;
 8005120:	2308      	movs	r3, #8
 8005122:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 8005126:	2309      	movs	r3, #9
 8005128:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800512c:	f107 0310 	add.w	r3, r7, #16
 8005130:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005134:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005138:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800513c:	f107 030f 	add.w	r3, r7, #15
 8005140:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005144:	2301      	movs	r3, #1
 8005146:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800514a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800514e:	2100      	movs	r1, #0
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fa95 	bl	8005680 <hci_send_req>
 8005156:	4603      	mov	r3, r0
 8005158:	2b00      	cmp	r3, #0
 800515a:	da01      	bge.n	8005160 <hci_le_set_scan_response_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 800515c:	23ff      	movs	r3, #255	; 0xff
 800515e:	e004      	b.n	800516a <hci_le_set_scan_response_data+0xc8>
  return status;
 8005160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005164:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005168:	781b      	ldrb	r3, [r3, #0]
}
 800516a:	4618      	mov	r0, r3
 800516c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	68f8      	ldr	r0, [r7, #12]
 8005186:	f002 f8b5 	bl	80072f4 <memcpy>
 800518a:	4603      	mov	r3, r0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	68b9      	ldr	r1, [r7, #8]
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f002 f8b3 	bl	8007310 <memset>
 80051aa:	4603      	mov	r3, r0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  return;
 80051b8:	bf00      	nop
}
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80051c2:	b480      	push	{r7}
 80051c4:	af00      	add	r7, sp, #0
  return;
 80051c6:	bf00      	nop
}
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
  return;
 80051d4:	bf00      	nop
}
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80051de:	b480      	push	{r7}
 80051e0:	af00      	add	r7, sp, #0
  return;
 80051e2:	bf00      	nop
}
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  return;
 80051f0:	bf00      	nop
}
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80051fa:	b480      	push	{r7}
 80051fc:	af00      	add	r7, sp, #0
  return;
 80051fe:	bf00      	nop
}
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  return;
 800520c:	bf00      	nop
}
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8005216:	b480      	push	{r7}
 8005218:	af00      	add	r7, sp, #0
  return;
 800521a:	bf00      	nop
}
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  return;
 8005228:	bf00      	nop
}
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8005232:	b480      	push	{r7}
 8005234:	af00      	add	r7, sp, #0
  return;
 8005236:	bf00      	nop
}
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
  return;
 8005244:	bf00      	nop
}
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800524e:	b480      	push	{r7}
 8005250:	af00      	add	r7, sp, #0
  return;
 8005252:	bf00      	nop
}
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  return;
 8005260:	bf00      	nop
}
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800526a:	b480      	push	{r7}
 800526c:	af00      	add	r7, sp, #0
  return;
 800526e:	bf00      	nop
}
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  return;
 800527c:	bf00      	nop
}
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8005286:	b480      	push	{r7}
 8005288:	af00      	add	r7, sp, #0
  return;
 800528a:	bf00      	nop
}
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  return;
 8005298:	bf00      	nop
}
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 80052a2:	b480      	push	{r7}
 80052a4:	af00      	add	r7, sp, #0
  return;
 80052a6:	bf00      	nop
}
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80052b4:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <SVCCTL_Init+0x18>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80052ba:	4b04      	ldr	r3, [pc, #16]	; (80052cc <SVCCTL_Init+0x1c>)
 80052bc:	2200      	movs	r2, #0
 80052be:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80052c0:	f000 f806 	bl	80052d0 <SVCCTL_SvcInit>

  return;
 80052c4:	bf00      	nop
}
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	200000c0 	.word	0x200000c0
 80052cc:	200000e0 	.word	0x200000e0

080052d0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
  BAS_Init();
 80052d4:	f7ff ff6e 	bl	80051b4 <BAS_Init>

  BLS_Init();
 80052d8:	f7ff ff73 	bl	80051c2 <BLS_Init>

  CRS_STM_Init();
 80052dc:	f7ff ff78 	bl	80051d0 <CRS_STM_Init>

  DIS_Init();
 80052e0:	f7ff ff7d 	bl	80051de <DIS_Init>

  EDS_STM_Init();
 80052e4:	f7ff ff82 	bl	80051ec <EDS_STM_Init>

  HIDS_Init();
 80052e8:	f7ff ff87 	bl	80051fa <HIDS_Init>

  HRS_Init();
 80052ec:	f7ff ff8c 	bl	8005208 <HRS_Init>

  HTS_Init();
 80052f0:	f7ff ff91 	bl	8005216 <HTS_Init>

  IAS_Init();
 80052f4:	f7ff ff96 	bl	8005224 <IAS_Init>

  LLS_Init();
 80052f8:	f7ff ff9b 	bl	8005232 <LLS_Init>

  TPS_Init();
 80052fc:	f7ff ffa0 	bl	8005240 <TPS_Init>

  MOTENV_STM_Init();
 8005300:	f7ff ffa5 	bl	800524e <MOTENV_STM_Init>

  P2PS_STM_Init();
 8005304:	f7ff ffaa 	bl	800525c <P2PS_STM_Init>

  ZDD_STM_Init();
 8005308:	f7ff ffaf 	bl	800526a <ZDD_STM_Init>

  OTAS_STM_Init();
 800530c:	f7ff ffb4 	bl	8005278 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8005310:	f7ff ffc0 	bl	8005294 <BVOPUS_STM_Init>

  MESH_Init();
 8005314:	f7ff ffb7 	bl	8005286 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8005318:	f7ff ffc3 	bl	80052a2 <SVCCTL_InitCustomSvc>
  
  return;
 800531c:	bf00      	nop
}
 800531e:	bd80      	pop	{r7, pc}

08005320 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3301      	adds	r3, #1
 800532c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800532e:	2300      	movs	r3, #0
 8005330:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2bff      	cmp	r3, #255	; 0xff
 8005338:	d125      	bne.n	8005386 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	3302      	adds	r3, #2
 800533e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	b29b      	uxth	r3, r3
 8005346:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800534a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800534e:	d118      	bne.n	8005382 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005350:	2300      	movs	r3, #0
 8005352:	757b      	strb	r3, [r7, #21]
 8005354:	e00d      	b.n	8005372 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8005356:	7d7b      	ldrb	r3, [r7, #21]
 8005358:	4a1a      	ldr	r2, [pc, #104]	; (80053c4 <SVCCTL_UserEvtRx+0xa4>)
 800535a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	4798      	blx	r3
 8005362:	4603      	mov	r3, r0
 8005364:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8005366:	7dfb      	ldrb	r3, [r7, #23]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d108      	bne.n	800537e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800536c:	7d7b      	ldrb	r3, [r7, #21]
 800536e:	3301      	adds	r3, #1
 8005370:	757b      	strb	r3, [r7, #21]
 8005372:	4b14      	ldr	r3, [pc, #80]	; (80053c4 <SVCCTL_UserEvtRx+0xa4>)
 8005374:	7f1b      	ldrb	r3, [r3, #28]
 8005376:	7d7a      	ldrb	r2, [r7, #21]
 8005378:	429a      	cmp	r2, r3
 800537a:	d3ec      	bcc.n	8005356 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800537c:	e002      	b.n	8005384 <SVCCTL_UserEvtRx+0x64>
              break;
 800537e:	bf00      	nop
          break;
 8005380:	e000      	b.n	8005384 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8005382:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8005384:	e000      	b.n	8005388 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8005386:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8005388:	7dfb      	ldrb	r3, [r7, #23]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d00f      	beq.n	80053ae <SVCCTL_UserEvtRx+0x8e>
 800538e:	2b02      	cmp	r3, #2
 8005390:	dc10      	bgt.n	80053b4 <SVCCTL_UserEvtRx+0x94>
 8005392:	2b00      	cmp	r3, #0
 8005394:	d002      	beq.n	800539c <SVCCTL_UserEvtRx+0x7c>
 8005396:	2b01      	cmp	r3, #1
 8005398:	d006      	beq.n	80053a8 <SVCCTL_UserEvtRx+0x88>
 800539a:	e00b      	b.n	80053b4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 ff87 	bl	80062b0 <SVCCTL_App_Notification>
 80053a2:	4603      	mov	r3, r0
 80053a4:	75bb      	strb	r3, [r7, #22]
      break;
 80053a6:	e008      	b.n	80053ba <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80053a8:	2301      	movs	r3, #1
 80053aa:	75bb      	strb	r3, [r7, #22]
      break;
 80053ac:	e005      	b.n	80053ba <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80053ae:	2300      	movs	r3, #0
 80053b0:	75bb      	strb	r3, [r7, #22]
      break;
 80053b2:	e002      	b.n	80053ba <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80053b4:	2301      	movs	r3, #1
 80053b6:	75bb      	strb	r3, [r7, #22]
      break;
 80053b8:	bf00      	nop
  }

  return (return_status);
 80053ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	200000c0 	.word	0x200000c0

080053c8 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b088      	sub	sp, #32
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80053d0:	f107 030c 	add.w	r3, r7, #12
 80053d4:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	212c      	movs	r1, #44	; 0x2c
 80053e0:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80053e4:	f000 fae2 	bl	80059ac <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	330b      	adds	r3, #11
 80053ec:	78db      	ldrb	r3, [r3, #3]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3720      	adds	r7, #32
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b088      	sub	sp, #32
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80053fe:	f107 030c 	add.w	r3, r7, #12
 8005402:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	210f      	movs	r1, #15
 800540e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8005412:	f000 facb 	bl	80059ac <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	330b      	adds	r3, #11
 800541a:	78db      	ldrb	r3, [r3, #3]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3720      	adds	r7, #32
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b088      	sub	sp, #32
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800542c:	f107 030c 	add.w	r3, r7, #12
 8005430:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	210e      	movs	r1, #14
 8005438:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800543c:	f000 fab6 	bl	80059ac <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	330b      	adds	r3, #11
 8005444:	78db      	ldrb	r3, [r3, #3]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3720      	adds	r7, #32
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8005450:	b480      	push	{r7}
 8005452:	b08b      	sub	sp, #44	; 0x2c
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800545c:	2300      	movs	r3, #0
 800545e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8005464:	2300      	movs	r3, #0
 8005466:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800546c:	2300      	movs	r3, #0
 800546e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8005478:	4b4a      	ldr	r3, [pc, #296]	; (80055a4 <SHCI_GetWirelessFwInfo+0x154>)
 800547a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005480:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800548a:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a44      	ldr	r2, [pc, #272]	; (80055a8 <SHCI_GetWirelessFwInfo+0x158>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d10f      	bne.n	80054bc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	e01a      	b.n	80054f2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80054c4:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80054c8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	0e1b      	lsrs	r3, r3, #24
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80054fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fe:	0c1b      	lsrs	r3, r3, #16
 8005500:	b2da      	uxtb	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	0a1b      	lsrs	r3, r3, #8
 800550a:	b2da      	uxtb	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	091b      	lsrs	r3, r3, #4
 8005514:	b2db      	uxtb	r3, r3
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	b2da      	uxtb	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8005520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005522:	b2db      	uxtb	r3, r3
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	b2da      	uxtb	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	0e1b      	lsrs	r3, r3, #24
 8005532:	b2da      	uxtb	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	0c1b      	lsrs	r3, r3, #16
 800553c:	b2da      	uxtb	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	0a1b      	lsrs	r3, r3, #8
 8005546:	b2da      	uxtb	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	b2da      	uxtb	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	b2da      	uxtb	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	0e1b      	lsrs	r3, r3, #24
 8005560:	b2da      	uxtb	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	0c1b      	lsrs	r3, r3, #16
 800556a:	b2da      	uxtb	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	0a1b      	lsrs	r3, r3, #8
 8005574:	b2da      	uxtb	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	0e1b      	lsrs	r3, r3, #24
 800557e:	b2da      	uxtb	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	0c1b      	lsrs	r3, r3, #16
 8005588:	b2da      	uxtb	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	b2da      	uxtb	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	372c      	adds	r7, #44	; 0x2c
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	58004000 	.word	0x58004000
 80055a8:	a94656b9 	.word	0xa94656b9

080055ac <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	4a08      	ldr	r2, [pc, #32]	; (80055dc <hci_init+0x30>)
 80055bc:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80055be:	4a08      	ldr	r2, [pc, #32]	; (80055e0 <hci_init+0x34>)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80055c4:	4806      	ldr	r0, [pc, #24]	; (80055e0 <hci_init+0x34>)
 80055c6:	f000 f973 	bl	80058b0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 f8d4 	bl	800577c <TlInit>

  return;
 80055d4:	bf00      	nop
}
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	20000238 	.word	0x20000238
 80055e0:	20000210 	.word	0x20000210

080055e4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80055ea:	4822      	ldr	r0, [pc, #136]	; (8005674 <hci_user_evt_proc+0x90>)
 80055ec:	f000 fd28 	bl	8006040 <LST_is_empty>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d12b      	bne.n	800564e <hci_user_evt_proc+0x6a>
 80055f6:	4b20      	ldr	r3, [pc, #128]	; (8005678 <hci_user_evt_proc+0x94>)
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d027      	beq.n	800564e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80055fe:	f107 030c 	add.w	r3, r7, #12
 8005602:	4619      	mov	r1, r3
 8005604:	481b      	ldr	r0, [pc, #108]	; (8005674 <hci_user_evt_proc+0x90>)
 8005606:	f000 fdaa 	bl	800615e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800560a:	4b1c      	ldr	r3, [pc, #112]	; (800567c <hci_user_evt_proc+0x98>)
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00c      	beq.n	800562c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8005616:	2301      	movs	r3, #1
 8005618:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800561a:	4b18      	ldr	r3, [pc, #96]	; (800567c <hci_user_evt_proc+0x98>)
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	1d3a      	adds	r2, r7, #4
 8005620:	4610      	mov	r0, r2
 8005622:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8005624:	793a      	ldrb	r2, [r7, #4]
 8005626:	4b14      	ldr	r3, [pc, #80]	; (8005678 <hci_user_evt_proc+0x94>)
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	e002      	b.n	8005632 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800562c:	4b12      	ldr	r3, [pc, #72]	; (8005678 <hci_user_evt_proc+0x94>)
 800562e:	2201      	movs	r2, #1
 8005630:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8005632:	4b11      	ldr	r3, [pc, #68]	; (8005678 <hci_user_evt_proc+0x94>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d004      	beq.n	8005644 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4618      	mov	r0, r3
 800563e:	f000 fc03 	bl	8005e48 <TL_MM_EvtDone>
 8005642:	e004      	b.n	800564e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	4619      	mov	r1, r3
 8005648:	480a      	ldr	r0, [pc, #40]	; (8005674 <hci_user_evt_proc+0x90>)
 800564a:	f000 fd1b 	bl	8006084 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800564e:	4809      	ldr	r0, [pc, #36]	; (8005674 <hci_user_evt_proc+0x90>)
 8005650:	f000 fcf6 	bl	8006040 <LST_is_empty>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d107      	bne.n	800566a <hci_user_evt_proc+0x86>
 800565a:	4b07      	ldr	r3, [pc, #28]	; (8005678 <hci_user_evt_proc+0x94>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8005662:	4804      	ldr	r0, [pc, #16]	; (8005674 <hci_user_evt_proc+0x90>)
 8005664:	f000 ff4e 	bl	8006504 <hci_notify_asynch_evt>
  }


  return;
 8005668:	bf00      	nop
 800566a:	bf00      	nop
}
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	200000e8 	.word	0x200000e8
 8005678:	200000f4 	.word	0x200000f4
 800567c:	20000210 	.word	0x20000210

08005680 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b088      	sub	sp, #32
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	460b      	mov	r3, r1
 800568a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800568c:	2000      	movs	r0, #0
 800568e:	f000 f8cb 	bl	8005828 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8005692:	2300      	movs	r3, #0
 8005694:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	885b      	ldrh	r3, [r3, #2]
 800569a:	b21b      	sxth	r3, r3
 800569c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056a0:	b21a      	sxth	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	881b      	ldrh	r3, [r3, #0]
 80056a6:	029b      	lsls	r3, r3, #10
 80056a8:	b21b      	sxth	r3, r3
 80056aa:	4313      	orrs	r3, r2
 80056ac:	b21b      	sxth	r3, r3
 80056ae:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	b2d9      	uxtb	r1, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	8bbb      	ldrh	r3, [r7, #28]
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 f88d 	bl	80057dc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80056c2:	e04e      	b.n	8005762 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80056c4:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80056c8:	f000 ff33 	bl	8006532 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80056cc:	e043      	b.n	8005756 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80056ce:	f107 030c 	add.w	r3, r7, #12
 80056d2:	4619      	mov	r1, r3
 80056d4:	4828      	ldr	r0, [pc, #160]	; (8005778 <hci_send_req+0xf8>)
 80056d6:	f000 fd42 	bl	800615e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	7a5b      	ldrb	r3, [r3, #9]
 80056de:	2b0f      	cmp	r3, #15
 80056e0:	d114      	bne.n	800570c <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	330b      	adds	r3, #11
 80056e6:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	885b      	ldrh	r3, [r3, #2]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	8bba      	ldrh	r2, [r7, #28]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d104      	bne.n	80056fe <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	7812      	ldrb	r2, [r2, #0]
 80056fc:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	785b      	ldrb	r3, [r3, #1]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d027      	beq.n	8005756 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8005706:	2301      	movs	r3, #1
 8005708:	77fb      	strb	r3, [r7, #31]
 800570a:	e024      	b.n	8005756 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	330b      	adds	r3, #11
 8005710:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005718:	b29b      	uxth	r3, r3
 800571a:	8bba      	ldrh	r2, [r7, #28]
 800571c:	429a      	cmp	r2, r3
 800571e:	d114      	bne.n	800574a <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	7a9b      	ldrb	r3, [r3, #10]
 8005724:	3b03      	subs	r3, #3
 8005726:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	695a      	ldr	r2, [r3, #20]
 800572c:	7dfb      	ldrb	r3, [r7, #23]
 800572e:	429a      	cmp	r2, r3
 8005730:	bfa8      	it	ge
 8005732:	461a      	movge	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6918      	ldr	r0, [r3, #16]
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	1cd9      	adds	r1, r3, #3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	461a      	mov	r2, r3
 8005746:	f001 fdd5 	bl	80072f4 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8005752:	2301      	movs	r3, #1
 8005754:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005756:	4808      	ldr	r0, [pc, #32]	; (8005778 <hci_send_req+0xf8>)
 8005758:	f000 fc72 	bl	8006040 <LST_is_empty>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0b5      	beq.n	80056ce <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8005762:	7ffb      	ldrb	r3, [r7, #31]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0ad      	beq.n	80056c4 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8005768:	2001      	movs	r0, #1
 800576a:	f000 f85d 	bl	8005828 <NotifyCmdStatus>

  return 0;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3720      	adds	r7, #32
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	20000230 	.word	0x20000230

0800577c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8005784:	480f      	ldr	r0, [pc, #60]	; (80057c4 <TlInit+0x48>)
 8005786:	f000 fc4b 	bl	8006020 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800578a:	4a0f      	ldr	r2, [pc, #60]	; (80057c8 <TlInit+0x4c>)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8005790:	480e      	ldr	r0, [pc, #56]	; (80057cc <TlInit+0x50>)
 8005792:	f000 fc45 	bl	8006020 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8005796:	4b0e      	ldr	r3, [pc, #56]	; (80057d0 <TlInit+0x54>)
 8005798:	2201      	movs	r2, #1
 800579a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800579c:	4b0d      	ldr	r3, [pc, #52]	; (80057d4 <TlInit+0x58>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80057a8:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <TlInit+0x5c>)
 80057aa:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80057ac:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <TlInit+0x58>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f107 0208 	add.w	r2, r7, #8
 80057b4:	4610      	mov	r0, r2
 80057b6:	4798      	blx	r3
  }

  return;
 80057b8:	bf00      	nop
 80057ba:	bf00      	nop
}
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000230 	.word	0x20000230
 80057c8:	200000f0 	.word	0x200000f0
 80057cc:	200000e8 	.word	0x200000e8
 80057d0:	200000f4 	.word	0x200000f4
 80057d4:	20000210 	.word	0x20000210
 80057d8:	08005869 	.word	0x08005869

080057dc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	4603      	mov	r3, r0
 80057e4:	603a      	str	r2, [r7, #0]
 80057e6:	80fb      	strh	r3, [r7, #6]
 80057e8:	460b      	mov	r3, r1
 80057ea:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80057ec:	4b0c      	ldr	r3, [pc, #48]	; (8005820 <SendCmd+0x44>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	88fa      	ldrh	r2, [r7, #6]
 80057f2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80057f6:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <SendCmd+0x44>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	797a      	ldrb	r2, [r7, #5]
 80057fc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80057fe:	4b08      	ldr	r3, [pc, #32]	; (8005820 <SendCmd+0x44>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	330c      	adds	r3, #12
 8005804:	797a      	ldrb	r2, [r7, #5]
 8005806:	6839      	ldr	r1, [r7, #0]
 8005808:	4618      	mov	r0, r3
 800580a:	f001 fd73 	bl	80072f4 <memcpy>

  hciContext.io.Send(0,0);
 800580e:	4b05      	ldr	r3, [pc, #20]	; (8005824 <SendCmd+0x48>)
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2100      	movs	r1, #0
 8005814:	2000      	movs	r0, #0
 8005816:	4798      	blx	r3

  return;
 8005818:	bf00      	nop
}
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	200000f0 	.word	0x200000f0
 8005824:	20000210 	.word	0x20000210

08005828 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	4603      	mov	r3, r0
 8005830:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8005832:	79fb      	ldrb	r3, [r7, #7]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d108      	bne.n	800584a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8005838:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <NotifyCmdStatus+0x3c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00d      	beq.n	800585c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8005840:	4b08      	ldr	r3, [pc, #32]	; (8005864 <NotifyCmdStatus+0x3c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2000      	movs	r0, #0
 8005846:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8005848:	e008      	b.n	800585c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800584a:	4b06      	ldr	r3, [pc, #24]	; (8005864 <NotifyCmdStatus+0x3c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d004      	beq.n	800585c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8005852:	4b04      	ldr	r3, [pc, #16]	; (8005864 <NotifyCmdStatus+0x3c>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2001      	movs	r0, #1
 8005858:	4798      	blx	r3
  return;
 800585a:	bf00      	nop
 800585c:	bf00      	nop
}
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20000238 	.word	0x20000238

08005868 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	7a5b      	ldrb	r3, [r3, #9]
 8005874:	2b0f      	cmp	r3, #15
 8005876:	d003      	beq.n	8005880 <TlEvtReceived+0x18>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	7a5b      	ldrb	r3, [r3, #9]
 800587c:	2b0e      	cmp	r3, #14
 800587e:	d107      	bne.n	8005890 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	4809      	ldr	r0, [pc, #36]	; (80058a8 <TlEvtReceived+0x40>)
 8005884:	f000 fc24 	bl	80060d0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8005888:	2000      	movs	r0, #0
 800588a:	f000 fe47 	bl	800651c <hci_cmd_resp_release>
 800588e:	e006      	b.n	800589e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	4806      	ldr	r0, [pc, #24]	; (80058ac <TlEvtReceived+0x44>)
 8005894:	f000 fc1c 	bl	80060d0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005898:	4804      	ldr	r0, [pc, #16]	; (80058ac <TlEvtReceived+0x44>)
 800589a:	f000 fe33 	bl	8006504 <hci_notify_asynch_evt>
  }

  return;
 800589e:	bf00      	nop
}
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20000230 	.word	0x20000230
 80058ac:	200000e8 	.word	0x200000e8

080058b0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a05      	ldr	r2, [pc, #20]	; (80058d0 <hci_register_io_bus+0x20>)
 80058bc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a04      	ldr	r2, [pc, #16]	; (80058d4 <hci_register_io_bus+0x24>)
 80058c2:	611a      	str	r2, [r3, #16]

  return;
 80058c4:	bf00      	nop
}
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	08005bc1 	.word	0x08005bc1
 80058d4:	08005c29 	.word	0x08005c29

080058d8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	4a08      	ldr	r2, [pc, #32]	; (8005908 <shci_init+0x30>)
 80058e8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80058ea:	4a08      	ldr	r2, [pc, #32]	; (800590c <shci_init+0x34>)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80058f0:	4806      	ldr	r0, [pc, #24]	; (800590c <shci_init+0x34>)
 80058f2:	f000 f911 	bl	8005b18 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 f894 	bl	8005a28 <TlInit>

  return;
 8005900:	bf00      	nop
}
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	2000025c 	.word	0x2000025c
 800590c:	2000023c 	.word	0x2000023c

08005910 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005916:	4822      	ldr	r0, [pc, #136]	; (80059a0 <shci_user_evt_proc+0x90>)
 8005918:	f000 fb92 	bl	8006040 <LST_is_empty>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d12b      	bne.n	800597a <shci_user_evt_proc+0x6a>
 8005922:	4b20      	ldr	r3, [pc, #128]	; (80059a4 <shci_user_evt_proc+0x94>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d027      	beq.n	800597a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800592a:	f107 030c 	add.w	r3, r7, #12
 800592e:	4619      	mov	r1, r3
 8005930:	481b      	ldr	r0, [pc, #108]	; (80059a0 <shci_user_evt_proc+0x90>)
 8005932:	f000 fc14 	bl	800615e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8005936:	4b1c      	ldr	r3, [pc, #112]	; (80059a8 <shci_user_evt_proc+0x98>)
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00c      	beq.n	8005958 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8005942:	2301      	movs	r3, #1
 8005944:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005946:	4b18      	ldr	r3, [pc, #96]	; (80059a8 <shci_user_evt_proc+0x98>)
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	1d3a      	adds	r2, r7, #4
 800594c:	4610      	mov	r0, r2
 800594e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8005950:	793a      	ldrb	r2, [r7, #4]
 8005952:	4b14      	ldr	r3, [pc, #80]	; (80059a4 <shci_user_evt_proc+0x94>)
 8005954:	701a      	strb	r2, [r3, #0]
 8005956:	e002      	b.n	800595e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005958:	4b12      	ldr	r3, [pc, #72]	; (80059a4 <shci_user_evt_proc+0x94>)
 800595a:	2201      	movs	r2, #1
 800595c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800595e:	4b11      	ldr	r3, [pc, #68]	; (80059a4 <shci_user_evt_proc+0x94>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d004      	beq.n	8005970 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4618      	mov	r0, r3
 800596a:	f000 fa6d 	bl	8005e48 <TL_MM_EvtDone>
 800596e:	e004      	b.n	800597a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4619      	mov	r1, r3
 8005974:	480a      	ldr	r0, [pc, #40]	; (80059a0 <shci_user_evt_proc+0x90>)
 8005976:	f000 fb85 	bl	8006084 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800597a:	4809      	ldr	r0, [pc, #36]	; (80059a0 <shci_user_evt_proc+0x90>)
 800597c:	f000 fb60 	bl	8006040 <LST_is_empty>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d107      	bne.n	8005996 <shci_user_evt_proc+0x86>
 8005986:	4b07      	ldr	r3, [pc, #28]	; (80059a4 <shci_user_evt_proc+0x94>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800598e:	4804      	ldr	r0, [pc, #16]	; (80059a0 <shci_user_evt_proc+0x90>)
 8005990:	f7fa ffdc 	bl	800094c <shci_notify_asynch_evt>
  }


  return;
 8005994:	bf00      	nop
 8005996:	bf00      	nop
}
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	200000f8 	.word	0x200000f8
 80059a4:	20000108 	.word	0x20000108
 80059a8:	2000023c 	.word	0x2000023c

080059ac <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60ba      	str	r2, [r7, #8]
 80059b4:	607b      	str	r3, [r7, #4]
 80059b6:	4603      	mov	r3, r0
 80059b8:	81fb      	strh	r3, [r7, #14]
 80059ba:	460b      	mov	r3, r1
 80059bc:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80059be:	2000      	movs	r0, #0
 80059c0:	f000 f864 	bl	8005a8c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80059c4:	4b16      	ldr	r3, [pc, #88]	; (8005a20 <shci_send+0x74>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	89fa      	ldrh	r2, [r7, #14]
 80059ca:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80059ce:	4b14      	ldr	r3, [pc, #80]	; (8005a20 <shci_send+0x74>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	7b7a      	ldrb	r2, [r7, #13]
 80059d4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80059d6:	4b12      	ldr	r3, [pc, #72]	; (8005a20 <shci_send+0x74>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	330c      	adds	r3, #12
 80059dc:	7b7a      	ldrb	r2, [r7, #13]
 80059de:	68b9      	ldr	r1, [r7, #8]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 fc87 	bl	80072f4 <memcpy>

  shciContext.io.Send(0,0);
 80059e6:	4b0f      	ldr	r3, [pc, #60]	; (8005a24 <shci_send+0x78>)
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	2100      	movs	r1, #0
 80059ec:	2000      	movs	r0, #0
 80059ee:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80059f0:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80059f4:	f7fa ffc1 	bl	800097a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f103 0008 	add.w	r0, r3, #8
 80059fe:	4b08      	ldr	r3, [pc, #32]	; (8005a20 <shci_send+0x74>)
 8005a00:	6819      	ldr	r1, [r3, #0]
 8005a02:	4b07      	ldr	r3, [pc, #28]	; (8005a20 <shci_send+0x74>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	789b      	ldrb	r3, [r3, #2]
 8005a08:	3303      	adds	r3, #3
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f001 fc72 	bl	80072f4 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005a10:	2001      	movs	r0, #1
 8005a12:	f000 f83b 	bl	8005a8c <Cmd_SetStatus>

  return;
 8005a16:	bf00      	nop
}
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000104 	.word	0x20000104
 8005a24:	2000023c 	.word	0x2000023c

08005a28 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8005a30:	4a10      	ldr	r2, [pc, #64]	; (8005a74 <TlInit+0x4c>)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8005a36:	4810      	ldr	r0, [pc, #64]	; (8005a78 <TlInit+0x50>)
 8005a38:	f000 faf2 	bl	8006020 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005a3c:	2001      	movs	r0, #1
 8005a3e:	f000 f825 	bl	8005a8c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005a42:	4b0e      	ldr	r3, [pc, #56]	; (8005a7c <TlInit+0x54>)
 8005a44:	2201      	movs	r2, #1
 8005a46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8005a48:	4b0d      	ldr	r3, [pc, #52]	; (8005a80 <TlInit+0x58>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00c      	beq.n	8005a6a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8005a54:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <TlInit+0x5c>)
 8005a56:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <TlInit+0x60>)
 8005a5a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8005a5c:	4b08      	ldr	r3, [pc, #32]	; (8005a80 <TlInit+0x58>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f107 020c 	add.w	r2, r7, #12
 8005a64:	4610      	mov	r0, r2
 8005a66:	4798      	blx	r3
  }

  return;
 8005a68:	bf00      	nop
 8005a6a:	bf00      	nop
}
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20000104 	.word	0x20000104
 8005a78:	200000f8 	.word	0x200000f8
 8005a7c:	20000108 	.word	0x20000108
 8005a80:	2000023c 	.word	0x2000023c
 8005a84:	08005add 	.word	0x08005add
 8005a88:	08005af5 	.word	0x08005af5

08005a8c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	4603      	mov	r3, r0
 8005a94:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10b      	bne.n	8005ab4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8005a9c:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <Cmd_SetStatus+0x48>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d003      	beq.n	8005aac <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8005aa4:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <Cmd_SetStatus+0x48>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8005aac:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <Cmd_SetStatus+0x4c>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8005ab2:	e00b      	b.n	8005acc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8005ab4:	4b08      	ldr	r3, [pc, #32]	; (8005ad8 <Cmd_SetStatus+0x4c>)
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8005aba:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <Cmd_SetStatus+0x48>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d004      	beq.n	8005acc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8005ac2:	4b04      	ldr	r3, [pc, #16]	; (8005ad4 <Cmd_SetStatus+0x48>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2001      	movs	r0, #1
 8005ac8:	4798      	blx	r3
  return;
 8005aca:	bf00      	nop
 8005acc:	bf00      	nop
}
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	2000025c 	.word	0x2000025c
 8005ad8:	20000100 	.word	0x20000100

08005adc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	f7fa ff3d 	bl	8000964 <shci_cmd_resp_release>

  return;
 8005aea:	bf00      	nop
}
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	4805      	ldr	r0, [pc, #20]	; (8005b14 <TlUserEvtReceived+0x20>)
 8005b00:	f000 fae6 	bl	80060d0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005b04:	4803      	ldr	r0, [pc, #12]	; (8005b14 <TlUserEvtReceived+0x20>)
 8005b06:	f7fa ff21 	bl	800094c <shci_notify_asynch_evt>

  return;
 8005b0a:	bf00      	nop
}
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	200000f8 	.word	0x200000f8

08005b18 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a05      	ldr	r2, [pc, #20]	; (8005b38 <shci_register_io_bus+0x20>)
 8005b24:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a04      	ldr	r2, [pc, #16]	; (8005b3c <shci_register_io_bus+0x24>)
 8005b2a:	611a      	str	r2, [r3, #16]

  return;
 8005b2c:	bf00      	nop
}
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	08005cd5 	.word	0x08005cd5
 8005b3c:	08005d29 	.word	0x08005d29

08005b40 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8005b44:	f001 f82a 	bl	8006b9c <HW_IPCC_Enable>

  return;
 8005b48:	bf00      	nop
}
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <TL_Init>:


void TL_Init( void )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005b50:	4b10      	ldr	r3, [pc, #64]	; (8005b94 <TL_Init+0x48>)
 8005b52:	4a11      	ldr	r2, [pc, #68]	; (8005b98 <TL_Init+0x4c>)
 8005b54:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005b56:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <TL_Init+0x48>)
 8005b58:	4a10      	ldr	r2, [pc, #64]	; (8005b9c <TL_Init+0x50>)
 8005b5a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005b5c:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <TL_Init+0x48>)
 8005b5e:	4a10      	ldr	r2, [pc, #64]	; (8005ba0 <TL_Init+0x54>)
 8005b60:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8005b62:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <TL_Init+0x48>)
 8005b64:	4a0f      	ldr	r2, [pc, #60]	; (8005ba4 <TL_Init+0x58>)
 8005b66:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8005b68:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <TL_Init+0x48>)
 8005b6a:	4a0f      	ldr	r2, [pc, #60]	; (8005ba8 <TL_Init+0x5c>)
 8005b6c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8005b6e:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <TL_Init+0x48>)
 8005b70:	4a0e      	ldr	r2, [pc, #56]	; (8005bac <TL_Init+0x60>)
 8005b72:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005b74:	4b07      	ldr	r3, [pc, #28]	; (8005b94 <TL_Init+0x48>)
 8005b76:	4a0e      	ldr	r2, [pc, #56]	; (8005bb0 <TL_Init+0x64>)
 8005b78:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8005b7a:	4b06      	ldr	r3, [pc, #24]	; (8005b94 <TL_Init+0x48>)
 8005b7c:	4a0d      	ldr	r2, [pc, #52]	; (8005bb4 <TL_Init+0x68>)
 8005b7e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005b80:	4b04      	ldr	r3, [pc, #16]	; (8005b94 <TL_Init+0x48>)
 8005b82:	4a0d      	ldr	r2, [pc, #52]	; (8005bb8 <TL_Init+0x6c>)
 8005b84:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005b86:	4b03      	ldr	r3, [pc, #12]	; (8005b94 <TL_Init+0x48>)
 8005b88:	4a0c      	ldr	r2, [pc, #48]	; (8005bbc <TL_Init+0x70>)
 8005b8a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8005b8c:	f001 f81a 	bl	8006bc4 <HW_IPCC_Init>

  return;
 8005b90:	bf00      	nop
}
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	20030000 	.word	0x20030000
 8005b98:	20030028 	.word	0x20030028
 8005b9c:	20030048 	.word	0x20030048
 8005ba0:	20030058 	.word	0x20030058
 8005ba4:	20030068 	.word	0x20030068
 8005ba8:	20030070 	.word	0x20030070
 8005bac:	20030078 	.word	0x20030078
 8005bb0:	20030080 	.word	0x20030080
 8005bb4:	2003009c 	.word	0x2003009c
 8005bb8:	200300a0 	.word	0x200300a0
 8005bbc:	200300ac 	.word	0x200300ac

08005bc0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8005bcc:	4811      	ldr	r0, [pc, #68]	; (8005c14 <TL_BLE_Init+0x54>)
 8005bce:	f000 fa27 	bl	8006020 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8005bd2:	4b11      	ldr	r3, [pc, #68]	; (8005c18 <TL_BLE_Init+0x58>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	68da      	ldr	r2, [r3, #12]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4a0c      	ldr	r2, [pc, #48]	; (8005c1c <TL_BLE_Init+0x5c>)
 8005bec:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	4a08      	ldr	r2, [pc, #32]	; (8005c14 <TL_BLE_Init+0x54>)
 8005bf2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8005bf4:	f000 fffc 	bl	8006bf0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a08      	ldr	r2, [pc, #32]	; (8005c20 <TL_BLE_Init+0x60>)
 8005bfe:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	4a07      	ldr	r2, [pc, #28]	; (8005c24 <TL_BLE_Init+0x64>)
 8005c06:	6013      	str	r3, [r2, #0]

  return 0;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	200300c8 	.word	0x200300c8
 8005c18:	20030000 	.word	0x20030000
 8005c1c:	20030a58 	.word	0x20030a58
 8005c20:	20000268 	.word	0x20000268
 8005c24:	2000026c 	.word	0x2000026c

08005c28 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	460b      	mov	r3, r1
 8005c32:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8005c34:	4b09      	ldr	r3, [pc, #36]	; (8005c5c <TL_BLE_SendCmd+0x34>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8005c3e:	4b07      	ldr	r3, [pc, #28]	; (8005c5c <TL_BLE_SendCmd+0x34>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4619      	mov	r1, r3
 8005c46:	2001      	movs	r0, #1
 8005c48:	f000 f96c 	bl	8005f24 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8005c4c:	f000 ffda 	bl	8006c04 <HW_IPCC_BLE_SendCmd>

  return 0;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	20030000 	.word	0x20030000

08005c60 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8005c66:	e01c      	b.n	8005ca2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8005c68:	1d3b      	adds	r3, r7, #4
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	4812      	ldr	r0, [pc, #72]	; (8005cb8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005c6e:	f000 fa76 	bl	800615e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	7a5b      	ldrb	r3, [r3, #9]
 8005c76:	2b0f      	cmp	r3, #15
 8005c78:	d003      	beq.n	8005c82 <HW_IPCC_BLE_RxEvtNot+0x22>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	7a5b      	ldrb	r3, [r3, #9]
 8005c7e:	2b0e      	cmp	r3, #14
 8005c80:	d105      	bne.n	8005c8e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4619      	mov	r1, r3
 8005c86:	2002      	movs	r0, #2
 8005c88:	f000 f94c 	bl	8005f24 <OutputDbgTrace>
 8005c8c:	e004      	b.n	8005c98 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4619      	mov	r1, r3
 8005c92:	2003      	movs	r0, #3
 8005c94:	f000 f946 	bl	8005f24 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8005c98:	4b08      	ldr	r3, [pc, #32]	; (8005cbc <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8005ca2:	4805      	ldr	r0, [pc, #20]	; (8005cb8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005ca4:	f000 f9cc 	bl	8006040 <LST_is_empty>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0dc      	beq.n	8005c68 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8005cae:	bf00      	nop
}
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	200300c8 	.word	0x200300c8
 8005cbc:	20000268 	.word	0x20000268

08005cc0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8005cc4:	4b02      	ldr	r3, [pc, #8]	; (8005cd0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4798      	blx	r3

  return;
 8005cca:	bf00      	nop
}
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	2000026c 	.word	0x2000026c

08005cd4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8005ce0:	480d      	ldr	r0, [pc, #52]	; (8005d18 <TL_SYS_Init+0x44>)
 8005ce2:	f000 f99d 	bl	8006020 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8005ce6:	4b0d      	ldr	r3, [pc, #52]	; (8005d1c <TL_SYS_Init+0x48>)
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	4a08      	ldr	r2, [pc, #32]	; (8005d18 <TL_SYS_Init+0x44>)
 8005cf8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8005cfa:	f000 ffa5 	bl	8006c48 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a07      	ldr	r2, [pc, #28]	; (8005d20 <TL_SYS_Init+0x4c>)
 8005d04:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	4a06      	ldr	r2, [pc, #24]	; (8005d24 <TL_SYS_Init+0x50>)
 8005d0c:	6013      	str	r3, [r2, #0]

  return 0;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	200300d0 	.word	0x200300d0
 8005d1c:	20030000 	.word	0x20030000
 8005d20:	20000270 	.word	0x20000270
 8005d24:	20000274 	.word	0x20000274

08005d28 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8005d34:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <TL_SYS_SendCmd+0x34>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2210      	movs	r2, #16
 8005d3c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8005d3e:	4b07      	ldr	r3, [pc, #28]	; (8005d5c <TL_SYS_SendCmd+0x34>)
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4619      	mov	r1, r3
 8005d46:	2004      	movs	r0, #4
 8005d48:	f000 f8ec 	bl	8005f24 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8005d4c:	f000 ff86 	bl	8006c5c <HW_IPCC_SYS_SendCmd>

  return 0;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20030000 	.word	0x20030000

08005d60 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005d64:	4b07      	ldr	r3, [pc, #28]	; (8005d84 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	2005      	movs	r0, #5
 8005d6e:	f000 f8d9 	bl	8005f24 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005d72:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a03      	ldr	r2, [pc, #12]	; (8005d84 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005d78:	68d2      	ldr	r2, [r2, #12]
 8005d7a:	6812      	ldr	r2, [r2, #0]
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	4798      	blx	r3

  return;
 8005d80:	bf00      	nop
}
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	20030000 	.word	0x20030000
 8005d88:	20000270 	.word	0x20000270

08005d8c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005d92:	e00e      	b.n	8005db2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8005d94:	1d3b      	adds	r3, r7, #4
 8005d96:	4619      	mov	r1, r3
 8005d98:	480b      	ldr	r0, [pc, #44]	; (8005dc8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005d9a:	f000 f9e0 	bl	800615e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4619      	mov	r1, r3
 8005da2:	2006      	movs	r0, #6
 8005da4:	f000 f8be 	bl	8005f24 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005da8:	4b08      	ldr	r3, [pc, #32]	; (8005dcc <HW_IPCC_SYS_EvtNot+0x40>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	4610      	mov	r0, r2
 8005db0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005db2:	4805      	ldr	r0, [pc, #20]	; (8005dc8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005db4:	f000 f944 	bl	8006040 <LST_is_empty>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0ea      	beq.n	8005d94 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8005dbe:	bf00      	nop
}
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	200300d0 	.word	0x200300d0
 8005dcc:	20000274 	.word	0x20000274

08005dd0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8005dd8:	4817      	ldr	r0, [pc, #92]	; (8005e38 <TL_MM_Init+0x68>)
 8005dda:	f000 f921 	bl	8006020 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8005dde:	4817      	ldr	r0, [pc, #92]	; (8005e3c <TL_MM_Init+0x6c>)
 8005de0:	f000 f91e 	bl	8006020 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005de4:	4b16      	ldr	r3, [pc, #88]	; (8005e40 <TL_MM_Init+0x70>)
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	4a16      	ldr	r2, [pc, #88]	; (8005e44 <TL_MM_Init+0x74>)
 8005dea:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005dec:	4b15      	ldr	r3, [pc, #84]	; (8005e44 <TL_MM_Init+0x74>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6892      	ldr	r2, [r2, #8]
 8005df4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8005df6:	4b13      	ldr	r3, [pc, #76]	; (8005e44 <TL_MM_Init+0x74>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	68d2      	ldr	r2, [r2, #12]
 8005dfe:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005e00:	4b10      	ldr	r3, [pc, #64]	; (8005e44 <TL_MM_Init+0x74>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a0c      	ldr	r2, [pc, #48]	; (8005e38 <TL_MM_Init+0x68>)
 8005e06:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8005e08:	4b0e      	ldr	r3, [pc, #56]	; (8005e44 <TL_MM_Init+0x74>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	6812      	ldr	r2, [r2, #0]
 8005e10:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005e12:	4b0c      	ldr	r3, [pc, #48]	; (8005e44 <TL_MM_Init+0x74>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6852      	ldr	r2, [r2, #4]
 8005e1a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8005e1c:	4b09      	ldr	r3, [pc, #36]	; (8005e44 <TL_MM_Init+0x74>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6912      	ldr	r2, [r2, #16]
 8005e24:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8005e26:	4b07      	ldr	r3, [pc, #28]	; (8005e44 <TL_MM_Init+0x74>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6952      	ldr	r2, [r2, #20]
 8005e2e:	619a      	str	r2, [r3, #24]

  return;
 8005e30:	bf00      	nop
}
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	200300b8 	.word	0x200300b8
 8005e3c:	20000260 	.word	0x20000260
 8005e40:	20030000 	.word	0x20030000
 8005e44:	20000278 	.word	0x20000278

08005e48 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	4807      	ldr	r0, [pc, #28]	; (8005e70 <TL_MM_EvtDone+0x28>)
 8005e54:	f000 f93c 	bl	80060d0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	f000 f862 	bl	8005f24 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8005e60:	4804      	ldr	r0, [pc, #16]	; (8005e74 <TL_MM_EvtDone+0x2c>)
 8005e62:	f000 ff21 	bl	8006ca8 <HW_IPCC_MM_SendFreeBuf>

  return;
 8005e66:	bf00      	nop
}
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000260 	.word	0x20000260
 8005e74:	08005e79 	.word	0x08005e79

08005e78 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005e7e:	e00c      	b.n	8005e9a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8005e80:	1d3b      	adds	r3, r7, #4
 8005e82:	4619      	mov	r1, r3
 8005e84:	480a      	ldr	r0, [pc, #40]	; (8005eb0 <SendFreeBuf+0x38>)
 8005e86:	f000 f96a 	bl	800615e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8005e8a:	4b0a      	ldr	r3, [pc, #40]	; (8005eb4 <SendFreeBuf+0x3c>)
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	4611      	mov	r1, r2
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 f91b 	bl	80060d0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005e9a:	4805      	ldr	r0, [pc, #20]	; (8005eb0 <SendFreeBuf+0x38>)
 8005e9c:	f000 f8d0 	bl	8006040 <LST_is_empty>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0ec      	beq.n	8005e80 <SendFreeBuf+0x8>
  }

  return;
 8005ea6:	bf00      	nop
}
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000260 	.word	0x20000260
 8005eb4:	20030000 	.word	0x20030000

08005eb8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8005ebc:	4805      	ldr	r0, [pc, #20]	; (8005ed4 <TL_TRACES_Init+0x1c>)
 8005ebe:	f000 f8af 	bl	8006020 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8005ec2:	4b05      	ldr	r3, [pc, #20]	; (8005ed8 <TL_TRACES_Init+0x20>)
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	4a03      	ldr	r2, [pc, #12]	; (8005ed4 <TL_TRACES_Init+0x1c>)
 8005ec8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8005eca:	f000 ff23 	bl	8006d14 <HW_IPCC_TRACES_Init>

  return;
 8005ece:	bf00      	nop
}
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	200300c0 	.word	0x200300c0
 8005ed8:	20030000 	.word	0x20030000

08005edc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8005ee2:	e008      	b.n	8005ef6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8005ee4:	1d3b      	adds	r3, r7, #4
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4808      	ldr	r0, [pc, #32]	; (8005f0c <HW_IPCC_TRACES_EvtNot+0x30>)
 8005eea:	f000 f938 	bl	800615e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 f80d 	bl	8005f10 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8005ef6:	4805      	ldr	r0, [pc, #20]	; (8005f0c <HW_IPCC_TRACES_EvtNot+0x30>)
 8005ef8:	f000 f8a2 	bl	8006040 <LST_is_empty>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0f0      	beq.n	8005ee4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8005f02:	bf00      	nop
}
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	200300c0 	.word	0x200300c0

08005f10 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	6039      	str	r1, [r7, #0]
 8005f2e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8005f30:	79fb      	ldrb	r3, [r7, #7]
 8005f32:	2b06      	cmp	r3, #6
 8005f34:	d845      	bhi.n	8005fc2 <OutputDbgTrace+0x9e>
 8005f36:	a201      	add	r2, pc, #4	; (adr r2, 8005f3c <OutputDbgTrace+0x18>)
 8005f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3c:	08005f59 	.word	0x08005f59
 8005f40:	08005f7d 	.word	0x08005f7d
 8005f44:	08005f83 	.word	0x08005f83
 8005f48:	08005f97 	.word	0x08005f97
 8005f4c:	08005fa3 	.word	0x08005fa3
 8005f50:	08005fa9 	.word	0x08005fa9
 8005f54:	08005fb7 	.word	0x08005fb7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	7a5b      	ldrb	r3, [r3, #9]
 8005f60:	2bff      	cmp	r3, #255	; 0xff
 8005f62:	d005      	beq.n	8005f70 <OutputDbgTrace+0x4c>
 8005f64:	2bff      	cmp	r3, #255	; 0xff
 8005f66:	dc05      	bgt.n	8005f74 <OutputDbgTrace+0x50>
 8005f68:	2b0e      	cmp	r3, #14
 8005f6a:	d005      	beq.n	8005f78 <OutputDbgTrace+0x54>
 8005f6c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8005f6e:	e001      	b.n	8005f74 <OutputDbgTrace+0x50>
          break;
 8005f70:	bf00      	nop
 8005f72:	e027      	b.n	8005fc4 <OutputDbgTrace+0xa0>
          break;
 8005f74:	bf00      	nop
 8005f76:	e025      	b.n	8005fc4 <OutputDbgTrace+0xa0>
          break;
 8005f78:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8005f7a:	e023      	b.n	8005fc4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8005f80:	e020      	b.n	8005fc4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	7a5b      	ldrb	r3, [r3, #9]
 8005f8a:	2b0e      	cmp	r3, #14
 8005f8c:	d001      	beq.n	8005f92 <OutputDbgTrace+0x6e>
 8005f8e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8005f90:	e000      	b.n	8005f94 <OutputDbgTrace+0x70>
          break;
 8005f92:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005f94:	e016      	b.n	8005fc4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	7a5b      	ldrb	r3, [r3, #9]
 8005f9e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005fa0:	e010      	b.n	8005fc4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8005fa6:	e00d      	b.n	8005fc4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	7a5b      	ldrb	r3, [r3, #9]
 8005fb0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8005fb2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005fb4:	e006      	b.n	8005fc4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	7a5b      	ldrb	r3, [r3, #9]
 8005fbe:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8005fc0:	e000      	b.n	8005fc4 <OutputDbgTrace+0xa0>

    default:
      break;
 8005fc2:	bf00      	nop
  }

  return;
 8005fc4:	bf00      	nop
}
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8005fda:	4b0f      	ldr	r3, [pc, #60]	; (8006018 <OTP_Read+0x48>)
 8005fdc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8005fde:	e002      	b.n	8005fe6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3b08      	subs	r3, #8
 8005fe4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	3307      	adds	r3, #7
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	79fa      	ldrb	r2, [r7, #7]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d003      	beq.n	8005ffa <OTP_Read+0x2a>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4a09      	ldr	r2, [pc, #36]	; (800601c <OTP_Read+0x4c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d1f2      	bne.n	8005fe0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	3307      	adds	r3, #7
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	79fa      	ldrb	r2, [r7, #7]
 8006002:	429a      	cmp	r2, r3
 8006004:	d001      	beq.n	800600a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800600a:	68fb      	ldr	r3, [r7, #12]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	1fff73f8 	.word	0x1fff73f8
 800601c:	1fff7000 	.word	0x1fff7000

08006020 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	605a      	str	r2, [r3, #4]
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006048:	f3ef 8310 	mrs	r3, PRIMASK
 800604c:	60fb      	str	r3, [r7, #12]
  return(result);
 800604e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006050:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006052:	b672      	cpsid	i
}
 8006054:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	429a      	cmp	r2, r3
 800605e:	d102      	bne.n	8006066 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8006060:	2301      	movs	r3, #1
 8006062:	75fb      	strb	r3, [r7, #23]
 8006064:	e001      	b.n	800606a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8006066:	2300      	movs	r3, #0
 8006068:	75fb      	strb	r3, [r7, #23]
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f383 8810 	msr	PRIMASK, r3
}
 8006074:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8006076:	7dfb      	ldrb	r3, [r7, #23]
}
 8006078:	4618      	mov	r0, r3
 800607a:	371c      	adds	r7, #28
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800608e:	f3ef 8310 	mrs	r3, PRIMASK
 8006092:	60fb      	str	r3, [r7, #12]
  return(result);
 8006094:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006096:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006098:	b672      	cpsid	i
}
 800609a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	605a      	str	r2, [r3, #4]
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f383 8810 	msr	PRIMASK, r3
}
 80060c2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80060c4:	bf00      	nop
 80060c6:	371c      	adds	r7, #28
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060da:	f3ef 8310 	mrs	r3, PRIMASK
 80060de:	60fb      	str	r3, [r7, #12]
  return(result);
 80060e0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80060e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80060e4:	b672      	cpsid	i
}
 80060e6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	683a      	ldr	r2, [r7, #0]
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	f383 8810 	msr	PRIMASK, r3
}
 800610e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006110:	bf00      	nop
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006124:	f3ef 8310 	mrs	r3, PRIMASK
 8006128:	60fb      	str	r3, [r7, #12]
  return(result);
 800612a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800612c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800612e:	b672      	cpsid	i
}
 8006130:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	6812      	ldr	r2, [r2, #0]
 800613a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6852      	ldr	r2, [r2, #4]
 8006144:	605a      	str	r2, [r3, #4]
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f383 8810 	msr	PRIMASK, r3
}
 8006150:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006152:	bf00      	nop
 8006154:	371c      	adds	r7, #28
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b086      	sub	sp, #24
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006168:	f3ef 8310 	mrs	r3, PRIMASK
 800616c:	60fb      	str	r3, [r7, #12]
  return(result);
 800616e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006170:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006172:	b672      	cpsid	i
}
 8006174:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff ffca 	bl	800611c <LST_remove_node>
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f383 8810 	msr	PRIMASK, r3
}
 8006192:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006194:	bf00      	nop
 8006196:	3718      	adds	r7, #24
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <__NVIC_SystemReset>:
{
 800619c:	b480      	push	{r7}
 800619e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80061a0:	f3bf 8f4f 	dsb	sy
}
 80061a4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80061a6:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <__NVIC_SystemReset+0x24>)
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80061ae:	4904      	ldr	r1, [pc, #16]	; (80061c0 <__NVIC_SystemReset+0x24>)
 80061b0:	4b04      	ldr	r3, [pc, #16]	; (80061c4 <__NVIC_SystemReset+0x28>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80061b6:	f3bf 8f4f 	dsb	sy
}
 80061ba:	bf00      	nop
    __NOP();
 80061bc:	bf00      	nop
 80061be:	e7fd      	b.n	80061bc <__NVIC_SystemReset+0x20>
 80061c0:	e000ed00 	.word	0xe000ed00
 80061c4:	05fa0004 	.word	0x05fa0004

080061c8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80061c8:	b480      	push	{r7}
 80061ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80061cc:	4b03      	ldr	r3, [pc, #12]	; (80061dc <LL_FLASH_GetUDN+0x14>)
 80061ce:	681b      	ldr	r3, [r3, #0]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	1fff7580 	.word	0x1fff7580

080061e0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80061e0:	b480      	push	{r7}
 80061e2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80061e4:	4b03      	ldr	r3, [pc, #12]	; (80061f4 <LL_FLASH_GetDeviceID+0x14>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	b2db      	uxtb	r3, r3
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	1fff7584 	.word	0x1fff7584

080061f8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80061fc:	4b03      	ldr	r3, [pc, #12]	; (800620c <LL_FLASH_GetSTCompanyID+0x14>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	0a1b      	lsrs	r3, r3, #8
}
 8006202:	4618      	mov	r0, r3
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	1fff7584 	.word	0x1fff7584

08006210 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8006210:	b5b0      	push	{r4, r5, r7, lr}
 8006212:	b090      	sub	sp, #64	; 0x40
 8006214:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1<<CFG_TASK_INIT_TEMP, UTIL_SEQ_RFU, initTemp);
 8006216:	4a21      	ldr	r2, [pc, #132]	; (800629c <APP_BLE_Init+0x8c>)
 8006218:	2100      	movs	r1, #0
 800621a:	2004      	movs	r0, #4
 800621c:	f000 ff04 	bl	8007028 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_UPDATE_TEMP, UTIL_SEQ_RFU, updateTemp);
 8006220:	4a1f      	ldr	r2, [pc, #124]	; (80062a0 <APP_BLE_Init+0x90>)
 8006222:	2100      	movs	r1, #0
 8006224:	2008      	movs	r0, #8
 8006226:	f000 feff 	bl	8007028 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1<<CFG_TASK_INIT_TEMP, CFG_SCH_PRIO_0);
 800622a:	2100      	movs	r1, #0
 800622c:	2004      	movs	r0, #4
 800622e:	f000 ff1d 	bl	800706c <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8006232:	4b1c      	ldr	r3, [pc, #112]	; (80062a4 <APP_BLE_Init+0x94>)
 8006234:	1d3c      	adds	r4, r7, #4
 8006236:	461d      	mov	r5, r3
 8006238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800623a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800623c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800623e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006244:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006248:	e884 0003 	stmia.w	r4, {r0, r1}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800624c:	f000 f864 	bl	8006318 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8006250:	2101      	movs	r1, #1
 8006252:	2002      	movs	r0, #2
 8006254:	f000 fd86 	bl	8006d64 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8006258:	4a13      	ldr	r2, [pc, #76]	; (80062a8 <APP_BLE_Init+0x98>)
 800625a:	2100      	movs	r1, #0
 800625c:	2002      	movs	r0, #2
 800625e:	f000 fee3 	bl	8007028 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8006262:	1d3b      	adds	r3, r7, #4
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff f8af 	bl	80053c8 <SHCI_C2_BLE_Init>
 800626a:	4603      	mov	r3, r0
 800626c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 8006270:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <APP_BLE_Init+0x6c>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8006278:	f7fa fe54 	bl	8000f24 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800627c:	f000 f862 	bl	8006344 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8006280:	f7ff f816 	bl	80052b0 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_BEACON_UPDATE_REQ_ID, UTIL_SEQ_RFU, Beacon_Update);
 8006284:	4a09      	ldr	r2, [pc, #36]	; (80062ac <APP_BLE_Init+0x9c>)
 8006286:	2100      	movs	r1, #0
 8006288:	2001      	movs	r0, #1
 800628a:	f000 fecd 	bl	8007028 <UTIL_SEQ_RegTask>
    EddystoneTLM_Process();
  }
  else if (CFG_BEACON_TYPE & CFG_IBEACON)
  {
    APP_DBG_MSG("Ibeacon advertise\n\r");
    IBeacon_Process();
 800628e:	f000 fa51 	bl	8006734 <IBeacon_Process>
  }
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8006292:	bf00      	nop
}
 8006294:	3740      	adds	r7, #64	; 0x40
 8006296:	46bd      	mov	sp, r7
 8006298:	bdb0      	pop	{r4, r5, r7, pc}
 800629a:	bf00      	nop
 800629c:	08006785 	.word	0x08006785
 80062a0:	080067bd 	.word	0x080067bd
 80062a4:	08007374 	.word	0x08007374
 80062a8:	080055e5 	.word	0x080055e5
 80062ac:	08006419 	.word	0x08006419

080062b0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3301      	adds	r3, #1
 80062bc:	617b      	str	r3, [r7, #20]

  switch (p_event_pckt->evt)
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2bff      	cmp	r3, #255	; 0xff
 80062c4:	d00e      	beq.n	80062e4 <SVCCTL_App_Notification+0x34>
 80062c6:	2bff      	cmp	r3, #255	; 0xff
 80062c8:	dc19      	bgt.n	80062fe <SVCCTL_App_Notification+0x4e>
 80062ca:	2b05      	cmp	r3, #5
 80062cc:	d019      	beq.n	8006302 <SVCCTL_App_Notification+0x52>
 80062ce:	2b3e      	cmp	r3, #62	; 0x3e
 80062d0:	d000      	beq.n	80062d4 <SVCCTL_App_Notification+0x24>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80062d2:	e014      	b.n	80062fe <SVCCTL_App_Notification+0x4e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	3302      	adds	r3, #2
 80062d8:	60fb      	str	r3, [r7, #12]
      switch (p_meta_evt->subevent)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b01      	cmp	r3, #1
          break;
 80062e0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80062e2:	e011      	b.n	8006308 <SVCCTL_App_Notification+0x58>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	3302      	adds	r3, #2
 80062e8:	613b      	str	r3, [r7, #16]
      switch (p_blecore_evt->ecode)
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	461a      	mov	r2, r3
 80062f2:	f240 4307 	movw	r3, #1031	; 0x407
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d105      	bne.n	8006306 <SVCCTL_App_Notification+0x56>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80062fa:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80062fc:	e003      	b.n	8006306 <SVCCTL_App_Notification+0x56>
      break;
 80062fe:	bf00      	nop
 8006300:	e002      	b.n	8006308 <SVCCTL_App_Notification+0x58>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8006302:	bf00      	nop
 8006304:	e000      	b.n	8006308 <SVCCTL_App_Notification+0x58>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8006306:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8006308:	2301      	movs	r3, #1
}
 800630a:	4618      	mov	r0, r3
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
	...

08006318 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800631e:	4b06      	ldr	r3, [pc, #24]	; (8006338 <Ble_Tl_Init+0x20>)
 8006320:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8006322:	4b06      	ldr	r3, [pc, #24]	; (800633c <Ble_Tl_Init+0x24>)
 8006324:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8006326:	463b      	mov	r3, r7
 8006328:	4619      	mov	r1, r3
 800632a:	4805      	ldr	r0, [pc, #20]	; (8006340 <Ble_Tl_Init+0x28>)
 800632c:	f7ff f93e 	bl	80055ac <hci_init>

  return;
 8006330:	bf00      	nop
}
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	200300d8 	.word	0x200300d8
 800633c:	08006581 	.word	0x08006581
 8006340:	08006549 	.word	0x08006549

08006344 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8006344:	b5b0      	push	{r4, r5, r7, lr}
 8006346:	b088      	sub	sp, #32
 8006348:	af02      	add	r7, sp, #8
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800634a:	2300      	movs	r3, #0
 800634c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800634e:	2392      	movs	r3, #146	; 0x92
 8006350:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8006352:	f7fe fe82 	bl	800505a <hci_reset>
 8006356:	4603      	mov	r3, r0
 8006358:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800635a:	f000 f88f 	bl	800647c <BleGetBdAddress>
 800635e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	2106      	movs	r1, #6
 8006364:	2000      	movs	r0, #0
 8006366:	f7fe fd8c 	bl	8004e82 <aci_hal_write_config_data>
 800636a:	4603      	mov	r3, r0
 800636c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800636e:	4a27      	ldr	r2, [pc, #156]	; (800640c <Ble_Hci_Gap_Gatt_Init+0xc8>)
 8006370:	2110      	movs	r1, #16
 8006372:	2018      	movs	r0, #24
 8006374:	f7fe fd85 	bl	8004e82 <aci_hal_write_config_data>
 8006378:	4603      	mov	r3, r0
 800637a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800637c:	4a24      	ldr	r2, [pc, #144]	; (8006410 <Ble_Hci_Gap_Gatt_Init+0xcc>)
 800637e:	2110      	movs	r1, #16
 8006380:	2008      	movs	r0, #8
 8006382:	f7fe fd7e 	bl	8004e82 <aci_hal_write_config_data>
 8006386:	4603      	mov	r3, r0
 8006388:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800638a:	2119      	movs	r1, #25
 800638c:	2001      	movs	r0, #1
 800638e:	f7fe fdfd 	bl	8004f8c <aci_hal_set_tx_power_level>
 8006392:	4603      	mov	r3, r0
 8006394:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8006396:	f7fe fca6 	bl	8004ce6 <aci_gatt_init>
 800639a:	4603      	mov	r3, r0
 800639c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	f043 0301 	orr.w	r3, r3, #1
 80063a8:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif /* BLE_CFG_CENTRAL == 1 */

  if (role > 0)
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d01f      	beq.n	80063f0 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = "STM32WB";
 80063b0:	4b18      	ldr	r3, [pc, #96]	; (8006414 <Ble_Hci_Gap_Gatt_Init+0xd0>)
 80063b2:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80063b4:	1dba      	adds	r2, r7, #6
 80063b6:	7bf8      	ldrb	r0, [r7, #15]
 80063b8:	1cbb      	adds	r3, r7, #2
 80063ba:	9301      	str	r3, [sp, #4]
 80063bc:	1d3b      	adds	r3, r7, #4
 80063be:	9300      	str	r3, [sp, #0]
 80063c0:	4613      	mov	r3, r2
 80063c2:	2207      	movs	r2, #7
 80063c4:	2100      	movs	r1, #0
 80063c6:	f7fe fb1b 	bl	8004a00 <aci_gap_init>
 80063ca:	4603      	mov	r3, r0
 80063cc:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80063ce:	88fc      	ldrh	r4, [r7, #6]
 80063d0:	88bd      	ldrh	r5, [r7, #4]
 80063d2:	68b8      	ldr	r0, [r7, #8]
 80063d4:	f7f9 fed2 	bl	800017c <strlen>
 80063d8:	4603      	mov	r3, r0
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	4613      	mov	r3, r2
 80063e2:	2200      	movs	r2, #0
 80063e4:	4629      	mov	r1, r5
 80063e6:	4620      	mov	r0, r4
 80063e8:	f7fe fca2 	bl	8004d30 <aci_gatt_update_char_value>
 80063ec:	4603      	mov	r3, r0
 80063ee:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80063f0:	88f8      	ldrh	r0, [r7, #6]
 80063f2:	8879      	ldrh	r1, [r7, #2]
 80063f4:	463b      	mov	r3, r7
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	2302      	movs	r3, #2
 80063fa:	2200      	movs	r2, #0
 80063fc:	f7fe fc98 	bl	8004d30 <aci_gatt_update_char_value>
 8006400:	4603      	mov	r3, r0
 8006402:	75fb      	strb	r3, [r7, #23]
  else
  {
    BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Appearance\n");
  }

}
 8006404:	bf00      	nop
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bdb0      	pop	{r4, r5, r7, pc}
 800640c:	08007598 	.word	0x08007598
 8006410:	080075a8 	.word	0x080075a8
 8006414:	080073ac 	.word	0x080073ac

08006418 <Beacon_Update>:
static void Beacon_Update(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
  FLASH_EraseInitTypeDef erase;
  uint32_t pageError = 0;
 800641e:	2300      	movs	r3, #0
 8006420:	603b      	str	r3, [r7, #0]

  if (sector_type != 0)
 8006422:	4b13      	ldr	r3, [pc, #76]	; (8006470 <Beacon_Update+0x58>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d01b      	beq.n	8006462 <Beacon_Update+0x4a>
  {
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800642a:	2302      	movs	r3, #2
 800642c:	607b      	str	r3, [r7, #4]
    erase.Page      = sector_type;
 800642e:	4b10      	ldr	r3, [pc, #64]	; (8006470 <Beacon_Update+0x58>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	60bb      	str	r3, [r7, #8]
    if (sector_type == APP_SECTORS)
 8006434:	4b0e      	ldr	r3, [pc, #56]	; (8006470 <Beacon_Update+0x58>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b07      	cmp	r3, #7
 800643a:	d102      	bne.n	8006442 <Beacon_Update+0x2a>
    {
      erase.NbPages = 2;  /* 2 sectors for beacon application */
 800643c:	2302      	movs	r3, #2
 800643e:	60fb      	str	r3, [r7, #12]
 8006440:	e001      	b.n	8006446 <Beacon_Update+0x2e>
    }
    else
    {
      erase.NbPages = 1; /* 1 sector for beacon user data */
 8006442:	2301      	movs	r3, #1
 8006444:	60fb      	str	r3, [r7, #12]
    }

    HAL_FLASH_Unlock();
 8006446:	f7fb fb05 	bl	8001a54 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 800644a:	4b0a      	ldr	r3, [pc, #40]	; (8006474 <Beacon_Update+0x5c>)
 800644c:	f248 0211 	movw	r2, #32785	; 0x8011
 8006450:	611a      	str	r2, [r3, #16]

    HAL_FLASHEx_Erase(&erase, &pageError);
 8006452:	463a      	mov	r2, r7
 8006454:	1d3b      	adds	r3, r7, #4
 8006456:	4611      	mov	r1, r2
 8006458:	4618      	mov	r0, r3
 800645a:	f7fb fba7 	bl	8001bac <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 800645e:	f7fb fb1b 	bl	8001a98 <HAL_FLASH_Lock>
  }

  *(uint32_t*) SRAM1_BASE = BOOT_MODE_AND_SECTOR;
 8006462:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006466:	4a04      	ldr	r2, [pc, #16]	; (8006478 <Beacon_Update+0x60>)
 8006468:	601a      	str	r2, [r3, #0]
  /**
   * Boot Mode:    1 (OTA)
   * Sector Index: 6
   * Nb Sectors  : 1
   */
  NVIC_SystemReset();
 800646a:	f7ff fe97 	bl	800619c <__NVIC_SystemReset>
 800646e:	bf00      	nop
 8006470:	20000282 	.word	0x20000282
 8006474:	58004000 	.word	0x58004000
 8006478:	00010601 	.word	0x00010601

0800647c <BleGetBdAddress>:
}

const uint8_t* BleGetBdAddress(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8006482:	f7ff fea1 	bl	80061c8 <LL_FLASH_GetUDN>
 8006486:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648e:	d023      	beq.n	80064d8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8006490:	f7ff feb2 	bl	80061f8 <LL_FLASH_GetSTCompanyID>
 8006494:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8006496:	f7ff fea3 	bl	80061e0 <LL_FLASH_GetDeviceID>
 800649a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	4b16      	ldr	r3, [pc, #88]	; (80064fc <BleGetBdAddress+0x80>)
 80064a2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	0a1b      	lsrs	r3, r3, #8
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	4b14      	ldr	r3, [pc, #80]	; (80064fc <BleGetBdAddress+0x80>)
 80064ac:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	b2da      	uxtb	r2, r3
 80064b2:	4b12      	ldr	r3, [pc, #72]	; (80064fc <BleGetBdAddress+0x80>)
 80064b4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	4b10      	ldr	r3, [pc, #64]	; (80064fc <BleGetBdAddress+0x80>)
 80064bc:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	0a1b      	lsrs	r3, r3, #8
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	4b0d      	ldr	r3, [pc, #52]	; (80064fc <BleGetBdAddress+0x80>)
 80064c6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	0c1b      	lsrs	r3, r3, #16
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	4b0b      	ldr	r3, [pc, #44]	; (80064fc <BleGetBdAddress+0x80>)
 80064d0:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80064d2:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <BleGetBdAddress+0x80>)
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	e00b      	b.n	80064f0 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80064d8:	2000      	movs	r0, #0
 80064da:	f7ff fd79 	bl	8005fd0 <OTP_Read>
 80064de:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	e001      	b.n	80064f0 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80064ec:	4b04      	ldr	r3, [pc, #16]	; (8006500 <BleGetBdAddress+0x84>)
 80064ee:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80064f0:	697b      	ldr	r3, [r7, #20]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	2000027c 	.word	0x2000027c
 8006500:	08007590 	.word	0x08007590

08006504 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800650c:	2100      	movs	r1, #0
 800650e:	2002      	movs	r0, #2
 8006510:	f000 fdac 	bl	800706c <UTIL_SEQ_SetTask>

  return;
 8006514:	bf00      	nop
}
 8006516:	3708      	adds	r7, #8
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8006524:	2001      	movs	r0, #1
 8006526:	f000 fe0d 	bl	8007144 <UTIL_SEQ_SetEvt>

  return;
 800652a:	bf00      	nop
}
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b082      	sub	sp, #8
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800653a:	2001      	movs	r0, #1
 800653c:	f000 fe22 	bl	8007184 <UTIL_SEQ_WaitEvt>

  return;
 8006540:	bf00      	nop
}
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	3308      	adds	r3, #8
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe fee0 	bl	8005320 <SVCCTL_UserEvtRx>
 8006560:	4603      	mov	r3, r0
 8006562:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8006564:	7afb      	ldrb	r3, [r7, #11]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2201      	movs	r2, #1
 800656e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8006570:	e003      	b.n	800657a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	701a      	strb	r2, [r3, #0]
  return;
 8006578:	bf00      	nop
}
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	4603      	mov	r3, r0
 8006588:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800658a:	79fb      	ldrb	r3, [r7, #7]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <BLE_StatusNot+0x16>
 8006590:	2b01      	cmp	r3, #1
 8006592:	d006      	beq.n	80065a2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8006594:	e00b      	b.n	80065ae <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8006596:	230f      	movs	r3, #15
 8006598:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 fd92 	bl	80070c4 <UTIL_SEQ_PauseTask>
      break;
 80065a0:	e005      	b.n	80065ae <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80065a2:	230f      	movs	r3, #15
 80065a4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 fdac 	bl	8007104 <UTIL_SEQ_ResumeTask>
      break;
 80065ac:	bf00      	nop
  }

  return;
 80065ae:	bf00      	nop
}
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <IBeacon_Init>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/

static tBleStatus IBeacon_Init(IBeacon_InitTypeDef *IBeacon_Init)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b094      	sub	sp, #80	; 0x50
 80065bc:	af08      	add	r7, sp, #32
 80065be:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN IBeacon_Init_1 */

/* USER CODE END IBeacon_Init_1 */
  tBleStatus ret = BLE_STATUS_SUCCESS;
 80065c0:	2300      	movs	r3, #0
 80065c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint16_t AdvertisingInterval = (IBeacon_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	4a55      	ldr	r2, [pc, #340]	; (8006724 <IBeacon_Init+0x16c>)
 80065ce:	fb82 1203 	smull	r1, r2, r2, r3
 80065d2:	1092      	asrs	r2, r2, #2
 80065d4:	17db      	asrs	r3, r3, #31
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* Disable scan response. */
  hci_le_set_scan_response_data(0, NULL);
 80065da:	2100      	movs	r1, #0
 80065dc:	2000      	movs	r0, #0
 80065de:	f7fe fd60 	bl	80050a2 <hci_le_set_scan_response_data>

  /* Put the device in a non-connectable mode. */
  ret = aci_gap_set_discoverable(ADV_NONCONN_IND,                          /*< Advertise as non-connectable, undirected. */
 80065e2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80065e4:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80065e6:	2300      	movs	r3, #0
 80065e8:	9306      	str	r3, [sp, #24]
 80065ea:	2300      	movs	r3, #0
 80065ec:	9305      	str	r3, [sp, #20]
 80065ee:	2300      	movs	r3, #0
 80065f0:	9304      	str	r3, [sp, #16]
 80065f2:	2300      	movs	r3, #0
 80065f4:	9303      	str	r3, [sp, #12]
 80065f6:	2300      	movs	r3, #0
 80065f8:	9302      	str	r3, [sp, #8]
 80065fa:	2300      	movs	r3, #0
 80065fc:	9301      	str	r3, [sp, #4]
 80065fe:	2300      	movs	r3, #0
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	2300      	movs	r3, #0
 8006604:	2003      	movs	r0, #3
 8006606:	f7fe f901 	bl	800480c <aci_gap_set_discoverable>
 800660a:	4603      	mov	r3, r0
 800660c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 PUBLIC_ADDR, NO_WHITE_LIST_USE,           /*< Use the public address, with no white list. */
                                 0, NULL,                                  /*< Do not use a local name. */
                                 0, NULL,                                  /*< Do not include the service UUID list. */
                                 0, 0);                                    /*< Do not set a slave connection interval. */

  if (ret != BLE_STATUS_SUCCESS)
 8006610:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <IBeacon_Init+0x66>
  {
    return ret;
 8006618:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800661c:	e07d      	b.n	800671a <IBeacon_Init+0x162>
  }

  /* Remove the TX power level advertisement (this is done to decrease the packet size). */
  ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 800661e:	200a      	movs	r0, #10
 8006620:	f7fe fb0d 	bl	8004c3e <aci_gap_delete_ad_type>
 8006624:	4603      	mov	r3, r0
 8006626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 800662a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800662e:	2b00      	cmp	r3, #0
 8006630:	d002      	beq.n	8006638 <IBeacon_Init+0x80>
  {
    return ret;
 8006632:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006636:	e070      	b.n	800671a <IBeacon_Init+0x162>
  }

	uint8_t service_data[] =
 8006638:	231b      	movs	r3, #27
 800663a:	743b      	strb	r3, [r7, #16]
 800663c:	23ff      	movs	r3, #255	; 0xff
 800663e:	747b      	strb	r3, [r7, #17]
 8006640:	234c      	movs	r3, #76	; 0x4c
 8006642:	74bb      	strb	r3, [r7, #18]
 8006644:	2300      	movs	r3, #0
 8006646:	74fb      	strb	r3, [r7, #19]
 8006648:	2300      	movs	r3, #0
 800664a:	753b      	strb	r3, [r7, #20]
 800664c:	2300      	movs	r3, #0
 800664e:	757b      	strb	r3, [r7, #21]
 8006650:	2300      	movs	r3, #0
 8006652:	75bb      	strb	r3, [r7, #22]
 8006654:	2300      	movs	r3, #0
 8006656:	75fb      	strb	r3, [r7, #23]
 8006658:	2300      	movs	r3, #0
 800665a:	763b      	strb	r3, [r7, #24]
 800665c:	230e      	movs	r3, #14
 800665e:	767b      	strb	r3, [r7, #25]
 8006660:	238e      	movs	r3, #142	; 0x8e
 8006662:	76bb      	strb	r3, [r7, #26]
 8006664:	2322      	movs	r3, #34	; 0x22
 8006666:	76fb      	strb	r3, [r7, #27]
 8006668:	2345      	movs	r3, #69	; 0x45
 800666a:	773b      	strb	r3, [r7, #28]
 800666c:	2341      	movs	r3, #65	; 0x41
 800666e:	777b      	strb	r3, [r7, #29]
 8006670:	239d      	movs	r3, #157	; 0x9d
 8006672:	77bb      	strb	r3, [r7, #30]
 8006674:	234c      	movs	r3, #76	; 0x4c
 8006676:	77fb      	strb	r3, [r7, #31]
 8006678:	2321      	movs	r3, #33	; 0x21
 800667a:	f887 3020 	strb.w	r3, [r7, #32]
 800667e:	23ed      	movs	r3, #237	; 0xed
 8006680:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8006684:	23ae      	movs	r3, #174	; 0xae
 8006686:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800668a:	2382      	movs	r3, #130	; 0x82
 800668c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006690:	23ed      	movs	r3, #237	; 0xed
 8006692:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8006696:	2319      	movs	r3, #25
 8006698:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800669c:	2300      	movs	r3, #0
 800669e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80066a2:	2300      	movs	r3, #0
 80066a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80066a8:	4b1f      	ldr	r3, [pc, #124]	; (8006728 <IBeacon_Init+0x170>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80066b0:	4b1e      	ldr	r3, [pc, #120]	; (800672c <IBeacon_Init+0x174>)
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80066b8:	2300      	movs	r3, #0
 80066ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80066be:	2300      	movs	r3, #0
 80066c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		  0x00, 0x00,					 	 	 					 /*< 2-byte Major */
		  tempMSB, tempLSB,					 		     			 /*< 2-byte Temperature Data */
		  0x00,	0x00,					     					         /*< 1-byte Power */
		};

  uint8_t flags[] =
 80066c4:	4a1a      	ldr	r2, [pc, #104]	; (8006730 <IBeacon_Init+0x178>)
 80066c6:	f107 030c 	add.w	r3, r7, #12
 80066ca:	6812      	ldr	r2, [r2, #0]
 80066cc:	4611      	mov	r1, r2
 80066ce:	8019      	strh	r1, [r3, #0]
 80066d0:	3302      	adds	r3, #2
 80066d2:	0c12      	lsrs	r2, r2, #16
 80066d4:	701a      	strb	r2, [r3, #0]
    AD_TYPE_FLAGS,                                                          /*< Flags data type value. */
    (FLAG_BIT_LE_GENERAL_DISCOVERABLE_MODE | FLAG_BIT_BR_EDR_NOT_SUPPORTED) /*< BLE general discoverable, without BR/EDR support. */
  };

  /* Update the service data. */
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 80066d6:	f107 0310 	add.w	r3, r7, #16
 80066da:	4619      	mov	r1, r3
 80066dc:	201c      	movs	r0, #28
 80066de:	f7fe fa3c 	bl	8004b5a <aci_gap_update_adv_data>
 80066e2:	4603      	mov	r3, r0
 80066e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 80066e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <IBeacon_Init+0x13e>
  {
    return ret;
 80066f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066f4:	e011      	b.n	800671a <IBeacon_Init+0x162>
  }

  /* Update the adverstising flags. */
  ret = aci_gap_update_adv_data(sizeof(flags), flags);
 80066f6:	f107 030c 	add.w	r3, r7, #12
 80066fa:	4619      	mov	r1, r3
 80066fc:	2003      	movs	r0, #3
 80066fe:	f7fe fa2c 	bl	8004b5a <aci_gap_update_adv_data>
 8006702:	4603      	mov	r3, r0
 8006704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8006708:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800670c:	2b00      	cmp	r3, #0
 800670e:	d002      	beq.n	8006716 <IBeacon_Init+0x15e>
  {
    return ret;
 8006710:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006714:	e001      	b.n	800671a <IBeacon_Init+0x162>
  }
/* USER CODE BEGIN IBeacon_Init_2 */

/* USER CODE END IBeacon_Init_2 */
  return ret;
 8006716:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800671a:	4618      	mov	r0, r3
 800671c:	3730      	adds	r7, #48	; 0x30
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	66666667 	.word	0x66666667
 8006728:	20000283 	.word	0x20000283
 800672c:	20000284 	.word	0x20000284
 8006730:	080073b4 	.word	0x080073b4

08006734 <IBeacon_Process>:

void IBeacon_Process(void)
{
 8006734:	b590      	push	{r4, r7, lr}
 8006736:	b08d      	sub	sp, #52	; 0x34
 8006738:	af00      	add	r7, sp, #0
/* USER CODE BEGIN IBeacon_Process_1 */

/* USER CODE END IBeacon_Process_1 */
  /* Default ibeacon */
  uint8_t UuID[]    = { UUID };
 800673a:	4b11      	ldr	r3, [pc, #68]	; (8006780 <IBeacon_Process+0x4c>)
 800673c:	f107 0420 	add.w	r4, r7, #32
 8006740:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006742:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t MajorID[] = { MAJOR_ID };
 8006746:	f44f 7380 	mov.w	r3, #256	; 0x100
 800674a:	83bb      	strh	r3, [r7, #28]
  uint8_t MinorID[] = { MINOR_ID };
 800674c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006750:	833b      	strh	r3, [r7, #24]

  IBeacon_InitTypeDef IBeacon_InitStruct =
 8006752:	f242 7310 	movw	r3, #10000	; 0x2710
 8006756:	80bb      	strh	r3, [r7, #4]
 8006758:	f107 0320 	add.w	r3, r7, #32
 800675c:	60bb      	str	r3, [r7, #8]
 800675e:	f107 031c 	add.w	r3, r7, #28
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	f107 0318 	add.w	r3, r7, #24
 8006768:	613b      	str	r3, [r7, #16]
 800676a:	23c1      	movs	r3, #193	; 0xc1
 800676c:	753b      	strb	r3, [r7, #20]
    data_address += 2;
    IBeacon_InitStruct.CalibratedTxPower = *(uint8_t *)(data_address);
  }
#endif

  IBeacon_Init(&IBeacon_InitStruct);
 800676e:	1d3b      	adds	r3, r7, #4
 8006770:	4618      	mov	r0, r3
 8006772:	f7ff ff21 	bl	80065b8 <IBeacon_Init>
/* USER CODE BEGIN IBeacon_Process_2 */

/* USER CODE END IBeacon_Process_2 */
}
 8006776:	bf00      	nop
 8006778:	3734      	adds	r7, #52	; 0x34
 800677a:	46bd      	mov	sp, r7
 800677c:	bd90      	pop	{r4, r7, pc}
 800677e:	bf00      	nop
 8006780:	080073b8 	.word	0x080073b8

08006784 <initTemp>:
/* USER CODE BEGIN FD */
void initTemp(void) {
 8006784:	b590      	push	{r4, r7, lr}
 8006786:	b095      	sub	sp, #84	; 0x54
 8006788:	af14      	add	r7, sp, #80	; 0x50
	  TMP117_set_Configuration(hi2c1,0x03, 0x24, Device_ID);			// 8s continous
 800678a:	4c0b      	ldr	r4, [pc, #44]	; (80067b8 <initTemp+0x34>)
 800678c:	2390      	movs	r3, #144	; 0x90
 800678e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006790:	2324      	movs	r3, #36	; 0x24
 8006792:	9312      	str	r3, [sp, #72]	; 0x48
 8006794:	2303      	movs	r3, #3
 8006796:	9311      	str	r3, [sp, #68]	; 0x44
 8006798:	4668      	mov	r0, sp
 800679a:	f104 0310 	add.w	r3, r4, #16
 800679e:	2244      	movs	r2, #68	; 0x44
 80067a0:	4619      	mov	r1, r3
 80067a2:	f000 fda7 	bl	80072f4 <memcpy>
 80067a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80067aa:	f7f9 fd23 	bl	80001f4 <TMP117_set_Configuration>

}
 80067ae:	bf00      	nop
 80067b0:	3704      	adds	r7, #4
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd90      	pop	{r4, r7, pc}
 80067b6:	bf00      	nop
 80067b8:	2000013c 	.word	0x2000013c

080067bc <updateTemp>:

void updateTemp(void) {
 80067bc:	b590      	push	{r4, r7, lr}
 80067be:	b09b      	sub	sp, #108	; 0x6c
 80067c0:	af12      	add	r7, sp, #72	; 0x48

	//HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);

	temperature_val = TMP117_get_Temperature(hi2c1, Device_ID);
 80067c2:	4c34      	ldr	r4, [pc, #208]	; (8006894 <updateTemp+0xd8>)
 80067c4:	2390      	movs	r3, #144	; 0x90
 80067c6:	9311      	str	r3, [sp, #68]	; 0x44
 80067c8:	4668      	mov	r0, sp
 80067ca:	f104 0310 	add.w	r3, r4, #16
 80067ce:	2244      	movs	r2, #68	; 0x44
 80067d0:	4619      	mov	r1, r3
 80067d2:	f000 fd8f 	bl	80072f4 <memcpy>
 80067d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80067da:	f7f9 fcd7 	bl	800018c <TMP117_get_Temperature>
 80067de:	4603      	mov	r3, r0
 80067e0:	461a      	mov	r2, r3
 80067e2:	4b2d      	ldr	r3, [pc, #180]	; (8006898 <updateTemp+0xdc>)
 80067e4:	801a      	strh	r2, [r3, #0]
	tempMSB = temperature_val >> 8;
 80067e6:	4b2c      	ldr	r3, [pc, #176]	; (8006898 <updateTemp+0xdc>)
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	0a1b      	lsrs	r3, r3, #8
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	4b2a      	ldr	r3, [pc, #168]	; (800689c <updateTemp+0xe0>)
 80067f2:	701a      	strb	r2, [r3, #0]
	tempLSB = temperature_val & 0xFF;
 80067f4:	4b28      	ldr	r3, [pc, #160]	; (8006898 <updateTemp+0xdc>)
 80067f6:	881b      	ldrh	r3, [r3, #0]
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	4b29      	ldr	r3, [pc, #164]	; (80068a0 <updateTemp+0xe4>)
 80067fc:	701a      	strb	r2, [r3, #0]

	uint8_t service_data[] =
 80067fe:	231b      	movs	r3, #27
 8006800:	713b      	strb	r3, [r7, #4]
 8006802:	23ff      	movs	r3, #255	; 0xff
 8006804:	717b      	strb	r3, [r7, #5]
 8006806:	234c      	movs	r3, #76	; 0x4c
 8006808:	71bb      	strb	r3, [r7, #6]
 800680a:	2300      	movs	r3, #0
 800680c:	71fb      	strb	r3, [r7, #7]
 800680e:	2300      	movs	r3, #0
 8006810:	723b      	strb	r3, [r7, #8]
 8006812:	2300      	movs	r3, #0
 8006814:	727b      	strb	r3, [r7, #9]
 8006816:	2300      	movs	r3, #0
 8006818:	72bb      	strb	r3, [r7, #10]
 800681a:	2300      	movs	r3, #0
 800681c:	72fb      	strb	r3, [r7, #11]
 800681e:	2300      	movs	r3, #0
 8006820:	733b      	strb	r3, [r7, #12]
 8006822:	230e      	movs	r3, #14
 8006824:	737b      	strb	r3, [r7, #13]
 8006826:	238e      	movs	r3, #142	; 0x8e
 8006828:	73bb      	strb	r3, [r7, #14]
 800682a:	2322      	movs	r3, #34	; 0x22
 800682c:	73fb      	strb	r3, [r7, #15]
 800682e:	2345      	movs	r3, #69	; 0x45
 8006830:	743b      	strb	r3, [r7, #16]
 8006832:	2341      	movs	r3, #65	; 0x41
 8006834:	747b      	strb	r3, [r7, #17]
 8006836:	239d      	movs	r3, #157	; 0x9d
 8006838:	74bb      	strb	r3, [r7, #18]
 800683a:	234c      	movs	r3, #76	; 0x4c
 800683c:	74fb      	strb	r3, [r7, #19]
 800683e:	2321      	movs	r3, #33	; 0x21
 8006840:	753b      	strb	r3, [r7, #20]
 8006842:	23ed      	movs	r3, #237	; 0xed
 8006844:	757b      	strb	r3, [r7, #21]
 8006846:	23ae      	movs	r3, #174	; 0xae
 8006848:	75bb      	strb	r3, [r7, #22]
 800684a:	2382      	movs	r3, #130	; 0x82
 800684c:	75fb      	strb	r3, [r7, #23]
 800684e:	23ed      	movs	r3, #237	; 0xed
 8006850:	763b      	strb	r3, [r7, #24]
 8006852:	2319      	movs	r3, #25
 8006854:	767b      	strb	r3, [r7, #25]
 8006856:	2300      	movs	r3, #0
 8006858:	76bb      	strb	r3, [r7, #26]
 800685a:	2300      	movs	r3, #0
 800685c:	76fb      	strb	r3, [r7, #27]
 800685e:	4b0f      	ldr	r3, [pc, #60]	; (800689c <updateTemp+0xe0>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	773b      	strb	r3, [r7, #28]
 8006864:	4b0e      	ldr	r3, [pc, #56]	; (80068a0 <updateTemp+0xe4>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	777b      	strb	r3, [r7, #29]
 800686a:	2300      	movs	r3, #0
 800686c:	77bb      	strb	r3, [r7, #30]
 800686e:	2300      	movs	r3, #0
 8006870:	77fb      	strb	r3, [r7, #31]
		  0x00, 0x00,					 	 	 					 /*< 2-byte Major */
		  tempMSB, tempLSB,					 		     			 /*< 2-byte Temperature Data */
		  0x00,	0x00,					     					         /*< 1-byte Power */
		};

    aci_gap_update_adv_data(sizeof(service_data), service_data);
 8006872:	1d3b      	adds	r3, r7, #4
 8006874:	4619      	mov	r1, r3
 8006876:	201c      	movs	r0, #28
 8006878:	f7fe f96f 	bl	8004b5a <aci_gap_update_adv_data>
	//TMP117_set_Configuration(hi2c1,0x0C, 0x24, Device_ID);

	// Enter STOP MODE //
	//HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x4E20, RTC_WAKEUPCLOCK_RTCCLK_DIV16);				// 10s
	HAL_SuspendTick();
 800687c:	f7fa ff62 	bl	8001744 <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006880:	2101      	movs	r1, #1
 8006882:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006886:	f7fc fa19 	bl	8002cbc <HAL_PWR_EnterSTOPMode>
}
 800688a:	bf00      	nop
 800688c:	3724      	adds	r7, #36	; 0x24
 800688e:	46bd      	mov	sp, r7
 8006890:	bd90      	pop	{r4, r7, pc}
 8006892:	bf00      	nop
 8006894:	2000013c 	.word	0x2000013c
 8006898:	200001f0 	.word	0x200001f0
 800689c:	20000283 	.word	0x20000283
 80068a0:	20000284 	.word	0x20000284

080068a4 <LL_PWR_EnableBootC2>:
{
 80068a4:	b480      	push	{r7}
 80068a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80068a8:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <LL_PWR_EnableBootC2+0x1c>)
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	4a04      	ldr	r2, [pc, #16]	; (80068c0 <LL_PWR_EnableBootC2+0x1c>)
 80068ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068b2:	60d3      	str	r3, [r2, #12]
}
 80068b4:	bf00      	nop
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	58000400 	.word	0x58000400

080068c4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80068cc:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80068ce:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80068d2:	4905      	ldr	r1, [pc, #20]	; (80068e8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	58000800 	.word	0x58000800

080068ec <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80068f4:	4b05      	ldr	r3, [pc, #20]	; (800690c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80068f6:	6a1a      	ldr	r2, [r3, #32]
 80068f8:	4904      	ldr	r1, [pc, #16]	; (800690c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	620b      	str	r3, [r1, #32]
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	58000800 	.word	0x58000800

08006910 <LL_AHB3_GRP1_EnableClock>:
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800691c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800691e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4313      	orrs	r3, r2
 8006926:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800692c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4013      	ands	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006934:	68fb      	ldr	r3, [r7, #12]
}
 8006936:	bf00      	nop
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006942:	b480      	push	{r7}
 8006944:	b085      	sub	sp, #20
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800694a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800694e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006952:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4313      	orrs	r3, r2
 800695a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800695e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006962:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4013      	ands	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800696c:	68fb      	ldr	r3, [r7, #12]
}
 800696e:	bf00      	nop
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <LL_C1_IPCC_EnableIT_TXF>:
{
 800697a:	b480      	push	{r7}
 800697c:	b083      	sub	sp, #12
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	601a      	str	r2, [r3, #0]
}
 800698e:	bf00      	nop
 8006990:	370c      	adds	r7, #12
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <LL_C1_IPCC_EnableIT_RXO>:
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f043 0201 	orr.w	r2, r3, #1
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	601a      	str	r2, [r3, #0]
}
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <LL_C1_IPCC_EnableTransmitChannel>:
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	041b      	lsls	r3, r3, #16
 80069cc:	43db      	mvns	r3, r3
 80069ce:	401a      	ands	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	605a      	str	r2, [r3, #4]
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	041b      	lsls	r3, r3, #16
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	605a      	str	r2, [r3, #4]
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	43db      	mvns	r3, r3
 8006a16:	401a      	ands	r2, r3
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	605a      	str	r2, [r3, #4]
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr

08006a28 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	609a      	str	r2, [r3, #8]
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <LL_C1_IPCC_SetFlag_CHx>:
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	041a      	lsls	r2, r3, #16
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	609a      	str	r2, [r3, #8]
}
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8006a62:	b480      	push	{r7}
 8006a64:	b083      	sub	sp, #12
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68da      	ldr	r2, [r3, #12]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	4013      	ands	r3, r2
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d101      	bne.n	8006a7e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e000      	b.n	8006a80 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	69da      	ldr	r2, [r3, #28]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d101      	bne.n	8006aa8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e000      	b.n	8006aaa <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
	...

08006ab8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8006abc:	2102      	movs	r1, #2
 8006abe:	4819      	ldr	r0, [pc, #100]	; (8006b24 <HW_IPCC_Rx_Handler+0x6c>)
 8006ac0:	f7ff ffe4 	bl	8006a8c <LL_C2_IPCC_IsActiveFlag_CHx>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d009      	beq.n	8006ade <HW_IPCC_Rx_Handler+0x26>
 8006aca:	4b16      	ldr	r3, [pc, #88]	; (8006b24 <HW_IPCC_Rx_Handler+0x6c>)
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	43db      	mvns	r3, r3
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8006ad8:	f000 f8da 	bl	8006c90 <HW_IPCC_SYS_EvtHandler>
 8006adc:	e01f      	b.n	8006b1e <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8006ade:	2101      	movs	r1, #1
 8006ae0:	4810      	ldr	r0, [pc, #64]	; (8006b24 <HW_IPCC_Rx_Handler+0x6c>)
 8006ae2:	f7ff ffd3 	bl	8006a8c <LL_C2_IPCC_IsActiveFlag_CHx>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d008      	beq.n	8006afe <HW_IPCC_Rx_Handler+0x46>
 8006aec:	4b0d      	ldr	r3, [pc, #52]	; (8006b24 <HW_IPCC_Rx_Handler+0x6c>)
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d102      	bne.n	8006afe <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8006af8:	f000 f88e 	bl	8006c18 <HW_IPCC_BLE_EvtHandler>
 8006afc:	e00f      	b.n	8006b1e <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8006afe:	2108      	movs	r1, #8
 8006b00:	4808      	ldr	r0, [pc, #32]	; (8006b24 <HW_IPCC_Rx_Handler+0x6c>)
 8006b02:	f7ff ffc3 	bl	8006a8c <LL_C2_IPCC_IsActiveFlag_CHx>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d009      	beq.n	8006b20 <HW_IPCC_Rx_Handler+0x68>
 8006b0c:	4b05      	ldr	r3, [pc, #20]	; (8006b24 <HW_IPCC_Rx_Handler+0x6c>)
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	43db      	mvns	r3, r3
 8006b12:	f003 0308 	and.w	r3, r3, #8
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8006b1a:	f000 f905 	bl	8006d28 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8006b1e:	bf00      	nop
 8006b20:	bf00      	nop
}
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	58000c00 	.word	0x58000c00

08006b28 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8006b2c:	2102      	movs	r1, #2
 8006b2e:	481a      	ldr	r0, [pc, #104]	; (8006b98 <HW_IPCC_Tx_Handler+0x70>)
 8006b30:	f7ff ff97 	bl	8006a62 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d109      	bne.n	8006b4e <HW_IPCC_Tx_Handler+0x26>
 8006b3a:	4b17      	ldr	r3, [pc, #92]	; (8006b98 <HW_IPCC_Tx_Handler+0x70>)
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	43db      	mvns	r3, r3
 8006b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d002      	beq.n	8006b4e <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8006b48:	f000 f896 	bl	8006c78 <HW_IPCC_SYS_CmdEvtHandler>
 8006b4c:	e020      	b.n	8006b90 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8006b4e:	2108      	movs	r1, #8
 8006b50:	4811      	ldr	r0, [pc, #68]	; (8006b98 <HW_IPCC_Tx_Handler+0x70>)
 8006b52:	f7ff ff86 	bl	8006a62 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d109      	bne.n	8006b70 <HW_IPCC_Tx_Handler+0x48>
 8006b5c:	4b0e      	ldr	r3, [pc, #56]	; (8006b98 <HW_IPCC_Tx_Handler+0x70>)
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	43db      	mvns	r3, r3
 8006b62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8006b6a:	f000 f8bf 	bl	8006cec <HW_IPCC_MM_FreeBufHandler>
 8006b6e:	e00f      	b.n	8006b90 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8006b70:	2120      	movs	r1, #32
 8006b72:	4809      	ldr	r0, [pc, #36]	; (8006b98 <HW_IPCC_Tx_Handler+0x70>)
 8006b74:	f7ff ff75 	bl	8006a62 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d109      	bne.n	8006b92 <HW_IPCC_Tx_Handler+0x6a>
 8006b7e:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <HW_IPCC_Tx_Handler+0x70>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	43db      	mvns	r3, r3
 8006b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d002      	beq.n	8006b92 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8006b8c:	f000 f850 	bl	8006c30 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8006b90:	bf00      	nop
 8006b92:	bf00      	nop
}
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	58000c00 	.word	0x58000c00

08006b9c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8006ba0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006ba4:	f7ff fecd 	bl	8006942 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8006ba8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006bac:	f7ff fe9e 	bl	80068ec <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8006bb0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006bb4:	f7ff fe86 	bl	80068c4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8006bb8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8006bba:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8006bbc:	f7ff fe72 	bl	80068a4 <LL_PWR_EnableBootC2>

  return;
 8006bc0:	bf00      	nop
}
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8006bc8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006bcc:	f7ff fea0 	bl	8006910 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8006bd0:	4806      	ldr	r0, [pc, #24]	; (8006bec <HW_IPCC_Init+0x28>)
 8006bd2:	f7ff fee2 	bl	800699a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8006bd6:	4805      	ldr	r0, [pc, #20]	; (8006bec <HW_IPCC_Init+0x28>)
 8006bd8:	f7ff fecf 	bl	800697a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006bdc:	202c      	movs	r0, #44	; 0x2c
 8006bde:	f7fa ff02 	bl	80019e6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006be2:	202d      	movs	r0, #45	; 0x2d
 8006be4:	f7fa feff 	bl	80019e6 <HAL_NVIC_EnableIRQ>

  return;
 8006be8:	bf00      	nop
}
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	58000c00 	.word	0x58000c00

08006bf0 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	4802      	ldr	r0, [pc, #8]	; (8006c00 <HW_IPCC_BLE_Init+0x10>)
 8006bf8:	f7ff ff04 	bl	8006a04 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006bfc:	bf00      	nop
}
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	58000c00 	.word	0x58000c00

08006c04 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 8006c08:	2101      	movs	r1, #1
 8006c0a:	4802      	ldr	r0, [pc, #8]	; (8006c14 <HW_IPCC_BLE_SendCmd+0x10>)
 8006c0c:	f7ff ff1a 	bl	8006a44 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006c10:	bf00      	nop
}
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	58000c00 	.word	0x58000c00

08006c18 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8006c1c:	f7ff f820 	bl	8005c60 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006c20:	2101      	movs	r1, #1
 8006c22:	4802      	ldr	r0, [pc, #8]	; (8006c2c <HW_IPCC_BLE_EvtHandler+0x14>)
 8006c24:	f7ff ff00 	bl	8006a28 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006c28:	bf00      	nop
}
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	58000c00 	.word	0x58000c00

08006c30 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8006c34:	2120      	movs	r1, #32
 8006c36:	4803      	ldr	r0, [pc, #12]	; (8006c44 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8006c38:	f7ff fed2 	bl	80069e0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8006c3c:	f7ff f840 	bl	8005cc0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8006c40:	bf00      	nop
}
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	58000c00 	.word	0x58000c00

08006c48 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006c4c:	2102      	movs	r1, #2
 8006c4e:	4802      	ldr	r0, [pc, #8]	; (8006c58 <HW_IPCC_SYS_Init+0x10>)
 8006c50:	f7ff fed8 	bl	8006a04 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006c54:	bf00      	nop
}
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	58000c00 	.word	0x58000c00

08006c5c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006c60:	2102      	movs	r1, #2
 8006c62:	4804      	ldr	r0, [pc, #16]	; (8006c74 <HW_IPCC_SYS_SendCmd+0x18>)
 8006c64:	f7ff feee 	bl	8006a44 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006c68:	2102      	movs	r1, #2
 8006c6a:	4802      	ldr	r0, [pc, #8]	; (8006c74 <HW_IPCC_SYS_SendCmd+0x18>)
 8006c6c:	f7ff fea5 	bl	80069ba <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8006c70:	bf00      	nop
}
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	58000c00 	.word	0x58000c00

08006c78 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006c7c:	2102      	movs	r1, #2
 8006c7e:	4803      	ldr	r0, [pc, #12]	; (8006c8c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8006c80:	f7ff feae 	bl	80069e0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8006c84:	f7ff f86c 	bl	8005d60 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8006c88:	bf00      	nop
}
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	58000c00 	.word	0x58000c00

08006c90 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8006c94:	f7ff f87a 	bl	8005d8c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006c98:	2102      	movs	r1, #2
 8006c9a:	4802      	ldr	r0, [pc, #8]	; (8006ca4 <HW_IPCC_SYS_EvtHandler+0x14>)
 8006c9c:	f7ff fec4 	bl	8006a28 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006ca0:	bf00      	nop
}
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	58000c00 	.word	0x58000c00

08006ca8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8006cb0:	2108      	movs	r1, #8
 8006cb2:	480c      	ldr	r0, [pc, #48]	; (8006ce4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006cb4:	f7ff fed5 	bl	8006a62 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d007      	beq.n	8006cce <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8006cbe:	4a0a      	ldr	r2, [pc, #40]	; (8006ce8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006cc4:	2108      	movs	r1, #8
 8006cc6:	4807      	ldr	r0, [pc, #28]	; (8006ce4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006cc8:	f7ff fe77 	bl	80069ba <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8006ccc:	e006      	b.n	8006cdc <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006cd2:	2108      	movs	r1, #8
 8006cd4:	4803      	ldr	r0, [pc, #12]	; (8006ce4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006cd6:	f7ff feb5 	bl	8006a44 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8006cda:	bf00      	nop
}
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	58000c00 	.word	0x58000c00
 8006ce8:	20000288 	.word	0x20000288

08006cec <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006cf0:	2108      	movs	r1, #8
 8006cf2:	4806      	ldr	r0, [pc, #24]	; (8006d0c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006cf4:	f7ff fe74 	bl	80069e0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8006cf8:	4b05      	ldr	r3, [pc, #20]	; (8006d10 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006cfe:	2108      	movs	r1, #8
 8006d00:	4802      	ldr	r0, [pc, #8]	; (8006d0c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006d02:	f7ff fe9f 	bl	8006a44 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006d06:	bf00      	nop
}
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	58000c00 	.word	0x58000c00
 8006d10:	20000288 	.word	0x20000288

08006d14 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006d18:	2108      	movs	r1, #8
 8006d1a:	4802      	ldr	r0, [pc, #8]	; (8006d24 <HW_IPCC_TRACES_Init+0x10>)
 8006d1c:	f7ff fe72 	bl	8006a04 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006d20:	bf00      	nop
}
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	58000c00 	.word	0x58000c00

08006d28 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8006d2c:	f7ff f8d6 	bl	8005edc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006d30:	2108      	movs	r1, #8
 8006d32:	4802      	ldr	r0, [pc, #8]	; (8006d3c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8006d34:	f7ff fe78 	bl	8006a28 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006d38:	bf00      	nop
}
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	58000c00 	.word	0x58000c00

08006d40 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8006d40:	b480      	push	{r7}
 8006d42:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8006d44:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <UTIL_LPM_Init+0x1c>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8006d4a:	4b05      	ldr	r3, [pc, #20]	; (8006d60 <UTIL_LPM_Init+0x20>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8006d50:	bf00      	nop
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	2000028c 	.word	0x2000028c
 8006d60:	20000290 	.word	0x20000290

08006d64 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8006d64:	b480      	push	{r7}
 8006d66:	b087      	sub	sp, #28
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d70:	f3ef 8310 	mrs	r3, PRIMASK
 8006d74:	613b      	str	r3, [r7, #16]
  return(result);
 8006d76:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8006d78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006d7a:	b672      	cpsid	i
}
 8006d7c:	bf00      	nop
  
  switch(state)
 8006d7e:	78fb      	ldrb	r3, [r7, #3]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d008      	beq.n	8006d96 <UTIL_LPM_SetOffMode+0x32>
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d10e      	bne.n	8006da6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8006d88:	4b0d      	ldr	r3, [pc, #52]	; (8006dc0 <UTIL_LPM_SetOffMode+0x5c>)
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	4a0b      	ldr	r2, [pc, #44]	; (8006dc0 <UTIL_LPM_SetOffMode+0x5c>)
 8006d92:	6013      	str	r3, [r2, #0]
      break;
 8006d94:	e008      	b.n	8006da8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	43da      	mvns	r2, r3
 8006d9a:	4b09      	ldr	r3, [pc, #36]	; (8006dc0 <UTIL_LPM_SetOffMode+0x5c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4013      	ands	r3, r2
 8006da0:	4a07      	ldr	r2, [pc, #28]	; (8006dc0 <UTIL_LPM_SetOffMode+0x5c>)
 8006da2:	6013      	str	r3, [r2, #0]
      break;
 8006da4:	e000      	b.n	8006da8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8006da6:	bf00      	nop
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f383 8810 	msr	PRIMASK, r3
}
 8006db2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8006db4:	bf00      	nop
 8006db6:	371c      	adds	r7, #28
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	20000290 	.word	0x20000290

08006dc4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dca:	f3ef 8310 	mrs	r3, PRIMASK
 8006dce:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dd0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8006dd2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8006dd4:	b672      	cpsid	i
}
 8006dd6:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8006dd8:	4b12      	ldr	r3, [pc, #72]	; (8006e24 <UTIL_LPM_EnterLowPower+0x60>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d006      	beq.n	8006dee <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8006de0:	4b11      	ldr	r3, [pc, #68]	; (8006e28 <UTIL_LPM_EnterLowPower+0x64>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8006de6:	4b10      	ldr	r3, [pc, #64]	; (8006e28 <UTIL_LPM_EnterLowPower+0x64>)
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	4798      	blx	r3
 8006dec:	e010      	b.n	8006e10 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8006dee:	4b0f      	ldr	r3, [pc, #60]	; (8006e2c <UTIL_LPM_EnterLowPower+0x68>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d006      	beq.n	8006e04 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8006df6:	4b0c      	ldr	r3, [pc, #48]	; (8006e28 <UTIL_LPM_EnterLowPower+0x64>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	; (8006e28 <UTIL_LPM_EnterLowPower+0x64>)
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	4798      	blx	r3
 8006e02:	e005      	b.n	8006e10 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8006e04:	4b08      	ldr	r3, [pc, #32]	; (8006e28 <UTIL_LPM_EnterLowPower+0x64>)
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8006e0a:	4b07      	ldr	r3, [pc, #28]	; (8006e28 <UTIL_LPM_EnterLowPower+0x64>)
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	4798      	blx	r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f383 8810 	msr	PRIMASK, r3
}
 8006e1a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8006e1c:	bf00      	nop
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	2000028c 	.word	0x2000028c
 8006e28:	080074f8 	.word	0x080074f8
 8006e2c:	20000290 	.word	0x20000290

08006e30 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b090      	sub	sp, #64	; 0x40
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8006e38:	4b73      	ldr	r3, [pc, #460]	; (8007008 <UTIL_SEQ_Run+0x1d8>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8006e3e:	4b72      	ldr	r3, [pc, #456]	; (8007008 <UTIL_SEQ_Run+0x1d8>)
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4013      	ands	r3, r2
 8006e46:	4a70      	ldr	r2, [pc, #448]	; (8007008 <UTIL_SEQ_Run+0x1d8>)
 8006e48:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8006e4a:	4b70      	ldr	r3, [pc, #448]	; (800700c <UTIL_SEQ_Run+0x1dc>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8006e50:	4b6f      	ldr	r3, [pc, #444]	; (8007010 <UTIL_SEQ_Run+0x1e0>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8006e56:	4b6f      	ldr	r3, [pc, #444]	; (8007014 <UTIL_SEQ_Run+0x1e4>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8006e5c:	4b6e      	ldr	r3, [pc, #440]	; (8007018 <UTIL_SEQ_Run+0x1e8>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8006e62:	e08d      	b.n	8006f80 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8006e64:	2300      	movs	r3, #0
 8006e66:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8006e68:	e002      	b.n	8006e70 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8006e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8006e70:	4a6a      	ldr	r2, [pc, #424]	; (800701c <UTIL_SEQ_Run+0x1ec>)
 8006e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e74:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7a:	401a      	ands	r2, r3
 8006e7c:	4b62      	ldr	r3, [pc, #392]	; (8007008 <UTIL_SEQ_Run+0x1d8>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4013      	ands	r3, r2
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d0f1      	beq.n	8006e6a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8006e86:	4a65      	ldr	r2, [pc, #404]	; (800701c <UTIL_SEQ_Run+0x1ec>)
 8006e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e8a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	401a      	ands	r2, r3
 8006e92:	4b5d      	ldr	r3, [pc, #372]	; (8007008 <UTIL_SEQ_Run+0x1d8>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4013      	ands	r3, r2
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8006e9a:	4a60      	ldr	r2, [pc, #384]	; (800701c <UTIL_SEQ_Run+0x1ec>)
 8006e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	4413      	add	r3, r2
 8006ea2:	685a      	ldr	r2, [r3, #4]
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d106      	bne.n	8006eba <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8006eac:	4a5b      	ldr	r2, [pc, #364]	; (800701c <UTIL_SEQ_Run+0x1ec>)
 8006eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb0:	00db      	lsls	r3, r3, #3
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8006eba:	4a58      	ldr	r2, [pc, #352]	; (800701c <UTIL_SEQ_Run+0x1ec>)
 8006ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	4413      	add	r3, r2
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 f9b3 	bl	8007234 <SEQ_BitPosition>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	4b53      	ldr	r3, [pc, #332]	; (8007020 <UTIL_SEQ_Run+0x1f0>)
 8006ed4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8006ed6:	4a51      	ldr	r2, [pc, #324]	; (800701c <UTIL_SEQ_Run+0x1ec>)
 8006ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	4413      	add	r3, r2
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	4b4f      	ldr	r3, [pc, #316]	; (8007020 <UTIL_SEQ_Run+0x1f0>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eea:	43db      	mvns	r3, r3
 8006eec:	401a      	ands	r2, r3
 8006eee:	494b      	ldr	r1, [pc, #300]	; (800701c <UTIL_SEQ_Run+0x1ec>)
 8006ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef2:	00db      	lsls	r3, r3, #3
 8006ef4:	440b      	add	r3, r1
 8006ef6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8006efc:	61bb      	str	r3, [r7, #24]
  return(result);
 8006efe:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006f00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f02:	b672      	cpsid	i
}
 8006f04:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8006f06:	4b46      	ldr	r3, [pc, #280]	; (8007020 <UTIL_SEQ_Run+0x1f0>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f10:	43da      	mvns	r2, r3
 8006f12:	4b3e      	ldr	r3, [pc, #248]	; (800700c <UTIL_SEQ_Run+0x1dc>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4013      	ands	r3, r2
 8006f18:	4a3c      	ldr	r2, [pc, #240]	; (800700c <UTIL_SEQ_Run+0x1dc>)
 8006f1a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f20:	e013      	b.n	8006f4a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8006f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f24:	3b01      	subs	r3, #1
 8006f26:	4a3d      	ldr	r2, [pc, #244]	; (800701c <UTIL_SEQ_Run+0x1ec>)
 8006f28:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8006f2c:	4b3c      	ldr	r3, [pc, #240]	; (8007020 <UTIL_SEQ_Run+0x1f0>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2201      	movs	r2, #1
 8006f32:	fa02 f303 	lsl.w	r3, r2, r3
 8006f36:	43da      	mvns	r2, r3
 8006f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	400a      	ands	r2, r1
 8006f3e:	4937      	ldr	r1, [pc, #220]	; (800701c <UTIL_SEQ_Run+0x1ec>)
 8006f40:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8006f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f46:	3b01      	subs	r3, #1
 8006f48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e8      	bne.n	8006f22 <UTIL_SEQ_Run+0xf2>
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f383 8810 	msr	PRIMASK, r3
}
 8006f5a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8006f5c:	4b30      	ldr	r3, [pc, #192]	; (8007020 <UTIL_SEQ_Run+0x1f0>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a30      	ldr	r2, [pc, #192]	; (8007024 <UTIL_SEQ_Run+0x1f4>)
 8006f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f66:	4798      	blx	r3

    local_taskset = TaskSet;
 8006f68:	4b28      	ldr	r3, [pc, #160]	; (800700c <UTIL_SEQ_Run+0x1dc>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8006f6e:	4b28      	ldr	r3, [pc, #160]	; (8007010 <UTIL_SEQ_Run+0x1e0>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8006f74:	4b27      	ldr	r3, [pc, #156]	; (8007014 <UTIL_SEQ_Run+0x1e4>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8006f7a:	4b27      	ldr	r3, [pc, #156]	; (8007018 <UTIL_SEQ_Run+0x1e8>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8006f80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f84:	401a      	ands	r2, r3
 8006f86:	4b20      	ldr	r3, [pc, #128]	; (8007008 <UTIL_SEQ_Run+0x1d8>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d005      	beq.n	8006f9c <UTIL_SEQ_Run+0x16c>
 8006f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f94:	4013      	ands	r3, r2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f43f af64 	beq.w	8006e64 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8006f9c:	4b20      	ldr	r3, [pc, #128]	; (8007020 <UTIL_SEQ_Run+0x1f0>)
 8006f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8006fa4:	f000 f938 	bl	8007218 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8006fac:	613b      	str	r3, [r7, #16]
  return(result);
 8006fae:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8006fb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8006fb2:	b672      	cpsid	i
}
 8006fb4:	bf00      	nop
  local_taskset = TaskSet;
 8006fb6:	4b15      	ldr	r3, [pc, #84]	; (800700c <UTIL_SEQ_Run+0x1dc>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8006fbc:	4b14      	ldr	r3, [pc, #80]	; (8007010 <UTIL_SEQ_Run+0x1e0>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8006fc2:	4b14      	ldr	r3, [pc, #80]	; (8007014 <UTIL_SEQ_Run+0x1e4>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8006fc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	401a      	ands	r2, r3
 8006fce:	4b0e      	ldr	r3, [pc, #56]	; (8007008 <UTIL_SEQ_Run+0x1d8>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d107      	bne.n	8006fe8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8006fd8:	4b0f      	ldr	r3, [pc, #60]	; (8007018 <UTIL_SEQ_Run+0x1e8>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fde:	4013      	ands	r3, r2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8006fe4:	f7f9 fc9f 	bl	8000926 <UTIL_SEQ_Idle>
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f383 8810 	msr	PRIMASK, r3
}
 8006ff2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8006ff4:	f000 f917 	bl	8007226 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8006ff8:	4a03      	ldr	r2, [pc, #12]	; (8007008 <UTIL_SEQ_Run+0x1d8>)
 8006ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffc:	6013      	str	r3, [r2, #0]

  return;
 8006ffe:	bf00      	nop
}
 8007000:	3740      	adds	r7, #64	; 0x40
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20000020 	.word	0x20000020
 800700c:	20000294 	.word	0x20000294
 8007010:	20000298 	.word	0x20000298
 8007014:	2000001c 	.word	0x2000001c
 8007018:	2000029c 	.word	0x2000029c
 800701c:	20000324 	.word	0x20000324
 8007020:	200002a0 	.word	0x200002a0
 8007024:	200002a4 	.word	0x200002a4

08007028 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b088      	sub	sp, #32
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007034:	f3ef 8310 	mrs	r3, PRIMASK
 8007038:	617b      	str	r3, [r7, #20]
  return(result);
 800703a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800703c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800703e:	b672      	cpsid	i
}
 8007040:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8007042:	68f8      	ldr	r0, [r7, #12]
 8007044:	f000 f8f6 	bl	8007234 <SEQ_BitPosition>
 8007048:	4603      	mov	r3, r0
 800704a:	4619      	mov	r1, r3
 800704c:	4a06      	ldr	r2, [pc, #24]	; (8007068 <UTIL_SEQ_RegTask+0x40>)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	f383 8810 	msr	PRIMASK, r3
}
 800705e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8007060:	bf00      	nop
}
 8007062:	3720      	adds	r7, #32
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	200002a4 	.word	0x200002a4

0800706c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007076:	f3ef 8310 	mrs	r3, PRIMASK
 800707a:	60fb      	str	r3, [r7, #12]
  return(result);
 800707c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800707e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007080:	b672      	cpsid	i
}
 8007082:	bf00      	nop

  TaskSet |= TaskId_bm;
 8007084:	4b0d      	ldr	r3, [pc, #52]	; (80070bc <UTIL_SEQ_SetTask+0x50>)
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4313      	orrs	r3, r2
 800708c:	4a0b      	ldr	r2, [pc, #44]	; (80070bc <UTIL_SEQ_SetTask+0x50>)
 800708e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8007090:	4a0b      	ldr	r2, [pc, #44]	; (80070c0 <UTIL_SEQ_SetTask+0x54>)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	431a      	orrs	r2, r3
 800709c:	4908      	ldr	r1, [pc, #32]	; (80070c0 <UTIL_SEQ_SetTask+0x54>)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	f383 8810 	msr	PRIMASK, r3
}
 80070ae:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80070b0:	bf00      	nop
}
 80070b2:	371c      	adds	r7, #28
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	20000294 	.word	0x20000294
 80070c0:	20000324 	.word	0x20000324

080070c4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070cc:	f3ef 8310 	mrs	r3, PRIMASK
 80070d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80070d2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80070d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80070d6:	b672      	cpsid	i
}
 80070d8:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	43da      	mvns	r2, r3
 80070de:	4b08      	ldr	r3, [pc, #32]	; (8007100 <UTIL_SEQ_PauseTask+0x3c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4013      	ands	r3, r2
 80070e4:	4a06      	ldr	r2, [pc, #24]	; (8007100 <UTIL_SEQ_PauseTask+0x3c>)
 80070e6:	6013      	str	r3, [r2, #0]
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f383 8810 	msr	PRIMASK, r3
}
 80070f2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80070f4:	bf00      	nop
}
 80070f6:	371c      	adds	r7, #28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	2000001c 	.word	0x2000001c

08007104 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800710c:	f3ef 8310 	mrs	r3, PRIMASK
 8007110:	60fb      	str	r3, [r7, #12]
  return(result);
 8007112:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007114:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007116:	b672      	cpsid	i
}
 8007118:	bf00      	nop

  TaskMask |= TaskId_bm;
 800711a:	4b09      	ldr	r3, [pc, #36]	; (8007140 <UTIL_SEQ_ResumeTask+0x3c>)
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4313      	orrs	r3, r2
 8007122:	4a07      	ldr	r2, [pc, #28]	; (8007140 <UTIL_SEQ_ResumeTask+0x3c>)
 8007124:	6013      	str	r3, [r2, #0]
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f383 8810 	msr	PRIMASK, r3
}
 8007130:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007132:	bf00      	nop
}
 8007134:	371c      	adds	r7, #28
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	2000001c 	.word	0x2000001c

08007144 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800714c:	f3ef 8310 	mrs	r3, PRIMASK
 8007150:	60fb      	str	r3, [r7, #12]
  return(result);
 8007152:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007154:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007156:	b672      	cpsid	i
}
 8007158:	bf00      	nop

  EvtSet |= EvtId_bm;
 800715a:	4b09      	ldr	r3, [pc, #36]	; (8007180 <UTIL_SEQ_SetEvt+0x3c>)
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4313      	orrs	r3, r2
 8007162:	4a07      	ldr	r2, [pc, #28]	; (8007180 <UTIL_SEQ_SetEvt+0x3c>)
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	f383 8810 	msr	PRIMASK, r3
}
 8007170:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007172:	bf00      	nop
}
 8007174:	371c      	adds	r7, #28
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	20000298 	.word	0x20000298

08007184 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b088      	sub	sp, #32
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800718c:	4b1f      	ldr	r3, [pc, #124]	; (800720c <UTIL_SEQ_WaitEvt+0x88>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8007192:	4b1e      	ldr	r3, [pc, #120]	; (800720c <UTIL_SEQ_WaitEvt+0x88>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719a:	d102      	bne.n	80071a2 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800719c:	2300      	movs	r3, #0
 800719e:	61fb      	str	r3, [r7, #28]
 80071a0:	e005      	b.n	80071ae <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80071a2:	4b1a      	ldr	r3, [pc, #104]	; (800720c <UTIL_SEQ_WaitEvt+0x88>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2201      	movs	r2, #1
 80071a8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ac:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80071ae:	4b18      	ldr	r3, [pc, #96]	; (8007210 <UTIL_SEQ_WaitEvt+0x8c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80071b4:	4a16      	ldr	r2, [pc, #88]	; (8007210 <UTIL_SEQ_WaitEvt+0x8c>)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80071ba:	e003      	b.n	80071c4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80071bc:	6879      	ldr	r1, [r7, #4]
 80071be:	69f8      	ldr	r0, [r7, #28]
 80071c0:	f7f9 fbb7 	bl	8000932 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80071c4:	4b13      	ldr	r3, [pc, #76]	; (8007214 <UTIL_SEQ_WaitEvt+0x90>)
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4013      	ands	r3, r2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d0f5      	beq.n	80071bc <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80071d0:	4a0e      	ldr	r2, [pc, #56]	; (800720c <UTIL_SEQ_WaitEvt+0x88>)
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071d6:	f3ef 8310 	mrs	r3, PRIMASK
 80071da:	60bb      	str	r3, [r7, #8]
  return(result);
 80071dc:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80071de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80071e0:	b672      	cpsid	i
}
 80071e2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	43da      	mvns	r2, r3
 80071e8:	4b0a      	ldr	r3, [pc, #40]	; (8007214 <UTIL_SEQ_WaitEvt+0x90>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4013      	ands	r3, r2
 80071ee:	4a09      	ldr	r2, [pc, #36]	; (8007214 <UTIL_SEQ_WaitEvt+0x90>)
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f383 8810 	msr	PRIMASK, r3
}
 80071fc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80071fe:	4a04      	ldr	r2, [pc, #16]	; (8007210 <UTIL_SEQ_WaitEvt+0x8c>)
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	6013      	str	r3, [r2, #0]
  return;
 8007204:	bf00      	nop
}
 8007206:	3720      	adds	r7, #32
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	200002a0 	.word	0x200002a0
 8007210:	2000029c 	.word	0x2000029c
 8007214:	20000298 	.word	0x20000298

08007218 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8007218:	b480      	push	{r7}
 800721a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800721c:	bf00      	nop
}
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8007226:	b480      	push	{r7}
 8007228:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800722a:	bf00      	nop
}
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800723c:	2300      	movs	r3, #0
 800723e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	0c1b      	lsrs	r3, r3, #16
 8007248:	041b      	lsls	r3, r3, #16
 800724a:	2b00      	cmp	r3, #0
 800724c:	d104      	bne.n	8007258 <SEQ_BitPosition+0x24>
 800724e:	2310      	movs	r3, #16
 8007250:	73fb      	strb	r3, [r7, #15]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	041b      	lsls	r3, r3, #16
 8007256:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d105      	bne.n	800726e <SEQ_BitPosition+0x3a>
 8007262:	7bfb      	ldrb	r3, [r7, #15]
 8007264:	3308      	adds	r3, #8
 8007266:	73fb      	strb	r3, [r7, #15]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	021b      	lsls	r3, r3, #8
 800726c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d105      	bne.n	8007284 <SEQ_BitPosition+0x50>
 8007278:	7bfb      	ldrb	r3, [r7, #15]
 800727a:	3304      	adds	r3, #4
 800727c:	73fb      	strb	r3, [r7, #15]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	011b      	lsls	r3, r3, #4
 8007282:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	0f1b      	lsrs	r3, r3, #28
 8007288:	4a07      	ldr	r2, [pc, #28]	; (80072a8 <SEQ_BitPosition+0x74>)
 800728a:	5cd2      	ldrb	r2, [r2, r3]
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	4413      	add	r3, r2
 8007290:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8007292:	7bfb      	ldrb	r3, [r7, #15]
 8007294:	f1c3 031f 	rsb	r3, r3, #31
 8007298:	b2db      	uxtb	r3, r3
}
 800729a:	4618      	mov	r0, r3
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	080075b8 	.word	0x080075b8

080072ac <__libc_init_array>:
 80072ac:	b570      	push	{r4, r5, r6, lr}
 80072ae:	4d0d      	ldr	r5, [pc, #52]	; (80072e4 <__libc_init_array+0x38>)
 80072b0:	4c0d      	ldr	r4, [pc, #52]	; (80072e8 <__libc_init_array+0x3c>)
 80072b2:	1b64      	subs	r4, r4, r5
 80072b4:	10a4      	asrs	r4, r4, #2
 80072b6:	2600      	movs	r6, #0
 80072b8:	42a6      	cmp	r6, r4
 80072ba:	d109      	bne.n	80072d0 <__libc_init_array+0x24>
 80072bc:	4d0b      	ldr	r5, [pc, #44]	; (80072ec <__libc_init_array+0x40>)
 80072be:	4c0c      	ldr	r4, [pc, #48]	; (80072f0 <__libc_init_array+0x44>)
 80072c0:	f000 f82e 	bl	8007320 <_init>
 80072c4:	1b64      	subs	r4, r4, r5
 80072c6:	10a4      	asrs	r4, r4, #2
 80072c8:	2600      	movs	r6, #0
 80072ca:	42a6      	cmp	r6, r4
 80072cc:	d105      	bne.n	80072da <__libc_init_array+0x2e>
 80072ce:	bd70      	pop	{r4, r5, r6, pc}
 80072d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072d4:	4798      	blx	r3
 80072d6:	3601      	adds	r6, #1
 80072d8:	e7ee      	b.n	80072b8 <__libc_init_array+0xc>
 80072da:	f855 3b04 	ldr.w	r3, [r5], #4
 80072de:	4798      	blx	r3
 80072e0:	3601      	adds	r6, #1
 80072e2:	e7f2      	b.n	80072ca <__libc_init_array+0x1e>
 80072e4:	080075c8 	.word	0x080075c8
 80072e8:	080075c8 	.word	0x080075c8
 80072ec:	080075c8 	.word	0x080075c8
 80072f0:	080075cc 	.word	0x080075cc

080072f4 <memcpy>:
 80072f4:	440a      	add	r2, r1
 80072f6:	4291      	cmp	r1, r2
 80072f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80072fc:	d100      	bne.n	8007300 <memcpy+0xc>
 80072fe:	4770      	bx	lr
 8007300:	b510      	push	{r4, lr}
 8007302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007306:	f803 4f01 	strb.w	r4, [r3, #1]!
 800730a:	4291      	cmp	r1, r2
 800730c:	d1f9      	bne.n	8007302 <memcpy+0xe>
 800730e:	bd10      	pop	{r4, pc}

08007310 <memset>:
 8007310:	4402      	add	r2, r0
 8007312:	4603      	mov	r3, r0
 8007314:	4293      	cmp	r3, r2
 8007316:	d100      	bne.n	800731a <memset+0xa>
 8007318:	4770      	bx	lr
 800731a:	f803 1b01 	strb.w	r1, [r3], #1
 800731e:	e7f9      	b.n	8007314 <memset+0x4>

08007320 <_init>:
 8007320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007322:	bf00      	nop
 8007324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007326:	bc08      	pop	{r3}
 8007328:	469e      	mov	lr, r3
 800732a:	4770      	bx	lr

0800732c <_fini>:
 800732c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732e:	bf00      	nop
 8007330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007332:	bc08      	pop	{r3}
 8007334:	469e      	mov	lr, r3
 8007336:	4770      	bx	lr
