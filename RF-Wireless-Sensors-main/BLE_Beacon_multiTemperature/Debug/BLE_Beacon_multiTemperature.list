
BLE_Beacon_multiTemperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007384  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  080074c0  080074c0  000174c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800776c  0800776c  0001776c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007770  08007770  00017770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000004  08007774  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000024  08007794  00020024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200000c0  0800782d  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000f8  08007862  000200f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  2000010c  08007873  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08007873  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 15 .debug_info   0002b748  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005f9f  00000000  00000000  0004b881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000026b0  00000000  00000000  00051820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000023e8  00000000  00000000  00053ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000274ce  00000000  00000000  000562b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00029f6e  00000000  00000000  0007d786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000cfc9a  00000000  00000000  000a76f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  0017738e  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000a070  00000000  00000000  001773e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000010c 	.word	0x2000010c
 8000158:	00000000 	.word	0x00000000
 800015c:	080074a8 	.word	0x080074a8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000110 	.word	0x20000110
 8000178:	080074a8 	.word	0x080074a8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <TMP117_get_Temperature>:
   @Description   Function gives to us ambient temperature
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Return value  Float
 */
uint16_t TMP117_get_Temperature             (I2C_HandleTypeDef i2c, uint8_t TMP117_DeviceID)
{
 800018c:	b084      	sub	sp, #16
 800018e:	b580      	push	{r7, lr}
 8000190:	b082      	sub	sp, #8
 8000192:	af02      	add	r7, sp, #8
 8000194:	f107 0c08 	add.w	ip, r7, #8
 8000198:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      buf[0]=TMP117_TemperatureRegister;
 800019c:	4b14      	ldr	r3, [pc, #80]	; (80001f0 <TMP117_get_Temperature+0x64>)
 800019e:	2200      	movs	r2, #0
 80001a0:	701a      	strb	r2, [r3, #0]

      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,1,100);
 80001a2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80001a6:	b299      	uxth	r1, r3
 80001a8:	2364      	movs	r3, #100	; 0x64
 80001aa:	9300      	str	r3, [sp, #0]
 80001ac:	2301      	movs	r3, #1
 80001ae:	4a10      	ldr	r2, [pc, #64]	; (80001f0 <TMP117_get_Temperature+0x64>)
 80001b0:	f107 0008 	add.w	r0, r7, #8
 80001b4:	f002 f838 	bl	8002228 <HAL_I2C_Master_Transmit>
      HAL_I2C_Master_Receive(&i2c,TMP117_DeviceID,buf,2,100);
 80001b8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80001bc:	b299      	uxth	r1, r3
 80001be:	2364      	movs	r3, #100	; 0x64
 80001c0:	9300      	str	r3, [sp, #0]
 80001c2:	2302      	movs	r3, #2
 80001c4:	4a0a      	ldr	r2, [pc, #40]	; (80001f0 <TMP117_get_Temperature+0x64>)
 80001c6:	f107 0008 	add.w	r0, r7, #8
 80001ca:	f002 f921 	bl	8002410 <HAL_I2C_Master_Receive>

      return (((buf[0]<<8)|buf[1]));
 80001ce:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <TMP117_get_Temperature+0x64>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	021b      	lsls	r3, r3, #8
 80001d4:	b21a      	sxth	r2, r3
 80001d6:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <TMP117_get_Temperature+0x64>)
 80001d8:	785b      	ldrb	r3, [r3, #1]
 80001da:	b21b      	sxth	r3, r3
 80001dc:	4313      	orrs	r3, r2
 80001de:	b21b      	sxth	r3, r3
 80001e0:	b29b      	uxth	r3, r3
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	46bd      	mov	sp, r7
 80001e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80001ea:	b004      	add	sp, #16
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	20000128 	.word	0x20000128

080001f4 <TMP117_set_Configuration>:
                  uint8_t first     ->  [15:8]
                  uint8_t second    ->  [7:0]
   @Return value  void
 */
void TMP117_set_Configuration            (I2C_HandleTypeDef i2c,uint8_t first,uint8_t second, uint8_t TMP117_DeviceID)
{
 80001f4:	b084      	sub	sp, #16
 80001f6:	b580      	push	{r7, lr}
 80001f8:	b082      	sub	sp, #8
 80001fa:	af02      	add	r7, sp, #8
 80001fc:	f107 0c08 	add.w	ip, r7, #8
 8000200:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      buf[0]=TMP117_ConfigurationRegister;
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <TMP117_set_Configuration+0x48>)
 8000206:	2201      	movs	r2, #1
 8000208:	701a      	strb	r2, [r3, #0]
      buf[1]=first;
 800020a:	4a0c      	ldr	r2, [pc, #48]	; (800023c <TMP117_set_Configuration+0x48>)
 800020c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000210:	7053      	strb	r3, [r2, #1]
      buf[2]=second;
 8000212:	4a0a      	ldr	r2, [pc, #40]	; (800023c <TMP117_set_Configuration+0x48>)
 8000214:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000218:	7093      	strb	r3, [r2, #2]
      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,3,100);
 800021a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800021e:	b299      	uxth	r1, r3
 8000220:	2364      	movs	r3, #100	; 0x64
 8000222:	9300      	str	r3, [sp, #0]
 8000224:	2303      	movs	r3, #3
 8000226:	4a05      	ldr	r2, [pc, #20]	; (800023c <TMP117_set_Configuration+0x48>)
 8000228:	f107 0008 	add.w	r0, r7, #8
 800022c:	f001 fffc 	bl	8002228 <HAL_I2C_Master_Transmit>
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr
 800023c:	2000012c 	.word	0x2000012c

08000240 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000240:	b5b0      	push	{r4, r5, r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000246:	4b15      	ldr	r3, [pc, #84]	; (800029c <APPD_EnableCPU2+0x5c>)
 8000248:	881a      	ldrh	r2, [r3, #0]
 800024a:	4b15      	ldr	r3, [pc, #84]	; (80002a0 <APPD_EnableCPU2+0x60>)
 800024c:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800024e:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <APPD_EnableCPU2+0x64>)
 8000250:	881a      	ldrh	r2, [r3, #0]
 8000252:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <APPD_EnableCPU2+0x60>)
 8000254:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <APPD_EnableCPU2+0x68>)
 8000258:	881a      	ldrh	r2, [r3, #0]
 800025a:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <APPD_EnableCPU2+0x60>)
 800025c:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 800025e:	4b13      	ldr	r3, [pc, #76]	; (80002ac <APPD_EnableCPU2+0x6c>)
 8000260:	881a      	ldrh	r2, [r3, #0]
 8000262:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <APPD_EnableCPU2+0x60>)
 8000264:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 8000266:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <APPD_EnableCPU2+0x70>)
 8000268:	881a      	ldrh	r2, [r3, #0]
 800026a:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <APPD_EnableCPU2+0x60>)
 800026c:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800026e:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <APPD_EnableCPU2+0x74>)
 8000270:	1d3c      	adds	r4, r7, #4
 8000272:	461d      	mov	r5, r3
 8000274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000278:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800027c:	c403      	stmia	r4!, {r0, r1}
 800027e:	8022      	strh	r2, [r4, #0]
 8000280:	3402      	adds	r4, #2
 8000282:	0c13      	lsrs	r3, r2, #16
 8000284:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000286:	f005 fe5d 	bl	8005f44 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f005 f8f8 	bl	8005482 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000292:	bf00      	nop
}
 8000294:	3720      	adds	r7, #32
 8000296:	46bd      	mov	sp, r7
 8000298:	bdb0      	pop	{r4, r5, r7, pc}
 800029a:	bf00      	nop
 800029c:	20000004 	.word	0x20000004
 80002a0:	200301e8 	.word	0x200301e8
 80002a4:	20000006 	.word	0x20000006
 80002a8:	20000008 	.word	0x20000008
 80002ac:	2000000a 	.word	0x2000000a
 80002b0:	2000000c 	.word	0x2000000c
 80002b4:	080074c0 	.word	0x080074c0

080002b8 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <LL_PWR_SMPS_Enable+0x1c>)
 80002be:	69db      	ldr	r3, [r3, #28]
 80002c0:	4a04      	ldr	r2, [pc, #16]	; (80002d4 <LL_PWR_SMPS_Enable+0x1c>)
 80002c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002c6:	61d3      	str	r3, [r2, #28]
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	58000400 	.word	0x58000400

080002d8 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80002e2:	69db      	ldr	r3, [r3, #28]
 80002e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80002e8:	4904      	ldr	r1, [pc, #16]	; (80002fc <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	61cb      	str	r3, [r1, #28]
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	58000400 	.word	0x58000400

08000300 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8000300:	b480      	push	{r7}
 8000302:	b087      	sub	sp, #28
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	0a1b      	lsrs	r3, r3, #8
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if(OutputVoltageLevel_calibration == 0UL)
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d108      	bne.n	800032c <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */
    
    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 800031a:	4b15      	ldr	r3, [pc, #84]	; (8000370 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	f023 020f 	bic.w	r2, r3, #15
 8000322:	4913      	ldr	r1, [pc, #76]	; (8000370 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4313      	orrs	r3, r2
 8000328:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 800032a:	e019      	b.n	8000360 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	3b06      	subs	r3, #6
 8000330:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	693a      	ldr	r2, [r7, #16]
 8000336:	4413      	add	r3, r2
 8000338:	617b      	str	r3, [r7, #20]
    if(OutputVoltageLevelTrimmed < 0)
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	2b00      	cmp	r3, #0
 800033e:	da02      	bge.n	8000346 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	e004      	b.n	8000350 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if(OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	2b0f      	cmp	r3, #15
 800034a:	dd01      	ble.n	8000350 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 800034c:	230f      	movs	r3, #15
 800034e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000352:	69db      	ldr	r3, [r3, #28]
 8000354:	f023 020f 	bic.w	r2, r3, #15
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	4905      	ldr	r1, [pc, #20]	; (8000370 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800035c:	4313      	orrs	r3, r2
 800035e:	61cb      	str	r3, [r1, #28]
}
 8000360:	bf00      	nop
 8000362:	371c      	adds	r7, #28
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	1fff7558 	.word	0x1fff7558
 8000370:	58000400 	.word	0x58000400

08000374 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <LL_C2_PWR_SetPowerMode+0x28>)
 800037e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000382:	f023 0207 	bic.w	r2, r3, #7
 8000386:	4905      	ldr	r1, [pc, #20]	; (800039c <LL_C2_PWR_SetPowerMode+0x28>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4313      	orrs	r3, r2
 800038c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	58000400 	.word	0x58000400

080003a0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80003aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80003ae:	4905      	ldr	r1, [pc, #20]	; (80003c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4313      	orrs	r3, r2
 80003b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80003b8:	bf00      	nop
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	58000800 	.word	0x58000800

080003c8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80003d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003d4:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80003d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80003da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80003e2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	021b      	lsls	r3, r3, #8
 80003ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003ee:	4313      	orrs	r3, r2
 80003f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80003f4:	bf00      	nop
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	cafecafe 	.word	0xcafecafe

08000404 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800040c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4313      	orrs	r3, r2
 800041e:	608b      	str	r3, [r1, #8]
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr

0800042c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000438:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800043c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800045a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800045e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800047c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000480:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000484:	d101      	bne.n	800048a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000486:	2301      	movs	r3, #1
 8000488:	e000      	b.n	800048c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800048a:	2300      	movs	r3, #0
}
 800048c:	4618      	mov	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr

08000496 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800049a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80004a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80004aa:	d101      	bne.n	80004b0 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80004ac:	2301      	movs	r3, #1
 80004ae:	e000      	b.n	80004b2 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80004b0:	2300      	movs	r3, #0
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80004c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80004ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4313      	orrs	r3, r2
 80004d2:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80004d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004e0:	68fb      	ldr	r3, [r7, #12]
}
 80004e2:	bf00      	nop
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
	...

080004f0 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <LL_DBGMCU_GetRevisionID+0x18>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	0c1b      	lsrs	r3, r3, #16
 80004fa:	b29b      	uxth	r3, r3
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	e0042000 	.word	0xe0042000

0800050c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	685a      	ldr	r2, [r3, #4]
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	041b      	lsls	r3, r3, #16
 800051e:	431a      	orrs	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	605a      	str	r2, [r3, #4]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	685a      	ldr	r2, [r3, #4]
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	431a      	orrs	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	605a      	str	r2, [r3, #4]
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
 800055a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	695a      	ldr	r2, [r3, #20]
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	041b      	lsls	r3, r3, #16
 8000564:	431a      	orrs	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	615a      	str	r2, [r3, #20]
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	695a      	ldr	r2, [r3, #20]
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	431a      	orrs	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	615a      	str	r2, [r3, #20]
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	683a      	ldr	r2, [r7, #0]
 80005a6:	609a      	str	r2, [r3, #8]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	619a      	str	r2, [r3, #24]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	22ff      	movs	r2, #255	; 0xff
 80005dc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b083      	sub	sp, #12
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	22ca      	movs	r2, #202	; 0xca
 80005f6:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2253      	movs	r2, #83	; 0x53
 80005fc:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr

0800060a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800060a:	b480      	push	{r7}
 800060c:	b083      	sub	sp, #12
 800060e:	af00      	add	r7, sp, #0
 8000610:	6078      	str	r0, [r7, #4]
 8000612:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	f023 0207 	bic.w	r2, r3, #7
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	431a      	orrs	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	609a      	str	r2, [r3, #8]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <MX_APPE_Config+0x18>)
 8000636:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800063a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800063c:	f000 f829 	bl	8000692 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000640:	f000 f868 	bl	8000714 <Config_HSE>

  return;
 8000644:	bf00      	nop
}
 8000646:	bd80      	pop	{r7, pc}
 8000648:	58004000 	.word	0x58004000

0800064c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000650:	f000 f874 	bl	800073c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000654:	f000 f88c 	bl	8000770 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000658:	4903      	ldr	r1, [pc, #12]	; (8000668 <MX_APPE_Init+0x1c>)
 800065a:	2000      	movs	r0, #0
 800065c:	f000 f9be 	bl	80009dc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000660:	f000 f896 	bl	8000790 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000664:	bf00      	nop
}
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200001cc 	.word	0x200001cc

0800066c <Init_Smps>:

void Init_Smps(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8000670:	2000      	movs	r0, #0
 8000672:	f7ff fe31 	bl	80002d8 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 8000676:	2004      	movs	r0, #4
 8000678:	f7ff fe42 	bl	8000300 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 800067c:	f7ff fe1c 	bl	80002b8 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 8000680:	bf00      	nop
}
 8000682:	bd80      	pop	{r7, pc}

08000684 <Init_Exti>:

void Init_Exti(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000688:	2050      	movs	r0, #80	; 0x50
 800068a:	f7ff fe89 	bl	80003a0 <LL_EXTI_EnableIT_32_63>

  return;
 800068e:	bf00      	nop
}
 8000690:	bd80      	pop	{r7, pc}

08000692 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8000696:	f000 f804 	bl	80006a2 <Reset_BackupDomain>

  Reset_IPCC();
 800069a:	f000 f819 	bl	80006d0 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800069e:	bf00      	nop
}
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80006a6:	f7ff fee3 	bl	8000470 <LL_RCC_IsActiveFlag_PINRST>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d00d      	beq.n	80006cc <Reset_BackupDomain+0x2a>
 80006b0:	f7ff fef1 	bl	8000496 <LL_RCC_IsActiveFlag_SFTRST>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d108      	bne.n	80006cc <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80006ba:	f002 fb35 	bl	8002d28 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80006be:	f002 fb33 	bl	8002d28 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80006c2:	f7ff feb3 	bl	800042c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80006c6:	f7ff fec2 	bl	800044e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
}
 80006ce:	bd80      	pop	{r7, pc}

080006d0 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80006d4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80006d8:	f7ff fef0 	bl	80004bc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80006dc:	213f      	movs	r1, #63	; 0x3f
 80006de:	480c      	ldr	r0, [pc, #48]	; (8000710 <Reset_IPCC+0x40>)
 80006e0:	f7ff ff5a 	bl	8000598 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80006e4:	213f      	movs	r1, #63	; 0x3f
 80006e6:	480a      	ldr	r0, [pc, #40]	; (8000710 <Reset_IPCC+0x40>)
 80006e8:	f7ff ff64 	bl	80005b4 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80006ec:	213f      	movs	r1, #63	; 0x3f
 80006ee:	4808      	ldr	r0, [pc, #32]	; (8000710 <Reset_IPCC+0x40>)
 80006f0:	f7ff ff0c 	bl	800050c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80006f4:	213f      	movs	r1, #63	; 0x3f
 80006f6:	4806      	ldr	r0, [pc, #24]	; (8000710 <Reset_IPCC+0x40>)
 80006f8:	f7ff ff2b 	bl	8000552 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80006fc:	213f      	movs	r1, #63	; 0x3f
 80006fe:	4804      	ldr	r0, [pc, #16]	; (8000710 <Reset_IPCC+0x40>)
 8000700:	f7ff ff16 	bl	8000530 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000704:	213f      	movs	r1, #63	; 0x3f
 8000706:	4802      	ldr	r0, [pc, #8]	; (8000710 <Reset_IPCC+0x40>)
 8000708:	f7ff ff35 	bl	8000576 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800070c:	bf00      	nop
}
 800070e:	bd80      	pop	{r7, pc}
 8000710:	58000c00 	.word	0x58000c00

08000714 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800071a:	2000      	movs	r0, #0
 800071c:	f005 fc9e 	bl	800605c <OTP_Read>
 8000720:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d005      	beq.n	8000734 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	799b      	ldrb	r3, [r3, #6]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fe4b 	bl	80003c8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000732:	bf00      	nop
 8000734:	bf00      	nop
}
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <System_Init>:

static void System_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  Init_Smps();
 8000740:	f7ff ff94 	bl	800066c <Init_Smps>

  Init_Exti();
 8000744:	f7ff ff9e 	bl	8000684 <Init_Exti>

  Init_Rtc();
 8000748:	f000 f802 	bl	8000750 <Init_Rtc>

  return;
 800074c:	bf00      	nop
}
 800074e:	bd80      	pop	{r7, pc}

08000750 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <Init_Rtc+0x1c>)
 8000756:	f7ff ff48 	bl	80005ea <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800075a:	2100      	movs	r1, #0
 800075c:	4803      	ldr	r0, [pc, #12]	; (800076c <Init_Rtc+0x1c>)
 800075e:	f7ff ff54 	bl	800060a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000762:	4802      	ldr	r0, [pc, #8]	; (800076c <Init_Rtc+0x1c>)
 8000764:	f7ff ff34 	bl	80005d0 <LL_RTC_EnableWriteProtection>

  return;
 8000768:	bf00      	nop
}
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40002800 	.word	0x40002800

08000770 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000774:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000778:	f7ff fe44 	bl	8000404 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800077c:	f006 fba4 	bl	8006ec8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000780:	2004      	movs	r0, #4
 8000782:	f7ff fdf7 	bl	8000374 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 8000786:	f002 fb07 	bl	8002d98 <HAL_PWREx_EnableSRAMRetention>

  return;
 800078a:	bf00      	nop
}
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000796:	f005 fa1f 	bl	8005bd8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800079a:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <appe_Tl_Init+0x50>)
 800079c:	2100      	movs	r1, #0
 800079e:	2010      	movs	r0, #16
 80007a0:	f006 fd06 	bl	80071b0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <appe_Tl_Init+0x54>)
 80007a6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <appe_Tl_Init+0x58>)
 80007aa:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80007ac:	463b      	mov	r3, r7
 80007ae:	4619      	mov	r1, r3
 80007b0:	480e      	ldr	r0, [pc, #56]	; (80007ec <appe_Tl_Init+0x5c>)
 80007b2:	f005 f8d7 	bl	8005964 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <appe_Tl_Init+0x60>)
 80007b8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <appe_Tl_Init+0x64>)
 80007bc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <appe_Tl_Init+0x68>)
 80007c0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80007c2:	f240 533c 	movw	r3, #1340	; 0x53c
 80007c6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	4618      	mov	r0, r3
 80007ce:	f005 fb45 	bl	8005e5c <TL_MM_Init>

  TL_Enable();
 80007d2:	f005 f9fb 	bl	8005bcc <TL_Enable>

  return;
 80007d6:	bf00      	nop
}
 80007d8:	3720      	adds	r7, #32
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	0800599d 	.word	0x0800599d
 80007e4:	20030734 	.word	0x20030734
 80007e8:	080007fd 	.word	0x080007fd
 80007ec:	08000815 	.word	0x08000815
 80007f0:	2003094c 	.word	0x2003094c
 80007f4:	20030840 	.word	0x20030840
 80007f8:	200301f8 	.word	0x200301f8

080007fc <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000806:	bf00      	nop
}
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	330b      	adds	r3, #11
 8000822:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	b29b      	uxth	r3, r3
 800082a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800082e:	2b07      	cmp	r3, #7
 8000830:	d81f      	bhi.n	8000872 <APPE_SysUserEvtRx+0x5e>
 8000832:	a201      	add	r2, pc, #4	; (adr r2, 8000838 <APPE_SysUserEvtRx+0x24>)
 8000834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000838:	08000859 	.word	0x08000859
 800083c:	0800086b 	.word	0x0800086b
 8000840:	08000873 	.word	0x08000873
 8000844:	08000873 	.word	0x08000873
 8000848:	08000873 	.word	0x08000873
 800084c:	08000873 	.word	0x08000873
 8000850:	08000873 	.word	0x08000873
 8000854:	08000873 	.word	0x08000873
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	4618      	mov	r0, r3
 800085e:	f004 fe3d 	bl	80054dc <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f000 f81b 	bl	800089e <APPE_SysEvtReadyProcessing>
    break;
 8000868:	e004      	b.n	8000874 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f000 f806 	bl	800087c <APPE_SysEvtError>
    break;
 8000870:	e000      	b.n	8000874 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000872:	bf00      	nop
  }

  return;
 8000874:	bf00      	nop
}
 8000876:	3720      	adds	r7, #32
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	330b      	adds	r3, #11
 800088a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	3302      	adds	r3, #2
 8000890:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000892:	bf00      	nop
}
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	b08a      	sub	sp, #40	; 0x28
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	330b      	adds	r3, #11
 80008be:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80008c0:	6a3b      	ldr	r3, [r7, #32]
 80008c2:	3302      	adds	r3, #2
 80008c4:	61fb      	str	r3, [r7, #28]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d117      	bne.n	80008fe <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80008ce:	f7ff fcb7 	bl	8000240 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80008d2:	230d      	movs	r3, #13
 80008d4:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80008d6:	237f      	movs	r3, #127	; 0x7f
 80008d8:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80008da:	f7ff fe09 	bl	80004f0 <LL_DBGMCU_GetRevisionID>
 80008de:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = RevisionID;
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	4618      	mov	r0, r3
 80008ec:	f004 fde0 	bl	80054b0 <SHCI_C2_Config>

    APP_BLE_Init();
 80008f0:	f005 fcd4 	bl	800629c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80008f4:	2100      	movs	r1, #0
 80008f6:	2001      	movs	r0, #1
 80008f8:	f006 faf8 	bl	8006eec <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80008fc:	e007      	b.n	800090e <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d103      	bne.n	800090e <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
  return;
 800090c:	bf00      	nop
 800090e:	bf00      	nop
}
 8000910:	3728      	adds	r7, #40	; 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800091a:	f04f 30ff 	mov.w	r0, #4294967295
 800091e:	f006 fb4b 	bl	8006fb8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}

08000926 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 800092a:	f006 fb0f 	bl	8006f4c <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800092e:	bf00      	nop
}
 8000930:	bd80      	pop	{r7, pc}

08000932 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	b082      	sub	sp, #8
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
 800093a:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800093c:	f04f 30ff 	mov.w	r0, #4294967295
 8000940:	f006 fb3a 	bl	8006fb8 <UTIL_SEQ_Run>

  return;
 8000944:	bf00      	nop
}
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000954:	2100      	movs	r1, #0
 8000956:	2010      	movs	r0, #16
 8000958:	f006 fc4c 	bl	80071f4 <UTIL_SEQ_SetTask>
  return;
 800095c:	bf00      	nop
}
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800096c:	2002      	movs	r0, #2
 800096e:	f006 fcad 	bl	80072cc <UTIL_SEQ_SetEvt>
  return;
 8000972:	bf00      	nop
}
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b082      	sub	sp, #8
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000982:	2002      	movs	r0, #2
 8000984:	f006 fcc2 	bl	800730c <UTIL_SEQ_WaitEvt>
  return;
 8000988:	bf00      	nop
}
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <LL_EXTI_EnableIT_0_31>:
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <LL_EXTI_EnableIT_0_31+0x24>)
 800099a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800099e:	4905      	ldr	r1, [pc, #20]	; (80009b4 <LL_EXTI_EnableIT_0_31+0x24>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	58000800 	.word	0x58000800

080009b8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4904      	ldr	r1, [pc, #16]	; (80009d8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	600b      	str	r3, [r1, #0]

}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	58000800 	.word	0x58000800

080009dc <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	6039      	str	r1, [r7, #0]
 80009e6:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 80009e8:	4a64      	ldr	r2, [pc, #400]	; (8000b7c <HW_TS_Init+0x1a0>)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80009ee:	4b63      	ldr	r3, [pc, #396]	; (8000b7c <HW_TS_Init+0x1a0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	22ca      	movs	r2, #202	; 0xca
 80009f6:	625a      	str	r2, [r3, #36]	; 0x24
 80009f8:	4b60      	ldr	r3, [pc, #384]	; (8000b7c <HW_TS_Init+0x1a0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2253      	movs	r2, #83	; 0x53
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000a02:	4b5f      	ldr	r3, [pc, #380]	; (8000b80 <HW_TS_Init+0x1a4>)
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	4a5e      	ldr	r2, [pc, #376]	; (8000b80 <HW_TS_Init+0x1a4>)
 8000a08:	f043 0320 	orr.w	r3, r3, #32
 8000a0c:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000a0e:	4b5c      	ldr	r3, [pc, #368]	; (8000b80 <HW_TS_Init+0x1a4>)
 8000a10:	689b      	ldr	r3, [r3, #8]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	f003 0307 	and.w	r3, r3, #7
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	f1c3 0304 	rsb	r3, r3, #4
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	4b58      	ldr	r3, [pc, #352]	; (8000b84 <HW_TS_Init+0x1a8>)
 8000a22:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000a24:	4b56      	ldr	r3, [pc, #344]	; (8000b80 <HW_TS_Init+0x1a4>)
 8000a26:	691b      	ldr	r3, [r3, #16]
 8000a28:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000a2c:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000a30:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	fa92 f2a2 	rbit	r2, r2
 8000a38:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000a3e:	697a      	ldr	r2, [r7, #20]
 8000a40:	2a00      	cmp	r2, #0
 8000a42:	d101      	bne.n	8000a48 <HW_TS_Init+0x6c>
  {
    return 32U;
 8000a44:	2220      	movs	r2, #32
 8000a46:	e003      	b.n	8000a50 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	40d3      	lsrs	r3, r2
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	3301      	adds	r3, #1
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	4b4b      	ldr	r3, [pc, #300]	; (8000b88 <HW_TS_Init+0x1ac>)
 8000a5a:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000a5c:	4b48      	ldr	r3, [pc, #288]	; (8000b80 <HW_TS_Init+0x1a4>)
 8000a5e:	691b      	ldr	r3, [r3, #16]
 8000a60:	b29b      	uxth	r3, r3
 8000a62:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	3301      	adds	r3, #1
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	4b47      	ldr	r3, [pc, #284]	; (8000b8c <HW_TS_Init+0x1b0>)
 8000a6e:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000a70:	4b46      	ldr	r3, [pc, #280]	; (8000b8c <HW_TS_Init+0x1b0>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	3b01      	subs	r3, #1
 8000a76:	4a44      	ldr	r2, [pc, #272]	; (8000b88 <HW_TS_Init+0x1ac>)
 8000a78:	7812      	ldrb	r2, [r2, #0]
 8000a7a:	fb02 f303 	mul.w	r3, r2, r3
 8000a7e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000a82:	4a40      	ldr	r2, [pc, #256]	; (8000b84 <HW_TS_Init+0x1a8>)
 8000a84:	7812      	ldrb	r2, [r2, #0]
 8000a86:	40d3      	lsrs	r3, r2
 8000a88:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d904      	bls.n	8000a9e <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000a94:	4b3e      	ldr	r3, [pc, #248]	; (8000b90 <HW_TS_Init+0x1b4>)
 8000a96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a9a:	801a      	strh	r2, [r3, #0]
 8000a9c:	e003      	b.n	8000aa6 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	4b3b      	ldr	r3, [pc, #236]	; (8000b90 <HW_TS_Init+0x1b4>)
 8000aa4:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000aa6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000aaa:	f7ff ff85 	bl	80009b8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000aae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ab2:	f7ff ff6d 	bl	8000990 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d143      	bne.n	8000b44 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000abc:	4b35      	ldr	r3, [pc, #212]	; (8000b94 <HW_TS_Init+0x1b8>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000ac2:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <HW_TS_Init+0x1bc>)
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac8:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000aca:	2300      	movs	r3, #0
 8000acc:	77fb      	strb	r3, [r7, #31]
 8000ace:	e00c      	b.n	8000aea <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000ad0:	7ffa      	ldrb	r2, [r7, #31]
 8000ad2:	4932      	ldr	r1, [pc, #200]	; (8000b9c <HW_TS_Init+0x1c0>)
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	4413      	add	r3, r2
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	440b      	add	r3, r1
 8000ade:	330c      	adds	r3, #12
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000ae4:	7ffb      	ldrb	r3, [r7, #31]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	77fb      	strb	r3, [r7, #31]
 8000aea:	7ffb      	ldrb	r3, [r7, #31]
 8000aec:	2b05      	cmp	r3, #5
 8000aee:	d9ef      	bls.n	8000ad0 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000af0:	4b2b      	ldr	r3, [pc, #172]	; (8000ba0 <HW_TS_Init+0x1c4>)
 8000af2:	2206      	movs	r2, #6
 8000af4:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <HW_TS_Init+0x1a0>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <HW_TS_Init+0x1a0>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b08:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000b0a:	4b1c      	ldr	r3, [pc, #112]	; (8000b7c <HW_TS_Init+0x1a0>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <HW_TS_Init+0x1a0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000b1e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000b20:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <HW_TS_Init+0x1c8>)
 8000b22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000b26:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000b28:	2003      	movs	r0, #3
 8000b2a:	f000 ffca 	bl	8001ac2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <HW_TS_Init+0x1a0>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	689a      	ldr	r2, [r3, #8]
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HW_TS_Init+0x1a0>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	e00a      	b.n	8000b5a <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000b44:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <HW_TS_Init+0x1a0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d002      	beq.n	8000b5a <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 ffa6 	bl	8001aa6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HW_TS_Init+0x1a0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	22ff      	movs	r2, #255	; 0xff
 8000b62:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000b64:	2200      	movs	r2, #0
 8000b66:	2103      	movs	r1, #3
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f000 ff68 	bl	8001a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000b6e:	2003      	movs	r0, #3
 8000b70:	f000 ff7f 	bl	8001a72 <HAL_NVIC_EnableIRQ>

  return;
 8000b74:	bf00      	nop
}
 8000b76:	3720      	adds	r7, #32
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000130 	.word	0x20000130
 8000b80:	40002800 	.word	0x40002800
 8000b84:	20000134 	.word	0x20000134
 8000b88:	20000135 	.word	0x20000135
 8000b8c:	20000136 	.word	0x20000136
 8000b90:	20000138 	.word	0x20000138
 8000b94:	200000bc 	.word	0x200000bc
 8000b98:	200000b8 	.word	0x200000b8
 8000b9c:	20000024 	.word	0x20000024
 8000ba0:	200000b4 	.word	0x200000b4
 8000ba4:	58000800 	.word	0x58000800

08000ba8 <LL_RCC_LSE_SetDriveCapability>:
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bb8:	f023 0218 	bic.w	r2, r3, #24
 8000bbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <LL_AHB2_GRP1_EnableClock>:
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000be2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bf0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
}
 8000bfa:	bf00      	nop
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0a:	f000 fd5b 	bl	80016c4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8000c0e:	f7ff fd0f 	bl	8000630 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c12:	f000 f811 	bl	8000c38 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c16:	f000 f85b 	bl	8000cd0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8000c1a:	f000 f8b9 	bl	8000d90 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1e:	f000 f907 	bl	8000e30 <MX_GPIO_Init>
  MX_RF_Init();
 8000c22:	f000 f8c9 	bl	8000db8 <MX_RF_Init>
  MX_RTC_Init();
 8000c26:	f000 f8cf 	bl	8000dc8 <MX_RTC_Init>
  MX_I2C1_Init();
 8000c2a:	f000 f871 	bl	8000d10 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8000c2e:	f7ff fd0d 	bl	800064c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8000c32:	f7ff fe70 	bl	8000916 <MX_APPE_Process>
 8000c36:	e7fc      	b.n	8000c32 <main+0x2c>

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b098      	sub	sp, #96	; 0x60
 8000c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	2244      	movs	r2, #68	; 0x44
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f006 fc26 	bl	8007498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]
 8000c5a:	615a      	str	r2, [r3, #20]
 8000c5c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c5e:	f002 f863 	bl	8002d28 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff ffa0 	bl	8000ba8 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000c68:	2307      	movs	r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c70:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c72:	2301      	movs	r3, #1
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c7c:	2340      	movs	r3, #64	; 0x40
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c84:	f107 031c 	add.w	r3, r7, #28
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 fc0b 	bl	80034a4 <HAL_RCC_OscConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000c94:	f000 f980 	bl	8000f98 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000c98:	236f      	movs	r3, #111	; 0x6f
 8000c9a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f002 ff29 	bl	8003b10 <HAL_RCC_ClockConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000cc4:	f000 f968 	bl	8000f98 <Error_Handler>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3760      	adds	r7, #96	; 0x60
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08c      	sub	sp, #48	; 0x30
 8000cd4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2230      	movs	r2, #48	; 0x30
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f006 fbdb 	bl	8007498 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8000ce2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ce6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8000ce8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f003 fa9f 	bl	800423c <HAL_RCCEx_PeriphCLKConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000d04:	f000 f948 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000d08:	bf00      	nop
 8000d0a:	3730      	adds	r7, #48	; 0x30
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d16:	4a1c      	ldr	r2, [pc, #112]	; (8000d88 <MX_I2C1_Init+0x78>)
 8000d18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d1c:	4a1b      	ldr	r2, [pc, #108]	; (8000d8c <MX_I2C1_Init+0x7c>)
 8000d1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d32:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d3e:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d4a:	480e      	ldr	r0, [pc, #56]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d4c:	f001 f9dc 	bl	8002108 <HAL_I2C_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d56:	f000 f91f 	bl	8000f98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4809      	ldr	r0, [pc, #36]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d5e:	f001 fec5 	bl	8002aec <HAL_I2CEx_ConfigAnalogFilter>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d68:	f000 f916 	bl	8000f98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_I2C1_Init+0x74>)
 8000d70:	f001 ff07 	bl	8002b82 <HAL_I2CEx_ConfigDigitalFilter>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d7a:	f000 f90d 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	2000013c 	.word	0x2000013c
 8000d88:	40005400 	.word	0x40005400
 8000d8c:	00303d5b 	.word	0x00303d5b

08000d90 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_IPCC_Init+0x20>)
 8000d96:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <MX_IPCC_Init+0x24>)
 8000d98:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_IPCC_Init+0x20>)
 8000d9c:	f001 ff3e 	bl	8002c1c <HAL_IPCC_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000da6:	f000 f8f7 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000190 	.word	0x20000190
 8000db4:	58000c00 	.word	0x58000c00

08000db8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <MX_RTC_Init+0x60>)
 8000dce:	4a17      	ldr	r2, [pc, #92]	; (8000e2c <MX_RTC_Init+0x64>)
 8000dd0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <MX_RTC_Init+0x60>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <MX_RTC_Init+0x60>)
 8000dda:	220f      	movs	r2, #15
 8000ddc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_RTC_Init+0x60>)
 8000de0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000de4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_RTC_Init+0x60>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_RTC_Init+0x60>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <MX_RTC_Init+0x60>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000df8:	480b      	ldr	r0, [pc, #44]	; (8000e28 <MX_RTC_Init+0x60>)
 8000dfa:	f003 fb15 	bl	8004428 <HAL_RTC_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8000e04:	f000 f8c8 	bl	8000f98 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e0e:	4806      	ldr	r0, [pc, #24]	; (8000e28 <MX_RTC_Init+0x60>)
 8000e10:	f003 fbf8 	bl	8004604 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000e1a:	f000 f8bd 	bl	8000f98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000e1e:	4802      	ldr	r0, [pc, #8]	; (8000e28 <MX_RTC_Init+0x60>)
 8000e20:	f003 fcac 	bl	800477c <HAL_RTCEx_DeactivateWakeUpTimer>
  /* USER CODE END RTC_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200001cc 	.word	0x200001cc
 8000e2c:	40002800 	.word	0x40002800

08000e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e44:	2004      	movs	r0, #4
 8000e46:	f7ff fec5 	bl	8000bd4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4a:	2080      	movs	r0, #128	; 0x80
 8000e4c:	f7ff fec2 	bl	8000bd4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	2002      	movs	r0, #2
 8000e52:	f7ff febf 	bl	8000bd4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e56:	2001      	movs	r0, #1
 8000e58:	f7ff febc 	bl	8000bd4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e5c:	2010      	movs	r0, #16
 8000e5e:	f7ff feb9 	bl	8000bd4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e62:	2308      	movs	r3, #8
 8000e64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e66:	2303      	movs	r3, #3
 8000e68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	4823      	ldr	r0, [pc, #140]	; (8000f00 <MX_GPIO_Init+0xd0>)
 8000e74:	f000 ffa4 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e7c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f000 ff97 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB0 PB1 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000e92:	230f      	movs	r3, #15
 8000e94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e96:	2303      	movs	r3, #3
 8000e98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4818      	ldr	r0, [pc, #96]	; (8000f04 <MX_GPIO_Init+0xd4>)
 8000ea4:	f000 ff8c 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ea8:	2310      	movs	r3, #16
 8000eaa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eac:	2303      	movs	r3, #3
 8000eae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4813      	ldr	r0, [pc, #76]	; (8000f08 <MX_GPIO_Init+0xd8>)
 8000eba:	f000 ff81 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Data_Ready_1_Pin Data_Ready_2_Pin Data_Ready_3_Pin Data_Ready_4_Pin */
  GPIO_InitStruct.Pin = Data_Ready_1_Pin|Data_Ready_2_Pin|Data_Ready_3_Pin|Data_Ready_4_Pin;
 8000ebe:	23f0      	movs	r3, #240	; 0xf0
 8000ec0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ec2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ec6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480c      	ldr	r0, [pc, #48]	; (8000f04 <MX_GPIO_Init+0xd4>)
 8000ed2:	f000 ff75 	bl	8001dc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	210f      	movs	r1, #15
 8000eda:	200a      	movs	r0, #10
 8000edc:	f000 fdaf 	bl	8001a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ee0:	200a      	movs	r0, #10
 8000ee2:	f000 fdc6 	bl	8001a72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	210f      	movs	r1, #15
 8000eea:	2017      	movs	r0, #23
 8000eec:	f000 fda7 	bl	8001a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ef0:	2017      	movs	r0, #23
 8000ef2:	f000 fdbe 	bl	8001a72 <HAL_NVIC_EnableIRQ>

}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	48001c00 	.word	0x48001c00
 8000f04:	48000400 	.word	0x48000400
 8000f08:	48001000 	.word	0x48001000

08000f0c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Data_Ready_1_Pin) {
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	2b10      	cmp	r3, #16
 8000f1a:	d10b      	bne.n	8000f34 <HAL_GPIO_EXTI_Callback+0x28>
		SystemClock_Config ();
 8000f1c:	f7ff fe8c 	bl	8000c38 <SystemClock_Config>
		HAL_ResumeTick();
 8000f20:	f000 fc66 	bl	80017f0 <HAL_ResumeTick>
		deviceToBeRead = 1;
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x88>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_TEMP, CFG_SCH_PRIO_0);
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	2008      	movs	r0, #8
 8000f2e:	f006 f961 	bl	80071f4 <UTIL_SEQ_SetTask>
		SystemClock_Config ();
		HAL_ResumeTick();
		deviceToBeRead = 4;
		UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_TEMP, CFG_SCH_PRIO_0);
	}
}
 8000f32:	e02b      	b.n	8000f8c <HAL_GPIO_EXTI_Callback+0x80>
	else if(GPIO_Pin == Data_Ready_2_Pin) {
 8000f34:	88fb      	ldrh	r3, [r7, #6]
 8000f36:	2b20      	cmp	r3, #32
 8000f38:	d10b      	bne.n	8000f52 <HAL_GPIO_EXTI_Callback+0x46>
		SystemClock_Config ();
 8000f3a:	f7ff fe7d 	bl	8000c38 <SystemClock_Config>
		HAL_ResumeTick();
 8000f3e:	f000 fc57 	bl	80017f0 <HAL_ResumeTick>
		deviceToBeRead = 2;
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x88>)
 8000f44:	2202      	movs	r2, #2
 8000f46:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_TEMP, CFG_SCH_PRIO_0);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2008      	movs	r0, #8
 8000f4c:	f006 f952 	bl	80071f4 <UTIL_SEQ_SetTask>
}
 8000f50:	e01c      	b.n	8000f8c <HAL_GPIO_EXTI_Callback+0x80>
	else if(GPIO_Pin == Data_Ready_3_Pin) {
 8000f52:	88fb      	ldrh	r3, [r7, #6]
 8000f54:	2b40      	cmp	r3, #64	; 0x40
 8000f56:	d10b      	bne.n	8000f70 <HAL_GPIO_EXTI_Callback+0x64>
		SystemClock_Config ();
 8000f58:	f7ff fe6e 	bl	8000c38 <SystemClock_Config>
		HAL_ResumeTick();
 8000f5c:	f000 fc48 	bl	80017f0 <HAL_ResumeTick>
		deviceToBeRead = 3;
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x88>)
 8000f62:	2203      	movs	r2, #3
 8000f64:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_TEMP, CFG_SCH_PRIO_0);
 8000f66:	2100      	movs	r1, #0
 8000f68:	2008      	movs	r0, #8
 8000f6a:	f006 f943 	bl	80071f4 <UTIL_SEQ_SetTask>
}
 8000f6e:	e00d      	b.n	8000f8c <HAL_GPIO_EXTI_Callback+0x80>
	else if(GPIO_Pin == Data_Ready_4_Pin) {
 8000f70:	88fb      	ldrh	r3, [r7, #6]
 8000f72:	2b80      	cmp	r3, #128	; 0x80
 8000f74:	d10a      	bne.n	8000f8c <HAL_GPIO_EXTI_Callback+0x80>
		SystemClock_Config ();
 8000f76:	f7ff fe5f 	bl	8000c38 <SystemClock_Config>
		HAL_ResumeTick();
 8000f7a:	f000 fc39 	bl	80017f0 <HAL_ResumeTick>
		deviceToBeRead = 4;
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x88>)
 8000f80:	2204      	movs	r2, #4
 8000f82:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_TEMP, CFG_SCH_PRIO_0);
 8000f84:	2100      	movs	r1, #0
 8000f86:	2008      	movs	r0, #8
 8000f88:	f006 f934 	bl	80071f4 <UTIL_SEQ_SetTask>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	200001f0 	.word	0x200001f0

08000f98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9c:	b672      	cpsid	i
}
 8000f9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <Error_Handler+0x8>
	...

08000fa4 <LL_PWR_SetPowerMode>:
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <LL_PWR_SetPowerMode+0x24>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f023 0207 	bic.w	r2, r3, #7
 8000fb4:	4904      	ldr	r1, [pc, #16]	; (8000fc8 <LL_PWR_SetPowerMode+0x24>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	600b      	str	r3, [r1, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	58000400 	.word	0x58000400

08000fcc <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <LL_PWR_ClearFlag_WU+0x14>)
 8000fd2:	2209      	movs	r2, #9
 8000fd4:	619a      	str	r2, [r3, #24]
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	58000400 	.word	0x58000400

08000fe4 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff6:	d101      	bne.n	8000ffc <LL_PWR_IsActiveFlag_C2SB+0x18>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e000      	b.n	8000ffe <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	58000400 	.word	0x58000400

0800100c <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800101a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800101e:	d101      	bne.n	8001024 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	58000400 	.word	0x58000400

08001034 <LL_RCC_HSI_Enable>:
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <LL_RCC_HSI_IsReady>:
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001064:	d101      	bne.n	800106a <LL_RCC_HSI_IsReady+0x18>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <LL_RCC_HSI_IsReady+0x1a>
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_RCC_SetSysClkSource>:
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800107e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f023 0203 	bic.w	r2, r3, #3
 8001088:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4313      	orrs	r3, r2
 8001090:	608b      	str	r3, [r1, #8]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <LL_RCC_GetSysClkSource>:
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80010a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 030c 	and.w	r3, r3, #12
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <LL_RCC_SetSMPSClockSource>:
{
 80010b6:	b480      	push	{r7}
 80010b8:	b083      	sub	sp, #12
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80010be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	f023 0203 	bic.w	r2, r3, #3
 80010c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	624b      	str	r3, [r1, #36]	; 0x24
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80010e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <LL_LPM_EnableSleep+0x1c>)
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <LL_LPM_EnableSleep+0x1c>)
 800110a:	f023 0304 	bic.w	r3, r3, #4
 800110e:	6113      	str	r3, [r2, #16]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <LL_LPM_EnableDeepSleep+0x1c>)
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <LL_LPM_EnableDeepSleep+0x1c>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6113      	str	r3, [r2, #16]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	3220      	adds	r2, #32
 8001150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001154:	4a05      	ldr	r2, [pc, #20]	; (800116c <LL_HSEM_1StepLock+0x2c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d001      	beq.n	800115e <LL_HSEM_1StepLock+0x1e>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <LL_HSEM_1StepLock+0x20>
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	80000400 	.word	0x80000400

08001170 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 800119a:	f000 fb19 	bl	80017d0 <HAL_SuspendTick>
  __HAL_RCC_CLEAR_RESET_FLAGS();
 800119e:	f7ff ff9e 	bl	80010de <LL_RCC_ClearResetFlags>

  EnterLowPower();
 80011a2:	f000 f835 	bl	8001210 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 80011a6:	f7ff ff11 	bl	8000fcc <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 80011aa:	2003      	movs	r0, #3
 80011ac:	f7ff fefa 	bl	8000fa4 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 80011b0:	f7ff ffb6 	bl	8001120 <LL_LPM_EnableDeepSleep>
#endif

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 80011b4:	bf00      	nop
}
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  }
#endif
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 80011bc:	bf00      	nop
}
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 80011ca:	f000 fb01 	bl	80017d0 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 80011ce:	f000 f81f 	bl	8001210 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f7ff fee6 	bl	8000fa4 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 80011d8:	f7ff ffa2 	bl	8001120 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 80011dc:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 80011de:	bf00      	nop
}
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 80011e6:	f000 f84f 	bl	8001288 <ExitLowPower>

  HAL_ResumeTick();
 80011ea:	f000 fb01 	bl	80017f0 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 80011ee:	bf00      	nop
}
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 80011f6:	f000 faeb 	bl	80017d0 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80011fa:	f7ff ff81 	bl	8001100 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 80011fe:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8001200:	bf00      	nop
}
 8001202:	bd80      	pop	{r7, pc}

08001204 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8001208:	f000 faf2 	bl	80017f0 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 800120c:	bf00      	nop
}
 800120e:	bd80      	pop	{r7, pc}

08001210 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001214:	bf00      	nop
 8001216:	2103      	movs	r1, #3
 8001218:	4819      	ldr	r0, [pc, #100]	; (8001280 <EnterLowPower+0x70>)
 800121a:	f7ff ff91 	bl	8001140 <LL_HSEM_1StepLock>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1f8      	bne.n	8001216 <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8001224:	2104      	movs	r1, #4
 8001226:	4816      	ldr	r0, [pc, #88]	; (8001280 <EnterLowPower+0x70>)
 8001228:	f7ff ff8a 	bl	8001140 <LL_HSEM_1StepLock>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d117      	bne.n	8001262 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8001232:	f7ff feeb 	bl	800100c <LL_PWR_IsActiveFlag_C2DS>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d104      	bne.n	8001246 <EnterLowPower+0x36>
 800123c:	f7ff fed2 	bl	8000fe4 <LL_PWR_IsActiveFlag_C2SB>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d015      	beq.n	8001272 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2104      	movs	r1, #4
 800124a:	480d      	ldr	r0, [pc, #52]	; (8001280 <EnterLowPower+0x70>)
 800124c:	f7ff ff90 	bl	8001170 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8001250:	f000 f834 	bl	80012bc <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <EnterLowPower+0x74>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <EnterLowPower+0x74>)
 800125a:	f023 0307 	bic.w	r3, r3, #7
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	e007      	b.n	8001272 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8001262:	f000 f82b 	bl	80012bc <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001266:	4b07      	ldr	r3, [pc, #28]	; (8001284 <EnterLowPower+0x74>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a06      	ldr	r2, [pc, #24]	; (8001284 <EnterLowPower+0x74>)
 800126c:	f023 0307 	bic.w	r3, r3, #7
 8001270:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2103      	movs	r1, #3
 8001276:	4802      	ldr	r0, [pc, #8]	; (8001280 <EnterLowPower+0x70>)
 8001278:	f7ff ff7a 	bl	8001170 <LL_HSEM_ReleaseLock>

  return;
 800127c:	bf00      	nop
}
 800127e:	bd80      	pop	{r7, pc}
 8001280:	58001400 	.word	0x58001400
 8001284:	58004000 	.word	0x58004000

08001288 <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2104      	movs	r1, #4
 8001290:	4809      	ldr	r0, [pc, #36]	; (80012b8 <ExitLowPower+0x30>)
 8001292:	f7ff ff6d 	bl	8001170 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001296:	bf00      	nop
 8001298:	2103      	movs	r1, #3
 800129a:	4807      	ldr	r0, [pc, #28]	; (80012b8 <ExitLowPower+0x30>)
 800129c:	f7ff ff50 	bl	8001140 <LL_HSEM_1StepLock>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f8      	bne.n	8001298 <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80012a6:	f7ff fefa 	bl	800109e <LL_RCC_GetSysClkSource>

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
#endif

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2103      	movs	r1, #3
 80012ae:	4802      	ldr	r0, [pc, #8]	; (80012b8 <ExitLowPower+0x30>)
 80012b0:	f7ff ff5e 	bl	8001170 <LL_HSEM_ReleaseLock>

  return;
 80012b4:	bf00      	nop
}
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	58001400 	.word	0x58001400

080012bc <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 80012c0:	f7ff feb8 	bl	8001034 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 80012c4:	bf00      	nop
 80012c6:	f7ff fec4 	bl	8001052 <LL_RCC_HSI_IsReady>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0fa      	beq.n	80012c6 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f7ff fed0 	bl	8001076 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff feed 	bl	80010b6 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 80012dc:	bf00      	nop
 80012de:	f7ff fede 	bl	800109e <LL_RCC_GetSysClkSource>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d1fa      	bne.n	80012de <Switch_On_HSI+0x22>
  return;
 80012e8:	bf00      	nop
}
 80012ea:	bd80      	pop	{r7, pc}

080012ec <LL_RCC_EnableRTC>:
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80012f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <LL_AHB2_GRP1_EnableClock>:
{
 800130e:	b480      	push	{r7}
 8001310:	b085      	sub	sp, #20
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800131a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800131c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4313      	orrs	r3, r2
 8001324:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800132a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4013      	ands	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001332:	68fb      	ldr	r3, [r7, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_AHB3_GRP1_EnableClock>:
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800134c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800134e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4313      	orrs	r3, r2
 8001356:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4013      	ands	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001364:	68fb      	ldr	r3, [r7, #12]
}
 8001366:	bf00      	nop
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001372:	b480      	push	{r7}
 8001374:	b085      	sub	sp, #20
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800137a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001380:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4313      	orrs	r3, r2
 8001388:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800138a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800138e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4013      	ands	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001396:	68fb      	ldr	r3, [r7, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80013a8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80013ac:	f7ff ffc8 	bl	8001340 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	202e      	movs	r0, #46	; 0x2e
 80013b6:	f000 fb42 	bl	8001a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80013ba:	202e      	movs	r0, #46	; 0x2e
 80013bc:	f000 fb59 	bl	8001a72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b094      	sub	sp, #80	; 0x50
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2230      	movs	r2, #48	; 0x30
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f006 f857 	bl	8007498 <memset>
  if(hi2c->Instance==I2C1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a17      	ldr	r2, [pc, #92]	; (800144c <HAL_I2C_MspInit+0x88>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d126      	bne.n	8001442 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013f4:	2304      	movs	r3, #4
 80013f6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013f8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80013fc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	4618      	mov	r0, r3
 8001404:	f002 ff1a 	bl	800423c <HAL_RCCEx_PeriphCLKConfig>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800140e:	f7ff fdc3 	bl	8000f98 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	2002      	movs	r0, #2
 8001414:	f7ff ff7b 	bl	800130e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001418:	f44f 7340 	mov.w	r3, #768	; 0x300
 800141c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141e:	2312      	movs	r3, #18
 8001420:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800142a:	2304      	movs	r3, #4
 800142c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001432:	4619      	mov	r1, r3
 8001434:	4806      	ldr	r0, [pc, #24]	; (8001450 <HAL_I2C_MspInit+0x8c>)
 8001436:	f000 fcc3 	bl	8001dc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800143a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800143e:	f7ff ff98 	bl	8001372 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001442:	bf00      	nop
 8001444:	3750      	adds	r7, #80	; 0x50
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40005400 	.word	0x40005400
 8001450:	48000400 	.word	0x48000400

08001454 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <HAL_IPCC_MspInit+0x44>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d113      	bne.n	800148e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001466:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800146a:	f7ff ff69 	bl	8001340 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	202c      	movs	r0, #44	; 0x2c
 8001474:	f000 fae3 	bl	8001a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001478:	202c      	movs	r0, #44	; 0x2c
 800147a:	f000 fafa 	bl	8001a72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	202d      	movs	r0, #45	; 0x2d
 8001484:	f000 fadb 	bl	8001a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001488:	202d      	movs	r0, #45	; 0x2d
 800148a:	f000 faf2 	bl	8001a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	58000c00 	.word	0x58000c00

0800149c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08e      	sub	sp, #56	; 0x38
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	2230      	movs	r2, #48	; 0x30
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f005 fff3 	bl	8007498 <memset>
  if(hrtc->Instance==RTC)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <HAL_RTC_MspInit+0x64>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d11d      	bne.n	80014f8 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014c0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80014c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014c8:	f107 0308 	add.w	r3, r7, #8
 80014cc:	4618      	mov	r0, r3
 80014ce:	f002 feb5 	bl	800423c <HAL_RCCEx_PeriphCLKConfig>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80014d8:	f7ff fd5e 	bl	8000f98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014dc:	f7ff ff06 	bl	80012ec <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80014e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014e4:	f7ff ff45 	bl	8001372 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 15, 0);
 80014e8:	2200      	movs	r2, #0
 80014ea:	210f      	movs	r1, #15
 80014ec:	2003      	movs	r0, #3
 80014ee:	f000 faa6 	bl	8001a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80014f2:	2003      	movs	r0, #3
 80014f4:	f000 fabd 	bl	8001a72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014f8:	bf00      	nop
 80014fa:	3738      	adds	r7, #56	; 0x38
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40002800 	.word	0x40002800

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <NMI_Handler+0x4>

0800150a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150e:	e7fe      	b.n	800150e <HardFault_Handler+0x4>

08001510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <MemManage_Handler+0x4>

08001516 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <BusFault_Handler+0x4>

0800151c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <UsageFault_Handler+0x4>

08001522 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001550:	f000 f912 	bl	8001778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}

08001558 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800155c:	4802      	ldr	r0, [pc, #8]	; (8001568 <RTC_WKUP_IRQHandler+0x10>)
 800155e:	f003 f96b 	bl	8004838 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200001cc 	.word	0x200001cc

0800156c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Data_Ready_1_Pin);
 8001570:	2010      	movs	r0, #16
 8001572:	f000 fd8d 	bl	8002090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}

0800157a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Data_Ready_2_Pin);
 800157e:	2020      	movs	r0, #32
 8001580:	f000 fd86 	bl	8002090 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Data_Ready_3_Pin);
 8001584:	2040      	movs	r0, #64	; 0x40
 8001586:	f000 fd83 	bl	8002090 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Data_Ready_4_Pin);
 800158a:	2080      	movs	r0, #128	; 0x80
 800158c:	f000 fd80 	bl	8002090 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}

08001594 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001598:	f005 fb52 	bl	8006c40 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}

080015a0 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80015a4:	f005 fb84 	bl	8006cb0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80015b0:	f000 fd86 	bl	80020c0 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80015bc:	4b22      	ldr	r3, [pc, #136]	; (8001648 <SystemInit+0x90>)
 80015be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c2:	4a21      	ldr	r2, [pc, #132]	; (8001648 <SystemInit+0x90>)
 80015c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80015dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80015e4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80015e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <SystemInit+0x94>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80015f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001602:	f023 0305 	bic.w	r3, r3, #5
 8001606:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800160a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001622:	4a0b      	ldr	r2, [pc, #44]	; (8001650 <SystemInit+0x98>)
 8001624:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001634:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00
 800164c:	faf6fefb 	.word	0xfaf6fefb
 8001650:	22041000 	.word	0x22041000

08001654 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001654:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001656:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001658:	3304      	adds	r3, #4

0800165a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800165e:	d3f9      	bcc.n	8001654 <CopyDataInit>
  bx lr
 8001660:	4770      	bx	lr

08001662 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001662:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001664:	3004      	adds	r0, #4

08001666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001666:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001668:	d3fb      	bcc.n	8001662 <FillZerobss>
  bx lr
 800166a:	4770      	bx	lr

0800166c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800166e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001670:	f7ff ffa2 	bl	80015b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001674:	480b      	ldr	r0, [pc, #44]	; (80016a4 <LoopForever+0x8>)
 8001676:	490c      	ldr	r1, [pc, #48]	; (80016a8 <LoopForever+0xc>)
 8001678:	4a0c      	ldr	r2, [pc, #48]	; (80016ac <LoopForever+0x10>)
 800167a:	2300      	movs	r3, #0
 800167c:	f7ff ffed 	bl	800165a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001680:	480b      	ldr	r0, [pc, #44]	; (80016b0 <LoopForever+0x14>)
 8001682:	490c      	ldr	r1, [pc, #48]	; (80016b4 <LoopForever+0x18>)
 8001684:	2300      	movs	r3, #0
 8001686:	f7ff ffee 	bl	8001666 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800168a:	480b      	ldr	r0, [pc, #44]	; (80016b8 <LoopForever+0x1c>)
 800168c:	490b      	ldr	r1, [pc, #44]	; (80016bc <LoopForever+0x20>)
 800168e:	2300      	movs	r3, #0
 8001690:	f7ff ffe9 	bl	8001666 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001694:	f005 fece 	bl	8007434 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001698:	f7ff fab5 	bl	8000c06 <main>

0800169c <LoopForever>:

LoopForever:
  b LoopForever
 800169c:	e7fe      	b.n	800169c <LoopForever>
 800169e:	0000      	.short	0x0000
  ldr   r0, =_estack
 80016a0:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 80016a4:	20000004 	.word	0x20000004
 80016a8:	20000024 	.word	0x20000024
 80016ac:	08007774 	.word	0x08007774
  INIT_BSS _sbss, _ebss
 80016b0:	2000010c 	.word	0x2000010c
 80016b4:	20000340 	.word	0x20000340
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80016b8:	200301e4 	.word	0x200301e4
 80016bc:	20030a67 	.word	0x20030a67

080016c0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016c0:	e7fe      	b.n	80016c0 <ADC1_IRQHandler>
	...

080016c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <HAL_Init+0x3c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <HAL_Init+0x3c>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016da:	2003      	movs	r0, #3
 80016dc:	f000 f9a4 	bl	8001a28 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016e0:	200f      	movs	r0, #15
 80016e2:	f000 f80f 	bl	8001704 <HAL_InitTick>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d002      	beq.n	80016f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	71fb      	strb	r3, [r7, #7]
 80016f0:	e001      	b.n	80016f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016f2:	f7ff fe57 	bl	80013a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016f6:	79fb      	ldrb	r3, [r7, #7]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	58004000 	.word	0x58004000

08001704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800170c:	2300      	movs	r3, #0
 800170e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001710:	4b17      	ldr	r3, [pc, #92]	; (8001770 <HAL_InitTick+0x6c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d024      	beq.n	8001762 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001718:	f002 fba6 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 800171c:	4602      	mov	r2, r0
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <HAL_InitTick+0x6c>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	4619      	mov	r1, r3
 8001724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001728:	fbb3 f3f1 	udiv	r3, r3, r1
 800172c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001730:	4618      	mov	r0, r3
 8001732:	f000 f9ac 	bl	8001a8e <HAL_SYSTICK_Config>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10f      	bne.n	800175c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2b0f      	cmp	r3, #15
 8001740:	d809      	bhi.n	8001756 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001742:	2200      	movs	r2, #0
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	f04f 30ff 	mov.w	r0, #4294967295
 800174a:	f000 f978 	bl	8001a3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800174e:	4a09      	ldr	r2, [pc, #36]	; (8001774 <HAL_InitTick+0x70>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	e007      	b.n	8001766 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	73fb      	strb	r3, [r7, #15]
 800175a:	e004      	b.n	8001766 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e001      	b.n	8001766 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000018 	.word	0x20000018
 8001774:	20000014 	.word	0x20000014

08001778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_IncTick+0x20>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x24>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4413      	add	r3, r2
 8001788:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_IncTick+0x24>)
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000018 	.word	0x20000018
 800179c:	200001f4 	.word	0x200001f4

080017a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <HAL_GetTick+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	200001f4 	.word	0x200001f4

080017b8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <HAL_GetTickPrio+0x14>)
 80017be:	681b      	ldr	r3, [r3, #0]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000014 	.word	0x20000014

080017d0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_SuspendTick+0x1c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_SuspendTick+0x1c>)
 80017da:	f023 0302 	bic.w	r3, r3, #2
 80017de:	6013      	str	r3, [r2, #0]
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000e010 	.word	0xe000e010

080017f0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_ResumeTick+0x1c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_ResumeTick+0x1c>)
 80017fa:	f043 0302 	orr.w	r3, r3, #2
 80017fe:	6013      	str	r3, [r2, #0]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000e010 	.word	0xe000e010

08001810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800182c:	4013      	ands	r3, r2
 800182e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001838:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800183c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001842:	4a04      	ldr	r2, [pc, #16]	; (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	60d3      	str	r3, [r2, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <__NVIC_GetPriorityGrouping+0x18>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	f003 0307 	and.w	r3, r3, #7
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	2b00      	cmp	r3, #0
 8001884:	db0b      	blt.n	800189e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	f003 021f 	and.w	r2, r3, #31
 800188c:	4907      	ldr	r1, [pc, #28]	; (80018ac <__NVIC_EnableIRQ+0x38>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	2001      	movs	r0, #1
 8001896:	fa00 f202 	lsl.w	r2, r0, r2
 800189a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000e100 	.word	0xe000e100

080018b0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db0c      	blt.n	80018dc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4907      	ldr	r1, [pc, #28]	; (80018e8 <__NVIC_SetPendingIRQ+0x38>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2001      	movs	r0, #1
 80018d2:	fa00 f202 	lsl.w	r2, r0, r2
 80018d6:	3340      	adds	r3, #64	; 0x40
 80018d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100

080018ec <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	db0c      	blt.n	8001918 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	f003 021f 	and.w	r2, r3, #31
 8001904:	4907      	ldr	r1, [pc, #28]	; (8001924 <__NVIC_ClearPendingIRQ+0x38>)
 8001906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190a:	095b      	lsrs	r3, r3, #5
 800190c:	2001      	movs	r0, #1
 800190e:	fa00 f202 	lsl.w	r2, r0, r2
 8001912:	3360      	adds	r3, #96	; 0x60
 8001914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100

08001928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	6039      	str	r1, [r7, #0]
 8001932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	db0a      	blt.n	8001952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	490c      	ldr	r1, [pc, #48]	; (8001974 <__NVIC_SetPriority+0x4c>)
 8001942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001946:	0112      	lsls	r2, r2, #4
 8001948:	b2d2      	uxtb	r2, r2
 800194a:	440b      	add	r3, r1
 800194c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001950:	e00a      	b.n	8001968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	b2da      	uxtb	r2, r3
 8001956:	4908      	ldr	r1, [pc, #32]	; (8001978 <__NVIC_SetPriority+0x50>)
 8001958:	79fb      	ldrb	r3, [r7, #7]
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	3b04      	subs	r3, #4
 8001960:	0112      	lsls	r2, r2, #4
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	440b      	add	r3, r1
 8001966:	761a      	strb	r2, [r3, #24]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000e100 	.word	0xe000e100
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	; 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f1c3 0307 	rsb	r3, r3, #7
 8001996:	2b04      	cmp	r3, #4
 8001998:	bf28      	it	cs
 800199a:	2304      	movcs	r3, #4
 800199c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3304      	adds	r3, #4
 80019a2:	2b06      	cmp	r3, #6
 80019a4:	d902      	bls.n	80019ac <NVIC_EncodePriority+0x30>
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3b03      	subs	r3, #3
 80019aa:	e000      	b.n	80019ae <NVIC_EncodePriority+0x32>
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b0:	f04f 32ff 	mov.w	r2, #4294967295
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43da      	mvns	r2, r3
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	401a      	ands	r2, r3
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c4:	f04f 31ff 	mov.w	r1, #4294967295
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	43d9      	mvns	r1, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	4313      	orrs	r3, r2
         );
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3724      	adds	r7, #36	; 0x24
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f4:	d301      	bcc.n	80019fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00f      	b.n	8001a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <SysTick_Config+0x40>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a02:	210f      	movs	r1, #15
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f7ff ff8e 	bl	8001928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <SysTick_Config+0x40>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a12:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <SysTick_Config+0x40>)
 8001a14:	2207      	movs	r2, #7
 8001a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	e000e010 	.word	0xe000e010

08001a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff feed 	bl	8001810 <__NVIC_SetPriorityGrouping>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b086      	sub	sp, #24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a4c:	f7ff ff04 	bl	8001858 <__NVIC_GetPriorityGrouping>
 8001a50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	6978      	ldr	r0, [r7, #20]
 8001a58:	f7ff ff90 	bl	800197c <NVIC_EncodePriority>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a62:	4611      	mov	r1, r2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff5f 	bl	8001928 <__NVIC_SetPriority>
}
 8001a6a:	bf00      	nop
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fef7 	bl	8001874 <__NVIC_EnableIRQ>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff ffa4 	bl	80019e4 <SysTick_Config>
 8001a9c:	4603      	mov	r3, r0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fefb 	bl	80018b0 <__NVIC_SetPendingIRQ>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff ff0b 	bl	80018ec <__NVIC_ClearPendingIRQ>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
	...

08001ae0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <HAL_FLASH_Unlock+0x38>)
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	da0b      	bge.n	8001b0a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_FLASH_Unlock+0x38>)
 8001af4:	4a09      	ldr	r2, [pc, #36]	; (8001b1c <HAL_FLASH_Unlock+0x3c>)
 8001af6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001af8:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <HAL_FLASH_Unlock+0x38>)
 8001afa:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <HAL_FLASH_Unlock+0x40>)
 8001afc:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_FLASH_Unlock+0x38>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	da01      	bge.n	8001b0a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	58004000 	.word	0x58004000
 8001b1c:	45670123 	.word	0x45670123
 8001b20:	cdef89ab 	.word	0xcdef89ab

08001b24 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001b2e:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <HAL_FLASH_Lock+0x30>)
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	4a08      	ldr	r2, [pc, #32]	; (8001b54 <HAL_FLASH_Lock+0x30>)
 8001b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b38:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_FLASH_Lock+0x30>)
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	db01      	blt.n	8001b46 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8001b46:	79fb      	ldrb	r3, [r7, #7]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	58004000 	.word	0x58004000

08001b58 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8001b60:	f7ff fe1e 	bl	80017a0 <HAL_GetTick>
 8001b64:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001b66:	e009      	b.n	8001b7c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001b68:	f7ff fe1a 	bl	80017a0 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d801      	bhi.n	8001b7c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e054      	b.n	8001c26 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001b7c:	4b2c      	ldr	r3, [pc, #176]	; (8001c30 <FLASH_WaitForLastOperation+0xd8>)
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b88:	d0ee      	beq.n	8001b68 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8001b8a:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <FLASH_WaitForLastOperation+0xd8>)
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001b9a:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <FLASH_WaitForLastOperation+0xd8>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001baa:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <FLASH_WaitForLastOperation+0xd8>)
 8001bac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bb0:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001bb8:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d007      	beq.n	8001bde <FLASH_WaitForLastOperation+0x86>
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <FLASH_WaitForLastOperation+0xd8>)
 8001bd0:	699a      	ldr	r2, [r3, #24]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001bd8:	4915      	ldr	r1, [pc, #84]	; (8001c30 <FLASH_WaitForLastOperation+0xd8>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	618b      	str	r3, [r1, #24]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d004      	beq.n	8001bf2 <FLASH_WaitForLastOperation+0x9a>
 8001be8:	4a11      	ldr	r2, [pc, #68]	; (8001c30 <FLASH_WaitForLastOperation+0xd8>)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001bf0:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00e      	beq.n	8001c16 <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8001bf8:	4a0e      	ldr	r2, [pc, #56]	; (8001c34 <FLASH_WaitForLastOperation+0xdc>)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e011      	b.n	8001c26 <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001c02:	f7ff fdcd 	bl	80017a0 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d801      	bhi.n	8001c16 <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e007      	b.n	8001c26 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <FLASH_WaitForLastOperation+0xd8>)
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c1e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001c22:	d0ee      	beq.n	8001c02 <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	58004000 	.word	0x58004000
 8001c34:	200001f8 	.word	0x200001f8

08001c38 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c42:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <HAL_FLASHEx_Erase+0x9c>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d101      	bne.n	8001c4e <HAL_FLASHEx_Erase+0x16>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e03d      	b.n	8001cca <HAL_FLASHEx_Erase+0x92>
 8001c4e:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <HAL_FLASHEx_Erase+0x9c>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c54:	4b1f      	ldr	r3, [pc, #124]	; (8001cd4 <HAL_FLASHEx_Erase+0x9c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001c5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c5e:	f7ff ff7b 	bl	8001b58 <FLASH_WaitForLastOperation>
 8001c62:	4603      	mov	r3, r0
 8001c64:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d12a      	bne.n	8001cc2 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d124      	bne.n	8001cbe <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7a:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	e012      	b.n	8001caa <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8001c84:	68b8      	ldr	r0, [r7, #8]
 8001c86:	f000 f827 	bl	8001cd8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001c8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c8e:	f7ff ff63 	bl	8001b58 <FLASH_WaitForLastOperation>
 8001c92:	4603      	mov	r3, r0
 8001c94:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	601a      	str	r2, [r3, #0]
          break;
 8001ca2:	e00a      	b.n	8001cba <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	68ba      	ldr	r2, [r7, #8]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d3e4      	bcc.n	8001c84 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8001cba:	f000 f86f 	bl	8001d9c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001cbe:	f000 f825 	bl	8001d0c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001cc2:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <HAL_FLASHEx_Erase+0x9c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	701a      	strb	r2, [r3, #0]

  return status;
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200001f8 	.word	0x200001f8

08001cd8 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <FLASH_PageErase+0x30>)
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4313      	orrs	r3, r2
 8001cee:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <FLASH_PageErase+0x30>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	6153      	str	r3, [r2, #20]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	58004000 	.word	0x58004000

08001d0c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8001d10:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <FLASH_FlushCaches+0x8c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d1c:	d117      	bne.n	8001d4e <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001d1e:	4b1e      	ldr	r3, [pc, #120]	; (8001d98 <FLASH_FlushCaches+0x8c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <FLASH_FlushCaches+0x8c>)
 8001d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001d28:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <FLASH_FlushCaches+0x8c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1a      	ldr	r2, [pc, #104]	; (8001d98 <FLASH_FlushCaches+0x8c>)
 8001d30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <FLASH_FlushCaches+0x8c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a17      	ldr	r2, [pc, #92]	; (8001d98 <FLASH_FlushCaches+0x8c>)
 8001d3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d40:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <FLASH_FlushCaches+0x8c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a14      	ldr	r2, [pc, #80]	; (8001d98 <FLASH_FlushCaches+0x8c>)
 8001d48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d4c:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <FLASH_FlushCaches+0x8c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d5a:	d117      	bne.n	8001d8c <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	; (8001d98 <FLASH_FlushCaches+0x8c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0d      	ldr	r2, [pc, #52]	; (8001d98 <FLASH_FlushCaches+0x8c>)
 8001d62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d66:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001d68:	4b0b      	ldr	r3, [pc, #44]	; (8001d98 <FLASH_FlushCaches+0x8c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <FLASH_FlushCaches+0x8c>)
 8001d6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <FLASH_FlushCaches+0x8c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <FLASH_FlushCaches+0x8c>)
 8001d7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d7e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <FLASH_FlushCaches+0x8c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <FLASH_FlushCaches+0x8c>)
 8001d86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d8a:	6013      	str	r3, [r2, #0]
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	58004000 	.word	0x58004000

08001d9c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <FLASH_AcknowledgePageErase+0x20>)
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <FLASH_AcknowledgePageErase+0x20>)
 8001da6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001daa:	f023 0302 	bic.w	r3, r3, #2
 8001dae:	6153      	str	r3, [r2, #20]
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	58004000 	.word	0x58004000

08001dc0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dce:	e146      	b.n	800205e <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8138 	beq.w	8002058 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d005      	beq.n	8001e00 <HAL_GPIO_Init+0x40>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d130      	bne.n	8001e62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e36:	2201      	movs	r2, #1
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	f003 0201 	and.w	r2, r3, #1
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d017      	beq.n	8001e9e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d123      	bne.n	8001ef2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	08da      	lsrs	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3208      	adds	r2, #8
 8001eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	08da      	lsrs	r2, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3208      	adds	r2, #8
 8001eec:	6939      	ldr	r1, [r7, #16]
 8001eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0203 	and.w	r2, r3, #3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 8092 	beq.w	8002058 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001f34:	4a51      	ldr	r2, [pc, #324]	; (800207c <HAL_GPIO_Init+0x2bc>)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	089b      	lsrs	r3, r3, #2
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f5e:	d013      	beq.n	8001f88 <HAL_GPIO_Init+0x1c8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a47      	ldr	r2, [pc, #284]	; (8002080 <HAL_GPIO_Init+0x2c0>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00d      	beq.n	8001f84 <HAL_GPIO_Init+0x1c4>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a46      	ldr	r2, [pc, #280]	; (8002084 <HAL_GPIO_Init+0x2c4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <HAL_GPIO_Init+0x1c0>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a45      	ldr	r2, [pc, #276]	; (8002088 <HAL_GPIO_Init+0x2c8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d101      	bne.n	8001f7c <HAL_GPIO_Init+0x1bc>
 8001f78:	2304      	movs	r3, #4
 8001f7a:	e006      	b.n	8001f8a <HAL_GPIO_Init+0x1ca>
 8001f7c:	2307      	movs	r3, #7
 8001f7e:	e004      	b.n	8001f8a <HAL_GPIO_Init+0x1ca>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e002      	b.n	8001f8a <HAL_GPIO_Init+0x1ca>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e000      	b.n	8001f8a <HAL_GPIO_Init+0x1ca>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	f002 0203 	and.w	r2, r2, #3
 8001f90:	0092      	lsls	r2, r2, #2
 8001f92:	4093      	lsls	r3, r2
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f9a:	4938      	ldr	r1, [pc, #224]	; (800207c <HAL_GPIO_Init+0x2bc>)
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	089b      	lsrs	r3, r3, #2
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fa8:	4b38      	ldr	r3, [pc, #224]	; (800208c <HAL_GPIO_Init+0x2cc>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fcc:	4a2f      	ldr	r2, [pc, #188]	; (800208c <HAL_GPIO_Init+0x2cc>)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fd2:	4b2e      	ldr	r3, [pc, #184]	; (800208c <HAL_GPIO_Init+0x2cc>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ff6:	4a25      	ldr	r2, [pc, #148]	; (800208c <HAL_GPIO_Init+0x2cc>)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ffc:	4b23      	ldr	r3, [pc, #140]	; (800208c <HAL_GPIO_Init+0x2cc>)
 8001ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	43db      	mvns	r3, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002022:	4a1a      	ldr	r2, [pc, #104]	; (800208c <HAL_GPIO_Init+0x2cc>)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800202a:	4b18      	ldr	r3, [pc, #96]	; (800208c <HAL_GPIO_Init+0x2cc>)
 800202c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002050:	4a0e      	ldr	r2, [pc, #56]	; (800208c <HAL_GPIO_Init+0x2cc>)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	3301      	adds	r3, #1
 800205c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	f47f aeb1 	bne.w	8001dd0 <HAL_GPIO_Init+0x10>
  }
}
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	40010000 	.word	0x40010000
 8002080:	48000400 	.word	0x48000400
 8002084:	48000800 	.word	0x48000800
 8002088:	48001000 	.word	0x48001000
 800208c:	58000800 	.word	0x58000800

08002090 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	88fb      	ldrh	r3, [r7, #6]
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020a6:	4a05      	ldr	r2, [pc, #20]	; (80020bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020ac:	88fb      	ldrh	r3, [r7, #6]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7fe ff2c 	bl	8000f0c <HAL_GPIO_EXTI_Callback>
  }
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	58000800 	.word	0x58000800

080020c0 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_HSEM_IRQHandler+0x30>)
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <HAL_HSEM_IRQHandler+0x30>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	43db      	mvns	r3, r3
 80020d4:	4906      	ldr	r1, [pc, #24]	; (80020f0 <HAL_HSEM_IRQHandler+0x30>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80020da:	4a05      	ldr	r2, [pc, #20]	; (80020f0 <HAL_HSEM_IRQHandler+0x30>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f807 	bl	80020f4 <HAL_HSEM_FreeCallback>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	58001500 	.word	0x58001500

080020f4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e081      	b.n	800221e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff f948 	bl	80013c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2224      	movs	r2, #36	; 0x24
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002158:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002168:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d107      	bne.n	8002182 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	e006      	b.n	8002190 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800218e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d104      	bne.n	80021a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69d9      	ldr	r1, [r3, #28]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1a      	ldr	r2, [r3, #32]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2220      	movs	r2, #32
 800220a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
	...

08002228 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	461a      	mov	r2, r3
 8002234:	460b      	mov	r3, r1
 8002236:	817b      	strh	r3, [r7, #10]
 8002238:	4613      	mov	r3, r2
 800223a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b20      	cmp	r3, #32
 8002246:	f040 80da 	bne.w	80023fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <HAL_I2C_Master_Transmit+0x30>
 8002254:	2302      	movs	r3, #2
 8002256:	e0d3      	b.n	8002400 <HAL_I2C_Master_Transmit+0x1d8>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002260:	f7ff fa9e 	bl	80017a0 <HAL_GetTick>
 8002264:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2319      	movs	r3, #25
 800226c:	2201      	movs	r2, #1
 800226e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f9e6 	bl	8002644 <I2C_WaitOnFlagUntilTimeout>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0be      	b.n	8002400 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2221      	movs	r2, #33	; 0x21
 8002286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2210      	movs	r2, #16
 800228e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2200      	movs	r2, #0
 8002296:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	893a      	ldrh	r2, [r7, #8]
 80022a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2bff      	cmp	r3, #255	; 0xff
 80022b2:	d90e      	bls.n	80022d2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	22ff      	movs	r2, #255	; 0xff
 80022b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	8979      	ldrh	r1, [r7, #10]
 80022c2:	4b51      	ldr	r3, [pc, #324]	; (8002408 <HAL_I2C_Master_Transmit+0x1e0>)
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 fbdc 	bl	8002a88 <I2C_TransferConfig>
 80022d0:	e06c      	b.n	80023ac <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	8979      	ldrh	r1, [r7, #10]
 80022e4:	4b48      	ldr	r3, [pc, #288]	; (8002408 <HAL_I2C_Master_Transmit+0x1e0>)
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 fbcb 	bl	8002a88 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80022f2:	e05b      	b.n	80023ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	6a39      	ldr	r1, [r7, #32]
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 f9e3 	bl	80026c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e07b      	b.n	8002400 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230c:	781a      	ldrb	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002322:	b29b      	uxth	r3, r3
 8002324:	3b01      	subs	r3, #1
 8002326:	b29a      	uxth	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002330:	3b01      	subs	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d034      	beq.n	80023ac <HAL_I2C_Master_Transmit+0x184>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002346:	2b00      	cmp	r3, #0
 8002348:	d130      	bne.n	80023ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	2200      	movs	r2, #0
 8002352:	2180      	movs	r1, #128	; 0x80
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f975 	bl	8002644 <I2C_WaitOnFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e04d      	b.n	8002400 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002368:	b29b      	uxth	r3, r3
 800236a:	2bff      	cmp	r3, #255	; 0xff
 800236c:	d90e      	bls.n	800238c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	22ff      	movs	r2, #255	; 0xff
 8002372:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002378:	b2da      	uxtb	r2, r3
 800237a:	8979      	ldrh	r1, [r7, #10]
 800237c:	2300      	movs	r3, #0
 800237e:	9300      	str	r3, [sp, #0]
 8002380:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 fb7f 	bl	8002a88 <I2C_TransferConfig>
 800238a:	e00f      	b.n	80023ac <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002390:	b29a      	uxth	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239a:	b2da      	uxtb	r2, r3
 800239c:	8979      	ldrh	r1, [r7, #10]
 800239e:	2300      	movs	r3, #0
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 fb6e 	bl	8002a88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d19e      	bne.n	80022f4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	6a39      	ldr	r1, [r7, #32]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 f9c2 	bl	8002744 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e01a      	b.n	8002400 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2220      	movs	r2, #32
 80023d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6859      	ldr	r1, [r3, #4]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b0b      	ldr	r3, [pc, #44]	; (800240c <HAL_I2C_Master_Transmit+0x1e4>)
 80023de:	400b      	ands	r3, r1
 80023e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	e000      	b.n	8002400 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80023fe:	2302      	movs	r3, #2
  }
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	80002000 	.word	0x80002000
 800240c:	fe00e800 	.word	0xfe00e800

08002410 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af02      	add	r7, sp, #8
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	461a      	mov	r2, r3
 800241c:	460b      	mov	r3, r1
 800241e:	817b      	strh	r3, [r7, #10]
 8002420:	4613      	mov	r3, r2
 8002422:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b20      	cmp	r3, #32
 800242e:	f040 80db 	bne.w	80025e8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_I2C_Master_Receive+0x30>
 800243c:	2302      	movs	r3, #2
 800243e:	e0d4      	b.n	80025ea <HAL_I2C_Master_Receive+0x1da>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002448:	f7ff f9aa 	bl	80017a0 <HAL_GetTick>
 800244c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	2319      	movs	r3, #25
 8002454:	2201      	movs	r2, #1
 8002456:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f8f2 	bl	8002644 <I2C_WaitOnFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e0bf      	b.n	80025ea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2222      	movs	r2, #34	; 0x22
 800246e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2210      	movs	r2, #16
 8002476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	893a      	ldrh	r2, [r7, #8]
 800248a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	2bff      	cmp	r3, #255	; 0xff
 800249a:	d90e      	bls.n	80024ba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	22ff      	movs	r2, #255	; 0xff
 80024a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	8979      	ldrh	r1, [r7, #10]
 80024aa:	4b52      	ldr	r3, [pc, #328]	; (80025f4 <HAL_I2C_Master_Receive+0x1e4>)
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 fae8 	bl	8002a88 <I2C_TransferConfig>
 80024b8:	e06d      	b.n	8002596 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024be:	b29a      	uxth	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	8979      	ldrh	r1, [r7, #10]
 80024cc:	4b49      	ldr	r3, [pc, #292]	; (80025f4 <HAL_I2C_Master_Receive+0x1e4>)
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 fad7 	bl	8002a88 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80024da:	e05c      	b.n	8002596 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	6a39      	ldr	r1, [r7, #32]
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f96b 	bl	80027bc <I2C_WaitOnRXNEFlagUntilTimeout>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e07c      	b.n	80025ea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d034      	beq.n	8002596 <HAL_I2C_Master_Receive+0x186>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002530:	2b00      	cmp	r3, #0
 8002532:	d130      	bne.n	8002596 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	2200      	movs	r2, #0
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	68f8      	ldr	r0, [r7, #12]
 8002540:	f000 f880 	bl	8002644 <I2C_WaitOnFlagUntilTimeout>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e04d      	b.n	80025ea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	2bff      	cmp	r3, #255	; 0xff
 8002556:	d90e      	bls.n	8002576 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	22ff      	movs	r2, #255	; 0xff
 800255c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002562:	b2da      	uxtb	r2, r3
 8002564:	8979      	ldrh	r1, [r7, #10]
 8002566:	2300      	movs	r3, #0
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 fa8a 	bl	8002a88 <I2C_TransferConfig>
 8002574:	e00f      	b.n	8002596 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	b2da      	uxtb	r2, r3
 8002586:	8979      	ldrh	r1, [r7, #10]
 8002588:	2300      	movs	r3, #0
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 fa79 	bl	8002a88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d19d      	bne.n	80024dc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	6a39      	ldr	r1, [r7, #32]
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 f8cd 	bl	8002744 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e01a      	b.n	80025ea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2220      	movs	r2, #32
 80025ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6859      	ldr	r1, [r3, #4]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <HAL_I2C_Master_Receive+0x1e8>)
 80025c8:	400b      	ands	r3, r1
 80025ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2220      	movs	r2, #32
 80025d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	e000      	b.n	80025ea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80025e8:	2302      	movs	r3, #2
  }
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	80002400 	.word	0x80002400
 80025f8:	fe00e800 	.word	0xfe00e800

080025fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b02      	cmp	r3, #2
 8002610:	d103      	bne.n	800261a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2200      	movs	r2, #0
 8002618:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b01      	cmp	r3, #1
 8002626:	d007      	beq.n	8002638 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	619a      	str	r2, [r3, #24]
  }
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	603b      	str	r3, [r7, #0]
 8002650:	4613      	mov	r3, r2
 8002652:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002654:	e022      	b.n	800269c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265c:	d01e      	beq.n	800269c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800265e:	f7ff f89f 	bl	80017a0 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d302      	bcc.n	8002674 <I2C_WaitOnFlagUntilTimeout+0x30>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d113      	bne.n	800269c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002678:	f043 0220 	orr.w	r2, r3, #32
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e00f      	b.n	80026bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	4013      	ands	r3, r2
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d0cd      	beq.n	8002656 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026d0:	e02c      	b.n	800272c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f8ea 	bl	80028b0 <I2C_IsErrorOccurred>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e02a      	b.n	800273c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ec:	d01e      	beq.n	800272c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ee:	f7ff f857 	bl	80017a0 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d302      	bcc.n	8002704 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d113      	bne.n	800272c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002708:	f043 0220 	orr.w	r2, r3, #32
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e007      	b.n	800273c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b02      	cmp	r3, #2
 8002738:	d1cb      	bne.n	80026d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002750:	e028      	b.n	80027a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f8aa 	bl	80028b0 <I2C_IsErrorOccurred>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e026      	b.n	80027b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002766:	f7ff f81b 	bl	80017a0 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	429a      	cmp	r2, r3
 8002774:	d302      	bcc.n	800277c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d113      	bne.n	80027a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002780:	f043 0220 	orr.w	r2, r3, #32
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e007      	b.n	80027b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	d1cf      	bne.n	8002752 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027c8:	e064      	b.n	8002894 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	68b9      	ldr	r1, [r7, #8]
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 f86e 	bl	80028b0 <I2C_IsErrorOccurred>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e062      	b.n	80028a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f003 0320 	and.w	r3, r3, #32
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	d138      	bne.n	800285e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d105      	bne.n	8002806 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e04e      	b.n	80028a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	2b10      	cmp	r3, #16
 8002812:	d107      	bne.n	8002824 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2210      	movs	r2, #16
 800281a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2204      	movs	r2, #4
 8002820:	645a      	str	r2, [r3, #68]	; 0x44
 8002822:	e002      	b.n	800282a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2220      	movs	r2, #32
 8002830:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6859      	ldr	r1, [r3, #4]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800283e:	400b      	ands	r3, r1
 8002840:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e022      	b.n	80028a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285e:	f7fe ff9f 	bl	80017a0 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	429a      	cmp	r2, r3
 800286c:	d302      	bcc.n	8002874 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10f      	bne.n	8002894 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	f043 0220 	orr.w	r2, r3, #32
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e007      	b.n	80028a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d193      	bne.n	80027ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	fe00e800 	.word	0xfe00e800

080028b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f003 0310 	and.w	r3, r3, #16
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d075      	beq.n	80029c8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2210      	movs	r2, #16
 80028e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028e4:	e056      	b.n	8002994 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ec:	d052      	beq.n	8002994 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028ee:	f7fe ff57 	bl	80017a0 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d302      	bcc.n	8002904 <I2C_IsErrorOccurred+0x54>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d147      	bne.n	8002994 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002916:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002926:	d12e      	bne.n	8002986 <I2C_IsErrorOccurred+0xd6>
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800292e:	d02a      	beq.n	8002986 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002930:	7cfb      	ldrb	r3, [r7, #19]
 8002932:	2b20      	cmp	r3, #32
 8002934:	d027      	beq.n	8002986 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	685a      	ldr	r2, [r3, #4]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002944:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002946:	f7fe ff2b 	bl	80017a0 <HAL_GetTick>
 800294a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800294c:	e01b      	b.n	8002986 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800294e:	f7fe ff27 	bl	80017a0 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b19      	cmp	r3, #25
 800295a:	d914      	bls.n	8002986 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002960:	f043 0220 	orr.w	r2, r3, #32
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2220      	movs	r2, #32
 800296c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f003 0320 	and.w	r3, r3, #32
 8002990:	2b20      	cmp	r3, #32
 8002992:	d1dc      	bne.n	800294e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	f003 0320 	and.w	r3, r3, #32
 800299e:	2b20      	cmp	r3, #32
 80029a0:	d003      	beq.n	80029aa <I2C_IsErrorOccurred+0xfa>
 80029a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d09d      	beq.n	80028e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d103      	bne.n	80029ba <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2220      	movs	r2, #32
 80029b8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	f043 0304 	orr.w	r3, r3, #4
 80029c0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d00b      	beq.n	80029f2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029da:	6a3b      	ldr	r3, [r7, #32]
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00b      	beq.n	8002a14 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	f043 0308 	orr.w	r3, r3, #8
 8002a02:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	f043 0302 	orr.w	r3, r3, #2
 8002a24:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d01c      	beq.n	8002a78 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f7ff fddc 	bl	80025fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6859      	ldr	r1, [r3, #4]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <I2C_IsErrorOccurred+0x1d4>)
 8002a50:	400b      	ands	r3, r1
 8002a52:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3728      	adds	r7, #40	; 0x28
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	fe00e800 	.word	0xfe00e800

08002a88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	607b      	str	r3, [r7, #4]
 8002a92:	460b      	mov	r3, r1
 8002a94:	817b      	strh	r3, [r7, #10]
 8002a96:	4613      	mov	r3, r2
 8002a98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a9a:	897b      	ldrh	r3, [r7, #10]
 8002a9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002aa0:	7a7b      	ldrb	r3, [r7, #9]
 8002aa2:	041b      	lsls	r3, r3, #16
 8002aa4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aa8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ab6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	0d5b      	lsrs	r3, r3, #21
 8002ac2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002ac6:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <I2C_TransferConfig+0x60>)
 8002ac8:	430b      	orrs	r3, r1
 8002aca:	43db      	mvns	r3, r3
 8002acc:	ea02 0103 	and.w	r1, r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ada:	bf00      	nop
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	03ff63ff 	.word	0x03ff63ff

08002aec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d138      	bne.n	8002b74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e032      	b.n	8002b76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2224      	movs	r2, #36	; 0x24
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0201 	bic.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6819      	ldr	r1, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f042 0201 	orr.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e000      	b.n	8002b76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b74:	2302      	movs	r3, #2
  }
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b085      	sub	sp, #20
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d139      	bne.n	8002c0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e033      	b.n	8002c0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2224      	movs	r2, #36	; 0x24
 8002bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0201 	bic.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	021b      	lsls	r3, r3, #8
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e000      	b.n	8002c0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c0c:	2302      	movs	r3, #2
  }
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d01e      	beq.n	8002c6c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002c2e:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <HAL_IPCC_Init+0x60>)
 8002c30:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d102      	bne.n	8002c44 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fe fc08 	bl	8001454 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002c44:	68b8      	ldr	r0, [r7, #8]
 8002c46:	f000 f85b 	bl	8002d00 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f82c 	bl	8002cb4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002c6a:	e001      	b.n	8002c70 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	58000c00 	.word	0x58000c00

08002c80 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	60f8      	str	r0, [r7, #12]
 8002c88:	60b9      	str	r1, [r7, #8]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	60f8      	str	r0, [r7, #12]
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	e00f      	b.n	8002ce2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	4a0b      	ldr	r2, [pc, #44]	; (8002cf8 <IPCC_SetDefaultCallbacks+0x44>)
 8002ccc:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3306      	adds	r3, #6
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <IPCC_SetDefaultCallbacks+0x48>)
 8002cda:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b05      	cmp	r3, #5
 8002ce6:	d9ec      	bls.n	8002cc2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002ce8:	bf00      	nop
 8002cea:	bf00      	nop
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	08002c81 	.word	0x08002c81
 8002cfc:	08002c9b 	.word	0x08002c9b

08002d00 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002d14:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	223f      	movs	r2, #63	; 0x3f
 8002d1a:	609a      	str	r2, [r3, #8]
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d36:	6013      	str	r3, [r2, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	58000400 	.word	0x58000400

08002d48 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  
  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d5a:	d104      	bne.n	8002d66 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8002d5c:	78fb      	ldrb	r3, [r7, #3]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f84a 	bl	8002df8 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8002d64:	e003      	b.n	8002d6e <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 f81b 	bl	8002da4 <HAL_PWREx_EnterSTOP0Mode>
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <LL_PWR_EnableSRAM2Retention>:
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	4a04      	ldr	r2, [pc, #16]	; (8002d94 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d86:	6093      	str	r3, [r2, #8]
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	58000400 	.word	0x58000400

08002d98 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended 
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8002d9c:	f7ff ffec 	bl	8002d78 <LL_PWR_EnableSRAM2Retention>
}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8002dae:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a0f      	ldr	r2, [pc, #60]	; (8002df0 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002db4:	f023 0307 	bic.w	r3, r3, #7
 8002db8:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	4a0d      	ldr	r2, [pc, #52]	; (8002df4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002dc0:	f043 0304 	orr.w	r3, r3, #4
 8002dc4:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002dc6:	79fb      	ldrb	r3, [r7, #7]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002dcc:	bf30      	wfi
 8002dce:	e002      	b.n	8002dd6 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002dd0:	bf40      	sev
    __WFE();
 8002dd2:	bf20      	wfe
    __WFE();
 8002dd4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002dd6:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	4a06      	ldr	r2, [pc, #24]	; (8002df4 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002ddc:	f023 0304 	bic.w	r3, r3, #4
 8002de0:	6113      	str	r3, [r2, #16]
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	58000400 	.word	0x58000400
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
    
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8002e02:	4b11      	ldr	r3, [pc, #68]	; (8002e48 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 0307 	bic.w	r3, r3, #7
 8002e0a:	4a0f      	ldr	r2, [pc, #60]	; (8002e48 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002e12:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	4a0d      	ldr	r2, [pc, #52]	; (8002e4c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002e18:	f043 0304 	orr.w	r3, r3, #4
 8002e1c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002e24:	bf30      	wfi
 8002e26:	e002      	b.n	8002e2e <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002e28:	bf40      	sev
    __WFE();
 8002e2a:	bf20      	wfe
    __WFE();
 8002e2c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002e2e:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	4a06      	ldr	r2, [pc, #24]	; (8002e4c <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002e34:	f023 0304 	bic.w	r3, r3, #4
 8002e38:	6113      	str	r3, [r2, #16]
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	58000400 	.word	0x58000400
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e62:	d101      	bne.n	8002e68 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_RCC_HSE_Enable>:
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e86:	6013      	str	r3, [r2, #0]
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <LL_RCC_HSE_Disable>:
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea4:	6013      	str	r3, [r2, #0]
}
 8002ea6:	bf00      	nop
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <LL_RCC_HSE_IsReady>:
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ec2:	d101      	bne.n	8002ec8 <LL_RCC_HSE_IsReady+0x18>
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <LL_RCC_HSE_IsReady+0x1a>
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <LL_RCC_HSI_Enable>:
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee6:	6013      	str	r3, [r2, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <LL_RCC_HSI_Disable>:
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f04:	6013      	str	r3, [r2, #0]
}
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_RCC_HSI_IsReady>:
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f22:	d101      	bne.n	8002f28 <LL_RCC_HSI_IsReady+0x18>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <LL_RCC_HSI_IsReady+0x1a>
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	061b      	lsls	r3, r3, #24
 8002f4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	604b      	str	r3, [r1, #4]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <LL_RCC_LSE_Enable>:
{
 8002f5e:	b480      	push	{r7}
 8002f60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f76:	bf00      	nop
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_RCC_LSE_Disable>:
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <LL_RCC_LSE_EnableBypass>:
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fb2:	f043 0304 	orr.w	r3, r3, #4
 8002fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_RCC_LSE_DisableBypass>:
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd4:	f023 0304 	bic.w	r3, r3, #4
 8002fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <LL_RCC_LSE_IsReady>:
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d101      	bne.n	8002ffe <LL_RCC_LSE_IsReady+0x18>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <LL_RCC_LSE_IsReady+0x1a>
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <LL_RCC_LSI1_Enable>:
{
 800300a:	b480      	push	{r7}
 800300c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800300e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003012:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003016:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003022:	bf00      	nop
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <LL_RCC_LSI1_Disable>:
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003038:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <LL_RCC_LSI1_IsReady>:
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b02      	cmp	r3, #2
 8003060:	d101      	bne.n	8003066 <LL_RCC_LSI1_IsReady+0x18>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <LL_RCC_LSI1_IsReady+0x1a>
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <LL_RCC_LSI2_Enable>:
{
 8003072:	b480      	push	{r7}
 8003074:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800307e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003082:	f043 0304 	orr.w	r3, r3, #4
 8003086:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800308a:	bf00      	nop
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <LL_RCC_LSI2_Disable>:
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800309c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030a4:	f023 0304 	bic.w	r3, r3, #4
 80030a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <LL_RCC_LSI2_IsReady>:
{
 80030b6:	b480      	push	{r7}
 80030b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80030ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c2:	f003 0308 	and.w	r3, r3, #8
 80030c6:	2b08      	cmp	r3, #8
 80030c8:	d101      	bne.n	80030ce <LL_RCC_LSI2_IsReady+0x18>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <LL_RCC_LSI2_IsReady+0x1a>
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <LL_RCC_LSI2_SetTrimming>:
{
 80030da:	b480      	push	{r7}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80030e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	021b      	lsls	r3, r3, #8
 80030f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <LL_RCC_MSI_Enable>:
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800310c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6013      	str	r3, [r2, #0]
}
 800311c:	bf00      	nop
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <LL_RCC_MSI_Disable>:
{
 8003126:	b480      	push	{r7}
 8003128:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800312a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	6013      	str	r3, [r2, #0]
}
 800313a:	bf00      	nop
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <LL_RCC_MSI_IsReady>:
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b02      	cmp	r3, #2
 8003154:	d101      	bne.n	800315a <LL_RCC_MSI_IsReady+0x16>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <LL_RCC_MSI_IsReady+0x18>
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <LL_RCC_MSI_SetRange>:
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800316e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003178:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <LL_RCC_MSI_GetRange>:
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800319e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2bb0      	cmp	r3, #176	; 0xb0
 80031a4:	d901      	bls.n	80031aa <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80031a6:	23b0      	movs	r3, #176	; 0xb0
 80031a8:	607b      	str	r3, [r7, #4]
  return msiRange;
 80031aa:	687b      	ldr	r3, [r7, #4]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80031c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	021b      	lsls	r3, r3, #8
 80031ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031d2:	4313      	orrs	r3, r2
 80031d4:	604b      	str	r3, [r1, #4]
}
 80031d6:	bf00      	nop
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <LL_RCC_SetSysClkSource>:
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80031ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f023 0203 	bic.w	r2, r3, #3
 80031f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
}
 80031fe:	bf00      	nop
 8003200:	370c      	adds	r7, #12
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <LL_RCC_GetSysClkSource>:
{
 800320a:	b480      	push	{r7}
 800320c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800320e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 030c 	and.w	r3, r3, #12
}
 8003218:	4618      	mov	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <LL_RCC_SetAHBPrescaler>:
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800322a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <LL_C2_RCC_SetAHBPrescaler>:
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003256:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800325a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800325e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <LL_RCC_SetAHB4Prescaler>:
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800327e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003282:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003286:	f023 020f 	bic.w	r2, r3, #15
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	091b      	lsrs	r3, r3, #4
 800328e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <LL_RCC_SetAPB1Prescaler>:
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80032ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4313      	orrs	r3, r2
 80032be:	608b      	str	r3, [r1, #8]
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <LL_RCC_SetAPB2Prescaler>:
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80032d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	608b      	str	r3, [r1, #8]
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <LL_RCC_GetAHBPrescaler>:
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80032f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003302:	4618      	mov	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_RCC_GetAHB4Prescaler>:
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003314:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800331e:	4618      	mov	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LL_RCC_PLL_Enable>:
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800332c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333a:	6013      	str	r3, [r2, #0]
}
 800333c:	bf00      	nop
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <LL_RCC_PLL_Disable>:
{
 8003346:	b480      	push	{r7}
 8003348:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800334a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003354:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003358:	6013      	str	r3, [r2, #0]
}
 800335a:	bf00      	nop
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <LL_RCC_PLL_IsReady>:
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003372:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003376:	d101      	bne.n	800337c <LL_RCC_PLL_IsReady+0x18>
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <LL_RCC_PLL_IsReady+0x1a>
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <LL_RCC_PLL_GetN>:
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800338c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	0a1b      	lsrs	r3, r3, #8
 8003394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <LL_RCC_PLL_GetR>:
{
 80033a2:	b480      	push	{r7}
 80033a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80033a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <LL_RCC_PLL_GetDivider>:
{
 80033ba:	b480      	push	{r7}
 80033bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80033be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <LL_RCC_PLL_GetMainSource>:
{
 80033d2:	b480      	push	{r7}
 80033d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80033d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f003 0303 	and.w	r3, r3, #3
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <LL_RCC_IsActiveFlag_HPRE>:
{
 80033ea:	b480      	push	{r7}
 80033ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80033ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fc:	d101      	bne.n	8003402 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800340e:	b480      	push	{r7}
 8003410:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003416:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800341a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003422:	d101      	bne.n	8003428 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003424:	2301      	movs	r3, #1
 8003426:	e000      	b.n	800342a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003448:	d101      	bne.n	800344e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <LL_RCC_IsActiveFlag_PPRE1>:
{
 800345a:	b480      	push	{r7}
 800345c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800345e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003468:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800346c:	d101      	bne.n	8003472 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800347e:	b480      	push	{r7}
 8003480:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800348c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003490:	d101      	bne.n	8003496 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a4:	b590      	push	{r4, r7, lr}
 80034a6:	b08d      	sub	sp, #52	; 0x34
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e324      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0320 	and.w	r3, r3, #32
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 808d 	beq.w	80035de <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034c4:	f7ff fea1 	bl	800320a <LL_RCC_GetSysClkSource>
 80034c8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034ca:	f7ff ff82 	bl	80033d2 <LL_RCC_PLL_GetMainSource>
 80034ce:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80034d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <HAL_RCC_OscConfig+0x3e>
 80034d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d8:	2b0c      	cmp	r3, #12
 80034da:	d147      	bne.n	800356c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d144      	bne.n	800356c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69db      	ldr	r3, [r3, #28]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e308      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80034f2:	f7ff fe4c 	bl	800318e <LL_RCC_MSI_GetRange>
 80034f6:	4603      	mov	r3, r0
 80034f8:	429c      	cmp	r4, r3
 80034fa:	d914      	bls.n	8003526 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	4618      	mov	r0, r3
 8003502:	f000 fcc5 	bl	8003e90 <RCC_SetFlashLatencyFromMSIRange>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e2f7      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fe26 	bl	8003166 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fe4a 	bl	80031b8 <LL_RCC_MSI_SetCalibTrimming>
 8003524:	e013      	b.n	800354e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fe1b 	bl	8003166 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff fe3f 	bl	80031b8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fca6 	bl	8003e90 <RCC_SetFlashLatencyFromMSIRange>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e2d8      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800354e:	f000 fc8b 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8003552:	4603      	mov	r3, r0
 8003554:	4aa4      	ldr	r2, [pc, #656]	; (80037e8 <HAL_RCC_OscConfig+0x344>)
 8003556:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003558:	4ba4      	ldr	r3, [pc, #656]	; (80037ec <HAL_RCC_OscConfig+0x348>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f7fe f8d1 	bl	8001704 <HAL_InitTick>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d039      	beq.n	80035dc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e2c9      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d01e      	beq.n	80035b2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003574:	f7ff fdc8 	bl	8003108 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003578:	f7fe f912 	bl	80017a0 <HAL_GetTick>
 800357c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003580:	f7fe f90e 	bl	80017a0 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e2b6      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003592:	f7ff fdd7 	bl	8003144 <LL_RCC_MSI_IsReady>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f1      	beq.n	8003580 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fde0 	bl	8003166 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fe04 	bl	80031b8 <LL_RCC_MSI_SetCalibTrimming>
 80035b0:	e015      	b.n	80035de <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035b2:	f7ff fdb8 	bl	8003126 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035b6:	f7fe f8f3 	bl	80017a0 <HAL_GetTick>
 80035ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035be:	f7fe f8ef 	bl	80017a0 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e297      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 80035d0:	f7ff fdb8 	bl	8003144 <LL_RCC_MSI_IsReady>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f1      	bne.n	80035be <HAL_RCC_OscConfig+0x11a>
 80035da:	e000      	b.n	80035de <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80035dc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d047      	beq.n	800367a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ea:	f7ff fe0e 	bl	800320a <LL_RCC_GetSysClkSource>
 80035ee:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035f0:	f7ff feef 	bl	80033d2 <LL_RCC_PLL_GetMainSource>
 80035f4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_OscConfig+0x164>
 80035fc:	6a3b      	ldr	r3, [r7, #32]
 80035fe:	2b0c      	cmp	r3, #12
 8003600:	d108      	bne.n	8003614 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d105      	bne.n	8003614 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d134      	bne.n	800367a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e275      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800361c:	d102      	bne.n	8003624 <HAL_RCC_OscConfig+0x180>
 800361e:	f7ff fc29 	bl	8002e74 <LL_RCC_HSE_Enable>
 8003622:	e001      	b.n	8003628 <HAL_RCC_OscConfig+0x184>
 8003624:	f7ff fc35 	bl	8002e92 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d012      	beq.n	8003656 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003630:	f7fe f8b6 	bl	80017a0 <HAL_GetTick>
 8003634:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003638:	f7fe f8b2 	bl	80017a0 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e25a      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 800364a:	f7ff fc31 	bl	8002eb0 <LL_RCC_HSE_IsReady>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f1      	beq.n	8003638 <HAL_RCC_OscConfig+0x194>
 8003654:	e011      	b.n	800367a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003656:	f7fe f8a3 	bl	80017a0 <HAL_GetTick>
 800365a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800365e:	f7fe f89f 	bl	80017a0 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b64      	cmp	r3, #100	; 0x64
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e247      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003670:	f7ff fc1e 	bl	8002eb0 <LL_RCC_HSE_IsReady>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f1      	bne.n	800365e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d04c      	beq.n	8003720 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003686:	f7ff fdc0 	bl	800320a <LL_RCC_GetSysClkSource>
 800368a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800368c:	f7ff fea1 	bl	80033d2 <LL_RCC_PLL_GetMainSource>
 8003690:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	2b04      	cmp	r3, #4
 8003696:	d005      	beq.n	80036a4 <HAL_RCC_OscConfig+0x200>
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2b0c      	cmp	r3, #12
 800369c:	d10e      	bne.n	80036bc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d10b      	bne.n	80036bc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e227      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff fc3d 	bl	8002f34 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80036ba:	e031      	b.n	8003720 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d019      	beq.n	80036f8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c4:	f7ff fc06 	bl	8002ed4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7fe f86a 	bl	80017a0 <HAL_GetTick>
 80036cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d0:	f7fe f866 	bl	80017a0 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e20e      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 80036e2:	f7ff fc15 	bl	8002f10 <LL_RCC_HSI_IsReady>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f1      	beq.n	80036d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff fc1f 	bl	8002f34 <LL_RCC_HSI_SetCalibTrimming>
 80036f6:	e013      	b.n	8003720 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f8:	f7ff fbfb 	bl	8002ef2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7fe f850 	bl	80017a0 <HAL_GetTick>
 8003700:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003704:	f7fe f84c 	bl	80017a0 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e1f4      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003716:	f7ff fbfb 	bl	8002f10 <LL_RCC_HSI_IsReady>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f1      	bne.n	8003704 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d106      	bne.n	800373a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 80a3 	beq.w	8003880 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d076      	beq.n	8003830 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	2b00      	cmp	r3, #0
 800374c:	d046      	beq.n	80037dc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800374e:	f7ff fc7e 	bl	800304e <LL_RCC_LSI1_IsReady>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d113      	bne.n	8003780 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003758:	f7ff fc57 	bl	800300a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800375c:	f7fe f820 	bl	80017a0 <HAL_GetTick>
 8003760:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003764:	f7fe f81c 	bl	80017a0 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e1c4      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003776:	f7ff fc6a 	bl	800304e <LL_RCC_LSI1_IsReady>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f1      	beq.n	8003764 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003780:	f7ff fc77 	bl	8003072 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fe f80c 	bl	80017a0 <HAL_GetTick>
 8003788:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800378c:	f7fe f808 	bl	80017a0 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b03      	cmp	r3, #3
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e1b0      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800379e:	f7ff fc8a 	bl	80030b6 <LL_RCC_LSI2_IsReady>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f1      	beq.n	800378c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff fc94 	bl	80030da <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80037b2:	f7ff fc3b 	bl	800302c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b6:	f7fd fff3 	bl	80017a0 <HAL_GetTick>
 80037ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80037be:	f7fd ffef 	bl	80017a0 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e197      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80037d0:	f7ff fc3d 	bl	800304e <LL_RCC_LSI1_IsReady>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f1      	bne.n	80037be <HAL_RCC_OscConfig+0x31a>
 80037da:	e051      	b.n	8003880 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80037dc:	f7ff fc15 	bl	800300a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fd ffde 	bl	80017a0 <HAL_GetTick>
 80037e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80037e6:	e00c      	b.n	8003802 <HAL_RCC_OscConfig+0x35e>
 80037e8:	20000010 	.word	0x20000010
 80037ec:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80037f0:	f7fd ffd6 	bl	80017a0 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e17e      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003802:	f7ff fc24 	bl	800304e <LL_RCC_LSI1_IsReady>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f1      	beq.n	80037f0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800380c:	f7ff fc42 	bl	8003094 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003812:	f7fd ffc5 	bl	80017a0 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b03      	cmp	r3, #3
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e16d      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003824:	f7ff fc47 	bl	80030b6 <LL_RCC_LSI2_IsReady>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f1      	bne.n	8003812 <HAL_RCC_OscConfig+0x36e>
 800382e:	e027      	b.n	8003880 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003830:	f7ff fc30 	bl	8003094 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003834:	f7fd ffb4 	bl	80017a0 <HAL_GetTick>
 8003838:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800383c:	f7fd ffb0 	bl	80017a0 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b03      	cmp	r3, #3
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e158      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800384e:	f7ff fc32 	bl	80030b6 <LL_RCC_LSI2_IsReady>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1f1      	bne.n	800383c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003858:	f7ff fbe8 	bl	800302c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385c:	f7fd ffa0 	bl	80017a0 <HAL_GetTick>
 8003860:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003864:	f7fd ff9c 	bl	80017a0 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e144      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003876:	f7ff fbea 	bl	800304e <LL_RCC_LSI1_IsReady>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f1      	bne.n	8003864 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d05b      	beq.n	8003944 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800388c:	4b9e      	ldr	r3, [pc, #632]	; (8003b08 <HAL_RCC_OscConfig+0x664>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d114      	bne.n	80038c2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003898:	f7ff fa46 	bl	8002d28 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389c:	f7fd ff80 	bl	80017a0 <HAL_GetTick>
 80038a0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a4:	f7fd ff7c 	bl	80017a0 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e124      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038b6:	4b94      	ldr	r3, [pc, #592]	; (8003b08 <HAL_RCC_OscConfig+0x664>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d102      	bne.n	80038d0 <HAL_RCC_OscConfig+0x42c>
 80038ca:	f7ff fb48 	bl	8002f5e <LL_RCC_LSE_Enable>
 80038ce:	e00c      	b.n	80038ea <HAL_RCC_OscConfig+0x446>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b05      	cmp	r3, #5
 80038d6:	d104      	bne.n	80038e2 <HAL_RCC_OscConfig+0x43e>
 80038d8:	f7ff fb63 	bl	8002fa2 <LL_RCC_LSE_EnableBypass>
 80038dc:	f7ff fb3f 	bl	8002f5e <LL_RCC_LSE_Enable>
 80038e0:	e003      	b.n	80038ea <HAL_RCC_OscConfig+0x446>
 80038e2:	f7ff fb4d 	bl	8002f80 <LL_RCC_LSE_Disable>
 80038e6:	f7ff fb6d 	bl	8002fc4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d014      	beq.n	800391c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f2:	f7fd ff55 	bl	80017a0 <HAL_GetTick>
 80038f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80038f8:	e00a      	b.n	8003910 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fa:	f7fd ff51 	bl	80017a0 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f241 3288 	movw	r2, #5000	; 0x1388
 8003908:	4293      	cmp	r3, r2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e0f7      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003910:	f7ff fb69 	bl	8002fe6 <LL_RCC_LSE_IsReady>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0ef      	beq.n	80038fa <HAL_RCC_OscConfig+0x456>
 800391a:	e013      	b.n	8003944 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391c:	f7fd ff40 	bl	80017a0 <HAL_GetTick>
 8003920:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003922:	e00a      	b.n	800393a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003924:	f7fd ff3c 	bl	80017a0 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003932:	4293      	cmp	r3, r2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e0e2      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 800393a:	f7ff fb54 	bl	8002fe6 <LL_RCC_LSE_IsReady>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1ef      	bne.n	8003924 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 80d8 	beq.w	8003afe <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800394e:	f7ff fc5c 	bl	800320a <LL_RCC_GetSysClkSource>
 8003952:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003960:	2b02      	cmp	r3, #2
 8003962:	f040 80a6 	bne.w	8003ab2 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f003 0203 	and.w	r2, r3, #3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	429a      	cmp	r2, r3
 8003972:	d123      	bne.n	80039bc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	429a      	cmp	r2, r3
 8003980:	d11c      	bne.n	80039bc <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	0a1b      	lsrs	r3, r3, #8
 8003986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d114      	bne.n	80039bc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800399c:	429a      	cmp	r2, r3
 800399e:	d10d      	bne.n	80039bc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d106      	bne.n	80039bc <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d054      	beq.n	8003a66 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	2b0c      	cmp	r3, #12
 80039c0:	d04f      	beq.n	8003a62 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039c2:	f7ff fcc0 	bl	8003346 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039c6:	f7fd feeb 	bl	80017a0 <HAL_GetTick>
 80039ca:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ce:	f7fd fee7 	bl	80017a0 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e08f      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1ef      	bne.n	80039ce <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	4b45      	ldr	r3, [pc, #276]	; (8003b0c <HAL_RCC_OscConfig+0x668>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a00:	4311      	orrs	r1, r2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a06:	0212      	lsls	r2, r2, #8
 8003a08:	4311      	orrs	r1, r2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a0e:	4311      	orrs	r1, r2
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a14:	4311      	orrs	r1, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a24:	f7ff fc80 	bl	8003328 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a38:	f7fd feb2 	bl	80017a0 <HAL_GetTick>
 8003a3c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fd feae 	bl	80017a0 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e056      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0ef      	beq.n	8003a40 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a60:	e04d      	b.n	8003afe <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e04c      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d144      	bne.n	8003afe <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a74:	f7ff fc58 	bl	8003328 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a86:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a88:	f7fd fe8a 	bl	80017a0 <HAL_GetTick>
 8003a8c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a90:	f7fd fe86 	bl	80017a0 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e02e      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0ef      	beq.n	8003a90 <HAL_RCC_OscConfig+0x5ec>
 8003ab0:	e025      	b.n	8003afe <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b0c      	cmp	r3, #12
 8003ab6:	d020      	beq.n	8003afa <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab8:	f7ff fc45 	bl	8003346 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fd fe70 	bl	80017a0 <HAL_GetTick>
 8003ac0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fd fe6c 	bl	80017a0 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e014      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1ef      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8003ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	60d3      	str	r3, [r2, #12]
 8003af8:	e001      	b.n	8003afe <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3734      	adds	r7, #52	; 0x34
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd90      	pop	{r4, r7, pc}
 8003b08:	58000400 	.word	0x58000400
 8003b0c:	11c1808c 	.word	0x11c1808c

08003b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e12d      	b.n	8003d80 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b24:	4b98      	ldr	r3, [pc, #608]	; (8003d88 <HAL_RCC_ClockConfig+0x278>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d91b      	bls.n	8003b6a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b32:	4b95      	ldr	r3, [pc, #596]	; (8003d88 <HAL_RCC_ClockConfig+0x278>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 0207 	bic.w	r2, r3, #7
 8003b3a:	4993      	ldr	r1, [pc, #588]	; (8003d88 <HAL_RCC_ClockConfig+0x278>)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b42:	f7fd fe2d 	bl	80017a0 <HAL_GetTick>
 8003b46:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003b4a:	f7fd fe29 	bl	80017a0 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e111      	b.n	8003d80 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5c:	4b8a      	ldr	r3, [pc, #552]	; (8003d88 <HAL_RCC_ClockConfig+0x278>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d1ef      	bne.n	8003b4a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d016      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff fb51 	bl	8003222 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b80:	f7fd fe0e 	bl	80017a0 <HAL_GetTick>
 8003b84:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b88:	f7fd fe0a 	bl	80017a0 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e0f2      	b.n	8003d80 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003b9a:	f7ff fc26 	bl	80033ea <LL_RCC_IsActiveFlag_HPRE>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f1      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d016      	beq.n	8003bde <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7ff fb48 	bl	800324a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003bba:	f7fd fdf1 	bl	80017a0 <HAL_GetTick>
 8003bbe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003bc2:	f7fd fded 	bl	80017a0 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e0d5      	b.n	8003d80 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003bd4:	f7ff fc1b 	bl	800340e <LL_RCC_IsActiveFlag_C2HPRE>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f1      	beq.n	8003bc2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d016      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff fb41 	bl	8003276 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003bf4:	f7fd fdd4 	bl	80017a0 <HAL_GetTick>
 8003bf8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003bfc:	f7fd fdd0 	bl	80017a0 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e0b8      	b.n	8003d80 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003c0e:	f7ff fc11 	bl	8003434 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f1      	beq.n	8003bfc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d016      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff fb3b 	bl	80032a4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003c2e:	f7fd fdb7 	bl	80017a0 <HAL_GetTick>
 8003c32:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c36:	f7fd fdb3 	bl	80017a0 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e09b      	b.n	8003d80 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003c48:	f7ff fc07 	bl	800345a <LL_RCC_IsActiveFlag_PPRE1>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f1      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d017      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7ff fb31 	bl	80032cc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003c6a:	f7fd fd99 	bl	80017a0 <HAL_GetTick>
 8003c6e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c72:	f7fd fd95 	bl	80017a0 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e07d      	b.n	8003d80 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003c84:	f7ff fbfb 	bl	800347e <LL_RCC_IsActiveFlag_PPRE2>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0f1      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d043      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d106      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003ca2:	f7ff f905 	bl	8002eb0 <LL_RCC_HSE_IsReady>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d11e      	bne.n	8003cea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e067      	b.n	8003d80 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d106      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003cb8:	f7ff fb54 	bl	8003364 <LL_RCC_PLL_IsReady>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d113      	bne.n	8003cea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e05c      	b.n	8003d80 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d106      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003cce:	f7ff fa39 	bl	8003144 <LL_RCC_MSI_IsReady>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d108      	bne.n	8003cea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e051      	b.n	8003d80 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003cdc:	f7ff f918 	bl	8002f10 <LL_RCC_HSI_IsReady>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e04a      	b.n	8003d80 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff fa77 	bl	80031e2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf4:	f7fd fd54 	bl	80017a0 <HAL_GetTick>
 8003cf8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	e00a      	b.n	8003d12 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cfc:	f7fd fd50 	bl	80017a0 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e036      	b.n	8003d80 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	f7ff fa7a 	bl	800320a <LL_RCC_GetSysClkSource>
 8003d16:	4602      	mov	r2, r0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d1ec      	bne.n	8003cfc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d22:	4b19      	ldr	r3, [pc, #100]	; (8003d88 <HAL_RCC_ClockConfig+0x278>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d21b      	bcs.n	8003d68 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d30:	4b15      	ldr	r3, [pc, #84]	; (8003d88 <HAL_RCC_ClockConfig+0x278>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f023 0207 	bic.w	r2, r3, #7
 8003d38:	4913      	ldr	r1, [pc, #76]	; (8003d88 <HAL_RCC_ClockConfig+0x278>)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d40:	f7fd fd2e 	bl	80017a0 <HAL_GetTick>
 8003d44:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003d48:	f7fd fd2a 	bl	80017a0 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e012      	b.n	8003d80 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <HAL_RCC_ClockConfig+0x278>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d1ef      	bne.n	8003d48 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003d68:	f000 f87e 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	4a07      	ldr	r2, [pc, #28]	; (8003d8c <HAL_RCC_ClockConfig+0x27c>)
 8003d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003d72:	f7fd fd21 	bl	80017b8 <HAL_GetTickPrio>
 8003d76:	4603      	mov	r3, r0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fd fcc3 	bl	8001704 <HAL_InitTick>
 8003d7e:	4603      	mov	r3, r0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	58004000 	.word	0x58004000
 8003d8c:	20000010 	.word	0x20000010

08003d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d90:	b590      	push	{r4, r7, lr}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d96:	f7ff fa38 	bl	800320a <LL_RCC_GetSysClkSource>
 8003d9a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10a      	bne.n	8003db8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003da2:	f7ff f9f4 	bl	800318e <LL_RCC_MSI_GetRange>
 8003da6:	4603      	mov	r3, r0
 8003da8:	091b      	lsrs	r3, r3, #4
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	4a2b      	ldr	r2, [pc, #172]	; (8003e5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	e04b      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d102      	bne.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dbe:	4b28      	ldr	r3, [pc, #160]	; (8003e60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	e045      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d10a      	bne.n	8003de0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003dca:	f7ff f841 	bl	8002e50 <LL_RCC_HSE_IsEnabledDiv2>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d102      	bne.n	8003dda <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003dd4:	4b22      	ldr	r3, [pc, #136]	; (8003e60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	e03a      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003dda:	4b22      	ldr	r3, [pc, #136]	; (8003e64 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	e037      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003de0:	f7ff faf7 	bl	80033d2 <LL_RCC_PLL_GetMainSource>
 8003de4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d003      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0x64>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d003      	beq.n	8003dfa <HAL_RCC_GetSysClockFreq+0x6a>
 8003df2:	e00d      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003df4:	4b1a      	ldr	r3, [pc, #104]	; (8003e60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003df6:	60bb      	str	r3, [r7, #8]
        break;
 8003df8:	e015      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003dfa:	f7ff f829 	bl	8002e50 <LL_RCC_HSE_IsEnabledDiv2>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d102      	bne.n	8003e0a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003e04:	4b16      	ldr	r3, [pc, #88]	; (8003e60 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e06:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003e08:	e00d      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003e0a:	4b16      	ldr	r3, [pc, #88]	; (8003e64 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003e0c:	60bb      	str	r3, [r7, #8]
        break;
 8003e0e:	e00a      	b.n	8003e26 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003e10:	f7ff f9bd 	bl	800318e <LL_RCC_MSI_GetRange>
 8003e14:	4603      	mov	r3, r0
 8003e16:	091b      	lsrs	r3, r3, #4
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	4a0f      	ldr	r2, [pc, #60]	; (8003e5c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e22:	60bb      	str	r3, [r7, #8]
        break;
 8003e24:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003e26:	f7ff faaf 	bl	8003388 <LL_RCC_PLL_GetN>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	fb03 f402 	mul.w	r4, r3, r2
 8003e32:	f7ff fac2 	bl	80033ba <LL_RCC_PLL_GetDivider>
 8003e36:	4603      	mov	r3, r0
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	fbb4 f4f3 	udiv	r4, r4, r3
 8003e40:	f7ff faaf 	bl	80033a2 <LL_RCC_PLL_GetR>
 8003e44:	4603      	mov	r3, r0
 8003e46:	0f5b      	lsrs	r3, r3, #29
 8003e48:	3301      	adds	r3, #1
 8003e4a:	fbb4 f3f3 	udiv	r3, r4, r3
 8003e4e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003e50:	68fb      	ldr	r3, [r7, #12]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd90      	pop	{r4, r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	080076f4 	.word	0x080076f4
 8003e60:	00f42400 	.word	0x00f42400
 8003e64:	01e84800 	.word	0x01e84800

08003e68 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e68:	b598      	push	{r3, r4, r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003e6c:	f7ff ff90 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003e70:	4604      	mov	r4, r0
 8003e72:	f7ff fa3f 	bl	80032f4 <LL_RCC_GetAHBPrescaler>
 8003e76:	4603      	mov	r3, r0
 8003e78:	091b      	lsrs	r3, r3, #4
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	4a03      	ldr	r2, [pc, #12]	; (8003e8c <HAL_RCC_GetHCLKFreq+0x24>)
 8003e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e84:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	bd98      	pop	{r3, r4, r7, pc}
 8003e8c:	080076b4 	.word	0x080076b4

08003e90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2bb0      	cmp	r3, #176	; 0xb0
 8003e9c:	d903      	bls.n	8003ea6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003e9e:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	e007      	b.n	8003eb6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	4a10      	ldr	r2, [pc, #64]	; (8003ef0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003eb6:	f7ff fa29 	bl	800330c <LL_RCC_GetAHB4Prescaler>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	4a0c      	ldr	r2, [pc, #48]	; (8003ef4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ece:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed8:	0c9b      	lsrs	r3, r3, #18
 8003eda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 f80c 	bl	8003efc <RCC_SetFlashLatency>
 8003ee4:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	080076f4 	.word	0x080076f4
 8003ef4:	080076b4 	.word	0x080076b4
 8003ef8:	431bde83 	.word	0x431bde83

08003efc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b08f      	sub	sp, #60	; 0x3c
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003f06:	4b24      	ldr	r3, [pc, #144]	; (8003f98 <RCC_SetFlashLatency+0x9c>)
 8003f08:	f107 041c 	add.w	r4, r7, #28
 8003f0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003f12:	4b22      	ldr	r3, [pc, #136]	; (8003f9c <RCC_SetFlashLatency+0xa0>)
 8003f14:	f107 040c 	add.w	r4, r7, #12
 8003f18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003f1e:	2300      	movs	r3, #0
 8003f20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f22:	2300      	movs	r3, #0
 8003f24:	633b      	str	r3, [r7, #48]	; 0x30
 8003f26:	e013      	b.n	8003f50 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	3338      	adds	r3, #56	; 0x38
 8003f2e:	443b      	add	r3, r7
 8003f30:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d807      	bhi.n	8003f4a <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	3338      	adds	r3, #56	; 0x38
 8003f40:	443b      	add	r3, r7
 8003f42:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003f46:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8003f48:	e005      	b.n	8003f56 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	633b      	str	r3, [r7, #48]	; 0x30
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d9e8      	bls.n	8003f28 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <RCC_SetFlashLatency+0xa4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f023 0207 	bic.w	r2, r3, #7
 8003f5e:	4910      	ldr	r1, [pc, #64]	; (8003fa0 <RCC_SetFlashLatency+0xa4>)
 8003f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f66:	f7fd fc1b 	bl	80017a0 <HAL_GetTick>
 8003f6a:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003f6c:	e008      	b.n	8003f80 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003f6e:	f7fd fc17 	bl	80017a0 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e007      	b.n	8003f90 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003f80:	4b07      	ldr	r3, [pc, #28]	; (8003fa0 <RCC_SetFlashLatency+0xa4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0307 	and.w	r3, r3, #7
 8003f88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d1ef      	bne.n	8003f6e <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	373c      	adds	r7, #60	; 0x3c
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd90      	pop	{r4, r7, pc}
 8003f98:	080074dc 	.word	0x080074dc
 8003f9c:	080074ec 	.word	0x080074ec
 8003fa0:	58004000 	.word	0x58004000

08003fa4 <LL_RCC_LSE_IsEnabled>:
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <LL_RCC_LSE_IsEnabled+0x18>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <LL_RCC_LSE_IsEnabled+0x1a>
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr

08003fc8 <LL_RCC_LSE_IsReady>:
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d101      	bne.n	8003fe0 <LL_RCC_LSE_IsReady+0x18>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e000      	b.n	8003fe2 <LL_RCC_LSE_IsReady+0x1a>
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <LL_RCC_SetRFWKPClockSource>:
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ffc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004000:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4313      	orrs	r3, r2
 8004008:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <LL_RCC_SetSMPSClockSource>:
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	f023 0203 	bic.w	r2, r3, #3
 800402a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4313      	orrs	r3, r2
 8004032:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <LL_RCC_SetSMPSPrescaler>:
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004048:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4313      	orrs	r3, r2
 800405a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800405c:	bf00      	nop
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <LL_RCC_SetUSARTClockSource>:
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004078:	f023 0203 	bic.w	r2, r3, #3
 800407c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <LL_RCC_SetLPUARTClockSource>:
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800409c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <LL_RCC_SetI2CClockSource>:
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80040c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80040d8:	43db      	mvns	r3, r3
 80040da:	401a      	ands	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80040e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <LL_RCC_SetLPTIMClockSource>:
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004106:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	0c1b      	lsrs	r3, r3, #16
 800410e:	041b      	lsls	r3, r3, #16
 8004110:	43db      	mvns	r3, r3
 8004112:	401a      	ands	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	041b      	lsls	r3, r3, #16
 8004118:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800411c:	4313      	orrs	r3, r2
 800411e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <LL_RCC_SetRNGClockSource>:
{
 800412e:	b480      	push	{r7}
 8004130:	b083      	sub	sp, #12
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <LL_RCC_SetCLK48ClockSource>:
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800416e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <LL_RCC_SetADCClockSource>:
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800418e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004196:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800419a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <LL_RCC_SetRTCClockSource>:
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80041ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <LL_RCC_GetRTCClockSource>:
{
 80041de:	b480      	push	{r7}
 80041e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80041e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <LL_RCC_ForceBackupDomainReset>:
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80041fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004210:	bf00      	nop
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <LL_RCC_ReleaseBackupDomainReset>:
{
 800421a:	b480      	push	{r7}
 800421c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800421e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004226:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800422a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004232:	bf00      	nop
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004244:	2300      	movs	r3, #0
 8004246:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004248:	2300      	movs	r3, #0
 800424a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004254:	2b00      	cmp	r3, #0
 8004256:	d046      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004258:	f7ff ffc1 	bl	80041de <LL_RCC_GetRTCClockSource>
 800425c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	429a      	cmp	r2, r3
 8004266:	d03c      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004268:	f7fe fd5e 	bl	8002d28 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d105      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	4618      	mov	r0, r3
 8004278:	f7ff ff9b 	bl	80041b2 <LL_RCC_SetRTCClockSource>
 800427c:	e02e      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800427e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004286:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004288:	f7ff ffb6 	bl	80041f8 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800428c:	f7ff ffc5 	bl	800421a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800429e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80042a8:	f7ff fe7c 	bl	8003fa4 <LL_RCC_LSE_IsEnabled>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d114      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042b2:	f7fd fa75 	bl	80017a0 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80042b8:	e00b      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ba:	f7fd fa71 	bl	80017a0 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d902      	bls.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	77fb      	strb	r3, [r7, #31]
              break;
 80042d0:	e004      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 80042d2:	f7ff fe79 	bl	8003fc8 <LL_RCC_LSE_IsReady>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d1ee      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80042dc:	7ffb      	ldrb	r3, [r7, #31]
 80042de:	77bb      	strb	r3, [r7, #30]
 80042e0:	e001      	b.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e2:	7ffb      	ldrb	r3, [r7, #31]
 80042e4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d004      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff feb6 	bl	8004068 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d004      	beq.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff fec1 	bl	8004094 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0310 	and.w	r3, r3, #16
 800431a:	2b00      	cmp	r3, #0
 800431c:	d004      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff fee9 	bl	80040fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b00      	cmp	r3, #0
 8004332:	d004      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff fede 	bl	80040fa <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d004      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff feb6 	bl	80040c0 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800435c:	2b00      	cmp	r3, #0
 800435e:	d02b      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004368:	d008      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x140>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004372:	d003      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x140>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d105      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fed4 	bl	800412e <LL_RCC_SetRNGClockSource>
 8004386:	e00a      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	2000      	movs	r0, #0
 8004394:	f7ff fecb 	bl	800412e <LL_RCC_SetRNGClockSource>
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f7ff fede 	bl	800415a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80043a6:	d107      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80043a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d011      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff fedc 	bl	8004186 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043d6:	d107      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e6:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d004      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fdf7 	bl	8003fec <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d009      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff fe16 	bl	8004040 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff fdfd 	bl	8004018 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800441e:	7fbb      	ldrb	r3, [r7, #30]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3720      	adds	r7, #32
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e090      	b.n	800455c <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d106      	bne.n	8004454 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7fd f824 	bl	800149c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	22ca      	movs	r2, #202	; 0xca
 8004462:	625a      	str	r2, [r3, #36]	; 0x24
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2253      	movs	r2, #83	; 0x53
 800446a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f89f 	bl	80045b0 <RTC_EnterInitMode>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d009      	beq.n	800448c <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	22ff      	movs	r2, #255	; 0xff
 800447e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2204      	movs	r2, #4
 8004484:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e067      	b.n	800455c <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6812      	ldr	r2, [r2, #0]
 8004496:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800449a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800449e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6899      	ldr	r1, [r3, #8]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	68d2      	ldr	r2, [r2, #12]
 80044c6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6919      	ldr	r1, [r3, #16]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	041a      	lsls	r2, r3, #16
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044ea:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0202 	bic.w	r2, r2, #2
 80044fa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69da      	ldr	r2, [r3, #28]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 0320 	and.w	r3, r3, #32
 800451e:	2b00      	cmp	r3, #0
 8004520:	d113      	bne.n	800454a <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f81e 	bl	8004564 <HAL_RTC_WaitForSynchro>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00d      	beq.n	800454a <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	22ff      	movs	r2, #255	; 0xff
 8004534:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2204      	movs	r2, #4
 800453a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e008      	b.n	800455c <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	22ff      	movs	r2, #255	; 0xff
 8004550:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800455a:	2300      	movs	r3, #0
  }
}
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800457a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800457c:	f7fd f910 	bl	80017a0 <HAL_GetTick>
 8004580:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004582:	e009      	b.n	8004598 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004584:	f7fd f90c 	bl	80017a0 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004592:	d901      	bls.n	8004598 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e007      	b.n	80045a8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0ee      	beq.n	8004584 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d119      	bne.n	80045fa <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f04f 32ff 	mov.w	r2, #4294967295
 80045ce:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80045d0:	f7fd f8e6 	bl	80017a0 <HAL_GetTick>
 80045d4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80045d6:	e009      	b.n	80045ec <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80045d8:	f7fd f8e2 	bl	80017a0 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045e6:	d901      	bls.n	80045ec <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e007      	b.n	80045fc <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0ee      	beq.n	80045d8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800461a:	2302      	movs	r3, #2
 800461c:	e0a8      	b.n	8004770 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2202      	movs	r2, #2
 800462a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	22ca      	movs	r2, #202	; 0xca
 8004634:	625a      	str	r2, [r3, #36]	; 0x24
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2253      	movs	r2, #83	; 0x53
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004648:	2b00      	cmp	r3, #0
 800464a:	d020      	beq.n	800468e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800464c:	f7fd f8a8 	bl	80017a0 <HAL_GetTick>
 8004650:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004652:	e015      	b.n	8004680 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004654:	f7fd f8a4 	bl	80017a0 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004662:	d90d      	bls.n	8004680 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	22ff      	movs	r2, #255	; 0xff
 800466a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2203      	movs	r2, #3
 8004670:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e077      	b.n	8004770 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e2      	bne.n	8004654 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800469c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80046ae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80046b0:	f7fd f876 	bl	80017a0 <HAL_GetTick>
 80046b4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80046b6:	e015      	b.n	80046e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80046b8:	f7fd f872 	bl	80017a0 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046c6:	d90d      	bls.n	80046e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	22ff      	movs	r2, #255	; 0xff
 80046ce:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2203      	movs	r2, #3
 80046d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e045      	b.n	8004770 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0e2      	beq.n	80046b8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0207 	bic.w	r2, r2, #7
 8004708:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6899      	ldr	r1, [r3, #8]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	430a      	orrs	r2, r1
 8004718:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800471a:	4b17      	ldr	r3, [pc, #92]	; (8004778 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800471c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004720:	4a15      	ldr	r2, [pc, #84]	; (8004778 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004722:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004726:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800472a:	4b13      	ldr	r3, [pc, #76]	; (8004778 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a12      	ldr	r2, [pc, #72]	; (8004778 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8004730:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004734:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004744:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004754:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	22ff      	movs	r2, #255	; 0xff
 800475c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	58000800 	.word	0x58000800

0800477c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 3020 	ldrb.w	r3, [r3, #32]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800478e:	2302      	movs	r3, #2
 8004790:	e04d      	b.n	800482e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2202      	movs	r2, #2
 800479e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	22ca      	movs	r2, #202	; 0xca
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2253      	movs	r2, #83	; 0x53
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c0:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047d0:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80047d2:	f7fc ffe5 	bl	80017a0 <HAL_GetTick>
 80047d6:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80047d8:	e015      	b.n	8004806 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047da:	f7fc ffe1 	bl	80017a0 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047e8:	d90d      	bls.n	8004806 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	22ff      	movs	r2, #255	; 0xff
 80047f0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2203      	movs	r2, #3
 80047f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e013      	b.n	800482e <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0e2      	beq.n	80047da <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	22ff      	movs	r2, #255	; 0xff
 800481a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00b      	beq.n	8004866 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f818 	bl	8004884 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	b2da      	uxtb	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004864:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004866:	4b06      	ldr	r3, [pc, #24]	; (8004880 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8004868:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800486c:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004876:	bf00      	nop
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	58000800 	.word	0x58000800

08004884 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8004898:	b5b0      	push	{r4, r5, r7, lr}
 800489a:	b0ce      	sub	sp, #312	; 0x138
 800489c:	af00      	add	r7, sp, #0
 800489e:	4605      	mov	r5, r0
 80048a0:	460c      	mov	r4, r1
 80048a2:	4610      	mov	r0, r2
 80048a4:	4619      	mov	r1, r3
 80048a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80048aa:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80048ae:	462a      	mov	r2, r5
 80048b0:	701a      	strb	r2, [r3, #0]
 80048b2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80048b6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80048ba:	4622      	mov	r2, r4
 80048bc:	801a      	strh	r2, [r3, #0]
 80048be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80048c2:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80048c6:	4602      	mov	r2, r0
 80048c8:	801a      	strh	r2, [r3, #0]
 80048ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80048ce:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80048d2:	460a      	mov	r2, r1
 80048d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80048d6:	f107 0310 	add.w	r3, r7, #16
 80048da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80048de:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80048e2:	3308      	adds	r3, #8
 80048e4:	f107 0210 	add.w	r2, r7, #16
 80048e8:	4413      	add	r3, r2
 80048ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80048ee:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80048f2:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80048f6:	4413      	add	r3, r2
 80048f8:	3309      	adds	r3, #9
 80048fa:	f107 0210 	add.w	r2, r7, #16
 80048fe:	4413      	add	r3, r2
 8004900:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004904:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004908:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800490c:	2200      	movs	r2, #0
 800490e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8004916:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800491a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800491e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8004922:	7812      	ldrb	r2, [r2, #0]
 8004924:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004926:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800492a:	3301      	adds	r3, #1
 800492c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8004930:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004934:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004938:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800493c:	8812      	ldrh	r2, [r2, #0]
 800493e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8004942:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004946:	3302      	adds	r3, #2
 8004948:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800494c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004950:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004954:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8004958:	8812      	ldrh	r2, [r2, #0]
 800495a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800495e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004962:	3302      	adds	r3, #2
 8004964:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8004968:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800496c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004970:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8004974:	7812      	ldrb	r2, [r2, #0]
 8004976:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004978:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800497c:	3301      	adds	r3, #1
 800497e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8004982:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004986:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800498a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800498c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004990:	3301      	adds	r3, #1
 8004992:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8004996:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800499a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800499e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80049a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049a4:	3301      	adds	r3, #1
 80049a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80049aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80049ae:	3308      	adds	r3, #8
 80049b0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80049b4:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fc21 	bl	8005200 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80049be:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80049c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80049c6:	4413      	add	r3, r2
 80049c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80049cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80049d0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80049d4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80049d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049da:	3301      	adds	r3, #1
 80049dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80049e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80049e4:	3301      	adds	r3, #1
 80049e6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80049ea:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fc06 	bl	8005200 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80049f4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80049f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80049fc:	4413      	add	r3, r2
 80049fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8004a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a06:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8004a0a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004a0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a10:	3302      	adds	r3, #2
 8004a12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8004a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a1a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8004a1e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8004a20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a24:	3302      	adds	r3, #2
 8004a26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004a2a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a2e:	2218      	movs	r2, #24
 8004a30:	2100      	movs	r1, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fbf4 	bl	8005220 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004a38:	233f      	movs	r3, #63	; 0x3f
 8004a3a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8004a3e:	2383      	movs	r3, #131	; 0x83
 8004a40:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004a44:	f107 0310 	add.w	r3, r7, #16
 8004a48:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004a4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a50:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004a54:	f107 030f 	add.w	r3, r7, #15
 8004a58:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004a62:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a66:	2100      	movs	r1, #0
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fe4f 	bl	800570c <hci_send_req>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	da01      	bge.n	8004a78 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8004a74:	23ff      	movs	r3, #255	; 0xff
 8004a76:	e004      	b.n	8004a82 <aci_gap_set_discoverable+0x1ea>
  return status;
 8004a78:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004a7c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004a80:	781b      	ldrb	r3, [r3, #0]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bdb0      	pop	{r4, r5, r7, pc}

08004a8c <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8004a8c:	b590      	push	{r4, r7, lr}
 8004a8e:	b0cd      	sub	sp, #308	; 0x134
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4604      	mov	r4, r0
 8004a94:	4608      	mov	r0, r1
 8004a96:	4611      	mov	r1, r2
 8004a98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a9c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8004aa0:	6013      	str	r3, [r2, #0]
 8004aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004aaa:	4622      	mov	r2, r4
 8004aac:	701a      	strb	r2, [r3, #0]
 8004aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	701a      	strb	r2, [r3, #0]
 8004aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004abe:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8004ac2:	460a      	mov	r2, r1
 8004ac4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8004ac6:	f107 0310 	add.w	r3, r7, #16
 8004aca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004ace:	f107 0308 	add.w	r3, r7, #8
 8004ad2:	2207      	movs	r2, #7
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 fba2 	bl	8005220 <Osal_MemSet>
  int index_input = 0;
 8004adc:	2300      	movs	r3, #0
 8004ade:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8004ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ae6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004aea:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004aee:	7812      	ldrb	r2, [r2, #0]
 8004af0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004af2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004af6:	3301      	adds	r3, #1
 8004af8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8004afc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b00:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b04:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004b08:	7812      	ldrb	r2, [r2, #0]
 8004b0a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004b0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b10:	3301      	adds	r3, #1
 8004b12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8004b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b1a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b1e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8004b22:	7812      	ldrb	r2, [r2, #0]
 8004b24:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004b26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004b30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b34:	2218      	movs	r2, #24
 8004b36:	2100      	movs	r1, #0
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fb71 	bl	8005220 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004b3e:	233f      	movs	r3, #63	; 0x3f
 8004b40:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8004b44:	238a      	movs	r3, #138	; 0x8a
 8004b46:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004b4a:	f107 0310 	add.w	r3, r7, #16
 8004b4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004b52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004b5a:	f107 0308 	add.w	r3, r7, #8
 8004b5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8004b62:	2307      	movs	r3, #7
 8004b64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004b68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fdcc 	bl	800570c <hci_send_req>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	da01      	bge.n	8004b7e <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8004b7a:	23ff      	movs	r3, #255	; 0xff
 8004b7c:	e02e      	b.n	8004bdc <aci_gap_init+0x150>
  if ( resp.Status )
 8004b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <aci_gap_init+0x10c>
    return resp.Status;
 8004b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b90:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	e021      	b.n	8004bdc <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8004b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b9c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004ba0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004baa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8004bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004bba:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004bc4:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8004bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004bce:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004bd8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd90      	pop	{r4, r7, pc}

08004be6 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b0cc      	sub	sp, #304	; 0x130
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	4602      	mov	r2, r0
 8004bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf6:	6019      	str	r1, [r3, #0]
 8004bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bfc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004c00:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8004c02:	f107 0310 	add.w	r3, r7, #16
 8004c06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c0e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004c12:	2200      	movs	r2, #0
 8004c14:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004c16:	2300      	movs	r3, #0
 8004c18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8004c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c20:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c24:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004c28:	7812      	ldrb	r2, [r2, #0]
 8004c2a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004c2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c30:	3301      	adds	r3, #1
 8004c32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8004c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c3a:	1c58      	adds	r0, r3, #1
 8004c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c40:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004c44:	781a      	ldrb	r2, [r3, #0]
 8004c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c4e:	6819      	ldr	r1, [r3, #0]
 8004c50:	f000 fad6 	bl	8005200 <Osal_MemCpy>
  index_input += AdvDataLen;
 8004c54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c58:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004c62:	4413      	add	r3, r2
 8004c64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004c68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c6c:	2218      	movs	r2, #24
 8004c6e:	2100      	movs	r1, #0
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 fad5 	bl	8005220 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004c76:	233f      	movs	r3, #63	; 0x3f
 8004c78:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8004c7c:	238e      	movs	r3, #142	; 0x8e
 8004c7e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004c82:	f107 0310 	add.w	r3, r7, #16
 8004c86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004c8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004c92:	f107 030f 	add.w	r3, r7, #15
 8004c96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004ca0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fd30 	bl	800570c <hci_send_req>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	da01      	bge.n	8004cb6 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8004cb2:	23ff      	movs	r3, #255	; 0xff
 8004cb4:	e004      	b.n	8004cc0 <aci_gap_update_adv_data+0xda>
  return status;
 8004cb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004cbe:	781b      	ldrb	r3, [r3, #0]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <aci_gap_delete_ad_type>:

tBleStatus aci_gap_delete_ad_type( uint8_t ADType )
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b0cc      	sub	sp, #304	; 0x130
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004cda:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_delete_ad_type_cp0 *cp0 = (aci_gap_delete_ad_type_cp0*)(cmd_buffer);
 8004cdc:	f107 0310 	add.w	r3, r7, #16
 8004ce0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004cec:	2200      	movs	r2, #0
 8004cee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ADType = ADType;
 8004cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cfa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004cfe:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004d02:	7812      	ldrb	r2, [r2, #0]
 8004d04:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004d06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004d10:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d14:	2218      	movs	r2, #24
 8004d16:	2100      	movs	r1, #0
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fa81 	bl	8005220 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004d1e:	233f      	movs	r3, #63	; 0x3f
 8004d20:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08f;
 8004d24:	238f      	movs	r3, #143	; 0x8f
 8004d26:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004d2a:	f107 0310 	add.w	r3, r7, #16
 8004d2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004d32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004d3a:	f107 030f 	add.w	r3, r7, #15
 8004d3e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004d42:	2301      	movs	r3, #1
 8004d44:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004d48:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 fcdc 	bl	800570c <hci_send_req>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	da01      	bge.n	8004d5e <aci_gap_delete_ad_type+0x94>
    return BLE_STATUS_TIMEOUT;
 8004d5a:	23ff      	movs	r3, #255	; 0xff
 8004d5c:	e004      	b.n	8004d68 <aci_gap_delete_ad_type+0x9e>
  return status;
 8004d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d62:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004d66:	781b      	ldrb	r3, [r3, #0]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b088      	sub	sp, #32
 8004d76:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004d7c:	f107 0308 	add.w	r3, r7, #8
 8004d80:	2218      	movs	r2, #24
 8004d82:	2100      	movs	r1, #0
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fa4b 	bl	8005220 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004d8a:	233f      	movs	r3, #63	; 0x3f
 8004d8c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8004d8e:	f240 1301 	movw	r3, #257	; 0x101
 8004d92:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004d94:	1dfb      	adds	r3, r7, #7
 8004d96:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004d9c:	f107 0308 	add.w	r3, r7, #8
 8004da0:	2100      	movs	r1, #0
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fcb2 	bl	800570c <hci_send_req>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	da01      	bge.n	8004db2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8004dae:	23ff      	movs	r3, #255	; 0xff
 8004db0:	e000      	b.n	8004db4 <aci_gatt_init+0x42>
  return status;
 8004db2:	79fb      	ldrb	r3, [r7, #7]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3720      	adds	r7, #32
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8004dbc:	b5b0      	push	{r4, r5, r7, lr}
 8004dbe:	b0cc      	sub	sp, #304	; 0x130
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	4605      	mov	r5, r0
 8004dc4:	460c      	mov	r4, r1
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	4619      	mov	r1, r3
 8004dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dce:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004dd2:	462a      	mov	r2, r5
 8004dd4:	801a      	strh	r2, [r3, #0]
 8004dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dda:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dde:	4622      	mov	r2, r4
 8004de0:	801a      	strh	r2, [r3, #0]
 8004de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de6:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8004dea:	4602      	mov	r2, r0
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004df6:	460a      	mov	r2, r1
 8004df8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8004dfa:	f107 0310 	add.w	r3, r7, #16
 8004dfe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e06:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8004e14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e18:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e1c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004e20:	8812      	ldrh	r2, [r2, #0]
 8004e22:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004e24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e28:	3302      	adds	r3, #2
 8004e2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8004e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e32:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e36:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e3a:	8812      	ldrh	r2, [r2, #0]
 8004e3c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8004e3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e42:	3302      	adds	r3, #2
 8004e44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8004e48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e4c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e50:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8004e54:	7812      	ldrb	r2, [r2, #0]
 8004e56:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004e58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8004e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e6a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8004e6e:	7812      	ldrb	r2, [r2, #0]
 8004e70:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004e72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e76:	3301      	adds	r3, #1
 8004e78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8004e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e80:	1d98      	adds	r0, r3, #6
 8004e82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e86:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004e92:	f000 f9b5 	bl	8005200 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8004e96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e9a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004eaa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004eae:	2218      	movs	r2, #24
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 f9b4 	bl	8005220 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004eb8:	233f      	movs	r3, #63	; 0x3f
 8004eba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8004ebe:	f44f 7383 	mov.w	r3, #262	; 0x106
 8004ec2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004ec6:	f107 0310 	add.w	r3, r7, #16
 8004eca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004ece:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ed2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004ed6:	f107 030f 	add.w	r3, r7, #15
 8004eda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004ee4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ee8:	2100      	movs	r1, #0
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fc0e 	bl	800570c <hci_send_req>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	da01      	bge.n	8004efa <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8004ef6:	23ff      	movs	r3, #255	; 0xff
 8004ef8:	e004      	b.n	8004f04 <aci_gatt_update_char_value+0x148>
  return status;
 8004efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004efe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004f02:	781b      	ldrb	r3, [r3, #0]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bdb0      	pop	{r4, r5, r7, pc}

08004f0e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b0cc      	sub	sp, #304	; 0x130
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f22:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004f26:	4602      	mov	r2, r0
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f2e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004f32:	460a      	mov	r2, r1
 8004f34:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8004f36:	f107 0310 	add.w	r3, r7, #16
 8004f3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f42:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004f46:	2200      	movs	r2, #0
 8004f48:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8004f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f54:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f58:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004f5c:	7812      	ldrb	r2, [r2, #0]
 8004f5e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004f60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f64:	3301      	adds	r3, #1
 8004f66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8004f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f72:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004f76:	7812      	ldrb	r2, [r2, #0]
 8004f78:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004f7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f7e:	3301      	adds	r3, #1
 8004f80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8004f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f88:	1c98      	adds	r0, r3, #2
 8004f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f8e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004f92:	781a      	ldrb	r2, [r3, #0]
 8004f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f9c:	6819      	ldr	r1, [r3, #0]
 8004f9e:	f000 f92f 	bl	8005200 <Osal_MemCpy>
  index_input += Length;
 8004fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004fb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004fba:	2218      	movs	r2, #24
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 f92e 	bl	8005220 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004fc4:	233f      	movs	r3, #63	; 0x3f
 8004fc6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8004fca:	230c      	movs	r3, #12
 8004fcc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004fd0:	f107 0310 	add.w	r3, r7, #16
 8004fd4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004fd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fdc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004fe0:	f107 030f 	add.w	r3, r7, #15
 8004fe4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004fee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fb89 	bl	800570c <hci_send_req>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	da01      	bge.n	8005004 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8005000:	23ff      	movs	r3, #255	; 0xff
 8005002:	e004      	b.n	800500e <aci_hal_write_config_data+0x100>
  return status;
 8005004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005008:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800500c:	781b      	ldrb	r3, [r3, #0]
}
 800500e:	4618      	mov	r0, r3
 8005010:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b0cc      	sub	sp, #304	; 0x130
 800501c:	af00      	add	r7, sp, #0
 800501e:	4602      	mov	r2, r0
 8005020:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005024:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005028:	701a      	strb	r2, [r3, #0]
 800502a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005032:	460a      	mov	r2, r1
 8005034:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8005036:	f107 0310 	add.w	r3, r7, #16
 800503a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800503e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005042:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005046:	2200      	movs	r2, #0
 8005048:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8005050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005054:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005058:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800505c:	7812      	ldrb	r2, [r2, #0]
 800505e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005060:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005064:	3301      	adds	r3, #1
 8005066:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800506a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800506e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005072:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005076:	7812      	ldrb	r2, [r2, #0]
 8005078:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800507a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800507e:	3301      	adds	r3, #1
 8005080:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005084:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005088:	2218      	movs	r2, #24
 800508a:	2100      	movs	r1, #0
 800508c:	4618      	mov	r0, r3
 800508e:	f000 f8c7 	bl	8005220 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005092:	233f      	movs	r3, #63	; 0x3f
 8005094:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8005098:	230f      	movs	r3, #15
 800509a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800509e:	f107 0310 	add.w	r3, r7, #16
 80050a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80050a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80050ae:	f107 030f 	add.w	r3, r7, #15
 80050b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80050bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050c0:	2100      	movs	r1, #0
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fb22 	bl	800570c <hci_send_req>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	da01      	bge.n	80050d2 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80050ce:	23ff      	movs	r3, #255	; 0xff
 80050d0:	e004      	b.n	80050dc <aci_hal_set_tx_power_level+0xc4>
  return status;
 80050d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80050da:	781b      	ldrb	r3, [r3, #0]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b088      	sub	sp, #32
 80050ea:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80050f0:	f107 0308 	add.w	r3, r7, #8
 80050f4:	2218      	movs	r2, #24
 80050f6:	2100      	movs	r1, #0
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 f891 	bl	8005220 <Osal_MemSet>
  rq.ogf = 0x03;
 80050fe:	2303      	movs	r3, #3
 8005100:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8005102:	2303      	movs	r3, #3
 8005104:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005106:	1dfb      	adds	r3, r7, #7
 8005108:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800510a:	2301      	movs	r3, #1
 800510c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800510e:	f107 0308 	add.w	r3, r7, #8
 8005112:	2100      	movs	r1, #0
 8005114:	4618      	mov	r0, r3
 8005116:	f000 faf9 	bl	800570c <hci_send_req>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	da01      	bge.n	8005124 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005120:	23ff      	movs	r3, #255	; 0xff
 8005122:	e000      	b.n	8005126 <hci_reset+0x40>
  return status;
 8005124:	79fb      	ldrb	r3, [r7, #7]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3720      	adds	r7, #32
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <hci_le_set_scan_response_data>:
  return status;
}

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b0cc      	sub	sp, #304	; 0x130
 8005132:	af00      	add	r7, sp, #0
 8005134:	4602      	mov	r2, r0
 8005136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800513a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800513e:	6019      	str	r1, [r3, #0]
 8005140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005144:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005148:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 800514a:	f107 0310 	add.w	r3, r7, #16
 800514e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005156:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800515a:	2200      	movs	r2, #0
 800515c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800515e:	2300      	movs	r3, #0
 8005160:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 8005164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005168:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800516c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005170:	7812      	ldrb	r2, [r2, #0]
 8005172:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005174:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005178:	3301      	adds	r3, #1
 800517a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 800517e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005182:	1c58      	adds	r0, r3, #1
 8005184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005188:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518c:	221f      	movs	r2, #31
 800518e:	6819      	ldr	r1, [r3, #0]
 8005190:	f000 f836 	bl	8005200 <Osal_MemCpy>
  index_input += 31;
 8005194:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005198:	331f      	adds	r3, #31
 800519a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800519e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051a2:	2218      	movs	r2, #24
 80051a4:	2100      	movs	r1, #0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 f83a 	bl	8005220 <Osal_MemSet>
  rq.ogf = 0x08;
 80051ac:	2308      	movs	r3, #8
 80051ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 80051b2:	2309      	movs	r3, #9
 80051b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80051b8:	f107 0310 	add.w	r3, r7, #16
 80051bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80051c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80051c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80051c8:	f107 030f 	add.w	r3, r7, #15
 80051cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80051d0:	2301      	movs	r3, #1
 80051d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80051d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051da:	2100      	movs	r1, #0
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 fa95 	bl	800570c <hci_send_req>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	da01      	bge.n	80051ec <hci_le_set_scan_response_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 80051e8:	23ff      	movs	r3, #255	; 0xff
 80051ea:	e004      	b.n	80051f6 <hci_le_set_scan_response_data+0xc8>
  return status;
 80051ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80051f4:	781b      	ldrb	r3, [r3, #0]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f002 f933 	bl	800747c <memcpy>
 8005216:	4603      	mov	r3, r0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3710      	adds	r7, #16
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f002 f931 	bl	8007498 <memset>
 8005236:	4603      	mov	r3, r0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
  return;
 8005244:	bf00      	nop
}
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800524e:	b480      	push	{r7}
 8005250:	af00      	add	r7, sp, #0
  return;
 8005252:	bf00      	nop
}
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  return;
 8005260:	bf00      	nop
}
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800526a:	b480      	push	{r7}
 800526c:	af00      	add	r7, sp, #0
  return;
 800526e:	bf00      	nop
}
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8005278:	b480      	push	{r7}
 800527a:	af00      	add	r7, sp, #0
  return;
 800527c:	bf00      	nop
}
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr

08005286 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8005286:	b480      	push	{r7}
 8005288:	af00      	add	r7, sp, #0
  return;
 800528a:	bf00      	nop
}
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8005294:	b480      	push	{r7}
 8005296:	af00      	add	r7, sp, #0
  return;
 8005298:	bf00      	nop
}
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80052a2:	b480      	push	{r7}
 80052a4:	af00      	add	r7, sp, #0
  return;
 80052a6:	bf00      	nop
}
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  return;
 80052b4:	bf00      	nop
}
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr

080052be <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80052be:	b480      	push	{r7}
 80052c0:	af00      	add	r7, sp, #0
  return;
 80052c2:	bf00      	nop
}
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80052cc:	b480      	push	{r7}
 80052ce:	af00      	add	r7, sp, #0
  return;
 80052d0:	bf00      	nop
}
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80052da:	b480      	push	{r7}
 80052dc:	af00      	add	r7, sp, #0
  return;
 80052de:	bf00      	nop
}
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  return;
 80052ec:	bf00      	nop
}
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80052f6:	b480      	push	{r7}
 80052f8:	af00      	add	r7, sp, #0
  return;
 80052fa:	bf00      	nop
}
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  return;
 8005308:	bf00      	nop
}
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8005312:	b480      	push	{r7}
 8005314:	af00      	add	r7, sp, #0
  return;
 8005316:	bf00      	nop
}
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  return;
 8005324:	bf00      	nop
}
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800532e:	b480      	push	{r7}
 8005330:	af00      	add	r7, sp, #0
  return;
 8005332:	bf00      	nop
}
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8005340:	4b04      	ldr	r3, [pc, #16]	; (8005354 <SVCCTL_Init+0x18>)
 8005342:	2200      	movs	r2, #0
 8005344:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8005346:	4b04      	ldr	r3, [pc, #16]	; (8005358 <SVCCTL_Init+0x1c>)
 8005348:	2200      	movs	r2, #0
 800534a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800534c:	f000 f806 	bl	800535c <SVCCTL_SvcInit>

  return;
 8005350:	bf00      	nop
}
 8005352:	bd80      	pop	{r7, pc}
 8005354:	200000c0 	.word	0x200000c0
 8005358:	200000e0 	.word	0x200000e0

0800535c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  BAS_Init();
 8005360:	f7ff ff6e 	bl	8005240 <BAS_Init>

  BLS_Init();
 8005364:	f7ff ff73 	bl	800524e <BLS_Init>

  CRS_STM_Init();
 8005368:	f7ff ff78 	bl	800525c <CRS_STM_Init>

  DIS_Init();
 800536c:	f7ff ff7d 	bl	800526a <DIS_Init>

  EDS_STM_Init();
 8005370:	f7ff ff82 	bl	8005278 <EDS_STM_Init>

  HIDS_Init();
 8005374:	f7ff ff87 	bl	8005286 <HIDS_Init>

  HRS_Init();
 8005378:	f7ff ff8c 	bl	8005294 <HRS_Init>

  HTS_Init();
 800537c:	f7ff ff91 	bl	80052a2 <HTS_Init>

  IAS_Init();
 8005380:	f7ff ff96 	bl	80052b0 <IAS_Init>

  LLS_Init();
 8005384:	f7ff ff9b 	bl	80052be <LLS_Init>

  TPS_Init();
 8005388:	f7ff ffa0 	bl	80052cc <TPS_Init>

  MOTENV_STM_Init();
 800538c:	f7ff ffa5 	bl	80052da <MOTENV_STM_Init>

  P2PS_STM_Init();
 8005390:	f7ff ffaa 	bl	80052e8 <P2PS_STM_Init>

  ZDD_STM_Init();
 8005394:	f7ff ffaf 	bl	80052f6 <ZDD_STM_Init>

  OTAS_STM_Init();
 8005398:	f7ff ffb4 	bl	8005304 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800539c:	f7ff ffc0 	bl	8005320 <BVOPUS_STM_Init>

  MESH_Init();
 80053a0:	f7ff ffb7 	bl	8005312 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80053a4:	f7ff ffc3 	bl	800532e <SVCCTL_InitCustomSvc>
  
  return;
 80053a8:	bf00      	nop
}
 80053aa:	bd80      	pop	{r7, pc}

080053ac <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3301      	adds	r3, #1
 80053b8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80053ba:	2300      	movs	r3, #0
 80053bc:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2bff      	cmp	r3, #255	; 0xff
 80053c4:	d125      	bne.n	8005412 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	3302      	adds	r3, #2
 80053ca:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80053d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053da:	d118      	bne.n	800540e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80053dc:	2300      	movs	r3, #0
 80053de:	757b      	strb	r3, [r7, #21]
 80053e0:	e00d      	b.n	80053fe <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80053e2:	7d7b      	ldrb	r3, [r7, #21]
 80053e4:	4a1a      	ldr	r2, [pc, #104]	; (8005450 <SVCCTL_UserEvtRx+0xa4>)
 80053e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	4798      	blx	r3
 80053ee:	4603      	mov	r3, r0
 80053f0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80053f2:	7dfb      	ldrb	r3, [r7, #23]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d108      	bne.n	800540a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80053f8:	7d7b      	ldrb	r3, [r7, #21]
 80053fa:	3301      	adds	r3, #1
 80053fc:	757b      	strb	r3, [r7, #21]
 80053fe:	4b14      	ldr	r3, [pc, #80]	; (8005450 <SVCCTL_UserEvtRx+0xa4>)
 8005400:	7f1b      	ldrb	r3, [r3, #28]
 8005402:	7d7a      	ldrb	r2, [r7, #21]
 8005404:	429a      	cmp	r2, r3
 8005406:	d3ec      	bcc.n	80053e2 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8005408:	e002      	b.n	8005410 <SVCCTL_UserEvtRx+0x64>
              break;
 800540a:	bf00      	nop
          break;
 800540c:	e000      	b.n	8005410 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800540e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8005410:	e000      	b.n	8005414 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8005412:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8005414:	7dfb      	ldrb	r3, [r7, #23]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d00f      	beq.n	800543a <SVCCTL_UserEvtRx+0x8e>
 800541a:	2b02      	cmp	r3, #2
 800541c:	dc10      	bgt.n	8005440 <SVCCTL_UserEvtRx+0x94>
 800541e:	2b00      	cmp	r3, #0
 8005420:	d002      	beq.n	8005428 <SVCCTL_UserEvtRx+0x7c>
 8005422:	2b01      	cmp	r3, #1
 8005424:	d006      	beq.n	8005434 <SVCCTL_UserEvtRx+0x88>
 8005426:	e00b      	b.n	8005440 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 ff87 	bl	800633c <SVCCTL_App_Notification>
 800542e:	4603      	mov	r3, r0
 8005430:	75bb      	strb	r3, [r7, #22]
      break;
 8005432:	e008      	b.n	8005446 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8005434:	2301      	movs	r3, #1
 8005436:	75bb      	strb	r3, [r7, #22]
      break;
 8005438:	e005      	b.n	8005446 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800543a:	2300      	movs	r3, #0
 800543c:	75bb      	strb	r3, [r7, #22]
      break;
 800543e:	e002      	b.n	8005446 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8005440:	2301      	movs	r3, #1
 8005442:	75bb      	strb	r3, [r7, #22]
      break;
 8005444:	bf00      	nop
  }

  return (return_status);
 8005446:	7dbb      	ldrb	r3, [r7, #22]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	200000c0 	.word	0x200000c0

08005454 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800545c:	f107 030c 	add.w	r3, r7, #12
 8005460:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	212c      	movs	r1, #44	; 0x2c
 800546c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8005470:	f000 fae2 	bl	8005a38 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	330b      	adds	r3, #11
 8005478:	78db      	ldrb	r3, [r3, #3]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3720      	adds	r7, #32
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b088      	sub	sp, #32
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800548a:	f107 030c 	add.w	r3, r7, #12
 800548e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	210f      	movs	r1, #15
 800549a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800549e:	f000 facb 	bl	8005a38 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	330b      	adds	r3, #11
 80054a6:	78db      	ldrb	r3, [r3, #3]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3720      	adds	r7, #32
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80054b8:	f107 030c 	add.w	r3, r7, #12
 80054bc:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	210e      	movs	r1, #14
 80054c4:	f64f 4075 	movw	r0, #64629	; 0xfc75
 80054c8:	f000 fab6 	bl	8005a38 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	330b      	adds	r3, #11
 80054d0:	78db      	ldrb	r3, [r3, #3]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3720      	adds	r7, #32
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80054dc:	b480      	push	{r7}
 80054de:	b08b      	sub	sp, #44	; 0x2c
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80054e4:	2300      	movs	r3, #0
 80054e6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80054ec:	2300      	movs	r3, #0
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80054f0:	2300      	movs	r3, #0
 80054f2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80054f4:	2300      	movs	r3, #0
 80054f6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80054fc:	2300      	movs	r3, #0
 80054fe:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8005500:	2300      	movs	r3, #0
 8005502:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8005504:	4b4a      	ldr	r3, [pc, #296]	; (8005630 <SHCI_GetWirelessFwInfo+0x154>)
 8005506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005508:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800550c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005516:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a44      	ldr	r2, [pc, #272]	; (8005634 <SHCI_GetWirelessFwInfo+0x158>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d10f      	bne.n	8005548 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	e01a      	b.n	800557e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005550:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8005554:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	0e1b      	lsrs	r3, r3, #24
 8005582:	b2da      	uxtb	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	0c1b      	lsrs	r3, r3, #16
 800558c:	b2da      	uxtb	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	0a1b      	lsrs	r3, r3, #8
 8005596:	b2da      	uxtb	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	091b      	lsrs	r3, r3, #4
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	f003 030f 	and.w	r3, r3, #15
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	0e1b      	lsrs	r3, r3, #24
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	0c1b      	lsrs	r3, r3, #16
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	0a1b      	lsrs	r3, r3, #8
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	0e1b      	lsrs	r3, r3, #24
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	0c1b      	lsrs	r3, r3, #16
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	0a1b      	lsrs	r3, r3, #8
 8005600:	b2da      	uxtb	r2, r3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	0e1b      	lsrs	r3, r3, #24
 800560a:	b2da      	uxtb	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	0c1b      	lsrs	r3, r3, #16
 8005614:	b2da      	uxtb	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	b2da      	uxtb	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	372c      	adds	r7, #44	; 0x2c
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	58004000 	.word	0x58004000
 8005634:	a94656b9 	.word	0xa94656b9

08005638 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	4a08      	ldr	r2, [pc, #32]	; (8005668 <hci_init+0x30>)
 8005648:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800564a:	4a08      	ldr	r2, [pc, #32]	; (800566c <hci_init+0x34>)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8005650:	4806      	ldr	r0, [pc, #24]	; (800566c <hci_init+0x34>)
 8005652:	f000 f973 	bl	800593c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4618      	mov	r0, r3
 800565c:	f000 f8d4 	bl	8005808 <TlInit>

  return;
 8005660:	bf00      	nop
}
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	20000238 	.word	0x20000238
 800566c:	20000210 	.word	0x20000210

08005670 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8005676:	4822      	ldr	r0, [pc, #136]	; (8005700 <hci_user_evt_proc+0x90>)
 8005678:	f000 fd28 	bl	80060cc <LST_is_empty>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d12b      	bne.n	80056da <hci_user_evt_proc+0x6a>
 8005682:	4b20      	ldr	r3, [pc, #128]	; (8005704 <hci_user_evt_proc+0x94>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d027      	beq.n	80056da <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800568a:	f107 030c 	add.w	r3, r7, #12
 800568e:	4619      	mov	r1, r3
 8005690:	481b      	ldr	r0, [pc, #108]	; (8005700 <hci_user_evt_proc+0x90>)
 8005692:	f000 fdaa 	bl	80061ea <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8005696:	4b1c      	ldr	r3, [pc, #112]	; (8005708 <hci_user_evt_proc+0x98>)
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00c      	beq.n	80056b8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80056a2:	2301      	movs	r3, #1
 80056a4:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80056a6:	4b18      	ldr	r3, [pc, #96]	; (8005708 <hci_user_evt_proc+0x98>)
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	1d3a      	adds	r2, r7, #4
 80056ac:	4610      	mov	r0, r2
 80056ae:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80056b0:	793a      	ldrb	r2, [r7, #4]
 80056b2:	4b14      	ldr	r3, [pc, #80]	; (8005704 <hci_user_evt_proc+0x94>)
 80056b4:	701a      	strb	r2, [r3, #0]
 80056b6:	e002      	b.n	80056be <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80056b8:	4b12      	ldr	r3, [pc, #72]	; (8005704 <hci_user_evt_proc+0x94>)
 80056ba:	2201      	movs	r2, #1
 80056bc:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80056be:	4b11      	ldr	r3, [pc, #68]	; (8005704 <hci_user_evt_proc+0x94>)
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d004      	beq.n	80056d0 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fc03 	bl	8005ed4 <TL_MM_EvtDone>
 80056ce:	e004      	b.n	80056da <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4619      	mov	r1, r3
 80056d4:	480a      	ldr	r0, [pc, #40]	; (8005700 <hci_user_evt_proc+0x90>)
 80056d6:	f000 fd1b 	bl	8006110 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80056da:	4809      	ldr	r0, [pc, #36]	; (8005700 <hci_user_evt_proc+0x90>)
 80056dc:	f000 fcf6 	bl	80060cc <LST_is_empty>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d107      	bne.n	80056f6 <hci_user_evt_proc+0x86>
 80056e6:	4b07      	ldr	r3, [pc, #28]	; (8005704 <hci_user_evt_proc+0x94>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80056ee:	4804      	ldr	r0, [pc, #16]	; (8005700 <hci_user_evt_proc+0x90>)
 80056f0:	f000 ff4e 	bl	8006590 <hci_notify_asynch_evt>
  }


  return;
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop
}
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	200000e8 	.word	0x200000e8
 8005704:	200000f4 	.word	0x200000f4
 8005708:	20000210 	.word	0x20000210

0800570c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8005718:	2000      	movs	r0, #0
 800571a:	f000 f8cb 	bl	80058b4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800571e:	2300      	movs	r3, #0
 8005720:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	885b      	ldrh	r3, [r3, #2]
 8005726:	b21b      	sxth	r3, r3
 8005728:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800572c:	b21a      	sxth	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	881b      	ldrh	r3, [r3, #0]
 8005732:	029b      	lsls	r3, r3, #10
 8005734:	b21b      	sxth	r3, r3
 8005736:	4313      	orrs	r3, r2
 8005738:	b21b      	sxth	r3, r3
 800573a:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	b2d9      	uxtb	r1, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	8bbb      	ldrh	r3, [r7, #28]
 8005748:	4618      	mov	r0, r3
 800574a:	f000 f88d 	bl	8005868 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800574e:	e04e      	b.n	80057ee <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8005750:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005754:	f000 ff33 	bl	80065be <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005758:	e043      	b.n	80057e2 <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800575a:	f107 030c 	add.w	r3, r7, #12
 800575e:	4619      	mov	r1, r3
 8005760:	4828      	ldr	r0, [pc, #160]	; (8005804 <hci_send_req+0xf8>)
 8005762:	f000 fd42 	bl	80061ea <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	7a5b      	ldrb	r3, [r3, #9]
 800576a:	2b0f      	cmp	r3, #15
 800576c:	d114      	bne.n	8005798 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	330b      	adds	r3, #11
 8005772:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	885b      	ldrh	r3, [r3, #2]
 8005778:	b29b      	uxth	r3, r3
 800577a:	8bba      	ldrh	r2, [r7, #28]
 800577c:	429a      	cmp	r2, r3
 800577e:	d104      	bne.n	800578a <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	7812      	ldrb	r2, [r2, #0]
 8005788:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	785b      	ldrb	r3, [r3, #1]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d027      	beq.n	80057e2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8005792:	2301      	movs	r3, #1
 8005794:	77fb      	strb	r3, [r7, #31]
 8005796:	e024      	b.n	80057e2 <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	330b      	adds	r3, #11
 800579c:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	8bba      	ldrh	r2, [r7, #28]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d114      	bne.n	80057d6 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	7a9b      	ldrb	r3, [r3, #10]
 80057b0:	3b03      	subs	r3, #3
 80057b2:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	695a      	ldr	r2, [r3, #20]
 80057b8:	7dfb      	ldrb	r3, [r7, #23]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	bfa8      	it	ge
 80057be:	461a      	movge	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6918      	ldr	r0, [r3, #16]
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	1cd9      	adds	r1, r3, #3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	461a      	mov	r2, r3
 80057d2:	f001 fe53 	bl	800747c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80057de:	2301      	movs	r3, #1
 80057e0:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80057e2:	4808      	ldr	r0, [pc, #32]	; (8005804 <hci_send_req+0xf8>)
 80057e4:	f000 fc72 	bl	80060cc <LST_is_empty>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d0b5      	beq.n	800575a <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80057ee:	7ffb      	ldrb	r3, [r7, #31]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0ad      	beq.n	8005750 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80057f4:	2001      	movs	r0, #1
 80057f6:	f000 f85d 	bl	80058b4 <NotifyCmdStatus>

  return 0;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3720      	adds	r7, #32
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	20000230 	.word	0x20000230

08005808 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8005810:	480f      	ldr	r0, [pc, #60]	; (8005850 <TlInit+0x48>)
 8005812:	f000 fc4b 	bl	80060ac <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8005816:	4a0f      	ldr	r2, [pc, #60]	; (8005854 <TlInit+0x4c>)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800581c:	480e      	ldr	r0, [pc, #56]	; (8005858 <TlInit+0x50>)
 800581e:	f000 fc45 	bl	80060ac <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8005822:	4b0e      	ldr	r3, [pc, #56]	; (800585c <TlInit+0x54>)
 8005824:	2201      	movs	r2, #1
 8005826:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8005828:	4b0d      	ldr	r3, [pc, #52]	; (8005860 <TlInit+0x58>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00a      	beq.n	8005846 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8005834:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <TlInit+0x5c>)
 8005836:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8005838:	4b09      	ldr	r3, [pc, #36]	; (8005860 <TlInit+0x58>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f107 0208 	add.w	r2, r7, #8
 8005840:	4610      	mov	r0, r2
 8005842:	4798      	blx	r3
  }

  return;
 8005844:	bf00      	nop
 8005846:	bf00      	nop
}
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20000230 	.word	0x20000230
 8005854:	200000f0 	.word	0x200000f0
 8005858:	200000e8 	.word	0x200000e8
 800585c:	200000f4 	.word	0x200000f4
 8005860:	20000210 	.word	0x20000210
 8005864:	080058f5 	.word	0x080058f5

08005868 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	603a      	str	r2, [r7, #0]
 8005872:	80fb      	strh	r3, [r7, #6]
 8005874:	460b      	mov	r3, r1
 8005876:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8005878:	4b0c      	ldr	r3, [pc, #48]	; (80058ac <SendCmd+0x44>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	88fa      	ldrh	r2, [r7, #6]
 800587e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8005882:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <SendCmd+0x44>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	797a      	ldrb	r2, [r7, #5]
 8005888:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800588a:	4b08      	ldr	r3, [pc, #32]	; (80058ac <SendCmd+0x44>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	330c      	adds	r3, #12
 8005890:	797a      	ldrb	r2, [r7, #5]
 8005892:	6839      	ldr	r1, [r7, #0]
 8005894:	4618      	mov	r0, r3
 8005896:	f001 fdf1 	bl	800747c <memcpy>

  hciContext.io.Send(0,0);
 800589a:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <SendCmd+0x48>)
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2100      	movs	r1, #0
 80058a0:	2000      	movs	r0, #0
 80058a2:	4798      	blx	r3

  return;
 80058a4:	bf00      	nop
}
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	200000f0 	.word	0x200000f0
 80058b0:	20000210 	.word	0x20000210

080058b4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	4603      	mov	r3, r0
 80058bc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d108      	bne.n	80058d6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80058c4:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <NotifyCmdStatus+0x3c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00d      	beq.n	80058e8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80058cc:	4b08      	ldr	r3, [pc, #32]	; (80058f0 <NotifyCmdStatus+0x3c>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2000      	movs	r0, #0
 80058d2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80058d4:	e008      	b.n	80058e8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80058d6:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <NotifyCmdStatus+0x3c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d004      	beq.n	80058e8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80058de:	4b04      	ldr	r3, [pc, #16]	; (80058f0 <NotifyCmdStatus+0x3c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2001      	movs	r0, #1
 80058e4:	4798      	blx	r3
  return;
 80058e6:	bf00      	nop
 80058e8:	bf00      	nop
}
 80058ea:	3708      	adds	r7, #8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20000238 	.word	0x20000238

080058f4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	7a5b      	ldrb	r3, [r3, #9]
 8005900:	2b0f      	cmp	r3, #15
 8005902:	d003      	beq.n	800590c <TlEvtReceived+0x18>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	7a5b      	ldrb	r3, [r3, #9]
 8005908:	2b0e      	cmp	r3, #14
 800590a:	d107      	bne.n	800591c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	4809      	ldr	r0, [pc, #36]	; (8005934 <TlEvtReceived+0x40>)
 8005910:	f000 fc24 	bl	800615c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8005914:	2000      	movs	r0, #0
 8005916:	f000 fe47 	bl	80065a8 <hci_cmd_resp_release>
 800591a:	e006      	b.n	800592a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	4806      	ldr	r0, [pc, #24]	; (8005938 <TlEvtReceived+0x44>)
 8005920:	f000 fc1c 	bl	800615c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005924:	4804      	ldr	r0, [pc, #16]	; (8005938 <TlEvtReceived+0x44>)
 8005926:	f000 fe33 	bl	8006590 <hci_notify_asynch_evt>
  }

  return;
 800592a:	bf00      	nop
}
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20000230 	.word	0x20000230
 8005938:	200000e8 	.word	0x200000e8

0800593c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a05      	ldr	r2, [pc, #20]	; (800595c <hci_register_io_bus+0x20>)
 8005948:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a04      	ldr	r2, [pc, #16]	; (8005960 <hci_register_io_bus+0x24>)
 800594e:	611a      	str	r2, [r3, #16]

  return;
 8005950:	bf00      	nop
}
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	08005c4d 	.word	0x08005c4d
 8005960:	08005cb5 	.word	0x08005cb5

08005964 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	4a08      	ldr	r2, [pc, #32]	; (8005994 <shci_init+0x30>)
 8005974:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8005976:	4a08      	ldr	r2, [pc, #32]	; (8005998 <shci_init+0x34>)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800597c:	4806      	ldr	r0, [pc, #24]	; (8005998 <shci_init+0x34>)
 800597e:	f000 f911 	bl	8005ba4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f000 f894 	bl	8005ab4 <TlInit>

  return;
 800598c:	bf00      	nop
}
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	2000025c 	.word	0x2000025c
 8005998:	2000023c 	.word	0x2000023c

0800599c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80059a2:	4822      	ldr	r0, [pc, #136]	; (8005a2c <shci_user_evt_proc+0x90>)
 80059a4:	f000 fb92 	bl	80060cc <LST_is_empty>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d12b      	bne.n	8005a06 <shci_user_evt_proc+0x6a>
 80059ae:	4b20      	ldr	r3, [pc, #128]	; (8005a30 <shci_user_evt_proc+0x94>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d027      	beq.n	8005a06 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80059b6:	f107 030c 	add.w	r3, r7, #12
 80059ba:	4619      	mov	r1, r3
 80059bc:	481b      	ldr	r0, [pc, #108]	; (8005a2c <shci_user_evt_proc+0x90>)
 80059be:	f000 fc14 	bl	80061ea <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80059c2:	4b1c      	ldr	r3, [pc, #112]	; (8005a34 <shci_user_evt_proc+0x98>)
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00c      	beq.n	80059e4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80059ce:	2301      	movs	r3, #1
 80059d0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80059d2:	4b18      	ldr	r3, [pc, #96]	; (8005a34 <shci_user_evt_proc+0x98>)
 80059d4:	69db      	ldr	r3, [r3, #28]
 80059d6:	1d3a      	adds	r2, r7, #4
 80059d8:	4610      	mov	r0, r2
 80059da:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80059dc:	793a      	ldrb	r2, [r7, #4]
 80059de:	4b14      	ldr	r3, [pc, #80]	; (8005a30 <shci_user_evt_proc+0x94>)
 80059e0:	701a      	strb	r2, [r3, #0]
 80059e2:	e002      	b.n	80059ea <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80059e4:	4b12      	ldr	r3, [pc, #72]	; (8005a30 <shci_user_evt_proc+0x94>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80059ea:	4b11      	ldr	r3, [pc, #68]	; (8005a30 <shci_user_evt_proc+0x94>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d004      	beq.n	80059fc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 fa6d 	bl	8005ed4 <TL_MM_EvtDone>
 80059fa:	e004      	b.n	8005a06 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4619      	mov	r1, r3
 8005a00:	480a      	ldr	r0, [pc, #40]	; (8005a2c <shci_user_evt_proc+0x90>)
 8005a02:	f000 fb85 	bl	8006110 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005a06:	4809      	ldr	r0, [pc, #36]	; (8005a2c <shci_user_evt_proc+0x90>)
 8005a08:	f000 fb60 	bl	80060cc <LST_is_empty>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d107      	bne.n	8005a22 <shci_user_evt_proc+0x86>
 8005a12:	4b07      	ldr	r3, [pc, #28]	; (8005a30 <shci_user_evt_proc+0x94>)
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8005a1a:	4804      	ldr	r0, [pc, #16]	; (8005a2c <shci_user_evt_proc+0x90>)
 8005a1c:	f7fa ff96 	bl	800094c <shci_notify_asynch_evt>
  }


  return;
 8005a20:	bf00      	nop
 8005a22:	bf00      	nop
}
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	200000f8 	.word	0x200000f8
 8005a30:	20000108 	.word	0x20000108
 8005a34:	2000023c 	.word	0x2000023c

08005a38 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60ba      	str	r2, [r7, #8]
 8005a40:	607b      	str	r3, [r7, #4]
 8005a42:	4603      	mov	r3, r0
 8005a44:	81fb      	strh	r3, [r7, #14]
 8005a46:	460b      	mov	r3, r1
 8005a48:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	f000 f864 	bl	8005b18 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8005a50:	4b16      	ldr	r3, [pc, #88]	; (8005aac <shci_send+0x74>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	89fa      	ldrh	r2, [r7, #14]
 8005a56:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8005a5a:	4b14      	ldr	r3, [pc, #80]	; (8005aac <shci_send+0x74>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	7b7a      	ldrb	r2, [r7, #13]
 8005a60:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8005a62:	4b12      	ldr	r3, [pc, #72]	; (8005aac <shci_send+0x74>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	330c      	adds	r3, #12
 8005a68:	7b7a      	ldrb	r2, [r7, #13]
 8005a6a:	68b9      	ldr	r1, [r7, #8]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f001 fd05 	bl	800747c <memcpy>

  shciContext.io.Send(0,0);
 8005a72:	4b0f      	ldr	r3, [pc, #60]	; (8005ab0 <shci_send+0x78>)
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	2100      	movs	r1, #0
 8005a78:	2000      	movs	r0, #0
 8005a7a:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8005a7c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005a80:	f7fa ff7b 	bl	800097a <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f103 0008 	add.w	r0, r3, #8
 8005a8a:	4b08      	ldr	r3, [pc, #32]	; (8005aac <shci_send+0x74>)
 8005a8c:	6819      	ldr	r1, [r3, #0]
 8005a8e:	4b07      	ldr	r3, [pc, #28]	; (8005aac <shci_send+0x74>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	789b      	ldrb	r3, [r3, #2]
 8005a94:	3303      	adds	r3, #3
 8005a96:	461a      	mov	r2, r3
 8005a98:	f001 fcf0 	bl	800747c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	f000 f83b 	bl	8005b18 <Cmd_SetStatus>

  return;
 8005aa2:	bf00      	nop
}
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	20000104 	.word	0x20000104
 8005ab0:	2000023c 	.word	0x2000023c

08005ab4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8005abc:	4a10      	ldr	r2, [pc, #64]	; (8005b00 <TlInit+0x4c>)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8005ac2:	4810      	ldr	r0, [pc, #64]	; (8005b04 <TlInit+0x50>)
 8005ac4:	f000 faf2 	bl	80060ac <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005ac8:	2001      	movs	r0, #1
 8005aca:	f000 f825 	bl	8005b18 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005ace:	4b0e      	ldr	r3, [pc, #56]	; (8005b08 <TlInit+0x54>)
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8005ad4:	4b0d      	ldr	r3, [pc, #52]	; (8005b0c <TlInit+0x58>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00c      	beq.n	8005af6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <TlInit+0x5c>)
 8005ae2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8005ae4:	4b0b      	ldr	r3, [pc, #44]	; (8005b14 <TlInit+0x60>)
 8005ae6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8005ae8:	4b08      	ldr	r3, [pc, #32]	; (8005b0c <TlInit+0x58>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f107 020c 	add.w	r2, r7, #12
 8005af0:	4610      	mov	r0, r2
 8005af2:	4798      	blx	r3
  }

  return;
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop
}
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20000104 	.word	0x20000104
 8005b04:	200000f8 	.word	0x200000f8
 8005b08:	20000108 	.word	0x20000108
 8005b0c:	2000023c 	.word	0x2000023c
 8005b10:	08005b69 	.word	0x08005b69
 8005b14:	08005b81 	.word	0x08005b81

08005b18 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10b      	bne.n	8005b40 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8005b28:	4b0d      	ldr	r3, [pc, #52]	; (8005b60 <Cmd_SetStatus+0x48>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8005b30:	4b0b      	ldr	r3, [pc, #44]	; (8005b60 <Cmd_SetStatus+0x48>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2000      	movs	r0, #0
 8005b36:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8005b38:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <Cmd_SetStatus+0x4c>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8005b3e:	e00b      	b.n	8005b58 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8005b40:	4b08      	ldr	r3, [pc, #32]	; (8005b64 <Cmd_SetStatus+0x4c>)
 8005b42:	2201      	movs	r2, #1
 8005b44:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8005b46:	4b06      	ldr	r3, [pc, #24]	; (8005b60 <Cmd_SetStatus+0x48>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d004      	beq.n	8005b58 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8005b4e:	4b04      	ldr	r3, [pc, #16]	; (8005b60 <Cmd_SetStatus+0x48>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2001      	movs	r0, #1
 8005b54:	4798      	blx	r3
  return;
 8005b56:	bf00      	nop
 8005b58:	bf00      	nop
}
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	2000025c 	.word	0x2000025c
 8005b64:	20000100 	.word	0x20000100

08005b68 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8005b70:	2000      	movs	r0, #0
 8005b72:	f7fa fef7 	bl	8000964 <shci_cmd_resp_release>

  return;
 8005b76:	bf00      	nop
}
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8005b88:	6879      	ldr	r1, [r7, #4]
 8005b8a:	4805      	ldr	r0, [pc, #20]	; (8005ba0 <TlUserEvtReceived+0x20>)
 8005b8c:	f000 fae6 	bl	800615c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005b90:	4803      	ldr	r0, [pc, #12]	; (8005ba0 <TlUserEvtReceived+0x20>)
 8005b92:	f7fa fedb 	bl	800094c <shci_notify_asynch_evt>

  return;
 8005b96:	bf00      	nop
}
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	200000f8 	.word	0x200000f8

08005ba4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a05      	ldr	r2, [pc, #20]	; (8005bc4 <shci_register_io_bus+0x20>)
 8005bb0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a04      	ldr	r2, [pc, #16]	; (8005bc8 <shci_register_io_bus+0x24>)
 8005bb6:	611a      	str	r2, [r3, #16]

  return;
 8005bb8:	bf00      	nop
}
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	08005d61 	.word	0x08005d61
 8005bc8:	08005db5 	.word	0x08005db5

08005bcc <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8005bd0:	f001 f8a8 	bl	8006d24 <HW_IPCC_Enable>

  return;
 8005bd4:	bf00      	nop
}
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <TL_Init>:


void TL_Init( void )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005bdc:	4b10      	ldr	r3, [pc, #64]	; (8005c20 <TL_Init+0x48>)
 8005bde:	4a11      	ldr	r2, [pc, #68]	; (8005c24 <TL_Init+0x4c>)
 8005be0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005be2:	4b0f      	ldr	r3, [pc, #60]	; (8005c20 <TL_Init+0x48>)
 8005be4:	4a10      	ldr	r2, [pc, #64]	; (8005c28 <TL_Init+0x50>)
 8005be6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005be8:	4b0d      	ldr	r3, [pc, #52]	; (8005c20 <TL_Init+0x48>)
 8005bea:	4a10      	ldr	r2, [pc, #64]	; (8005c2c <TL_Init+0x54>)
 8005bec:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8005bee:	4b0c      	ldr	r3, [pc, #48]	; (8005c20 <TL_Init+0x48>)
 8005bf0:	4a0f      	ldr	r2, [pc, #60]	; (8005c30 <TL_Init+0x58>)
 8005bf2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8005bf4:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <TL_Init+0x48>)
 8005bf6:	4a0f      	ldr	r2, [pc, #60]	; (8005c34 <TL_Init+0x5c>)
 8005bf8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8005bfa:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <TL_Init+0x48>)
 8005bfc:	4a0e      	ldr	r2, [pc, #56]	; (8005c38 <TL_Init+0x60>)
 8005bfe:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005c00:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <TL_Init+0x48>)
 8005c02:	4a0e      	ldr	r2, [pc, #56]	; (8005c3c <TL_Init+0x64>)
 8005c04:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8005c06:	4b06      	ldr	r3, [pc, #24]	; (8005c20 <TL_Init+0x48>)
 8005c08:	4a0d      	ldr	r2, [pc, #52]	; (8005c40 <TL_Init+0x68>)
 8005c0a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005c0c:	4b04      	ldr	r3, [pc, #16]	; (8005c20 <TL_Init+0x48>)
 8005c0e:	4a0d      	ldr	r2, [pc, #52]	; (8005c44 <TL_Init+0x6c>)
 8005c10:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005c12:	4b03      	ldr	r3, [pc, #12]	; (8005c20 <TL_Init+0x48>)
 8005c14:	4a0c      	ldr	r2, [pc, #48]	; (8005c48 <TL_Init+0x70>)
 8005c16:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8005c18:	f001 f898 	bl	8006d4c <HW_IPCC_Init>

  return;
 8005c1c:	bf00      	nop
}
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20030000 	.word	0x20030000
 8005c24:	20030028 	.word	0x20030028
 8005c28:	20030048 	.word	0x20030048
 8005c2c:	20030058 	.word	0x20030058
 8005c30:	20030068 	.word	0x20030068
 8005c34:	20030070 	.word	0x20030070
 8005c38:	20030078 	.word	0x20030078
 8005c3c:	20030080 	.word	0x20030080
 8005c40:	2003009c 	.word	0x2003009c
 8005c44:	200300a0 	.word	0x200300a0
 8005c48:	200300ac 	.word	0x200300ac

08005c4c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8005c58:	4811      	ldr	r0, [pc, #68]	; (8005ca0 <TL_BLE_Init+0x54>)
 8005c5a:	f000 fa27 	bl	80060ac <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8005c5e:	4b11      	ldr	r3, [pc, #68]	; (8005ca4 <TL_BLE_Init+0x58>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	689a      	ldr	r2, [r3, #8]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4a0c      	ldr	r2, [pc, #48]	; (8005ca8 <TL_BLE_Init+0x5c>)
 8005c78:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	4a08      	ldr	r2, [pc, #32]	; (8005ca0 <TL_BLE_Init+0x54>)
 8005c7e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8005c80:	f001 f87a 	bl	8006d78 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a08      	ldr	r2, [pc, #32]	; (8005cac <TL_BLE_Init+0x60>)
 8005c8a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	4a07      	ldr	r2, [pc, #28]	; (8005cb0 <TL_BLE_Init+0x64>)
 8005c92:	6013      	str	r3, [r2, #0]

  return 0;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	200300c8 	.word	0x200300c8
 8005ca4:	20030000 	.word	0x20030000
 8005ca8:	20030a58 	.word	0x20030a58
 8005cac:	20000268 	.word	0x20000268
 8005cb0:	2000026c 	.word	0x2000026c

08005cb4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8005cc0:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <TL_BLE_SendCmd+0x34>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8005cca:	4b07      	ldr	r3, [pc, #28]	; (8005ce8 <TL_BLE_SendCmd+0x34>)
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	2001      	movs	r0, #1
 8005cd4:	f000 f96c 	bl	8005fb0 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8005cd8:	f001 f858 	bl	8006d8c <HW_IPCC_BLE_SendCmd>

  return 0;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20030000 	.word	0x20030000

08005cec <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8005cf2:	e01c      	b.n	8005d2e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8005cf4:	1d3b      	adds	r3, r7, #4
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4812      	ldr	r0, [pc, #72]	; (8005d44 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005cfa:	f000 fa76 	bl	80061ea <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	7a5b      	ldrb	r3, [r3, #9]
 8005d02:	2b0f      	cmp	r3, #15
 8005d04:	d003      	beq.n	8005d0e <HW_IPCC_BLE_RxEvtNot+0x22>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	7a5b      	ldrb	r3, [r3, #9]
 8005d0a:	2b0e      	cmp	r3, #14
 8005d0c:	d105      	bne.n	8005d1a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4619      	mov	r1, r3
 8005d12:	2002      	movs	r0, #2
 8005d14:	f000 f94c 	bl	8005fb0 <OutputDbgTrace>
 8005d18:	e004      	b.n	8005d24 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	2003      	movs	r0, #3
 8005d20:	f000 f946 	bl	8005fb0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8005d24:	4b08      	ldr	r3, [pc, #32]	; (8005d48 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8005d2e:	4805      	ldr	r0, [pc, #20]	; (8005d44 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005d30:	f000 f9cc 	bl	80060cc <LST_is_empty>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0dc      	beq.n	8005cf4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8005d3a:	bf00      	nop
}
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	200300c8 	.word	0x200300c8
 8005d48:	20000268 	.word	0x20000268

08005d4c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8005d50:	4b02      	ldr	r3, [pc, #8]	; (8005d5c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4798      	blx	r3

  return;
 8005d56:	bf00      	nop
}
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	2000026c 	.word	0x2000026c

08005d60 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8005d6c:	480d      	ldr	r0, [pc, #52]	; (8005da4 <TL_SYS_Init+0x44>)
 8005d6e:	f000 f99d 	bl	80060ac <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8005d72:	4b0d      	ldr	r3, [pc, #52]	; (8005da8 <TL_SYS_Init+0x48>)
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4a08      	ldr	r2, [pc, #32]	; (8005da4 <TL_SYS_Init+0x44>)
 8005d84:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8005d86:	f001 f823 	bl	8006dd0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a07      	ldr	r2, [pc, #28]	; (8005dac <TL_SYS_Init+0x4c>)
 8005d90:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	4a06      	ldr	r2, [pc, #24]	; (8005db0 <TL_SYS_Init+0x50>)
 8005d98:	6013      	str	r3, [r2, #0]

  return 0;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	200300d0 	.word	0x200300d0
 8005da8:	20030000 	.word	0x20030000
 8005dac:	20000270 	.word	0x20000270
 8005db0:	20000274 	.word	0x20000274

08005db4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8005dc0:	4b09      	ldr	r3, [pc, #36]	; (8005de8 <TL_SYS_SendCmd+0x34>)
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2210      	movs	r2, #16
 8005dc8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8005dca:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <TL_SYS_SendCmd+0x34>)
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	2004      	movs	r0, #4
 8005dd4:	f000 f8ec 	bl	8005fb0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8005dd8:	f001 f804 	bl	8006de4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20030000 	.word	0x20030000

08005dec <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005df0:	4b07      	ldr	r3, [pc, #28]	; (8005e10 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4619      	mov	r1, r3
 8005df8:	2005      	movs	r0, #5
 8005dfa:	f000 f8d9 	bl	8005fb0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005dfe:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a03      	ldr	r2, [pc, #12]	; (8005e10 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005e04:	68d2      	ldr	r2, [r2, #12]
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	4610      	mov	r0, r2
 8005e0a:	4798      	blx	r3

  return;
 8005e0c:	bf00      	nop
}
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	20030000 	.word	0x20030000
 8005e14:	20000270 	.word	0x20000270

08005e18 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005e1e:	e00e      	b.n	8005e3e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8005e20:	1d3b      	adds	r3, r7, #4
 8005e22:	4619      	mov	r1, r3
 8005e24:	480b      	ldr	r0, [pc, #44]	; (8005e54 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005e26:	f000 f9e0 	bl	80061ea <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	2006      	movs	r0, #6
 8005e30:	f000 f8be 	bl	8005fb0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005e34:	4b08      	ldr	r3, [pc, #32]	; (8005e58 <HW_IPCC_SYS_EvtNot+0x40>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005e3e:	4805      	ldr	r0, [pc, #20]	; (8005e54 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005e40:	f000 f944 	bl	80060cc <LST_is_empty>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d0ea      	beq.n	8005e20 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8005e4a:	bf00      	nop
}
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	200300d0 	.word	0x200300d0
 8005e58:	20000274 	.word	0x20000274

08005e5c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8005e64:	4817      	ldr	r0, [pc, #92]	; (8005ec4 <TL_MM_Init+0x68>)
 8005e66:	f000 f921 	bl	80060ac <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8005e6a:	4817      	ldr	r0, [pc, #92]	; (8005ec8 <TL_MM_Init+0x6c>)
 8005e6c:	f000 f91e 	bl	80060ac <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005e70:	4b16      	ldr	r3, [pc, #88]	; (8005ecc <TL_MM_Init+0x70>)
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	4a16      	ldr	r2, [pc, #88]	; (8005ed0 <TL_MM_Init+0x74>)
 8005e76:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005e78:	4b15      	ldr	r3, [pc, #84]	; (8005ed0 <TL_MM_Init+0x74>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6892      	ldr	r2, [r2, #8]
 8005e80:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8005e82:	4b13      	ldr	r3, [pc, #76]	; (8005ed0 <TL_MM_Init+0x74>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	68d2      	ldr	r2, [r2, #12]
 8005e8a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005e8c:	4b10      	ldr	r3, [pc, #64]	; (8005ed0 <TL_MM_Init+0x74>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a0c      	ldr	r2, [pc, #48]	; (8005ec4 <TL_MM_Init+0x68>)
 8005e92:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8005e94:	4b0e      	ldr	r3, [pc, #56]	; (8005ed0 <TL_MM_Init+0x74>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6812      	ldr	r2, [r2, #0]
 8005e9c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005e9e:	4b0c      	ldr	r3, [pc, #48]	; (8005ed0 <TL_MM_Init+0x74>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6852      	ldr	r2, [r2, #4]
 8005ea6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8005ea8:	4b09      	ldr	r3, [pc, #36]	; (8005ed0 <TL_MM_Init+0x74>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6912      	ldr	r2, [r2, #16]
 8005eb0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8005eb2:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <TL_MM_Init+0x74>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6952      	ldr	r2, [r2, #20]
 8005eba:	619a      	str	r2, [r3, #24]

  return;
 8005ebc:	bf00      	nop
}
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	200300b8 	.word	0x200300b8
 8005ec8:	20000260 	.word	0x20000260
 8005ecc:	20030000 	.word	0x20030000
 8005ed0:	20000278 	.word	0x20000278

08005ed4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	4807      	ldr	r0, [pc, #28]	; (8005efc <TL_MM_EvtDone+0x28>)
 8005ee0:	f000 f93c 	bl	800615c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	f000 f862 	bl	8005fb0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8005eec:	4804      	ldr	r0, [pc, #16]	; (8005f00 <TL_MM_EvtDone+0x2c>)
 8005eee:	f000 ff9f 	bl	8006e30 <HW_IPCC_MM_SendFreeBuf>

  return;
 8005ef2:	bf00      	nop
}
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20000260 	.word	0x20000260
 8005f00:	08005f05 	.word	0x08005f05

08005f04 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005f0a:	e00c      	b.n	8005f26 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8005f0c:	1d3b      	adds	r3, r7, #4
 8005f0e:	4619      	mov	r1, r3
 8005f10:	480a      	ldr	r0, [pc, #40]	; (8005f3c <SendFreeBuf+0x38>)
 8005f12:	f000 f96a 	bl	80061ea <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8005f16:	4b0a      	ldr	r3, [pc, #40]	; (8005f40 <SendFreeBuf+0x3c>)
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	4611      	mov	r1, r2
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 f91b 	bl	800615c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005f26:	4805      	ldr	r0, [pc, #20]	; (8005f3c <SendFreeBuf+0x38>)
 8005f28:	f000 f8d0 	bl	80060cc <LST_is_empty>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0ec      	beq.n	8005f0c <SendFreeBuf+0x8>
  }

  return;
 8005f32:	bf00      	nop
}
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20000260 	.word	0x20000260
 8005f40:	20030000 	.word	0x20030000

08005f44 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8005f48:	4805      	ldr	r0, [pc, #20]	; (8005f60 <TL_TRACES_Init+0x1c>)
 8005f4a:	f000 f8af 	bl	80060ac <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8005f4e:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <TL_TRACES_Init+0x20>)
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	4a03      	ldr	r2, [pc, #12]	; (8005f60 <TL_TRACES_Init+0x1c>)
 8005f54:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8005f56:	f000 ffa1 	bl	8006e9c <HW_IPCC_TRACES_Init>

  return;
 8005f5a:	bf00      	nop
}
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	200300c0 	.word	0x200300c0
 8005f64:	20030000 	.word	0x20030000

08005f68 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8005f6e:	e008      	b.n	8005f82 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8005f70:	1d3b      	adds	r3, r7, #4
 8005f72:	4619      	mov	r1, r3
 8005f74:	4808      	ldr	r0, [pc, #32]	; (8005f98 <HW_IPCC_TRACES_EvtNot+0x30>)
 8005f76:	f000 f938 	bl	80061ea <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 f80d 	bl	8005f9c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8005f82:	4805      	ldr	r0, [pc, #20]	; (8005f98 <HW_IPCC_TRACES_EvtNot+0x30>)
 8005f84:	f000 f8a2 	bl	80060cc <LST_is_empty>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0f0      	beq.n	8005f70 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8005f8e:	bf00      	nop
}
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	200300c0 	.word	0x200300c0

08005f9c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	6039      	str	r1, [r7, #0]
 8005fba:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8005fbc:	79fb      	ldrb	r3, [r7, #7]
 8005fbe:	2b06      	cmp	r3, #6
 8005fc0:	d845      	bhi.n	800604e <OutputDbgTrace+0x9e>
 8005fc2:	a201      	add	r2, pc, #4	; (adr r2, 8005fc8 <OutputDbgTrace+0x18>)
 8005fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc8:	08005fe5 	.word	0x08005fe5
 8005fcc:	08006009 	.word	0x08006009
 8005fd0:	0800600f 	.word	0x0800600f
 8005fd4:	08006023 	.word	0x08006023
 8005fd8:	0800602f 	.word	0x0800602f
 8005fdc:	08006035 	.word	0x08006035
 8005fe0:	08006043 	.word	0x08006043
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	7a5b      	ldrb	r3, [r3, #9]
 8005fec:	2bff      	cmp	r3, #255	; 0xff
 8005fee:	d005      	beq.n	8005ffc <OutputDbgTrace+0x4c>
 8005ff0:	2bff      	cmp	r3, #255	; 0xff
 8005ff2:	dc05      	bgt.n	8006000 <OutputDbgTrace+0x50>
 8005ff4:	2b0e      	cmp	r3, #14
 8005ff6:	d005      	beq.n	8006004 <OutputDbgTrace+0x54>
 8005ff8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8005ffa:	e001      	b.n	8006000 <OutputDbgTrace+0x50>
          break;
 8005ffc:	bf00      	nop
 8005ffe:	e027      	b.n	8006050 <OutputDbgTrace+0xa0>
          break;
 8006000:	bf00      	nop
 8006002:	e025      	b.n	8006050 <OutputDbgTrace+0xa0>
          break;
 8006004:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8006006:	e023      	b.n	8006050 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800600c:	e020      	b.n	8006050 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	7a5b      	ldrb	r3, [r3, #9]
 8006016:	2b0e      	cmp	r3, #14
 8006018:	d001      	beq.n	800601e <OutputDbgTrace+0x6e>
 800601a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800601c:	e000      	b.n	8006020 <OutputDbgTrace+0x70>
          break;
 800601e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006020:	e016      	b.n	8006050 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	7a5b      	ldrb	r3, [r3, #9]
 800602a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800602c:	e010      	b.n	8006050 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8006032:	e00d      	b.n	8006050 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	7a5b      	ldrb	r3, [r3, #9]
 800603c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800603e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006040:	e006      	b.n	8006050 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	7a5b      	ldrb	r3, [r3, #9]
 800604a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800604c:	e000      	b.n	8006050 <OutputDbgTrace+0xa0>

    default:
      break;
 800604e:	bf00      	nop
  }

  return;
 8006050:	bf00      	nop
}
 8006052:	3714      	adds	r7, #20
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	4603      	mov	r3, r0
 8006064:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8006066:	4b0f      	ldr	r3, [pc, #60]	; (80060a4 <OTP_Read+0x48>)
 8006068:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800606a:	e002      	b.n	8006072 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	3b08      	subs	r3, #8
 8006070:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	3307      	adds	r3, #7
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	79fa      	ldrb	r2, [r7, #7]
 800607a:	429a      	cmp	r2, r3
 800607c:	d003      	beq.n	8006086 <OTP_Read+0x2a>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4a09      	ldr	r2, [pc, #36]	; (80060a8 <OTP_Read+0x4c>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d1f2      	bne.n	800606c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	3307      	adds	r3, #7
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	79fa      	ldrb	r2, [r7, #7]
 800608e:	429a      	cmp	r2, r3
 8006090:	d001      	beq.n	8006096 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8006092:	2300      	movs	r3, #0
 8006094:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8006096:	68fb      	ldr	r3, [r7, #12]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3714      	adds	r7, #20
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	1fff73f8 	.word	0x1fff73f8
 80060a8:	1fff7000 	.word	0x1fff7000

080060ac <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	605a      	str	r2, [r3, #4]
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060d4:	f3ef 8310 	mrs	r3, PRIMASK
 80060d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80060da:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80060dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80060de:	b672      	cpsid	i
}
 80060e0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d102      	bne.n	80060f2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80060ec:	2301      	movs	r3, #1
 80060ee:	75fb      	strb	r3, [r7, #23]
 80060f0:	e001      	b.n	80060f6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80060f2:	2300      	movs	r3, #0
 80060f4:	75fb      	strb	r3, [r7, #23]
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	f383 8810 	msr	PRIMASK, r3
}
 8006100:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8006102:	7dfb      	ldrb	r3, [r7, #23]
}
 8006104:	4618      	mov	r0, r3
 8006106:	371c      	adds	r7, #28
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800611a:	f3ef 8310 	mrs	r3, PRIMASK
 800611e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006120:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006122:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006124:	b672      	cpsid	i
}
 8006126:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	605a      	str	r2, [r3, #4]
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f383 8810 	msr	PRIMASK, r3
}
 800614e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006150:	bf00      	nop
 8006152:	371c      	adds	r7, #28
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006166:	f3ef 8310 	mrs	r3, PRIMASK
 800616a:	60fb      	str	r3, [r7, #12]
  return(result);
 800616c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800616e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006170:	b672      	cpsid	i
}
 8006172:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	683a      	ldr	r2, [r7, #0]
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	f383 8810 	msr	PRIMASK, r3
}
 800619a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800619c:	bf00      	nop
 800619e:	371c      	adds	r7, #28
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b087      	sub	sp, #28
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061b0:	f3ef 8310 	mrs	r3, PRIMASK
 80061b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80061b6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80061b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80061ba:	b672      	cpsid	i
}
 80061bc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6812      	ldr	r2, [r2, #0]
 80061c6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	6852      	ldr	r2, [r2, #4]
 80061d0:	605a      	str	r2, [r3, #4]
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	f383 8810 	msr	PRIMASK, r3
}
 80061dc:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b086      	sub	sp, #24
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061f4:	f3ef 8310 	mrs	r3, PRIMASK
 80061f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80061fa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80061fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80061fe:	b672      	cpsid	i
}
 8006200:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4618      	mov	r0, r3
 8006210:	f7ff ffca 	bl	80061a8 <LST_remove_node>
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	f383 8810 	msr	PRIMASK, r3
}
 800621e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006220:	bf00      	nop
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <__NVIC_SystemReset>:
{
 8006228:	b480      	push	{r7}
 800622a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800622c:	f3bf 8f4f 	dsb	sy
}
 8006230:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006232:	4b06      	ldr	r3, [pc, #24]	; (800624c <__NVIC_SystemReset+0x24>)
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800623a:	4904      	ldr	r1, [pc, #16]	; (800624c <__NVIC_SystemReset+0x24>)
 800623c:	4b04      	ldr	r3, [pc, #16]	; (8006250 <__NVIC_SystemReset+0x28>)
 800623e:	4313      	orrs	r3, r2
 8006240:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006242:	f3bf 8f4f 	dsb	sy
}
 8006246:	bf00      	nop
    __NOP();
 8006248:	bf00      	nop
 800624a:	e7fd      	b.n	8006248 <__NVIC_SystemReset+0x20>
 800624c:	e000ed00 	.word	0xe000ed00
 8006250:	05fa0004 	.word	0x05fa0004

08006254 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8006258:	4b03      	ldr	r3, [pc, #12]	; (8006268 <LL_FLASH_GetUDN+0x14>)
 800625a:	681b      	ldr	r3, [r3, #0]
}
 800625c:	4618      	mov	r0, r3
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	1fff7580 	.word	0x1fff7580

0800626c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8006270:	4b03      	ldr	r3, [pc, #12]	; (8006280 <LL_FLASH_GetDeviceID+0x14>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	b2db      	uxtb	r3, r3
}
 8006276:	4618      	mov	r0, r3
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	1fff7584 	.word	0x1fff7584

08006284 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8006288:	4b03      	ldr	r3, [pc, #12]	; (8006298 <LL_FLASH_GetSTCompanyID+0x14>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	0a1b      	lsrs	r3, r3, #8
}
 800628e:	4618      	mov	r0, r3
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	1fff7584 	.word	0x1fff7584

0800629c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800629c:	b5b0      	push	{r4, r5, r7, lr}
 800629e:	b090      	sub	sp, #64	; 0x40
 80062a0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1<<CFG_TASK_INIT_TEMP, UTIL_SEQ_RFU, initTemp);
 80062a2:	4a21      	ldr	r2, [pc, #132]	; (8006328 <APP_BLE_Init+0x8c>)
 80062a4:	2100      	movs	r1, #0
 80062a6:	2004      	movs	r0, #4
 80062a8:	f000 ff82 	bl	80071b0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_UPDATE_TEMP, UTIL_SEQ_RFU, updateTemp);
 80062ac:	4a1f      	ldr	r2, [pc, #124]	; (800632c <APP_BLE_Init+0x90>)
 80062ae:	2100      	movs	r1, #0
 80062b0:	2008      	movs	r0, #8
 80062b2:	f000 ff7d 	bl	80071b0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1<<CFG_TASK_INIT_TEMP, CFG_SCH_PRIO_0);
 80062b6:	2100      	movs	r1, #0
 80062b8:	2004      	movs	r0, #4
 80062ba:	f000 ff9b 	bl	80071f4 <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80062be:	4b1c      	ldr	r3, [pc, #112]	; (8006330 <APP_BLE_Init+0x94>)
 80062c0:	1d3c      	adds	r4, r7, #4
 80062c2:	461d      	mov	r5, r3
 80062c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80062d4:	e884 0003 	stmia.w	r4, {r0, r1}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80062d8:	f000 f864 	bl	80063a4 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80062dc:	2101      	movs	r1, #1
 80062de:	2002      	movs	r0, #2
 80062e0:	f000 fe04 	bl	8006eec <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80062e4:	4a13      	ldr	r2, [pc, #76]	; (8006334 <APP_BLE_Init+0x98>)
 80062e6:	2100      	movs	r1, #0
 80062e8:	2002      	movs	r0, #2
 80062ea:	f000 ff61 	bl	80071b0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80062ee:	1d3b      	adds	r3, r7, #4
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7ff f8af 	bl	8005454 <SHCI_C2_BLE_Init>
 80062f6:	4603      	mov	r3, r0
 80062f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 80062fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006300:	2b00      	cmp	r3, #0
 8006302:	d001      	beq.n	8006308 <APP_BLE_Init+0x6c>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8006304:	f7fa fe48 	bl	8000f98 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8006308:	f000 f862 	bl	80063d0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800630c:	f7ff f816 	bl	800533c <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_BEACON_UPDATE_REQ_ID, UTIL_SEQ_RFU, Beacon_Update);
 8006310:	4a09      	ldr	r2, [pc, #36]	; (8006338 <APP_BLE_Init+0x9c>)
 8006312:	2100      	movs	r1, #0
 8006314:	2001      	movs	r0, #1
 8006316:	f000 ff4b 	bl	80071b0 <UTIL_SEQ_RegTask>
    EddystoneTLM_Process();
  }
  else if (CFG_BEACON_TYPE & CFG_IBEACON)
  {
    APP_DBG_MSG("Ibeacon advertise\n\r");
    IBeacon_Process();
 800631a:	f000 fa13 	bl	8006744 <IBeacon_Process>
  }
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800631e:	bf00      	nop
}
 8006320:	3740      	adds	r7, #64	; 0x40
 8006322:	46bd      	mov	sp, r7
 8006324:	bdb0      	pop	{r4, r5, r7, pc}
 8006326:	bf00      	nop
 8006328:	08006795 	.word	0x08006795
 800632c:	08006839 	.word	0x08006839
 8006330:	080074fc 	.word	0x080074fc
 8006334:	08005671 	.word	0x08005671
 8006338:	080064a5 	.word	0x080064a5

0800633c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3301      	adds	r3, #1
 8006348:	617b      	str	r3, [r7, #20]

  switch (p_event_pckt->evt)
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2bff      	cmp	r3, #255	; 0xff
 8006350:	d00e      	beq.n	8006370 <SVCCTL_App_Notification+0x34>
 8006352:	2bff      	cmp	r3, #255	; 0xff
 8006354:	dc19      	bgt.n	800638a <SVCCTL_App_Notification+0x4e>
 8006356:	2b05      	cmp	r3, #5
 8006358:	d019      	beq.n	800638e <SVCCTL_App_Notification+0x52>
 800635a:	2b3e      	cmp	r3, #62	; 0x3e
 800635c:	d000      	beq.n	8006360 <SVCCTL_App_Notification+0x24>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800635e:	e014      	b.n	800638a <SVCCTL_App_Notification+0x4e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	3302      	adds	r3, #2
 8006364:	60fb      	str	r3, [r7, #12]
      switch (p_meta_evt->subevent)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b01      	cmp	r3, #1
          break;
 800636c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800636e:	e011      	b.n	8006394 <SVCCTL_App_Notification+0x58>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	3302      	adds	r3, #2
 8006374:	613b      	str	r3, [r7, #16]
      switch (p_blecore_evt->ecode)
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	b29b      	uxth	r3, r3
 800637c:	461a      	mov	r2, r3
 800637e:	f240 4307 	movw	r3, #1031	; 0x407
 8006382:	429a      	cmp	r2, r3
 8006384:	d105      	bne.n	8006392 <SVCCTL_App_Notification+0x56>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8006386:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8006388:	e003      	b.n	8006392 <SVCCTL_App_Notification+0x56>
      break;
 800638a:	bf00      	nop
 800638c:	e002      	b.n	8006394 <SVCCTL_App_Notification+0x58>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800638e:	bf00      	nop
 8006390:	e000      	b.n	8006394 <SVCCTL_App_Notification+0x58>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8006392:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8006394:	2301      	movs	r3, #1
}
 8006396:	4618      	mov	r0, r3
 8006398:	371c      	adds	r7, #28
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
	...

080063a4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80063aa:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <Ble_Tl_Init+0x20>)
 80063ac:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80063ae:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <Ble_Tl_Init+0x24>)
 80063b0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80063b2:	463b      	mov	r3, r7
 80063b4:	4619      	mov	r1, r3
 80063b6:	4805      	ldr	r0, [pc, #20]	; (80063cc <Ble_Tl_Init+0x28>)
 80063b8:	f7ff f93e 	bl	8005638 <hci_init>

  return;
 80063bc:	bf00      	nop
}
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	200300d8 	.word	0x200300d8
 80063c8:	0800660d 	.word	0x0800660d
 80063cc:	080065d5 	.word	0x080065d5

080063d0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80063d0:	b5b0      	push	{r4, r5, r7, lr}
 80063d2:	b088      	sub	sp, #32
 80063d4:	af02      	add	r7, sp, #8
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80063d6:	2300      	movs	r3, #0
 80063d8:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80063da:	2392      	movs	r3, #146	; 0x92
 80063dc:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80063de:	f7fe fe82 	bl	80050e6 <hci_reset>
 80063e2:	4603      	mov	r3, r0
 80063e4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80063e6:	f000 f88f 	bl	8006508 <BleGetBdAddress>
 80063ea:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	2106      	movs	r1, #6
 80063f0:	2000      	movs	r0, #0
 80063f2:	f7fe fd8c 	bl	8004f0e <aci_hal_write_config_data>
 80063f6:	4603      	mov	r3, r0
 80063f8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80063fa:	4a27      	ldr	r2, [pc, #156]	; (8006498 <Ble_Hci_Gap_Gatt_Init+0xc8>)
 80063fc:	2110      	movs	r1, #16
 80063fe:	2018      	movs	r0, #24
 8006400:	f7fe fd85 	bl	8004f0e <aci_hal_write_config_data>
 8006404:	4603      	mov	r3, r0
 8006406:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8006408:	4a24      	ldr	r2, [pc, #144]	; (800649c <Ble_Hci_Gap_Gatt_Init+0xcc>)
 800640a:	2110      	movs	r1, #16
 800640c:	2008      	movs	r0, #8
 800640e:	f7fe fd7e 	bl	8004f0e <aci_hal_write_config_data>
 8006412:	4603      	mov	r3, r0
 8006414:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8006416:	2119      	movs	r1, #25
 8006418:	2001      	movs	r0, #1
 800641a:	f7fe fdfd 	bl	8005018 <aci_hal_set_tx_power_level>
 800641e:	4603      	mov	r3, r0
 8006420:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8006422:	f7fe fca6 	bl	8004d72 <aci_gatt_init>
 8006426:	4603      	mov	r3, r0
 8006428:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800642a:	2300      	movs	r3, #0
 800642c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800642e:	7bfb      	ldrb	r3, [r7, #15]
 8006430:	f043 0301 	orr.w	r3, r3, #1
 8006434:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif /* BLE_CFG_CENTRAL == 1 */

  if (role > 0)
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d01f      	beq.n	800647c <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = "STM32WB";
 800643c:	4b18      	ldr	r3, [pc, #96]	; (80064a0 <Ble_Hci_Gap_Gatt_Init+0xd0>)
 800643e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8006440:	1dba      	adds	r2, r7, #6
 8006442:	7bf8      	ldrb	r0, [r7, #15]
 8006444:	1cbb      	adds	r3, r7, #2
 8006446:	9301      	str	r3, [sp, #4]
 8006448:	1d3b      	adds	r3, r7, #4
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	4613      	mov	r3, r2
 800644e:	2207      	movs	r2, #7
 8006450:	2100      	movs	r1, #0
 8006452:	f7fe fb1b 	bl	8004a8c <aci_gap_init>
 8006456:	4603      	mov	r3, r0
 8006458:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800645a:	88fc      	ldrh	r4, [r7, #6]
 800645c:	88bd      	ldrh	r5, [r7, #4]
 800645e:	68b8      	ldr	r0, [r7, #8]
 8006460:	f7f9 fe8c 	bl	800017c <strlen>
 8006464:	4603      	mov	r3, r0
 8006466:	b2da      	uxtb	r2, r3
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	9300      	str	r3, [sp, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	2200      	movs	r2, #0
 8006470:	4629      	mov	r1, r5
 8006472:	4620      	mov	r0, r4
 8006474:	f7fe fca2 	bl	8004dbc <aci_gatt_update_char_value>
 8006478:	4603      	mov	r3, r0
 800647a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800647c:	88f8      	ldrh	r0, [r7, #6]
 800647e:	8879      	ldrh	r1, [r7, #2]
 8006480:	463b      	mov	r3, r7
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	2302      	movs	r3, #2
 8006486:	2200      	movs	r2, #0
 8006488:	f7fe fc98 	bl	8004dbc <aci_gatt_update_char_value>
 800648c:	4603      	mov	r3, r0
 800648e:	75fb      	strb	r3, [r7, #23]
  else
  {
    BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Appearance\n");
  }

}
 8006490:	bf00      	nop
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bdb0      	pop	{r4, r5, r7, pc}
 8006498:	0800773c 	.word	0x0800773c
 800649c:	0800774c 	.word	0x0800774c
 80064a0:	08007534 	.word	0x08007534

080064a4 <Beacon_Update>:
static void Beacon_Update(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
  FLASH_EraseInitTypeDef erase;
  uint32_t pageError = 0;
 80064aa:	2300      	movs	r3, #0
 80064ac:	603b      	str	r3, [r7, #0]

  if (sector_type != 0)
 80064ae:	4b13      	ldr	r3, [pc, #76]	; (80064fc <Beacon_Update+0x58>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d01b      	beq.n	80064ee <Beacon_Update+0x4a>
  {
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 80064b6:	2302      	movs	r3, #2
 80064b8:	607b      	str	r3, [r7, #4]
    erase.Page      = sector_type;
 80064ba:	4b10      	ldr	r3, [pc, #64]	; (80064fc <Beacon_Update+0x58>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	60bb      	str	r3, [r7, #8]
    if (sector_type == APP_SECTORS)
 80064c0:	4b0e      	ldr	r3, [pc, #56]	; (80064fc <Beacon_Update+0x58>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b07      	cmp	r3, #7
 80064c6:	d102      	bne.n	80064ce <Beacon_Update+0x2a>
    {
      erase.NbPages = 2;  /* 2 sectors for beacon application */
 80064c8:	2302      	movs	r3, #2
 80064ca:	60fb      	str	r3, [r7, #12]
 80064cc:	e001      	b.n	80064d2 <Beacon_Update+0x2e>
    }
    else
    {
      erase.NbPages = 1; /* 1 sector for beacon user data */
 80064ce:	2301      	movs	r3, #1
 80064d0:	60fb      	str	r3, [r7, #12]
    }

    HAL_FLASH_Unlock();
 80064d2:	f7fb fb05 	bl	8001ae0 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 80064d6:	4b0a      	ldr	r3, [pc, #40]	; (8006500 <Beacon_Update+0x5c>)
 80064d8:	f248 0211 	movw	r2, #32785	; 0x8011
 80064dc:	611a      	str	r2, [r3, #16]

    HAL_FLASHEx_Erase(&erase, &pageError);
 80064de:	463a      	mov	r2, r7
 80064e0:	1d3b      	adds	r3, r7, #4
 80064e2:	4611      	mov	r1, r2
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fb fba7 	bl	8001c38 <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 80064ea:	f7fb fb1b 	bl	8001b24 <HAL_FLASH_Lock>
  }

  *(uint32_t*) SRAM1_BASE = BOOT_MODE_AND_SECTOR;
 80064ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80064f2:	4a04      	ldr	r2, [pc, #16]	; (8006504 <Beacon_Update+0x60>)
 80064f4:	601a      	str	r2, [r3, #0]
  /**
   * Boot Mode:    1 (OTA)
   * Sector Index: 6
   * Nb Sectors  : 1
   */
  NVIC_SystemReset();
 80064f6:	f7ff fe97 	bl	8006228 <__NVIC_SystemReset>
 80064fa:	bf00      	nop
 80064fc:	20000282 	.word	0x20000282
 8006500:	58004000 	.word	0x58004000
 8006504:	00010601 	.word	0x00010601

08006508 <BleGetBdAddress>:
}

const uint8_t* BleGetBdAddress(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800650e:	f7ff fea1 	bl	8006254 <LL_FLASH_GetUDN>
 8006512:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651a:	d023      	beq.n	8006564 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800651c:	f7ff feb2 	bl	8006284 <LL_FLASH_GetSTCompanyID>
 8006520:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8006522:	f7ff fea3 	bl	800626c <LL_FLASH_GetDeviceID>
 8006526:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	b2da      	uxtb	r2, r3
 800652c:	4b16      	ldr	r3, [pc, #88]	; (8006588 <BleGetBdAddress+0x80>)
 800652e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	0a1b      	lsrs	r3, r3, #8
 8006534:	b2da      	uxtb	r2, r3
 8006536:	4b14      	ldr	r3, [pc, #80]	; (8006588 <BleGetBdAddress+0x80>)
 8006538:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	b2da      	uxtb	r2, r3
 800653e:	4b12      	ldr	r3, [pc, #72]	; (8006588 <BleGetBdAddress+0x80>)
 8006540:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	b2da      	uxtb	r2, r3
 8006546:	4b10      	ldr	r3, [pc, #64]	; (8006588 <BleGetBdAddress+0x80>)
 8006548:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	0a1b      	lsrs	r3, r3, #8
 800654e:	b2da      	uxtb	r2, r3
 8006550:	4b0d      	ldr	r3, [pc, #52]	; (8006588 <BleGetBdAddress+0x80>)
 8006552:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	0c1b      	lsrs	r3, r3, #16
 8006558:	b2da      	uxtb	r2, r3
 800655a:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <BleGetBdAddress+0x80>)
 800655c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800655e:	4b0a      	ldr	r3, [pc, #40]	; (8006588 <BleGetBdAddress+0x80>)
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	e00b      	b.n	800657c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8006564:	2000      	movs	r0, #0
 8006566:	f7ff fd79 	bl	800605c <OTP_Read>
 800656a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d002      	beq.n	8006578 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	e001      	b.n	800657c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8006578:	4b04      	ldr	r3, [pc, #16]	; (800658c <BleGetBdAddress+0x84>)
 800657a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800657c:	697b      	ldr	r3, [r7, #20]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	2000027c 	.word	0x2000027c
 800658c:	08007734 	.word	0x08007734

08006590 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8006598:	2100      	movs	r1, #0
 800659a:	2002      	movs	r0, #2
 800659c:	f000 fe2a 	bl	80071f4 <UTIL_SEQ_SetTask>

  return;
 80065a0:	bf00      	nop
}
 80065a2:	3708      	adds	r7, #8
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80065b0:	2001      	movs	r0, #1
 80065b2:	f000 fe8b 	bl	80072cc <UTIL_SEQ_SetEvt>

  return;
 80065b6:	bf00      	nop
}
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80065c6:	2001      	movs	r0, #1
 80065c8:	f000 fea0 	bl	800730c <UTIL_SEQ_WaitEvt>

  return;
 80065cc:	bf00      	nop
}
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	3308      	adds	r3, #8
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fe fee0 	bl	80053ac <SVCCTL_UserEvtRx>
 80065ec:	4603      	mov	r3, r0
 80065ee:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80065f0:	7afb      	ldrb	r3, [r7, #11]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2201      	movs	r2, #1
 80065fa:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80065fc:	e003      	b.n	8006606 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	701a      	strb	r2, [r3, #0]
  return;
 8006604:	bf00      	nop
}
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	4603      	mov	r3, r0
 8006614:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8006616:	79fb      	ldrb	r3, [r7, #7]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <BLE_StatusNot+0x16>
 800661c:	2b01      	cmp	r3, #1
 800661e:	d006      	beq.n	800662e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8006620:	e00b      	b.n	800663a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8006622:	230f      	movs	r3, #15
 8006624:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 fe10 	bl	800724c <UTIL_SEQ_PauseTask>
      break;
 800662c:	e005      	b.n	800663a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800662e:	230f      	movs	r3, #15
 8006630:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 fe2a 	bl	800728c <UTIL_SEQ_ResumeTask>
      break;
 8006638:	bf00      	nop
  }

  return;
 800663a:	bf00      	nop
}
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
	...

08006644 <IBeacon_Init>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/

static tBleStatus IBeacon_Init(IBeacon_InitTypeDef *IBeacon_Init)
{
 8006644:	b5b0      	push	{r4, r5, r7, lr}
 8006646:	b094      	sub	sp, #80	; 0x50
 8006648:	af08      	add	r7, sp, #32
 800664a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN IBeacon_Init_1 */

/* USER CODE END IBeacon_Init_1 */
  tBleStatus ret = BLE_STATUS_SUCCESS;
 800664c:	2300      	movs	r3, #0
 800664e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint16_t AdvertisingInterval = (IBeacon_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	4a37      	ldr	r2, [pc, #220]	; (8006738 <IBeacon_Init+0xf4>)
 800665a:	fb82 1203 	smull	r1, r2, r2, r3
 800665e:	1092      	asrs	r2, r2, #2
 8006660:	17db      	asrs	r3, r3, #31
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* Disable scan response. */
  hci_le_set_scan_response_data(0, NULL);
 8006666:	2100      	movs	r1, #0
 8006668:	2000      	movs	r0, #0
 800666a:	f7fe fd60 	bl	800512e <hci_le_set_scan_response_data>

  /* Put the device in a non-connectable mode. */
  ret = aci_gap_set_discoverable(ADV_NONCONN_IND,                          /*< Advertise as non-connectable, undirected. */
 800666e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8006670:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8006672:	2300      	movs	r3, #0
 8006674:	9306      	str	r3, [sp, #24]
 8006676:	2300      	movs	r3, #0
 8006678:	9305      	str	r3, [sp, #20]
 800667a:	2300      	movs	r3, #0
 800667c:	9304      	str	r3, [sp, #16]
 800667e:	2300      	movs	r3, #0
 8006680:	9303      	str	r3, [sp, #12]
 8006682:	2300      	movs	r3, #0
 8006684:	9302      	str	r3, [sp, #8]
 8006686:	2300      	movs	r3, #0
 8006688:	9301      	str	r3, [sp, #4]
 800668a:	2300      	movs	r3, #0
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	2300      	movs	r3, #0
 8006690:	2003      	movs	r0, #3
 8006692:	f7fe f901 	bl	8004898 <aci_gap_set_discoverable>
 8006696:	4603      	mov	r3, r0
 8006698:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 PUBLIC_ADDR, NO_WHITE_LIST_USE,           /*< Use the public address, with no white list. */
                                 0, NULL,                                  /*< Do not use a local name. */
                                 0, NULL,                                  /*< Do not include the service UUID list. */
                                 0, 0);                                    /*< Do not set a slave connection interval. */

  if (ret != BLE_STATUS_SUCCESS)
 800669c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <IBeacon_Init+0x66>
  {
    return ret;
 80066a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066a8:	e041      	b.n	800672e <IBeacon_Init+0xea>
  }

  /* Remove the TX power level advertisement (this is done to decrease the packet size). */
  ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 80066aa:	200a      	movs	r0, #10
 80066ac:	f7fe fb0d 	bl	8004cca <aci_gap_delete_ad_type>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 80066b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d002      	beq.n	80066c4 <IBeacon_Init+0x80>
  {
    return ret;
 80066be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80066c2:	e034      	b.n	800672e <IBeacon_Init+0xea>
  }

	uint8_t service_data[] =
 80066c4:	4b1d      	ldr	r3, [pc, #116]	; (800673c <IBeacon_Init+0xf8>)
 80066c6:	f107 0410 	add.w	r4, r7, #16
 80066ca:	461d      	mov	r5, r3
 80066cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80066ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80066d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  0x00, 0x00,					 	 	 					 /*< 2-byte Major */
		  0x00, 0x00,					 		     			 /*< 2-byte Temperature Data */
		  0x00, 0x00,						     					         /*< 1-byte Power */
		};

  uint8_t flags[] =
 80066d8:	4a19      	ldr	r2, [pc, #100]	; (8006740 <IBeacon_Init+0xfc>)
 80066da:	f107 030c 	add.w	r3, r7, #12
 80066de:	6812      	ldr	r2, [r2, #0]
 80066e0:	4611      	mov	r1, r2
 80066e2:	8019      	strh	r1, [r3, #0]
 80066e4:	3302      	adds	r3, #2
 80066e6:	0c12      	lsrs	r2, r2, #16
 80066e8:	701a      	strb	r2, [r3, #0]
    AD_TYPE_FLAGS,                                                          /*< Flags data type value. */
    (FLAG_BIT_LE_GENERAL_DISCOVERABLE_MODE | FLAG_BIT_BR_EDR_NOT_SUPPORTED) /*< BLE general discoverable, without BR/EDR support. */
  };

  /* Update the service data. */
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 80066ea:	f107 0310 	add.w	r3, r7, #16
 80066ee:	4619      	mov	r1, r3
 80066f0:	201c      	movs	r0, #28
 80066f2:	f7fe fa78 	bl	8004be6 <aci_gap_update_adv_data>
 80066f6:	4603      	mov	r3, r0
 80066f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 80066fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <IBeacon_Init+0xc6>
  {
    return ret;
 8006704:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006708:	e011      	b.n	800672e <IBeacon_Init+0xea>
  }

  /* Update the adverstising flags. */
  ret = aci_gap_update_adv_data(sizeof(flags), flags);
 800670a:	f107 030c 	add.w	r3, r7, #12
 800670e:	4619      	mov	r1, r3
 8006710:	2003      	movs	r0, #3
 8006712:	f7fe fa68 	bl	8004be6 <aci_gap_update_adv_data>
 8006716:	4603      	mov	r3, r0
 8006718:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 800671c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006720:	2b00      	cmp	r3, #0
 8006722:	d002      	beq.n	800672a <IBeacon_Init+0xe6>
  {
    return ret;
 8006724:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006728:	e001      	b.n	800672e <IBeacon_Init+0xea>
  }
/* USER CODE BEGIN IBeacon_Init_2 */

/* USER CODE END IBeacon_Init_2 */
  return ret;
 800672a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800672e:	4618      	mov	r0, r3
 8006730:	3730      	adds	r7, #48	; 0x30
 8006732:	46bd      	mov	sp, r7
 8006734:	bdb0      	pop	{r4, r5, r7, pc}
 8006736:	bf00      	nop
 8006738:	66666667 	.word	0x66666667
 800673c:	0800753c 	.word	0x0800753c
 8006740:	08007558 	.word	0x08007558

08006744 <IBeacon_Process>:

void IBeacon_Process(void)
{
 8006744:	b590      	push	{r4, r7, lr}
 8006746:	b08d      	sub	sp, #52	; 0x34
 8006748:	af00      	add	r7, sp, #0
/* USER CODE BEGIN IBeacon_Process_1 */

/* USER CODE END IBeacon_Process_1 */
  /* Default ibeacon */
  uint8_t UuID[]    = { UUID };
 800674a:	4b11      	ldr	r3, [pc, #68]	; (8006790 <IBeacon_Process+0x4c>)
 800674c:	f107 0420 	add.w	r4, r7, #32
 8006750:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006752:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t MajorID[] = { MAJOR_ID };
 8006756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800675a:	83bb      	strh	r3, [r7, #28]
  uint8_t MinorID[] = { MINOR_ID };
 800675c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006760:	833b      	strh	r3, [r7, #24]

  IBeacon_InitTypeDef IBeacon_InitStruct =
 8006762:	f242 7310 	movw	r3, #10000	; 0x2710
 8006766:	80bb      	strh	r3, [r7, #4]
 8006768:	f107 0320 	add.w	r3, r7, #32
 800676c:	60bb      	str	r3, [r7, #8]
 800676e:	f107 031c 	add.w	r3, r7, #28
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	f107 0318 	add.w	r3, r7, #24
 8006778:	613b      	str	r3, [r7, #16]
 800677a:	23c1      	movs	r3, #193	; 0xc1
 800677c:	753b      	strb	r3, [r7, #20]
    data_address += 2;
    IBeacon_InitStruct.CalibratedTxPower = *(uint8_t *)(data_address);
  }
#endif

  IBeacon_Init(&IBeacon_InitStruct);
 800677e:	1d3b      	adds	r3, r7, #4
 8006780:	4618      	mov	r0, r3
 8006782:	f7ff ff5f 	bl	8006644 <IBeacon_Init>
/* USER CODE BEGIN IBeacon_Process_2 */

/* USER CODE END IBeacon_Process_2 */
}
 8006786:	bf00      	nop
 8006788:	3734      	adds	r7, #52	; 0x34
 800678a:	46bd      	mov	sp, r7
 800678c:	bd90      	pop	{r4, r7, pc}
 800678e:	bf00      	nop
 8006790:	0800755c 	.word	0x0800755c

08006794 <initTemp>:
/* USER CODE BEGIN FD */
void initTemp(void) {
 8006794:	b590      	push	{r4, r7, lr}
 8006796:	b095      	sub	sp, #84	; 0x54
 8006798:	af14      	add	r7, sp, #80	; 0x50
	  TMP117_set_Configuration(hi2c1,0x03, 0x24, Device_ID_2);			// 8s Continous
 800679a:	4c26      	ldr	r4, [pc, #152]	; (8006834 <initTemp+0xa0>)
 800679c:	2392      	movs	r3, #146	; 0x92
 800679e:	9313      	str	r3, [sp, #76]	; 0x4c
 80067a0:	2324      	movs	r3, #36	; 0x24
 80067a2:	9312      	str	r3, [sp, #72]	; 0x48
 80067a4:	2303      	movs	r3, #3
 80067a6:	9311      	str	r3, [sp, #68]	; 0x44
 80067a8:	4668      	mov	r0, sp
 80067aa:	f104 0310 	add.w	r3, r4, #16
 80067ae:	2244      	movs	r2, #68	; 0x44
 80067b0:	4619      	mov	r1, r3
 80067b2:	f000 fe63 	bl	800747c <memcpy>
 80067b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80067ba:	f7f9 fd1b 	bl	80001f4 <TMP117_set_Configuration>
	  TMP117_set_Configuration(hi2c1,0x04, 0x00, Device_ID_1);			// Power Down
 80067be:	4c1d      	ldr	r4, [pc, #116]	; (8006834 <initTemp+0xa0>)
 80067c0:	2390      	movs	r3, #144	; 0x90
 80067c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80067c4:	2300      	movs	r3, #0
 80067c6:	9312      	str	r3, [sp, #72]	; 0x48
 80067c8:	2304      	movs	r3, #4
 80067ca:	9311      	str	r3, [sp, #68]	; 0x44
 80067cc:	4668      	mov	r0, sp
 80067ce:	f104 0310 	add.w	r3, r4, #16
 80067d2:	2244      	movs	r2, #68	; 0x44
 80067d4:	4619      	mov	r1, r3
 80067d6:	f000 fe51 	bl	800747c <memcpy>
 80067da:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80067de:	f7f9 fd09 	bl	80001f4 <TMP117_set_Configuration>
	  TMP117_set_Configuration(hi2c1,0x04, 0x00, Device_ID_3);			// Power Down
 80067e2:	4c14      	ldr	r4, [pc, #80]	; (8006834 <initTemp+0xa0>)
 80067e4:	2394      	movs	r3, #148	; 0x94
 80067e6:	9313      	str	r3, [sp, #76]	; 0x4c
 80067e8:	2300      	movs	r3, #0
 80067ea:	9312      	str	r3, [sp, #72]	; 0x48
 80067ec:	2304      	movs	r3, #4
 80067ee:	9311      	str	r3, [sp, #68]	; 0x44
 80067f0:	4668      	mov	r0, sp
 80067f2:	f104 0310 	add.w	r3, r4, #16
 80067f6:	2244      	movs	r2, #68	; 0x44
 80067f8:	4619      	mov	r1, r3
 80067fa:	f000 fe3f 	bl	800747c <memcpy>
 80067fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006802:	f7f9 fcf7 	bl	80001f4 <TMP117_set_Configuration>
	  TMP117_set_Configuration(hi2c1,0x04, 0x00, Device_ID_4);			// Power Down
 8006806:	4c0b      	ldr	r4, [pc, #44]	; (8006834 <initTemp+0xa0>)
 8006808:	2396      	movs	r3, #150	; 0x96
 800680a:	9313      	str	r3, [sp, #76]	; 0x4c
 800680c:	2300      	movs	r3, #0
 800680e:	9312      	str	r3, [sp, #72]	; 0x48
 8006810:	2304      	movs	r3, #4
 8006812:	9311      	str	r3, [sp, #68]	; 0x44
 8006814:	4668      	mov	r0, sp
 8006816:	f104 0310 	add.w	r3, r4, #16
 800681a:	2244      	movs	r2, #68	; 0x44
 800681c:	4619      	mov	r1, r3
 800681e:	f000 fe2d 	bl	800747c <memcpy>
 8006822:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006826:	f7f9 fce5 	bl	80001f4 <TMP117_set_Configuration>


}
 800682a:	bf00      	nop
 800682c:	3704      	adds	r7, #4
 800682e:	46bd      	mov	sp, r7
 8006830:	bd90      	pop	{r4, r7, pc}
 8006832:	bf00      	nop
 8006834:	2000013c 	.word	0x2000013c

08006838 <updateTemp>:

void updateTemp(void) {
 8006838:	b590      	push	{r4, r7, lr}
 800683a:	b09b      	sub	sp, #108	; 0x6c
 800683c:	af12      	add	r7, sp, #72	; 0x48

	switch (deviceToBeRead) {
 800683e:	4b70      	ldr	r3, [pc, #448]	; (8006a00 <updateTemp+0x1c8>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	3b01      	subs	r3, #1
 8006844:	2b03      	cmp	r3, #3
 8006846:	f200 8087 	bhi.w	8006958 <updateTemp+0x120>
 800684a:	a201      	add	r2, pc, #4	; (adr r2, 8006850 <updateTemp+0x18>)
 800684c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006850:	08006861 	.word	0x08006861
 8006854:	0800689f 	.word	0x0800689f
 8006858:	080068dd 	.word	0x080068dd
 800685c:	0800691b 	.word	0x0800691b
		case 1:
			temperature_val[0] = TMP117_get_Temperature(hi2c1, Device_ID_1);
 8006860:	4c68      	ldr	r4, [pc, #416]	; (8006a04 <updateTemp+0x1cc>)
 8006862:	2390      	movs	r3, #144	; 0x90
 8006864:	9311      	str	r3, [sp, #68]	; 0x44
 8006866:	4668      	mov	r0, sp
 8006868:	f104 0310 	add.w	r3, r4, #16
 800686c:	2244      	movs	r2, #68	; 0x44
 800686e:	4619      	mov	r1, r3
 8006870:	f000 fe04 	bl	800747c <memcpy>
 8006874:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006878:	f7f9 fc88 	bl	800018c <TMP117_get_Temperature>
 800687c:	4603      	mov	r3, r0
 800687e:	461a      	mov	r2, r3
 8006880:	4b61      	ldr	r3, [pc, #388]	; (8006a08 <updateTemp+0x1d0>)
 8006882:	801a      	strh	r2, [r3, #0]
			tempMSB_1 = temperature_val[0] >> 8;
 8006884:	4b60      	ldr	r3, [pc, #384]	; (8006a08 <updateTemp+0x1d0>)
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	0a1b      	lsrs	r3, r3, #8
 800688a:	b29b      	uxth	r3, r3
 800688c:	b2da      	uxtb	r2, r3
 800688e:	4b5f      	ldr	r3, [pc, #380]	; (8006a0c <updateTemp+0x1d4>)
 8006890:	701a      	strb	r2, [r3, #0]
			tempLSB_1 = temperature_val[0] & 0xFF;
 8006892:	4b5d      	ldr	r3, [pc, #372]	; (8006a08 <updateTemp+0x1d0>)
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	b2da      	uxtb	r2, r3
 8006898:	4b5d      	ldr	r3, [pc, #372]	; (8006a10 <updateTemp+0x1d8>)
 800689a:	701a      	strb	r2, [r3, #0]
			break;
 800689c:	e05d      	b.n	800695a <updateTemp+0x122>
		case 2:
			temperature_val[1] = TMP117_get_Temperature(hi2c1, Device_ID_2);
 800689e:	4c59      	ldr	r4, [pc, #356]	; (8006a04 <updateTemp+0x1cc>)
 80068a0:	2392      	movs	r3, #146	; 0x92
 80068a2:	9311      	str	r3, [sp, #68]	; 0x44
 80068a4:	4668      	mov	r0, sp
 80068a6:	f104 0310 	add.w	r3, r4, #16
 80068aa:	2244      	movs	r2, #68	; 0x44
 80068ac:	4619      	mov	r1, r3
 80068ae:	f000 fde5 	bl	800747c <memcpy>
 80068b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80068b6:	f7f9 fc69 	bl	800018c <TMP117_get_Temperature>
 80068ba:	4603      	mov	r3, r0
 80068bc:	461a      	mov	r2, r3
 80068be:	4b52      	ldr	r3, [pc, #328]	; (8006a08 <updateTemp+0x1d0>)
 80068c0:	805a      	strh	r2, [r3, #2]
			tempMSB_2 = temperature_val[1] >> 8;
 80068c2:	4b51      	ldr	r3, [pc, #324]	; (8006a08 <updateTemp+0x1d0>)
 80068c4:	885b      	ldrh	r3, [r3, #2]
 80068c6:	0a1b      	lsrs	r3, r3, #8
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	4b51      	ldr	r3, [pc, #324]	; (8006a14 <updateTemp+0x1dc>)
 80068ce:	701a      	strb	r2, [r3, #0]
			tempLSB_2 = temperature_val[1] & 0xFF;
 80068d0:	4b4d      	ldr	r3, [pc, #308]	; (8006a08 <updateTemp+0x1d0>)
 80068d2:	885b      	ldrh	r3, [r3, #2]
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	4b50      	ldr	r3, [pc, #320]	; (8006a18 <updateTemp+0x1e0>)
 80068d8:	701a      	strb	r2, [r3, #0]
			break;
 80068da:	e03e      	b.n	800695a <updateTemp+0x122>
		case 3:
			temperature_val[2] = TMP117_get_Temperature(hi2c1, Device_ID_3);
 80068dc:	4c49      	ldr	r4, [pc, #292]	; (8006a04 <updateTemp+0x1cc>)
 80068de:	2394      	movs	r3, #148	; 0x94
 80068e0:	9311      	str	r3, [sp, #68]	; 0x44
 80068e2:	4668      	mov	r0, sp
 80068e4:	f104 0310 	add.w	r3, r4, #16
 80068e8:	2244      	movs	r2, #68	; 0x44
 80068ea:	4619      	mov	r1, r3
 80068ec:	f000 fdc6 	bl	800747c <memcpy>
 80068f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80068f4:	f7f9 fc4a 	bl	800018c <TMP117_get_Temperature>
 80068f8:	4603      	mov	r3, r0
 80068fa:	461a      	mov	r2, r3
 80068fc:	4b42      	ldr	r3, [pc, #264]	; (8006a08 <updateTemp+0x1d0>)
 80068fe:	809a      	strh	r2, [r3, #4]
			tempMSB_3 = temperature_val[2] >> 8;
 8006900:	4b41      	ldr	r3, [pc, #260]	; (8006a08 <updateTemp+0x1d0>)
 8006902:	889b      	ldrh	r3, [r3, #4]
 8006904:	0a1b      	lsrs	r3, r3, #8
 8006906:	b29b      	uxth	r3, r3
 8006908:	b2da      	uxtb	r2, r3
 800690a:	4b44      	ldr	r3, [pc, #272]	; (8006a1c <updateTemp+0x1e4>)
 800690c:	701a      	strb	r2, [r3, #0]
			tempLSB_3 = temperature_val[2] & 0xFF;
 800690e:	4b3e      	ldr	r3, [pc, #248]	; (8006a08 <updateTemp+0x1d0>)
 8006910:	889b      	ldrh	r3, [r3, #4]
 8006912:	b2da      	uxtb	r2, r3
 8006914:	4b42      	ldr	r3, [pc, #264]	; (8006a20 <updateTemp+0x1e8>)
 8006916:	701a      	strb	r2, [r3, #0]
			break;
 8006918:	e01f      	b.n	800695a <updateTemp+0x122>
		case 4:
			temperature_val[3] = TMP117_get_Temperature(hi2c1, Device_ID_4);
 800691a:	4c3a      	ldr	r4, [pc, #232]	; (8006a04 <updateTemp+0x1cc>)
 800691c:	2396      	movs	r3, #150	; 0x96
 800691e:	9311      	str	r3, [sp, #68]	; 0x44
 8006920:	4668      	mov	r0, sp
 8006922:	f104 0310 	add.w	r3, r4, #16
 8006926:	2244      	movs	r2, #68	; 0x44
 8006928:	4619      	mov	r1, r3
 800692a:	f000 fda7 	bl	800747c <memcpy>
 800692e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006932:	f7f9 fc2b 	bl	800018c <TMP117_get_Temperature>
 8006936:	4603      	mov	r3, r0
 8006938:	461a      	mov	r2, r3
 800693a:	4b33      	ldr	r3, [pc, #204]	; (8006a08 <updateTemp+0x1d0>)
 800693c:	80da      	strh	r2, [r3, #6]
			tempMSB_4 = temperature_val[3] >> 8;
 800693e:	4b32      	ldr	r3, [pc, #200]	; (8006a08 <updateTemp+0x1d0>)
 8006940:	88db      	ldrh	r3, [r3, #6]
 8006942:	0a1b      	lsrs	r3, r3, #8
 8006944:	b29b      	uxth	r3, r3
 8006946:	b2da      	uxtb	r2, r3
 8006948:	4b36      	ldr	r3, [pc, #216]	; (8006a24 <updateTemp+0x1ec>)
 800694a:	701a      	strb	r2, [r3, #0]
			tempLSB_4 = temperature_val[3] & 0xFF;
 800694c:	4b2e      	ldr	r3, [pc, #184]	; (8006a08 <updateTemp+0x1d0>)
 800694e:	88db      	ldrh	r3, [r3, #6]
 8006950:	b2da      	uxtb	r2, r3
 8006952:	4b35      	ldr	r3, [pc, #212]	; (8006a28 <updateTemp+0x1f0>)
 8006954:	701a      	strb	r2, [r3, #0]
			break;
 8006956:	e000      	b.n	800695a <updateTemp+0x122>
		default:
			break;
 8006958:	bf00      	nop
	}

	uint8_t service_data[] =
 800695a:	231b      	movs	r3, #27
 800695c:	713b      	strb	r3, [r7, #4]
 800695e:	23ff      	movs	r3, #255	; 0xff
 8006960:	717b      	strb	r3, [r7, #5]
 8006962:	234c      	movs	r3, #76	; 0x4c
 8006964:	71bb      	strb	r3, [r7, #6]
 8006966:	2300      	movs	r3, #0
 8006968:	71fb      	strb	r3, [r7, #7]
 800696a:	4b28      	ldr	r3, [pc, #160]	; (8006a0c <updateTemp+0x1d4>)
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	723b      	strb	r3, [r7, #8]
 8006970:	4b27      	ldr	r3, [pc, #156]	; (8006a10 <updateTemp+0x1d8>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	727b      	strb	r3, [r7, #9]
 8006976:	2300      	movs	r3, #0
 8006978:	72bb      	strb	r3, [r7, #10]
 800697a:	2300      	movs	r3, #0
 800697c:	72fb      	strb	r3, [r7, #11]
 800697e:	2300      	movs	r3, #0
 8006980:	733b      	strb	r3, [r7, #12]
 8006982:	230e      	movs	r3, #14
 8006984:	737b      	strb	r3, [r7, #13]
 8006986:	238e      	movs	r3, #142	; 0x8e
 8006988:	73bb      	strb	r3, [r7, #14]
 800698a:	2322      	movs	r3, #34	; 0x22
 800698c:	73fb      	strb	r3, [r7, #15]
 800698e:	2345      	movs	r3, #69	; 0x45
 8006990:	743b      	strb	r3, [r7, #16]
 8006992:	2341      	movs	r3, #65	; 0x41
 8006994:	747b      	strb	r3, [r7, #17]
 8006996:	239d      	movs	r3, #157	; 0x9d
 8006998:	74bb      	strb	r3, [r7, #18]
 800699a:	234c      	movs	r3, #76	; 0x4c
 800699c:	74fb      	strb	r3, [r7, #19]
 800699e:	2321      	movs	r3, #33	; 0x21
 80069a0:	753b      	strb	r3, [r7, #20]
 80069a2:	23ed      	movs	r3, #237	; 0xed
 80069a4:	757b      	strb	r3, [r7, #21]
 80069a6:	23ae      	movs	r3, #174	; 0xae
 80069a8:	75bb      	strb	r3, [r7, #22]
 80069aa:	2382      	movs	r3, #130	; 0x82
 80069ac:	75fb      	strb	r3, [r7, #23]
 80069ae:	23ed      	movs	r3, #237	; 0xed
 80069b0:	763b      	strb	r3, [r7, #24]
 80069b2:	2319      	movs	r3, #25
 80069b4:	767b      	strb	r3, [r7, #25]
 80069b6:	4b17      	ldr	r3, [pc, #92]	; (8006a14 <updateTemp+0x1dc>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	76bb      	strb	r3, [r7, #26]
 80069bc:	4b16      	ldr	r3, [pc, #88]	; (8006a18 <updateTemp+0x1e0>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	76fb      	strb	r3, [r7, #27]
 80069c2:	4b16      	ldr	r3, [pc, #88]	; (8006a1c <updateTemp+0x1e4>)
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	773b      	strb	r3, [r7, #28]
 80069c8:	4b15      	ldr	r3, [pc, #84]	; (8006a20 <updateTemp+0x1e8>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	777b      	strb	r3, [r7, #29]
 80069ce:	4b15      	ldr	r3, [pc, #84]	; (8006a24 <updateTemp+0x1ec>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	77bb      	strb	r3, [r7, #30]
 80069d4:	4b14      	ldr	r3, [pc, #80]	; (8006a28 <updateTemp+0x1f0>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	77fb      	strb	r3, [r7, #31]
		  tempMSB_2, tempLSB_2,					 	 	 					 /*< 2-byte Major */
		  tempMSB_3, tempLSB_3,					 		     			 /*< 2-byte Temperature Data */
		  tempMSB_4, tempLSB_4,						     					         /*< 1-byte Power */
		};

    aci_gap_update_adv_data(sizeof(service_data), service_data);
 80069da:	1d3b      	adds	r3, r7, #4
 80069dc:	4619      	mov	r1, r3
 80069de:	201c      	movs	r0, #28
 80069e0:	f7fe f901 	bl	8004be6 <aci_gap_update_adv_data>
    deviceToBeRead = 0;
 80069e4:	4b06      	ldr	r3, [pc, #24]	; (8006a00 <updateTemp+0x1c8>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	701a      	strb	r2, [r3, #0]

	// Enter STOP MODE //
	HAL_SuspendTick();
 80069ea:	f7fa fef1 	bl	80017d0 <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80069ee:	2101      	movs	r1, #1
 80069f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80069f4:	f7fc f9a8 	bl	8002d48 <HAL_PWR_EnterSTOPMode>
}
 80069f8:	bf00      	nop
 80069fa:	3724      	adds	r7, #36	; 0x24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd90      	pop	{r4, r7, pc}
 8006a00:	200001f0 	.word	0x200001f0
 8006a04:	2000013c 	.word	0x2000013c
 8006a08:	20000284 	.word	0x20000284
 8006a0c:	2000028c 	.word	0x2000028c
 8006a10:	2000028d 	.word	0x2000028d
 8006a14:	2000028e 	.word	0x2000028e
 8006a18:	2000028f 	.word	0x2000028f
 8006a1c:	20000290 	.word	0x20000290
 8006a20:	20000291 	.word	0x20000291
 8006a24:	20000292 	.word	0x20000292
 8006a28:	20000293 	.word	0x20000293

08006a2c <LL_PWR_EnableBootC2>:
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8006a30:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <LL_PWR_EnableBootC2+0x1c>)
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	4a04      	ldr	r2, [pc, #16]	; (8006a48 <LL_PWR_EnableBootC2+0x1c>)
 8006a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a3a:	60d3      	str	r3, [r2, #12]
}
 8006a3c:	bf00      	nop
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	58000400 	.word	0x58000400

08006a4c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8006a54:	4b06      	ldr	r3, [pc, #24]	; (8006a70 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006a56:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006a5a:	4905      	ldr	r1, [pc, #20]	; (8006a70 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	58000800 	.word	0x58000800

08006a74 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006a7c:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006a7e:	6a1a      	ldr	r2, [r3, #32]
 8006a80:	4904      	ldr	r1, [pc, #16]	; (8006a94 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	620b      	str	r3, [r1, #32]
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	58000800 	.word	0x58000800

08006a98 <LL_AHB3_GRP1_EnableClock>:
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006aa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ab4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4013      	ands	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006abc:	68fb      	ldr	r3, [r7, #12]
}
 8006abe:	bf00      	nop
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b085      	sub	sp, #20
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8006ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ad6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8006ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aea:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4013      	ands	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006af4:	68fb      	ldr	r3, [r7, #12]
}
 8006af6:	bf00      	nop
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <LL_C1_IPCC_EnableIT_TXF>:
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	601a      	str	r2, [r3, #0]
}
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <LL_C1_IPCC_EnableIT_RXO>:
{
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f043 0201 	orr.w	r2, r3, #1
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	601a      	str	r2, [r3, #0]
}
 8006b36:	bf00      	nop
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	041b      	lsls	r3, r3, #16
 8006b54:	43db      	mvns	r3, r3
 8006b56:	401a      	ands	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	605a      	str	r2, [r3, #4]
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	041b      	lsls	r3, r3, #16
 8006b7a:	431a      	orrs	r2, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	605a      	str	r2, [r3, #4]
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <LL_C1_IPCC_EnableReceiveChannel>:
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	43db      	mvns	r3, r3
 8006b9e:	401a      	ands	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	605a      	str	r2, [r3, #4]
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	609a      	str	r2, [r3, #8]
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <LL_C1_IPCC_SetFlag_CHx>:
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	041a      	lsls	r2, r3, #16
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	609a      	str	r2, [r3, #8]
}
 8006bde:	bf00      	nop
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68da      	ldr	r2, [r3, #12]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d101      	bne.n	8006c06 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8006c02:	2301      	movs	r3, #1
 8006c04:	e000      	b.n	8006c08 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8006c06:	2300      	movs	r3, #0
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	69da      	ldr	r2, [r3, #28]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	4013      	ands	r3, r2
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d101      	bne.n	8006c30 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e000      	b.n	8006c32 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
	...

08006c40 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8006c44:	2102      	movs	r1, #2
 8006c46:	4819      	ldr	r0, [pc, #100]	; (8006cac <HW_IPCC_Rx_Handler+0x6c>)
 8006c48:	f7ff ffe4 	bl	8006c14 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d009      	beq.n	8006c66 <HW_IPCC_Rx_Handler+0x26>
 8006c52:	4b16      	ldr	r3, [pc, #88]	; (8006cac <HW_IPCC_Rx_Handler+0x6c>)
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	43db      	mvns	r3, r3
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8006c60:	f000 f8da 	bl	8006e18 <HW_IPCC_SYS_EvtHandler>
 8006c64:	e01f      	b.n	8006ca6 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8006c66:	2101      	movs	r1, #1
 8006c68:	4810      	ldr	r0, [pc, #64]	; (8006cac <HW_IPCC_Rx_Handler+0x6c>)
 8006c6a:	f7ff ffd3 	bl	8006c14 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d008      	beq.n	8006c86 <HW_IPCC_Rx_Handler+0x46>
 8006c74:	4b0d      	ldr	r3, [pc, #52]	; (8006cac <HW_IPCC_Rx_Handler+0x6c>)
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d102      	bne.n	8006c86 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8006c80:	f000 f88e 	bl	8006da0 <HW_IPCC_BLE_EvtHandler>
 8006c84:	e00f      	b.n	8006ca6 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8006c86:	2108      	movs	r1, #8
 8006c88:	4808      	ldr	r0, [pc, #32]	; (8006cac <HW_IPCC_Rx_Handler+0x6c>)
 8006c8a:	f7ff ffc3 	bl	8006c14 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d009      	beq.n	8006ca8 <HW_IPCC_Rx_Handler+0x68>
 8006c94:	4b05      	ldr	r3, [pc, #20]	; (8006cac <HW_IPCC_Rx_Handler+0x6c>)
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	43db      	mvns	r3, r3
 8006c9a:	f003 0308 	and.w	r3, r3, #8
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d002      	beq.n	8006ca8 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8006ca2:	f000 f905 	bl	8006eb0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
}
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	58000c00 	.word	0x58000c00

08006cb0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8006cb4:	2102      	movs	r1, #2
 8006cb6:	481a      	ldr	r0, [pc, #104]	; (8006d20 <HW_IPCC_Tx_Handler+0x70>)
 8006cb8:	f7ff ff97 	bl	8006bea <LL_C1_IPCC_IsActiveFlag_CHx>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d109      	bne.n	8006cd6 <HW_IPCC_Tx_Handler+0x26>
 8006cc2:	4b17      	ldr	r3, [pc, #92]	; (8006d20 <HW_IPCC_Tx_Handler+0x70>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	43db      	mvns	r3, r3
 8006cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d002      	beq.n	8006cd6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8006cd0:	f000 f896 	bl	8006e00 <HW_IPCC_SYS_CmdEvtHandler>
 8006cd4:	e020      	b.n	8006d18 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8006cd6:	2108      	movs	r1, #8
 8006cd8:	4811      	ldr	r0, [pc, #68]	; (8006d20 <HW_IPCC_Tx_Handler+0x70>)
 8006cda:	f7ff ff86 	bl	8006bea <LL_C1_IPCC_IsActiveFlag_CHx>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d109      	bne.n	8006cf8 <HW_IPCC_Tx_Handler+0x48>
 8006ce4:	4b0e      	ldr	r3, [pc, #56]	; (8006d20 <HW_IPCC_Tx_Handler+0x70>)
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	43db      	mvns	r3, r3
 8006cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d002      	beq.n	8006cf8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8006cf2:	f000 f8bf 	bl	8006e74 <HW_IPCC_MM_FreeBufHandler>
 8006cf6:	e00f      	b.n	8006d18 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8006cf8:	2120      	movs	r1, #32
 8006cfa:	4809      	ldr	r0, [pc, #36]	; (8006d20 <HW_IPCC_Tx_Handler+0x70>)
 8006cfc:	f7ff ff75 	bl	8006bea <LL_C1_IPCC_IsActiveFlag_CHx>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d109      	bne.n	8006d1a <HW_IPCC_Tx_Handler+0x6a>
 8006d06:	4b06      	ldr	r3, [pc, #24]	; (8006d20 <HW_IPCC_Tx_Handler+0x70>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	43db      	mvns	r3, r3
 8006d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d002      	beq.n	8006d1a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8006d14:	f000 f850 	bl	8006db8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8006d18:	bf00      	nop
 8006d1a:	bf00      	nop
}
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	58000c00 	.word	0x58000c00

08006d24 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8006d28:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006d2c:	f7ff fecd 	bl	8006aca <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8006d30:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006d34:	f7ff fe9e 	bl	8006a74 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8006d38:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006d3c:	f7ff fe86 	bl	8006a4c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8006d40:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8006d42:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8006d44:	f7ff fe72 	bl	8006a2c <LL_PWR_EnableBootC2>

  return;
 8006d48:	bf00      	nop
}
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8006d50:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006d54:	f7ff fea0 	bl	8006a98 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8006d58:	4806      	ldr	r0, [pc, #24]	; (8006d74 <HW_IPCC_Init+0x28>)
 8006d5a:	f7ff fee2 	bl	8006b22 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8006d5e:	4805      	ldr	r0, [pc, #20]	; (8006d74 <HW_IPCC_Init+0x28>)
 8006d60:	f7ff fecf 	bl	8006b02 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006d64:	202c      	movs	r0, #44	; 0x2c
 8006d66:	f7fa fe84 	bl	8001a72 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006d6a:	202d      	movs	r0, #45	; 0x2d
 8006d6c:	f7fa fe81 	bl	8001a72 <HAL_NVIC_EnableIRQ>

  return;
 8006d70:	bf00      	nop
}
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	58000c00 	.word	0x58000c00

08006d78 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	4802      	ldr	r0, [pc, #8]	; (8006d88 <HW_IPCC_BLE_Init+0x10>)
 8006d80:	f7ff ff04 	bl	8006b8c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006d84:	bf00      	nop
}
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	58000c00 	.word	0x58000c00

08006d8c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 8006d90:	2101      	movs	r1, #1
 8006d92:	4802      	ldr	r0, [pc, #8]	; (8006d9c <HW_IPCC_BLE_SendCmd+0x10>)
 8006d94:	f7ff ff1a 	bl	8006bcc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006d98:	bf00      	nop
}
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	58000c00 	.word	0x58000c00

08006da0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8006da4:	f7fe ffa2 	bl	8005cec <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006da8:	2101      	movs	r1, #1
 8006daa:	4802      	ldr	r0, [pc, #8]	; (8006db4 <HW_IPCC_BLE_EvtHandler+0x14>)
 8006dac:	f7ff ff00 	bl	8006bb0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006db0:	bf00      	nop
}
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	58000c00 	.word	0x58000c00

08006db8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8006dbc:	2120      	movs	r1, #32
 8006dbe:	4803      	ldr	r0, [pc, #12]	; (8006dcc <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8006dc0:	f7ff fed2 	bl	8006b68 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8006dc4:	f7fe ffc2 	bl	8005d4c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8006dc8:	bf00      	nop
}
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	58000c00 	.word	0x58000c00

08006dd0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006dd4:	2102      	movs	r1, #2
 8006dd6:	4802      	ldr	r0, [pc, #8]	; (8006de0 <HW_IPCC_SYS_Init+0x10>)
 8006dd8:	f7ff fed8 	bl	8006b8c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006ddc:	bf00      	nop
}
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	58000c00 	.word	0x58000c00

08006de4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006de8:	2102      	movs	r1, #2
 8006dea:	4804      	ldr	r0, [pc, #16]	; (8006dfc <HW_IPCC_SYS_SendCmd+0x18>)
 8006dec:	f7ff feee 	bl	8006bcc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006df0:	2102      	movs	r1, #2
 8006df2:	4802      	ldr	r0, [pc, #8]	; (8006dfc <HW_IPCC_SYS_SendCmd+0x18>)
 8006df4:	f7ff fea5 	bl	8006b42 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8006df8:	bf00      	nop
}
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	58000c00 	.word	0x58000c00

08006e00 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006e04:	2102      	movs	r1, #2
 8006e06:	4803      	ldr	r0, [pc, #12]	; (8006e14 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8006e08:	f7ff feae 	bl	8006b68 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8006e0c:	f7fe ffee 	bl	8005dec <HW_IPCC_SYS_CmdEvtNot>

  return;
 8006e10:	bf00      	nop
}
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	58000c00 	.word	0x58000c00

08006e18 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8006e1c:	f7fe fffc 	bl	8005e18 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006e20:	2102      	movs	r1, #2
 8006e22:	4802      	ldr	r0, [pc, #8]	; (8006e2c <HW_IPCC_SYS_EvtHandler+0x14>)
 8006e24:	f7ff fec4 	bl	8006bb0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006e28:	bf00      	nop
}
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	58000c00 	.word	0x58000c00

08006e30 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8006e38:	2108      	movs	r1, #8
 8006e3a:	480c      	ldr	r0, [pc, #48]	; (8006e6c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006e3c:	f7ff fed5 	bl	8006bea <LL_C1_IPCC_IsActiveFlag_CHx>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d007      	beq.n	8006e56 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8006e46:	4a0a      	ldr	r2, [pc, #40]	; (8006e70 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006e4c:	2108      	movs	r1, #8
 8006e4e:	4807      	ldr	r0, [pc, #28]	; (8006e6c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006e50:	f7ff fe77 	bl	8006b42 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8006e54:	e006      	b.n	8006e64 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006e5a:	2108      	movs	r1, #8
 8006e5c:	4803      	ldr	r0, [pc, #12]	; (8006e6c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006e5e:	f7ff feb5 	bl	8006bcc <LL_C1_IPCC_SetFlag_CHx>
  return;
 8006e62:	bf00      	nop
}
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	58000c00 	.word	0x58000c00
 8006e70:	20000294 	.word	0x20000294

08006e74 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006e78:	2108      	movs	r1, #8
 8006e7a:	4806      	ldr	r0, [pc, #24]	; (8006e94 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006e7c:	f7ff fe74 	bl	8006b68 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8006e80:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006e86:	2108      	movs	r1, #8
 8006e88:	4802      	ldr	r0, [pc, #8]	; (8006e94 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006e8a:	f7ff fe9f 	bl	8006bcc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006e8e:	bf00      	nop
}
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	58000c00 	.word	0x58000c00
 8006e98:	20000294 	.word	0x20000294

08006e9c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006ea0:	2108      	movs	r1, #8
 8006ea2:	4802      	ldr	r0, [pc, #8]	; (8006eac <HW_IPCC_TRACES_Init+0x10>)
 8006ea4:	f7ff fe72 	bl	8006b8c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006ea8:	bf00      	nop
}
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	58000c00 	.word	0x58000c00

08006eb0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8006eb4:	f7ff f858 	bl	8005f68 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006eb8:	2108      	movs	r1, #8
 8006eba:	4802      	ldr	r0, [pc, #8]	; (8006ec4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8006ebc:	f7ff fe78 	bl	8006bb0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006ec0:	bf00      	nop
}
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	58000c00 	.word	0x58000c00

08006ec8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8006ec8:	b480      	push	{r7}
 8006eca:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8006ecc:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <UTIL_LPM_Init+0x1c>)
 8006ece:	2200      	movs	r2, #0
 8006ed0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8006ed2:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <UTIL_LPM_Init+0x20>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8006ed8:	bf00      	nop
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	20000298 	.word	0x20000298
 8006ee8:	2000029c 	.word	0x2000029c

08006eec <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8006efc:	613b      	str	r3, [r7, #16]
  return(result);
 8006efe:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8006f00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f02:	b672      	cpsid	i
}
 8006f04:	bf00      	nop
  
  switch(state)
 8006f06:	78fb      	ldrb	r3, [r7, #3]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d008      	beq.n	8006f1e <UTIL_LPM_SetOffMode+0x32>
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d10e      	bne.n	8006f2e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8006f10:	4b0d      	ldr	r3, [pc, #52]	; (8006f48 <UTIL_LPM_SetOffMode+0x5c>)
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	4a0b      	ldr	r2, [pc, #44]	; (8006f48 <UTIL_LPM_SetOffMode+0x5c>)
 8006f1a:	6013      	str	r3, [r2, #0]
      break;
 8006f1c:	e008      	b.n	8006f30 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	43da      	mvns	r2, r3
 8006f22:	4b09      	ldr	r3, [pc, #36]	; (8006f48 <UTIL_LPM_SetOffMode+0x5c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4013      	ands	r3, r2
 8006f28:	4a07      	ldr	r2, [pc, #28]	; (8006f48 <UTIL_LPM_SetOffMode+0x5c>)
 8006f2a:	6013      	str	r3, [r2, #0]
      break;
 8006f2c:	e000      	b.n	8006f30 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8006f2e:	bf00      	nop
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f383 8810 	msr	PRIMASK, r3
}
 8006f3a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8006f3c:	bf00      	nop
 8006f3e:	371c      	adds	r7, #28
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr
 8006f48:	2000029c 	.word	0x2000029c

08006f4c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f52:	f3ef 8310 	mrs	r3, PRIMASK
 8006f56:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f58:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8006f5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f5c:	b672      	cpsid	i
}
 8006f5e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8006f60:	4b12      	ldr	r3, [pc, #72]	; (8006fac <UTIL_LPM_EnterLowPower+0x60>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d006      	beq.n	8006f76 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8006f68:	4b11      	ldr	r3, [pc, #68]	; (8006fb0 <UTIL_LPM_EnterLowPower+0x64>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8006f6e:	4b10      	ldr	r3, [pc, #64]	; (8006fb0 <UTIL_LPM_EnterLowPower+0x64>)
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	4798      	blx	r3
 8006f74:	e010      	b.n	8006f98 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8006f76:	4b0f      	ldr	r3, [pc, #60]	; (8006fb4 <UTIL_LPM_EnterLowPower+0x68>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d006      	beq.n	8006f8c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8006f7e:	4b0c      	ldr	r3, [pc, #48]	; (8006fb0 <UTIL_LPM_EnterLowPower+0x64>)
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8006f84:	4b0a      	ldr	r3, [pc, #40]	; (8006fb0 <UTIL_LPM_EnterLowPower+0x64>)
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	4798      	blx	r3
 8006f8a:	e005      	b.n	8006f98 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8006f8c:	4b08      	ldr	r3, [pc, #32]	; (8006fb0 <UTIL_LPM_EnterLowPower+0x64>)
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8006f92:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <UTIL_LPM_EnterLowPower+0x64>)
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	4798      	blx	r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f383 8810 	msr	PRIMASK, r3
}
 8006fa2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8006fa4:	bf00      	nop
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}
 8006fac:	20000298 	.word	0x20000298
 8006fb0:	0800769c 	.word	0x0800769c
 8006fb4:	2000029c 	.word	0x2000029c

08006fb8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b090      	sub	sp, #64	; 0x40
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8006fc0:	4b73      	ldr	r3, [pc, #460]	; (8007190 <UTIL_SEQ_Run+0x1d8>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8006fc6:	4b72      	ldr	r3, [pc, #456]	; (8007190 <UTIL_SEQ_Run+0x1d8>)
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	4a70      	ldr	r2, [pc, #448]	; (8007190 <UTIL_SEQ_Run+0x1d8>)
 8006fd0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8006fd2:	4b70      	ldr	r3, [pc, #448]	; (8007194 <UTIL_SEQ_Run+0x1dc>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8006fd8:	4b6f      	ldr	r3, [pc, #444]	; (8007198 <UTIL_SEQ_Run+0x1e0>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8006fde:	4b6f      	ldr	r3, [pc, #444]	; (800719c <UTIL_SEQ_Run+0x1e4>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8006fe4:	4b6e      	ldr	r3, [pc, #440]	; (80071a0 <UTIL_SEQ_Run+0x1e8>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8006fea:	e08d      	b.n	8007108 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8006ff0:	e002      	b.n	8006ff8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8006ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8006ff8:	4a6a      	ldr	r2, [pc, #424]	; (80071a4 <UTIL_SEQ_Run+0x1ec>)
 8006ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ffc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007002:	401a      	ands	r2, r3
 8007004:	4b62      	ldr	r3, [pc, #392]	; (8007190 <UTIL_SEQ_Run+0x1d8>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4013      	ands	r3, r2
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0f1      	beq.n	8006ff2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800700e:	4a65      	ldr	r2, [pc, #404]	; (80071a4 <UTIL_SEQ_Run+0x1ec>)
 8007010:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007012:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	401a      	ands	r2, r3
 800701a:	4b5d      	ldr	r3, [pc, #372]	; (8007190 <UTIL_SEQ_Run+0x1d8>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4013      	ands	r3, r2
 8007020:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8007022:	4a60      	ldr	r2, [pc, #384]	; (80071a4 <UTIL_SEQ_Run+0x1ec>)
 8007024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	4413      	add	r3, r2
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	4013      	ands	r3, r2
 8007030:	2b00      	cmp	r3, #0
 8007032:	d106      	bne.n	8007042 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8007034:	4a5b      	ldr	r2, [pc, #364]	; (80071a4 <UTIL_SEQ_Run+0x1ec>)
 8007036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007038:	00db      	lsls	r3, r3, #3
 800703a:	4413      	add	r3, r2
 800703c:	f04f 32ff 	mov.w	r2, #4294967295
 8007040:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8007042:	4a58      	ldr	r2, [pc, #352]	; (80071a4 <UTIL_SEQ_Run+0x1ec>)
 8007044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	4413      	add	r3, r2
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	4013      	ands	r3, r2
 8007050:	4618      	mov	r0, r3
 8007052:	f000 f9b3 	bl	80073bc <SEQ_BitPosition>
 8007056:	4603      	mov	r3, r0
 8007058:	461a      	mov	r2, r3
 800705a:	4b53      	ldr	r3, [pc, #332]	; (80071a8 <UTIL_SEQ_Run+0x1f0>)
 800705c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800705e:	4a51      	ldr	r2, [pc, #324]	; (80071a4 <UTIL_SEQ_Run+0x1ec>)
 8007060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007062:	00db      	lsls	r3, r3, #3
 8007064:	4413      	add	r3, r2
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	4b4f      	ldr	r3, [pc, #316]	; (80071a8 <UTIL_SEQ_Run+0x1f0>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2101      	movs	r1, #1
 800706e:	fa01 f303 	lsl.w	r3, r1, r3
 8007072:	43db      	mvns	r3, r3
 8007074:	401a      	ands	r2, r3
 8007076:	494b      	ldr	r1, [pc, #300]	; (80071a4 <UTIL_SEQ_Run+0x1ec>)
 8007078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800707a:	00db      	lsls	r3, r3, #3
 800707c:	440b      	add	r3, r1
 800707e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007080:	f3ef 8310 	mrs	r3, PRIMASK
 8007084:	61bb      	str	r3, [r7, #24]
  return(result);
 8007086:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007088:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800708a:	b672      	cpsid	i
}
 800708c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800708e:	4b46      	ldr	r3, [pc, #280]	; (80071a8 <UTIL_SEQ_Run+0x1f0>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2201      	movs	r2, #1
 8007094:	fa02 f303 	lsl.w	r3, r2, r3
 8007098:	43da      	mvns	r2, r3
 800709a:	4b3e      	ldr	r3, [pc, #248]	; (8007194 <UTIL_SEQ_Run+0x1dc>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4013      	ands	r3, r2
 80070a0:	4a3c      	ldr	r2, [pc, #240]	; (8007194 <UTIL_SEQ_Run+0x1dc>)
 80070a2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80070a4:	2302      	movs	r3, #2
 80070a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070a8:	e013      	b.n	80070d2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80070aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ac:	3b01      	subs	r3, #1
 80070ae:	4a3d      	ldr	r2, [pc, #244]	; (80071a4 <UTIL_SEQ_Run+0x1ec>)
 80070b0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80070b4:	4b3c      	ldr	r3, [pc, #240]	; (80071a8 <UTIL_SEQ_Run+0x1f0>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2201      	movs	r2, #1
 80070ba:	fa02 f303 	lsl.w	r3, r2, r3
 80070be:	43da      	mvns	r2, r3
 80070c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070c2:	3b01      	subs	r3, #1
 80070c4:	400a      	ands	r2, r1
 80070c6:	4937      	ldr	r1, [pc, #220]	; (80071a4 <UTIL_SEQ_Run+0x1ec>)
 80070c8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80070cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ce:	3b01      	subs	r3, #1
 80070d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1e8      	bne.n	80070aa <UTIL_SEQ_Run+0xf2>
 80070d8:	6a3b      	ldr	r3, [r7, #32]
 80070da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f383 8810 	msr	PRIMASK, r3
}
 80070e2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80070e4:	4b30      	ldr	r3, [pc, #192]	; (80071a8 <UTIL_SEQ_Run+0x1f0>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a30      	ldr	r2, [pc, #192]	; (80071ac <UTIL_SEQ_Run+0x1f4>)
 80070ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070ee:	4798      	blx	r3

    local_taskset = TaskSet;
 80070f0:	4b28      	ldr	r3, [pc, #160]	; (8007194 <UTIL_SEQ_Run+0x1dc>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 80070f6:	4b28      	ldr	r3, [pc, #160]	; (8007198 <UTIL_SEQ_Run+0x1e0>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 80070fc:	4b27      	ldr	r3, [pc, #156]	; (800719c <UTIL_SEQ_Run+0x1e4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8007102:	4b27      	ldr	r3, [pc, #156]	; (80071a0 <UTIL_SEQ_Run+0x1e8>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8007108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	401a      	ands	r2, r3
 800710e:	4b20      	ldr	r3, [pc, #128]	; (8007190 <UTIL_SEQ_Run+0x1d8>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4013      	ands	r3, r2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d005      	beq.n	8007124 <UTIL_SEQ_Run+0x16c>
 8007118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800711a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711c:	4013      	ands	r3, r2
 800711e:	2b00      	cmp	r3, #0
 8007120:	f43f af64 	beq.w	8006fec <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8007124:	4b20      	ldr	r3, [pc, #128]	; (80071a8 <UTIL_SEQ_Run+0x1f0>)
 8007126:	f04f 32ff 	mov.w	r2, #4294967295
 800712a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800712c:	f000 f938 	bl	80073a0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007130:	f3ef 8310 	mrs	r3, PRIMASK
 8007134:	613b      	str	r3, [r7, #16]
  return(result);
 8007136:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8007138:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800713a:	b672      	cpsid	i
}
 800713c:	bf00      	nop
  local_taskset = TaskSet;
 800713e:	4b15      	ldr	r3, [pc, #84]	; (8007194 <UTIL_SEQ_Run+0x1dc>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8007144:	4b14      	ldr	r3, [pc, #80]	; (8007198 <UTIL_SEQ_Run+0x1e0>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800714a:	4b14      	ldr	r3, [pc, #80]	; (800719c <UTIL_SEQ_Run+0x1e4>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8007150:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	401a      	ands	r2, r3
 8007156:	4b0e      	ldr	r3, [pc, #56]	; (8007190 <UTIL_SEQ_Run+0x1d8>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4013      	ands	r3, r2
 800715c:	2b00      	cmp	r3, #0
 800715e:	d107      	bne.n	8007170 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8007160:	4b0f      	ldr	r3, [pc, #60]	; (80071a0 <UTIL_SEQ_Run+0x1e8>)
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007166:	4013      	ands	r3, r2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d101      	bne.n	8007170 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800716c:	f7f9 fbdb 	bl	8000926 <UTIL_SEQ_Idle>
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f383 8810 	msr	PRIMASK, r3
}
 800717a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800717c:	f000 f917 	bl	80073ae <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8007180:	4a03      	ldr	r2, [pc, #12]	; (8007190 <UTIL_SEQ_Run+0x1d8>)
 8007182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007184:	6013      	str	r3, [r2, #0]

  return;
 8007186:	bf00      	nop
}
 8007188:	3740      	adds	r7, #64	; 0x40
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	20000020 	.word	0x20000020
 8007194:	200002a0 	.word	0x200002a0
 8007198:	200002a4 	.word	0x200002a4
 800719c:	2000001c 	.word	0x2000001c
 80071a0:	200002a8 	.word	0x200002a8
 80071a4:	20000330 	.word	0x20000330
 80071a8:	200002ac 	.word	0x200002ac
 80071ac:	200002b0 	.word	0x200002b0

080071b0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	60b9      	str	r1, [r7, #8]
 80071ba:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071bc:	f3ef 8310 	mrs	r3, PRIMASK
 80071c0:	617b      	str	r3, [r7, #20]
  return(result);
 80071c2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80071c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80071c6:	b672      	cpsid	i
}
 80071c8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f000 f8f6 	bl	80073bc <SEQ_BitPosition>
 80071d0:	4603      	mov	r3, r0
 80071d2:	4619      	mov	r1, r3
 80071d4:	4a06      	ldr	r2, [pc, #24]	; (80071f0 <UTIL_SEQ_RegTask+0x40>)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	f383 8810 	msr	PRIMASK, r3
}
 80071e6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80071e8:	bf00      	nop
}
 80071ea:	3720      	adds	r7, #32
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	200002b0 	.word	0x200002b0

080071f4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007202:	60fb      	str	r3, [r7, #12]
  return(result);
 8007204:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007206:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007208:	b672      	cpsid	i
}
 800720a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800720c:	4b0d      	ldr	r3, [pc, #52]	; (8007244 <UTIL_SEQ_SetTask+0x50>)
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4313      	orrs	r3, r2
 8007214:	4a0b      	ldr	r2, [pc, #44]	; (8007244 <UTIL_SEQ_SetTask+0x50>)
 8007216:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8007218:	4a0b      	ldr	r2, [pc, #44]	; (8007248 <UTIL_SEQ_SetTask+0x54>)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	431a      	orrs	r2, r3
 8007224:	4908      	ldr	r1, [pc, #32]	; (8007248 <UTIL_SEQ_SetTask+0x54>)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f383 8810 	msr	PRIMASK, r3
}
 8007236:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007238:	bf00      	nop
}
 800723a:	371c      	adds	r7, #28
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	200002a0 	.word	0x200002a0
 8007248:	20000330 	.word	0x20000330

0800724c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007254:	f3ef 8310 	mrs	r3, PRIMASK
 8007258:	60fb      	str	r3, [r7, #12]
  return(result);
 800725a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800725c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800725e:	b672      	cpsid	i
}
 8007260:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	43da      	mvns	r2, r3
 8007266:	4b08      	ldr	r3, [pc, #32]	; (8007288 <UTIL_SEQ_PauseTask+0x3c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4013      	ands	r3, r2
 800726c:	4a06      	ldr	r2, [pc, #24]	; (8007288 <UTIL_SEQ_PauseTask+0x3c>)
 800726e:	6013      	str	r3, [r2, #0]
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f383 8810 	msr	PRIMASK, r3
}
 800727a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800727c:	bf00      	nop
}
 800727e:	371c      	adds	r7, #28
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr
 8007288:	2000001c 	.word	0x2000001c

0800728c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007294:	f3ef 8310 	mrs	r3, PRIMASK
 8007298:	60fb      	str	r3, [r7, #12]
  return(result);
 800729a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800729c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800729e:	b672      	cpsid	i
}
 80072a0:	bf00      	nop

  TaskMask |= TaskId_bm;
 80072a2:	4b09      	ldr	r3, [pc, #36]	; (80072c8 <UTIL_SEQ_ResumeTask+0x3c>)
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	4a07      	ldr	r2, [pc, #28]	; (80072c8 <UTIL_SEQ_ResumeTask+0x3c>)
 80072ac:	6013      	str	r3, [r2, #0]
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	f383 8810 	msr	PRIMASK, r3
}
 80072b8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80072ba:	bf00      	nop
}
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	2000001c 	.word	0x2000001c

080072cc <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072d4:	f3ef 8310 	mrs	r3, PRIMASK
 80072d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80072da:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80072dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80072de:	b672      	cpsid	i
}
 80072e0:	bf00      	nop

  EvtSet |= EvtId_bm;
 80072e2:	4b09      	ldr	r3, [pc, #36]	; (8007308 <UTIL_SEQ_SetEvt+0x3c>)
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	4a07      	ldr	r2, [pc, #28]	; (8007308 <UTIL_SEQ_SetEvt+0x3c>)
 80072ec:	6013      	str	r3, [r2, #0]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f383 8810 	msr	PRIMASK, r3
}
 80072f8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80072fa:	bf00      	nop
}
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	200002a4 	.word	0x200002a4

0800730c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8007314:	4b1f      	ldr	r3, [pc, #124]	; (8007394 <UTIL_SEQ_WaitEvt+0x88>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800731a:	4b1e      	ldr	r3, [pc, #120]	; (8007394 <UTIL_SEQ_WaitEvt+0x88>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007322:	d102      	bne.n	800732a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8007324:	2300      	movs	r3, #0
 8007326:	61fb      	str	r3, [r7, #28]
 8007328:	e005      	b.n	8007336 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800732a:	4b1a      	ldr	r3, [pc, #104]	; (8007394 <UTIL_SEQ_WaitEvt+0x88>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2201      	movs	r2, #1
 8007330:	fa02 f303 	lsl.w	r3, r2, r3
 8007334:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8007336:	4b18      	ldr	r3, [pc, #96]	; (8007398 <UTIL_SEQ_WaitEvt+0x8c>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800733c:	4a16      	ldr	r2, [pc, #88]	; (8007398 <UTIL_SEQ_WaitEvt+0x8c>)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8007342:	e003      	b.n	800734c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8007344:	6879      	ldr	r1, [r7, #4]
 8007346:	69f8      	ldr	r0, [r7, #28]
 8007348:	f7f9 faf3 	bl	8000932 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800734c:	4b13      	ldr	r3, [pc, #76]	; (800739c <UTIL_SEQ_WaitEvt+0x90>)
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4013      	ands	r3, r2
 8007354:	2b00      	cmp	r3, #0
 8007356:	d0f5      	beq.n	8007344 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8007358:	4a0e      	ldr	r2, [pc, #56]	; (8007394 <UTIL_SEQ_WaitEvt+0x88>)
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800735e:	f3ef 8310 	mrs	r3, PRIMASK
 8007362:	60bb      	str	r3, [r7, #8]
  return(result);
 8007364:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007366:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007368:	b672      	cpsid	i
}
 800736a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	43da      	mvns	r2, r3
 8007370:	4b0a      	ldr	r3, [pc, #40]	; (800739c <UTIL_SEQ_WaitEvt+0x90>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4013      	ands	r3, r2
 8007376:	4a09      	ldr	r2, [pc, #36]	; (800739c <UTIL_SEQ_WaitEvt+0x90>)
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f383 8810 	msr	PRIMASK, r3
}
 8007384:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8007386:	4a04      	ldr	r2, [pc, #16]	; (8007398 <UTIL_SEQ_WaitEvt+0x8c>)
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	6013      	str	r3, [r2, #0]
  return;
 800738c:	bf00      	nop
}
 800738e:	3720      	adds	r7, #32
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	200002ac 	.word	0x200002ac
 8007398:	200002a8 	.word	0x200002a8
 800739c:	200002a4 	.word	0x200002a4

080073a0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80073a4:	bf00      	nop
}
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80073ae:	b480      	push	{r7}
 80073b0:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80073b2:	bf00      	nop
}
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	0c1b      	lsrs	r3, r3, #16
 80073d0:	041b      	lsls	r3, r3, #16
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d104      	bne.n	80073e0 <SEQ_BitPosition+0x24>
 80073d6:	2310      	movs	r3, #16
 80073d8:	73fb      	strb	r3, [r7, #15]
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	041b      	lsls	r3, r3, #16
 80073de:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d105      	bne.n	80073f6 <SEQ_BitPosition+0x3a>
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
 80073ec:	3308      	adds	r3, #8
 80073ee:	73fb      	strb	r3, [r7, #15]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	021b      	lsls	r3, r3, #8
 80073f4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d105      	bne.n	800740c <SEQ_BitPosition+0x50>
 8007400:	7bfb      	ldrb	r3, [r7, #15]
 8007402:	3304      	adds	r3, #4
 8007404:	73fb      	strb	r3, [r7, #15]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	011b      	lsls	r3, r3, #4
 800740a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	0f1b      	lsrs	r3, r3, #28
 8007410:	4a07      	ldr	r2, [pc, #28]	; (8007430 <SEQ_BitPosition+0x74>)
 8007412:	5cd2      	ldrb	r2, [r2, r3]
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	4413      	add	r3, r2
 8007418:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	f1c3 031f 	rsb	r3, r3, #31
 8007420:	b2db      	uxtb	r3, r3
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	0800775c 	.word	0x0800775c

08007434 <__libc_init_array>:
 8007434:	b570      	push	{r4, r5, r6, lr}
 8007436:	4d0d      	ldr	r5, [pc, #52]	; (800746c <__libc_init_array+0x38>)
 8007438:	4c0d      	ldr	r4, [pc, #52]	; (8007470 <__libc_init_array+0x3c>)
 800743a:	1b64      	subs	r4, r4, r5
 800743c:	10a4      	asrs	r4, r4, #2
 800743e:	2600      	movs	r6, #0
 8007440:	42a6      	cmp	r6, r4
 8007442:	d109      	bne.n	8007458 <__libc_init_array+0x24>
 8007444:	4d0b      	ldr	r5, [pc, #44]	; (8007474 <__libc_init_array+0x40>)
 8007446:	4c0c      	ldr	r4, [pc, #48]	; (8007478 <__libc_init_array+0x44>)
 8007448:	f000 f82e 	bl	80074a8 <_init>
 800744c:	1b64      	subs	r4, r4, r5
 800744e:	10a4      	asrs	r4, r4, #2
 8007450:	2600      	movs	r6, #0
 8007452:	42a6      	cmp	r6, r4
 8007454:	d105      	bne.n	8007462 <__libc_init_array+0x2e>
 8007456:	bd70      	pop	{r4, r5, r6, pc}
 8007458:	f855 3b04 	ldr.w	r3, [r5], #4
 800745c:	4798      	blx	r3
 800745e:	3601      	adds	r6, #1
 8007460:	e7ee      	b.n	8007440 <__libc_init_array+0xc>
 8007462:	f855 3b04 	ldr.w	r3, [r5], #4
 8007466:	4798      	blx	r3
 8007468:	3601      	adds	r6, #1
 800746a:	e7f2      	b.n	8007452 <__libc_init_array+0x1e>
 800746c:	0800776c 	.word	0x0800776c
 8007470:	0800776c 	.word	0x0800776c
 8007474:	0800776c 	.word	0x0800776c
 8007478:	08007770 	.word	0x08007770

0800747c <memcpy>:
 800747c:	440a      	add	r2, r1
 800747e:	4291      	cmp	r1, r2
 8007480:	f100 33ff 	add.w	r3, r0, #4294967295
 8007484:	d100      	bne.n	8007488 <memcpy+0xc>
 8007486:	4770      	bx	lr
 8007488:	b510      	push	{r4, lr}
 800748a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800748e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007492:	4291      	cmp	r1, r2
 8007494:	d1f9      	bne.n	800748a <memcpy+0xe>
 8007496:	bd10      	pop	{r4, pc}

08007498 <memset>:
 8007498:	4402      	add	r2, r0
 800749a:	4603      	mov	r3, r0
 800749c:	4293      	cmp	r3, r2
 800749e:	d100      	bne.n	80074a2 <memset+0xa>
 80074a0:	4770      	bx	lr
 80074a2:	f803 1b01 	strb.w	r1, [r3], #1
 80074a6:	e7f9      	b.n	800749c <memset+0x4>

080074a8 <_init>:
 80074a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074aa:	bf00      	nop
 80074ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ae:	bc08      	pop	{r3}
 80074b0:	469e      	mov	lr, r3
 80074b2:	4770      	bx	lr

080074b4 <_fini>:
 80074b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b6:	bf00      	nop
 80074b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ba:	bc08      	pop	{r3}
 80074bc:	469e      	mov	lr, r3
 80074be:	4770      	bx	lr
