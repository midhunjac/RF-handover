
rtc_ble_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000813c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  0800827c  0800827c  0001827c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008610  08008610  00018610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008618  08008618  00018618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800861c  0800861c  0001861c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000084  20000004  08008620  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000088  080086a4  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000035  20000124  0800873d  00020124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  2000015c  08008772  0002015c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000268  20000170  08008783  00020170  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003d8  08008783  000203d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002016d  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 16 .debug_info   0002ca4e  00000000  00000000  0002019d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00005e52  00000000  00000000  0004cbeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000025f0  00000000  00000000  00052a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002358  00000000  00000000  00055030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000279ae  00000000  00000000  00057388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0002991d  00000000  00000000  0007ed36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000d3ba1  00000000  00000000  000a8653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  0017c1f4  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000a52c  00000000  00000000  0017c244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000170 	.word	0x20000170
 800015c:	00000000 	.word	0x00000000
 8000160:	08008264 	.word	0x08008264

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000174 	.word	0x20000174
 800017c:	08008264 	.word	0x08008264

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b088      	sub	sp, #32
 8000538:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <APPD_EnableCPU2+0x5c>)
 800053c:	881a      	ldrh	r2, [r3, #0]
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <APPD_EnableCPU2+0x60>)
 8000540:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <APPD_EnableCPU2+0x64>)
 8000544:	881a      	ldrh	r2, [r3, #0]
 8000546:	4b13      	ldr	r3, [pc, #76]	; (8000594 <APPD_EnableCPU2+0x60>)
 8000548:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <APPD_EnableCPU2+0x68>)
 800054c:	881a      	ldrh	r2, [r3, #0]
 800054e:	4b11      	ldr	r3, [pc, #68]	; (8000594 <APPD_EnableCPU2+0x60>)
 8000550:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 8000552:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <APPD_EnableCPU2+0x6c>)
 8000554:	881a      	ldrh	r2, [r3, #0]
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <APPD_EnableCPU2+0x60>)
 8000558:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 800055a:	4b12      	ldr	r3, [pc, #72]	; (80005a4 <APPD_EnableCPU2+0x70>)
 800055c:	881a      	ldrh	r2, [r3, #0]
 800055e:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <APPD_EnableCPU2+0x60>)
 8000560:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000562:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <APPD_EnableCPU2+0x74>)
 8000564:	1d3c      	adds	r4, r7, #4
 8000566:	461d      	mov	r5, r3
 8000568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000570:	c403      	stmia	r4!, {r0, r1}
 8000572:	8022      	strh	r2, [r4, #0]
 8000574:	3402      	adds	r4, #2
 8000576:	0c13      	lsrs	r3, r2, #16
 8000578:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800057a:	f005 fd31 	bl	8005fe0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	4618      	mov	r0, r3
 8000582:	f004 ffcc 	bl	800551e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000586:	bf00      	nop
}
 8000588:	3720      	adds	r7, #32
 800058a:	46bd      	mov	sp, r7
 800058c:	bdb0      	pop	{r4, r5, r7, pc}
 800058e:	bf00      	nop
 8000590:	20000004 	.word	0x20000004
 8000594:	200301e8 	.word	0x200301e8
 8000598:	20000006 	.word	0x20000006
 800059c:	20000008 	.word	0x20000008
 80005a0:	2000000a 	.word	0x2000000a
 80005a4:	2000000c 	.word	0x2000000c
 80005a8:	0800827c 	.word	0x0800827c

080005ac <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80005b4:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <LL_C2_PWR_SetPowerMode+0x28>)
 80005b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005ba:	f023 0207 	bic.w	r2, r3, #7
 80005be:	4905      	ldr	r1, [pc, #20]	; (80005d4 <LL_C2_PWR_SetPowerMode+0x28>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4313      	orrs	r3, r2
 80005c4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	58000400 	.word	0x58000400

080005d8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <LL_EXTI_EnableIT_32_63+0x24>)
 80005e2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80005e6:	4905      	ldr	r1, [pc, #20]	; (80005fc <LL_EXTI_EnableIT_32_63+0x24>)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	58000800 	.word	0x58000800

08000600 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000600:	b480      	push	{r7}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800060c:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800060e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000616:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800061a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000626:	4313      	orrs	r3, r2
 8000628:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	cafecafe 	.word	0xcafecafe

0800063c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800064e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4313      	orrs	r3, r2
 8000656:	608b      	str	r3, [r1, #8]
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800066c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800068a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800068e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800069a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80006ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80006bc:	d101      	bne.n	80006c2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80006be:	2301      	movs	r3, #1
 80006c0:	e000      	b.n	80006c4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80006c2:	2300      	movs	r3, #0
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80006d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80006e2:	d101      	bne.n	80006e8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80006e4:	2301      	movs	r3, #1
 80006e6:	e000      	b.n	80006ea <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80006e8:	2300      	movs	r3, #0
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80006fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000700:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000702:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4313      	orrs	r3, r2
 800070a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800070c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4013      	ands	r3, r2
 8000716:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000718:	68fb      	ldr	r3, [r7, #12]
}
 800071a:	bf00      	nop
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
	...

08000728 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <LL_DBGMCU_GetRevisionID+0x18>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	0c1b      	lsrs	r3, r3, #16
 8000732:	b29b      	uxth	r3, r3
}
 8000734:	4618      	mov	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e0042000 	.word	0xe0042000

08000744 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	685a      	ldr	r2, [r3, #4]
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	041b      	lsls	r3, r3, #16
 8000756:	431a      	orrs	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	605a      	str	r2, [r3, #4]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	685a      	ldr	r2, [r3, #4]
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	431a      	orrs	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	605a      	str	r2, [r3, #4]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800078a:	b480      	push	{r7}
 800078c:	b083      	sub	sp, #12
 800078e:	af00      	add	r7, sp, #0
 8000790:	6078      	str	r0, [r7, #4]
 8000792:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	695a      	ldr	r2, [r3, #20]
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	041b      	lsls	r3, r3, #16
 800079c:	431a      	orrs	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	615a      	str	r2, [r3, #20]
}
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b083      	sub	sp, #12
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
 80007b6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	695a      	ldr	r2, [r3, #20]
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	431a      	orrs	r2, r3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	615a      	str	r2, [r3, #20]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	609a      	str	r2, [r3, #8]
}
 80007e0:	bf00      	nop
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	683a      	ldr	r2, [r7, #0]
 80007fa:	619a      	str	r2, [r3, #24]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	22ff      	movs	r2, #255	; 0xff
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	22ca      	movs	r2, #202	; 0xca
 800082e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2253      	movs	r2, #83	; 0x53
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
 800084a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	f023 0207 	bic.w	r2, r3, #7
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	431a      	orrs	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	609a      	str	r2, [r3, #8]
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800086c:	4b04      	ldr	r3, [pc, #16]	; (8000880 <MX_APPE_Config+0x18>)
 800086e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000872:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000874:	f000 f824 	bl	80008c0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000878:	f000 f864 	bl	8000944 <Config_HSE>

  return;
 800087c:	bf00      	nop
}
 800087e:	bd80      	pop	{r7, pc}
 8000880:	58004000 	.word	0x58004000

08000884 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000888:	f000 f870 	bl	800096c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800088c:	f000 f888 	bl	80009a0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000890:	4903      	ldr	r1, [pc, #12]	; (80008a0 <MX_APPE_Init+0x1c>)
 8000892:	2000      	movs	r0, #0
 8000894:	f000 f9bc 	bl	8000c10 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000898:	f000 f892 	bl	80009c0 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 800089c:	bf00      	nop
}
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200001d4 	.word	0x200001d4

080008a4 <Init_Smps>:

void Init_Smps(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80008a8:	bf00      	nop
}
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr

080008b2 <Init_Exti>:

void Init_Exti(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80008b6:	2050      	movs	r0, #80	; 0x50
 80008b8:	f7ff fe8e 	bl	80005d8 <LL_EXTI_EnableIT_32_63>

  return;
 80008bc:	bf00      	nop
}
 80008be:	bd80      	pop	{r7, pc}

080008c0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80008c4:	f000 f804 	bl	80008d0 <Reset_BackupDomain>

  Reset_IPCC();
 80008c8:	f000 f81a 	bl	8000900 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80008cc:	bf00      	nop
}
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80008d4:	f7ff fee8 	bl	80006a8 <LL_RCC_IsActiveFlag_PINRST>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d00d      	beq.n	80008fa <Reset_BackupDomain+0x2a>
 80008de:	f7ff fef6 	bl	80006ce <LL_RCC_IsActiveFlag_SFTRST>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d108      	bne.n	80008fa <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80008e8:	f001 fc2e 	bl	8002148 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80008ec:	f001 fc2c 	bl	8002148 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80008f0:	f7ff feb8 	bl	8000664 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80008f4:	f7ff fec7 	bl	8000686 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
}
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000904:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000908:	f7ff fef4 	bl	80006f4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800090c:	213f      	movs	r1, #63	; 0x3f
 800090e:	480c      	ldr	r0, [pc, #48]	; (8000940 <Reset_IPCC+0x40>)
 8000910:	f7ff ff5e 	bl	80007d0 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000914:	213f      	movs	r1, #63	; 0x3f
 8000916:	480a      	ldr	r0, [pc, #40]	; (8000940 <Reset_IPCC+0x40>)
 8000918:	f7ff ff68 	bl	80007ec <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800091c:	213f      	movs	r1, #63	; 0x3f
 800091e:	4808      	ldr	r0, [pc, #32]	; (8000940 <Reset_IPCC+0x40>)
 8000920:	f7ff ff10 	bl	8000744 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000924:	213f      	movs	r1, #63	; 0x3f
 8000926:	4806      	ldr	r0, [pc, #24]	; (8000940 <Reset_IPCC+0x40>)
 8000928:	f7ff ff2f 	bl	800078a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800092c:	213f      	movs	r1, #63	; 0x3f
 800092e:	4804      	ldr	r0, [pc, #16]	; (8000940 <Reset_IPCC+0x40>)
 8000930:	f7ff ff1a 	bl	8000768 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000934:	213f      	movs	r1, #63	; 0x3f
 8000936:	4802      	ldr	r0, [pc, #8]	; (8000940 <Reset_IPCC+0x40>)
 8000938:	f7ff ff39 	bl	80007ae <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800093c:	bf00      	nop
}
 800093e:	bd80      	pop	{r7, pc}
 8000940:	58000c00 	.word	0x58000c00

08000944 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800094a:	2000      	movs	r0, #0
 800094c:	f005 fbd4 	bl	80060f8 <OTP_Read>
 8000950:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d005      	beq.n	8000964 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	799b      	ldrb	r3, [r3, #6]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fe4f 	bl	8000600 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8000962:	bf00      	nop
 8000964:	bf00      	nop
}
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <System_Init>:

static void System_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  Init_Smps();
 8000970:	f7ff ff98 	bl	80008a4 <Init_Smps>

  Init_Exti();
 8000974:	f7ff ff9d 	bl	80008b2 <Init_Exti>

  Init_Rtc();
 8000978:	f000 f802 	bl	8000980 <Init_Rtc>

  return;
 800097c:	bf00      	nop
}
 800097e:	bd80      	pop	{r7, pc}

08000980 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000984:	4805      	ldr	r0, [pc, #20]	; (800099c <Init_Rtc+0x1c>)
 8000986:	f7ff ff4c 	bl	8000822 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800098a:	2100      	movs	r1, #0
 800098c:	4803      	ldr	r0, [pc, #12]	; (800099c <Init_Rtc+0x1c>)
 800098e:	f7ff ff58 	bl	8000842 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000992:	4802      	ldr	r0, [pc, #8]	; (800099c <Init_Rtc+0x1c>)
 8000994:	f7ff ff38 	bl	8000808 <LL_RTC_EnableWriteProtection>

  return;
 8000998:	bf00      	nop
}
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40002800 	.word	0x40002800

080009a0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80009a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80009a8:	f7ff fe48 	bl	800063c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80009ac:	f006 fa0c 	bl	8006dc8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80009b0:	2004      	movs	r0, #4
 80009b2:	f7ff fdfb 	bl	80005ac <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 80009b6:	f001 fc1f 	bl	80021f8 <HAL_PWREx_EnableSRAMRetention>

  return;
 80009ba:	bf00      	nop
}
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80009c6:	f005 f955 	bl	8005c74 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80009ca:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <appe_Tl_Init+0x50>)
 80009cc:	2100      	movs	r1, #0
 80009ce:	2008      	movs	r0, #8
 80009d0:	f006 fb38 	bl	8007044 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <appe_Tl_Init+0x54>)
 80009d6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <appe_Tl_Init+0x58>)
 80009da:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80009dc:	463b      	mov	r3, r7
 80009de:	4619      	mov	r1, r3
 80009e0:	480e      	ldr	r0, [pc, #56]	; (8000a1c <appe_Tl_Init+0x5c>)
 80009e2:	f005 f80d 	bl	8005a00 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <appe_Tl_Init+0x60>)
 80009e8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <appe_Tl_Init+0x64>)
 80009ec:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <appe_Tl_Init+0x68>)
 80009f0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80009f2:	f240 533c 	movw	r3, #1340	; 0x53c
 80009f6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	4618      	mov	r0, r3
 80009fe:	f005 fa7b 	bl	8005ef8 <TL_MM_Init>

  TL_Enable();
 8000a02:	f005 f931 	bl	8005c68 <TL_Enable>

  return;
 8000a06:	bf00      	nop
}
 8000a08:	3720      	adds	r7, #32
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	08005a39 	.word	0x08005a39
 8000a14:	20030734 	.word	0x20030734
 8000a18:	08000a2d 	.word	0x08000a2d
 8000a1c:	08000a45 	.word	0x08000a45
 8000a20:	2003094c 	.word	0x2003094c
 8000a24:	20030840 	.word	0x20030840
 8000a28:	200301f8 	.word	0x200301f8

08000a2c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000a36:	bf00      	nop
}
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	330b      	adds	r3, #11
 8000a52:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000a5e:	2b07      	cmp	r3, #7
 8000a60:	d81f      	bhi.n	8000aa2 <APPE_SysUserEvtRx+0x5e>
 8000a62:	a201      	add	r2, pc, #4	; (adr r2, 8000a68 <APPE_SysUserEvtRx+0x24>)
 8000a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a68:	08000a89 	.word	0x08000a89
 8000a6c:	08000a9b 	.word	0x08000a9b
 8000a70:	08000aa3 	.word	0x08000aa3
 8000a74:	08000aa3 	.word	0x08000aa3
 8000a78:	08000aa3 	.word	0x08000aa3
 8000a7c:	08000aa3 	.word	0x08000aa3
 8000a80:	08000aa3 	.word	0x08000aa3
 8000a84:	08000aa3 	.word	0x08000aa3
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 fd73 	bl	8005578 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 f81b 	bl	8000ace <APPE_SysEvtReadyProcessing>
    break;
 8000a98:	e004      	b.n	8000aa4 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 f806 	bl	8000aac <APPE_SysEvtError>
    break;
 8000aa0:	e000      	b.n	8000aa4 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000aa2:	bf00      	nop
  }

  return;
 8000aa4:	bf00      	nop
}
 8000aa6:	3720      	adds	r7, #32
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	330b      	adds	r3, #11
 8000aba:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	3302      	adds	r3, #2
 8000ac0:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000ac2:	bf00      	nop
}
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b08a      	sub	sp, #40	; 0x28
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	330b      	adds	r3, #11
 8000aee:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000af0:	6a3b      	ldr	r3, [r7, #32]
 8000af2:	3302      	adds	r3, #2
 8000af4:	61fb      	str	r3, [r7, #28]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d117      	bne.n	8000b2e <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000afe:	f7ff fd19 	bl	8000534 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000b02:	230d      	movs	r3, #13
 8000b04:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000b06:	237f      	movs	r3, #127	; 0x7f
 8000b08:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000b0a:	f7ff fe0d 	bl	8000728 <LL_DBGMCU_GetRevisionID>
 8000b0e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = RevisionID;
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f004 fd16 	bl	800554c <SHCI_C2_Config>

    APP_BLE_Init();
 8000b20:	f005 fc0a 	bl	8006338 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000b24:	2100      	movs	r1, #0
 8000b26:	2001      	movs	r0, #1
 8000b28:	f006 f960 	bl	8006dec <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000b2c:	e007      	b.n	8000b3e <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d103      	bne.n	8000b3e <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
  return;
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
}
 8000b40:	3728      	adds	r7, #40	; 0x28
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4e:	f006 f97d 	bl	8006e4c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000b5a:	bf00      	nop
}
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000b72:	f006 f96b 	bl	8006e4c <UTIL_SEQ_Run>

  return;
 8000b76:	bf00      	nop
}
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000b86:	2100      	movs	r1, #0
 8000b88:	2008      	movs	r0, #8
 8000b8a:	f006 fa7d 	bl	8007088 <UTIL_SEQ_SetTask>
  return;
 8000b8e:	bf00      	nop
}
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000b9e:	2002      	movs	r0, #2
 8000ba0:	f006 fade 	bl	8007160 <UTIL_SEQ_SetEvt>
  return;
 8000ba4:	bf00      	nop
}
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	f006 faf3 	bl	80071a0 <UTIL_SEQ_WaitEvt>
  return;
 8000bba:	bf00      	nop
}
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <LL_EXTI_EnableIT_0_31>:
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <LL_EXTI_EnableIT_0_31+0x24>)
 8000bce:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000bd2:	4905      	ldr	r1, [pc, #20]	; (8000be8 <LL_EXTI_EnableIT_0_31+0x24>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	58000800 	.word	0x58000800

08000bec <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4904      	ldr	r1, [pc, #16]	; (8000c0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	600b      	str	r3, [r1, #0]

}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	58000800 	.word	0x58000800

08000c10 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8000c1c:	4a64      	ldr	r2, [pc, #400]	; (8000db0 <HW_TS_Init+0x1a0>)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000c22:	4b63      	ldr	r3, [pc, #396]	; (8000db0 <HW_TS_Init+0x1a0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	22ca      	movs	r2, #202	; 0xca
 8000c2a:	625a      	str	r2, [r3, #36]	; 0x24
 8000c2c:	4b60      	ldr	r3, [pc, #384]	; (8000db0 <HW_TS_Init+0x1a0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2253      	movs	r2, #83	; 0x53
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000c36:	4b5f      	ldr	r3, [pc, #380]	; (8000db4 <HW_TS_Init+0x1a4>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	4a5e      	ldr	r2, [pc, #376]	; (8000db4 <HW_TS_Init+0x1a4>)
 8000c3c:	f043 0320 	orr.w	r3, r3, #32
 8000c40:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000c42:	4b5c      	ldr	r3, [pc, #368]	; (8000db4 <HW_TS_Init+0x1a4>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	f003 0307 	and.w	r3, r3, #7
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	f1c3 0304 	rsb	r3, r3, #4
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	4b58      	ldr	r3, [pc, #352]	; (8000db8 <HW_TS_Init+0x1a8>)
 8000c56:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000c58:	4b56      	ldr	r3, [pc, #344]	; (8000db4 <HW_TS_Init+0x1a4>)
 8000c5a:	691b      	ldr	r3, [r3, #16]
 8000c5c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000c60:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000c64:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	fa92 f2a2 	rbit	r2, r2
 8000c6c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	d101      	bne.n	8000c7c <HW_TS_Init+0x6c>
  {
    return 32U;
 8000c78:	2220      	movs	r2, #32
 8000c7a:	e003      	b.n	8000c84 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	b2d2      	uxtb	r2, r2
 8000c84:	40d3      	lsrs	r3, r2
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	3301      	adds	r3, #1
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <HW_TS_Init+0x1ac>)
 8000c8e:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000c90:	4b48      	ldr	r3, [pc, #288]	; (8000db4 <HW_TS_Init+0x1a4>)
 8000c92:	691b      	ldr	r3, [r3, #16]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	4b47      	ldr	r3, [pc, #284]	; (8000dc0 <HW_TS_Init+0x1b0>)
 8000ca2:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000ca4:	4b46      	ldr	r3, [pc, #280]	; (8000dc0 <HW_TS_Init+0x1b0>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	4a44      	ldr	r2, [pc, #272]	; (8000dbc <HW_TS_Init+0x1ac>)
 8000cac:	7812      	ldrb	r2, [r2, #0]
 8000cae:	fb02 f303 	mul.w	r3, r2, r3
 8000cb2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000cb6:	4a40      	ldr	r2, [pc, #256]	; (8000db8 <HW_TS_Init+0x1a8>)
 8000cb8:	7812      	ldrb	r2, [r2, #0]
 8000cba:	40d3      	lsrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d904      	bls.n	8000cd2 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000cc8:	4b3e      	ldr	r3, [pc, #248]	; (8000dc4 <HW_TS_Init+0x1b4>)
 8000cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cce:	801a      	strh	r2, [r3, #0]
 8000cd0:	e003      	b.n	8000cda <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	4b3b      	ldr	r3, [pc, #236]	; (8000dc4 <HW_TS_Init+0x1b4>)
 8000cd8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000cda:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000cde:	f7ff ff85 	bl	8000bec <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000ce2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ce6:	f7ff ff6d 	bl	8000bc4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d143      	bne.n	8000d78 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000cf0:	4b35      	ldr	r3, [pc, #212]	; (8000dc8 <HW_TS_Init+0x1b8>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000cf6:	4b35      	ldr	r3, [pc, #212]	; (8000dcc <HW_TS_Init+0x1bc>)
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	77fb      	strb	r3, [r7, #31]
 8000d02:	e00c      	b.n	8000d1e <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000d04:	7ffa      	ldrb	r2, [r7, #31]
 8000d06:	4932      	ldr	r1, [pc, #200]	; (8000dd0 <HW_TS_Init+0x1c0>)
 8000d08:	4613      	mov	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	440b      	add	r3, r1
 8000d12:	330c      	adds	r3, #12
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000d18:	7ffb      	ldrb	r3, [r7, #31]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	77fb      	strb	r3, [r7, #31]
 8000d1e:	7ffb      	ldrb	r3, [r7, #31]
 8000d20:	2b05      	cmp	r3, #5
 8000d22:	d9ef      	bls.n	8000d04 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000d24:	4b2b      	ldr	r3, [pc, #172]	; (8000dd4 <HW_TS_Init+0x1c4>)
 8000d26:	2206      	movs	r2, #6
 8000d28:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <HW_TS_Init+0x1a0>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <HW_TS_Init+0x1a0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d3c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <HW_TS_Init+0x1a0>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <HW_TS_Init+0x1a0>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000d52:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000d54:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <HW_TS_Init+0x1c8>)
 8000d56:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000d5a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f000 fe62 	bl	8001a26 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <HW_TS_Init+0x1a0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HW_TS_Init+0x1a0>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	e00a      	b.n	8000d8e <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8000d78:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <HW_TS_Init+0x1a0>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000d88:	2003      	movs	r0, #3
 8000d8a:	f000 fe3e 	bl	8001a0a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <HW_TS_Init+0x1a0>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	22ff      	movs	r2, #255	; 0xff
 8000d96:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2103      	movs	r1, #3
 8000d9c:	2003      	movs	r0, #3
 8000d9e:	f000 fe00 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000da2:	2003      	movs	r0, #3
 8000da4:	f000 fe17 	bl	80019d6 <HAL_NVIC_EnableIRQ>

  return;
 8000da8:	bf00      	nop
}
 8000daa:	3720      	adds	r7, #32
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	2000018c 	.word	0x2000018c
 8000db4:	40002800 	.word	0x40002800
 8000db8:	20000190 	.word	0x20000190
 8000dbc:	20000191 	.word	0x20000191
 8000dc0:	20000192 	.word	0x20000192
 8000dc4:	20000194 	.word	0x20000194
 8000dc8:	20000120 	.word	0x20000120
 8000dcc:	2000011c 	.word	0x2000011c
 8000dd0:	20000088 	.word	0x20000088
 8000dd4:	20000118 	.word	0x20000118
 8000dd8:	58000800 	.word	0x58000800

08000ddc <LL_RCC_LSE_SetDriveCapability>:
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dec:	f023 0218 	bic.w	r2, r3, #24
 8000df0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <LL_AHB2_GRP1_EnableClock>:
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
}
 8000e2e:	bf00      	nop
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e44:	1d39      	adds	r1, r7, #4
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <__io_putchar+0x20>)
 8000e4e:	f002 fffd 	bl	8003e4c <HAL_UART_Transmit>
  return ch;
 8000e52:	687b      	ldr	r3, [r7, #4]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	200001f8 	.word	0x200001f8

08000e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e64:	f000 fbe0 	bl	8001628 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8000e68:	f7ff fcfe 	bl	8000868 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6c:	f000 f81a 	bl	8000ea4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e70:	f000 f864 	bl	8000f3c <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8000e74:	f000 f882 	bl	8000f7c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e78:	f000 f91c 	bl	80010b4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000e7c:	f000 f89a 	bl	8000fb4 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000e80:	f000 f8cc 	bl	800101c <MX_USART1_UART_Init>
  MX_RF_Init();
 8000e84:	f000 f88e 	bl	8000fa4 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8000e88:	f7ff fcfc 	bl	8000884 <MX_APPE_Init>

  /* Infinite loop */

  /* USER CODE BEGIN WHILE */
  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x7D0, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000e92:	4803      	ldr	r0, [pc, #12]	; (8000ea0 <main+0x40>)
 8000e94:	f002 fe2a 	bl	8003aec <HAL_RTCEx_SetWakeUpTimer_IT>
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8000e98:	f7ff fe55 	bl	8000b46 <MX_APPE_Process>
 8000e9c:	e7fc      	b.n	8000e98 <main+0x38>
 8000e9e:	bf00      	nop
 8000ea0:	200001d4 	.word	0x200001d4

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b098      	sub	sp, #96	; 0x60
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	2244      	movs	r2, #68	; 0x44
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f006 fa40 	bl	8007338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	463b      	mov	r3, r7
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]
 8000ec4:	611a      	str	r2, [r3, #16]
 8000ec6:	615a      	str	r2, [r3, #20]
 8000ec8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000eca:	f001 f93d 	bl	8002148 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f7ff ff84 	bl	8000ddc <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000edc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee8:	2340      	movs	r3, #64	; 0x40
 8000eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 fd1d 	bl	8002934 <HAL_RCC_OscConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000f00:	f000 f8fa 	bl	80010f8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000f04:	236f      	movs	r3, #111	; 0x6f
 8000f06:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f20:	463b      	mov	r3, r7
 8000f22:	2101      	movs	r1, #1
 8000f24:	4618      	mov	r0, r3
 8000f26:	f002 f83b 	bl	8002fa0 <HAL_RCC_ClockConfig>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000f30:	f000 f8e2 	bl	80010f8 <Error_Handler>
  }
}
 8000f34:	bf00      	nop
 8000f36:	3760      	adds	r7, #96	; 0x60
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	; 0x30
 8000f40:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f42:	463b      	mov	r3, r7
 8000f44:	2230      	movs	r2, #48	; 0x30
 8000f46:	2100      	movs	r1, #0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f006 f9f5 	bl	8007338 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8000f4e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f52:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8000f54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8000f5e:	2310      	movs	r3, #16
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f62:	463b      	mov	r3, r7
 8000f64:	4618      	mov	r0, r3
 8000f66:	f002 fbdd 	bl	8003724 <HAL_RCCEx_PeriphCLKConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000f70:	f000 f8c2 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000f74:	bf00      	nop
 8000f76:	3730      	adds	r7, #48	; 0x30
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_IPCC_Init+0x20>)
 8000f82:	4a07      	ldr	r2, [pc, #28]	; (8000fa0 <MX_IPCC_Init+0x24>)
 8000f84:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_IPCC_Init+0x20>)
 8000f88:	f001 f858 	bl	800203c <HAL_IPCC_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8000f92:	f000 f8b1 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000198 	.word	0x20000198
 8000fa0:	58000c00 	.word	0x58000c00

08000fa4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
	...

08000fb4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fb8:	4b16      	ldr	r3, [pc, #88]	; (8001014 <MX_RTC_Init+0x60>)
 8000fba:	4a17      	ldr	r2, [pc, #92]	; (8001018 <MX_RTC_Init+0x64>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <MX_RTC_Init+0x60>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <MX_RTC_Init+0x60>)
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8000fca:	4b12      	ldr	r3, [pc, #72]	; (8001014 <MX_RTC_Init+0x60>)
 8000fcc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000fd0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <MX_RTC_Init+0x60>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_RTC_Init+0x60>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <MX_RTC_Init+0x60>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <MX_RTC_Init+0x60>)
 8000fe6:	f002 fc93 	bl	8003910 <HAL_RTC_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8000ff0:	f000 f882 	bl	80010f8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <MX_RTC_Init+0x60>)
 8000ffc:	f002 fd76 	bl	8003aec <HAL_RTCEx_SetWakeUpTimer_IT>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001006:	f000 f877 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800100a:	4802      	ldr	r0, [pc, #8]	; (8001014 <MX_RTC_Init+0x60>)
 800100c:	f002 fe2a 	bl	8003c64 <HAL_RTCEx_DeactivateWakeUpTimer>
  /* USER CODE END RTC_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200001d4 	.word	0x200001d4
 8001018:	40002800 	.word	0x40002800

0800101c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001020:	4b22      	ldr	r3, [pc, #136]	; (80010ac <MX_USART1_UART_Init+0x90>)
 8001022:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <MX_USART1_UART_Init+0x94>)
 8001024:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001026:	4b21      	ldr	r3, [pc, #132]	; (80010ac <MX_USART1_UART_Init+0x90>)
 8001028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800102c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <MX_USART1_UART_Init+0x90>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <MX_USART1_UART_Init+0x90>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <MX_USART1_UART_Init+0x90>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <MX_USART1_UART_Init+0x90>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <MX_USART1_UART_Init+0x90>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <MX_USART1_UART_Init+0x90>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MX_USART1_UART_Init+0x90>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_USART1_UART_Init+0x90>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <MX_USART1_UART_Init+0x90>)
 8001060:	2200      	movs	r2, #0
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001064:	4811      	ldr	r0, [pc, #68]	; (80010ac <MX_USART1_UART_Init+0x90>)
 8001066:	f002 fea1 	bl	8003dac <HAL_UART_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001070:	f000 f842 	bl	80010f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001074:	2100      	movs	r1, #0
 8001076:	480d      	ldr	r0, [pc, #52]	; (80010ac <MX_USART1_UART_Init+0x90>)
 8001078:	f003 fb92 	bl	80047a0 <HAL_UARTEx_SetTxFifoThreshold>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001082:	f000 f839 	bl	80010f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001086:	2100      	movs	r1, #0
 8001088:	4808      	ldr	r0, [pc, #32]	; (80010ac <MX_USART1_UART_Init+0x90>)
 800108a:	f003 fbc7 	bl	800481c <HAL_UARTEx_SetRxFifoThreshold>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001094:	f000 f830 	bl	80010f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <MX_USART1_UART_Init+0x90>)
 800109a:	f003 fb48 	bl	800472e <HAL_UARTEx_DisableFifoMode>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80010a4:	f000 f828 	bl	80010f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200001f8 	.word	0x200001f8
 80010b0:	40013800 	.word	0x40013800

080010b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b8:	2004      	movs	r0, #4
 80010ba:	f7ff fea5 	bl	8000e08 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2001      	movs	r0, #1
 80010c0:	f7ff fea2 	bl	8000e08 <LL_AHB2_GRP1_EnableClock>

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_RTCEx_WakeUpTimerEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 80010d0:	f7ff fee8 	bl	8000ea4 <SystemClock_Config>
	HAL_ResumeTick();
 80010d4:	f000 fb3e 	bl	8001754 <HAL_ResumeTick>
	printf("Wake up from RTC\n\r");
 80010d8:	4806      	ldr	r0, [pc, #24]	; (80010f4 <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 80010da:	f006 f935 	bl	8007348 <iprintf>
	UTIL_SEQ_SetTask(1<<CFG_TASK_RTC, CFG_SCH_PRIO_0);
 80010de:	2100      	movs	r1, #0
 80010e0:	2004      	movs	r0, #4
 80010e2:	f005 ffd1 	bl	8007088 <UTIL_SEQ_SetTask>
	HAL_PWR_DisableSleepOnExit();
 80010e6:	f001 f867 	bl	80021b8 <HAL_PWR_DisableSleepOnExit>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	08008298 	.word	0x08008298

080010f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010fc:	b672      	cpsid	i
}
 80010fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001100:	e7fe      	b.n	8001100 <Error_Handler+0x8>

08001102 <LL_RCC_EnableRTC>:
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800110a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800110e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <LL_AHB2_GRP1_EnableClock>:
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800112c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001130:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001132:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4313      	orrs	r3, r2
 800113a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800113c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001140:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4013      	ands	r3, r2
 8001146:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001148:	68fb      	ldr	r3, [r7, #12]
}
 800114a:	bf00      	nop
 800114c:	3714      	adds	r7, #20
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <LL_AHB3_GRP1_EnableClock>:
{
 8001156:	b480      	push	{r7}
 8001158:	b085      	sub	sp, #20
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800115e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001162:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001164:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4313      	orrs	r3, r2
 800116c:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800116e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001172:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4013      	ands	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001194:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4313      	orrs	r3, r2
 800119e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80011a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4013      	ands	r3, r2
 80011aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011ac:	68fb      	ldr	r3, [r7, #12]
}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b085      	sub	sp, #20
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80011c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4013      	ands	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011de:	68fb      	ldr	r3, [r7, #12]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80011f0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011f4:	f7ff ffaf 	bl	8001156 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2100      	movs	r1, #0
 80011fc:	202e      	movs	r0, #46	; 0x2e
 80011fe:	f000 fbd0 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001202:	202e      	movs	r0, #46	; 0x2e
 8001204:	f000 fbe7 	bl	80019d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <HAL_IPCC_MspInit+0x44>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d113      	bne.n	8001246 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800121e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001222:	f7ff ff98 	bl	8001156 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	202c      	movs	r0, #44	; 0x2c
 800122c:	f000 fbb9 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001230:	202c      	movs	r0, #44	; 0x2c
 8001232:	f000 fbd0 	bl	80019d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	202d      	movs	r0, #45	; 0x2d
 800123c:	f000 fbb1 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001240:	202d      	movs	r0, #45	; 0x2d
 8001242:	f000 fbc8 	bl	80019d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	58000c00 	.word	0x58000c00

08001254 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08e      	sub	sp, #56	; 0x38
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	2230      	movs	r2, #48	; 0x30
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f006 f867 	bl	8007338 <memset>
  if(hrtc->Instance==RTC)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <HAL_RTC_MspInit+0x64>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d11d      	bne.n	80012b0 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001274:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001278:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800127a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	4618      	mov	r0, r3
 8001286:	f002 fa4d 	bl	8003724 <HAL_RCCEx_PeriphCLKConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001290:	f7ff ff32 	bl	80010f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001294:	f7ff ff35 	bl	8001102 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001298:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800129c:	f7ff ff74 	bl	8001188 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 15, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	210f      	movs	r1, #15
 80012a4:	2003      	movs	r0, #3
 80012a6:	f000 fb7c 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80012aa:	2003      	movs	r0, #3
 80012ac:	f000 fb93 	bl	80019d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80012b0:	bf00      	nop
 80012b2:	3738      	adds	r7, #56	; 0x38
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40002800 	.word	0x40002800

080012bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b094      	sub	sp, #80	; 0x50
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	2230      	movs	r2, #48	; 0x30
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f006 f82b 	bl	8007338 <memset>
  if(huart->Instance==USART1)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a17      	ldr	r2, [pc, #92]	; (8001344 <HAL_UART_MspInit+0x88>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d126      	bne.n	800133a <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012ec:	2301      	movs	r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 fa13 	bl	8003724 <HAL_RCCEx_PeriphCLKConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001304:	f7ff fef8 	bl	80010f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001308:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800130c:	f7ff ff55 	bl	80011ba <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	2001      	movs	r0, #1
 8001312:	f7ff ff07 	bl	8001124 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001316:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800131a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001328:	2307      	movs	r3, #7
 800132a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001330:	4619      	mov	r1, r3
 8001332:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001336:	f000 fcf5 	bl	8001d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3750      	adds	r7, #80	; 0x50
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40013800 	.word	0x40013800

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800134c:	e7fe      	b.n	800134c <NMI_Handler+0x4>

0800134e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler+0x4>

0800135a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <UsageFault_Handler+0x4>

08001366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001394:	f000 f9a2 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}

0800139c <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <RTC_WKUP_IRQHandler+0x10>)
 80013a2:	f002 fcbd 	bl	8003d20 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200001d4 	.word	0x200001d4

080013b0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80013b4:	f005 fbc4 	bl	8006b40 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}

080013bc <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80013c0:	f005 fbf6 	bl	8006bb0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80013cc:	f000 fe12 	bl	8001ff4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	e00a      	b.n	80013fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013e6:	f3af 8000 	nop.w
 80013ea:	4601      	mov	r1, r0
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	1c5a      	adds	r2, r3, #1
 80013f0:	60ba      	str	r2, [r7, #8]
 80013f2:	b2ca      	uxtb	r2, r1
 80013f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	3301      	adds	r3, #1
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	429a      	cmp	r2, r3
 8001402:	dbf0      	blt.n	80013e6 <_read+0x12>
	}

return len;
 8001404:	687b      	ldr	r3, [r7, #4]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e009      	b.n	8001434 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	60ba      	str	r2, [r7, #8]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fd07 	bl	8000e3c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	3301      	adds	r3, #1
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	429a      	cmp	r2, r3
 800143a:	dbf1      	blt.n	8001420 <_write+0x12>
	}
	return len;
 800143c:	687b      	ldr	r3, [r7, #4]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <_close>:

int _close(int file)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
	return -1;
 800144e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800146e:	605a      	str	r2, [r3, #4]
	return 0;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <_isatty>:

int _isatty(int file)
{
 800147e:	b480      	push	{r7}
 8001480:	b083      	sub	sp, #12
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
	return 1;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	607a      	str	r2, [r7, #4]
	return 0;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b8:	4a14      	ldr	r2, [pc, #80]	; (800150c <_sbrk+0x5c>)
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <_sbrk+0x60>)
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <_sbrk+0x64>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <_sbrk+0x68>)
 80014d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d207      	bcs.n	80014f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e0:	f005 fef2 	bl	80072c8 <__errno>
 80014e4:	4603      	mov	r3, r0
 80014e6:	220c      	movs	r2, #12
 80014e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	e009      	b.n	8001504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <_sbrk+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f6:	4b07      	ldr	r3, [pc, #28]	; (8001514 <_sbrk+0x64>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	4a05      	ldr	r2, [pc, #20]	; (8001514 <_sbrk+0x64>)
 8001500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001502:	68fb      	ldr	r3, [r7, #12]
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20003000 	.word	0x20003000
 8001510:	00000400 	.word	0x00000400
 8001514:	20000288 	.word	0x20000288
 8001518:	200003d8 	.word	0x200003d8

0800151c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001520:	4b22      	ldr	r3, [pc, #136]	; (80015ac <SystemInit+0x90>)
 8001522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001526:	4a21      	ldr	r2, [pc, #132]	; (80015ac <SystemInit+0x90>)
 8001528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800152c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001544:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001548:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800154a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001554:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <SystemInit+0x94>)
 8001556:	4013      	ands	r3, r2
 8001558:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800155a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001566:	f023 0305 	bic.w	r3, r3, #5
 800156a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800156e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001576:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800157a:	f023 0301 	bic.w	r3, r3, #1
 800157e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001586:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <SystemInit+0x98>)
 8001588:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800158a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001598:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800159a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00
 80015b0:	faf6fefb 	.word	0xfaf6fefb
 80015b4:	22041000 	.word	0x22041000

080015b8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80015b8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ba:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015bc:	3304      	adds	r3, #4

080015be <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015be:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80015c2:	d3f9      	bcc.n	80015b8 <CopyDataInit>
  bx lr
 80015c4:	4770      	bx	lr

080015c6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80015c6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80015c8:	3004      	adds	r0, #4

080015ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80015ca:	4288      	cmp	r0, r1
  bcc FillZerobss
 80015cc:	d3fb      	bcc.n	80015c6 <FillZerobss>
  bx lr
 80015ce:	4770      	bx	lr

080015d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80015d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015d4:	f7ff ffa2 	bl	800151c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80015d8:	480b      	ldr	r0, [pc, #44]	; (8001608 <LoopForever+0x8>)
 80015da:	490c      	ldr	r1, [pc, #48]	; (800160c <LoopForever+0xc>)
 80015dc:	4a0c      	ldr	r2, [pc, #48]	; (8001610 <LoopForever+0x10>)
 80015de:	2300      	movs	r3, #0
 80015e0:	f7ff ffed 	bl	80015be <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80015e4:	480b      	ldr	r0, [pc, #44]	; (8001614 <LoopForever+0x14>)
 80015e6:	490c      	ldr	r1, [pc, #48]	; (8001618 <LoopForever+0x18>)
 80015e8:	2300      	movs	r3, #0
 80015ea:	f7ff ffee 	bl	80015ca <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80015ee:	480b      	ldr	r0, [pc, #44]	; (800161c <LoopForever+0x1c>)
 80015f0:	490b      	ldr	r1, [pc, #44]	; (8001620 <LoopForever+0x20>)
 80015f2:	2300      	movs	r3, #0
 80015f4:	f7ff ffe9 	bl	80015ca <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015f8:	f005 fe6c 	bl	80072d4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80015fc:	f7ff fc30 	bl	8000e60 <main>

08001600 <LoopForever>:

LoopForever:
  b LoopForever
 8001600:	e7fe      	b.n	8001600 <LoopForever>
 8001602:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001604:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8001608:	20000004 	.word	0x20000004
 800160c:	20000088 	.word	0x20000088
 8001610:	08008620 	.word	0x08008620
  INIT_BSS _sbss, _ebss
 8001614:	20000170 	.word	0x20000170
 8001618:	200003d8 	.word	0x200003d8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800161c:	200301e4 	.word	0x200301e4
 8001620:	20030a67 	.word	0x20030a67

08001624 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001624:	e7fe      	b.n	8001624 <ADC1_IRQHandler>
	...

08001628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_Init+0x3c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a0b      	ldr	r2, [pc, #44]	; (8001664 <HAL_Init+0x3c>)
 8001638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163e:	2003      	movs	r0, #3
 8001640:	f000 f9a4 	bl	800198c <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001644:	200f      	movs	r0, #15
 8001646:	f000 f80f 	bl	8001668 <HAL_InitTick>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	71fb      	strb	r3, [r7, #7]
 8001654:	e001      	b.n	800165a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001656:	f7ff fdc9 	bl	80011ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800165a:	79fb      	ldrb	r3, [r7, #7]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	58004000 	.word	0x58004000

08001668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001674:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_InitTick+0x6c>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d024      	beq.n	80016c6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800167c:	f001 fe3c 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 8001680:	4602      	mov	r2, r0
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <HAL_InitTick+0x6c>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	4619      	mov	r1, r3
 8001688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001690:	fbb2 f3f3 	udiv	r3, r2, r3
 8001694:	4618      	mov	r0, r3
 8001696:	f000 f9ac 	bl	80019f2 <HAL_SYSTICK_Config>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d10f      	bne.n	80016c0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b0f      	cmp	r3, #15
 80016a4:	d809      	bhi.n	80016ba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016a6:	2200      	movs	r2, #0
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	f04f 30ff 	mov.w	r0, #4294967295
 80016ae:	f000 f978 	bl	80019a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016b2:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <HAL_InitTick+0x70>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	e007      	b.n	80016ca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	73fb      	strb	r3, [r7, #15]
 80016be:	e004      	b.n	80016ca <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	e001      	b.n	80016ca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000018 	.word	0x20000018
 80016d8:	20000014 	.word	0x20000014

080016dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016e0:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x20>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x24>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a04      	ldr	r2, [pc, #16]	; (8001700 <HAL_IncTick+0x24>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000018 	.word	0x20000018
 8001700:	2000028c 	.word	0x2000028c

08001704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return uwTick;
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <HAL_GetTick+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	2000028c 	.word	0x2000028c

0800171c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <HAL_GetTickPrio+0x14>)
 8001722:	681b      	ldr	r3, [r3, #0]
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000014 	.word	0x20000014

08001734 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_SuspendTick+0x1c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a04      	ldr	r2, [pc, #16]	; (8001750 <HAL_SuspendTick+0x1c>)
 800173e:	f023 0302 	bic.w	r3, r3, #2
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000e010 	.word	0xe000e010

08001754 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_ResumeTick+0x1c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a04      	ldr	r2, [pc, #16]	; (8001770 <HAL_ResumeTick+0x1c>)
 800175e:	f043 0302 	orr.w	r3, r3, #2
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010

08001774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001790:	4013      	ands	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c0:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <__NVIC_GetPriorityGrouping+0x18>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0307 	and.w	r3, r3, #7
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	db0b      	blt.n	8001802 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	f003 021f 	and.w	r2, r3, #31
 80017f0:	4907      	ldr	r1, [pc, #28]	; (8001810 <__NVIC_EnableIRQ+0x38>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	2001      	movs	r0, #1
 80017fa:	fa00 f202 	lsl.w	r2, r0, r2
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000e100 	.word	0xe000e100

08001814 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	db0c      	blt.n	8001840 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	f003 021f 	and.w	r2, r3, #31
 800182c:	4907      	ldr	r1, [pc, #28]	; (800184c <__NVIC_SetPendingIRQ+0x38>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	095b      	lsrs	r3, r3, #5
 8001834:	2001      	movs	r0, #1
 8001836:	fa00 f202 	lsl.w	r2, r0, r2
 800183a:	3340      	adds	r3, #64	; 0x40
 800183c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100

08001850 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0c      	blt.n	800187c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <__NVIC_ClearPendingIRQ+0x38>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	3360      	adds	r3, #96	; 0x60
 8001878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	210f      	movs	r1, #15
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f7ff ff8e 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff feed 	bl	8001774 <__NVIC_SetPriorityGrouping>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019b0:	f7ff ff04 	bl	80017bc <__NVIC_GetPriorityGrouping>
 80019b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	6978      	ldr	r0, [r7, #20]
 80019bc:	f7ff ff90 	bl	80018e0 <NVIC_EncodePriority>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff5f 	bl	800188c <__NVIC_SetPriority>
}
 80019ce:	bf00      	nop
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fef7 	bl	80017d8 <__NVIC_EnableIRQ>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ffa4 	bl	8001948 <SysTick_Config>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fefb 	bl	8001814 <__NVIC_SetPendingIRQ>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff0b 	bl	8001850 <__NVIC_ClearPendingIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_FLASH_Unlock+0x38>)
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	da0b      	bge.n	8001a6e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_FLASH_Unlock+0x38>)
 8001a58:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <HAL_FLASH_Unlock+0x3c>)
 8001a5a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <HAL_FLASH_Unlock+0x38>)
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_FLASH_Unlock+0x40>)
 8001a60:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_FLASH_Unlock+0x38>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da01      	bge.n	8001a6e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	58004000 	.word	0x58004000
 8001a80:	45670123 	.word	0x45670123
 8001a84:	cdef89ab 	.word	0xcdef89ab

08001a88 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_FLASH_Lock+0x30>)
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <HAL_FLASH_Lock+0x30>)
 8001a98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a9c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_FLASH_Lock+0x30>)
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db01      	blt.n	8001aaa <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	58004000 	.word	0x58004000

08001abc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8001ac4:	f7ff fe1e 	bl	8001704 <HAL_GetTick>
 8001ac8:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001aca:	e009      	b.n	8001ae0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001acc:	f7ff fe1a 	bl	8001704 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d801      	bhi.n	8001ae0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e054      	b.n	8001b8a <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001ae0:	4b2c      	ldr	r3, [pc, #176]	; (8001b94 <FLASH_WaitForLastOperation+0xd8>)
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aec:	d0ee      	beq.n	8001acc <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8001aee:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <FLASH_WaitForLastOperation+0xd8>)
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d002      	beq.n	8001b04 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <FLASH_WaitForLastOperation+0xd8>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d007      	beq.n	8001b1e <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001b0e:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <FLASH_WaitForLastOperation+0xd8>)
 8001b10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b14:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001b1c:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8001b24:	4013      	ands	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <FLASH_WaitForLastOperation+0x86>
 8001b32:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <FLASH_WaitForLastOperation+0xd8>)
 8001b34:	699a      	ldr	r2, [r3, #24]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8001b3c:	4915      	ldr	r1, [pc, #84]	; (8001b94 <FLASH_WaitForLastOperation+0xd8>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	618b      	str	r3, [r1, #24]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <FLASH_WaitForLastOperation+0x9a>
 8001b4c:	4a11      	ldr	r2, [pc, #68]	; (8001b94 <FLASH_WaitForLastOperation+0xd8>)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001b54:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00e      	beq.n	8001b7a <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <FLASH_WaitForLastOperation+0xdc>)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e011      	b.n	8001b8a <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8001b66:	f7ff fdcd 	bl	8001704 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d801      	bhi.n	8001b7a <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e007      	b.n	8001b8a <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <FLASH_WaitForLastOperation+0xd8>)
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b86:	d0ee      	beq.n	8001b66 <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	58004000 	.word	0x58004000
 8001b98:	20000290 	.word	0x20000290

08001b9c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ba6:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <HAL_FLASHEx_Erase+0x9c>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_FLASHEx_Erase+0x16>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e03d      	b.n	8001c2e <HAL_FLASHEx_Erase+0x92>
 8001bb2:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <HAL_FLASHEx_Erase+0x9c>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <HAL_FLASHEx_Erase+0x9c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001bbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bc2:	f7ff ff7b 	bl	8001abc <FLASH_WaitForLastOperation>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001bca:	7bfb      	ldrb	r3, [r7, #15]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d12a      	bne.n	8001c26 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d124      	bne.n	8001c22 <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f04f 32ff 	mov.w	r2, #4294967295
 8001bde:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	e012      	b.n	8001c0e <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8001be8:	68b8      	ldr	r0, [r7, #8]
 8001bea:	f000 f827 	bl	8001c3c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001bee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bf2:	f7ff ff63 	bl	8001abc <FLASH_WaitForLastOperation>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d003      	beq.n	8001c08 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	601a      	str	r2, [r3, #0]
          break;
 8001c06:	e00a      	b.n	8001c1e <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	4413      	add	r3, r2
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d3e4      	bcc.n	8001be8 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8001c1e:	f000 f86f 	bl	8001d00 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001c22:	f000 f825 	bl	8001c70 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c26:	4b04      	ldr	r3, [pc, #16]	; (8001c38 <HAL_FLASHEx_Erase+0x9c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]

  return status;
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000290 	.word	0x20000290

08001c3c <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8001c44:	4b09      	ldr	r3, [pc, #36]	; (8001c6c <FLASH_PageErase+0x30>)
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4313      	orrs	r3, r2
 8001c52:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <FLASH_PageErase+0x30>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	6153      	str	r3, [r2, #20]
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	58004000 	.word	0x58004000

08001c70 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8001c74:	4b21      	ldr	r3, [pc, #132]	; (8001cfc <FLASH_FlushCaches+0x8c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c80:	d117      	bne.n	8001cb2 <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001c82:	4b1e      	ldr	r3, [pc, #120]	; (8001cfc <FLASH_FlushCaches+0x8c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <FLASH_FlushCaches+0x8c>)
 8001c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c8c:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <FLASH_FlushCaches+0x8c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1a      	ldr	r2, [pc, #104]	; (8001cfc <FLASH_FlushCaches+0x8c>)
 8001c94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <FLASH_FlushCaches+0x8c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a17      	ldr	r2, [pc, #92]	; (8001cfc <FLASH_FlushCaches+0x8c>)
 8001ca0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ca4:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <FLASH_FlushCaches+0x8c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a14      	ldr	r2, [pc, #80]	; (8001cfc <FLASH_FlushCaches+0x8c>)
 8001cac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cb0:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <FLASH_FlushCaches+0x8c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cbe:	d117      	bne.n	8001cf0 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <FLASH_FlushCaches+0x8c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	; (8001cfc <FLASH_FlushCaches+0x8c>)
 8001cc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cca:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <FLASH_FlushCaches+0x8c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <FLASH_FlushCaches+0x8c>)
 8001cd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <FLASH_FlushCaches+0x8c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a07      	ldr	r2, [pc, #28]	; (8001cfc <FLASH_FlushCaches+0x8c>)
 8001cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ce2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <FLASH_FlushCaches+0x8c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <FLASH_FlushCaches+0x8c>)
 8001cea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cee:	6013      	str	r3, [r2, #0]
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	58004000 	.word	0x58004000

08001d00 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <FLASH_AcknowledgePageErase+0x20>)
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <FLASH_AcknowledgePageErase+0x20>)
 8001d0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d0e:	f023 0302 	bic.w	r3, r3, #2
 8001d12:	6153      	str	r3, [r2, #20]
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	58004000 	.word	0x58004000

08001d24 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b087      	sub	sp, #28
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d32:	e146      	b.n	8001fc2 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	2101      	movs	r1, #1
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	4013      	ands	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 8138 	beq.w	8001fbc <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d005      	beq.n	8001d64 <HAL_GPIO_Init+0x40>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d130      	bne.n	8001dc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	2203      	movs	r2, #3
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	f003 0201 	and.w	r2, r3, #1
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d017      	beq.n	8001e02 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	2203      	movs	r2, #3
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d123      	bne.n	8001e56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	08da      	lsrs	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3208      	adds	r2, #8
 8001e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	220f      	movs	r2, #15
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	691a      	ldr	r2, [r3, #16]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	08da      	lsrs	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	6939      	ldr	r1, [r7, #16]
 8001e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	2203      	movs	r2, #3
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0203 	and.w	r2, r3, #3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f000 8092 	beq.w	8001fbc <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e98:	4a51      	ldr	r2, [pc, #324]	; (8001fe0 <HAL_GPIO_Init+0x2bc>)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	089b      	lsrs	r3, r3, #2
 8001e9e:	3302      	adds	r3, #2
 8001ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	220f      	movs	r2, #15
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ec2:	d013      	beq.n	8001eec <HAL_GPIO_Init+0x1c8>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a47      	ldr	r2, [pc, #284]	; (8001fe4 <HAL_GPIO_Init+0x2c0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00d      	beq.n	8001ee8 <HAL_GPIO_Init+0x1c4>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a46      	ldr	r2, [pc, #280]	; (8001fe8 <HAL_GPIO_Init+0x2c4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d007      	beq.n	8001ee4 <HAL_GPIO_Init+0x1c0>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a45      	ldr	r2, [pc, #276]	; (8001fec <HAL_GPIO_Init+0x2c8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d101      	bne.n	8001ee0 <HAL_GPIO_Init+0x1bc>
 8001edc:	2304      	movs	r3, #4
 8001ede:	e006      	b.n	8001eee <HAL_GPIO_Init+0x1ca>
 8001ee0:	2307      	movs	r3, #7
 8001ee2:	e004      	b.n	8001eee <HAL_GPIO_Init+0x1ca>
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	e002      	b.n	8001eee <HAL_GPIO_Init+0x1ca>
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e000      	b.n	8001eee <HAL_GPIO_Init+0x1ca>
 8001eec:	2300      	movs	r3, #0
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	f002 0203 	and.w	r2, r2, #3
 8001ef4:	0092      	lsls	r2, r2, #2
 8001ef6:	4093      	lsls	r3, r2
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001efe:	4938      	ldr	r1, [pc, #224]	; (8001fe0 <HAL_GPIO_Init+0x2bc>)
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	089b      	lsrs	r3, r3, #2
 8001f04:	3302      	adds	r3, #2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f0c:	4b38      	ldr	r3, [pc, #224]	; (8001ff0 <HAL_GPIO_Init+0x2cc>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f30:	4a2f      	ldr	r2, [pc, #188]	; (8001ff0 <HAL_GPIO_Init+0x2cc>)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f36:	4b2e      	ldr	r3, [pc, #184]	; (8001ff0 <HAL_GPIO_Init+0x2cc>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f5a:	4a25      	ldr	r2, [pc, #148]	; (8001ff0 <HAL_GPIO_Init+0x2cc>)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f60:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <HAL_GPIO_Init+0x2cc>)
 8001f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f86:	4a1a      	ldr	r2, [pc, #104]	; (8001ff0 <HAL_GPIO_Init+0x2cc>)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001f8e:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_GPIO_Init+0x2cc>)
 8001f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fb4:	4a0e      	ldr	r2, [pc, #56]	; (8001ff0 <HAL_GPIO_Init+0x2cc>)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f47f aeb1 	bne.w	8001d34 <HAL_GPIO_Init+0x10>
  }
}
 8001fd2:	bf00      	nop
 8001fd4:	bf00      	nop
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	48000400 	.word	0x48000400
 8001fe8:	48000800 	.word	0x48000800
 8001fec:	48001000 	.word	0x48001000
 8001ff0:	58000800 	.word	0x58000800

08001ff4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_HSEM_IRQHandler+0x30>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002000:	4b08      	ldr	r3, [pc, #32]	; (8002024 <HAL_HSEM_IRQHandler+0x30>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	43db      	mvns	r3, r3
 8002008:	4906      	ldr	r1, [pc, #24]	; (8002024 <HAL_HSEM_IRQHandler+0x30>)
 800200a:	4013      	ands	r3, r2
 800200c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <HAL_HSEM_IRQHandler+0x30>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f807 	bl	8002028 <HAL_HSEM_FreeCallback>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	58001500 	.word	0x58001500

08002028 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d01e      	beq.n	800208c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <HAL_IPCC_Init+0x60>)
 8002050:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d102      	bne.n	8002064 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff f8d4 	bl	800120c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002064:	68b8      	ldr	r0, [r7, #8]
 8002066:	f000 f85b 	bl	8002120 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f82c 	bl	80020d4 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800208a:	e001      	b.n	8002090 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002090:	7bfb      	ldrb	r3, [r7, #15]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	58000c00 	.word	0x58000c00

080020a0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	4613      	mov	r3, r2
 80020ac:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b085      	sub	sp, #20
 80020be:	af00      	add	r7, sp, #0
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	4613      	mov	r3, r2
 80020c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	e00f      	b.n	8002102 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <IPCC_SetDefaultCallbacks+0x44>)
 80020ec:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3306      	adds	r3, #6
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	4a08      	ldr	r2, [pc, #32]	; (800211c <IPCC_SetDefaultCallbacks+0x48>)
 80020fa:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	3301      	adds	r3, #1
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2b05      	cmp	r3, #5
 8002106:	d9ec      	bls.n	80020e2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	080020a1 	.word	0x080020a1
 800211c:	080020bb 	.word	0x080020bb

08002120 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002134:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	223f      	movs	r2, #63	; 0x3f
 800213a:	609a      	str	r2, [r3, #8]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800214c:	4b05      	ldr	r3, [pc, #20]	; (8002164 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002156:	6013      	str	r3, [r2, #0]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	58000400 	.word	0x58000400

08002168 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  
  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800217a:	d104      	bne.n	8002186 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	4618      	mov	r0, r3
 8002180:	f000 f86a 	bl	8002258 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8002184:	e003      	b.n	800218e <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	4618      	mov	r0, r3
 800218a:	f000 f83b 	bl	8002204 <HAL_PWREx_EnterSTOP0Mode>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_PWR_EnableSleepOnExit>:
  *         Setting this bit is useful when the processor is expected to run only on
  *         interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_PWR_EnableSleepOnExit+0x1c>)
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <HAL_PWR_EnableSleepOnExit+0x1c>)
 80021a2:	f043 0302 	orr.w	r3, r3, #2
 80021a6:	6113      	str	r3, [r2, #16]
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <HAL_PWR_DisableSleepOnExit>:
  * @note   Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *         re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_PWR_DisableSleepOnExit+0x1c>)
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <HAL_PWR_DisableSleepOnExit+0x1c>)
 80021c2:	f023 0302 	bic.w	r3, r3, #2
 80021c6:	6113      	str	r3, [r2, #16]
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <LL_PWR_EnableSRAM2Retention>:
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <LL_PWR_EnableSRAM2Retention+0x1c>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <LL_PWR_EnableSRAM2Retention+0x1c>)
 80021e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021e6:	6093      	str	r3, [r2, #8]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	58000400 	.word	0x58000400

080021f8 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended 
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 80021fc:	f7ff ffec 	bl	80021d8 <LL_PWR_EnableSRAM2Retention>
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a0f      	ldr	r2, [pc, #60]	; (8002250 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002214:	f023 0307 	bic.w	r3, r3, #7
 8002218:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	4a0d      	ldr	r2, [pc, #52]	; (8002254 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800222c:	bf30      	wfi
 800222e:	e002      	b.n	8002236 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002230:	bf40      	sev
    __WFE();
 8002232:	bf20      	wfe
    __WFE();
 8002234:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	4a06      	ldr	r2, [pc, #24]	; (8002254 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800223c:	f023 0304 	bic.w	r3, r3, #4
 8002240:	6113      	str	r3, [r2, #16]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	58000400 	.word	0x58000400
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
    
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8002262:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 0307 	bic.w	r3, r3, #7
 800226a:	4a0f      	ldr	r2, [pc, #60]	; (80022a8 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	4a0d      	ldr	r2, [pc, #52]	; (80022ac <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002278:	f043 0304 	orr.w	r3, r3, #4
 800227c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002284:	bf30      	wfi
 8002286:	e002      	b.n	800228e <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002288:	bf40      	sev
    __WFE();
 800228a:	bf20      	wfe
    __WFE();
 800228c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800228e:	4b07      	ldr	r3, [pc, #28]	; (80022ac <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	4a06      	ldr	r2, [pc, #24]	; (80022ac <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002294:	f023 0304 	bic.w	r3, r3, #4
 8002298:	6113      	str	r3, [r2, #16]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	58000400 	.word	0x58000400
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80022b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022c2:	d101      	bne.n	80022c8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_RCC_HSE_Enable>:
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80022d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <LL_RCC_HSE_Disable>:
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80022f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002304:	6013      	str	r3, [r2, #0]
}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_RCC_HSE_IsReady>:
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002322:	d101      	bne.n	8002328 <LL_RCC_HSE_IsReady+0x18>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <LL_RCC_HSE_IsReady+0x1a>
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_RCC_HSI_Enable>:
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002346:	6013      	str	r3, [r2, #0]
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <LL_RCC_HSI_Disable>:
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002364:	6013      	str	r3, [r2, #0]
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <LL_RCC_HSI_IsReady>:
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002374:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800237e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002382:	d101      	bne.n	8002388 <LL_RCC_HSI_IsReady+0x18>
 8002384:	2301      	movs	r3, #1
 8002386:	e000      	b.n	800238a <LL_RCC_HSI_IsReady+0x1a>
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800239c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	061b      	lsls	r3, r3, #24
 80023aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ae:	4313      	orrs	r3, r2
 80023b0:	604b      	str	r3, [r1, #4]
}
 80023b2:	bf00      	nop
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr

080023be <LL_RCC_LSE_Enable>:
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <LL_RCC_LSE_Disable>:
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80023e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023f0:	f023 0301 	bic.w	r3, r3, #1
 80023f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <LL_RCC_LSE_EnableBypass>:
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800241a:	bf00      	nop
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <LL_RCC_LSE_DisableBypass>:
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002434:	f023 0304 	bic.w	r3, r3, #4
 8002438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <LL_RCC_LSE_IsReady>:
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800244a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b02      	cmp	r3, #2
 8002458:	d101      	bne.n	800245e <LL_RCC_LSE_IsReady+0x18>
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <LL_RCC_LSE_IsReady+0x1a>
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <LL_RCC_LSI1_Enable>:
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800246e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002476:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_RCC_LSI1_Disable>:
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002494:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800249c:	f023 0301 	bic.w	r3, r3, #1
 80024a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <LL_RCC_LSI1_IsReady>:
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80024b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d101      	bne.n	80024c6 <LL_RCC_LSI1_IsReady+0x18>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <LL_RCC_LSI1_IsReady+0x1a>
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <LL_RCC_LSI2_Enable>:
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80024d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e2:	f043 0304 	orr.w	r3, r3, #4
 80024e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80024ea:	bf00      	nop
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_RCC_LSI2_Disable>:
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80024f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002500:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002504:	f023 0304 	bic.w	r3, r3, #4
 8002508:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_RCC_LSI2_IsReady>:
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b08      	cmp	r3, #8
 8002528:	d101      	bne.n	800252e <LL_RCC_LSI2_IsReady+0x18>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <LL_RCC_LSI2_IsReady+0x1a>
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <LL_RCC_LSI2_SetTrimming>:
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800254a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002556:	4313      	orrs	r3, r2
 8002558:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_RCC_MSI_Enable>:
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800256c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6013      	str	r3, [r2, #0]
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <LL_RCC_MSI_Disable>:
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800258a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	6013      	str	r3, [r2, #0]
}
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <LL_RCC_MSI_IsReady>:
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80025a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d101      	bne.n	80025ba <LL_RCC_MSI_IsReady+0x16>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <LL_RCC_MSI_IsReady+0x18>
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_RCC_MSI_SetRange>:
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80025ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4313      	orrs	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <LL_RCC_MSI_GetRange>:
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80025f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025fe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2bb0      	cmp	r3, #176	; 0xb0
 8002604:	d901      	bls.n	800260a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002606:	23b0      	movs	r3, #176	; 0xb0
 8002608:	607b      	str	r3, [r7, #4]
  return msiRange;
 800260a:	687b      	ldr	r3, [r7, #4]
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002632:	4313      	orrs	r3, r2
 8002634:	604b      	str	r3, [r1, #4]
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <LL_RCC_SetSysClkSource>:
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800264a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f023 0203 	bic.w	r2, r3, #3
 8002654:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4313      	orrs	r3, r2
 800265c:	608b      	str	r3, [r1, #8]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <LL_RCC_GetSysClkSource>:
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800266e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 030c 	and.w	r3, r3, #12
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <LL_RCC_SetAHBPrescaler>:
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800268a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002694:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4313      	orrs	r3, r2
 800269c:	608b      	str	r3, [r1, #8]
}
 800269e:	bf00      	nop
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <LL_C2_RCC_SetAHBPrescaler>:
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80026b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <LL_RCC_SetAHB4Prescaler>:
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80026de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80026e6:	f023 020f 	bic.w	r2, r3, #15
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_RCC_SetAPB1Prescaler>:
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800270c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002716:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4313      	orrs	r3, r2
 800271e:	608b      	str	r3, [r1, #8]
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <LL_RCC_SetAPB2Prescaler>:
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800273e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4313      	orrs	r3, r2
 8002746:	608b      	str	r3, [r1, #8]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_RCC_GetAHBPrescaler>:
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_RCC_GetAHB4Prescaler>:
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002774:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <LL_RCC_GetAPB1Prescaler>:
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800278c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_RCC_GetAPB2Prescaler>:
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80027a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_RCC_PLL_Enable>:
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80027bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ca:	6013      	str	r3, [r2, #0]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_RCC_PLL_Disable>:
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80027da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027e8:	6013      	str	r3, [r2, #0]
}
 80027ea:	bf00      	nop
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <LL_RCC_PLL_IsReady>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80027f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002806:	d101      	bne.n	800280c <LL_RCC_PLL_IsReady+0x18>
 8002808:	2301      	movs	r3, #1
 800280a:	e000      	b.n	800280e <LL_RCC_PLL_IsReady+0x1a>
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_RCC_PLL_GetN>:
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800281c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002828:	4618      	mov	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr

08002832 <LL_RCC_PLL_GetR>:
{
 8002832:	b480      	push	{r7}
 8002834:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <LL_RCC_PLL_GetDivider>:
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800284e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <LL_RCC_PLL_GetMainSource>:
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0303 	and.w	r3, r3, #3
}
 8002870:	4618      	mov	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <LL_RCC_IsActiveFlag_HPRE>:
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800287e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288c:	d101      	bne.n	8002892 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80028a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028b2:	d101      	bne.n	80028b8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80028c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d8:	d101      	bne.n	80028de <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <LL_RCC_IsActiveFlag_PPRE1>:
{
 80028ea:	b480      	push	{r7}
 80028ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028fc:	d101      	bne.n	8002902 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80028fe:	2301      	movs	r3, #1
 8002900:	e000      	b.n	8002904 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002902:	2300      	movs	r3, #0
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800291c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002920:	d101      	bne.n	8002926 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
	...

08002934 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002934:	b590      	push	{r4, r7, lr}
 8002936:	b08d      	sub	sp, #52	; 0x34
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e324      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0320 	and.w	r3, r3, #32
 800294e:	2b00      	cmp	r3, #0
 8002950:	f000 808d 	beq.w	8002a6e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002954:	f7ff fe89 	bl	800266a <LL_RCC_GetSysClkSource>
 8002958:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800295a:	f7ff ff82 	bl	8002862 <LL_RCC_PLL_GetMainSource>
 800295e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <HAL_RCC_OscConfig+0x3e>
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	2b0c      	cmp	r3, #12
 800296a:	d147      	bne.n	80029fc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800296c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296e:	2b01      	cmp	r3, #1
 8002970:	d144      	bne.n	80029fc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e308      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002982:	f7ff fe34 	bl	80025ee <LL_RCC_MSI_GetRange>
 8002986:	4603      	mov	r3, r0
 8002988:	429c      	cmp	r4, r3
 800298a:	d914      	bls.n	80029b6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fcf1 	bl	8003378 <RCC_SetFlashLatencyFromMSIRange>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e2f7      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fe0e 	bl	80025c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fe32 	bl	8002618 <LL_RCC_MSI_SetCalibTrimming>
 80029b4:	e013      	b.n	80029de <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fe03 	bl	80025c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fe27 	bl	8002618 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fcd2 	bl	8003378 <RCC_SetFlashLatencyFromMSIRange>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e2d8      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029de:	f000 fc8b 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4aa4      	ldr	r2, [pc, #656]	; (8002c78 <HAL_RCC_OscConfig+0x344>)
 80029e6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029e8:	4ba4      	ldr	r3, [pc, #656]	; (8002c7c <HAL_RCC_OscConfig+0x348>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7fe fe3b 	bl	8001668 <HAL_InitTick>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d039      	beq.n	8002a6c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e2c9      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01e      	beq.n	8002a42 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a04:	f7ff fdb0 	bl	8002568 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a08:	f7fe fe7c 	bl	8001704 <HAL_GetTick>
 8002a0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a10:	f7fe fe78 	bl	8001704 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e2b6      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002a22:	f7ff fdbf 	bl	80025a4 <LL_RCC_MSI_IsReady>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f1      	beq.n	8002a10 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fdc8 	bl	80025c6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fdec 	bl	8002618 <LL_RCC_MSI_SetCalibTrimming>
 8002a40:	e015      	b.n	8002a6e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a42:	f7ff fda0 	bl	8002586 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a46:	f7fe fe5d 	bl	8001704 <HAL_GetTick>
 8002a4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a4e:	f7fe fe59 	bl	8001704 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e297      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002a60:	f7ff fda0 	bl	80025a4 <LL_RCC_MSI_IsReady>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f1      	bne.n	8002a4e <HAL_RCC_OscConfig+0x11a>
 8002a6a:	e000      	b.n	8002a6e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002a6c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d047      	beq.n	8002b0a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a7a:	f7ff fdf6 	bl	800266a <LL_RCC_GetSysClkSource>
 8002a7e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a80:	f7ff feef 	bl	8002862 <LL_RCC_PLL_GetMainSource>
 8002a84:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_OscConfig+0x164>
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	2b0c      	cmp	r3, #12
 8002a90:	d108      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d105      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d134      	bne.n	8002b0a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e275      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aac:	d102      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x180>
 8002aae:	f7ff fc11 	bl	80022d4 <LL_RCC_HSE_Enable>
 8002ab2:	e001      	b.n	8002ab8 <HAL_RCC_OscConfig+0x184>
 8002ab4:	f7ff fc1d 	bl	80022f2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d012      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac0:	f7fe fe20 	bl	8001704 <HAL_GetTick>
 8002ac4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ac8:	f7fe fe1c 	bl	8001704 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b64      	cmp	r3, #100	; 0x64
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e25a      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ada:	f7ff fc19 	bl	8002310 <LL_RCC_HSE_IsReady>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f1      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x194>
 8002ae4:	e011      	b.n	8002b0a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fe0d 	bl	8001704 <HAL_GetTick>
 8002aea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002aec:	e008      	b.n	8002b00 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aee:	f7fe fe09 	bl	8001704 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b64      	cmp	r3, #100	; 0x64
 8002afa:	d901      	bls.n	8002b00 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	e247      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002b00:	f7ff fc06 	bl	8002310 <LL_RCC_HSE_IsReady>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f1      	bne.n	8002aee <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d04c      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b16:	f7ff fda8 	bl	800266a <LL_RCC_GetSysClkSource>
 8002b1a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b1c:	f7ff fea1 	bl	8002862 <LL_RCC_PLL_GetMainSource>
 8002b20:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_OscConfig+0x200>
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d10e      	bne.n	8002b4c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d10b      	bne.n	8002b4c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e227      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fc25 	bl	8002394 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002b4a:	e031      	b.n	8002bb0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d019      	beq.n	8002b88 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b54:	f7ff fbee 	bl	8002334 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe fdd4 	bl	8001704 <HAL_GetTick>
 8002b5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b60:	f7fe fdd0 	bl	8001704 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e20e      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002b72:	f7ff fbfd 	bl	8002370 <LL_RCC_HSI_IsReady>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f1      	beq.n	8002b60 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fc07 	bl	8002394 <LL_RCC_HSI_SetCalibTrimming>
 8002b86:	e013      	b.n	8002bb0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b88:	f7ff fbe3 	bl	8002352 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fdba 	bl	8001704 <HAL_GetTick>
 8002b90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b94:	f7fe fdb6 	bl	8001704 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e1f4      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002ba6:	f7ff fbe3 	bl	8002370 <LL_RCC_HSI_IsReady>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f1      	bne.n	8002b94 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80a3 	beq.w	8002d10 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d076      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d046      	beq.n	8002c6c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002bde:	f7ff fc66 	bl	80024ae <LL_RCC_LSI1_IsReady>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d113      	bne.n	8002c10 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002be8:	f7ff fc3f 	bl	800246a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bec:	f7fe fd8a 	bl	8001704 <HAL_GetTick>
 8002bf0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002bf4:	f7fe fd86 	bl	8001704 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e1c4      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002c06:	f7ff fc52 	bl	80024ae <LL_RCC_LSI1_IsReady>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0f1      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002c10:	f7ff fc5f 	bl	80024d2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe fd76 	bl	8001704 <HAL_GetTick>
 8002c18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002c1c:	f7fe fd72 	bl	8001704 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e1b0      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002c2e:	f7ff fc72 	bl	8002516 <LL_RCC_LSI2_IsReady>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0f1      	beq.n	8002c1c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff fc7c 	bl	800253a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002c42:	f7ff fc23 	bl	800248c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c46:	f7fe fd5d 	bl	8001704 <HAL_GetTick>
 8002c4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002c4e:	f7fe fd59 	bl	8001704 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e197      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002c60:	f7ff fc25 	bl	80024ae <LL_RCC_LSI1_IsReady>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f1      	bne.n	8002c4e <HAL_RCC_OscConfig+0x31a>
 8002c6a:	e051      	b.n	8002d10 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002c6c:	f7ff fbfd 	bl	800246a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fe fd48 	bl	8001704 <HAL_GetTick>
 8002c74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002c76:	e00c      	b.n	8002c92 <HAL_RCC_OscConfig+0x35e>
 8002c78:	20000010 	.word	0x20000010
 8002c7c:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002c80:	f7fe fd40 	bl	8001704 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e17e      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002c92:	f7ff fc0c 	bl	80024ae <LL_RCC_LSI1_IsReady>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f1      	beq.n	8002c80 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002c9c:	f7ff fc2a 	bl	80024f4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002ca2:	f7fe fd2f 	bl	8001704 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e16d      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002cb4:	f7ff fc2f 	bl	8002516 <LL_RCC_LSI2_IsReady>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f1      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x36e>
 8002cbe:	e027      	b.n	8002d10 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002cc0:	f7ff fc18 	bl	80024f4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc4:	f7fe fd1e 	bl	8001704 <HAL_GetTick>
 8002cc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002ccc:	f7fe fd1a 	bl	8001704 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e158      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002cde:	f7ff fc1a 	bl	8002516 <LL_RCC_LSI2_IsReady>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1f1      	bne.n	8002ccc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002ce8:	f7ff fbd0 	bl	800248c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cec:	f7fe fd0a 	bl	8001704 <HAL_GetTick>
 8002cf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002cf4:	f7fe fd06 	bl	8001704 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e144      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002d06:	f7ff fbd2 	bl	80024ae <LL_RCC_LSI1_IsReady>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f1      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d05b      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d1c:	4b9e      	ldr	r3, [pc, #632]	; (8002f98 <HAL_RCC_OscConfig+0x664>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d114      	bne.n	8002d52 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002d28:	f7ff fa0e 	bl	8002148 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d2c:	f7fe fcea 	bl	8001704 <HAL_GetTick>
 8002d30:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d34:	f7fe fce6 	bl	8001704 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e124      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d46:	4b94      	ldr	r3, [pc, #592]	; (8002f98 <HAL_RCC_OscConfig+0x664>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d102      	bne.n	8002d60 <HAL_RCC_OscConfig+0x42c>
 8002d5a:	f7ff fb30 	bl	80023be <LL_RCC_LSE_Enable>
 8002d5e:	e00c      	b.n	8002d7a <HAL_RCC_OscConfig+0x446>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b05      	cmp	r3, #5
 8002d66:	d104      	bne.n	8002d72 <HAL_RCC_OscConfig+0x43e>
 8002d68:	f7ff fb4b 	bl	8002402 <LL_RCC_LSE_EnableBypass>
 8002d6c:	f7ff fb27 	bl	80023be <LL_RCC_LSE_Enable>
 8002d70:	e003      	b.n	8002d7a <HAL_RCC_OscConfig+0x446>
 8002d72:	f7ff fb35 	bl	80023e0 <LL_RCC_LSE_Disable>
 8002d76:	f7ff fb55 	bl	8002424 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d014      	beq.n	8002dac <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d82:	f7fe fcbf 	bl	8001704 <HAL_GetTick>
 8002d86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f7fe fcbb 	bl	8001704 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e0f7      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002da0:	f7ff fb51 	bl	8002446 <LL_RCC_LSE_IsReady>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0ef      	beq.n	8002d8a <HAL_RCC_OscConfig+0x456>
 8002daa:	e013      	b.n	8002dd4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dac:	f7fe fcaa 	bl	8001704 <HAL_GetTick>
 8002db0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002db2:	e00a      	b.n	8002dca <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db4:	f7fe fca6 	bl	8001704 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e0e2      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002dca:	f7ff fb3c 	bl	8002446 <LL_RCC_LSE_IsReady>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1ef      	bne.n	8002db4 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 80d8 	beq.w	8002f8e <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dde:	f7ff fc44 	bl	800266a <LL_RCC_GetSysClkSource>
 8002de2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	f040 80a6 	bne.w	8002f42 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f003 0203 	and.w	r2, r3, #3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d123      	bne.n	8002e4c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d11c      	bne.n	8002e4c <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	0a1b      	lsrs	r3, r3, #8
 8002e16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d114      	bne.n	8002e4c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d10d      	bne.n	8002e4c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d106      	bne.n	8002e4c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d054      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	2b0c      	cmp	r3, #12
 8002e50:	d04f      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e52:	f7ff fcc0 	bl	80027d6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e56:	f7fe fc55 	bl	8001704 <HAL_GetTick>
 8002e5a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e5c:	e008      	b.n	8002e70 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5e:	f7fe fc51 	bl	8001704 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d901      	bls.n	8002e70 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8002e6c:	2303      	movs	r3, #3
 8002e6e:	e08f      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1ef      	bne.n	8002e5e <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	4b45      	ldr	r3, [pc, #276]	; (8002f9c <HAL_RCC_OscConfig+0x668>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e90:	4311      	orrs	r1, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e96:	0212      	lsls	r2, r2, #8
 8002e98:	4311      	orrs	r1, r2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e9e:	4311      	orrs	r1, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ea4:	4311      	orrs	r1, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002eb4:	f7ff fc80 	bl	80027b8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ec6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ec8:	f7fe fc1c 	bl	8001704 <HAL_GetTick>
 8002ecc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed0:	f7fe fc18 	bl	8001704 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e056      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0ef      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ef0:	e04d      	b.n	8002f8e <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e04c      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d144      	bne.n	8002f8e <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002f04:	f7ff fc58 	bl	80027b8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f18:	f7fe fbf4 	bl	8001704 <HAL_GetTick>
 8002f1c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f20:	f7fe fbf0 	bl	8001704 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e02e      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0ef      	beq.n	8002f20 <HAL_RCC_OscConfig+0x5ec>
 8002f40:	e025      	b.n	8002f8e <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b0c      	cmp	r3, #12
 8002f46:	d020      	beq.n	8002f8a <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f48:	f7ff fc45 	bl	80027d6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fbda 	bl	8001704 <HAL_GetTick>
 8002f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f54:	f7fe fbd6 	bl	8001704 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e014      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1ef      	bne.n	8002f54 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8002f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f82:	f023 0303 	bic.w	r3, r3, #3
 8002f86:	60d3      	str	r3, [r2, #12]
 8002f88:	e001      	b.n	8002f8e <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3734      	adds	r7, #52	; 0x34
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd90      	pop	{r4, r7, pc}
 8002f98:	58000400 	.word	0x58000400
 8002f9c:	11c1808c 	.word	0x11c1808c

08002fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e12d      	b.n	8003210 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fb4:	4b98      	ldr	r3, [pc, #608]	; (8003218 <HAL_RCC_ClockConfig+0x278>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0307 	and.w	r3, r3, #7
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d91b      	bls.n	8002ffa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fc2:	4b95      	ldr	r3, [pc, #596]	; (8003218 <HAL_RCC_ClockConfig+0x278>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 0207 	bic.w	r2, r3, #7
 8002fca:	4993      	ldr	r1, [pc, #588]	; (8003218 <HAL_RCC_ClockConfig+0x278>)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd2:	f7fe fb97 	bl	8001704 <HAL_GetTick>
 8002fd6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002fda:	f7fe fb93 	bl	8001704 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e111      	b.n	8003210 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fec:	4b8a      	ldr	r3, [pc, #552]	; (8003218 <HAL_RCC_ClockConfig+0x278>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d1ef      	bne.n	8002fda <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d016      	beq.n	8003034 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fb39 	bl	8002682 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003010:	f7fe fb78 	bl	8001704 <HAL_GetTick>
 8003014:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003016:	e008      	b.n	800302a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003018:	f7fe fb74 	bl	8001704 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e0f2      	b.n	8003210 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800302a:	f7ff fc26 	bl	800287a <LL_RCC_IsActiveFlag_HPRE>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f1      	beq.n	8003018 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d016      	beq.n	800306e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fb30 	bl	80026aa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800304a:	f7fe fb5b 	bl	8001704 <HAL_GetTick>
 800304e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003050:	e008      	b.n	8003064 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003052:	f7fe fb57 	bl	8001704 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e0d5      	b.n	8003210 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003064:	f7ff fc1b 	bl	800289e <LL_RCC_IsActiveFlag_C2HPRE>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f1      	beq.n	8003052 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003076:	2b00      	cmp	r3, #0
 8003078:	d016      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fb29 	bl	80026d6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003084:	f7fe fb3e 	bl	8001704 <HAL_GetTick>
 8003088:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800308c:	f7fe fb3a 	bl	8001704 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e0b8      	b.n	8003210 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800309e:	f7ff fc11 	bl	80028c4 <LL_RCC_IsActiveFlag_SHDHPRE>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f1      	beq.n	800308c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d016      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff fb23 	bl	8002704 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030be:	f7fe fb21 	bl	8001704 <HAL_GetTick>
 80030c2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80030c6:	f7fe fb1d 	bl	8001704 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e09b      	b.n	8003210 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80030d8:	f7ff fc07 	bl	80028ea <LL_RCC_IsActiveFlag_PPRE1>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f1      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d017      	beq.n	800311e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fb19 	bl	800272c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80030fa:	f7fe fb03 	bl	8001704 <HAL_GetTick>
 80030fe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003100:	e008      	b.n	8003114 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003102:	f7fe faff 	bl	8001704 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e07d      	b.n	8003210 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003114:	f7ff fbfb 	bl	800290e <LL_RCC_IsActiveFlag_PPRE2>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f1      	beq.n	8003102 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d043      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d106      	bne.n	8003140 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003132:	f7ff f8ed 	bl	8002310 <LL_RCC_HSE_IsReady>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d11e      	bne.n	800317a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e067      	b.n	8003210 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d106      	bne.n	8003156 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003148:	f7ff fb54 	bl	80027f4 <LL_RCC_PLL_IsReady>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d113      	bne.n	800317a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e05c      	b.n	8003210 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800315e:	f7ff fa21 	bl	80025a4 <LL_RCC_MSI_IsReady>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d108      	bne.n	800317a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e051      	b.n	8003210 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800316c:	f7ff f900 	bl	8002370 <LL_RCC_HSI_IsReady>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e04a      	b.n	8003210 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fa5f 	bl	8002642 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003184:	f7fe fabe 	bl	8001704 <HAL_GetTick>
 8003188:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800318c:	f7fe faba 	bl	8001704 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	; 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e036      	b.n	8003210 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a2:	f7ff fa62 	bl	800266a <LL_RCC_GetSysClkSource>
 80031a6:	4602      	mov	r2, r0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d1ec      	bne.n	800318c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031b2:	4b19      	ldr	r3, [pc, #100]	; (8003218 <HAL_RCC_ClockConfig+0x278>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d21b      	bcs.n	80031f8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031c0:	4b15      	ldr	r3, [pc, #84]	; (8003218 <HAL_RCC_ClockConfig+0x278>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f023 0207 	bic.w	r2, r3, #7
 80031c8:	4913      	ldr	r1, [pc, #76]	; (8003218 <HAL_RCC_ClockConfig+0x278>)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d0:	f7fe fa98 	bl	8001704 <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80031d8:	f7fe fa94 	bl	8001704 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e012      	b.n	8003210 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCC_ClockConfig+0x278>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d1ef      	bne.n	80031d8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80031f8:	f000 f87e 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 80031fc:	4603      	mov	r3, r0
 80031fe:	4a07      	ldr	r2, [pc, #28]	; (800321c <HAL_RCC_ClockConfig+0x27c>)
 8003200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003202:	f7fe fa8b 	bl	800171c <HAL_GetTickPrio>
 8003206:	4603      	mov	r3, r0
 8003208:	4618      	mov	r0, r3
 800320a:	f7fe fa2d 	bl	8001668 <HAL_InitTick>
 800320e:	4603      	mov	r3, r0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	58004000 	.word	0x58004000
 800321c:	20000010 	.word	0x20000010

08003220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003226:	f7ff fa20 	bl	800266a <LL_RCC_GetSysClkSource>
 800322a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003232:	f7ff f9dc 	bl	80025ee <LL_RCC_MSI_GetRange>
 8003236:	4603      	mov	r3, r0
 8003238:	091b      	lsrs	r3, r3, #4
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	4a2b      	ldr	r2, [pc, #172]	; (80032ec <HAL_RCC_GetSysClockFreq+0xcc>)
 8003240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	e04b      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b04      	cmp	r3, #4
 800324c:	d102      	bne.n	8003254 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800324e:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	e045      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b08      	cmp	r3, #8
 8003258:	d10a      	bne.n	8003270 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800325a:	f7ff f829 	bl	80022b0 <LL_RCC_HSE_IsEnabledDiv2>
 800325e:	4603      	mov	r3, r0
 8003260:	2b01      	cmp	r3, #1
 8003262:	d102      	bne.n	800326a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003264:	4b22      	ldr	r3, [pc, #136]	; (80032f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	e03a      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800326a:	4b22      	ldr	r3, [pc, #136]	; (80032f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	e037      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003270:	f7ff faf7 	bl	8002862 <LL_RCC_PLL_GetMainSource>
 8003274:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d003      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x64>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b03      	cmp	r3, #3
 8003280:	d003      	beq.n	800328a <HAL_RCC_GetSysClockFreq+0x6a>
 8003282:	e00d      	b.n	80032a0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003284:	4b1a      	ldr	r3, [pc, #104]	; (80032f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003286:	60bb      	str	r3, [r7, #8]
        break;
 8003288:	e015      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800328a:	f7ff f811 	bl	80022b0 <LL_RCC_HSE_IsEnabledDiv2>
 800328e:	4603      	mov	r3, r0
 8003290:	2b01      	cmp	r3, #1
 8003292:	d102      	bne.n	800329a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003294:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003296:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003298:	e00d      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800329a:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800329c:	60bb      	str	r3, [r7, #8]
        break;
 800329e:	e00a      	b.n	80032b6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80032a0:	f7ff f9a5 	bl	80025ee <LL_RCC_MSI_GetRange>
 80032a4:	4603      	mov	r3, r0
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	4a0f      	ldr	r2, [pc, #60]	; (80032ec <HAL_RCC_GetSysClockFreq+0xcc>)
 80032ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b2:	60bb      	str	r3, [r7, #8]
        break;
 80032b4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80032b6:	f7ff faaf 	bl	8002818 <LL_RCC_PLL_GetN>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	fb03 f402 	mul.w	r4, r3, r2
 80032c2:	f7ff fac2 	bl	800284a <LL_RCC_PLL_GetDivider>
 80032c6:	4603      	mov	r3, r0
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	3301      	adds	r3, #1
 80032cc:	fbb4 f4f3 	udiv	r4, r4, r3
 80032d0:	f7ff faaf 	bl	8002832 <LL_RCC_PLL_GetR>
 80032d4:	4603      	mov	r3, r0
 80032d6:	0f5b      	lsrs	r3, r3, #29
 80032d8:	3301      	adds	r3, #1
 80032da:	fbb4 f3f3 	udiv	r3, r4, r3
 80032de:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80032e0:	68fb      	ldr	r3, [r7, #12]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd90      	pop	{r4, r7, pc}
 80032ea:	bf00      	nop
 80032ec:	080084d8 	.word	0x080084d8
 80032f0:	00f42400 	.word	0x00f42400
 80032f4:	01e84800 	.word	0x01e84800

080032f8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f8:	b598      	push	{r3, r4, r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80032fc:	f7ff ff90 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 8003300:	4604      	mov	r4, r0
 8003302:	f7ff fa27 	bl	8002754 <LL_RCC_GetAHBPrescaler>
 8003306:	4603      	mov	r3, r0
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	4a03      	ldr	r2, [pc, #12]	; (800331c <HAL_RCC_GetHCLKFreq+0x24>)
 8003310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003314:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003318:	4618      	mov	r0, r3
 800331a:	bd98      	pop	{r3, r4, r7, pc}
 800331c:	08008478 	.word	0x08008478

08003320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003320:	b598      	push	{r3, r4, r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003324:	f7ff ffe8 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 8003328:	4604      	mov	r4, r0
 800332a:	f7ff fa2d 	bl	8002788 <LL_RCC_GetAPB1Prescaler>
 800332e:	4603      	mov	r3, r0
 8003330:	0a1b      	lsrs	r3, r3, #8
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	4a04      	ldr	r2, [pc, #16]	; (8003348 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003344:	4618      	mov	r0, r3
 8003346:	bd98      	pop	{r3, r4, r7, pc}
 8003348:	080084b8 	.word	0x080084b8

0800334c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800334c:	b598      	push	{r3, r4, r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003350:	f7ff ffd2 	bl	80032f8 <HAL_RCC_GetHCLKFreq>
 8003354:	4604      	mov	r4, r0
 8003356:	f7ff fa23 	bl	80027a0 <LL_RCC_GetAPB2Prescaler>
 800335a:	4603      	mov	r3, r0
 800335c:	0adb      	lsrs	r3, r3, #11
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	4a04      	ldr	r2, [pc, #16]	; (8003374 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003364:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd98      	pop	{r3, r4, r7, pc}
 8003374:	080084b8 	.word	0x080084b8

08003378 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2bb0      	cmp	r3, #176	; 0xb0
 8003384:	d903      	bls.n	800338e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003386:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	e007      	b.n	800339e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	091b      	lsrs	r3, r3, #4
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	4a10      	ldr	r2, [pc, #64]	; (80033d8 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800339e:	f7ff f9e5 	bl	800276c <LL_RCC_GetAHB4Prescaler>
 80033a2:	4603      	mov	r3, r0
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	4a0c      	ldr	r2, [pc, #48]	; (80033dc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80033ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4a09      	ldr	r2, [pc, #36]	; (80033e0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80033bc:	fba2 2303 	umull	r2, r3, r2, r3
 80033c0:	0c9b      	lsrs	r3, r3, #18
 80033c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f80c 	bl	80033e4 <RCC_SetFlashLatency>
 80033cc:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	080084d8 	.word	0x080084d8
 80033dc:	08008478 	.word	0x08008478
 80033e0:	431bde83 	.word	0x431bde83

080033e4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b08f      	sub	sp, #60	; 0x3c
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80033ee:	4b24      	ldr	r3, [pc, #144]	; (8003480 <RCC_SetFlashLatency+0x9c>)
 80033f0:	f107 041c 	add.w	r4, r7, #28
 80033f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80033fa:	4b22      	ldr	r3, [pc, #136]	; (8003484 <RCC_SetFlashLatency+0xa0>)
 80033fc:	f107 040c 	add.w	r4, r7, #12
 8003400:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003402:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003406:	2300      	movs	r3, #0
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800340a:	2300      	movs	r3, #0
 800340c:	633b      	str	r3, [r7, #48]	; 0x30
 800340e:	e013      	b.n	8003438 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	3338      	adds	r3, #56	; 0x38
 8003416:	443b      	add	r3, r7
 8003418:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	429a      	cmp	r2, r3
 8003420:	d807      	bhi.n	8003432 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8003422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	3338      	adds	r3, #56	; 0x38
 8003428:	443b      	add	r3, r7
 800342a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800342e:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8003430:	e005      	b.n	800343e <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	3301      	adds	r3, #1
 8003436:	633b      	str	r3, [r7, #48]	; 0x30
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	2b03      	cmp	r3, #3
 800343c:	d9e8      	bls.n	8003410 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800343e:	4b12      	ldr	r3, [pc, #72]	; (8003488 <RCC_SetFlashLatency+0xa4>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 0207 	bic.w	r2, r3, #7
 8003446:	4910      	ldr	r1, [pc, #64]	; (8003488 <RCC_SetFlashLatency+0xa4>)
 8003448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344a:	4313      	orrs	r3, r2
 800344c:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800344e:	f7fe f959 	bl	8001704 <HAL_GetTick>
 8003452:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003454:	e008      	b.n	8003468 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003456:	f7fe f955 	bl	8001704 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e007      	b.n	8003478 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003468:	4b07      	ldr	r3, [pc, #28]	; (8003488 <RCC_SetFlashLatency+0xa4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0307 	and.w	r3, r3, #7
 8003470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003472:	429a      	cmp	r2, r3
 8003474:	d1ef      	bne.n	8003456 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	373c      	adds	r7, #60	; 0x3c
 800347c:	46bd      	mov	sp, r7
 800347e:	bd90      	pop	{r4, r7, pc}
 8003480:	080082ac 	.word	0x080082ac
 8003484:	080082bc 	.word	0x080082bc
 8003488:	58004000 	.word	0x58004000

0800348c <LL_RCC_LSE_IsEnabled>:
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003490:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <LL_RCC_LSE_IsEnabled+0x18>
 80034a0:	2301      	movs	r3, #1
 80034a2:	e000      	b.n	80034a6 <LL_RCC_LSE_IsEnabled+0x1a>
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <LL_RCC_LSE_IsReady>:
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80034b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d101      	bne.n	80034c8 <LL_RCC_LSE_IsReady+0x18>
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <LL_RCC_LSE_IsReady+0x1a>
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <LL_RCC_SetRFWKPClockSource>:
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80034dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <LL_RCC_SetSMPSClockSource>:
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	f023 0203 	bic.w	r2, r3, #3
 8003512:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4313      	orrs	r3, r2
 800351a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <LL_RCC_SetSMPSPrescaler>:
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800353a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4313      	orrs	r3, r2
 8003542:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <LL_RCC_SetUSARTClockSource>:
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003560:	f023 0203 	bic.w	r2, r3, #3
 8003564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <LL_RCC_SetLPUARTClockSource>:
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003590:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <LL_RCC_SetI2CClockSource>:
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80035b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	091b      	lsrs	r3, r3, #4
 80035bc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80035c0:	43db      	mvns	r3, r3
 80035c2:	401a      	ands	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80035cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <LL_RCC_SetLPTIMClockSource>:
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80035ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	0c1b      	lsrs	r3, r3, #16
 80035f6:	041b      	lsls	r3, r3, #16
 80035f8:	43db      	mvns	r3, r3
 80035fa:	401a      	ands	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	041b      	lsls	r3, r3, #16
 8003600:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003604:	4313      	orrs	r3, r2
 8003606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <LL_RCC_SetRNGClockSource>:
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800361e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003626:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800362a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4313      	orrs	r3, r2
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <LL_RCC_SetCLK48ClockSource>:
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800364a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003652:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003656:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <LL_RCC_SetADCClockSource>:
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003682:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <LL_RCC_SetRTCClockSource>:
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80036a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <LL_RCC_GetRTCClockSource>:
{
 80036c6:	b480      	push	{r7}
 80036c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80036ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <LL_RCC_ForceBackupDomainReset>:
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80036e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003702:	b480      	push	{r7}
 8003704:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800371a:	bf00      	nop
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800372c:	2300      	movs	r3, #0
 800372e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003730:	2300      	movs	r3, #0
 8003732:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800373c:	2b00      	cmp	r3, #0
 800373e:	d046      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003740:	f7ff ffc1 	bl	80036c6 <LL_RCC_GetRTCClockSource>
 8003744:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	429a      	cmp	r2, r3
 800374e:	d03c      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003750:	f7fe fcfa 	bl	8002148 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d105      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff ff9b 	bl	800369a <LL_RCC_SetRTCClockSource>
 8003764:	e02e      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003770:	f7ff ffb6 	bl	80036e0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003774:	f7ff ffc5 	bl	8003702 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003786:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003790:	f7ff fe7c 	bl	800348c <LL_RCC_LSE_IsEnabled>
 8003794:	4603      	mov	r3, r0
 8003796:	2b01      	cmp	r3, #1
 8003798:	d114      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800379a:	f7fd ffb3 	bl	8001704 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80037a0:	e00b      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a2:	f7fd ffaf 	bl	8001704 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d902      	bls.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	77fb      	strb	r3, [r7, #31]
              break;
 80037b8:	e004      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 80037ba:	f7ff fe79 	bl	80034b0 <LL_RCC_LSE_IsReady>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d1ee      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80037c4:	7ffb      	ldrb	r3, [r7, #31]
 80037c6:	77bb      	strb	r3, [r7, #30]
 80037c8:	e001      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ca:	7ffb      	ldrb	r3, [r7, #31]
 80037cc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d004      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff feb6 	bl	8003550 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d004      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff fec1 	bl	800357c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d004      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff fee9 	bl	80035e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d004      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff fede 	bl	80035e2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b00      	cmp	r3, #0
 8003830:	d004      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff feb6 	bl	80035a8 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003844:	2b00      	cmp	r3, #0
 8003846:	d02b      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003850:	d008      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800385a:	d003      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d105      	bne.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff fed4 	bl	8003616 <LL_RCC_SetRNGClockSource>
 800386e:	e00a      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	2000      	movs	r0, #0
 800387c:	f7ff fecb 	bl	8003616 <LL_RCC_SetRNGClockSource>
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f7ff fede 	bl	8003642 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800388e:	d107      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800389a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d011      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fedc 	bl	800366e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038be:	d107      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80038c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ce:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d004      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7ff fdf7 	bl	80034d4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7ff fe16 	bl	8003528 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fdfd 	bl	8003500 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003906:	7fbb      	ldrb	r3, [r7, #30]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3720      	adds	r7, #32
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e090      	b.n	8003a44 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fd fc8c 	bl	8001254 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2202      	movs	r2, #2
 8003940:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	22ca      	movs	r2, #202	; 0xca
 800394a:	625a      	str	r2, [r3, #36]	; 0x24
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2253      	movs	r2, #83	; 0x53
 8003952:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f89f 	bl	8003a98 <RTC_EnterInitMode>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d009      	beq.n	8003974 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	22ff      	movs	r2, #255	; 0xff
 8003966:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2204      	movs	r2, #4
 800396c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e067      	b.n	8003a44 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6812      	ldr	r2, [r2, #0]
 800397e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003986:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6899      	ldr	r1, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	431a      	orrs	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	431a      	orrs	r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68d2      	ldr	r2, [r2, #12]
 80039ae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6919      	ldr	r1, [r3, #16]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	041a      	lsls	r2, r3, #16
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039d2:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0202 	bic.w	r2, r2, #2
 80039e2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69da      	ldr	r2, [r3, #28]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 0320 	and.w	r3, r3, #32
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d113      	bne.n	8003a32 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f81e 	bl	8003a4c <HAL_RTC_WaitForSynchro>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00d      	beq.n	8003a32 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	22ff      	movs	r2, #255	; 0xff
 8003a1c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2204      	movs	r2, #4
 8003a22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e008      	b.n	8003a44 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	22ff      	movs	r2, #255	; 0xff
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 8003a42:	2300      	movs	r3, #0
  }
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3708      	adds	r7, #8
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68da      	ldr	r2, [r3, #12]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a62:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003a64:	f7fd fe4e 	bl	8001704 <HAL_GetTick>
 8003a68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a6a:	e009      	b.n	8003a80 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a6c:	f7fd fe4a 	bl	8001704 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a7a:	d901      	bls.n	8003a80 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e007      	b.n	8003a90 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0ee      	beq.n	8003a6c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d119      	bne.n	8003ae2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003ab8:	f7fd fe24 	bl	8001704 <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003abe:	e009      	b.n	8003ad4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003ac0:	f7fd fe20 	bl	8001704 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ace:	d901      	bls.n	8003ad4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e007      	b.n	8003ae4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0ee      	beq.n	8003ac0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b086      	sub	sp, #24
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e0a8      	b.n	8003c58 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2202      	movs	r2, #2
 8003b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	22ca      	movs	r2, #202	; 0xca
 8003b1c:	625a      	str	r2, [r3, #36]	; 0x24
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2253      	movs	r2, #83	; 0x53
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d020      	beq.n	8003b76 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8003b34:	f7fd fde6 	bl	8001704 <HAL_GetTick>
 8003b38:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003b3a:	e015      	b.n	8003b68 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003b3c:	f7fd fde2 	bl	8001704 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b4a:	d90d      	bls.n	8003b68 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	22ff      	movs	r2, #255	; 0xff
 8003b52:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2203      	movs	r2, #3
 8003b58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e077      	b.n	8003c58 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f003 0304 	and.w	r3, r3, #4
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1e2      	bne.n	8003b3c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b84:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003b96:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003b98:	f7fd fdb4 	bl	8001704 <HAL_GetTick>
 8003b9c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003b9e:	e015      	b.n	8003bcc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ba0:	f7fd fdb0 	bl	8001704 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bae:	d90d      	bls.n	8003bcc <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	22ff      	movs	r2, #255	; 0xff
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2203      	movs	r2, #3
 8003bbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e045      	b.n	8003c58 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0e2      	beq.n	8003ba0 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0207 	bic.w	r2, r2, #7
 8003bf0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6899      	ldr	r1, [r3, #8]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003c02:	4b17      	ldr	r3, [pc, #92]	; (8003c60 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003c04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c08:	4a15      	ldr	r2, [pc, #84]	; (8003c60 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003c0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c0e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8003c12:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003c18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c1c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c2c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c3c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	22ff      	movs	r2, #255	; 0xff
 8003c44:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	58000800 	.word	0x58000800

08003c64 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e04d      	b.n	8003d16 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2202      	movs	r2, #2
 8003c86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	22ca      	movs	r2, #202	; 0xca
 8003c90:	625a      	str	r2, [r3, #36]	; 0x24
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2253      	movs	r2, #83	; 0x53
 8003c98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca8:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cb8:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8003cba:	f7fd fd23 	bl	8001704 <HAL_GetTick>
 8003cbe:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003cc0:	e015      	b.n	8003cee <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003cc2:	f7fd fd1f 	bl	8001704 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cd0:	d90d      	bls.n	8003cee <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	22ff      	movs	r2, #255	; 0xff
 8003cd8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2203      	movs	r2, #3
 8003cde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e013      	b.n	8003d16 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0e2      	beq.n	8003cc2 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	22ff      	movs	r2, #255	; 0xff
 8003d02:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00b      	beq.n	8003d4e <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fd f9c6 	bl	80010c8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003d4c:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8003d50:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d54:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	58000800 	.word	0x58000800

08003d6c <LL_RCC_GetUSARTClockSource>:
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4013      	ands	r3, r2
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_RCC_GetLPUARTClockSource>:
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4013      	ands	r3, r2
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e042      	b.n	8003e44 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d106      	bne.n	8003dd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7fd fa73 	bl	80012bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2224      	movs	r2, #36	; 0x24
 8003dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0201 	bic.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f8c2 	bl	8003f78 <UART_SetConfig>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e022      	b.n	8003e44 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 fadc 	bl	80043c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fb63 	bl	8004508 <UART_CheckIdleState>
 8003e42:	4603      	mov	r3, r0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08a      	sub	sp, #40	; 0x28
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	f040 8083 	bne.w	8003f6e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <HAL_UART_Transmit+0x28>
 8003e6e:	88fb      	ldrh	r3, [r7, #6]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e07b      	b.n	8003f70 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_UART_Transmit+0x3a>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e074      	b.n	8003f70 <HAL_UART_Transmit+0x124>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2221      	movs	r2, #33	; 0x21
 8003e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e9e:	f7fd fc31 	bl	8001704 <HAL_GetTick>
 8003ea2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	88fa      	ldrh	r2, [r7, #6]
 8003ea8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	88fa      	ldrh	r2, [r7, #6]
 8003eb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ebc:	d108      	bne.n	8003ed0 <HAL_UART_Transmit+0x84>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d104      	bne.n	8003ed0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	e003      	b.n	8003ed8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003ee0:	e02c      	b.n	8003f3c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	9300      	str	r3, [sp, #0]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	2180      	movs	r1, #128	; 0x80
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 fb56 	bl	800459e <UART_WaitOnFlagUntilTimeout>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e039      	b.n	8003f70 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10b      	bne.n	8003f1a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	461a      	mov	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f10:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	3302      	adds	r3, #2
 8003f16:	61bb      	str	r3, [r7, #24]
 8003f18:	e007      	b.n	8003f2a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	781a      	ldrb	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	3301      	adds	r3, #1
 8003f28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d1cc      	bne.n	8003ee2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2140      	movs	r1, #64	; 0x40
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 fb23 	bl	800459e <UART_WaitOnFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e006      	b.n	8003f70 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e000      	b.n	8003f70 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003f6e:	2302      	movs	r3, #2
  }
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3720      	adds	r7, #32
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f7c:	b08c      	sub	sp, #48	; 0x30
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	431a      	orrs	r2, r3
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	431a      	orrs	r2, r3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4baf      	ldr	r3, [pc, #700]	; (8004264 <UART_SetConfig+0x2ec>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	6812      	ldr	r2, [r2, #0]
 8003fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4aa4      	ldr	r2, [pc, #656]	; (8004268 <UART_SetConfig+0x2f0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d004      	beq.n	8003fe4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003fee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	f023 010f 	bic.w	r1, r3, #15
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a95      	ldr	r2, [pc, #596]	; (800426c <UART_SetConfig+0x2f4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d125      	bne.n	8004068 <UART_SetConfig+0xf0>
 800401c:	2003      	movs	r0, #3
 800401e:	f7ff fea5 	bl	8003d6c <LL_RCC_GetUSARTClockSource>
 8004022:	4603      	mov	r3, r0
 8004024:	2b03      	cmp	r3, #3
 8004026:	d81b      	bhi.n	8004060 <UART_SetConfig+0xe8>
 8004028:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <UART_SetConfig+0xb8>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004041 	.word	0x08004041
 8004034:	08004051 	.word	0x08004051
 8004038:	08004049 	.word	0x08004049
 800403c:	08004059 	.word	0x08004059
 8004040:	2301      	movs	r3, #1
 8004042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004046:	e042      	b.n	80040ce <UART_SetConfig+0x156>
 8004048:	2302      	movs	r3, #2
 800404a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800404e:	e03e      	b.n	80040ce <UART_SetConfig+0x156>
 8004050:	2304      	movs	r3, #4
 8004052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004056:	e03a      	b.n	80040ce <UART_SetConfig+0x156>
 8004058:	2308      	movs	r3, #8
 800405a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800405e:	e036      	b.n	80040ce <UART_SetConfig+0x156>
 8004060:	2310      	movs	r3, #16
 8004062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004066:	e032      	b.n	80040ce <UART_SetConfig+0x156>
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a7e      	ldr	r2, [pc, #504]	; (8004268 <UART_SetConfig+0x2f0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d12a      	bne.n	80040c8 <UART_SetConfig+0x150>
 8004072:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004076:	f7ff fe89 	bl	8003d8c <LL_RCC_GetLPUARTClockSource>
 800407a:	4603      	mov	r3, r0
 800407c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004080:	d01a      	beq.n	80040b8 <UART_SetConfig+0x140>
 8004082:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004086:	d81b      	bhi.n	80040c0 <UART_SetConfig+0x148>
 8004088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800408c:	d00c      	beq.n	80040a8 <UART_SetConfig+0x130>
 800408e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004092:	d815      	bhi.n	80040c0 <UART_SetConfig+0x148>
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <UART_SetConfig+0x128>
 8004098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409c:	d008      	beq.n	80040b0 <UART_SetConfig+0x138>
 800409e:	e00f      	b.n	80040c0 <UART_SetConfig+0x148>
 80040a0:	2300      	movs	r3, #0
 80040a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040a6:	e012      	b.n	80040ce <UART_SetConfig+0x156>
 80040a8:	2302      	movs	r3, #2
 80040aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ae:	e00e      	b.n	80040ce <UART_SetConfig+0x156>
 80040b0:	2304      	movs	r3, #4
 80040b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040b6:	e00a      	b.n	80040ce <UART_SetConfig+0x156>
 80040b8:	2308      	movs	r3, #8
 80040ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040be:	e006      	b.n	80040ce <UART_SetConfig+0x156>
 80040c0:	2310      	movs	r3, #16
 80040c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040c6:	e002      	b.n	80040ce <UART_SetConfig+0x156>
 80040c8:	2310      	movs	r3, #16
 80040ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a65      	ldr	r2, [pc, #404]	; (8004268 <UART_SetConfig+0x2f0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	f040 8097 	bne.w	8004208 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d823      	bhi.n	800412a <UART_SetConfig+0x1b2>
 80040e2:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <UART_SetConfig+0x170>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	0800410d 	.word	0x0800410d
 80040ec:	0800412b 	.word	0x0800412b
 80040f0:	08004115 	.word	0x08004115
 80040f4:	0800412b 	.word	0x0800412b
 80040f8:	0800411b 	.word	0x0800411b
 80040fc:	0800412b 	.word	0x0800412b
 8004100:	0800412b 	.word	0x0800412b
 8004104:	0800412b 	.word	0x0800412b
 8004108:	08004123 	.word	0x08004123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800410c:	f7ff f908 	bl	8003320 <HAL_RCC_GetPCLK1Freq>
 8004110:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004112:	e010      	b.n	8004136 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004114:	4b56      	ldr	r3, [pc, #344]	; (8004270 <UART_SetConfig+0x2f8>)
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004118:	e00d      	b.n	8004136 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800411a:	f7ff f881 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 800411e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004120:	e009      	b.n	8004136 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004126:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004128:	e005      	b.n	8004136 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004134:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 812a 	beq.w	8004392 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	4a4c      	ldr	r2, [pc, #304]	; (8004274 <UART_SetConfig+0x2fc>)
 8004144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004148:	461a      	mov	r2, r3
 800414a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004150:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	4413      	add	r3, r2
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	429a      	cmp	r2, r3
 8004160:	d305      	bcc.n	800416e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	429a      	cmp	r2, r3
 800416c:	d903      	bls.n	8004176 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004174:	e10d      	b.n	8004392 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	2200      	movs	r2, #0
 800417a:	60bb      	str	r3, [r7, #8]
 800417c:	60fa      	str	r2, [r7, #12]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	4a3c      	ldr	r2, [pc, #240]	; (8004274 <UART_SetConfig+0x2fc>)
 8004184:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004188:	b29b      	uxth	r3, r3
 800418a:	2200      	movs	r2, #0
 800418c:	603b      	str	r3, [r7, #0]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004194:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004198:	f7fc f84a 	bl	8000230 <__aeabi_uldivmod>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4610      	mov	r0, r2
 80041a2:	4619      	mov	r1, r3
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	020b      	lsls	r3, r1, #8
 80041ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80041b2:	0202      	lsls	r2, r0, #8
 80041b4:	6979      	ldr	r1, [r7, #20]
 80041b6:	6849      	ldr	r1, [r1, #4]
 80041b8:	0849      	lsrs	r1, r1, #1
 80041ba:	2000      	movs	r0, #0
 80041bc:	460c      	mov	r4, r1
 80041be:	4605      	mov	r5, r0
 80041c0:	eb12 0804 	adds.w	r8, r2, r4
 80041c4:	eb43 0905 	adc.w	r9, r3, r5
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	469a      	mov	sl, r3
 80041d0:	4693      	mov	fp, r2
 80041d2:	4652      	mov	r2, sl
 80041d4:	465b      	mov	r3, fp
 80041d6:	4640      	mov	r0, r8
 80041d8:	4649      	mov	r1, r9
 80041da:	f7fc f829 	bl	8000230 <__aeabi_uldivmod>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4613      	mov	r3, r2
 80041e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041e6:	6a3b      	ldr	r3, [r7, #32]
 80041e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ec:	d308      	bcc.n	8004200 <UART_SetConfig+0x288>
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041f4:	d204      	bcs.n	8004200 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6a3a      	ldr	r2, [r7, #32]
 80041fc:	60da      	str	r2, [r3, #12]
 80041fe:	e0c8      	b.n	8004392 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004206:	e0c4      	b.n	8004392 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	69db      	ldr	r3, [r3, #28]
 800420c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004210:	d16d      	bne.n	80042ee <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004212:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004216:	3b01      	subs	r3, #1
 8004218:	2b07      	cmp	r3, #7
 800421a:	d82d      	bhi.n	8004278 <UART_SetConfig+0x300>
 800421c:	a201      	add	r2, pc, #4	; (adr r2, 8004224 <UART_SetConfig+0x2ac>)
 800421e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004222:	bf00      	nop
 8004224:	08004245 	.word	0x08004245
 8004228:	0800424d 	.word	0x0800424d
 800422c:	08004279 	.word	0x08004279
 8004230:	08004253 	.word	0x08004253
 8004234:	08004279 	.word	0x08004279
 8004238:	08004279 	.word	0x08004279
 800423c:	08004279 	.word	0x08004279
 8004240:	0800425b 	.word	0x0800425b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004244:	f7ff f882 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 8004248:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800424a:	e01b      	b.n	8004284 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <UART_SetConfig+0x2f8>)
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004250:	e018      	b.n	8004284 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004252:	f7fe ffe5 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 8004256:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004258:	e014      	b.n	8004284 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800425a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800425e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004260:	e010      	b.n	8004284 <UART_SetConfig+0x30c>
 8004262:	bf00      	nop
 8004264:	cfff69f3 	.word	0xcfff69f3
 8004268:	40008000 	.word	0x40008000
 800426c:	40013800 	.word	0x40013800
 8004270:	00f42400 	.word	0x00f42400
 8004274:	08008518 	.word	0x08008518
      default:
        pclk = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004282:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 8083 	beq.w	8004392 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	4a4a      	ldr	r2, [pc, #296]	; (80043bc <UART_SetConfig+0x444>)
 8004292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004296:	461a      	mov	r2, r3
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	fbb3 f3f2 	udiv	r3, r3, r2
 800429e:	005a      	lsls	r2, r3, #1
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	085b      	lsrs	r3, r3, #1
 80042a6:	441a      	add	r2, r3
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	2b0f      	cmp	r3, #15
 80042b6:	d916      	bls.n	80042e6 <UART_SetConfig+0x36e>
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042be:	d212      	bcs.n	80042e6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	f023 030f 	bic.w	r3, r3, #15
 80042c8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	085b      	lsrs	r3, r3, #1
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	8bfb      	ldrh	r3, [r7, #30]
 80042d8:	4313      	orrs	r3, r2
 80042da:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	8bfa      	ldrh	r2, [r7, #30]
 80042e2:	60da      	str	r2, [r3, #12]
 80042e4:	e055      	b.n	8004392 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80042ec:	e051      	b.n	8004392 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042f2:	3b01      	subs	r3, #1
 80042f4:	2b07      	cmp	r3, #7
 80042f6:	d822      	bhi.n	800433e <UART_SetConfig+0x3c6>
 80042f8:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <UART_SetConfig+0x388>)
 80042fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fe:	bf00      	nop
 8004300:	08004321 	.word	0x08004321
 8004304:	08004329 	.word	0x08004329
 8004308:	0800433f 	.word	0x0800433f
 800430c:	0800432f 	.word	0x0800432f
 8004310:	0800433f 	.word	0x0800433f
 8004314:	0800433f 	.word	0x0800433f
 8004318:	0800433f 	.word	0x0800433f
 800431c:	08004337 	.word	0x08004337
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004320:	f7ff f814 	bl	800334c <HAL_RCC_GetPCLK2Freq>
 8004324:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004326:	e010      	b.n	800434a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004328:	4b25      	ldr	r3, [pc, #148]	; (80043c0 <UART_SetConfig+0x448>)
 800432a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800432c:	e00d      	b.n	800434a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800432e:	f7fe ff77 	bl	8003220 <HAL_RCC_GetSysClockFreq>
 8004332:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004334:	e009      	b.n	800434a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800433c:	e005      	b.n	800434a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004348:	bf00      	nop
    }

    if (pclk != 0U)
 800434a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434c:	2b00      	cmp	r3, #0
 800434e:	d020      	beq.n	8004392 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004354:	4a19      	ldr	r2, [pc, #100]	; (80043bc <UART_SetConfig+0x444>)
 8004356:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800435a:	461a      	mov	r2, r3
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	085b      	lsrs	r3, r3, #1
 8004368:	441a      	add	r2, r3
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004372:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	2b0f      	cmp	r3, #15
 8004378:	d908      	bls.n	800438c <UART_SetConfig+0x414>
 800437a:	6a3b      	ldr	r3, [r7, #32]
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004380:	d204      	bcs.n	800438c <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6a3a      	ldr	r2, [r7, #32]
 8004388:	60da      	str	r2, [r3, #12]
 800438a:	e002      	b.n	8004392 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2201      	movs	r2, #1
 8004396:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2201      	movs	r2, #1
 800439e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2200      	movs	r2, #0
 80043a6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2200      	movs	r2, #0
 80043ac:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80043ae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3730      	adds	r7, #48	; 0x30
 80043b6:	46bd      	mov	sp, r7
 80043b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043bc:	08008518 	.word	0x08008518
 80043c0:	00f42400 	.word	0x00f42400

080043c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004414:	f003 0304 	and.w	r3, r3, #4
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00a      	beq.n	8004432 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	f003 0310 	and.w	r3, r3, #16
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00a      	beq.n	8004476 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01a      	beq.n	80044da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044c2:	d10a      	bne.n	80044da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	605a      	str	r2, [r3, #4]
  }
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af02      	add	r7, sp, #8
 800450e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004518:	f7fd f8f4 	bl	8001704 <HAL_GetTick>
 800451c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b08      	cmp	r3, #8
 800452a:	d10e      	bne.n	800454a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800452c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f82f 	bl	800459e <UART_WaitOnFlagUntilTimeout>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e025      	b.n	8004596 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b04      	cmp	r3, #4
 8004556:	d10e      	bne.n	8004576 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f819 	bl	800459e <UART_WaitOnFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e00f      	b.n	8004596 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b09c      	sub	sp, #112	; 0x70
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	60f8      	str	r0, [r7, #12]
 80045a6:	60b9      	str	r1, [r7, #8]
 80045a8:	603b      	str	r3, [r7, #0]
 80045aa:	4613      	mov	r3, r2
 80045ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045ae:	e0a9      	b.n	8004704 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b6:	f000 80a5 	beq.w	8004704 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ba:	f7fd f8a3 	bl	8001704 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d302      	bcc.n	80045d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80045ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d140      	bne.n	8004652 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d8:	e853 3f00 	ldrex	r3, [r3]
 80045dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045e4:	667b      	str	r3, [r7, #100]	; 0x64
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045f0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80045f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045f6:	e841 2300 	strex	r3, r2, [r1]
 80045fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80045fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1e6      	bne.n	80045d0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3308      	adds	r3, #8
 8004608:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800460c:	e853 3f00 	ldrex	r3, [r3]
 8004610:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004614:	f023 0301 	bic.w	r3, r3, #1
 8004618:	663b      	str	r3, [r7, #96]	; 0x60
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	3308      	adds	r3, #8
 8004620:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004622:	64ba      	str	r2, [r7, #72]	; 0x48
 8004624:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004626:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004628:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1e5      	bne.n	8004602 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2220      	movs	r2, #32
 8004642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e069      	b.n	8004726 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d051      	beq.n	8004704 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800466a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800466e:	d149      	bne.n	8004704 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004678:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004682:	e853 3f00 	ldrex	r3, [r3]
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800468e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	461a      	mov	r2, r3
 8004696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004698:	637b      	str	r3, [r7, #52]	; 0x34
 800469a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800469e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046a0:	e841 2300 	strex	r3, r2, [r1]
 80046a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e6      	bne.n	800467a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	3308      	adds	r3, #8
 80046b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	e853 3f00 	ldrex	r3, [r3]
 80046ba:	613b      	str	r3, [r7, #16]
   return(result);
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f023 0301 	bic.w	r3, r3, #1
 80046c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3308      	adds	r3, #8
 80046ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046cc:	623a      	str	r2, [r7, #32]
 80046ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	69f9      	ldr	r1, [r7, #28]
 80046d2:	6a3a      	ldr	r2, [r7, #32]
 80046d4:	e841 2300 	strex	r3, r2, [r1]
 80046d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e5      	bne.n	80046ac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e010      	b.n	8004726 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	69da      	ldr	r2, [r3, #28]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	4013      	ands	r3, r2
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	429a      	cmp	r2, r3
 8004712:	bf0c      	ite	eq
 8004714:	2301      	moveq	r3, #1
 8004716:	2300      	movne	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	461a      	mov	r2, r3
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	429a      	cmp	r2, r3
 8004720:	f43f af46 	beq.w	80045b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3770      	adds	r7, #112	; 0x70
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800472e:	b480      	push	{r7}
 8004730:	b085      	sub	sp, #20
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_UARTEx_DisableFifoMode+0x16>
 8004740:	2302      	movs	r3, #2
 8004742:	e027      	b.n	8004794 <HAL_UARTEx_DisableFifoMode+0x66>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2224      	movs	r2, #36	; 0x24
 8004750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0201 	bic.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004772:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3714      	adds	r7, #20
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e02d      	b.n	8004814 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2224      	movs	r2, #36	; 0x24
 80047c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0201 	bic.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f84f 	bl	8004898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004830:	2302      	movs	r3, #2
 8004832:	e02d      	b.n	8004890 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2224      	movs	r2, #36	; 0x24
 8004840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0201 	bic.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f811 	bl	8004898 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d108      	bne.n	80048ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048b8:	e031      	b.n	800491e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048ba:	2308      	movs	r3, #8
 80048bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048be:	2308      	movs	r3, #8
 80048c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	0e5b      	lsrs	r3, r3, #25
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	0f5b      	lsrs	r3, r3, #29
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048e2:	7bbb      	ldrb	r3, [r7, #14]
 80048e4:	7b3a      	ldrb	r2, [r7, #12]
 80048e6:	4911      	ldr	r1, [pc, #68]	; (800492c <UARTEx_SetNbDataToProcess+0x94>)
 80048e8:	5c8a      	ldrb	r2, [r1, r2]
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80048ee:	7b3a      	ldrb	r2, [r7, #12]
 80048f0:	490f      	ldr	r1, [pc, #60]	; (8004930 <UARTEx_SetNbDataToProcess+0x98>)
 80048f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004900:	7bfb      	ldrb	r3, [r7, #15]
 8004902:	7b7a      	ldrb	r2, [r7, #13]
 8004904:	4909      	ldr	r1, [pc, #36]	; (800492c <UARTEx_SetNbDataToProcess+0x94>)
 8004906:	5c8a      	ldrb	r2, [r1, r2]
 8004908:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800490c:	7b7a      	ldrb	r2, [r7, #13]
 800490e:	4908      	ldr	r1, [pc, #32]	; (8004930 <UARTEx_SetNbDataToProcess+0x98>)
 8004910:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004912:	fb93 f3f2 	sdiv	r3, r3, r2
 8004916:	b29a      	uxth	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	08008530 	.word	0x08008530
 8004930:	08008538 	.word	0x08008538

08004934 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 8004934:	b5b0      	push	{r4, r5, r7, lr}
 8004936:	b0ce      	sub	sp, #312	; 0x138
 8004938:	af00      	add	r7, sp, #0
 800493a:	4605      	mov	r5, r0
 800493c:	460c      	mov	r4, r1
 800493e:	4610      	mov	r0, r2
 8004940:	4619      	mov	r1, r3
 8004942:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004946:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800494a:	462a      	mov	r2, r5
 800494c:	701a      	strb	r2, [r3, #0]
 800494e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004952:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004956:	4622      	mov	r2, r4
 8004958:	801a      	strh	r2, [r3, #0]
 800495a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800495e:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8004962:	4602      	mov	r2, r0
 8004964:	801a      	strh	r2, [r3, #0]
 8004966:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800496a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800496e:	460a      	mov	r2, r1
 8004970:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8004972:	f107 0310 	add.w	r3, r7, #16
 8004976:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800497a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800497e:	3308      	adds	r3, #8
 8004980:	f107 0210 	add.w	r2, r7, #16
 8004984:	4413      	add	r3, r2
 8004986:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800498a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800498e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004992:	4413      	add	r3, r2
 8004994:	3309      	adds	r3, #9
 8004996:	f107 0210 	add.w	r2, r7, #16
 800499a:	4413      	add	r3, r2
 800499c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80049a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80049a4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80049a8:	2200      	movs	r2, #0
 80049aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80049b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80049b6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80049ba:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80049be:	7812      	ldrb	r2, [r2, #0]
 80049c0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80049c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049c6:	3301      	adds	r3, #1
 80049c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80049cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80049d0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80049d4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80049d8:	8812      	ldrh	r2, [r2, #0]
 80049da:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80049de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049e2:	3302      	adds	r3, #2
 80049e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80049e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80049ec:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80049f0:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80049f4:	8812      	ldrh	r2, [r2, #0]
 80049f6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80049fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049fe:	3302      	adds	r3, #2
 8004a00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8004a04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a08:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004a0c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8004a10:	7812      	ldrb	r2, [r2, #0]
 8004a12:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004a14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a18:	3301      	adds	r3, #1
 8004a1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8004a1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a22:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8004a26:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004a28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8004a32:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a36:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004a3a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8004a3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a40:	3301      	adds	r3, #1
 8004a42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8004a46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a4a:	3308      	adds	r3, #8
 8004a4c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004a50:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fc21 	bl	800529c <Osal_MemCpy>
    index_input += Local_Name_Length;
 8004a5a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004a5e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004a62:	4413      	add	r3, r2
 8004a64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8004a68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004a6c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004a70:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004a72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a76:	3301      	adds	r3, #1
 8004a78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8004a7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004a80:	3301      	adds	r3, #1
 8004a82:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004a86:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fc06 	bl	800529c <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8004a90:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004a94:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004a98:	4413      	add	r3, r2
 8004a9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8004a9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aa2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8004aa6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004aa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004aac:	3302      	adds	r3, #2
 8004aae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8004ab2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ab6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8004aba:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8004abc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ac0:	3302      	adds	r3, #2
 8004ac2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004ac6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004aca:	2218      	movs	r2, #24
 8004acc:	2100      	movs	r1, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fbf4 	bl	80052bc <Osal_MemSet>
  rq.ogf = 0x3f;
 8004ad4:	233f      	movs	r3, #63	; 0x3f
 8004ad6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8004ada:	2383      	movs	r3, #131	; 0x83
 8004adc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004ae0:	f107 0310 	add.w	r3, r7, #16
 8004ae4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004ae8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004aec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004af0:	f107 030f 	add.w	r3, r7, #15
 8004af4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004af8:	2301      	movs	r3, #1
 8004afa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004afe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b02:	2100      	movs	r1, #0
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 fe4f 	bl	80057a8 <hci_send_req>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	da01      	bge.n	8004b14 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8004b10:	23ff      	movs	r3, #255	; 0xff
 8004b12:	e004      	b.n	8004b1e <aci_gap_set_discoverable+0x1ea>
  return status;
 8004b14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004b18:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004b1c:	781b      	ldrb	r3, [r3, #0]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bdb0      	pop	{r4, r5, r7, pc}

08004b28 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8004b28:	b590      	push	{r4, r7, lr}
 8004b2a:	b0cd      	sub	sp, #308	; 0x134
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4604      	mov	r4, r0
 8004b30:	4608      	mov	r0, r1
 8004b32:	4611      	mov	r1, r2
 8004b34:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b38:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8004b3c:	6013      	str	r3, [r2, #0]
 8004b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b42:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004b46:	4622      	mov	r2, r4
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b4e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004b52:	4602      	mov	r2, r0
 8004b54:	701a      	strb	r2, [r3, #0]
 8004b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b5a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8004b5e:	460a      	mov	r2, r1
 8004b60:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8004b62:	f107 0310 	add.w	r3, r7, #16
 8004b66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004b6a:	f107 0308 	add.w	r3, r7, #8
 8004b6e:	2207      	movs	r2, #7
 8004b70:	2100      	movs	r1, #0
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fba2 	bl	80052bc <Osal_MemSet>
  int index_input = 0;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8004b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b82:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b86:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004b8a:	7812      	ldrb	r2, [r2, #0]
 8004b8c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004b8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b92:	3301      	adds	r3, #1
 8004b94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8004b98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b9c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ba0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004ba4:	7812      	ldrb	r2, [r2, #0]
 8004ba6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004ba8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004bac:	3301      	adds	r3, #1
 8004bae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8004bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bb6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004bba:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8004bbe:	7812      	ldrb	r2, [r2, #0]
 8004bc0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004bc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004bcc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004bd0:	2218      	movs	r2, #24
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fb71 	bl	80052bc <Osal_MemSet>
  rq.ogf = 0x3f;
 8004bda:	233f      	movs	r3, #63	; 0x3f
 8004bdc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8004be0:	238a      	movs	r3, #138	; 0x8a
 8004be2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004be6:	f107 0310 	add.w	r3, r7, #16
 8004bea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004bee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004bf2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004bf6:	f107 0308 	add.w	r3, r7, #8
 8004bfa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8004bfe:	2307      	movs	r3, #7
 8004c00:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004c04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c08:	2100      	movs	r1, #0
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fdcc 	bl	80057a8 <hci_send_req>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	da01      	bge.n	8004c1a <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8004c16:	23ff      	movs	r3, #255	; 0xff
 8004c18:	e02e      	b.n	8004c78 <aci_gap_init+0x150>
  if ( resp.Status )
 8004c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <aci_gap_init+0x10c>
    return resp.Status;
 8004c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c2c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	e021      	b.n	8004c78 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8004c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c38:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c3c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004c40:	b29a      	uxth	r2, r3
 8004c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8004c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c56:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004c60:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8004c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c66:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c6a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004c74:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd90      	pop	{r4, r7, pc}

08004c82 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b0cc      	sub	sp, #304	; 0x130
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	4602      	mov	r2, r0
 8004c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c92:	6019      	str	r1, [r3, #0]
 8004c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c98:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004c9c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8004c9e:	f107 0310 	add.w	r3, r7, #16
 8004ca2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004caa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004cae:	2200      	movs	r2, #0
 8004cb0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8004cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cbc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004cc0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004cc4:	7812      	ldrb	r2, [r2, #0]
 8004cc6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004cc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ccc:	3301      	adds	r3, #1
 8004cce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8004cd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd6:	1c58      	adds	r0, r3, #1
 8004cd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cdc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004ce0:	781a      	ldrb	r2, [r3, #0]
 8004ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cea:	6819      	ldr	r1, [r3, #0]
 8004cec:	f000 fad6 	bl	800529c <Osal_MemCpy>
  index_input += AdvDataLen;
 8004cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004cfe:	4413      	add	r3, r2
 8004d00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004d04:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d08:	2218      	movs	r2, #24
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fad5 	bl	80052bc <Osal_MemSet>
  rq.ogf = 0x3f;
 8004d12:	233f      	movs	r3, #63	; 0x3f
 8004d14:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8004d18:	238e      	movs	r3, #142	; 0x8e
 8004d1a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004d1e:	f107 0310 	add.w	r3, r7, #16
 8004d22:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004d26:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d2a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004d2e:	f107 030f 	add.w	r3, r7, #15
 8004d32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004d3c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d40:	2100      	movs	r1, #0
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fd30 	bl	80057a8 <hci_send_req>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	da01      	bge.n	8004d52 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8004d4e:	23ff      	movs	r3, #255	; 0xff
 8004d50:	e004      	b.n	8004d5c <aci_gap_update_adv_data+0xda>
  return status;
 8004d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d56:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004d5a:	781b      	ldrb	r3, [r3, #0]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <aci_gap_delete_ad_type>:

tBleStatus aci_gap_delete_ad_type( uint8_t ADType )
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b0cc      	sub	sp, #304	; 0x130
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d72:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004d76:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_delete_ad_type_cp0 *cp0 = (aci_gap_delete_ad_type_cp0*)(cmd_buffer);
 8004d78:	f107 0310 	add.w	r3, r7, #16
 8004d7c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d84:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004d88:	2200      	movs	r2, #0
 8004d8a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ADType = ADType;
 8004d92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d96:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d9a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004d9e:	7812      	ldrb	r2, [r2, #0]
 8004da0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004da2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004da6:	3301      	adds	r3, #1
 8004da8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004dac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004db0:	2218      	movs	r2, #24
 8004db2:	2100      	movs	r1, #0
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fa81 	bl	80052bc <Osal_MemSet>
  rq.ogf = 0x3f;
 8004dba:	233f      	movs	r3, #63	; 0x3f
 8004dbc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08f;
 8004dc0:	238f      	movs	r3, #143	; 0x8f
 8004dc2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004dc6:	f107 0310 	add.w	r3, r7, #16
 8004dca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004dce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004dd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004dd6:	f107 030f 	add.w	r3, r7, #15
 8004dda:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004dde:	2301      	movs	r3, #1
 8004de0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004de4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004de8:	2100      	movs	r1, #0
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fcdc 	bl	80057a8 <hci_send_req>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	da01      	bge.n	8004dfa <aci_gap_delete_ad_type+0x94>
    return BLE_STATUS_TIMEOUT;
 8004df6:	23ff      	movs	r3, #255	; 0xff
 8004df8:	e004      	b.n	8004e04 <aci_gap_delete_ad_type+0x9e>
  return status;
 8004dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dfe:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004e02:	781b      	ldrb	r3, [r3, #0]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b088      	sub	sp, #32
 8004e12:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004e18:	f107 0308 	add.w	r3, r7, #8
 8004e1c:	2218      	movs	r2, #24
 8004e1e:	2100      	movs	r1, #0
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fa4b 	bl	80052bc <Osal_MemSet>
  rq.ogf = 0x3f;
 8004e26:	233f      	movs	r3, #63	; 0x3f
 8004e28:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8004e2a:	f240 1301 	movw	r3, #257	; 0x101
 8004e2e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004e30:	1dfb      	adds	r3, r7, #7
 8004e32:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004e34:	2301      	movs	r3, #1
 8004e36:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004e38:	f107 0308 	add.w	r3, r7, #8
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 fcb2 	bl	80057a8 <hci_send_req>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	da01      	bge.n	8004e4e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8004e4a:	23ff      	movs	r3, #255	; 0xff
 8004e4c:	e000      	b.n	8004e50 <aci_gatt_init+0x42>
  return status;
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3720      	adds	r7, #32
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8004e58:	b5b0      	push	{r4, r5, r7, lr}
 8004e5a:	b0cc      	sub	sp, #304	; 0x130
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	4605      	mov	r5, r0
 8004e60:	460c      	mov	r4, r1
 8004e62:	4610      	mov	r0, r2
 8004e64:	4619      	mov	r1, r3
 8004e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e6a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004e6e:	462a      	mov	r2, r5
 8004e70:	801a      	strh	r2, [r3, #0]
 8004e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e7a:	4622      	mov	r2, r4
 8004e7c:	801a      	strh	r2, [r3, #0]
 8004e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e82:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8004e86:	4602      	mov	r2, r0
 8004e88:	701a      	strb	r2, [r3, #0]
 8004e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e8e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004e92:	460a      	mov	r2, r1
 8004e94:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8004e96:	f107 0310 	add.w	r3, r7, #16
 8004e9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8004eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eb4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004eb8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004ebc:	8812      	ldrh	r2, [r2, #0]
 8004ebe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004ec0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ec4:	3302      	adds	r3, #2
 8004ec6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8004eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ece:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ed2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004ed6:	8812      	ldrh	r2, [r2, #0]
 8004ed8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8004eda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ede:	3302      	adds	r3, #2
 8004ee0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8004ee4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ee8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004eec:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8004ef0:	7812      	ldrb	r2, [r2, #0]
 8004ef2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004ef4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ef8:	3301      	adds	r3, #1
 8004efa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8004efe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f06:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8004f0a:	7812      	ldrb	r2, [r2, #0]
 8004f0c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004f0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f12:	3301      	adds	r3, #1
 8004f14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8004f18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f1c:	1d98      	adds	r0, r3, #6
 8004f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f22:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004f2e:	f000 f9b5 	bl	800529c <Osal_MemCpy>
  index_input += Char_Value_Length;
 8004f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f36:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004f40:	4413      	add	r3, r2
 8004f42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004f46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f4a:	2218      	movs	r2, #24
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 f9b4 	bl	80052bc <Osal_MemSet>
  rq.ogf = 0x3f;
 8004f54:	233f      	movs	r3, #63	; 0x3f
 8004f56:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8004f5a:	f44f 7383 	mov.w	r3, #262	; 0x106
 8004f5e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004f62:	f107 0310 	add.w	r3, r7, #16
 8004f66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004f6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004f72:	f107 030f 	add.w	r3, r7, #15
 8004f76:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004f80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f84:	2100      	movs	r1, #0
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 fc0e 	bl	80057a8 <hci_send_req>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	da01      	bge.n	8004f96 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8004f92:	23ff      	movs	r3, #255	; 0xff
 8004f94:	e004      	b.n	8004fa0 <aci_gatt_update_char_value+0x148>
  return status;
 8004f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f9a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004f9e:	781b      	ldrb	r3, [r3, #0]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bdb0      	pop	{r4, r5, r7, pc}

08004faa <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b0cc      	sub	sp, #304	; 0x130
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fbe:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004fce:	460a      	mov	r2, r1
 8004fd0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8004fd2:	f107 0310 	add.w	r3, r7, #16
 8004fd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fde:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8004fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ff0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004ff4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004ff8:	7812      	ldrb	r2, [r2, #0]
 8004ffa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004ffc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005000:	3301      	adds	r3, #1
 8005002:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8005006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800500a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800500e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005012:	7812      	ldrb	r2, [r2, #0]
 8005014:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005016:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800501a:	3301      	adds	r3, #1
 800501c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8005020:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005024:	1c98      	adds	r0, r3, #2
 8005026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800502e:	781a      	ldrb	r2, [r3, #0]
 8005030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005034:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005038:	6819      	ldr	r1, [r3, #0]
 800503a:	f000 f92f 	bl	800529c <Osal_MemCpy>
  index_input += Length;
 800503e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005042:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800504c:	4413      	add	r3, r2
 800504e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005052:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005056:	2218      	movs	r2, #24
 8005058:	2100      	movs	r1, #0
 800505a:	4618      	mov	r0, r3
 800505c:	f000 f92e 	bl	80052bc <Osal_MemSet>
  rq.ogf = 0x3f;
 8005060:	233f      	movs	r3, #63	; 0x3f
 8005062:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8005066:	230c      	movs	r3, #12
 8005068:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800506c:	f107 0310 	add.w	r3, r7, #16
 8005070:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005074:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005078:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800507c:	f107 030f 	add.w	r3, r7, #15
 8005080:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005084:	2301      	movs	r3, #1
 8005086:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800508a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800508e:	2100      	movs	r1, #0
 8005090:	4618      	mov	r0, r3
 8005092:	f000 fb89 	bl	80057a8 <hci_send_req>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	da01      	bge.n	80050a0 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800509c:	23ff      	movs	r3, #255	; 0xff
 800509e:	e004      	b.n	80050aa <aci_hal_write_config_data+0x100>
  return status;
 80050a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80050a8:	781b      	ldrb	r3, [r3, #0]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b0cc      	sub	sp, #304	; 0x130
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	4602      	mov	r2, r0
 80050bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80050ce:	460a      	mov	r2, r1
 80050d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80050d2:	f107 0310 	add.w	r3, r7, #16
 80050d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80050da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050de:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80050e2:	2200      	movs	r2, #0
 80050e4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80050ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050f4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80050f8:	7812      	ldrb	r2, [r2, #0]
 80050fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80050fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005100:	3301      	adds	r3, #1
 8005102:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8005106:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800510a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800510e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005112:	7812      	ldrb	r2, [r2, #0]
 8005114:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005116:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800511a:	3301      	adds	r3, #1
 800511c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005120:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005124:	2218      	movs	r2, #24
 8005126:	2100      	movs	r1, #0
 8005128:	4618      	mov	r0, r3
 800512a:	f000 f8c7 	bl	80052bc <Osal_MemSet>
  rq.ogf = 0x3f;
 800512e:	233f      	movs	r3, #63	; 0x3f
 8005130:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8005134:	230f      	movs	r3, #15
 8005136:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800513a:	f107 0310 	add.w	r3, r7, #16
 800513e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005142:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005146:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800514a:	f107 030f 	add.w	r3, r7, #15
 800514e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005152:	2301      	movs	r3, #1
 8005154:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005158:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800515c:	2100      	movs	r1, #0
 800515e:	4618      	mov	r0, r3
 8005160:	f000 fb22 	bl	80057a8 <hci_send_req>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	da01      	bge.n	800516e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800516a:	23ff      	movs	r3, #255	; 0xff
 800516c:	e004      	b.n	8005178 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800516e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005172:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005176:	781b      	ldrb	r3, [r3, #0]
}
 8005178:	4618      	mov	r0, r3
 800517a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b088      	sub	sp, #32
 8005186:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800518c:	f107 0308 	add.w	r3, r7, #8
 8005190:	2218      	movs	r2, #24
 8005192:	2100      	movs	r1, #0
 8005194:	4618      	mov	r0, r3
 8005196:	f000 f891 	bl	80052bc <Osal_MemSet>
  rq.ogf = 0x03;
 800519a:	2303      	movs	r3, #3
 800519c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800519e:	2303      	movs	r3, #3
 80051a0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80051a2:	1dfb      	adds	r3, r7, #7
 80051a4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80051a6:	2301      	movs	r3, #1
 80051a8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80051aa:	f107 0308 	add.w	r3, r7, #8
 80051ae:	2100      	movs	r1, #0
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 faf9 	bl	80057a8 <hci_send_req>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	da01      	bge.n	80051c0 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80051bc:	23ff      	movs	r3, #255	; 0xff
 80051be:	e000      	b.n	80051c2 <hci_reset+0x40>
  return status;
 80051c0:	79fb      	ldrb	r3, [r7, #7]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3720      	adds	r7, #32
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <hci_le_set_scan_response_data>:
  return status;
}

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b0cc      	sub	sp, #304	; 0x130
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	4602      	mov	r2, r0
 80051d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051da:	6019      	str	r1, [r3, #0]
 80051dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051e0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80051e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 80051e6:	f107 0310 	add.w	r3, r7, #16
 80051ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80051ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80051f6:	2200      	movs	r2, #0
 80051f8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80051fa:	2300      	movs	r3, #0
 80051fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 8005200:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005204:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005208:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800520c:	7812      	ldrb	r2, [r2, #0]
 800520e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005210:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005214:	3301      	adds	r3, #1
 8005216:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 800521a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800521e:	1c58      	adds	r0, r3, #1
 8005220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005228:	221f      	movs	r2, #31
 800522a:	6819      	ldr	r1, [r3, #0]
 800522c:	f000 f836 	bl	800529c <Osal_MemCpy>
  index_input += 31;
 8005230:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005234:	331f      	adds	r3, #31
 8005236:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800523a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800523e:	2218      	movs	r2, #24
 8005240:	2100      	movs	r1, #0
 8005242:	4618      	mov	r0, r3
 8005244:	f000 f83a 	bl	80052bc <Osal_MemSet>
  rq.ogf = 0x08;
 8005248:	2308      	movs	r3, #8
 800524a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 800524e:	2309      	movs	r3, #9
 8005250:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005254:	f107 0310 	add.w	r3, r7, #16
 8005258:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800525c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005260:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005264:	f107 030f 	add.w	r3, r7, #15
 8005268:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800526c:	2301      	movs	r3, #1
 800526e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005272:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005276:	2100      	movs	r1, #0
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fa95 	bl	80057a8 <hci_send_req>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	da01      	bge.n	8005288 <hci_le_set_scan_response_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8005284:	23ff      	movs	r3, #255	; 0xff
 8005286:	e004      	b.n	8005292 <hci_le_set_scan_response_data+0xc8>
  return status;
 8005288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005290:	781b      	ldrb	r3, [r3, #0]
}
 8005292:	4618      	mov	r0, r3
 8005294:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f002 f835 	bl	800731c <memcpy>
 80052b2:	4603      	mov	r3, r0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	68b9      	ldr	r1, [r7, #8]
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f002 f833 	bl	8007338 <memset>
 80052d2:	4603      	mov	r3, r0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  return;
 80052e0:	bf00      	nop
}
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80052ea:	b480      	push	{r7}
 80052ec:	af00      	add	r7, sp, #0
  return;
 80052ee:	bf00      	nop
}
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  return;
 80052fc:	bf00      	nop
}
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8005306:	b480      	push	{r7}
 8005308:	af00      	add	r7, sp, #0
  return;
 800530a:	bf00      	nop
}
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  return;
 8005318:	bf00      	nop
}
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr

08005322 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8005322:	b480      	push	{r7}
 8005324:	af00      	add	r7, sp, #0
  return;
 8005326:	bf00      	nop
}
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  return;
 8005334:	bf00      	nop
}
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800533e:	b480      	push	{r7}
 8005340:	af00      	add	r7, sp, #0
  return;
 8005342:	bf00      	nop
}
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  return;
 8005350:	bf00      	nop
}
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800535a:	b480      	push	{r7}
 800535c:	af00      	add	r7, sp, #0
  return;
 800535e:	bf00      	nop
}
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8005368:	b480      	push	{r7}
 800536a:	af00      	add	r7, sp, #0
  return;
 800536c:	bf00      	nop
}
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8005376:	b480      	push	{r7}
 8005378:	af00      	add	r7, sp, #0
  return;
 800537a:	bf00      	nop
}
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  return;
 8005388:	bf00      	nop
}
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8005392:	b480      	push	{r7}
 8005394:	af00      	add	r7, sp, #0
  return;
 8005396:	bf00      	nop
}
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80053a0:	b480      	push	{r7}
 80053a2:	af00      	add	r7, sp, #0
  return;
 80053a4:	bf00      	nop
}
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80053ae:	b480      	push	{r7}
 80053b0:	af00      	add	r7, sp, #0
  return;
 80053b2:	bf00      	nop
}
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80053bc:	b480      	push	{r7}
 80053be:	af00      	add	r7, sp, #0
  return;
 80053c0:	bf00      	nop
}
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 80053ca:	b480      	push	{r7}
 80053cc:	af00      	add	r7, sp, #0
  return;
 80053ce:	bf00      	nop
}
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80053dc:	4b04      	ldr	r3, [pc, #16]	; (80053f0 <SVCCTL_Init+0x18>)
 80053de:	2200      	movs	r2, #0
 80053e0:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80053e2:	4b04      	ldr	r3, [pc, #16]	; (80053f4 <SVCCTL_Init+0x1c>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 80053e8:	f000 f806 	bl	80053f8 <SVCCTL_SvcInit>

  return;
 80053ec:	bf00      	nop
}
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	20000124 	.word	0x20000124
 80053f4:	20000144 	.word	0x20000144

080053f8 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  BAS_Init();
 80053fc:	f7ff ff6e 	bl	80052dc <BAS_Init>

  BLS_Init();
 8005400:	f7ff ff73 	bl	80052ea <BLS_Init>

  CRS_STM_Init();
 8005404:	f7ff ff78 	bl	80052f8 <CRS_STM_Init>

  DIS_Init();
 8005408:	f7ff ff7d 	bl	8005306 <DIS_Init>

  EDS_STM_Init();
 800540c:	f7ff ff82 	bl	8005314 <EDS_STM_Init>

  HIDS_Init();
 8005410:	f7ff ff87 	bl	8005322 <HIDS_Init>

  HRS_Init();
 8005414:	f7ff ff8c 	bl	8005330 <HRS_Init>

  HTS_Init();
 8005418:	f7ff ff91 	bl	800533e <HTS_Init>

  IAS_Init();
 800541c:	f7ff ff96 	bl	800534c <IAS_Init>

  LLS_Init();
 8005420:	f7ff ff9b 	bl	800535a <LLS_Init>

  TPS_Init();
 8005424:	f7ff ffa0 	bl	8005368 <TPS_Init>

  MOTENV_STM_Init();
 8005428:	f7ff ffa5 	bl	8005376 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800542c:	f7ff ffaa 	bl	8005384 <P2PS_STM_Init>

  ZDD_STM_Init();
 8005430:	f7ff ffaf 	bl	8005392 <ZDD_STM_Init>

  OTAS_STM_Init();
 8005434:	f7ff ffb4 	bl	80053a0 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8005438:	f7ff ffc0 	bl	80053bc <BVOPUS_STM_Init>

  MESH_Init();
 800543c:	f7ff ffb7 	bl	80053ae <MESH_Init>

  SVCCTL_InitCustomSvc();
 8005440:	f7ff ffc3 	bl	80053ca <SVCCTL_InitCustomSvc>
  
  return;
 8005444:	bf00      	nop
}
 8005446:	bd80      	pop	{r7, pc}

08005448 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3301      	adds	r3, #1
 8005454:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8005456:	2300      	movs	r3, #0
 8005458:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2bff      	cmp	r3, #255	; 0xff
 8005460:	d125      	bne.n	80054ae <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	3302      	adds	r3, #2
 8005466:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005472:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005476:	d118      	bne.n	80054aa <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005478:	2300      	movs	r3, #0
 800547a:	757b      	strb	r3, [r7, #21]
 800547c:	e00d      	b.n	800549a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800547e:	7d7b      	ldrb	r3, [r7, #21]
 8005480:	4a1a      	ldr	r2, [pc, #104]	; (80054ec <SVCCTL_UserEvtRx+0xa4>)
 8005482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	4798      	blx	r3
 800548a:	4603      	mov	r3, r0
 800548c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800548e:	7dfb      	ldrb	r3, [r7, #23]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d108      	bne.n	80054a6 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005494:	7d7b      	ldrb	r3, [r7, #21]
 8005496:	3301      	adds	r3, #1
 8005498:	757b      	strb	r3, [r7, #21]
 800549a:	4b14      	ldr	r3, [pc, #80]	; (80054ec <SVCCTL_UserEvtRx+0xa4>)
 800549c:	7f1b      	ldrb	r3, [r3, #28]
 800549e:	7d7a      	ldrb	r2, [r7, #21]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d3ec      	bcc.n	800547e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80054a4:	e002      	b.n	80054ac <SVCCTL_UserEvtRx+0x64>
              break;
 80054a6:	bf00      	nop
          break;
 80054a8:	e000      	b.n	80054ac <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80054aa:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80054ac:	e000      	b.n	80054b0 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80054ae:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 80054b0:	7dfb      	ldrb	r3, [r7, #23]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d00f      	beq.n	80054d6 <SVCCTL_UserEvtRx+0x8e>
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	dc10      	bgt.n	80054dc <SVCCTL_UserEvtRx+0x94>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <SVCCTL_UserEvtRx+0x7c>
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d006      	beq.n	80054d0 <SVCCTL_UserEvtRx+0x88>
 80054c2:	e00b      	b.n	80054dc <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 ff7f 	bl	80063c8 <SVCCTL_App_Notification>
 80054ca:	4603      	mov	r3, r0
 80054cc:	75bb      	strb	r3, [r7, #22]
      break;
 80054ce:	e008      	b.n	80054e2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80054d0:	2301      	movs	r3, #1
 80054d2:	75bb      	strb	r3, [r7, #22]
      break;
 80054d4:	e005      	b.n	80054e2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80054d6:	2300      	movs	r3, #0
 80054d8:	75bb      	strb	r3, [r7, #22]
      break;
 80054da:	e002      	b.n	80054e2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80054dc:	2301      	movs	r3, #1
 80054de:	75bb      	strb	r3, [r7, #22]
      break;
 80054e0:	bf00      	nop
  }

  return (return_status);
 80054e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20000124 	.word	0x20000124

080054f0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80054f8:	f107 030c 	add.w	r3, r7, #12
 80054fc:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	212c      	movs	r1, #44	; 0x2c
 8005508:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800550c:	f000 fae2 	bl	8005ad4 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	330b      	adds	r3, #11
 8005514:	78db      	ldrb	r3, [r3, #3]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3720      	adds	r7, #32
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b088      	sub	sp, #32
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005526:	f107 030c 	add.w	r3, r7, #12
 800552a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	210f      	movs	r1, #15
 8005536:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800553a:	f000 facb 	bl	8005ad4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	330b      	adds	r3, #11
 8005542:	78db      	ldrb	r3, [r3, #3]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3720      	adds	r7, #32
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005554:	f107 030c 	add.w	r3, r7, #12
 8005558:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	210e      	movs	r1, #14
 8005560:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8005564:	f000 fab6 	bl	8005ad4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	330b      	adds	r3, #11
 800556c:	78db      	ldrb	r3, [r3, #3]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3720      	adds	r7, #32
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
	...

08005578 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8005578:	b480      	push	{r7}
 800557a:	b08b      	sub	sp, #44	; 0x2c
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8005588:	2300      	movs	r3, #0
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800558c:	2300      	movs	r3, #0
 800558e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8005590:	2300      	movs	r3, #0
 8005592:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8005594:	2300      	movs	r3, #0
 8005596:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8005598:	2300      	movs	r3, #0
 800559a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800559c:	2300      	movs	r3, #0
 800559e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80055a0:	4b4a      	ldr	r3, [pc, #296]	; (80056cc <SHCI_GetWirelessFwInfo+0x154>)
 80055a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80055a8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80055b2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a44      	ldr	r2, [pc, #272]	; (80056d0 <SHCI_GetWirelessFwInfo+0x158>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d10f      	bne.n	80055e4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	617b      	str	r3, [r7, #20]
 80055e2:	e01a      	b.n	800561a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80055ec:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80055f0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	0e1b      	lsrs	r3, r3, #24
 800561e:	b2da      	uxtb	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	0c1b      	lsrs	r3, r3, #16
 8005628:	b2da      	uxtb	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	0a1b      	lsrs	r3, r3, #8
 8005632:	b2da      	uxtb	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	091b      	lsrs	r3, r3, #4
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	b2da      	uxtb	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	b2db      	uxtb	r3, r3
 800564c:	f003 030f 	and.w	r3, r3, #15
 8005650:	b2da      	uxtb	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8005656:	6a3b      	ldr	r3, [r7, #32]
 8005658:	0e1b      	lsrs	r3, r3, #24
 800565a:	b2da      	uxtb	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	0c1b      	lsrs	r3, r3, #16
 8005664:	b2da      	uxtb	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	0a1b      	lsrs	r3, r3, #8
 800566e:	b2da      	uxtb	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	b2da      	uxtb	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	b2da      	uxtb	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	0e1b      	lsrs	r3, r3, #24
 8005688:	b2da      	uxtb	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	0c1b      	lsrs	r3, r3, #16
 8005692:	b2da      	uxtb	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	0a1b      	lsrs	r3, r3, #8
 800569c:	b2da      	uxtb	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	0e1b      	lsrs	r3, r3, #24
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	0c1b      	lsrs	r3, r3, #16
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	b2da      	uxtb	r2, r3
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	372c      	adds	r7, #44	; 0x2c
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	58004000 	.word	0x58004000
 80056d0:	a94656b9 	.word	0xa94656b9

080056d4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	4a08      	ldr	r2, [pc, #32]	; (8005704 <hci_init+0x30>)
 80056e4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80056e6:	4a08      	ldr	r2, [pc, #32]	; (8005708 <hci_init+0x34>)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80056ec:	4806      	ldr	r0, [pc, #24]	; (8005708 <hci_init+0x34>)
 80056ee:	f000 f973 	bl	80059d8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 f8d4 	bl	80058a4 <TlInit>

  return;
 80056fc:	bf00      	nop
}
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	200002d0 	.word	0x200002d0
 8005708:	200002a8 	.word	0x200002a8

0800570c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8005712:	4822      	ldr	r0, [pc, #136]	; (800579c <hci_user_evt_proc+0x90>)
 8005714:	f000 fd28 	bl	8006168 <LST_is_empty>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d12b      	bne.n	8005776 <hci_user_evt_proc+0x6a>
 800571e:	4b20      	ldr	r3, [pc, #128]	; (80057a0 <hci_user_evt_proc+0x94>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d027      	beq.n	8005776 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005726:	f107 030c 	add.w	r3, r7, #12
 800572a:	4619      	mov	r1, r3
 800572c:	481b      	ldr	r0, [pc, #108]	; (800579c <hci_user_evt_proc+0x90>)
 800572e:	f000 fdaa 	bl	8006286 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8005732:	4b1c      	ldr	r3, [pc, #112]	; (80057a4 <hci_user_evt_proc+0x98>)
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00c      	beq.n	8005754 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800573e:	2301      	movs	r3, #1
 8005740:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005742:	4b18      	ldr	r3, [pc, #96]	; (80057a4 <hci_user_evt_proc+0x98>)
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	1d3a      	adds	r2, r7, #4
 8005748:	4610      	mov	r0, r2
 800574a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800574c:	793a      	ldrb	r2, [r7, #4]
 800574e:	4b14      	ldr	r3, [pc, #80]	; (80057a0 <hci_user_evt_proc+0x94>)
 8005750:	701a      	strb	r2, [r3, #0]
 8005752:	e002      	b.n	800575a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8005754:	4b12      	ldr	r3, [pc, #72]	; (80057a0 <hci_user_evt_proc+0x94>)
 8005756:	2201      	movs	r2, #1
 8005758:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800575a:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <hci_user_evt_proc+0x94>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d004      	beq.n	800576c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fc03 	bl	8005f70 <TL_MM_EvtDone>
 800576a:	e004      	b.n	8005776 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4619      	mov	r1, r3
 8005770:	480a      	ldr	r0, [pc, #40]	; (800579c <hci_user_evt_proc+0x90>)
 8005772:	f000 fd1b 	bl	80061ac <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8005776:	4809      	ldr	r0, [pc, #36]	; (800579c <hci_user_evt_proc+0x90>)
 8005778:	f000 fcf6 	bl	8006168 <LST_is_empty>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d107      	bne.n	8005792 <hci_user_evt_proc+0x86>
 8005782:	4b07      	ldr	r3, [pc, #28]	; (80057a0 <hci_user_evt_proc+0x94>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800578a:	4804      	ldr	r0, [pc, #16]	; (800579c <hci_user_evt_proc+0x90>)
 800578c:	f000 ff46 	bl	800661c <hci_notify_asynch_evt>
  }


  return;
 8005790:	bf00      	nop
 8005792:	bf00      	nop
}
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	2000014c 	.word	0x2000014c
 80057a0:	20000158 	.word	0x20000158
 80057a4:	200002a8 	.word	0x200002a8

080057a8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	460b      	mov	r3, r1
 80057b2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80057b4:	2000      	movs	r0, #0
 80057b6:	f000 f8cb 	bl	8005950 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80057ba:	2300      	movs	r3, #0
 80057bc:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	885b      	ldrh	r3, [r3, #2]
 80057c2:	b21b      	sxth	r3, r3
 80057c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057c8:	b21a      	sxth	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	029b      	lsls	r3, r3, #10
 80057d0:	b21b      	sxth	r3, r3
 80057d2:	4313      	orrs	r3, r2
 80057d4:	b21b      	sxth	r3, r3
 80057d6:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	b2d9      	uxtb	r1, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689a      	ldr	r2, [r3, #8]
 80057e2:	8bbb      	ldrh	r3, [r7, #28]
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 f88d 	bl	8005904 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80057ea:	e04e      	b.n	800588a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80057ec:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80057f0:	f000 ff2b 	bl	800664a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80057f4:	e043      	b.n	800587e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80057f6:	f107 030c 	add.w	r3, r7, #12
 80057fa:	4619      	mov	r1, r3
 80057fc:	4828      	ldr	r0, [pc, #160]	; (80058a0 <hci_send_req+0xf8>)
 80057fe:	f000 fd42 	bl	8006286 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	7a5b      	ldrb	r3, [r3, #9]
 8005806:	2b0f      	cmp	r3, #15
 8005808:	d114      	bne.n	8005834 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	330b      	adds	r3, #11
 800580e:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	885b      	ldrh	r3, [r3, #2]
 8005814:	b29b      	uxth	r3, r3
 8005816:	8bba      	ldrh	r2, [r7, #28]
 8005818:	429a      	cmp	r2, r3
 800581a:	d104      	bne.n	8005826 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	7812      	ldrb	r2, [r2, #0]
 8005824:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	785b      	ldrb	r3, [r3, #1]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d027      	beq.n	800587e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800582e:	2301      	movs	r3, #1
 8005830:	77fb      	strb	r3, [r7, #31]
 8005832:	e024      	b.n	800587e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	330b      	adds	r3, #11
 8005838:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005840:	b29b      	uxth	r3, r3
 8005842:	8bba      	ldrh	r2, [r7, #28]
 8005844:	429a      	cmp	r2, r3
 8005846:	d114      	bne.n	8005872 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	7a9b      	ldrb	r3, [r3, #10]
 800584c:	3b03      	subs	r3, #3
 800584e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	695a      	ldr	r2, [r3, #20]
 8005854:	7dfb      	ldrb	r3, [r7, #23]
 8005856:	429a      	cmp	r2, r3
 8005858:	bfa8      	it	ge
 800585a:	461a      	movge	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6918      	ldr	r0, [r3, #16]
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	1cd9      	adds	r1, r3, #3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	461a      	mov	r2, r3
 800586e:	f001 fd55 	bl	800731c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800587a:	2301      	movs	r3, #1
 800587c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800587e:	4808      	ldr	r0, [pc, #32]	; (80058a0 <hci_send_req+0xf8>)
 8005880:	f000 fc72 	bl	8006168 <LST_is_empty>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0b5      	beq.n	80057f6 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800588a:	7ffb      	ldrb	r3, [r7, #31]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0ad      	beq.n	80057ec <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8005890:	2001      	movs	r0, #1
 8005892:	f000 f85d 	bl	8005950 <NotifyCmdStatus>

  return 0;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3720      	adds	r7, #32
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	200002c8 	.word	0x200002c8

080058a4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80058ac:	480f      	ldr	r0, [pc, #60]	; (80058ec <TlInit+0x48>)
 80058ae:	f000 fc4b 	bl	8006148 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80058b2:	4a0f      	ldr	r2, [pc, #60]	; (80058f0 <TlInit+0x4c>)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80058b8:	480e      	ldr	r0, [pc, #56]	; (80058f4 <TlInit+0x50>)
 80058ba:	f000 fc45 	bl	8006148 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80058be:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <TlInit+0x54>)
 80058c0:	2201      	movs	r2, #1
 80058c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80058c4:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <TlInit+0x58>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80058d0:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <TlInit+0x5c>)
 80058d2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80058d4:	4b09      	ldr	r3, [pc, #36]	; (80058fc <TlInit+0x58>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f107 0208 	add.w	r2, r7, #8
 80058dc:	4610      	mov	r0, r2
 80058de:	4798      	blx	r3
  }

  return;
 80058e0:	bf00      	nop
 80058e2:	bf00      	nop
}
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	200002c8 	.word	0x200002c8
 80058f0:	20000154 	.word	0x20000154
 80058f4:	2000014c 	.word	0x2000014c
 80058f8:	20000158 	.word	0x20000158
 80058fc:	200002a8 	.word	0x200002a8
 8005900:	08005991 	.word	0x08005991

08005904 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	4603      	mov	r3, r0
 800590c:	603a      	str	r2, [r7, #0]
 800590e:	80fb      	strh	r3, [r7, #6]
 8005910:	460b      	mov	r3, r1
 8005912:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8005914:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <SendCmd+0x44>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	88fa      	ldrh	r2, [r7, #6]
 800591a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800591e:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <SendCmd+0x44>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	797a      	ldrb	r2, [r7, #5]
 8005924:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8005926:	4b08      	ldr	r3, [pc, #32]	; (8005948 <SendCmd+0x44>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	330c      	adds	r3, #12
 800592c:	797a      	ldrb	r2, [r7, #5]
 800592e:	6839      	ldr	r1, [r7, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f001 fcf3 	bl	800731c <memcpy>

  hciContext.io.Send(0,0);
 8005936:	4b05      	ldr	r3, [pc, #20]	; (800594c <SendCmd+0x48>)
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	2100      	movs	r1, #0
 800593c:	2000      	movs	r0, #0
 800593e:	4798      	blx	r3

  return;
 8005940:	bf00      	nop
}
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20000154 	.word	0x20000154
 800594c:	200002a8 	.word	0x200002a8

08005950 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800595a:	79fb      	ldrb	r3, [r7, #7]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d108      	bne.n	8005972 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8005960:	4b0a      	ldr	r3, [pc, #40]	; (800598c <NotifyCmdStatus+0x3c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00d      	beq.n	8005984 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8005968:	4b08      	ldr	r3, [pc, #32]	; (800598c <NotifyCmdStatus+0x3c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2000      	movs	r0, #0
 800596e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8005970:	e008      	b.n	8005984 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8005972:	4b06      	ldr	r3, [pc, #24]	; (800598c <NotifyCmdStatus+0x3c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d004      	beq.n	8005984 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800597a:	4b04      	ldr	r3, [pc, #16]	; (800598c <NotifyCmdStatus+0x3c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2001      	movs	r0, #1
 8005980:	4798      	blx	r3
  return;
 8005982:	bf00      	nop
 8005984:	bf00      	nop
}
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	200002d0 	.word	0x200002d0

08005990 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	7a5b      	ldrb	r3, [r3, #9]
 800599c:	2b0f      	cmp	r3, #15
 800599e:	d003      	beq.n	80059a8 <TlEvtReceived+0x18>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	7a5b      	ldrb	r3, [r3, #9]
 80059a4:	2b0e      	cmp	r3, #14
 80059a6:	d107      	bne.n	80059b8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80059a8:	6879      	ldr	r1, [r7, #4]
 80059aa:	4809      	ldr	r0, [pc, #36]	; (80059d0 <TlEvtReceived+0x40>)
 80059ac:	f000 fc24 	bl	80061f8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80059b0:	2000      	movs	r0, #0
 80059b2:	f000 fe3f 	bl	8006634 <hci_cmd_resp_release>
 80059b6:	e006      	b.n	80059c6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	4806      	ldr	r0, [pc, #24]	; (80059d4 <TlEvtReceived+0x44>)
 80059bc:	f000 fc1c 	bl	80061f8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80059c0:	4804      	ldr	r0, [pc, #16]	; (80059d4 <TlEvtReceived+0x44>)
 80059c2:	f000 fe2b 	bl	800661c <hci_notify_asynch_evt>
  }

  return;
 80059c6:	bf00      	nop
}
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	200002c8 	.word	0x200002c8
 80059d4:	2000014c 	.word	0x2000014c

080059d8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a05      	ldr	r2, [pc, #20]	; (80059f8 <hci_register_io_bus+0x20>)
 80059e4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a04      	ldr	r2, [pc, #16]	; (80059fc <hci_register_io_bus+0x24>)
 80059ea:	611a      	str	r2, [r3, #16]

  return;
 80059ec:	bf00      	nop
}
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	08005ce9 	.word	0x08005ce9
 80059fc:	08005d51 	.word	0x08005d51

08005a00 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	4a08      	ldr	r2, [pc, #32]	; (8005a30 <shci_init+0x30>)
 8005a10:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8005a12:	4a08      	ldr	r2, [pc, #32]	; (8005a34 <shci_init+0x34>)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8005a18:	4806      	ldr	r0, [pc, #24]	; (8005a34 <shci_init+0x34>)
 8005a1a:	f000 f911 	bl	8005c40 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f000 f894 	bl	8005b50 <TlInit>

  return;
 8005a28:	bf00      	nop
}
 8005a2a:	3708      	adds	r7, #8
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	200002f4 	.word	0x200002f4
 8005a34:	200002d4 	.word	0x200002d4

08005a38 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005a3e:	4822      	ldr	r0, [pc, #136]	; (8005ac8 <shci_user_evt_proc+0x90>)
 8005a40:	f000 fb92 	bl	8006168 <LST_is_empty>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d12b      	bne.n	8005aa2 <shci_user_evt_proc+0x6a>
 8005a4a:	4b20      	ldr	r3, [pc, #128]	; (8005acc <shci_user_evt_proc+0x94>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d027      	beq.n	8005aa2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005a52:	f107 030c 	add.w	r3, r7, #12
 8005a56:	4619      	mov	r1, r3
 8005a58:	481b      	ldr	r0, [pc, #108]	; (8005ac8 <shci_user_evt_proc+0x90>)
 8005a5a:	f000 fc14 	bl	8006286 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8005a5e:	4b1c      	ldr	r3, [pc, #112]	; (8005ad0 <shci_user_evt_proc+0x98>)
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00c      	beq.n	8005a80 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005a6e:	4b18      	ldr	r3, [pc, #96]	; (8005ad0 <shci_user_evt_proc+0x98>)
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	1d3a      	adds	r2, r7, #4
 8005a74:	4610      	mov	r0, r2
 8005a76:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8005a78:	793a      	ldrb	r2, [r7, #4]
 8005a7a:	4b14      	ldr	r3, [pc, #80]	; (8005acc <shci_user_evt_proc+0x94>)
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	e002      	b.n	8005a86 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005a80:	4b12      	ldr	r3, [pc, #72]	; (8005acc <shci_user_evt_proc+0x94>)
 8005a82:	2201      	movs	r2, #1
 8005a84:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8005a86:	4b11      	ldr	r3, [pc, #68]	; (8005acc <shci_user_evt_proc+0x94>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d004      	beq.n	8005a98 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 fa6d 	bl	8005f70 <TL_MM_EvtDone>
 8005a96:	e004      	b.n	8005aa2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	480a      	ldr	r0, [pc, #40]	; (8005ac8 <shci_user_evt_proc+0x90>)
 8005a9e:	f000 fb85 	bl	80061ac <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005aa2:	4809      	ldr	r0, [pc, #36]	; (8005ac8 <shci_user_evt_proc+0x90>)
 8005aa4:	f000 fb60 	bl	8006168 <LST_is_empty>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d107      	bne.n	8005abe <shci_user_evt_proc+0x86>
 8005aae:	4b07      	ldr	r3, [pc, #28]	; (8005acc <shci_user_evt_proc+0x94>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8005ab6:	4804      	ldr	r0, [pc, #16]	; (8005ac8 <shci_user_evt_proc+0x90>)
 8005ab8:	f7fb f861 	bl	8000b7e <shci_notify_asynch_evt>
  }


  return;
 8005abc:	bf00      	nop
 8005abe:	bf00      	nop
}
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	2000015c 	.word	0x2000015c
 8005acc:	2000016c 	.word	0x2000016c
 8005ad0:	200002d4 	.word	0x200002d4

08005ad4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60ba      	str	r2, [r7, #8]
 8005adc:	607b      	str	r3, [r7, #4]
 8005ade:	4603      	mov	r3, r0
 8005ae0:	81fb      	strh	r3, [r7, #14]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8005ae6:	2000      	movs	r0, #0
 8005ae8:	f000 f864 	bl	8005bb4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8005aec:	4b16      	ldr	r3, [pc, #88]	; (8005b48 <shci_send+0x74>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	89fa      	ldrh	r2, [r7, #14]
 8005af2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8005af6:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <shci_send+0x74>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	7b7a      	ldrb	r2, [r7, #13]
 8005afc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8005afe:	4b12      	ldr	r3, [pc, #72]	; (8005b48 <shci_send+0x74>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	330c      	adds	r3, #12
 8005b04:	7b7a      	ldrb	r2, [r7, #13]
 8005b06:	68b9      	ldr	r1, [r7, #8]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f001 fc07 	bl	800731c <memcpy>

  shciContext.io.Send(0,0);
 8005b0e:	4b0f      	ldr	r3, [pc, #60]	; (8005b4c <shci_send+0x78>)
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	2100      	movs	r1, #0
 8005b14:	2000      	movs	r0, #0
 8005b16:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8005b18:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005b1c:	f7fb f846 	bl	8000bac <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f103 0008 	add.w	r0, r3, #8
 8005b26:	4b08      	ldr	r3, [pc, #32]	; (8005b48 <shci_send+0x74>)
 8005b28:	6819      	ldr	r1, [r3, #0]
 8005b2a:	4b07      	ldr	r3, [pc, #28]	; (8005b48 <shci_send+0x74>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	789b      	ldrb	r3, [r3, #2]
 8005b30:	3303      	adds	r3, #3
 8005b32:	461a      	mov	r2, r3
 8005b34:	f001 fbf2 	bl	800731c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005b38:	2001      	movs	r0, #1
 8005b3a:	f000 f83b 	bl	8005bb4 <Cmd_SetStatus>

  return;
 8005b3e:	bf00      	nop
}
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	20000168 	.word	0x20000168
 8005b4c:	200002d4 	.word	0x200002d4

08005b50 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8005b58:	4a10      	ldr	r2, [pc, #64]	; (8005b9c <TlInit+0x4c>)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8005b5e:	4810      	ldr	r0, [pc, #64]	; (8005ba0 <TlInit+0x50>)
 8005b60:	f000 faf2 	bl	8006148 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005b64:	2001      	movs	r0, #1
 8005b66:	f000 f825 	bl	8005bb4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005b6a:	4b0e      	ldr	r3, [pc, #56]	; (8005ba4 <TlInit+0x54>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8005b70:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <TlInit+0x58>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00c      	beq.n	8005b92 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8005b7c:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <TlInit+0x5c>)
 8005b7e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8005b80:	4b0b      	ldr	r3, [pc, #44]	; (8005bb0 <TlInit+0x60>)
 8005b82:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8005b84:	4b08      	ldr	r3, [pc, #32]	; (8005ba8 <TlInit+0x58>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f107 020c 	add.w	r2, r7, #12
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	4798      	blx	r3
  }

  return;
 8005b90:	bf00      	nop
 8005b92:	bf00      	nop
}
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000168 	.word	0x20000168
 8005ba0:	2000015c 	.word	0x2000015c
 8005ba4:	2000016c 	.word	0x2000016c
 8005ba8:	200002d4 	.word	0x200002d4
 8005bac:	08005c05 	.word	0x08005c05
 8005bb0:	08005c1d 	.word	0x08005c1d

08005bb4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10b      	bne.n	8005bdc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8005bc4:	4b0d      	ldr	r3, [pc, #52]	; (8005bfc <Cmd_SetStatus+0x48>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8005bcc:	4b0b      	ldr	r3, [pc, #44]	; (8005bfc <Cmd_SetStatus+0x48>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2000      	movs	r0, #0
 8005bd2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8005bd4:	4b0a      	ldr	r3, [pc, #40]	; (8005c00 <Cmd_SetStatus+0x4c>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8005bda:	e00b      	b.n	8005bf4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8005bdc:	4b08      	ldr	r3, [pc, #32]	; (8005c00 <Cmd_SetStatus+0x4c>)
 8005bde:	2201      	movs	r2, #1
 8005be0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8005be2:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <Cmd_SetStatus+0x48>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d004      	beq.n	8005bf4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8005bea:	4b04      	ldr	r3, [pc, #16]	; (8005bfc <Cmd_SetStatus+0x48>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2001      	movs	r0, #1
 8005bf0:	4798      	blx	r3
  return;
 8005bf2:	bf00      	nop
 8005bf4:	bf00      	nop
}
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	200002f4 	.word	0x200002f4
 8005c00:	20000164 	.word	0x20000164

08005c04 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	f7fa ffc2 	bl	8000b96 <shci_cmd_resp_release>

  return;
 8005c12:	bf00      	nop
}
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	4805      	ldr	r0, [pc, #20]	; (8005c3c <TlUserEvtReceived+0x20>)
 8005c28:	f000 fae6 	bl	80061f8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005c2c:	4803      	ldr	r0, [pc, #12]	; (8005c3c <TlUserEvtReceived+0x20>)
 8005c2e:	f7fa ffa6 	bl	8000b7e <shci_notify_asynch_evt>

  return;
 8005c32:	bf00      	nop
}
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	2000015c 	.word	0x2000015c

08005c40 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a05      	ldr	r2, [pc, #20]	; (8005c60 <shci_register_io_bus+0x20>)
 8005c4c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a04      	ldr	r2, [pc, #16]	; (8005c64 <shci_register_io_bus+0x24>)
 8005c52:	611a      	str	r2, [r3, #16]

  return;
 8005c54:	bf00      	nop
}
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	08005dfd 	.word	0x08005dfd
 8005c64:	08005e51 	.word	0x08005e51

08005c68 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8005c6c:	f000 ffda 	bl	8006c24 <HW_IPCC_Enable>

  return;
 8005c70:	bf00      	nop
}
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <TL_Init>:


void TL_Init( void )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005c78:	4b10      	ldr	r3, [pc, #64]	; (8005cbc <TL_Init+0x48>)
 8005c7a:	4a11      	ldr	r2, [pc, #68]	; (8005cc0 <TL_Init+0x4c>)
 8005c7c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005c7e:	4b0f      	ldr	r3, [pc, #60]	; (8005cbc <TL_Init+0x48>)
 8005c80:	4a10      	ldr	r2, [pc, #64]	; (8005cc4 <TL_Init+0x50>)
 8005c82:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005c84:	4b0d      	ldr	r3, [pc, #52]	; (8005cbc <TL_Init+0x48>)
 8005c86:	4a10      	ldr	r2, [pc, #64]	; (8005cc8 <TL_Init+0x54>)
 8005c88:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8005c8a:	4b0c      	ldr	r3, [pc, #48]	; (8005cbc <TL_Init+0x48>)
 8005c8c:	4a0f      	ldr	r2, [pc, #60]	; (8005ccc <TL_Init+0x58>)
 8005c8e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8005c90:	4b0a      	ldr	r3, [pc, #40]	; (8005cbc <TL_Init+0x48>)
 8005c92:	4a0f      	ldr	r2, [pc, #60]	; (8005cd0 <TL_Init+0x5c>)
 8005c94:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8005c96:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <TL_Init+0x48>)
 8005c98:	4a0e      	ldr	r2, [pc, #56]	; (8005cd4 <TL_Init+0x60>)
 8005c9a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005c9c:	4b07      	ldr	r3, [pc, #28]	; (8005cbc <TL_Init+0x48>)
 8005c9e:	4a0e      	ldr	r2, [pc, #56]	; (8005cd8 <TL_Init+0x64>)
 8005ca0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8005ca2:	4b06      	ldr	r3, [pc, #24]	; (8005cbc <TL_Init+0x48>)
 8005ca4:	4a0d      	ldr	r2, [pc, #52]	; (8005cdc <TL_Init+0x68>)
 8005ca6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005ca8:	4b04      	ldr	r3, [pc, #16]	; (8005cbc <TL_Init+0x48>)
 8005caa:	4a0d      	ldr	r2, [pc, #52]	; (8005ce0 <TL_Init+0x6c>)
 8005cac:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005cae:	4b03      	ldr	r3, [pc, #12]	; (8005cbc <TL_Init+0x48>)
 8005cb0:	4a0c      	ldr	r2, [pc, #48]	; (8005ce4 <TL_Init+0x70>)
 8005cb2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8005cb4:	f000 ffca 	bl	8006c4c <HW_IPCC_Init>

  return;
 8005cb8:	bf00      	nop
}
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	20030000 	.word	0x20030000
 8005cc0:	20030028 	.word	0x20030028
 8005cc4:	20030048 	.word	0x20030048
 8005cc8:	20030058 	.word	0x20030058
 8005ccc:	20030068 	.word	0x20030068
 8005cd0:	20030070 	.word	0x20030070
 8005cd4:	20030078 	.word	0x20030078
 8005cd8:	20030080 	.word	0x20030080
 8005cdc:	2003009c 	.word	0x2003009c
 8005ce0:	200300a0 	.word	0x200300a0
 8005ce4:	200300ac 	.word	0x200300ac

08005ce8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8005cf4:	4811      	ldr	r0, [pc, #68]	; (8005d3c <TL_BLE_Init+0x54>)
 8005cf6:	f000 fa27 	bl	8006148 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8005cfa:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <TL_BLE_Init+0x58>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	689a      	ldr	r2, [r3, #8]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	4a0c      	ldr	r2, [pc, #48]	; (8005d44 <TL_BLE_Init+0x5c>)
 8005d14:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	4a08      	ldr	r2, [pc, #32]	; (8005d3c <TL_BLE_Init+0x54>)
 8005d1a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8005d1c:	f000 ffac 	bl	8006c78 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a08      	ldr	r2, [pc, #32]	; (8005d48 <TL_BLE_Init+0x60>)
 8005d26:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	4a07      	ldr	r2, [pc, #28]	; (8005d4c <TL_BLE_Init+0x64>)
 8005d2e:	6013      	str	r3, [r2, #0]

  return 0;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	200300c8 	.word	0x200300c8
 8005d40:	20030000 	.word	0x20030000
 8005d44:	20030a58 	.word	0x20030a58
 8005d48:	20000300 	.word	0x20000300
 8005d4c:	20000304 	.word	0x20000304

08005d50 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8005d5c:	4b09      	ldr	r3, [pc, #36]	; (8005d84 <TL_BLE_SendCmd+0x34>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2201      	movs	r2, #1
 8005d64:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8005d66:	4b07      	ldr	r3, [pc, #28]	; (8005d84 <TL_BLE_SendCmd+0x34>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	2001      	movs	r0, #1
 8005d70:	f000 f96c 	bl	800604c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8005d74:	f000 ff8a 	bl	8006c8c <HW_IPCC_BLE_SendCmd>

  return 0;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20030000 	.word	0x20030000

08005d88 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8005d8e:	e01c      	b.n	8005dca <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8005d90:	1d3b      	adds	r3, r7, #4
 8005d92:	4619      	mov	r1, r3
 8005d94:	4812      	ldr	r0, [pc, #72]	; (8005de0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005d96:	f000 fa76 	bl	8006286 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	7a5b      	ldrb	r3, [r3, #9]
 8005d9e:	2b0f      	cmp	r3, #15
 8005da0:	d003      	beq.n	8005daa <HW_IPCC_BLE_RxEvtNot+0x22>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	7a5b      	ldrb	r3, [r3, #9]
 8005da6:	2b0e      	cmp	r3, #14
 8005da8:	d105      	bne.n	8005db6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4619      	mov	r1, r3
 8005dae:	2002      	movs	r0, #2
 8005db0:	f000 f94c 	bl	800604c <OutputDbgTrace>
 8005db4:	e004      	b.n	8005dc0 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4619      	mov	r1, r3
 8005dba:	2003      	movs	r0, #3
 8005dbc:	f000 f946 	bl	800604c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8005dc0:	4b08      	ldr	r3, [pc, #32]	; (8005de4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8005dca:	4805      	ldr	r0, [pc, #20]	; (8005de0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005dcc:	f000 f9cc 	bl	8006168 <LST_is_empty>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0dc      	beq.n	8005d90 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8005dd6:	bf00      	nop
}
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	200300c8 	.word	0x200300c8
 8005de4:	20000300 	.word	0x20000300

08005de8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8005dec:	4b02      	ldr	r3, [pc, #8]	; (8005df8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4798      	blx	r3

  return;
 8005df2:	bf00      	nop
}
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000304 	.word	0x20000304

08005dfc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8005e08:	480d      	ldr	r0, [pc, #52]	; (8005e40 <TL_SYS_Init+0x44>)
 8005e0a:	f000 f99d 	bl	8006148 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8005e0e:	4b0d      	ldr	r3, [pc, #52]	; (8005e44 <TL_SYS_Init+0x48>)
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	689a      	ldr	r2, [r3, #8]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4a08      	ldr	r2, [pc, #32]	; (8005e40 <TL_SYS_Init+0x44>)
 8005e20:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8005e22:	f000 ff55 	bl	8006cd0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a07      	ldr	r2, [pc, #28]	; (8005e48 <TL_SYS_Init+0x4c>)
 8005e2c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	4a06      	ldr	r2, [pc, #24]	; (8005e4c <TL_SYS_Init+0x50>)
 8005e34:	6013      	str	r3, [r2, #0]

  return 0;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	200300d0 	.word	0x200300d0
 8005e44:	20030000 	.word	0x20030000
 8005e48:	20000308 	.word	0x20000308
 8005e4c:	2000030c 	.word	0x2000030c

08005e50 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8005e5c:	4b09      	ldr	r3, [pc, #36]	; (8005e84 <TL_SYS_SendCmd+0x34>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2210      	movs	r2, #16
 8005e64:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8005e66:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <TL_SYS_SendCmd+0x34>)
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	2004      	movs	r0, #4
 8005e70:	f000 f8ec 	bl	800604c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8005e74:	f000 ff36 	bl	8006ce4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	20030000 	.word	0x20030000

08005e88 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005e8c:	4b07      	ldr	r3, [pc, #28]	; (8005eac <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4619      	mov	r1, r3
 8005e94:	2005      	movs	r0, #5
 8005e96:	f000 f8d9 	bl	800604c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005e9a:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a03      	ldr	r2, [pc, #12]	; (8005eac <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005ea0:	68d2      	ldr	r2, [r2, #12]
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	4798      	blx	r3

  return;
 8005ea8:	bf00      	nop
}
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	20030000 	.word	0x20030000
 8005eb0:	20000308 	.word	0x20000308

08005eb4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005eba:	e00e      	b.n	8005eda <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8005ebc:	1d3b      	adds	r3, r7, #4
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	480b      	ldr	r0, [pc, #44]	; (8005ef0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005ec2:	f000 f9e0 	bl	8006286 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4619      	mov	r1, r3
 8005eca:	2006      	movs	r0, #6
 8005ecc:	f000 f8be 	bl	800604c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005ed0:	4b08      	ldr	r3, [pc, #32]	; (8005ef4 <HW_IPCC_SYS_EvtNot+0x40>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005eda:	4805      	ldr	r0, [pc, #20]	; (8005ef0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005edc:	f000 f944 	bl	8006168 <LST_is_empty>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0ea      	beq.n	8005ebc <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8005ee6:	bf00      	nop
}
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	200300d0 	.word	0x200300d0
 8005ef4:	2000030c 	.word	0x2000030c

08005ef8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8005f00:	4817      	ldr	r0, [pc, #92]	; (8005f60 <TL_MM_Init+0x68>)
 8005f02:	f000 f921 	bl	8006148 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8005f06:	4817      	ldr	r0, [pc, #92]	; (8005f64 <TL_MM_Init+0x6c>)
 8005f08:	f000 f91e 	bl	8006148 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005f0c:	4b16      	ldr	r3, [pc, #88]	; (8005f68 <TL_MM_Init+0x70>)
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	4a16      	ldr	r2, [pc, #88]	; (8005f6c <TL_MM_Init+0x74>)
 8005f12:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005f14:	4b15      	ldr	r3, [pc, #84]	; (8005f6c <TL_MM_Init+0x74>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6892      	ldr	r2, [r2, #8]
 8005f1c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8005f1e:	4b13      	ldr	r3, [pc, #76]	; (8005f6c <TL_MM_Init+0x74>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	68d2      	ldr	r2, [r2, #12]
 8005f26:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005f28:	4b10      	ldr	r3, [pc, #64]	; (8005f6c <TL_MM_Init+0x74>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a0c      	ldr	r2, [pc, #48]	; (8005f60 <TL_MM_Init+0x68>)
 8005f2e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8005f30:	4b0e      	ldr	r3, [pc, #56]	; (8005f6c <TL_MM_Init+0x74>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <TL_MM_Init+0x74>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	6852      	ldr	r2, [r2, #4]
 8005f42:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8005f44:	4b09      	ldr	r3, [pc, #36]	; (8005f6c <TL_MM_Init+0x74>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6912      	ldr	r2, [r2, #16]
 8005f4c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8005f4e:	4b07      	ldr	r3, [pc, #28]	; (8005f6c <TL_MM_Init+0x74>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6952      	ldr	r2, [r2, #20]
 8005f56:	619a      	str	r2, [r3, #24]

  return;
 8005f58:	bf00      	nop
}
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	200300b8 	.word	0x200300b8
 8005f64:	200002f8 	.word	0x200002f8
 8005f68:	20030000 	.word	0x20030000
 8005f6c:	20000310 	.word	0x20000310

08005f70 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	4807      	ldr	r0, [pc, #28]	; (8005f98 <TL_MM_EvtDone+0x28>)
 8005f7c:	f000 f93c 	bl	80061f8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	2000      	movs	r0, #0
 8005f84:	f000 f862 	bl	800604c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8005f88:	4804      	ldr	r0, [pc, #16]	; (8005f9c <TL_MM_EvtDone+0x2c>)
 8005f8a:	f000 fed1 	bl	8006d30 <HW_IPCC_MM_SendFreeBuf>

  return;
 8005f8e:	bf00      	nop
}
 8005f90:	3708      	adds	r7, #8
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	200002f8 	.word	0x200002f8
 8005f9c:	08005fa1 	.word	0x08005fa1

08005fa0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005fa6:	e00c      	b.n	8005fc2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8005fa8:	1d3b      	adds	r3, r7, #4
 8005faa:	4619      	mov	r1, r3
 8005fac:	480a      	ldr	r0, [pc, #40]	; (8005fd8 <SendFreeBuf+0x38>)
 8005fae:	f000 f96a 	bl	8006286 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8005fb2:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <SendFreeBuf+0x3c>)
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	4611      	mov	r1, r2
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 f91b 	bl	80061f8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005fc2:	4805      	ldr	r0, [pc, #20]	; (8005fd8 <SendFreeBuf+0x38>)
 8005fc4:	f000 f8d0 	bl	8006168 <LST_is_empty>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0ec      	beq.n	8005fa8 <SendFreeBuf+0x8>
  }

  return;
 8005fce:	bf00      	nop
}
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	200002f8 	.word	0x200002f8
 8005fdc:	20030000 	.word	0x20030000

08005fe0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8005fe4:	4805      	ldr	r0, [pc, #20]	; (8005ffc <TL_TRACES_Init+0x1c>)
 8005fe6:	f000 f8af 	bl	8006148 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8005fea:	4b05      	ldr	r3, [pc, #20]	; (8006000 <TL_TRACES_Init+0x20>)
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	4a03      	ldr	r2, [pc, #12]	; (8005ffc <TL_TRACES_Init+0x1c>)
 8005ff0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8005ff2:	f000 fed3 	bl	8006d9c <HW_IPCC_TRACES_Init>

  return;
 8005ff6:	bf00      	nop
}
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	200300c0 	.word	0x200300c0
 8006000:	20030000 	.word	0x20030000

08006004 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b082      	sub	sp, #8
 8006008:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800600a:	e008      	b.n	800601e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800600c:	1d3b      	adds	r3, r7, #4
 800600e:	4619      	mov	r1, r3
 8006010:	4808      	ldr	r0, [pc, #32]	; (8006034 <HW_IPCC_TRACES_EvtNot+0x30>)
 8006012:	f000 f938 	bl	8006286 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4618      	mov	r0, r3
 800601a:	f000 f80d 	bl	8006038 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800601e:	4805      	ldr	r0, [pc, #20]	; (8006034 <HW_IPCC_TRACES_EvtNot+0x30>)
 8006020:	f000 f8a2 	bl	8006168 <LST_is_empty>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0f0      	beq.n	800600c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800602a:	bf00      	nop
}
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	200300c0 	.word	0x200300c0

08006038 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	4603      	mov	r3, r0
 8006054:	6039      	str	r1, [r7, #0]
 8006056:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8006058:	79fb      	ldrb	r3, [r7, #7]
 800605a:	2b06      	cmp	r3, #6
 800605c:	d845      	bhi.n	80060ea <OutputDbgTrace+0x9e>
 800605e:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <OutputDbgTrace+0x18>)
 8006060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006064:	08006081 	.word	0x08006081
 8006068:	080060a5 	.word	0x080060a5
 800606c:	080060ab 	.word	0x080060ab
 8006070:	080060bf 	.word	0x080060bf
 8006074:	080060cb 	.word	0x080060cb
 8006078:	080060d1 	.word	0x080060d1
 800607c:	080060df 	.word	0x080060df
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	7a5b      	ldrb	r3, [r3, #9]
 8006088:	2bff      	cmp	r3, #255	; 0xff
 800608a:	d005      	beq.n	8006098 <OutputDbgTrace+0x4c>
 800608c:	2bff      	cmp	r3, #255	; 0xff
 800608e:	dc05      	bgt.n	800609c <OutputDbgTrace+0x50>
 8006090:	2b0e      	cmp	r3, #14
 8006092:	d005      	beq.n	80060a0 <OutputDbgTrace+0x54>
 8006094:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8006096:	e001      	b.n	800609c <OutputDbgTrace+0x50>
          break;
 8006098:	bf00      	nop
 800609a:	e027      	b.n	80060ec <OutputDbgTrace+0xa0>
          break;
 800609c:	bf00      	nop
 800609e:	e025      	b.n	80060ec <OutputDbgTrace+0xa0>
          break;
 80060a0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80060a2:	e023      	b.n	80060ec <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80060a8:	e020      	b.n	80060ec <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	7a5b      	ldrb	r3, [r3, #9]
 80060b2:	2b0e      	cmp	r3, #14
 80060b4:	d001      	beq.n	80060ba <OutputDbgTrace+0x6e>
 80060b6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80060b8:	e000      	b.n	80060bc <OutputDbgTrace+0x70>
          break;
 80060ba:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80060bc:	e016      	b.n	80060ec <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	7a5b      	ldrb	r3, [r3, #9]
 80060c6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80060c8:	e010      	b.n	80060ec <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80060ce:	e00d      	b.n	80060ec <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	7a5b      	ldrb	r3, [r3, #9]
 80060d8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80060da:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80060dc:	e006      	b.n	80060ec <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	7a5b      	ldrb	r3, [r3, #9]
 80060e6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80060e8:	e000      	b.n	80060ec <OutputDbgTrace+0xa0>

    default:
      break;
 80060ea:	bf00      	nop
  }

  return;
 80060ec:	bf00      	nop
}
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	4603      	mov	r3, r0
 8006100:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8006102:	4b0f      	ldr	r3, [pc, #60]	; (8006140 <OTP_Read+0x48>)
 8006104:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006106:	e002      	b.n	800610e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	3b08      	subs	r3, #8
 800610c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3307      	adds	r3, #7
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	79fa      	ldrb	r2, [r7, #7]
 8006116:	429a      	cmp	r2, r3
 8006118:	d003      	beq.n	8006122 <OTP_Read+0x2a>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4a09      	ldr	r2, [pc, #36]	; (8006144 <OTP_Read+0x4c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d1f2      	bne.n	8006108 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3307      	adds	r3, #7
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	79fa      	ldrb	r2, [r7, #7]
 800612a:	429a      	cmp	r2, r3
 800612c:	d001      	beq.n	8006132 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8006132:	68fb      	ldr	r3, [r7, #12]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3714      	adds	r7, #20
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	1fff73f8 	.word	0x1fff73f8
 8006144:	1fff7000 	.word	0x1fff7000

08006148 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	605a      	str	r2, [r3, #4]
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006170:	f3ef 8310 	mrs	r3, PRIMASK
 8006174:	60fb      	str	r3, [r7, #12]
  return(result);
 8006176:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006178:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800617a:	b672      	cpsid	i
}
 800617c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	429a      	cmp	r2, r3
 8006186:	d102      	bne.n	800618e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8006188:	2301      	movs	r3, #1
 800618a:	75fb      	strb	r3, [r7, #23]
 800618c:	e001      	b.n	8006192 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800618e:	2300      	movs	r3, #0
 8006190:	75fb      	strb	r3, [r7, #23]
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	f383 8810 	msr	PRIMASK, r3
}
 800619c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800619e:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	371c      	adds	r7, #28
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061b6:	f3ef 8310 	mrs	r3, PRIMASK
 80061ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80061bc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80061be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80061c0:	b672      	cpsid	i
}
 80061c2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	605a      	str	r2, [r3, #4]
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f383 8810 	msr	PRIMASK, r3
}
 80061ea:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80061ec:	bf00      	nop
 80061ee:	371c      	adds	r7, #28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006202:	f3ef 8310 	mrs	r3, PRIMASK
 8006206:	60fb      	str	r3, [r7, #12]
  return(result);
 8006208:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800620a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800620c:	b672      	cpsid	i
}
 800620e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	601a      	str	r2, [r3, #0]
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f383 8810 	msr	PRIMASK, r3
}
 8006236:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006238:	bf00      	nop
 800623a:	371c      	adds	r7, #28
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8006244:	b480      	push	{r7}
 8006246:	b087      	sub	sp, #28
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800624c:	f3ef 8310 	mrs	r3, PRIMASK
 8006250:	60fb      	str	r3, [r7, #12]
  return(result);
 8006252:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006254:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006256:	b672      	cpsid	i
}
 8006258:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6812      	ldr	r2, [r2, #0]
 8006262:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6852      	ldr	r2, [r2, #4]
 800626c:	605a      	str	r2, [r3, #4]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f383 8810 	msr	PRIMASK, r3
}
 8006278:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800627a:	bf00      	nop
 800627c:	371c      	adds	r7, #28
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b086      	sub	sp, #24
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006290:	f3ef 8310 	mrs	r3, PRIMASK
 8006294:	60fb      	str	r3, [r7, #12]
  return(result);
 8006296:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006298:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800629a:	b672      	cpsid	i
}
 800629c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7ff ffca 	bl	8006244 <LST_remove_node>
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	f383 8810 	msr	PRIMASK, r3
}
 80062ba:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80062bc:	bf00      	nop
 80062be:	3718      	adds	r7, #24
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <__NVIC_SystemReset>:
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80062c8:	f3bf 8f4f 	dsb	sy
}
 80062cc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80062ce:	4b06      	ldr	r3, [pc, #24]	; (80062e8 <__NVIC_SystemReset+0x24>)
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80062d6:	4904      	ldr	r1, [pc, #16]	; (80062e8 <__NVIC_SystemReset+0x24>)
 80062d8:	4b04      	ldr	r3, [pc, #16]	; (80062ec <__NVIC_SystemReset+0x28>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80062de:	f3bf 8f4f 	dsb	sy
}
 80062e2:	bf00      	nop
    __NOP();
 80062e4:	bf00      	nop
 80062e6:	e7fd      	b.n	80062e4 <__NVIC_SystemReset+0x20>
 80062e8:	e000ed00 	.word	0xe000ed00
 80062ec:	05fa0004 	.word	0x05fa0004

080062f0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80062f0:	b480      	push	{r7}
 80062f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80062f4:	4b03      	ldr	r3, [pc, #12]	; (8006304 <LL_FLASH_GetUDN+0x14>)
 80062f6:	681b      	ldr	r3, [r3, #0]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	1fff7580 	.word	0x1fff7580

08006308 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800630c:	4b03      	ldr	r3, [pc, #12]	; (800631c <LL_FLASH_GetDeviceID+0x14>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	b2db      	uxtb	r3, r3
}
 8006312:	4618      	mov	r0, r3
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	1fff7584 	.word	0x1fff7584

08006320 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8006324:	4b03      	ldr	r3, [pc, #12]	; (8006334 <LL_FLASH_GetSTCompanyID+0x14>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	0a1b      	lsrs	r3, r3, #8
}
 800632a:	4618      	mov	r0, r3
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	1fff7584 	.word	0x1fff7584

08006338 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8006338:	b5b0      	push	{r4, r5, r7, lr}
 800633a:	b090      	sub	sp, #64	; 0x40
 800633c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1<<CFG_TASK_RTC, UTIL_SEQ_RFU, myRTC);
 800633e:	4a1e      	ldr	r2, [pc, #120]	; (80063b8 <APP_BLE_Init+0x80>)
 8006340:	2100      	movs	r1, #0
 8006342:	2004      	movs	r0, #4
 8006344:	f000 fe7e 	bl	8007044 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1<<CFG_TASK_RTC, CFG_SCH_PRIO_0);
 8006348:	2100      	movs	r1, #0
 800634a:	2004      	movs	r0, #4
 800634c:	f000 fe9c 	bl	8007088 <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8006350:	4b1a      	ldr	r3, [pc, #104]	; (80063bc <APP_BLE_Init+0x84>)
 8006352:	1d3c      	adds	r4, r7, #4
 8006354:	461d      	mov	r5, r3
 8006356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800635a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800635c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800635e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006362:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006366:	e884 0003 	stmia.w	r4, {r0, r1}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800636a:	f000 f861 	bl	8006430 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800636e:	2101      	movs	r1, #1
 8006370:	2002      	movs	r0, #2
 8006372:	f000 fd3b 	bl	8006dec <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8006376:	4a12      	ldr	r2, [pc, #72]	; (80063c0 <APP_BLE_Init+0x88>)
 8006378:	2100      	movs	r1, #0
 800637a:	2002      	movs	r0, #2
 800637c:	f000 fe62 	bl	8007044 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8006380:	1d3b      	adds	r3, r7, #4
 8006382:	4618      	mov	r0, r3
 8006384:	f7ff f8b4 	bl	80054f0 <SHCI_C2_BLE_Init>
 8006388:	4603      	mov	r3, r0
 800638a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 800638e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <APP_BLE_Init+0x62>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8006396:	f7fa feaf 	bl	80010f8 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800639a:	f000 f85f 	bl	800645c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800639e:	f7ff f81b 	bl	80053d8 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_BEACON_UPDATE_REQ_ID, UTIL_SEQ_RFU, Beacon_Update);
 80063a2:	4a08      	ldr	r2, [pc, #32]	; (80063c4 <APP_BLE_Init+0x8c>)
 80063a4:	2100      	movs	r1, #0
 80063a6:	2001      	movs	r0, #1
 80063a8:	f000 fe4c 	bl	8007044 <UTIL_SEQ_RegTask>
    EddystoneTLM_Process();
  }
  else if (CFG_BEACON_TYPE & CFG_IBEACON)
  {
    APP_DBG_MSG("Ibeacon advertise\n\r");
    IBeacon_Process();
 80063ac:	f000 fa6e 	bl	800688c <IBeacon_Process>
  }
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80063b0:	bf00      	nop
}
 80063b2:	3740      	adds	r7, #64	; 0x40
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bdb0      	pop	{r4, r5, r7, pc}
 80063b8:	080068dd 	.word	0x080068dd
 80063bc:	080082cc 	.word	0x080082cc
 80063c0:	0800570d 	.word	0x0800570d
 80063c4:	08006531 	.word	0x08006531

080063c8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3301      	adds	r3, #1
 80063d4:	617b      	str	r3, [r7, #20]

  switch (p_event_pckt->evt)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	2bff      	cmp	r3, #255	; 0xff
 80063dc:	d00e      	beq.n	80063fc <SVCCTL_App_Notification+0x34>
 80063de:	2bff      	cmp	r3, #255	; 0xff
 80063e0:	dc19      	bgt.n	8006416 <SVCCTL_App_Notification+0x4e>
 80063e2:	2b05      	cmp	r3, #5
 80063e4:	d019      	beq.n	800641a <SVCCTL_App_Notification+0x52>
 80063e6:	2b3e      	cmp	r3, #62	; 0x3e
 80063e8:	d000      	beq.n	80063ec <SVCCTL_App_Notification+0x24>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80063ea:	e014      	b.n	8006416 <SVCCTL_App_Notification+0x4e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	3302      	adds	r3, #2
 80063f0:	60fb      	str	r3, [r7, #12]
      switch (p_meta_evt->subevent)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b01      	cmp	r3, #1
          break;
 80063f8:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80063fa:	e011      	b.n	8006420 <SVCCTL_App_Notification+0x58>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	3302      	adds	r3, #2
 8006400:	613b      	str	r3, [r7, #16]
      switch (p_blecore_evt->ecode)
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	b29b      	uxth	r3, r3
 8006408:	461a      	mov	r2, r3
 800640a:	f240 4307 	movw	r3, #1031	; 0x407
 800640e:	429a      	cmp	r2, r3
 8006410:	d105      	bne.n	800641e <SVCCTL_App_Notification+0x56>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8006412:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8006414:	e003      	b.n	800641e <SVCCTL_App_Notification+0x56>
      break;
 8006416:	bf00      	nop
 8006418:	e002      	b.n	8006420 <SVCCTL_App_Notification+0x58>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800641a:	bf00      	nop
 800641c:	e000      	b.n	8006420 <SVCCTL_App_Notification+0x58>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800641e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8006420:	2301      	movs	r3, #1
}
 8006422:	4618      	mov	r0, r3
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
	...

08006430 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8006436:	4b06      	ldr	r3, [pc, #24]	; (8006450 <Ble_Tl_Init+0x20>)
 8006438:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800643a:	4b06      	ldr	r3, [pc, #24]	; (8006454 <Ble_Tl_Init+0x24>)
 800643c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800643e:	463b      	mov	r3, r7
 8006440:	4619      	mov	r1, r3
 8006442:	4805      	ldr	r0, [pc, #20]	; (8006458 <Ble_Tl_Init+0x28>)
 8006444:	f7ff f946 	bl	80056d4 <hci_init>

  return;
 8006448:	bf00      	nop
}
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	200300d8 	.word	0x200300d8
 8006454:	08006699 	.word	0x08006699
 8006458:	08006661 	.word	0x08006661

0800645c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800645c:	b5b0      	push	{r4, r5, r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af02      	add	r7, sp, #8
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8006462:	2300      	movs	r3, #0
 8006464:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006466:	2392      	movs	r3, #146	; 0x92
 8006468:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800646a:	f7fe fe8a 	bl	8005182 <hci_reset>
 800646e:	4603      	mov	r3, r0
 8006470:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8006472:	f000 f88f 	bl	8006594 <BleGetBdAddress>
 8006476:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	2106      	movs	r1, #6
 800647c:	2000      	movs	r0, #0
 800647e:	f7fe fd94 	bl	8004faa <aci_hal_write_config_data>
 8006482:	4603      	mov	r3, r0
 8006484:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8006486:	4a27      	ldr	r2, [pc, #156]	; (8006524 <Ble_Hci_Gap_Gatt_Init+0xc8>)
 8006488:	2110      	movs	r1, #16
 800648a:	2018      	movs	r0, #24
 800648c:	f7fe fd8d 	bl	8004faa <aci_hal_write_config_data>
 8006490:	4603      	mov	r3, r0
 8006492:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8006494:	4a24      	ldr	r2, [pc, #144]	; (8006528 <Ble_Hci_Gap_Gatt_Init+0xcc>)
 8006496:	2110      	movs	r1, #16
 8006498:	2008      	movs	r0, #8
 800649a:	f7fe fd86 	bl	8004faa <aci_hal_write_config_data>
 800649e:	4603      	mov	r3, r0
 80064a0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80064a2:	2118      	movs	r1, #24
 80064a4:	2001      	movs	r0, #1
 80064a6:	f7fe fe05 	bl	80050b4 <aci_hal_set_tx_power_level>
 80064aa:	4603      	mov	r3, r0
 80064ac:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80064ae:	f7fe fcae 	bl	8004e0e <aci_gatt_init>
 80064b2:	4603      	mov	r3, r0
 80064b4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80064ba:	7bfb      	ldrb	r3, [r7, #15]
 80064bc:	f043 0301 	orr.w	r3, r3, #1
 80064c0:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif /* BLE_CFG_CENTRAL == 1 */

  if (role > 0)
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01f      	beq.n	8006508 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = "STM32WB";
 80064c8:	4b18      	ldr	r3, [pc, #96]	; (800652c <Ble_Hci_Gap_Gatt_Init+0xd0>)
 80064ca:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80064cc:	1dba      	adds	r2, r7, #6
 80064ce:	7bf8      	ldrb	r0, [r7, #15]
 80064d0:	1cbb      	adds	r3, r7, #2
 80064d2:	9301      	str	r3, [sp, #4]
 80064d4:	1d3b      	adds	r3, r7, #4
 80064d6:	9300      	str	r3, [sp, #0]
 80064d8:	4613      	mov	r3, r2
 80064da:	2207      	movs	r2, #7
 80064dc:	2100      	movs	r1, #0
 80064de:	f7fe fb23 	bl	8004b28 <aci_gap_init>
 80064e2:	4603      	mov	r3, r0
 80064e4:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80064e6:	88fc      	ldrh	r4, [r7, #6]
 80064e8:	88bd      	ldrh	r5, [r7, #4]
 80064ea:	68b8      	ldr	r0, [r7, #8]
 80064ec:	f7f9 fe48 	bl	8000180 <strlen>
 80064f0:	4603      	mov	r3, r0
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	4613      	mov	r3, r2
 80064fa:	2200      	movs	r2, #0
 80064fc:	4629      	mov	r1, r5
 80064fe:	4620      	mov	r0, r4
 8006500:	f7fe fcaa 	bl	8004e58 <aci_gatt_update_char_value>
 8006504:	4603      	mov	r3, r0
 8006506:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8006508:	88f8      	ldrh	r0, [r7, #6]
 800650a:	8879      	ldrh	r1, [r7, #2]
 800650c:	463b      	mov	r3, r7
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	2302      	movs	r3, #2
 8006512:	2200      	movs	r2, #0
 8006514:	f7fe fca0 	bl	8004e58 <aci_gatt_update_char_value>
 8006518:	4603      	mov	r3, r0
 800651a:	75fb      	strb	r3, [r7, #23]
  else
  {
    BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Appearance\n");
  }

}
 800651c:	bf00      	nop
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bdb0      	pop	{r4, r5, r7, pc}
 8006524:	08008548 	.word	0x08008548
 8006528:	08008558 	.word	0x08008558
 800652c:	08008304 	.word	0x08008304

08006530 <Beacon_Update>:
static void Beacon_Update(void)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
  FLASH_EraseInitTypeDef erase;
  uint32_t pageError = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	603b      	str	r3, [r7, #0]

  if (sector_type != 0)
 800653a:	4b13      	ldr	r3, [pc, #76]	; (8006588 <Beacon_Update+0x58>)
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d01b      	beq.n	800657a <Beacon_Update+0x4a>
  {
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8006542:	2302      	movs	r3, #2
 8006544:	607b      	str	r3, [r7, #4]
    erase.Page      = sector_type;
 8006546:	4b10      	ldr	r3, [pc, #64]	; (8006588 <Beacon_Update+0x58>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	60bb      	str	r3, [r7, #8]
    if (sector_type == APP_SECTORS)
 800654c:	4b0e      	ldr	r3, [pc, #56]	; (8006588 <Beacon_Update+0x58>)
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	2b07      	cmp	r3, #7
 8006552:	d102      	bne.n	800655a <Beacon_Update+0x2a>
    {
      erase.NbPages = 2;  /* 2 sectors for beacon application */
 8006554:	2302      	movs	r3, #2
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	e001      	b.n	800655e <Beacon_Update+0x2e>
    }
    else
    {
      erase.NbPages = 1; /* 1 sector for beacon user data */
 800655a:	2301      	movs	r3, #1
 800655c:	60fb      	str	r3, [r7, #12]
    }

    HAL_FLASH_Unlock();
 800655e:	f7fb fa71 	bl	8001a44 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 8006562:	4b0a      	ldr	r3, [pc, #40]	; (800658c <Beacon_Update+0x5c>)
 8006564:	f248 0211 	movw	r2, #32785	; 0x8011
 8006568:	611a      	str	r2, [r3, #16]

    HAL_FLASHEx_Erase(&erase, &pageError);
 800656a:	463a      	mov	r2, r7
 800656c:	1d3b      	adds	r3, r7, #4
 800656e:	4611      	mov	r1, r2
 8006570:	4618      	mov	r0, r3
 8006572:	f7fb fb13 	bl	8001b9c <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 8006576:	f7fb fa87 	bl	8001a88 <HAL_FLASH_Lock>
  }

  *(uint32_t*) SRAM1_BASE = BOOT_MODE_AND_SECTOR;
 800657a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800657e:	4a04      	ldr	r2, [pc, #16]	; (8006590 <Beacon_Update+0x60>)
 8006580:	601a      	str	r2, [r3, #0]
  /**
   * Boot Mode:    1 (OTA)
   * Sector Index: 6
   * Nb Sectors  : 1
   */
  NVIC_SystemReset();
 8006582:	f7ff fe9f 	bl	80062c4 <__NVIC_SystemReset>
 8006586:	bf00      	nop
 8006588:	2000031a 	.word	0x2000031a
 800658c:	58004000 	.word	0x58004000
 8006590:	00010601 	.word	0x00010601

08006594 <BleGetBdAddress>:
}

const uint8_t* BleGetBdAddress(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800659a:	f7ff fea9 	bl	80062f0 <LL_FLASH_GetUDN>
 800659e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a6:	d023      	beq.n	80065f0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80065a8:	f7ff feba 	bl	8006320 <LL_FLASH_GetSTCompanyID>
 80065ac:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80065ae:	f7ff feab 	bl	8006308 <LL_FLASH_GetDeviceID>
 80065b2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	4b16      	ldr	r3, [pc, #88]	; (8006614 <BleGetBdAddress+0x80>)
 80065ba:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	0a1b      	lsrs	r3, r3, #8
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	4b14      	ldr	r3, [pc, #80]	; (8006614 <BleGetBdAddress+0x80>)
 80065c4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	4b12      	ldr	r3, [pc, #72]	; (8006614 <BleGetBdAddress+0x80>)
 80065cc:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	4b10      	ldr	r3, [pc, #64]	; (8006614 <BleGetBdAddress+0x80>)
 80065d4:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	0a1b      	lsrs	r3, r3, #8
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	4b0d      	ldr	r3, [pc, #52]	; (8006614 <BleGetBdAddress+0x80>)
 80065de:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	0c1b      	lsrs	r3, r3, #16
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	4b0b      	ldr	r3, [pc, #44]	; (8006614 <BleGetBdAddress+0x80>)
 80065e8:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80065ea:	4b0a      	ldr	r3, [pc, #40]	; (8006614 <BleGetBdAddress+0x80>)
 80065ec:	617b      	str	r3, [r7, #20]
 80065ee:	e00b      	b.n	8006608 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80065f0:	2000      	movs	r0, #0
 80065f2:	f7ff fd81 	bl	80060f8 <OTP_Read>
 80065f6:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	e001      	b.n	8006608 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8006604:	4b04      	ldr	r3, [pc, #16]	; (8006618 <BleGetBdAddress+0x84>)
 8006606:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8006608:	697b      	ldr	r3, [r7, #20]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	20000314 	.word	0x20000314
 8006618:	08008540 	.word	0x08008540

0800661c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8006624:	2100      	movs	r1, #0
 8006626:	2002      	movs	r0, #2
 8006628:	f000 fd2e 	bl	8007088 <UTIL_SEQ_SetTask>

  return;
 800662c:	bf00      	nop
}
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800663c:	2001      	movs	r0, #1
 800663e:	f000 fd8f 	bl	8007160 <UTIL_SEQ_SetEvt>

  return;
 8006642:	bf00      	nop
}
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8006652:	2001      	movs	r0, #1
 8006654:	f000 fda4 	bl	80071a0 <UTIL_SEQ_WaitEvt>

  return;
 8006658:	bf00      	nop
}
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	3308      	adds	r3, #8
 8006672:	4618      	mov	r0, r3
 8006674:	f7fe fee8 	bl	8005448 <SVCCTL_UserEvtRx>
 8006678:	4603      	mov	r3, r0
 800667a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800667c:	7afb      	ldrb	r3, [r7, #11]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2201      	movs	r2, #1
 8006686:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8006688:	e003      	b.n	8006692 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	701a      	strb	r2, [r3, #0]
  return;
 8006690:	bf00      	nop
}
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	4603      	mov	r3, r0
 80066a0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80066a2:	79fb      	ldrb	r3, [r7, #7]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <BLE_StatusNot+0x16>
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d006      	beq.n	80066ba <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80066ac:	e00b      	b.n	80066c6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80066ae:	2307      	movs	r3, #7
 80066b0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 fd14 	bl	80070e0 <UTIL_SEQ_PauseTask>
      break;
 80066b8:	e005      	b.n	80066c6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80066ba:	2307      	movs	r3, #7
 80066bc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 fd2e 	bl	8007120 <UTIL_SEQ_ResumeTask>
      break;
 80066c4:	bf00      	nop
  }

  return;
 80066c6:	bf00      	nop
}
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <IBeacon_Init>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/

static tBleStatus IBeacon_Init(IBeacon_InitTypeDef *IBeacon_Init)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b094      	sub	sp, #80	; 0x50
 80066d4:	af08      	add	r7, sp, #32
 80066d6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN IBeacon_Init_1 */

/* USER CODE END IBeacon_Init_1 */
  tBleStatus ret = BLE_STATUS_SUCCESS;
 80066d8:	2300      	movs	r3, #0
 80066da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint16_t AdvertisingInterval = (IBeacon_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	4a67      	ldr	r2, [pc, #412]	; (8006884 <IBeacon_Init+0x1b4>)
 80066e6:	fb82 1203 	smull	r1, r2, r2, r3
 80066ea:	1092      	asrs	r2, r2, #2
 80066ec:	17db      	asrs	r3, r3, #31
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* Disable scan response. */
  hci_le_set_scan_response_data(0, NULL);
 80066f2:	2100      	movs	r1, #0
 80066f4:	2000      	movs	r0, #0
 80066f6:	f7fe fd68 	bl	80051ca <hci_le_set_scan_response_data>

  /* Put the device in a non-connectable mode. */
  ret = aci_gap_set_discoverable(ADV_NONCONN_IND,                          /*< Advertise as non-connectable, undirected. */
 80066fa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80066fc:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80066fe:	2300      	movs	r3, #0
 8006700:	9306      	str	r3, [sp, #24]
 8006702:	2300      	movs	r3, #0
 8006704:	9305      	str	r3, [sp, #20]
 8006706:	2300      	movs	r3, #0
 8006708:	9304      	str	r3, [sp, #16]
 800670a:	2300      	movs	r3, #0
 800670c:	9303      	str	r3, [sp, #12]
 800670e:	2300      	movs	r3, #0
 8006710:	9302      	str	r3, [sp, #8]
 8006712:	2300      	movs	r3, #0
 8006714:	9301      	str	r3, [sp, #4]
 8006716:	2300      	movs	r3, #0
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	2300      	movs	r3, #0
 800671c:	2003      	movs	r0, #3
 800671e:	f7fe f909 	bl	8004934 <aci_gap_set_discoverable>
 8006722:	4603      	mov	r3, r0
 8006724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 PUBLIC_ADDR, NO_WHITE_LIST_USE,           /*< Use the public address, with no white list. */
                                 0, NULL,                                  /*< Do not use a local name. */
                                 0, NULL,                                  /*< Do not include the service UUID list. */
                                 0, 0);                                    /*< Do not set a slave connection interval. */

  if (ret != BLE_STATUS_SUCCESS)
 8006728:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <IBeacon_Init+0x66>
  {
    return ret;
 8006730:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006734:	e0a1      	b.n	800687a <IBeacon_Init+0x1aa>
  }

  /* Remove the TX power level advertisement (this is done to decrease the packet size). */
  ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 8006736:	200a      	movs	r0, #10
 8006738:	f7fe fb15 	bl	8004d66 <aci_gap_delete_ad_type>
 800673c:	4603      	mov	r3, r0
 800673e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8006742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006746:	2b00      	cmp	r3, #0
 8006748:	d002      	beq.n	8006750 <IBeacon_Init+0x80>
  {
    return ret;
 800674a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800674e:	e094      	b.n	800687a <IBeacon_Init+0x1aa>
  }

  uint8_t service_data[] =
 8006750:	231a      	movs	r3, #26
 8006752:	743b      	strb	r3, [r7, #16]
 8006754:	23ff      	movs	r3, #255	; 0xff
 8006756:	747b      	strb	r3, [r7, #17]
 8006758:	234c      	movs	r3, #76	; 0x4c
 800675a:	74bb      	strb	r3, [r7, #18]
 800675c:	2300      	movs	r3, #0
 800675e:	74fb      	strb	r3, [r7, #19]
 8006760:	2302      	movs	r3, #2
 8006762:	753b      	strb	r3, [r7, #20]
 8006764:	2315      	movs	r3, #21
 8006766:	757b      	strb	r3, [r7, #21]
  {
    26,                                                                      /*< Length. */
    AD_TYPE_MANUFACTURER_SPECIFIC_DATA,                                      /*< Manufacturer Specific Data data type value. */
    0x4C, 0x00, 0x02, 0x15,                                                  /*< 32-bit Manufacturer Data. */
    IBeacon_Init->UuID[0],                                                   /*< 16-byte Proximity UUID. */
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 800676e:	75bb      	strb	r3, [r7, #22]
    IBeacon_Init->UuID[1],
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8006774:	785b      	ldrb	r3, [r3, #1]
 8006776:	75fb      	strb	r3, [r7, #23]
    IBeacon_Init->UuID[2],
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800677c:	789b      	ldrb	r3, [r3, #2]
 800677e:	763b      	strb	r3, [r7, #24]
    IBeacon_Init->UuID[3],
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8006784:	78db      	ldrb	r3, [r3, #3]
 8006786:	767b      	strb	r3, [r7, #25]
    IBeacon_Init->UuID[4],
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800678c:	791b      	ldrb	r3, [r3, #4]
 800678e:	76bb      	strb	r3, [r7, #26]
    IBeacon_Init->UuID[5],
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8006794:	795b      	ldrb	r3, [r3, #5]
 8006796:	76fb      	strb	r3, [r7, #27]
    IBeacon_Init->UuID[6],
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800679c:	799b      	ldrb	r3, [r3, #6]
 800679e:	773b      	strb	r3, [r7, #28]
    IBeacon_Init->UuID[7],
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067a4:	79db      	ldrb	r3, [r3, #7]
 80067a6:	777b      	strb	r3, [r7, #29]
    IBeacon_Init->UuID[8],
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067ac:	7a1b      	ldrb	r3, [r3, #8]
 80067ae:	77bb      	strb	r3, [r7, #30]
    IBeacon_Init->UuID[9],
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067b4:	7a5b      	ldrb	r3, [r3, #9]
 80067b6:	77fb      	strb	r3, [r7, #31]
    IBeacon_Init->UuID[10],
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067bc:	7a9b      	ldrb	r3, [r3, #10]
 80067be:	f887 3020 	strb.w	r3, [r7, #32]
    IBeacon_Init->UuID[11],
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067c6:	7adb      	ldrb	r3, [r3, #11]
 80067c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    IBeacon_Init->UuID[12],
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067d0:	7b1b      	ldrb	r3, [r3, #12]
 80067d2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    IBeacon_Init->UuID[13],
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067da:	7b5b      	ldrb	r3, [r3, #13]
 80067dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    IBeacon_Init->UuID[14],
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067e4:	7b9b      	ldrb	r3, [r3, #14]
 80067e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    IBeacon_Init->UuID[15],
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067ee:	7bdb      	ldrb	r3, [r3, #15]
 80067f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    IBeacon_Init->MajorID[0],                                                /*< 2-byte Major. */
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 80067fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    IBeacon_Init->MajorID[1],
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 8006802:	785b      	ldrb	r3, [r3, #1]
 8006804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    IBeacon_Init->MinorID[0],                                                /*< 2-byte Minor. */
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 800680e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    IBeacon_Init->MinorID[1],
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68db      	ldr	r3, [r3, #12]
  uint8_t service_data[] =
 8006816:	785b      	ldrb	r3, [r3, #1]
 8006818:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    IBeacon_Init->CalibratedTxPower,                                         /*< Ranging data. */
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	7c1b      	ldrb	r3, [r3, #16]
  uint8_t service_data[] =
 8006820:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  };

  uint8_t flags[] =
 8006824:	4a18      	ldr	r2, [pc, #96]	; (8006888 <IBeacon_Init+0x1b8>)
 8006826:	f107 030c 	add.w	r3, r7, #12
 800682a:	6812      	ldr	r2, [r2, #0]
 800682c:	4611      	mov	r1, r2
 800682e:	8019      	strh	r1, [r3, #0]
 8006830:	3302      	adds	r3, #2
 8006832:	0c12      	lsrs	r2, r2, #16
 8006834:	701a      	strb	r2, [r3, #0]
    AD_TYPE_FLAGS,                                                          /*< Flags data type value. */
    (FLAG_BIT_LE_GENERAL_DISCOVERABLE_MODE | FLAG_BIT_BR_EDR_NOT_SUPPORTED) /*< BLE general discoverable, without BR/EDR support. */
  };

  /* Update the service data. */
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 8006836:	f107 0310 	add.w	r3, r7, #16
 800683a:	4619      	mov	r1, r3
 800683c:	201b      	movs	r0, #27
 800683e:	f7fe fa20 	bl	8004c82 <aci_gap_update_adv_data>
 8006842:	4603      	mov	r3, r0
 8006844:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8006848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800684c:	2b00      	cmp	r3, #0
 800684e:	d002      	beq.n	8006856 <IBeacon_Init+0x186>
  {
    return ret;
 8006850:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006854:	e011      	b.n	800687a <IBeacon_Init+0x1aa>
  }

  /* Update the adverstising flags. */
  ret = aci_gap_update_adv_data(sizeof(flags), flags);
 8006856:	f107 030c 	add.w	r3, r7, #12
 800685a:	4619      	mov	r1, r3
 800685c:	2003      	movs	r0, #3
 800685e:	f7fe fa10 	bl	8004c82 <aci_gap_update_adv_data>
 8006862:	4603      	mov	r3, r0
 8006864:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8006868:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <IBeacon_Init+0x1a6>
  {
    return ret;
 8006870:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006874:	e001      	b.n	800687a <IBeacon_Init+0x1aa>
  }
/* USER CODE BEGIN IBeacon_Init_2 */

/* USER CODE END IBeacon_Init_2 */
  return ret;
 8006876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800687a:	4618      	mov	r0, r3
 800687c:	3730      	adds	r7, #48	; 0x30
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	66666667 	.word	0x66666667
 8006888:	0800830c 	.word	0x0800830c

0800688c <IBeacon_Process>:

void IBeacon_Process(void)
{
 800688c:	b590      	push	{r4, r7, lr}
 800688e:	b08d      	sub	sp, #52	; 0x34
 8006890:	af00      	add	r7, sp, #0
/* USER CODE BEGIN IBeacon_Process_1 */

/* USER CODE END IBeacon_Process_1 */
  /* Default ibeacon */
  uint8_t UuID[]    = { UUID };
 8006892:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <IBeacon_Process+0x4c>)
 8006894:	f107 0420 	add.w	r4, r7, #32
 8006898:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800689a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t MajorID[] = { MAJOR_ID };
 800689e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068a2:	83bb      	strh	r3, [r7, #28]
  uint8_t MinorID[] = { MINOR_ID };
 80068a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068a8:	833b      	strh	r3, [r7, #24]

  IBeacon_InitTypeDef IBeacon_InitStruct =
 80068aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068ae:	80bb      	strh	r3, [r7, #4]
 80068b0:	f107 0320 	add.w	r3, r7, #32
 80068b4:	60bb      	str	r3, [r7, #8]
 80068b6:	f107 031c 	add.w	r3, r7, #28
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	f107 0318 	add.w	r3, r7, #24
 80068c0:	613b      	str	r3, [r7, #16]
 80068c2:	23c1      	movs	r3, #193	; 0xc1
 80068c4:	753b      	strb	r3, [r7, #20]
    data_address += 2;
    IBeacon_InitStruct.CalibratedTxPower = *(uint8_t *)(data_address);
  }
#endif

  IBeacon_Init(&IBeacon_InitStruct);
 80068c6:	1d3b      	adds	r3, r7, #4
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff ff01 	bl	80066d0 <IBeacon_Init>
/* USER CODE BEGIN IBeacon_Process_2 */

/* USER CODE END IBeacon_Process_2 */
}
 80068ce:	bf00      	nop
 80068d0:	3734      	adds	r7, #52	; 0x34
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd90      	pop	{r4, r7, pc}
 80068d6:	bf00      	nop
 80068d8:	08008310 	.word	0x08008310

080068dc <myRTC>:
/* USER CODE BEGIN FD */
void myRTC(void) {
 80068dc:	b5b0      	push	{r4, r5, r7, lr}
 80068de:	b088      	sub	sp, #32
 80068e0:	af00      	add	r7, sp, #0
	printf("Data Sent\n\r");
 80068e2:	4810      	ldr	r0, [pc, #64]	; (8006924 <myRTC+0x48>)
 80068e4:	f000 fd30 	bl	8007348 <iprintf>
	uint8_t service_data[] =
 80068e8:	4b0f      	ldr	r3, [pc, #60]	; (8006928 <myRTC+0x4c>)
 80068ea:	1d3c      	adds	r4, r7, #4
 80068ec:	461d      	mov	r5, r3
 80068ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80068f6:	c403      	stmia	r4!, {r0, r1}
 80068f8:	8022      	strh	r2, [r4, #0]
 80068fa:	3402      	adds	r4, #2
 80068fc:	0c13      	lsrs	r3, r2, #16
 80068fe:	7023      	strb	r3, [r4, #0]
	  0x00, 0x02,                                                /*< 2-byte Major. */
	  0x05, 0x0A,                                				/*< 2-byte Minor. */
	  0x01,                                         			   /*< Ranging data. */
	};

	aci_gap_update_adv_data(sizeof(service_data), service_data);
 8006900:	1d3b      	adds	r3, r7, #4
 8006902:	4619      	mov	r1, r3
 8006904:	201b      	movs	r0, #27
 8006906:	f7fe f9bc 	bl	8004c82 <aci_gap_update_adv_data>


	// Stop Mode //
	HAL_SuspendTick();
 800690a:	f7fa ff13 	bl	8001734 <HAL_SuspendTick>
	HAL_PWR_EnableSleepOnExit();
 800690e:	f7fb fc43 	bl	8002198 <HAL_PWR_EnableSleepOnExit>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006912:	2101      	movs	r1, #1
 8006914:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006918:	f7fb fc26 	bl	8002168 <HAL_PWR_EnterSTOPMode>

}
 800691c:	bf00      	nop
 800691e:	3720      	adds	r7, #32
 8006920:	46bd      	mov	sp, r7
 8006922:	bdb0      	pop	{r4, r5, r7, pc}
 8006924:	08008320 	.word	0x08008320
 8006928:	0800832c 	.word	0x0800832c

0800692c <LL_PWR_EnableBootC2>:
{
 800692c:	b480      	push	{r7}
 800692e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8006930:	4b05      	ldr	r3, [pc, #20]	; (8006948 <LL_PWR_EnableBootC2+0x1c>)
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	4a04      	ldr	r2, [pc, #16]	; (8006948 <LL_PWR_EnableBootC2+0x1c>)
 8006936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800693a:	60d3      	str	r3, [r2, #12]
}
 800693c:	bf00      	nop
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	58000400 	.word	0x58000400

0800694c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8006954:	4b06      	ldr	r3, [pc, #24]	; (8006970 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006956:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800695a:	4905      	ldr	r1, [pc, #20]	; (8006970 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4313      	orrs	r3, r2
 8006960:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8006964:	bf00      	nop
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	58000800 	.word	0x58000800

08006974 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800697c:	4b05      	ldr	r3, [pc, #20]	; (8006994 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800697e:	6a1a      	ldr	r2, [r3, #32]
 8006980:	4904      	ldr	r1, [pc, #16]	; (8006994 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4313      	orrs	r3, r2
 8006986:	620b      	str	r3, [r1, #32]
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	58000800 	.word	0x58000800

08006998 <LL_AHB3_GRP1_EnableClock>:
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80069a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80069b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4013      	ands	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80069bc:	68fb      	ldr	r3, [r7, #12]
}
 80069be:	bf00      	nop
 80069c0:	3714      	adds	r7, #20
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80069ca:	b480      	push	{r7}
 80069cc:	b085      	sub	sp, #20
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80069d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069d6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80069da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80069e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069ea:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4013      	ands	r3, r2
 80069f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80069f4:	68fb      	ldr	r3, [r7, #12]
}
 80069f6:	bf00      	nop
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <LL_C1_IPCC_EnableIT_TXF>:
{
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	601a      	str	r2, [r3, #0]
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <LL_C1_IPCC_EnableIT_RXO>:
{
 8006a22:	b480      	push	{r7}
 8006a24:	b083      	sub	sp, #12
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f043 0201 	orr.w	r2, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	601a      	str	r2, [r3, #0]
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8006a42:	b480      	push	{r7}
 8006a44:	b083      	sub	sp, #12
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	041b      	lsls	r3, r3, #16
 8006a54:	43db      	mvns	r3, r3
 8006a56:	401a      	ands	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	605a      	str	r2, [r3, #4]
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685a      	ldr	r2, [r3, #4]
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	041b      	lsls	r3, r3, #16
 8006a7a:	431a      	orrs	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	605a      	str	r2, [r3, #4]
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <LL_C1_IPCC_EnableReceiveChannel>:
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	401a      	ands	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	605a      	str	r2, [r3, #4]
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	609a      	str	r2, [r3, #8]
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <LL_C1_IPCC_SetFlag_CHx>:
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	041a      	lsls	r2, r3, #16
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	609a      	str	r2, [r3, #8]
}
 8006ade:	bf00      	nop
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	4013      	ands	r3, r2
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d101      	bne.n	8006b06 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e000      	b.n	8006b08 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69da      	ldr	r2, [r3, #28]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	4013      	ands	r3, r2
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d101      	bne.n	8006b30 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e000      	b.n	8006b32 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
	...

08006b40 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8006b44:	2102      	movs	r1, #2
 8006b46:	4819      	ldr	r0, [pc, #100]	; (8006bac <HW_IPCC_Rx_Handler+0x6c>)
 8006b48:	f7ff ffe4 	bl	8006b14 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d009      	beq.n	8006b66 <HW_IPCC_Rx_Handler+0x26>
 8006b52:	4b16      	ldr	r3, [pc, #88]	; (8006bac <HW_IPCC_Rx_Handler+0x6c>)
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	43db      	mvns	r3, r3
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8006b60:	f000 f8da 	bl	8006d18 <HW_IPCC_SYS_EvtHandler>
 8006b64:	e01f      	b.n	8006ba6 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8006b66:	2101      	movs	r1, #1
 8006b68:	4810      	ldr	r0, [pc, #64]	; (8006bac <HW_IPCC_Rx_Handler+0x6c>)
 8006b6a:	f7ff ffd3 	bl	8006b14 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d008      	beq.n	8006b86 <HW_IPCC_Rx_Handler+0x46>
 8006b74:	4b0d      	ldr	r3, [pc, #52]	; (8006bac <HW_IPCC_Rx_Handler+0x6c>)
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d102      	bne.n	8006b86 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8006b80:	f000 f88e 	bl	8006ca0 <HW_IPCC_BLE_EvtHandler>
 8006b84:	e00f      	b.n	8006ba6 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8006b86:	2108      	movs	r1, #8
 8006b88:	4808      	ldr	r0, [pc, #32]	; (8006bac <HW_IPCC_Rx_Handler+0x6c>)
 8006b8a:	f7ff ffc3 	bl	8006b14 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d009      	beq.n	8006ba8 <HW_IPCC_Rx_Handler+0x68>
 8006b94:	4b05      	ldr	r3, [pc, #20]	; (8006bac <HW_IPCC_Rx_Handler+0x6c>)
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	43db      	mvns	r3, r3
 8006b9a:	f003 0308 	and.w	r3, r3, #8
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8006ba2:	f000 f905 	bl	8006db0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
}
 8006baa:	bd80      	pop	{r7, pc}
 8006bac:	58000c00 	.word	0x58000c00

08006bb0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8006bb4:	2102      	movs	r1, #2
 8006bb6:	481a      	ldr	r0, [pc, #104]	; (8006c20 <HW_IPCC_Tx_Handler+0x70>)
 8006bb8:	f7ff ff97 	bl	8006aea <LL_C1_IPCC_IsActiveFlag_CHx>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d109      	bne.n	8006bd6 <HW_IPCC_Tx_Handler+0x26>
 8006bc2:	4b17      	ldr	r3, [pc, #92]	; (8006c20 <HW_IPCC_Tx_Handler+0x70>)
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	43db      	mvns	r3, r3
 8006bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8006bd0:	f000 f896 	bl	8006d00 <HW_IPCC_SYS_CmdEvtHandler>
 8006bd4:	e020      	b.n	8006c18 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8006bd6:	2108      	movs	r1, #8
 8006bd8:	4811      	ldr	r0, [pc, #68]	; (8006c20 <HW_IPCC_Tx_Handler+0x70>)
 8006bda:	f7ff ff86 	bl	8006aea <LL_C1_IPCC_IsActiveFlag_CHx>
 8006bde:	4603      	mov	r3, r0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d109      	bne.n	8006bf8 <HW_IPCC_Tx_Handler+0x48>
 8006be4:	4b0e      	ldr	r3, [pc, #56]	; (8006c20 <HW_IPCC_Tx_Handler+0x70>)
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	43db      	mvns	r3, r3
 8006bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d002      	beq.n	8006bf8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8006bf2:	f000 f8bf 	bl	8006d74 <HW_IPCC_MM_FreeBufHandler>
 8006bf6:	e00f      	b.n	8006c18 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8006bf8:	2120      	movs	r1, #32
 8006bfa:	4809      	ldr	r0, [pc, #36]	; (8006c20 <HW_IPCC_Tx_Handler+0x70>)
 8006bfc:	f7ff ff75 	bl	8006aea <LL_C1_IPCC_IsActiveFlag_CHx>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d109      	bne.n	8006c1a <HW_IPCC_Tx_Handler+0x6a>
 8006c06:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <HW_IPCC_Tx_Handler+0x70>)
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	43db      	mvns	r3, r3
 8006c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8006c14:	f000 f850 	bl	8006cb8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8006c18:	bf00      	nop
 8006c1a:	bf00      	nop
}
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	58000c00 	.word	0x58000c00

08006c24 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8006c28:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006c2c:	f7ff fecd 	bl	80069ca <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8006c30:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006c34:	f7ff fe9e 	bl	8006974 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8006c38:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006c3c:	f7ff fe86 	bl	800694c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8006c40:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8006c42:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8006c44:	f7ff fe72 	bl	800692c <LL_PWR_EnableBootC2>

  return;
 8006c48:	bf00      	nop
}
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8006c50:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006c54:	f7ff fea0 	bl	8006998 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8006c58:	4806      	ldr	r0, [pc, #24]	; (8006c74 <HW_IPCC_Init+0x28>)
 8006c5a:	f7ff fee2 	bl	8006a22 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8006c5e:	4805      	ldr	r0, [pc, #20]	; (8006c74 <HW_IPCC_Init+0x28>)
 8006c60:	f7ff fecf 	bl	8006a02 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006c64:	202c      	movs	r0, #44	; 0x2c
 8006c66:	f7fa feb6 	bl	80019d6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006c6a:	202d      	movs	r0, #45	; 0x2d
 8006c6c:	f7fa feb3 	bl	80019d6 <HAL_NVIC_EnableIRQ>

  return;
 8006c70:	bf00      	nop
}
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	58000c00 	.word	0x58000c00

08006c78 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	4802      	ldr	r0, [pc, #8]	; (8006c88 <HW_IPCC_BLE_Init+0x10>)
 8006c80:	f7ff ff04 	bl	8006a8c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006c84:	bf00      	nop
}
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	58000c00 	.word	0x58000c00

08006c8c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 8006c90:	2101      	movs	r1, #1
 8006c92:	4802      	ldr	r0, [pc, #8]	; (8006c9c <HW_IPCC_BLE_SendCmd+0x10>)
 8006c94:	f7ff ff1a 	bl	8006acc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006c98:	bf00      	nop
}
 8006c9a:	bd80      	pop	{r7, pc}
 8006c9c:	58000c00 	.word	0x58000c00

08006ca0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8006ca4:	f7ff f870 	bl	8005d88 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006ca8:	2101      	movs	r1, #1
 8006caa:	4802      	ldr	r0, [pc, #8]	; (8006cb4 <HW_IPCC_BLE_EvtHandler+0x14>)
 8006cac:	f7ff ff00 	bl	8006ab0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006cb0:	bf00      	nop
}
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	58000c00 	.word	0x58000c00

08006cb8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8006cbc:	2120      	movs	r1, #32
 8006cbe:	4803      	ldr	r0, [pc, #12]	; (8006ccc <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8006cc0:	f7ff fed2 	bl	8006a68 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8006cc4:	f7ff f890 	bl	8005de8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8006cc8:	bf00      	nop
}
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	58000c00 	.word	0x58000c00

08006cd0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006cd4:	2102      	movs	r1, #2
 8006cd6:	4802      	ldr	r0, [pc, #8]	; (8006ce0 <HW_IPCC_SYS_Init+0x10>)
 8006cd8:	f7ff fed8 	bl	8006a8c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006cdc:	bf00      	nop
}
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	58000c00 	.word	0x58000c00

08006ce4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006ce8:	2102      	movs	r1, #2
 8006cea:	4804      	ldr	r0, [pc, #16]	; (8006cfc <HW_IPCC_SYS_SendCmd+0x18>)
 8006cec:	f7ff feee 	bl	8006acc <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006cf0:	2102      	movs	r1, #2
 8006cf2:	4802      	ldr	r0, [pc, #8]	; (8006cfc <HW_IPCC_SYS_SendCmd+0x18>)
 8006cf4:	f7ff fea5 	bl	8006a42 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8006cf8:	bf00      	nop
}
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	58000c00 	.word	0x58000c00

08006d00 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006d04:	2102      	movs	r1, #2
 8006d06:	4803      	ldr	r0, [pc, #12]	; (8006d14 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8006d08:	f7ff feae 	bl	8006a68 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8006d0c:	f7ff f8bc 	bl	8005e88 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8006d10:	bf00      	nop
}
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	58000c00 	.word	0x58000c00

08006d18 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8006d1c:	f7ff f8ca 	bl	8005eb4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006d20:	2102      	movs	r1, #2
 8006d22:	4802      	ldr	r0, [pc, #8]	; (8006d2c <HW_IPCC_SYS_EvtHandler+0x14>)
 8006d24:	f7ff fec4 	bl	8006ab0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006d28:	bf00      	nop
}
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	58000c00 	.word	0x58000c00

08006d30 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8006d38:	2108      	movs	r1, #8
 8006d3a:	480c      	ldr	r0, [pc, #48]	; (8006d6c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006d3c:	f7ff fed5 	bl	8006aea <LL_C1_IPCC_IsActiveFlag_CHx>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d007      	beq.n	8006d56 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8006d46:	4a0a      	ldr	r2, [pc, #40]	; (8006d70 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006d4c:	2108      	movs	r1, #8
 8006d4e:	4807      	ldr	r0, [pc, #28]	; (8006d6c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006d50:	f7ff fe77 	bl	8006a42 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8006d54:	e006      	b.n	8006d64 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006d5a:	2108      	movs	r1, #8
 8006d5c:	4803      	ldr	r0, [pc, #12]	; (8006d6c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006d5e:	f7ff feb5 	bl	8006acc <LL_C1_IPCC_SetFlag_CHx>
  return;
 8006d62:	bf00      	nop
}
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	58000c00 	.word	0x58000c00
 8006d70:	2000031c 	.word	0x2000031c

08006d74 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006d78:	2108      	movs	r1, #8
 8006d7a:	4806      	ldr	r0, [pc, #24]	; (8006d94 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006d7c:	f7ff fe74 	bl	8006a68 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8006d80:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006d86:	2108      	movs	r1, #8
 8006d88:	4802      	ldr	r0, [pc, #8]	; (8006d94 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006d8a:	f7ff fe9f 	bl	8006acc <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006d8e:	bf00      	nop
}
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	58000c00 	.word	0x58000c00
 8006d98:	2000031c 	.word	0x2000031c

08006d9c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006da0:	2108      	movs	r1, #8
 8006da2:	4802      	ldr	r0, [pc, #8]	; (8006dac <HW_IPCC_TRACES_Init+0x10>)
 8006da4:	f7ff fe72 	bl	8006a8c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006da8:	bf00      	nop
}
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	58000c00 	.word	0x58000c00

08006db0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8006db4:	f7ff f926 	bl	8006004 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006db8:	2108      	movs	r1, #8
 8006dba:	4802      	ldr	r0, [pc, #8]	; (8006dc4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8006dbc:	f7ff fe78 	bl	8006ab0 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006dc0:	bf00      	nop
}
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	58000c00 	.word	0x58000c00

08006dc8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <UTIL_LPM_Init+0x1c>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8006dd2:	4b05      	ldr	r3, [pc, #20]	; (8006de8 <UTIL_LPM_Init+0x20>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8006dd8:	bf00      	nop
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	20000320 	.word	0x20000320
 8006de8:	20000324 	.word	0x20000324

08006dec <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	460b      	mov	r3, r1
 8006df6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006df8:	f3ef 8310 	mrs	r3, PRIMASK
 8006dfc:	613b      	str	r3, [r7, #16]
  return(result);
 8006dfe:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8006e00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e02:	b672      	cpsid	i
}
 8006e04:	bf00      	nop
  
  switch(state)
 8006e06:	78fb      	ldrb	r3, [r7, #3]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d008      	beq.n	8006e1e <UTIL_LPM_SetOffMode+0x32>
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d10e      	bne.n	8006e2e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8006e10:	4b0d      	ldr	r3, [pc, #52]	; (8006e48 <UTIL_LPM_SetOffMode+0x5c>)
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	4a0b      	ldr	r2, [pc, #44]	; (8006e48 <UTIL_LPM_SetOffMode+0x5c>)
 8006e1a:	6013      	str	r3, [r2, #0]
      break;
 8006e1c:	e008      	b.n	8006e30 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	43da      	mvns	r2, r3
 8006e22:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <UTIL_LPM_SetOffMode+0x5c>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4013      	ands	r3, r2
 8006e28:	4a07      	ldr	r2, [pc, #28]	; (8006e48 <UTIL_LPM_SetOffMode+0x5c>)
 8006e2a:	6013      	str	r3, [r2, #0]
      break;
 8006e2c:	e000      	b.n	8006e30 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8006e2e:	bf00      	nop
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f383 8810 	msr	PRIMASK, r3
}
 8006e3a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8006e3c:	bf00      	nop
 8006e3e:	371c      	adds	r7, #28
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr
 8006e48:	20000324 	.word	0x20000324

08006e4c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b090      	sub	sp, #64	; 0x40
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8006e54:	4b73      	ldr	r3, [pc, #460]	; (8007024 <UTIL_SEQ_Run+0x1d8>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8006e5a:	4b72      	ldr	r3, [pc, #456]	; (8007024 <UTIL_SEQ_Run+0x1d8>)
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4013      	ands	r3, r2
 8006e62:	4a70      	ldr	r2, [pc, #448]	; (8007024 <UTIL_SEQ_Run+0x1d8>)
 8006e64:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8006e66:	4b70      	ldr	r3, [pc, #448]	; (8007028 <UTIL_SEQ_Run+0x1dc>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8006e6c:	4b6f      	ldr	r3, [pc, #444]	; (800702c <UTIL_SEQ_Run+0x1e0>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8006e72:	4b6f      	ldr	r3, [pc, #444]	; (8007030 <UTIL_SEQ_Run+0x1e4>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8006e78:	4b6e      	ldr	r3, [pc, #440]	; (8007034 <UTIL_SEQ_Run+0x1e8>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8006e7e:	e08d      	b.n	8006f9c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8006e84:	e002      	b.n	8006e8c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8006e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e88:	3301      	adds	r3, #1
 8006e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8006e8c:	4a6a      	ldr	r2, [pc, #424]	; (8007038 <UTIL_SEQ_Run+0x1ec>)
 8006e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e90:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e96:	401a      	ands	r2, r3
 8006e98:	4b62      	ldr	r3, [pc, #392]	; (8007024 <UTIL_SEQ_Run+0x1d8>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0f1      	beq.n	8006e86 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8006ea2:	4a65      	ldr	r2, [pc, #404]	; (8007038 <UTIL_SEQ_Run+0x1ec>)
 8006ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	401a      	ands	r2, r3
 8006eae:	4b5d      	ldr	r3, [pc, #372]	; (8007024 <UTIL_SEQ_Run+0x1d8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8006eb6:	4a60      	ldr	r2, [pc, #384]	; (8007038 <UTIL_SEQ_Run+0x1ec>)
 8006eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	4413      	add	r3, r2
 8006ebe:	685a      	ldr	r2, [r3, #4]
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d106      	bne.n	8006ed6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8006ec8:	4a5b      	ldr	r2, [pc, #364]	; (8007038 <UTIL_SEQ_Run+0x1ec>)
 8006eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ecc:	00db      	lsls	r3, r3, #3
 8006ece:	4413      	add	r3, r2
 8006ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8006ed6:	4a58      	ldr	r2, [pc, #352]	; (8007038 <UTIL_SEQ_Run+0x1ec>)
 8006ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	4413      	add	r3, r2
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 f9b3 	bl	8007250 <SEQ_BitPosition>
 8006eea:	4603      	mov	r3, r0
 8006eec:	461a      	mov	r2, r3
 8006eee:	4b53      	ldr	r3, [pc, #332]	; (800703c <UTIL_SEQ_Run+0x1f0>)
 8006ef0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8006ef2:	4a51      	ldr	r2, [pc, #324]	; (8007038 <UTIL_SEQ_Run+0x1ec>)
 8006ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	4413      	add	r3, r2
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	4b4f      	ldr	r3, [pc, #316]	; (800703c <UTIL_SEQ_Run+0x1f0>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2101      	movs	r1, #1
 8006f02:	fa01 f303 	lsl.w	r3, r1, r3
 8006f06:	43db      	mvns	r3, r3
 8006f08:	401a      	ands	r2, r3
 8006f0a:	494b      	ldr	r1, [pc, #300]	; (8007038 <UTIL_SEQ_Run+0x1ec>)
 8006f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	440b      	add	r3, r1
 8006f12:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f14:	f3ef 8310 	mrs	r3, PRIMASK
 8006f18:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f1a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006f1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f1e:	b672      	cpsid	i
}
 8006f20:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8006f22:	4b46      	ldr	r3, [pc, #280]	; (800703c <UTIL_SEQ_Run+0x1f0>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2201      	movs	r2, #1
 8006f28:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2c:	43da      	mvns	r2, r3
 8006f2e:	4b3e      	ldr	r3, [pc, #248]	; (8007028 <UTIL_SEQ_Run+0x1dc>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4013      	ands	r3, r2
 8006f34:	4a3c      	ldr	r2, [pc, #240]	; (8007028 <UTIL_SEQ_Run+0x1dc>)
 8006f36:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8006f38:	2302      	movs	r3, #2
 8006f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f3c:	e013      	b.n	8006f66 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8006f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f40:	3b01      	subs	r3, #1
 8006f42:	4a3d      	ldr	r2, [pc, #244]	; (8007038 <UTIL_SEQ_Run+0x1ec>)
 8006f44:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8006f48:	4b3c      	ldr	r3, [pc, #240]	; (800703c <UTIL_SEQ_Run+0x1f0>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f52:	43da      	mvns	r2, r3
 8006f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f56:	3b01      	subs	r3, #1
 8006f58:	400a      	ands	r2, r1
 8006f5a:	4937      	ldr	r1, [pc, #220]	; (8007038 <UTIL_SEQ_Run+0x1ec>)
 8006f5c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8006f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f62:	3b01      	subs	r3, #1
 8006f64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e8      	bne.n	8006f3e <UTIL_SEQ_Run+0xf2>
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f383 8810 	msr	PRIMASK, r3
}
 8006f76:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8006f78:	4b30      	ldr	r3, [pc, #192]	; (800703c <UTIL_SEQ_Run+0x1f0>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a30      	ldr	r2, [pc, #192]	; (8007040 <UTIL_SEQ_Run+0x1f4>)
 8006f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f82:	4798      	blx	r3

    local_taskset = TaskSet;
 8006f84:	4b28      	ldr	r3, [pc, #160]	; (8007028 <UTIL_SEQ_Run+0x1dc>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8006f8a:	4b28      	ldr	r3, [pc, #160]	; (800702c <UTIL_SEQ_Run+0x1e0>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8006f90:	4b27      	ldr	r3, [pc, #156]	; (8007030 <UTIL_SEQ_Run+0x1e4>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8006f96:	4b27      	ldr	r3, [pc, #156]	; (8007034 <UTIL_SEQ_Run+0x1e8>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8006f9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa0:	401a      	ands	r2, r3
 8006fa2:	4b20      	ldr	r3, [pc, #128]	; (8007024 <UTIL_SEQ_Run+0x1d8>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d005      	beq.n	8006fb8 <UTIL_SEQ_Run+0x16c>
 8006fac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f43f af64 	beq.w	8006e80 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8006fb8:	4b20      	ldr	r3, [pc, #128]	; (800703c <UTIL_SEQ_Run+0x1f0>)
 8006fba:	f04f 32ff 	mov.w	r2, #4294967295
 8006fbe:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8006fc0:	f000 f938 	bl	8007234 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fc4:	f3ef 8310 	mrs	r3, PRIMASK
 8006fc8:	613b      	str	r3, [r7, #16]
  return(result);
 8006fca:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8006fcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8006fce:	b672      	cpsid	i
}
 8006fd0:	bf00      	nop
  local_taskset = TaskSet;
 8006fd2:	4b15      	ldr	r3, [pc, #84]	; (8007028 <UTIL_SEQ_Run+0x1dc>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8006fd8:	4b14      	ldr	r3, [pc, #80]	; (800702c <UTIL_SEQ_Run+0x1e0>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8006fde:	4b14      	ldr	r3, [pc, #80]	; (8007030 <UTIL_SEQ_Run+0x1e4>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8006fe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	401a      	ands	r2, r3
 8006fea:	4b0e      	ldr	r3, [pc, #56]	; (8007024 <UTIL_SEQ_Run+0x1d8>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4013      	ands	r3, r2
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d107      	bne.n	8007004 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8006ff4:	4b0f      	ldr	r3, [pc, #60]	; (8007034 <UTIL_SEQ_Run+0x1e8>)
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8007000:	f7f9 fda9 	bl	8000b56 <UTIL_SEQ_Idle>
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f383 8810 	msr	PRIMASK, r3
}
 800700e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8007010:	f000 f917 	bl	8007242 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8007014:	4a03      	ldr	r2, [pc, #12]	; (8007024 <UTIL_SEQ_Run+0x1d8>)
 8007016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007018:	6013      	str	r3, [r2, #0]

  return;
 800701a:	bf00      	nop
}
 800701c:	3740      	adds	r7, #64	; 0x40
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20000020 	.word	0x20000020
 8007028:	20000328 	.word	0x20000328
 800702c:	2000032c 	.word	0x2000032c
 8007030:	2000001c 	.word	0x2000001c
 8007034:	20000330 	.word	0x20000330
 8007038:	200003b8 	.word	0x200003b8
 800703c:	20000334 	.word	0x20000334
 8007040:	20000338 	.word	0x20000338

08007044 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007050:	f3ef 8310 	mrs	r3, PRIMASK
 8007054:	617b      	str	r3, [r7, #20]
  return(result);
 8007056:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8007058:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800705a:	b672      	cpsid	i
}
 800705c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800705e:	68f8      	ldr	r0, [r7, #12]
 8007060:	f000 f8f6 	bl	8007250 <SEQ_BitPosition>
 8007064:	4603      	mov	r3, r0
 8007066:	4619      	mov	r1, r3
 8007068:	4a06      	ldr	r2, [pc, #24]	; (8007084 <UTIL_SEQ_RegTask+0x40>)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	f383 8810 	msr	PRIMASK, r3
}
 800707a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800707c:	bf00      	nop
}
 800707e:	3720      	adds	r7, #32
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20000338 	.word	0x20000338

08007088 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8007088:	b480      	push	{r7}
 800708a:	b087      	sub	sp, #28
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007092:	f3ef 8310 	mrs	r3, PRIMASK
 8007096:	60fb      	str	r3, [r7, #12]
  return(result);
 8007098:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800709a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800709c:	b672      	cpsid	i
}
 800709e:	bf00      	nop

  TaskSet |= TaskId_bm;
 80070a0:	4b0d      	ldr	r3, [pc, #52]	; (80070d8 <UTIL_SEQ_SetTask+0x50>)
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	4a0b      	ldr	r2, [pc, #44]	; (80070d8 <UTIL_SEQ_SetTask+0x50>)
 80070aa:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80070ac:	4a0b      	ldr	r2, [pc, #44]	; (80070dc <UTIL_SEQ_SetTask+0x54>)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	431a      	orrs	r2, r3
 80070b8:	4908      	ldr	r1, [pc, #32]	; (80070dc <UTIL_SEQ_SetTask+0x54>)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f383 8810 	msr	PRIMASK, r3
}
 80070ca:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80070cc:	bf00      	nop
}
 80070ce:	371c      	adds	r7, #28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	20000328 	.word	0x20000328
 80070dc:	200003b8 	.word	0x200003b8

080070e0 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070e8:	f3ef 8310 	mrs	r3, PRIMASK
 80070ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80070ee:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80070f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80070f2:	b672      	cpsid	i
}
 80070f4:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	43da      	mvns	r2, r3
 80070fa:	4b08      	ldr	r3, [pc, #32]	; (800711c <UTIL_SEQ_PauseTask+0x3c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4013      	ands	r3, r2
 8007100:	4a06      	ldr	r2, [pc, #24]	; (800711c <UTIL_SEQ_PauseTask+0x3c>)
 8007102:	6013      	str	r3, [r2, #0]
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f383 8810 	msr	PRIMASK, r3
}
 800710e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007110:	bf00      	nop
}
 8007112:	371c      	adds	r7, #28
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	2000001c 	.word	0x2000001c

08007120 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007128:	f3ef 8310 	mrs	r3, PRIMASK
 800712c:	60fb      	str	r3, [r7, #12]
  return(result);
 800712e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007130:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007132:	b672      	cpsid	i
}
 8007134:	bf00      	nop

  TaskMask |= TaskId_bm;
 8007136:	4b09      	ldr	r3, [pc, #36]	; (800715c <UTIL_SEQ_ResumeTask+0x3c>)
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4313      	orrs	r3, r2
 800713e:	4a07      	ldr	r2, [pc, #28]	; (800715c <UTIL_SEQ_ResumeTask+0x3c>)
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f383 8810 	msr	PRIMASK, r3
}
 800714c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800714e:	bf00      	nop
}
 8007150:	371c      	adds	r7, #28
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	2000001c 	.word	0x2000001c

08007160 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007168:	f3ef 8310 	mrs	r3, PRIMASK
 800716c:	60fb      	str	r3, [r7, #12]
  return(result);
 800716e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007170:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007172:	b672      	cpsid	i
}
 8007174:	bf00      	nop

  EvtSet |= EvtId_bm;
 8007176:	4b09      	ldr	r3, [pc, #36]	; (800719c <UTIL_SEQ_SetEvt+0x3c>)
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4313      	orrs	r3, r2
 800717e:	4a07      	ldr	r2, [pc, #28]	; (800719c <UTIL_SEQ_SetEvt+0x3c>)
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	f383 8810 	msr	PRIMASK, r3
}
 800718c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800718e:	bf00      	nop
}
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	2000032c 	.word	0x2000032c

080071a0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80071a8:	4b1f      	ldr	r3, [pc, #124]	; (8007228 <UTIL_SEQ_WaitEvt+0x88>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80071ae:	4b1e      	ldr	r3, [pc, #120]	; (8007228 <UTIL_SEQ_WaitEvt+0x88>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b6:	d102      	bne.n	80071be <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80071b8:	2300      	movs	r3, #0
 80071ba:	61fb      	str	r3, [r7, #28]
 80071bc:	e005      	b.n	80071ca <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80071be:	4b1a      	ldr	r3, [pc, #104]	; (8007228 <UTIL_SEQ_WaitEvt+0x88>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2201      	movs	r2, #1
 80071c4:	fa02 f303 	lsl.w	r3, r2, r3
 80071c8:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80071ca:	4b18      	ldr	r3, [pc, #96]	; (800722c <UTIL_SEQ_WaitEvt+0x8c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80071d0:	4a16      	ldr	r2, [pc, #88]	; (800722c <UTIL_SEQ_WaitEvt+0x8c>)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80071d6:	e003      	b.n	80071e0 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80071d8:	6879      	ldr	r1, [r7, #4]
 80071da:	69f8      	ldr	r0, [r7, #28]
 80071dc:	f7f9 fcc2 	bl	8000b64 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80071e0:	4b13      	ldr	r3, [pc, #76]	; (8007230 <UTIL_SEQ_WaitEvt+0x90>)
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4013      	ands	r3, r2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d0f5      	beq.n	80071d8 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80071ec:	4a0e      	ldr	r2, [pc, #56]	; (8007228 <UTIL_SEQ_WaitEvt+0x88>)
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071f2:	f3ef 8310 	mrs	r3, PRIMASK
 80071f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80071f8:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80071fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80071fc:	b672      	cpsid	i
}
 80071fe:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	43da      	mvns	r2, r3
 8007204:	4b0a      	ldr	r3, [pc, #40]	; (8007230 <UTIL_SEQ_WaitEvt+0x90>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4013      	ands	r3, r2
 800720a:	4a09      	ldr	r2, [pc, #36]	; (8007230 <UTIL_SEQ_WaitEvt+0x90>)
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f383 8810 	msr	PRIMASK, r3
}
 8007218:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800721a:	4a04      	ldr	r2, [pc, #16]	; (800722c <UTIL_SEQ_WaitEvt+0x8c>)
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	6013      	str	r3, [r2, #0]
  return;
 8007220:	bf00      	nop
}
 8007222:	3720      	adds	r7, #32
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	20000334 	.word	0x20000334
 800722c:	20000330 	.word	0x20000330
 8007230:	2000032c 	.word	0x2000032c

08007234 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8007234:	b480      	push	{r7}
 8007236:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007238:	bf00      	nop
}
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8007242:	b480      	push	{r7}
 8007244:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007246:	bf00      	nop
}
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	0c1b      	lsrs	r3, r3, #16
 8007264:	041b      	lsls	r3, r3, #16
 8007266:	2b00      	cmp	r3, #0
 8007268:	d104      	bne.n	8007274 <SEQ_BitPosition+0x24>
 800726a:	2310      	movs	r3, #16
 800726c:	73fb      	strb	r3, [r7, #15]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	041b      	lsls	r3, r3, #16
 8007272:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d105      	bne.n	800728a <SEQ_BitPosition+0x3a>
 800727e:	7bfb      	ldrb	r3, [r7, #15]
 8007280:	3308      	adds	r3, #8
 8007282:	73fb      	strb	r3, [r7, #15]
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	021b      	lsls	r3, r3, #8
 8007288:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d105      	bne.n	80072a0 <SEQ_BitPosition+0x50>
 8007294:	7bfb      	ldrb	r3, [r7, #15]
 8007296:	3304      	adds	r3, #4
 8007298:	73fb      	strb	r3, [r7, #15]
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	011b      	lsls	r3, r3, #4
 800729e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	0f1b      	lsrs	r3, r3, #28
 80072a4:	4a07      	ldr	r2, [pc, #28]	; (80072c4 <SEQ_BitPosition+0x74>)
 80072a6:	5cd2      	ldrb	r2, [r2, r3]
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
 80072aa:	4413      	add	r3, r2
 80072ac:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80072ae:	7bfb      	ldrb	r3, [r7, #15]
 80072b0:	f1c3 031f 	rsb	r3, r3, #31
 80072b4:	b2db      	uxtb	r3, r3
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	08008568 	.word	0x08008568

080072c8 <__errno>:
 80072c8:	4b01      	ldr	r3, [pc, #4]	; (80072d0 <__errno+0x8>)
 80072ca:	6818      	ldr	r0, [r3, #0]
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	20000024 	.word	0x20000024

080072d4 <__libc_init_array>:
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	4d0d      	ldr	r5, [pc, #52]	; (800730c <__libc_init_array+0x38>)
 80072d8:	4c0d      	ldr	r4, [pc, #52]	; (8007310 <__libc_init_array+0x3c>)
 80072da:	1b64      	subs	r4, r4, r5
 80072dc:	10a4      	asrs	r4, r4, #2
 80072de:	2600      	movs	r6, #0
 80072e0:	42a6      	cmp	r6, r4
 80072e2:	d109      	bne.n	80072f8 <__libc_init_array+0x24>
 80072e4:	4d0b      	ldr	r5, [pc, #44]	; (8007314 <__libc_init_array+0x40>)
 80072e6:	4c0c      	ldr	r4, [pc, #48]	; (8007318 <__libc_init_array+0x44>)
 80072e8:	f000 ffbc 	bl	8008264 <_init>
 80072ec:	1b64      	subs	r4, r4, r5
 80072ee:	10a4      	asrs	r4, r4, #2
 80072f0:	2600      	movs	r6, #0
 80072f2:	42a6      	cmp	r6, r4
 80072f4:	d105      	bne.n	8007302 <__libc_init_array+0x2e>
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
 80072f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80072fc:	4798      	blx	r3
 80072fe:	3601      	adds	r6, #1
 8007300:	e7ee      	b.n	80072e0 <__libc_init_array+0xc>
 8007302:	f855 3b04 	ldr.w	r3, [r5], #4
 8007306:	4798      	blx	r3
 8007308:	3601      	adds	r6, #1
 800730a:	e7f2      	b.n	80072f2 <__libc_init_array+0x1e>
 800730c:	08008618 	.word	0x08008618
 8007310:	08008618 	.word	0x08008618
 8007314:	08008618 	.word	0x08008618
 8007318:	0800861c 	.word	0x0800861c

0800731c <memcpy>:
 800731c:	440a      	add	r2, r1
 800731e:	4291      	cmp	r1, r2
 8007320:	f100 33ff 	add.w	r3, r0, #4294967295
 8007324:	d100      	bne.n	8007328 <memcpy+0xc>
 8007326:	4770      	bx	lr
 8007328:	b510      	push	{r4, lr}
 800732a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800732e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007332:	4291      	cmp	r1, r2
 8007334:	d1f9      	bne.n	800732a <memcpy+0xe>
 8007336:	bd10      	pop	{r4, pc}

08007338 <memset>:
 8007338:	4402      	add	r2, r0
 800733a:	4603      	mov	r3, r0
 800733c:	4293      	cmp	r3, r2
 800733e:	d100      	bne.n	8007342 <memset+0xa>
 8007340:	4770      	bx	lr
 8007342:	f803 1b01 	strb.w	r1, [r3], #1
 8007346:	e7f9      	b.n	800733c <memset+0x4>

08007348 <iprintf>:
 8007348:	b40f      	push	{r0, r1, r2, r3}
 800734a:	4b0a      	ldr	r3, [pc, #40]	; (8007374 <iprintf+0x2c>)
 800734c:	b513      	push	{r0, r1, r4, lr}
 800734e:	681c      	ldr	r4, [r3, #0]
 8007350:	b124      	cbz	r4, 800735c <iprintf+0x14>
 8007352:	69a3      	ldr	r3, [r4, #24]
 8007354:	b913      	cbnz	r3, 800735c <iprintf+0x14>
 8007356:	4620      	mov	r0, r4
 8007358:	f000 f866 	bl	8007428 <__sinit>
 800735c:	ab05      	add	r3, sp, #20
 800735e:	9a04      	ldr	r2, [sp, #16]
 8007360:	68a1      	ldr	r1, [r4, #8]
 8007362:	9301      	str	r3, [sp, #4]
 8007364:	4620      	mov	r0, r4
 8007366:	f000 f9bd 	bl	80076e4 <_vfiprintf_r>
 800736a:	b002      	add	sp, #8
 800736c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007370:	b004      	add	sp, #16
 8007372:	4770      	bx	lr
 8007374:	20000024 	.word	0x20000024

08007378 <std>:
 8007378:	2300      	movs	r3, #0
 800737a:	b510      	push	{r4, lr}
 800737c:	4604      	mov	r4, r0
 800737e:	e9c0 3300 	strd	r3, r3, [r0]
 8007382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007386:	6083      	str	r3, [r0, #8]
 8007388:	8181      	strh	r1, [r0, #12]
 800738a:	6643      	str	r3, [r0, #100]	; 0x64
 800738c:	81c2      	strh	r2, [r0, #14]
 800738e:	6183      	str	r3, [r0, #24]
 8007390:	4619      	mov	r1, r3
 8007392:	2208      	movs	r2, #8
 8007394:	305c      	adds	r0, #92	; 0x5c
 8007396:	f7ff ffcf 	bl	8007338 <memset>
 800739a:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <std+0x38>)
 800739c:	6263      	str	r3, [r4, #36]	; 0x24
 800739e:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <std+0x3c>)
 80073a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80073a2:	4b05      	ldr	r3, [pc, #20]	; (80073b8 <std+0x40>)
 80073a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80073a6:	4b05      	ldr	r3, [pc, #20]	; (80073bc <std+0x44>)
 80073a8:	6224      	str	r4, [r4, #32]
 80073aa:	6323      	str	r3, [r4, #48]	; 0x30
 80073ac:	bd10      	pop	{r4, pc}
 80073ae:	bf00      	nop
 80073b0:	08007c8d 	.word	0x08007c8d
 80073b4:	08007caf 	.word	0x08007caf
 80073b8:	08007ce7 	.word	0x08007ce7
 80073bc:	08007d0b 	.word	0x08007d0b

080073c0 <_cleanup_r>:
 80073c0:	4901      	ldr	r1, [pc, #4]	; (80073c8 <_cleanup_r+0x8>)
 80073c2:	f000 b8af 	b.w	8007524 <_fwalk_reent>
 80073c6:	bf00      	nop
 80073c8:	08007fe5 	.word	0x08007fe5

080073cc <__sfmoreglue>:
 80073cc:	b570      	push	{r4, r5, r6, lr}
 80073ce:	2268      	movs	r2, #104	; 0x68
 80073d0:	1e4d      	subs	r5, r1, #1
 80073d2:	4355      	muls	r5, r2
 80073d4:	460e      	mov	r6, r1
 80073d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073da:	f000 f8e5 	bl	80075a8 <_malloc_r>
 80073de:	4604      	mov	r4, r0
 80073e0:	b140      	cbz	r0, 80073f4 <__sfmoreglue+0x28>
 80073e2:	2100      	movs	r1, #0
 80073e4:	e9c0 1600 	strd	r1, r6, [r0]
 80073e8:	300c      	adds	r0, #12
 80073ea:	60a0      	str	r0, [r4, #8]
 80073ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073f0:	f7ff ffa2 	bl	8007338 <memset>
 80073f4:	4620      	mov	r0, r4
 80073f6:	bd70      	pop	{r4, r5, r6, pc}

080073f8 <__sfp_lock_acquire>:
 80073f8:	4801      	ldr	r0, [pc, #4]	; (8007400 <__sfp_lock_acquire+0x8>)
 80073fa:	f000 b8b3 	b.w	8007564 <__retarget_lock_acquire_recursive>
 80073fe:	bf00      	nop
 8007400:	200003c9 	.word	0x200003c9

08007404 <__sfp_lock_release>:
 8007404:	4801      	ldr	r0, [pc, #4]	; (800740c <__sfp_lock_release+0x8>)
 8007406:	f000 b8ae 	b.w	8007566 <__retarget_lock_release_recursive>
 800740a:	bf00      	nop
 800740c:	200003c9 	.word	0x200003c9

08007410 <__sinit_lock_acquire>:
 8007410:	4801      	ldr	r0, [pc, #4]	; (8007418 <__sinit_lock_acquire+0x8>)
 8007412:	f000 b8a7 	b.w	8007564 <__retarget_lock_acquire_recursive>
 8007416:	bf00      	nop
 8007418:	200003ca 	.word	0x200003ca

0800741c <__sinit_lock_release>:
 800741c:	4801      	ldr	r0, [pc, #4]	; (8007424 <__sinit_lock_release+0x8>)
 800741e:	f000 b8a2 	b.w	8007566 <__retarget_lock_release_recursive>
 8007422:	bf00      	nop
 8007424:	200003ca 	.word	0x200003ca

08007428 <__sinit>:
 8007428:	b510      	push	{r4, lr}
 800742a:	4604      	mov	r4, r0
 800742c:	f7ff fff0 	bl	8007410 <__sinit_lock_acquire>
 8007430:	69a3      	ldr	r3, [r4, #24]
 8007432:	b11b      	cbz	r3, 800743c <__sinit+0x14>
 8007434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007438:	f7ff bff0 	b.w	800741c <__sinit_lock_release>
 800743c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007440:	6523      	str	r3, [r4, #80]	; 0x50
 8007442:	4b13      	ldr	r3, [pc, #76]	; (8007490 <__sinit+0x68>)
 8007444:	4a13      	ldr	r2, [pc, #76]	; (8007494 <__sinit+0x6c>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	62a2      	str	r2, [r4, #40]	; 0x28
 800744a:	42a3      	cmp	r3, r4
 800744c:	bf04      	itt	eq
 800744e:	2301      	moveq	r3, #1
 8007450:	61a3      	streq	r3, [r4, #24]
 8007452:	4620      	mov	r0, r4
 8007454:	f000 f820 	bl	8007498 <__sfp>
 8007458:	6060      	str	r0, [r4, #4]
 800745a:	4620      	mov	r0, r4
 800745c:	f000 f81c 	bl	8007498 <__sfp>
 8007460:	60a0      	str	r0, [r4, #8]
 8007462:	4620      	mov	r0, r4
 8007464:	f000 f818 	bl	8007498 <__sfp>
 8007468:	2200      	movs	r2, #0
 800746a:	60e0      	str	r0, [r4, #12]
 800746c:	2104      	movs	r1, #4
 800746e:	6860      	ldr	r0, [r4, #4]
 8007470:	f7ff ff82 	bl	8007378 <std>
 8007474:	68a0      	ldr	r0, [r4, #8]
 8007476:	2201      	movs	r2, #1
 8007478:	2109      	movs	r1, #9
 800747a:	f7ff ff7d 	bl	8007378 <std>
 800747e:	68e0      	ldr	r0, [r4, #12]
 8007480:	2202      	movs	r2, #2
 8007482:	2112      	movs	r1, #18
 8007484:	f7ff ff78 	bl	8007378 <std>
 8007488:	2301      	movs	r3, #1
 800748a:	61a3      	str	r3, [r4, #24]
 800748c:	e7d2      	b.n	8007434 <__sinit+0xc>
 800748e:	bf00      	nop
 8007490:	08008578 	.word	0x08008578
 8007494:	080073c1 	.word	0x080073c1

08007498 <__sfp>:
 8007498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749a:	4607      	mov	r7, r0
 800749c:	f7ff ffac 	bl	80073f8 <__sfp_lock_acquire>
 80074a0:	4b1e      	ldr	r3, [pc, #120]	; (800751c <__sfp+0x84>)
 80074a2:	681e      	ldr	r6, [r3, #0]
 80074a4:	69b3      	ldr	r3, [r6, #24]
 80074a6:	b913      	cbnz	r3, 80074ae <__sfp+0x16>
 80074a8:	4630      	mov	r0, r6
 80074aa:	f7ff ffbd 	bl	8007428 <__sinit>
 80074ae:	3648      	adds	r6, #72	; 0x48
 80074b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074b4:	3b01      	subs	r3, #1
 80074b6:	d503      	bpl.n	80074c0 <__sfp+0x28>
 80074b8:	6833      	ldr	r3, [r6, #0]
 80074ba:	b30b      	cbz	r3, 8007500 <__sfp+0x68>
 80074bc:	6836      	ldr	r6, [r6, #0]
 80074be:	e7f7      	b.n	80074b0 <__sfp+0x18>
 80074c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80074c4:	b9d5      	cbnz	r5, 80074fc <__sfp+0x64>
 80074c6:	4b16      	ldr	r3, [pc, #88]	; (8007520 <__sfp+0x88>)
 80074c8:	60e3      	str	r3, [r4, #12]
 80074ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074ce:	6665      	str	r5, [r4, #100]	; 0x64
 80074d0:	f000 f847 	bl	8007562 <__retarget_lock_init_recursive>
 80074d4:	f7ff ff96 	bl	8007404 <__sfp_lock_release>
 80074d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074e0:	6025      	str	r5, [r4, #0]
 80074e2:	61a5      	str	r5, [r4, #24]
 80074e4:	2208      	movs	r2, #8
 80074e6:	4629      	mov	r1, r5
 80074e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074ec:	f7ff ff24 	bl	8007338 <memset>
 80074f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074f8:	4620      	mov	r0, r4
 80074fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074fc:	3468      	adds	r4, #104	; 0x68
 80074fe:	e7d9      	b.n	80074b4 <__sfp+0x1c>
 8007500:	2104      	movs	r1, #4
 8007502:	4638      	mov	r0, r7
 8007504:	f7ff ff62 	bl	80073cc <__sfmoreglue>
 8007508:	4604      	mov	r4, r0
 800750a:	6030      	str	r0, [r6, #0]
 800750c:	2800      	cmp	r0, #0
 800750e:	d1d5      	bne.n	80074bc <__sfp+0x24>
 8007510:	f7ff ff78 	bl	8007404 <__sfp_lock_release>
 8007514:	230c      	movs	r3, #12
 8007516:	603b      	str	r3, [r7, #0]
 8007518:	e7ee      	b.n	80074f8 <__sfp+0x60>
 800751a:	bf00      	nop
 800751c:	08008578 	.word	0x08008578
 8007520:	ffff0001 	.word	0xffff0001

08007524 <_fwalk_reent>:
 8007524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007528:	4606      	mov	r6, r0
 800752a:	4688      	mov	r8, r1
 800752c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007530:	2700      	movs	r7, #0
 8007532:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007536:	f1b9 0901 	subs.w	r9, r9, #1
 800753a:	d505      	bpl.n	8007548 <_fwalk_reent+0x24>
 800753c:	6824      	ldr	r4, [r4, #0]
 800753e:	2c00      	cmp	r4, #0
 8007540:	d1f7      	bne.n	8007532 <_fwalk_reent+0xe>
 8007542:	4638      	mov	r0, r7
 8007544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007548:	89ab      	ldrh	r3, [r5, #12]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d907      	bls.n	800755e <_fwalk_reent+0x3a>
 800754e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007552:	3301      	adds	r3, #1
 8007554:	d003      	beq.n	800755e <_fwalk_reent+0x3a>
 8007556:	4629      	mov	r1, r5
 8007558:	4630      	mov	r0, r6
 800755a:	47c0      	blx	r8
 800755c:	4307      	orrs	r7, r0
 800755e:	3568      	adds	r5, #104	; 0x68
 8007560:	e7e9      	b.n	8007536 <_fwalk_reent+0x12>

08007562 <__retarget_lock_init_recursive>:
 8007562:	4770      	bx	lr

08007564 <__retarget_lock_acquire_recursive>:
 8007564:	4770      	bx	lr

08007566 <__retarget_lock_release_recursive>:
 8007566:	4770      	bx	lr

08007568 <sbrk_aligned>:
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	4e0e      	ldr	r6, [pc, #56]	; (80075a4 <sbrk_aligned+0x3c>)
 800756c:	460c      	mov	r4, r1
 800756e:	6831      	ldr	r1, [r6, #0]
 8007570:	4605      	mov	r5, r0
 8007572:	b911      	cbnz	r1, 800757a <sbrk_aligned+0x12>
 8007574:	f000 fb7a 	bl	8007c6c <_sbrk_r>
 8007578:	6030      	str	r0, [r6, #0]
 800757a:	4621      	mov	r1, r4
 800757c:	4628      	mov	r0, r5
 800757e:	f000 fb75 	bl	8007c6c <_sbrk_r>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	d00a      	beq.n	800759c <sbrk_aligned+0x34>
 8007586:	1cc4      	adds	r4, r0, #3
 8007588:	f024 0403 	bic.w	r4, r4, #3
 800758c:	42a0      	cmp	r0, r4
 800758e:	d007      	beq.n	80075a0 <sbrk_aligned+0x38>
 8007590:	1a21      	subs	r1, r4, r0
 8007592:	4628      	mov	r0, r5
 8007594:	f000 fb6a 	bl	8007c6c <_sbrk_r>
 8007598:	3001      	adds	r0, #1
 800759a:	d101      	bne.n	80075a0 <sbrk_aligned+0x38>
 800759c:	f04f 34ff 	mov.w	r4, #4294967295
 80075a0:	4620      	mov	r0, r4
 80075a2:	bd70      	pop	{r4, r5, r6, pc}
 80075a4:	200003d0 	.word	0x200003d0

080075a8 <_malloc_r>:
 80075a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ac:	1ccd      	adds	r5, r1, #3
 80075ae:	f025 0503 	bic.w	r5, r5, #3
 80075b2:	3508      	adds	r5, #8
 80075b4:	2d0c      	cmp	r5, #12
 80075b6:	bf38      	it	cc
 80075b8:	250c      	movcc	r5, #12
 80075ba:	2d00      	cmp	r5, #0
 80075bc:	4607      	mov	r7, r0
 80075be:	db01      	blt.n	80075c4 <_malloc_r+0x1c>
 80075c0:	42a9      	cmp	r1, r5
 80075c2:	d905      	bls.n	80075d0 <_malloc_r+0x28>
 80075c4:	230c      	movs	r3, #12
 80075c6:	603b      	str	r3, [r7, #0]
 80075c8:	2600      	movs	r6, #0
 80075ca:	4630      	mov	r0, r6
 80075cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d0:	4e2e      	ldr	r6, [pc, #184]	; (800768c <_malloc_r+0xe4>)
 80075d2:	f000 fdbb 	bl	800814c <__malloc_lock>
 80075d6:	6833      	ldr	r3, [r6, #0]
 80075d8:	461c      	mov	r4, r3
 80075da:	bb34      	cbnz	r4, 800762a <_malloc_r+0x82>
 80075dc:	4629      	mov	r1, r5
 80075de:	4638      	mov	r0, r7
 80075e0:	f7ff ffc2 	bl	8007568 <sbrk_aligned>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	4604      	mov	r4, r0
 80075e8:	d14d      	bne.n	8007686 <_malloc_r+0xde>
 80075ea:	6834      	ldr	r4, [r6, #0]
 80075ec:	4626      	mov	r6, r4
 80075ee:	2e00      	cmp	r6, #0
 80075f0:	d140      	bne.n	8007674 <_malloc_r+0xcc>
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	4631      	mov	r1, r6
 80075f6:	4638      	mov	r0, r7
 80075f8:	eb04 0803 	add.w	r8, r4, r3
 80075fc:	f000 fb36 	bl	8007c6c <_sbrk_r>
 8007600:	4580      	cmp	r8, r0
 8007602:	d13a      	bne.n	800767a <_malloc_r+0xd2>
 8007604:	6821      	ldr	r1, [r4, #0]
 8007606:	3503      	adds	r5, #3
 8007608:	1a6d      	subs	r5, r5, r1
 800760a:	f025 0503 	bic.w	r5, r5, #3
 800760e:	3508      	adds	r5, #8
 8007610:	2d0c      	cmp	r5, #12
 8007612:	bf38      	it	cc
 8007614:	250c      	movcc	r5, #12
 8007616:	4629      	mov	r1, r5
 8007618:	4638      	mov	r0, r7
 800761a:	f7ff ffa5 	bl	8007568 <sbrk_aligned>
 800761e:	3001      	adds	r0, #1
 8007620:	d02b      	beq.n	800767a <_malloc_r+0xd2>
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	442b      	add	r3, r5
 8007626:	6023      	str	r3, [r4, #0]
 8007628:	e00e      	b.n	8007648 <_malloc_r+0xa0>
 800762a:	6822      	ldr	r2, [r4, #0]
 800762c:	1b52      	subs	r2, r2, r5
 800762e:	d41e      	bmi.n	800766e <_malloc_r+0xc6>
 8007630:	2a0b      	cmp	r2, #11
 8007632:	d916      	bls.n	8007662 <_malloc_r+0xba>
 8007634:	1961      	adds	r1, r4, r5
 8007636:	42a3      	cmp	r3, r4
 8007638:	6025      	str	r5, [r4, #0]
 800763a:	bf18      	it	ne
 800763c:	6059      	strne	r1, [r3, #4]
 800763e:	6863      	ldr	r3, [r4, #4]
 8007640:	bf08      	it	eq
 8007642:	6031      	streq	r1, [r6, #0]
 8007644:	5162      	str	r2, [r4, r5]
 8007646:	604b      	str	r3, [r1, #4]
 8007648:	4638      	mov	r0, r7
 800764a:	f104 060b 	add.w	r6, r4, #11
 800764e:	f000 fd83 	bl	8008158 <__malloc_unlock>
 8007652:	f026 0607 	bic.w	r6, r6, #7
 8007656:	1d23      	adds	r3, r4, #4
 8007658:	1af2      	subs	r2, r6, r3
 800765a:	d0b6      	beq.n	80075ca <_malloc_r+0x22>
 800765c:	1b9b      	subs	r3, r3, r6
 800765e:	50a3      	str	r3, [r4, r2]
 8007660:	e7b3      	b.n	80075ca <_malloc_r+0x22>
 8007662:	6862      	ldr	r2, [r4, #4]
 8007664:	42a3      	cmp	r3, r4
 8007666:	bf0c      	ite	eq
 8007668:	6032      	streq	r2, [r6, #0]
 800766a:	605a      	strne	r2, [r3, #4]
 800766c:	e7ec      	b.n	8007648 <_malloc_r+0xa0>
 800766e:	4623      	mov	r3, r4
 8007670:	6864      	ldr	r4, [r4, #4]
 8007672:	e7b2      	b.n	80075da <_malloc_r+0x32>
 8007674:	4634      	mov	r4, r6
 8007676:	6876      	ldr	r6, [r6, #4]
 8007678:	e7b9      	b.n	80075ee <_malloc_r+0x46>
 800767a:	230c      	movs	r3, #12
 800767c:	603b      	str	r3, [r7, #0]
 800767e:	4638      	mov	r0, r7
 8007680:	f000 fd6a 	bl	8008158 <__malloc_unlock>
 8007684:	e7a1      	b.n	80075ca <_malloc_r+0x22>
 8007686:	6025      	str	r5, [r4, #0]
 8007688:	e7de      	b.n	8007648 <_malloc_r+0xa0>
 800768a:	bf00      	nop
 800768c:	200003cc 	.word	0x200003cc

08007690 <__sfputc_r>:
 8007690:	6893      	ldr	r3, [r2, #8]
 8007692:	3b01      	subs	r3, #1
 8007694:	2b00      	cmp	r3, #0
 8007696:	b410      	push	{r4}
 8007698:	6093      	str	r3, [r2, #8]
 800769a:	da08      	bge.n	80076ae <__sfputc_r+0x1e>
 800769c:	6994      	ldr	r4, [r2, #24]
 800769e:	42a3      	cmp	r3, r4
 80076a0:	db01      	blt.n	80076a6 <__sfputc_r+0x16>
 80076a2:	290a      	cmp	r1, #10
 80076a4:	d103      	bne.n	80076ae <__sfputc_r+0x1e>
 80076a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076aa:	f000 bb33 	b.w	8007d14 <__swbuf_r>
 80076ae:	6813      	ldr	r3, [r2, #0]
 80076b0:	1c58      	adds	r0, r3, #1
 80076b2:	6010      	str	r0, [r2, #0]
 80076b4:	7019      	strb	r1, [r3, #0]
 80076b6:	4608      	mov	r0, r1
 80076b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076bc:	4770      	bx	lr

080076be <__sfputs_r>:
 80076be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c0:	4606      	mov	r6, r0
 80076c2:	460f      	mov	r7, r1
 80076c4:	4614      	mov	r4, r2
 80076c6:	18d5      	adds	r5, r2, r3
 80076c8:	42ac      	cmp	r4, r5
 80076ca:	d101      	bne.n	80076d0 <__sfputs_r+0x12>
 80076cc:	2000      	movs	r0, #0
 80076ce:	e007      	b.n	80076e0 <__sfputs_r+0x22>
 80076d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076d4:	463a      	mov	r2, r7
 80076d6:	4630      	mov	r0, r6
 80076d8:	f7ff ffda 	bl	8007690 <__sfputc_r>
 80076dc:	1c43      	adds	r3, r0, #1
 80076de:	d1f3      	bne.n	80076c8 <__sfputs_r+0xa>
 80076e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080076e4 <_vfiprintf_r>:
 80076e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e8:	460d      	mov	r5, r1
 80076ea:	b09d      	sub	sp, #116	; 0x74
 80076ec:	4614      	mov	r4, r2
 80076ee:	4698      	mov	r8, r3
 80076f0:	4606      	mov	r6, r0
 80076f2:	b118      	cbz	r0, 80076fc <_vfiprintf_r+0x18>
 80076f4:	6983      	ldr	r3, [r0, #24]
 80076f6:	b90b      	cbnz	r3, 80076fc <_vfiprintf_r+0x18>
 80076f8:	f7ff fe96 	bl	8007428 <__sinit>
 80076fc:	4b89      	ldr	r3, [pc, #548]	; (8007924 <_vfiprintf_r+0x240>)
 80076fe:	429d      	cmp	r5, r3
 8007700:	d11b      	bne.n	800773a <_vfiprintf_r+0x56>
 8007702:	6875      	ldr	r5, [r6, #4]
 8007704:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007706:	07d9      	lsls	r1, r3, #31
 8007708:	d405      	bmi.n	8007716 <_vfiprintf_r+0x32>
 800770a:	89ab      	ldrh	r3, [r5, #12]
 800770c:	059a      	lsls	r2, r3, #22
 800770e:	d402      	bmi.n	8007716 <_vfiprintf_r+0x32>
 8007710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007712:	f7ff ff27 	bl	8007564 <__retarget_lock_acquire_recursive>
 8007716:	89ab      	ldrh	r3, [r5, #12]
 8007718:	071b      	lsls	r3, r3, #28
 800771a:	d501      	bpl.n	8007720 <_vfiprintf_r+0x3c>
 800771c:	692b      	ldr	r3, [r5, #16]
 800771e:	b9eb      	cbnz	r3, 800775c <_vfiprintf_r+0x78>
 8007720:	4629      	mov	r1, r5
 8007722:	4630      	mov	r0, r6
 8007724:	f000 fb5a 	bl	8007ddc <__swsetup_r>
 8007728:	b1c0      	cbz	r0, 800775c <_vfiprintf_r+0x78>
 800772a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800772c:	07dc      	lsls	r4, r3, #31
 800772e:	d50e      	bpl.n	800774e <_vfiprintf_r+0x6a>
 8007730:	f04f 30ff 	mov.w	r0, #4294967295
 8007734:	b01d      	add	sp, #116	; 0x74
 8007736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773a:	4b7b      	ldr	r3, [pc, #492]	; (8007928 <_vfiprintf_r+0x244>)
 800773c:	429d      	cmp	r5, r3
 800773e:	d101      	bne.n	8007744 <_vfiprintf_r+0x60>
 8007740:	68b5      	ldr	r5, [r6, #8]
 8007742:	e7df      	b.n	8007704 <_vfiprintf_r+0x20>
 8007744:	4b79      	ldr	r3, [pc, #484]	; (800792c <_vfiprintf_r+0x248>)
 8007746:	429d      	cmp	r5, r3
 8007748:	bf08      	it	eq
 800774a:	68f5      	ldreq	r5, [r6, #12]
 800774c:	e7da      	b.n	8007704 <_vfiprintf_r+0x20>
 800774e:	89ab      	ldrh	r3, [r5, #12]
 8007750:	0598      	lsls	r0, r3, #22
 8007752:	d4ed      	bmi.n	8007730 <_vfiprintf_r+0x4c>
 8007754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007756:	f7ff ff06 	bl	8007566 <__retarget_lock_release_recursive>
 800775a:	e7e9      	b.n	8007730 <_vfiprintf_r+0x4c>
 800775c:	2300      	movs	r3, #0
 800775e:	9309      	str	r3, [sp, #36]	; 0x24
 8007760:	2320      	movs	r3, #32
 8007762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007766:	f8cd 800c 	str.w	r8, [sp, #12]
 800776a:	2330      	movs	r3, #48	; 0x30
 800776c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007930 <_vfiprintf_r+0x24c>
 8007770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007774:	f04f 0901 	mov.w	r9, #1
 8007778:	4623      	mov	r3, r4
 800777a:	469a      	mov	sl, r3
 800777c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007780:	b10a      	cbz	r2, 8007786 <_vfiprintf_r+0xa2>
 8007782:	2a25      	cmp	r2, #37	; 0x25
 8007784:	d1f9      	bne.n	800777a <_vfiprintf_r+0x96>
 8007786:	ebba 0b04 	subs.w	fp, sl, r4
 800778a:	d00b      	beq.n	80077a4 <_vfiprintf_r+0xc0>
 800778c:	465b      	mov	r3, fp
 800778e:	4622      	mov	r2, r4
 8007790:	4629      	mov	r1, r5
 8007792:	4630      	mov	r0, r6
 8007794:	f7ff ff93 	bl	80076be <__sfputs_r>
 8007798:	3001      	adds	r0, #1
 800779a:	f000 80aa 	beq.w	80078f2 <_vfiprintf_r+0x20e>
 800779e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077a0:	445a      	add	r2, fp
 80077a2:	9209      	str	r2, [sp, #36]	; 0x24
 80077a4:	f89a 3000 	ldrb.w	r3, [sl]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 80a2 	beq.w	80078f2 <_vfiprintf_r+0x20e>
 80077ae:	2300      	movs	r3, #0
 80077b0:	f04f 32ff 	mov.w	r2, #4294967295
 80077b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077b8:	f10a 0a01 	add.w	sl, sl, #1
 80077bc:	9304      	str	r3, [sp, #16]
 80077be:	9307      	str	r3, [sp, #28]
 80077c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077c4:	931a      	str	r3, [sp, #104]	; 0x68
 80077c6:	4654      	mov	r4, sl
 80077c8:	2205      	movs	r2, #5
 80077ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ce:	4858      	ldr	r0, [pc, #352]	; (8007930 <_vfiprintf_r+0x24c>)
 80077d0:	f7f8 fcde 	bl	8000190 <memchr>
 80077d4:	9a04      	ldr	r2, [sp, #16]
 80077d6:	b9d8      	cbnz	r0, 8007810 <_vfiprintf_r+0x12c>
 80077d8:	06d1      	lsls	r1, r2, #27
 80077da:	bf44      	itt	mi
 80077dc:	2320      	movmi	r3, #32
 80077de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077e2:	0713      	lsls	r3, r2, #28
 80077e4:	bf44      	itt	mi
 80077e6:	232b      	movmi	r3, #43	; 0x2b
 80077e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077ec:	f89a 3000 	ldrb.w	r3, [sl]
 80077f0:	2b2a      	cmp	r3, #42	; 0x2a
 80077f2:	d015      	beq.n	8007820 <_vfiprintf_r+0x13c>
 80077f4:	9a07      	ldr	r2, [sp, #28]
 80077f6:	4654      	mov	r4, sl
 80077f8:	2000      	movs	r0, #0
 80077fa:	f04f 0c0a 	mov.w	ip, #10
 80077fe:	4621      	mov	r1, r4
 8007800:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007804:	3b30      	subs	r3, #48	; 0x30
 8007806:	2b09      	cmp	r3, #9
 8007808:	d94e      	bls.n	80078a8 <_vfiprintf_r+0x1c4>
 800780a:	b1b0      	cbz	r0, 800783a <_vfiprintf_r+0x156>
 800780c:	9207      	str	r2, [sp, #28]
 800780e:	e014      	b.n	800783a <_vfiprintf_r+0x156>
 8007810:	eba0 0308 	sub.w	r3, r0, r8
 8007814:	fa09 f303 	lsl.w	r3, r9, r3
 8007818:	4313      	orrs	r3, r2
 800781a:	9304      	str	r3, [sp, #16]
 800781c:	46a2      	mov	sl, r4
 800781e:	e7d2      	b.n	80077c6 <_vfiprintf_r+0xe2>
 8007820:	9b03      	ldr	r3, [sp, #12]
 8007822:	1d19      	adds	r1, r3, #4
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	9103      	str	r1, [sp, #12]
 8007828:	2b00      	cmp	r3, #0
 800782a:	bfbb      	ittet	lt
 800782c:	425b      	neglt	r3, r3
 800782e:	f042 0202 	orrlt.w	r2, r2, #2
 8007832:	9307      	strge	r3, [sp, #28]
 8007834:	9307      	strlt	r3, [sp, #28]
 8007836:	bfb8      	it	lt
 8007838:	9204      	strlt	r2, [sp, #16]
 800783a:	7823      	ldrb	r3, [r4, #0]
 800783c:	2b2e      	cmp	r3, #46	; 0x2e
 800783e:	d10c      	bne.n	800785a <_vfiprintf_r+0x176>
 8007840:	7863      	ldrb	r3, [r4, #1]
 8007842:	2b2a      	cmp	r3, #42	; 0x2a
 8007844:	d135      	bne.n	80078b2 <_vfiprintf_r+0x1ce>
 8007846:	9b03      	ldr	r3, [sp, #12]
 8007848:	1d1a      	adds	r2, r3, #4
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	9203      	str	r2, [sp, #12]
 800784e:	2b00      	cmp	r3, #0
 8007850:	bfb8      	it	lt
 8007852:	f04f 33ff 	movlt.w	r3, #4294967295
 8007856:	3402      	adds	r4, #2
 8007858:	9305      	str	r3, [sp, #20]
 800785a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007940 <_vfiprintf_r+0x25c>
 800785e:	7821      	ldrb	r1, [r4, #0]
 8007860:	2203      	movs	r2, #3
 8007862:	4650      	mov	r0, sl
 8007864:	f7f8 fc94 	bl	8000190 <memchr>
 8007868:	b140      	cbz	r0, 800787c <_vfiprintf_r+0x198>
 800786a:	2340      	movs	r3, #64	; 0x40
 800786c:	eba0 000a 	sub.w	r0, r0, sl
 8007870:	fa03 f000 	lsl.w	r0, r3, r0
 8007874:	9b04      	ldr	r3, [sp, #16]
 8007876:	4303      	orrs	r3, r0
 8007878:	3401      	adds	r4, #1
 800787a:	9304      	str	r3, [sp, #16]
 800787c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007880:	482c      	ldr	r0, [pc, #176]	; (8007934 <_vfiprintf_r+0x250>)
 8007882:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007886:	2206      	movs	r2, #6
 8007888:	f7f8 fc82 	bl	8000190 <memchr>
 800788c:	2800      	cmp	r0, #0
 800788e:	d03f      	beq.n	8007910 <_vfiprintf_r+0x22c>
 8007890:	4b29      	ldr	r3, [pc, #164]	; (8007938 <_vfiprintf_r+0x254>)
 8007892:	bb1b      	cbnz	r3, 80078dc <_vfiprintf_r+0x1f8>
 8007894:	9b03      	ldr	r3, [sp, #12]
 8007896:	3307      	adds	r3, #7
 8007898:	f023 0307 	bic.w	r3, r3, #7
 800789c:	3308      	adds	r3, #8
 800789e:	9303      	str	r3, [sp, #12]
 80078a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a2:	443b      	add	r3, r7
 80078a4:	9309      	str	r3, [sp, #36]	; 0x24
 80078a6:	e767      	b.n	8007778 <_vfiprintf_r+0x94>
 80078a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80078ac:	460c      	mov	r4, r1
 80078ae:	2001      	movs	r0, #1
 80078b0:	e7a5      	b.n	80077fe <_vfiprintf_r+0x11a>
 80078b2:	2300      	movs	r3, #0
 80078b4:	3401      	adds	r4, #1
 80078b6:	9305      	str	r3, [sp, #20]
 80078b8:	4619      	mov	r1, r3
 80078ba:	f04f 0c0a 	mov.w	ip, #10
 80078be:	4620      	mov	r0, r4
 80078c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078c4:	3a30      	subs	r2, #48	; 0x30
 80078c6:	2a09      	cmp	r2, #9
 80078c8:	d903      	bls.n	80078d2 <_vfiprintf_r+0x1ee>
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d0c5      	beq.n	800785a <_vfiprintf_r+0x176>
 80078ce:	9105      	str	r1, [sp, #20]
 80078d0:	e7c3      	b.n	800785a <_vfiprintf_r+0x176>
 80078d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80078d6:	4604      	mov	r4, r0
 80078d8:	2301      	movs	r3, #1
 80078da:	e7f0      	b.n	80078be <_vfiprintf_r+0x1da>
 80078dc:	ab03      	add	r3, sp, #12
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	462a      	mov	r2, r5
 80078e2:	4b16      	ldr	r3, [pc, #88]	; (800793c <_vfiprintf_r+0x258>)
 80078e4:	a904      	add	r1, sp, #16
 80078e6:	4630      	mov	r0, r6
 80078e8:	f3af 8000 	nop.w
 80078ec:	4607      	mov	r7, r0
 80078ee:	1c78      	adds	r0, r7, #1
 80078f0:	d1d6      	bne.n	80078a0 <_vfiprintf_r+0x1bc>
 80078f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078f4:	07d9      	lsls	r1, r3, #31
 80078f6:	d405      	bmi.n	8007904 <_vfiprintf_r+0x220>
 80078f8:	89ab      	ldrh	r3, [r5, #12]
 80078fa:	059a      	lsls	r2, r3, #22
 80078fc:	d402      	bmi.n	8007904 <_vfiprintf_r+0x220>
 80078fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007900:	f7ff fe31 	bl	8007566 <__retarget_lock_release_recursive>
 8007904:	89ab      	ldrh	r3, [r5, #12]
 8007906:	065b      	lsls	r3, r3, #25
 8007908:	f53f af12 	bmi.w	8007730 <_vfiprintf_r+0x4c>
 800790c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800790e:	e711      	b.n	8007734 <_vfiprintf_r+0x50>
 8007910:	ab03      	add	r3, sp, #12
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	462a      	mov	r2, r5
 8007916:	4b09      	ldr	r3, [pc, #36]	; (800793c <_vfiprintf_r+0x258>)
 8007918:	a904      	add	r1, sp, #16
 800791a:	4630      	mov	r0, r6
 800791c:	f000 f880 	bl	8007a20 <_printf_i>
 8007920:	e7e4      	b.n	80078ec <_vfiprintf_r+0x208>
 8007922:	bf00      	nop
 8007924:	0800859c 	.word	0x0800859c
 8007928:	080085bc 	.word	0x080085bc
 800792c:	0800857c 	.word	0x0800857c
 8007930:	080085dc 	.word	0x080085dc
 8007934:	080085e6 	.word	0x080085e6
 8007938:	00000000 	.word	0x00000000
 800793c:	080076bf 	.word	0x080076bf
 8007940:	080085e2 	.word	0x080085e2

08007944 <_printf_common>:
 8007944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007948:	4616      	mov	r6, r2
 800794a:	4699      	mov	r9, r3
 800794c:	688a      	ldr	r2, [r1, #8]
 800794e:	690b      	ldr	r3, [r1, #16]
 8007950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007954:	4293      	cmp	r3, r2
 8007956:	bfb8      	it	lt
 8007958:	4613      	movlt	r3, r2
 800795a:	6033      	str	r3, [r6, #0]
 800795c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007960:	4607      	mov	r7, r0
 8007962:	460c      	mov	r4, r1
 8007964:	b10a      	cbz	r2, 800796a <_printf_common+0x26>
 8007966:	3301      	adds	r3, #1
 8007968:	6033      	str	r3, [r6, #0]
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	0699      	lsls	r1, r3, #26
 800796e:	bf42      	ittt	mi
 8007970:	6833      	ldrmi	r3, [r6, #0]
 8007972:	3302      	addmi	r3, #2
 8007974:	6033      	strmi	r3, [r6, #0]
 8007976:	6825      	ldr	r5, [r4, #0]
 8007978:	f015 0506 	ands.w	r5, r5, #6
 800797c:	d106      	bne.n	800798c <_printf_common+0x48>
 800797e:	f104 0a19 	add.w	sl, r4, #25
 8007982:	68e3      	ldr	r3, [r4, #12]
 8007984:	6832      	ldr	r2, [r6, #0]
 8007986:	1a9b      	subs	r3, r3, r2
 8007988:	42ab      	cmp	r3, r5
 800798a:	dc26      	bgt.n	80079da <_printf_common+0x96>
 800798c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007990:	1e13      	subs	r3, r2, #0
 8007992:	6822      	ldr	r2, [r4, #0]
 8007994:	bf18      	it	ne
 8007996:	2301      	movne	r3, #1
 8007998:	0692      	lsls	r2, r2, #26
 800799a:	d42b      	bmi.n	80079f4 <_printf_common+0xb0>
 800799c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079a0:	4649      	mov	r1, r9
 80079a2:	4638      	mov	r0, r7
 80079a4:	47c0      	blx	r8
 80079a6:	3001      	adds	r0, #1
 80079a8:	d01e      	beq.n	80079e8 <_printf_common+0xa4>
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	68e5      	ldr	r5, [r4, #12]
 80079ae:	6832      	ldr	r2, [r6, #0]
 80079b0:	f003 0306 	and.w	r3, r3, #6
 80079b4:	2b04      	cmp	r3, #4
 80079b6:	bf08      	it	eq
 80079b8:	1aad      	subeq	r5, r5, r2
 80079ba:	68a3      	ldr	r3, [r4, #8]
 80079bc:	6922      	ldr	r2, [r4, #16]
 80079be:	bf0c      	ite	eq
 80079c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079c4:	2500      	movne	r5, #0
 80079c6:	4293      	cmp	r3, r2
 80079c8:	bfc4      	itt	gt
 80079ca:	1a9b      	subgt	r3, r3, r2
 80079cc:	18ed      	addgt	r5, r5, r3
 80079ce:	2600      	movs	r6, #0
 80079d0:	341a      	adds	r4, #26
 80079d2:	42b5      	cmp	r5, r6
 80079d4:	d11a      	bne.n	8007a0c <_printf_common+0xc8>
 80079d6:	2000      	movs	r0, #0
 80079d8:	e008      	b.n	80079ec <_printf_common+0xa8>
 80079da:	2301      	movs	r3, #1
 80079dc:	4652      	mov	r2, sl
 80079de:	4649      	mov	r1, r9
 80079e0:	4638      	mov	r0, r7
 80079e2:	47c0      	blx	r8
 80079e4:	3001      	adds	r0, #1
 80079e6:	d103      	bne.n	80079f0 <_printf_common+0xac>
 80079e8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079f0:	3501      	adds	r5, #1
 80079f2:	e7c6      	b.n	8007982 <_printf_common+0x3e>
 80079f4:	18e1      	adds	r1, r4, r3
 80079f6:	1c5a      	adds	r2, r3, #1
 80079f8:	2030      	movs	r0, #48	; 0x30
 80079fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079fe:	4422      	add	r2, r4
 8007a00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a08:	3302      	adds	r3, #2
 8007a0a:	e7c7      	b.n	800799c <_printf_common+0x58>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	4622      	mov	r2, r4
 8007a10:	4649      	mov	r1, r9
 8007a12:	4638      	mov	r0, r7
 8007a14:	47c0      	blx	r8
 8007a16:	3001      	adds	r0, #1
 8007a18:	d0e6      	beq.n	80079e8 <_printf_common+0xa4>
 8007a1a:	3601      	adds	r6, #1
 8007a1c:	e7d9      	b.n	80079d2 <_printf_common+0x8e>
	...

08007a20 <_printf_i>:
 8007a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a24:	7e0f      	ldrb	r7, [r1, #24]
 8007a26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a28:	2f78      	cmp	r7, #120	; 0x78
 8007a2a:	4691      	mov	r9, r2
 8007a2c:	4680      	mov	r8, r0
 8007a2e:	460c      	mov	r4, r1
 8007a30:	469a      	mov	sl, r3
 8007a32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a36:	d807      	bhi.n	8007a48 <_printf_i+0x28>
 8007a38:	2f62      	cmp	r7, #98	; 0x62
 8007a3a:	d80a      	bhi.n	8007a52 <_printf_i+0x32>
 8007a3c:	2f00      	cmp	r7, #0
 8007a3e:	f000 80d8 	beq.w	8007bf2 <_printf_i+0x1d2>
 8007a42:	2f58      	cmp	r7, #88	; 0x58
 8007a44:	f000 80a3 	beq.w	8007b8e <_printf_i+0x16e>
 8007a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a50:	e03a      	b.n	8007ac8 <_printf_i+0xa8>
 8007a52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a56:	2b15      	cmp	r3, #21
 8007a58:	d8f6      	bhi.n	8007a48 <_printf_i+0x28>
 8007a5a:	a101      	add	r1, pc, #4	; (adr r1, 8007a60 <_printf_i+0x40>)
 8007a5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a60:	08007ab9 	.word	0x08007ab9
 8007a64:	08007acd 	.word	0x08007acd
 8007a68:	08007a49 	.word	0x08007a49
 8007a6c:	08007a49 	.word	0x08007a49
 8007a70:	08007a49 	.word	0x08007a49
 8007a74:	08007a49 	.word	0x08007a49
 8007a78:	08007acd 	.word	0x08007acd
 8007a7c:	08007a49 	.word	0x08007a49
 8007a80:	08007a49 	.word	0x08007a49
 8007a84:	08007a49 	.word	0x08007a49
 8007a88:	08007a49 	.word	0x08007a49
 8007a8c:	08007bd9 	.word	0x08007bd9
 8007a90:	08007afd 	.word	0x08007afd
 8007a94:	08007bbb 	.word	0x08007bbb
 8007a98:	08007a49 	.word	0x08007a49
 8007a9c:	08007a49 	.word	0x08007a49
 8007aa0:	08007bfb 	.word	0x08007bfb
 8007aa4:	08007a49 	.word	0x08007a49
 8007aa8:	08007afd 	.word	0x08007afd
 8007aac:	08007a49 	.word	0x08007a49
 8007ab0:	08007a49 	.word	0x08007a49
 8007ab4:	08007bc3 	.word	0x08007bc3
 8007ab8:	682b      	ldr	r3, [r5, #0]
 8007aba:	1d1a      	adds	r2, r3, #4
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	602a      	str	r2, [r5, #0]
 8007ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e0a3      	b.n	8007c14 <_printf_i+0x1f4>
 8007acc:	6820      	ldr	r0, [r4, #0]
 8007ace:	6829      	ldr	r1, [r5, #0]
 8007ad0:	0606      	lsls	r6, r0, #24
 8007ad2:	f101 0304 	add.w	r3, r1, #4
 8007ad6:	d50a      	bpl.n	8007aee <_printf_i+0xce>
 8007ad8:	680e      	ldr	r6, [r1, #0]
 8007ada:	602b      	str	r3, [r5, #0]
 8007adc:	2e00      	cmp	r6, #0
 8007ade:	da03      	bge.n	8007ae8 <_printf_i+0xc8>
 8007ae0:	232d      	movs	r3, #45	; 0x2d
 8007ae2:	4276      	negs	r6, r6
 8007ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ae8:	485e      	ldr	r0, [pc, #376]	; (8007c64 <_printf_i+0x244>)
 8007aea:	230a      	movs	r3, #10
 8007aec:	e019      	b.n	8007b22 <_printf_i+0x102>
 8007aee:	680e      	ldr	r6, [r1, #0]
 8007af0:	602b      	str	r3, [r5, #0]
 8007af2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007af6:	bf18      	it	ne
 8007af8:	b236      	sxthne	r6, r6
 8007afa:	e7ef      	b.n	8007adc <_printf_i+0xbc>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	6820      	ldr	r0, [r4, #0]
 8007b00:	1d19      	adds	r1, r3, #4
 8007b02:	6029      	str	r1, [r5, #0]
 8007b04:	0601      	lsls	r1, r0, #24
 8007b06:	d501      	bpl.n	8007b0c <_printf_i+0xec>
 8007b08:	681e      	ldr	r6, [r3, #0]
 8007b0a:	e002      	b.n	8007b12 <_printf_i+0xf2>
 8007b0c:	0646      	lsls	r6, r0, #25
 8007b0e:	d5fb      	bpl.n	8007b08 <_printf_i+0xe8>
 8007b10:	881e      	ldrh	r6, [r3, #0]
 8007b12:	4854      	ldr	r0, [pc, #336]	; (8007c64 <_printf_i+0x244>)
 8007b14:	2f6f      	cmp	r7, #111	; 0x6f
 8007b16:	bf0c      	ite	eq
 8007b18:	2308      	moveq	r3, #8
 8007b1a:	230a      	movne	r3, #10
 8007b1c:	2100      	movs	r1, #0
 8007b1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b22:	6865      	ldr	r5, [r4, #4]
 8007b24:	60a5      	str	r5, [r4, #8]
 8007b26:	2d00      	cmp	r5, #0
 8007b28:	bfa2      	ittt	ge
 8007b2a:	6821      	ldrge	r1, [r4, #0]
 8007b2c:	f021 0104 	bicge.w	r1, r1, #4
 8007b30:	6021      	strge	r1, [r4, #0]
 8007b32:	b90e      	cbnz	r6, 8007b38 <_printf_i+0x118>
 8007b34:	2d00      	cmp	r5, #0
 8007b36:	d04d      	beq.n	8007bd4 <_printf_i+0x1b4>
 8007b38:	4615      	mov	r5, r2
 8007b3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b3e:	fb03 6711 	mls	r7, r3, r1, r6
 8007b42:	5dc7      	ldrb	r7, [r0, r7]
 8007b44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b48:	4637      	mov	r7, r6
 8007b4a:	42bb      	cmp	r3, r7
 8007b4c:	460e      	mov	r6, r1
 8007b4e:	d9f4      	bls.n	8007b3a <_printf_i+0x11a>
 8007b50:	2b08      	cmp	r3, #8
 8007b52:	d10b      	bne.n	8007b6c <_printf_i+0x14c>
 8007b54:	6823      	ldr	r3, [r4, #0]
 8007b56:	07de      	lsls	r6, r3, #31
 8007b58:	d508      	bpl.n	8007b6c <_printf_i+0x14c>
 8007b5a:	6923      	ldr	r3, [r4, #16]
 8007b5c:	6861      	ldr	r1, [r4, #4]
 8007b5e:	4299      	cmp	r1, r3
 8007b60:	bfde      	ittt	le
 8007b62:	2330      	movle	r3, #48	; 0x30
 8007b64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b6c:	1b52      	subs	r2, r2, r5
 8007b6e:	6122      	str	r2, [r4, #16]
 8007b70:	f8cd a000 	str.w	sl, [sp]
 8007b74:	464b      	mov	r3, r9
 8007b76:	aa03      	add	r2, sp, #12
 8007b78:	4621      	mov	r1, r4
 8007b7a:	4640      	mov	r0, r8
 8007b7c:	f7ff fee2 	bl	8007944 <_printf_common>
 8007b80:	3001      	adds	r0, #1
 8007b82:	d14c      	bne.n	8007c1e <_printf_i+0x1fe>
 8007b84:	f04f 30ff 	mov.w	r0, #4294967295
 8007b88:	b004      	add	sp, #16
 8007b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b8e:	4835      	ldr	r0, [pc, #212]	; (8007c64 <_printf_i+0x244>)
 8007b90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b94:	6829      	ldr	r1, [r5, #0]
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b9c:	6029      	str	r1, [r5, #0]
 8007b9e:	061d      	lsls	r5, r3, #24
 8007ba0:	d514      	bpl.n	8007bcc <_printf_i+0x1ac>
 8007ba2:	07df      	lsls	r7, r3, #31
 8007ba4:	bf44      	itt	mi
 8007ba6:	f043 0320 	orrmi.w	r3, r3, #32
 8007baa:	6023      	strmi	r3, [r4, #0]
 8007bac:	b91e      	cbnz	r6, 8007bb6 <_printf_i+0x196>
 8007bae:	6823      	ldr	r3, [r4, #0]
 8007bb0:	f023 0320 	bic.w	r3, r3, #32
 8007bb4:	6023      	str	r3, [r4, #0]
 8007bb6:	2310      	movs	r3, #16
 8007bb8:	e7b0      	b.n	8007b1c <_printf_i+0xfc>
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	f043 0320 	orr.w	r3, r3, #32
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	2378      	movs	r3, #120	; 0x78
 8007bc4:	4828      	ldr	r0, [pc, #160]	; (8007c68 <_printf_i+0x248>)
 8007bc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bca:	e7e3      	b.n	8007b94 <_printf_i+0x174>
 8007bcc:	0659      	lsls	r1, r3, #25
 8007bce:	bf48      	it	mi
 8007bd0:	b2b6      	uxthmi	r6, r6
 8007bd2:	e7e6      	b.n	8007ba2 <_printf_i+0x182>
 8007bd4:	4615      	mov	r5, r2
 8007bd6:	e7bb      	b.n	8007b50 <_printf_i+0x130>
 8007bd8:	682b      	ldr	r3, [r5, #0]
 8007bda:	6826      	ldr	r6, [r4, #0]
 8007bdc:	6961      	ldr	r1, [r4, #20]
 8007bde:	1d18      	adds	r0, r3, #4
 8007be0:	6028      	str	r0, [r5, #0]
 8007be2:	0635      	lsls	r5, r6, #24
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	d501      	bpl.n	8007bec <_printf_i+0x1cc>
 8007be8:	6019      	str	r1, [r3, #0]
 8007bea:	e002      	b.n	8007bf2 <_printf_i+0x1d2>
 8007bec:	0670      	lsls	r0, r6, #25
 8007bee:	d5fb      	bpl.n	8007be8 <_printf_i+0x1c8>
 8007bf0:	8019      	strh	r1, [r3, #0]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	6123      	str	r3, [r4, #16]
 8007bf6:	4615      	mov	r5, r2
 8007bf8:	e7ba      	b.n	8007b70 <_printf_i+0x150>
 8007bfa:	682b      	ldr	r3, [r5, #0]
 8007bfc:	1d1a      	adds	r2, r3, #4
 8007bfe:	602a      	str	r2, [r5, #0]
 8007c00:	681d      	ldr	r5, [r3, #0]
 8007c02:	6862      	ldr	r2, [r4, #4]
 8007c04:	2100      	movs	r1, #0
 8007c06:	4628      	mov	r0, r5
 8007c08:	f7f8 fac2 	bl	8000190 <memchr>
 8007c0c:	b108      	cbz	r0, 8007c12 <_printf_i+0x1f2>
 8007c0e:	1b40      	subs	r0, r0, r5
 8007c10:	6060      	str	r0, [r4, #4]
 8007c12:	6863      	ldr	r3, [r4, #4]
 8007c14:	6123      	str	r3, [r4, #16]
 8007c16:	2300      	movs	r3, #0
 8007c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c1c:	e7a8      	b.n	8007b70 <_printf_i+0x150>
 8007c1e:	6923      	ldr	r3, [r4, #16]
 8007c20:	462a      	mov	r2, r5
 8007c22:	4649      	mov	r1, r9
 8007c24:	4640      	mov	r0, r8
 8007c26:	47d0      	blx	sl
 8007c28:	3001      	adds	r0, #1
 8007c2a:	d0ab      	beq.n	8007b84 <_printf_i+0x164>
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	079b      	lsls	r3, r3, #30
 8007c30:	d413      	bmi.n	8007c5a <_printf_i+0x23a>
 8007c32:	68e0      	ldr	r0, [r4, #12]
 8007c34:	9b03      	ldr	r3, [sp, #12]
 8007c36:	4298      	cmp	r0, r3
 8007c38:	bfb8      	it	lt
 8007c3a:	4618      	movlt	r0, r3
 8007c3c:	e7a4      	b.n	8007b88 <_printf_i+0x168>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	4632      	mov	r2, r6
 8007c42:	4649      	mov	r1, r9
 8007c44:	4640      	mov	r0, r8
 8007c46:	47d0      	blx	sl
 8007c48:	3001      	adds	r0, #1
 8007c4a:	d09b      	beq.n	8007b84 <_printf_i+0x164>
 8007c4c:	3501      	adds	r5, #1
 8007c4e:	68e3      	ldr	r3, [r4, #12]
 8007c50:	9903      	ldr	r1, [sp, #12]
 8007c52:	1a5b      	subs	r3, r3, r1
 8007c54:	42ab      	cmp	r3, r5
 8007c56:	dcf2      	bgt.n	8007c3e <_printf_i+0x21e>
 8007c58:	e7eb      	b.n	8007c32 <_printf_i+0x212>
 8007c5a:	2500      	movs	r5, #0
 8007c5c:	f104 0619 	add.w	r6, r4, #25
 8007c60:	e7f5      	b.n	8007c4e <_printf_i+0x22e>
 8007c62:	bf00      	nop
 8007c64:	080085ed 	.word	0x080085ed
 8007c68:	080085fe 	.word	0x080085fe

08007c6c <_sbrk_r>:
 8007c6c:	b538      	push	{r3, r4, r5, lr}
 8007c6e:	4d06      	ldr	r5, [pc, #24]	; (8007c88 <_sbrk_r+0x1c>)
 8007c70:	2300      	movs	r3, #0
 8007c72:	4604      	mov	r4, r0
 8007c74:	4608      	mov	r0, r1
 8007c76:	602b      	str	r3, [r5, #0]
 8007c78:	f7f9 fc1a 	bl	80014b0 <_sbrk>
 8007c7c:	1c43      	adds	r3, r0, #1
 8007c7e:	d102      	bne.n	8007c86 <_sbrk_r+0x1a>
 8007c80:	682b      	ldr	r3, [r5, #0]
 8007c82:	b103      	cbz	r3, 8007c86 <_sbrk_r+0x1a>
 8007c84:	6023      	str	r3, [r4, #0]
 8007c86:	bd38      	pop	{r3, r4, r5, pc}
 8007c88:	200003d4 	.word	0x200003d4

08007c8c <__sread>:
 8007c8c:	b510      	push	{r4, lr}
 8007c8e:	460c      	mov	r4, r1
 8007c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c94:	f000 fab2 	bl	80081fc <_read_r>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	bfab      	itete	ge
 8007c9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c9e:	89a3      	ldrhlt	r3, [r4, #12]
 8007ca0:	181b      	addge	r3, r3, r0
 8007ca2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ca6:	bfac      	ite	ge
 8007ca8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007caa:	81a3      	strhlt	r3, [r4, #12]
 8007cac:	bd10      	pop	{r4, pc}

08007cae <__swrite>:
 8007cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb2:	461f      	mov	r7, r3
 8007cb4:	898b      	ldrh	r3, [r1, #12]
 8007cb6:	05db      	lsls	r3, r3, #23
 8007cb8:	4605      	mov	r5, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	4616      	mov	r6, r2
 8007cbe:	d505      	bpl.n	8007ccc <__swrite+0x1e>
 8007cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f000 f9c8 	bl	800805c <_lseek_r>
 8007ccc:	89a3      	ldrh	r3, [r4, #12]
 8007cce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cd6:	81a3      	strh	r3, [r4, #12]
 8007cd8:	4632      	mov	r2, r6
 8007cda:	463b      	mov	r3, r7
 8007cdc:	4628      	mov	r0, r5
 8007cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce2:	f000 b869 	b.w	8007db8 <_write_r>

08007ce6 <__sseek>:
 8007ce6:	b510      	push	{r4, lr}
 8007ce8:	460c      	mov	r4, r1
 8007cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cee:	f000 f9b5 	bl	800805c <_lseek_r>
 8007cf2:	1c43      	adds	r3, r0, #1
 8007cf4:	89a3      	ldrh	r3, [r4, #12]
 8007cf6:	bf15      	itete	ne
 8007cf8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d02:	81a3      	strheq	r3, [r4, #12]
 8007d04:	bf18      	it	ne
 8007d06:	81a3      	strhne	r3, [r4, #12]
 8007d08:	bd10      	pop	{r4, pc}

08007d0a <__sclose>:
 8007d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d0e:	f000 b8d3 	b.w	8007eb8 <_close_r>
	...

08007d14 <__swbuf_r>:
 8007d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d16:	460e      	mov	r6, r1
 8007d18:	4614      	mov	r4, r2
 8007d1a:	4605      	mov	r5, r0
 8007d1c:	b118      	cbz	r0, 8007d26 <__swbuf_r+0x12>
 8007d1e:	6983      	ldr	r3, [r0, #24]
 8007d20:	b90b      	cbnz	r3, 8007d26 <__swbuf_r+0x12>
 8007d22:	f7ff fb81 	bl	8007428 <__sinit>
 8007d26:	4b21      	ldr	r3, [pc, #132]	; (8007dac <__swbuf_r+0x98>)
 8007d28:	429c      	cmp	r4, r3
 8007d2a:	d12b      	bne.n	8007d84 <__swbuf_r+0x70>
 8007d2c:	686c      	ldr	r4, [r5, #4]
 8007d2e:	69a3      	ldr	r3, [r4, #24]
 8007d30:	60a3      	str	r3, [r4, #8]
 8007d32:	89a3      	ldrh	r3, [r4, #12]
 8007d34:	071a      	lsls	r2, r3, #28
 8007d36:	d52f      	bpl.n	8007d98 <__swbuf_r+0x84>
 8007d38:	6923      	ldr	r3, [r4, #16]
 8007d3a:	b36b      	cbz	r3, 8007d98 <__swbuf_r+0x84>
 8007d3c:	6923      	ldr	r3, [r4, #16]
 8007d3e:	6820      	ldr	r0, [r4, #0]
 8007d40:	1ac0      	subs	r0, r0, r3
 8007d42:	6963      	ldr	r3, [r4, #20]
 8007d44:	b2f6      	uxtb	r6, r6
 8007d46:	4283      	cmp	r3, r0
 8007d48:	4637      	mov	r7, r6
 8007d4a:	dc04      	bgt.n	8007d56 <__swbuf_r+0x42>
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	4628      	mov	r0, r5
 8007d50:	f000 f948 	bl	8007fe4 <_fflush_r>
 8007d54:	bb30      	cbnz	r0, 8007da4 <__swbuf_r+0x90>
 8007d56:	68a3      	ldr	r3, [r4, #8]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	60a3      	str	r3, [r4, #8]
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	1c5a      	adds	r2, r3, #1
 8007d60:	6022      	str	r2, [r4, #0]
 8007d62:	701e      	strb	r6, [r3, #0]
 8007d64:	6963      	ldr	r3, [r4, #20]
 8007d66:	3001      	adds	r0, #1
 8007d68:	4283      	cmp	r3, r0
 8007d6a:	d004      	beq.n	8007d76 <__swbuf_r+0x62>
 8007d6c:	89a3      	ldrh	r3, [r4, #12]
 8007d6e:	07db      	lsls	r3, r3, #31
 8007d70:	d506      	bpl.n	8007d80 <__swbuf_r+0x6c>
 8007d72:	2e0a      	cmp	r6, #10
 8007d74:	d104      	bne.n	8007d80 <__swbuf_r+0x6c>
 8007d76:	4621      	mov	r1, r4
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f000 f933 	bl	8007fe4 <_fflush_r>
 8007d7e:	b988      	cbnz	r0, 8007da4 <__swbuf_r+0x90>
 8007d80:	4638      	mov	r0, r7
 8007d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d84:	4b0a      	ldr	r3, [pc, #40]	; (8007db0 <__swbuf_r+0x9c>)
 8007d86:	429c      	cmp	r4, r3
 8007d88:	d101      	bne.n	8007d8e <__swbuf_r+0x7a>
 8007d8a:	68ac      	ldr	r4, [r5, #8]
 8007d8c:	e7cf      	b.n	8007d2e <__swbuf_r+0x1a>
 8007d8e:	4b09      	ldr	r3, [pc, #36]	; (8007db4 <__swbuf_r+0xa0>)
 8007d90:	429c      	cmp	r4, r3
 8007d92:	bf08      	it	eq
 8007d94:	68ec      	ldreq	r4, [r5, #12]
 8007d96:	e7ca      	b.n	8007d2e <__swbuf_r+0x1a>
 8007d98:	4621      	mov	r1, r4
 8007d9a:	4628      	mov	r0, r5
 8007d9c:	f000 f81e 	bl	8007ddc <__swsetup_r>
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d0cb      	beq.n	8007d3c <__swbuf_r+0x28>
 8007da4:	f04f 37ff 	mov.w	r7, #4294967295
 8007da8:	e7ea      	b.n	8007d80 <__swbuf_r+0x6c>
 8007daa:	bf00      	nop
 8007dac:	0800859c 	.word	0x0800859c
 8007db0:	080085bc 	.word	0x080085bc
 8007db4:	0800857c 	.word	0x0800857c

08007db8 <_write_r>:
 8007db8:	b538      	push	{r3, r4, r5, lr}
 8007dba:	4d07      	ldr	r5, [pc, #28]	; (8007dd8 <_write_r+0x20>)
 8007dbc:	4604      	mov	r4, r0
 8007dbe:	4608      	mov	r0, r1
 8007dc0:	4611      	mov	r1, r2
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	602a      	str	r2, [r5, #0]
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f7f9 fb21 	bl	800140e <_write>
 8007dcc:	1c43      	adds	r3, r0, #1
 8007dce:	d102      	bne.n	8007dd6 <_write_r+0x1e>
 8007dd0:	682b      	ldr	r3, [r5, #0]
 8007dd2:	b103      	cbz	r3, 8007dd6 <_write_r+0x1e>
 8007dd4:	6023      	str	r3, [r4, #0]
 8007dd6:	bd38      	pop	{r3, r4, r5, pc}
 8007dd8:	200003d4 	.word	0x200003d4

08007ddc <__swsetup_r>:
 8007ddc:	4b32      	ldr	r3, [pc, #200]	; (8007ea8 <__swsetup_r+0xcc>)
 8007dde:	b570      	push	{r4, r5, r6, lr}
 8007de0:	681d      	ldr	r5, [r3, #0]
 8007de2:	4606      	mov	r6, r0
 8007de4:	460c      	mov	r4, r1
 8007de6:	b125      	cbz	r5, 8007df2 <__swsetup_r+0x16>
 8007de8:	69ab      	ldr	r3, [r5, #24]
 8007dea:	b913      	cbnz	r3, 8007df2 <__swsetup_r+0x16>
 8007dec:	4628      	mov	r0, r5
 8007dee:	f7ff fb1b 	bl	8007428 <__sinit>
 8007df2:	4b2e      	ldr	r3, [pc, #184]	; (8007eac <__swsetup_r+0xd0>)
 8007df4:	429c      	cmp	r4, r3
 8007df6:	d10f      	bne.n	8007e18 <__swsetup_r+0x3c>
 8007df8:	686c      	ldr	r4, [r5, #4]
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e00:	0719      	lsls	r1, r3, #28
 8007e02:	d42c      	bmi.n	8007e5e <__swsetup_r+0x82>
 8007e04:	06dd      	lsls	r5, r3, #27
 8007e06:	d411      	bmi.n	8007e2c <__swsetup_r+0x50>
 8007e08:	2309      	movs	r3, #9
 8007e0a:	6033      	str	r3, [r6, #0]
 8007e0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e10:	81a3      	strh	r3, [r4, #12]
 8007e12:	f04f 30ff 	mov.w	r0, #4294967295
 8007e16:	e03e      	b.n	8007e96 <__swsetup_r+0xba>
 8007e18:	4b25      	ldr	r3, [pc, #148]	; (8007eb0 <__swsetup_r+0xd4>)
 8007e1a:	429c      	cmp	r4, r3
 8007e1c:	d101      	bne.n	8007e22 <__swsetup_r+0x46>
 8007e1e:	68ac      	ldr	r4, [r5, #8]
 8007e20:	e7eb      	b.n	8007dfa <__swsetup_r+0x1e>
 8007e22:	4b24      	ldr	r3, [pc, #144]	; (8007eb4 <__swsetup_r+0xd8>)
 8007e24:	429c      	cmp	r4, r3
 8007e26:	bf08      	it	eq
 8007e28:	68ec      	ldreq	r4, [r5, #12]
 8007e2a:	e7e6      	b.n	8007dfa <__swsetup_r+0x1e>
 8007e2c:	0758      	lsls	r0, r3, #29
 8007e2e:	d512      	bpl.n	8007e56 <__swsetup_r+0x7a>
 8007e30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e32:	b141      	cbz	r1, 8007e46 <__swsetup_r+0x6a>
 8007e34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e38:	4299      	cmp	r1, r3
 8007e3a:	d002      	beq.n	8007e42 <__swsetup_r+0x66>
 8007e3c:	4630      	mov	r0, r6
 8007e3e:	f000 f991 	bl	8008164 <_free_r>
 8007e42:	2300      	movs	r3, #0
 8007e44:	6363      	str	r3, [r4, #52]	; 0x34
 8007e46:	89a3      	ldrh	r3, [r4, #12]
 8007e48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e4c:	81a3      	strh	r3, [r4, #12]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	6063      	str	r3, [r4, #4]
 8007e52:	6923      	ldr	r3, [r4, #16]
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	f043 0308 	orr.w	r3, r3, #8
 8007e5c:	81a3      	strh	r3, [r4, #12]
 8007e5e:	6923      	ldr	r3, [r4, #16]
 8007e60:	b94b      	cbnz	r3, 8007e76 <__swsetup_r+0x9a>
 8007e62:	89a3      	ldrh	r3, [r4, #12]
 8007e64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e6c:	d003      	beq.n	8007e76 <__swsetup_r+0x9a>
 8007e6e:	4621      	mov	r1, r4
 8007e70:	4630      	mov	r0, r6
 8007e72:	f000 f92b 	bl	80080cc <__smakebuf_r>
 8007e76:	89a0      	ldrh	r0, [r4, #12]
 8007e78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e7c:	f010 0301 	ands.w	r3, r0, #1
 8007e80:	d00a      	beq.n	8007e98 <__swsetup_r+0xbc>
 8007e82:	2300      	movs	r3, #0
 8007e84:	60a3      	str	r3, [r4, #8]
 8007e86:	6963      	ldr	r3, [r4, #20]
 8007e88:	425b      	negs	r3, r3
 8007e8a:	61a3      	str	r3, [r4, #24]
 8007e8c:	6923      	ldr	r3, [r4, #16]
 8007e8e:	b943      	cbnz	r3, 8007ea2 <__swsetup_r+0xc6>
 8007e90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e94:	d1ba      	bne.n	8007e0c <__swsetup_r+0x30>
 8007e96:	bd70      	pop	{r4, r5, r6, pc}
 8007e98:	0781      	lsls	r1, r0, #30
 8007e9a:	bf58      	it	pl
 8007e9c:	6963      	ldrpl	r3, [r4, #20]
 8007e9e:	60a3      	str	r3, [r4, #8]
 8007ea0:	e7f4      	b.n	8007e8c <__swsetup_r+0xb0>
 8007ea2:	2000      	movs	r0, #0
 8007ea4:	e7f7      	b.n	8007e96 <__swsetup_r+0xba>
 8007ea6:	bf00      	nop
 8007ea8:	20000024 	.word	0x20000024
 8007eac:	0800859c 	.word	0x0800859c
 8007eb0:	080085bc 	.word	0x080085bc
 8007eb4:	0800857c 	.word	0x0800857c

08007eb8 <_close_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4d06      	ldr	r5, [pc, #24]	; (8007ed4 <_close_r+0x1c>)
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	602b      	str	r3, [r5, #0]
 8007ec4:	f7f9 fabf 	bl	8001446 <_close>
 8007ec8:	1c43      	adds	r3, r0, #1
 8007eca:	d102      	bne.n	8007ed2 <_close_r+0x1a>
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	b103      	cbz	r3, 8007ed2 <_close_r+0x1a>
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	bd38      	pop	{r3, r4, r5, pc}
 8007ed4:	200003d4 	.word	0x200003d4

08007ed8 <__sflush_r>:
 8007ed8:	898a      	ldrh	r2, [r1, #12]
 8007eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ede:	4605      	mov	r5, r0
 8007ee0:	0710      	lsls	r0, r2, #28
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	d458      	bmi.n	8007f98 <__sflush_r+0xc0>
 8007ee6:	684b      	ldr	r3, [r1, #4]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	dc05      	bgt.n	8007ef8 <__sflush_r+0x20>
 8007eec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	dc02      	bgt.n	8007ef8 <__sflush_r+0x20>
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007efa:	2e00      	cmp	r6, #0
 8007efc:	d0f9      	beq.n	8007ef2 <__sflush_r+0x1a>
 8007efe:	2300      	movs	r3, #0
 8007f00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f04:	682f      	ldr	r7, [r5, #0]
 8007f06:	602b      	str	r3, [r5, #0]
 8007f08:	d032      	beq.n	8007f70 <__sflush_r+0x98>
 8007f0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	075a      	lsls	r2, r3, #29
 8007f10:	d505      	bpl.n	8007f1e <__sflush_r+0x46>
 8007f12:	6863      	ldr	r3, [r4, #4]
 8007f14:	1ac0      	subs	r0, r0, r3
 8007f16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f18:	b10b      	cbz	r3, 8007f1e <__sflush_r+0x46>
 8007f1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f1c:	1ac0      	subs	r0, r0, r3
 8007f1e:	2300      	movs	r3, #0
 8007f20:	4602      	mov	r2, r0
 8007f22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f24:	6a21      	ldr	r1, [r4, #32]
 8007f26:	4628      	mov	r0, r5
 8007f28:	47b0      	blx	r6
 8007f2a:	1c43      	adds	r3, r0, #1
 8007f2c:	89a3      	ldrh	r3, [r4, #12]
 8007f2e:	d106      	bne.n	8007f3e <__sflush_r+0x66>
 8007f30:	6829      	ldr	r1, [r5, #0]
 8007f32:	291d      	cmp	r1, #29
 8007f34:	d82c      	bhi.n	8007f90 <__sflush_r+0xb8>
 8007f36:	4a2a      	ldr	r2, [pc, #168]	; (8007fe0 <__sflush_r+0x108>)
 8007f38:	40ca      	lsrs	r2, r1
 8007f3a:	07d6      	lsls	r6, r2, #31
 8007f3c:	d528      	bpl.n	8007f90 <__sflush_r+0xb8>
 8007f3e:	2200      	movs	r2, #0
 8007f40:	6062      	str	r2, [r4, #4]
 8007f42:	04d9      	lsls	r1, r3, #19
 8007f44:	6922      	ldr	r2, [r4, #16]
 8007f46:	6022      	str	r2, [r4, #0]
 8007f48:	d504      	bpl.n	8007f54 <__sflush_r+0x7c>
 8007f4a:	1c42      	adds	r2, r0, #1
 8007f4c:	d101      	bne.n	8007f52 <__sflush_r+0x7a>
 8007f4e:	682b      	ldr	r3, [r5, #0]
 8007f50:	b903      	cbnz	r3, 8007f54 <__sflush_r+0x7c>
 8007f52:	6560      	str	r0, [r4, #84]	; 0x54
 8007f54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f56:	602f      	str	r7, [r5, #0]
 8007f58:	2900      	cmp	r1, #0
 8007f5a:	d0ca      	beq.n	8007ef2 <__sflush_r+0x1a>
 8007f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f60:	4299      	cmp	r1, r3
 8007f62:	d002      	beq.n	8007f6a <__sflush_r+0x92>
 8007f64:	4628      	mov	r0, r5
 8007f66:	f000 f8fd 	bl	8008164 <_free_r>
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	6360      	str	r0, [r4, #52]	; 0x34
 8007f6e:	e7c1      	b.n	8007ef4 <__sflush_r+0x1c>
 8007f70:	6a21      	ldr	r1, [r4, #32]
 8007f72:	2301      	movs	r3, #1
 8007f74:	4628      	mov	r0, r5
 8007f76:	47b0      	blx	r6
 8007f78:	1c41      	adds	r1, r0, #1
 8007f7a:	d1c7      	bne.n	8007f0c <__sflush_r+0x34>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0c4      	beq.n	8007f0c <__sflush_r+0x34>
 8007f82:	2b1d      	cmp	r3, #29
 8007f84:	d001      	beq.n	8007f8a <__sflush_r+0xb2>
 8007f86:	2b16      	cmp	r3, #22
 8007f88:	d101      	bne.n	8007f8e <__sflush_r+0xb6>
 8007f8a:	602f      	str	r7, [r5, #0]
 8007f8c:	e7b1      	b.n	8007ef2 <__sflush_r+0x1a>
 8007f8e:	89a3      	ldrh	r3, [r4, #12]
 8007f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f94:	81a3      	strh	r3, [r4, #12]
 8007f96:	e7ad      	b.n	8007ef4 <__sflush_r+0x1c>
 8007f98:	690f      	ldr	r7, [r1, #16]
 8007f9a:	2f00      	cmp	r7, #0
 8007f9c:	d0a9      	beq.n	8007ef2 <__sflush_r+0x1a>
 8007f9e:	0793      	lsls	r3, r2, #30
 8007fa0:	680e      	ldr	r6, [r1, #0]
 8007fa2:	bf08      	it	eq
 8007fa4:	694b      	ldreq	r3, [r1, #20]
 8007fa6:	600f      	str	r7, [r1, #0]
 8007fa8:	bf18      	it	ne
 8007faa:	2300      	movne	r3, #0
 8007fac:	eba6 0807 	sub.w	r8, r6, r7
 8007fb0:	608b      	str	r3, [r1, #8]
 8007fb2:	f1b8 0f00 	cmp.w	r8, #0
 8007fb6:	dd9c      	ble.n	8007ef2 <__sflush_r+0x1a>
 8007fb8:	6a21      	ldr	r1, [r4, #32]
 8007fba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007fbc:	4643      	mov	r3, r8
 8007fbe:	463a      	mov	r2, r7
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	47b0      	blx	r6
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	dc06      	bgt.n	8007fd6 <__sflush_r+0xfe>
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fce:	81a3      	strh	r3, [r4, #12]
 8007fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd4:	e78e      	b.n	8007ef4 <__sflush_r+0x1c>
 8007fd6:	4407      	add	r7, r0
 8007fd8:	eba8 0800 	sub.w	r8, r8, r0
 8007fdc:	e7e9      	b.n	8007fb2 <__sflush_r+0xda>
 8007fde:	bf00      	nop
 8007fe0:	20400001 	.word	0x20400001

08007fe4 <_fflush_r>:
 8007fe4:	b538      	push	{r3, r4, r5, lr}
 8007fe6:	690b      	ldr	r3, [r1, #16]
 8007fe8:	4605      	mov	r5, r0
 8007fea:	460c      	mov	r4, r1
 8007fec:	b913      	cbnz	r3, 8007ff4 <_fflush_r+0x10>
 8007fee:	2500      	movs	r5, #0
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	b118      	cbz	r0, 8007ffe <_fflush_r+0x1a>
 8007ff6:	6983      	ldr	r3, [r0, #24]
 8007ff8:	b90b      	cbnz	r3, 8007ffe <_fflush_r+0x1a>
 8007ffa:	f7ff fa15 	bl	8007428 <__sinit>
 8007ffe:	4b14      	ldr	r3, [pc, #80]	; (8008050 <_fflush_r+0x6c>)
 8008000:	429c      	cmp	r4, r3
 8008002:	d11b      	bne.n	800803c <_fflush_r+0x58>
 8008004:	686c      	ldr	r4, [r5, #4]
 8008006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0ef      	beq.n	8007fee <_fflush_r+0xa>
 800800e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008010:	07d0      	lsls	r0, r2, #31
 8008012:	d404      	bmi.n	800801e <_fflush_r+0x3a>
 8008014:	0599      	lsls	r1, r3, #22
 8008016:	d402      	bmi.n	800801e <_fflush_r+0x3a>
 8008018:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800801a:	f7ff faa3 	bl	8007564 <__retarget_lock_acquire_recursive>
 800801e:	4628      	mov	r0, r5
 8008020:	4621      	mov	r1, r4
 8008022:	f7ff ff59 	bl	8007ed8 <__sflush_r>
 8008026:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008028:	07da      	lsls	r2, r3, #31
 800802a:	4605      	mov	r5, r0
 800802c:	d4e0      	bmi.n	8007ff0 <_fflush_r+0xc>
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	059b      	lsls	r3, r3, #22
 8008032:	d4dd      	bmi.n	8007ff0 <_fflush_r+0xc>
 8008034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008036:	f7ff fa96 	bl	8007566 <__retarget_lock_release_recursive>
 800803a:	e7d9      	b.n	8007ff0 <_fflush_r+0xc>
 800803c:	4b05      	ldr	r3, [pc, #20]	; (8008054 <_fflush_r+0x70>)
 800803e:	429c      	cmp	r4, r3
 8008040:	d101      	bne.n	8008046 <_fflush_r+0x62>
 8008042:	68ac      	ldr	r4, [r5, #8]
 8008044:	e7df      	b.n	8008006 <_fflush_r+0x22>
 8008046:	4b04      	ldr	r3, [pc, #16]	; (8008058 <_fflush_r+0x74>)
 8008048:	429c      	cmp	r4, r3
 800804a:	bf08      	it	eq
 800804c:	68ec      	ldreq	r4, [r5, #12]
 800804e:	e7da      	b.n	8008006 <_fflush_r+0x22>
 8008050:	0800859c 	.word	0x0800859c
 8008054:	080085bc 	.word	0x080085bc
 8008058:	0800857c 	.word	0x0800857c

0800805c <_lseek_r>:
 800805c:	b538      	push	{r3, r4, r5, lr}
 800805e:	4d07      	ldr	r5, [pc, #28]	; (800807c <_lseek_r+0x20>)
 8008060:	4604      	mov	r4, r0
 8008062:	4608      	mov	r0, r1
 8008064:	4611      	mov	r1, r2
 8008066:	2200      	movs	r2, #0
 8008068:	602a      	str	r2, [r5, #0]
 800806a:	461a      	mov	r2, r3
 800806c:	f7f9 fa12 	bl	8001494 <_lseek>
 8008070:	1c43      	adds	r3, r0, #1
 8008072:	d102      	bne.n	800807a <_lseek_r+0x1e>
 8008074:	682b      	ldr	r3, [r5, #0]
 8008076:	b103      	cbz	r3, 800807a <_lseek_r+0x1e>
 8008078:	6023      	str	r3, [r4, #0]
 800807a:	bd38      	pop	{r3, r4, r5, pc}
 800807c:	200003d4 	.word	0x200003d4

08008080 <__swhatbuf_r>:
 8008080:	b570      	push	{r4, r5, r6, lr}
 8008082:	460e      	mov	r6, r1
 8008084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008088:	2900      	cmp	r1, #0
 800808a:	b096      	sub	sp, #88	; 0x58
 800808c:	4614      	mov	r4, r2
 800808e:	461d      	mov	r5, r3
 8008090:	da08      	bge.n	80080a4 <__swhatbuf_r+0x24>
 8008092:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	602a      	str	r2, [r5, #0]
 800809a:	061a      	lsls	r2, r3, #24
 800809c:	d410      	bmi.n	80080c0 <__swhatbuf_r+0x40>
 800809e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080a2:	e00e      	b.n	80080c2 <__swhatbuf_r+0x42>
 80080a4:	466a      	mov	r2, sp
 80080a6:	f000 f8bb 	bl	8008220 <_fstat_r>
 80080aa:	2800      	cmp	r0, #0
 80080ac:	dbf1      	blt.n	8008092 <__swhatbuf_r+0x12>
 80080ae:	9a01      	ldr	r2, [sp, #4]
 80080b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80080b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80080b8:	425a      	negs	r2, r3
 80080ba:	415a      	adcs	r2, r3
 80080bc:	602a      	str	r2, [r5, #0]
 80080be:	e7ee      	b.n	800809e <__swhatbuf_r+0x1e>
 80080c0:	2340      	movs	r3, #64	; 0x40
 80080c2:	2000      	movs	r0, #0
 80080c4:	6023      	str	r3, [r4, #0]
 80080c6:	b016      	add	sp, #88	; 0x58
 80080c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080080cc <__smakebuf_r>:
 80080cc:	898b      	ldrh	r3, [r1, #12]
 80080ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080d0:	079d      	lsls	r5, r3, #30
 80080d2:	4606      	mov	r6, r0
 80080d4:	460c      	mov	r4, r1
 80080d6:	d507      	bpl.n	80080e8 <__smakebuf_r+0x1c>
 80080d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	6123      	str	r3, [r4, #16]
 80080e0:	2301      	movs	r3, #1
 80080e2:	6163      	str	r3, [r4, #20]
 80080e4:	b002      	add	sp, #8
 80080e6:	bd70      	pop	{r4, r5, r6, pc}
 80080e8:	ab01      	add	r3, sp, #4
 80080ea:	466a      	mov	r2, sp
 80080ec:	f7ff ffc8 	bl	8008080 <__swhatbuf_r>
 80080f0:	9900      	ldr	r1, [sp, #0]
 80080f2:	4605      	mov	r5, r0
 80080f4:	4630      	mov	r0, r6
 80080f6:	f7ff fa57 	bl	80075a8 <_malloc_r>
 80080fa:	b948      	cbnz	r0, 8008110 <__smakebuf_r+0x44>
 80080fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008100:	059a      	lsls	r2, r3, #22
 8008102:	d4ef      	bmi.n	80080e4 <__smakebuf_r+0x18>
 8008104:	f023 0303 	bic.w	r3, r3, #3
 8008108:	f043 0302 	orr.w	r3, r3, #2
 800810c:	81a3      	strh	r3, [r4, #12]
 800810e:	e7e3      	b.n	80080d8 <__smakebuf_r+0xc>
 8008110:	4b0d      	ldr	r3, [pc, #52]	; (8008148 <__smakebuf_r+0x7c>)
 8008112:	62b3      	str	r3, [r6, #40]	; 0x28
 8008114:	89a3      	ldrh	r3, [r4, #12]
 8008116:	6020      	str	r0, [r4, #0]
 8008118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800811c:	81a3      	strh	r3, [r4, #12]
 800811e:	9b00      	ldr	r3, [sp, #0]
 8008120:	6163      	str	r3, [r4, #20]
 8008122:	9b01      	ldr	r3, [sp, #4]
 8008124:	6120      	str	r0, [r4, #16]
 8008126:	b15b      	cbz	r3, 8008140 <__smakebuf_r+0x74>
 8008128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800812c:	4630      	mov	r0, r6
 800812e:	f000 f889 	bl	8008244 <_isatty_r>
 8008132:	b128      	cbz	r0, 8008140 <__smakebuf_r+0x74>
 8008134:	89a3      	ldrh	r3, [r4, #12]
 8008136:	f023 0303 	bic.w	r3, r3, #3
 800813a:	f043 0301 	orr.w	r3, r3, #1
 800813e:	81a3      	strh	r3, [r4, #12]
 8008140:	89a0      	ldrh	r0, [r4, #12]
 8008142:	4305      	orrs	r5, r0
 8008144:	81a5      	strh	r5, [r4, #12]
 8008146:	e7cd      	b.n	80080e4 <__smakebuf_r+0x18>
 8008148:	080073c1 	.word	0x080073c1

0800814c <__malloc_lock>:
 800814c:	4801      	ldr	r0, [pc, #4]	; (8008154 <__malloc_lock+0x8>)
 800814e:	f7ff ba09 	b.w	8007564 <__retarget_lock_acquire_recursive>
 8008152:	bf00      	nop
 8008154:	200003c8 	.word	0x200003c8

08008158 <__malloc_unlock>:
 8008158:	4801      	ldr	r0, [pc, #4]	; (8008160 <__malloc_unlock+0x8>)
 800815a:	f7ff ba04 	b.w	8007566 <__retarget_lock_release_recursive>
 800815e:	bf00      	nop
 8008160:	200003c8 	.word	0x200003c8

08008164 <_free_r>:
 8008164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008166:	2900      	cmp	r1, #0
 8008168:	d044      	beq.n	80081f4 <_free_r+0x90>
 800816a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800816e:	9001      	str	r0, [sp, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	f1a1 0404 	sub.w	r4, r1, #4
 8008176:	bfb8      	it	lt
 8008178:	18e4      	addlt	r4, r4, r3
 800817a:	f7ff ffe7 	bl	800814c <__malloc_lock>
 800817e:	4a1e      	ldr	r2, [pc, #120]	; (80081f8 <_free_r+0x94>)
 8008180:	9801      	ldr	r0, [sp, #4]
 8008182:	6813      	ldr	r3, [r2, #0]
 8008184:	b933      	cbnz	r3, 8008194 <_free_r+0x30>
 8008186:	6063      	str	r3, [r4, #4]
 8008188:	6014      	str	r4, [r2, #0]
 800818a:	b003      	add	sp, #12
 800818c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008190:	f7ff bfe2 	b.w	8008158 <__malloc_unlock>
 8008194:	42a3      	cmp	r3, r4
 8008196:	d908      	bls.n	80081aa <_free_r+0x46>
 8008198:	6825      	ldr	r5, [r4, #0]
 800819a:	1961      	adds	r1, r4, r5
 800819c:	428b      	cmp	r3, r1
 800819e:	bf01      	itttt	eq
 80081a0:	6819      	ldreq	r1, [r3, #0]
 80081a2:	685b      	ldreq	r3, [r3, #4]
 80081a4:	1949      	addeq	r1, r1, r5
 80081a6:	6021      	streq	r1, [r4, #0]
 80081a8:	e7ed      	b.n	8008186 <_free_r+0x22>
 80081aa:	461a      	mov	r2, r3
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	b10b      	cbz	r3, 80081b4 <_free_r+0x50>
 80081b0:	42a3      	cmp	r3, r4
 80081b2:	d9fa      	bls.n	80081aa <_free_r+0x46>
 80081b4:	6811      	ldr	r1, [r2, #0]
 80081b6:	1855      	adds	r5, r2, r1
 80081b8:	42a5      	cmp	r5, r4
 80081ba:	d10b      	bne.n	80081d4 <_free_r+0x70>
 80081bc:	6824      	ldr	r4, [r4, #0]
 80081be:	4421      	add	r1, r4
 80081c0:	1854      	adds	r4, r2, r1
 80081c2:	42a3      	cmp	r3, r4
 80081c4:	6011      	str	r1, [r2, #0]
 80081c6:	d1e0      	bne.n	800818a <_free_r+0x26>
 80081c8:	681c      	ldr	r4, [r3, #0]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	6053      	str	r3, [r2, #4]
 80081ce:	4421      	add	r1, r4
 80081d0:	6011      	str	r1, [r2, #0]
 80081d2:	e7da      	b.n	800818a <_free_r+0x26>
 80081d4:	d902      	bls.n	80081dc <_free_r+0x78>
 80081d6:	230c      	movs	r3, #12
 80081d8:	6003      	str	r3, [r0, #0]
 80081da:	e7d6      	b.n	800818a <_free_r+0x26>
 80081dc:	6825      	ldr	r5, [r4, #0]
 80081de:	1961      	adds	r1, r4, r5
 80081e0:	428b      	cmp	r3, r1
 80081e2:	bf04      	itt	eq
 80081e4:	6819      	ldreq	r1, [r3, #0]
 80081e6:	685b      	ldreq	r3, [r3, #4]
 80081e8:	6063      	str	r3, [r4, #4]
 80081ea:	bf04      	itt	eq
 80081ec:	1949      	addeq	r1, r1, r5
 80081ee:	6021      	streq	r1, [r4, #0]
 80081f0:	6054      	str	r4, [r2, #4]
 80081f2:	e7ca      	b.n	800818a <_free_r+0x26>
 80081f4:	b003      	add	sp, #12
 80081f6:	bd30      	pop	{r4, r5, pc}
 80081f8:	200003cc 	.word	0x200003cc

080081fc <_read_r>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	4d07      	ldr	r5, [pc, #28]	; (800821c <_read_r+0x20>)
 8008200:	4604      	mov	r4, r0
 8008202:	4608      	mov	r0, r1
 8008204:	4611      	mov	r1, r2
 8008206:	2200      	movs	r2, #0
 8008208:	602a      	str	r2, [r5, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	f7f9 f8e2 	bl	80013d4 <_read>
 8008210:	1c43      	adds	r3, r0, #1
 8008212:	d102      	bne.n	800821a <_read_r+0x1e>
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	b103      	cbz	r3, 800821a <_read_r+0x1e>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	200003d4 	.word	0x200003d4

08008220 <_fstat_r>:
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	4d07      	ldr	r5, [pc, #28]	; (8008240 <_fstat_r+0x20>)
 8008224:	2300      	movs	r3, #0
 8008226:	4604      	mov	r4, r0
 8008228:	4608      	mov	r0, r1
 800822a:	4611      	mov	r1, r2
 800822c:	602b      	str	r3, [r5, #0]
 800822e:	f7f9 f916 	bl	800145e <_fstat>
 8008232:	1c43      	adds	r3, r0, #1
 8008234:	d102      	bne.n	800823c <_fstat_r+0x1c>
 8008236:	682b      	ldr	r3, [r5, #0]
 8008238:	b103      	cbz	r3, 800823c <_fstat_r+0x1c>
 800823a:	6023      	str	r3, [r4, #0]
 800823c:	bd38      	pop	{r3, r4, r5, pc}
 800823e:	bf00      	nop
 8008240:	200003d4 	.word	0x200003d4

08008244 <_isatty_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4d06      	ldr	r5, [pc, #24]	; (8008260 <_isatty_r+0x1c>)
 8008248:	2300      	movs	r3, #0
 800824a:	4604      	mov	r4, r0
 800824c:	4608      	mov	r0, r1
 800824e:	602b      	str	r3, [r5, #0]
 8008250:	f7f9 f915 	bl	800147e <_isatty>
 8008254:	1c43      	adds	r3, r0, #1
 8008256:	d102      	bne.n	800825e <_isatty_r+0x1a>
 8008258:	682b      	ldr	r3, [r5, #0]
 800825a:	b103      	cbz	r3, 800825e <_isatty_r+0x1a>
 800825c:	6023      	str	r3, [r4, #0]
 800825e:	bd38      	pop	{r3, r4, r5, pc}
 8008260:	200003d4 	.word	0x200003d4

08008264 <_init>:
 8008264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008266:	bf00      	nop
 8008268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800826a:	bc08      	pop	{r3}
 800826c:	469e      	mov	lr, r3
 800826e:	4770      	bx	lr

08008270 <_fini>:
 8008270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008272:	bf00      	nop
 8008274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008276:	bc08      	pop	{r3}
 8008278:	469e      	mov	lr, r3
 800827a:	4770      	bx	lr
