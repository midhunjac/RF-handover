
BLE_Beacon_Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098f4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08009a34  08009a34  00019a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009e1c  08009e1c  00019e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009e24  08009e24  00019e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009e28  08009e28  00019e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000004  08009e2c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000080  08009ea8  00020080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000039  2000011c  08009f41  0002011c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  20000158  08009f7a  00020158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 BLE_APP_CONTEXT 00000010  2000016c  08009f8b  0002016c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000428  2000017c  08009f9b  0002017c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200005a4  08009f9b  000205a4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 17 .comment      00000043  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 18 .debug_info   0002ac17  00000000  00000000  000201ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00005d5a  00000000  00000000  0004ae06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00002530  00000000  00000000  00050b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00001c58  00000000  00000000  00053090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  00026d34  00000000  00000000  00054ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   00029c10  00000000  00000000  0007ba1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    000d438b  00000000  00000000  000a562c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  0000a380  00000000  00000000  001799b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 00000075  00000000  00000000  00183d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000017c 	.word	0x2000017c
 800015c:	00000000 	.word	0x00000000
 8000160:	08009a1c 	.word	0x08009a1c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000180 	.word	0x20000180
 800017c:	08009a1c 	.word	0x08009a1c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b970 	b.w	8000548 <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000284:	9e08      	ldr	r6, [sp, #32]
 8000286:	460d      	mov	r5, r1
 8000288:	4604      	mov	r4, r0
 800028a:	460f      	mov	r7, r1
 800028c:	2b00      	cmp	r3, #0
 800028e:	d14a      	bne.n	8000326 <__udivmoddi4+0xa6>
 8000290:	428a      	cmp	r2, r1
 8000292:	4694      	mov	ip, r2
 8000294:	d965      	bls.n	8000362 <__udivmoddi4+0xe2>
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	b143      	cbz	r3, 80002ae <__udivmoddi4+0x2e>
 800029c:	fa02 fc03 	lsl.w	ip, r2, r3
 80002a0:	f1c3 0220 	rsb	r2, r3, #32
 80002a4:	409f      	lsls	r7, r3
 80002a6:	fa20 f202 	lsr.w	r2, r0, r2
 80002aa:	4317      	orrs	r7, r2
 80002ac:	409c      	lsls	r4, r3
 80002ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002b2:	fa1f f58c 	uxth.w	r5, ip
 80002b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ba:	0c22      	lsrs	r2, r4, #16
 80002bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002c4:	fb01 f005 	mul.w	r0, r1, r5
 80002c8:	4290      	cmp	r0, r2
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x62>
 80002cc:	eb1c 0202 	adds.w	r2, ip, r2
 80002d0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002d4:	f080 811c 	bcs.w	8000510 <__udivmoddi4+0x290>
 80002d8:	4290      	cmp	r0, r2
 80002da:	f240 8119 	bls.w	8000510 <__udivmoddi4+0x290>
 80002de:	3902      	subs	r1, #2
 80002e0:	4462      	add	r2, ip
 80002e2:	1a12      	subs	r2, r2, r0
 80002e4:	b2a4      	uxth	r4, r4
 80002e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002f2:	fb00 f505 	mul.w	r5, r0, r5
 80002f6:	42a5      	cmp	r5, r4
 80002f8:	d90a      	bls.n	8000310 <__udivmoddi4+0x90>
 80002fa:	eb1c 0404 	adds.w	r4, ip, r4
 80002fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000302:	f080 8107 	bcs.w	8000514 <__udivmoddi4+0x294>
 8000306:	42a5      	cmp	r5, r4
 8000308:	f240 8104 	bls.w	8000514 <__udivmoddi4+0x294>
 800030c:	4464      	add	r4, ip
 800030e:	3802      	subs	r0, #2
 8000310:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000314:	1b64      	subs	r4, r4, r5
 8000316:	2100      	movs	r1, #0
 8000318:	b11e      	cbz	r6, 8000322 <__udivmoddi4+0xa2>
 800031a:	40dc      	lsrs	r4, r3
 800031c:	2300      	movs	r3, #0
 800031e:	e9c6 4300 	strd	r4, r3, [r6]
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	428b      	cmp	r3, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0xbc>
 800032a:	2e00      	cmp	r6, #0
 800032c:	f000 80ed 	beq.w	800050a <__udivmoddi4+0x28a>
 8000330:	2100      	movs	r1, #0
 8000332:	e9c6 0500 	strd	r0, r5, [r6]
 8000336:	4608      	mov	r0, r1
 8000338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033c:	fab3 f183 	clz	r1, r3
 8000340:	2900      	cmp	r1, #0
 8000342:	d149      	bne.n	80003d8 <__udivmoddi4+0x158>
 8000344:	42ab      	cmp	r3, r5
 8000346:	d302      	bcc.n	800034e <__udivmoddi4+0xce>
 8000348:	4282      	cmp	r2, r0
 800034a:	f200 80f8 	bhi.w	800053e <__udivmoddi4+0x2be>
 800034e:	1a84      	subs	r4, r0, r2
 8000350:	eb65 0203 	sbc.w	r2, r5, r3
 8000354:	2001      	movs	r0, #1
 8000356:	4617      	mov	r7, r2
 8000358:	2e00      	cmp	r6, #0
 800035a:	d0e2      	beq.n	8000322 <__udivmoddi4+0xa2>
 800035c:	e9c6 4700 	strd	r4, r7, [r6]
 8000360:	e7df      	b.n	8000322 <__udivmoddi4+0xa2>
 8000362:	b902      	cbnz	r2, 8000366 <__udivmoddi4+0xe6>
 8000364:	deff      	udf	#255	; 0xff
 8000366:	fab2 f382 	clz	r3, r2
 800036a:	2b00      	cmp	r3, #0
 800036c:	f040 8090 	bne.w	8000490 <__udivmoddi4+0x210>
 8000370:	1a8a      	subs	r2, r1, r2
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2101      	movs	r1, #1
 800037c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000380:	fb07 2015 	mls	r0, r7, r5, r2
 8000384:	0c22      	lsrs	r2, r4, #16
 8000386:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800038a:	fb0e f005 	mul.w	r0, lr, r5
 800038e:	4290      	cmp	r0, r2
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x124>
 8000392:	eb1c 0202 	adds.w	r2, ip, r2
 8000396:	f105 38ff 	add.w	r8, r5, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x122>
 800039c:	4290      	cmp	r0, r2
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2b8>
 80003a2:	4645      	mov	r5, r8
 80003a4:	1a12      	subs	r2, r2, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ac:	fb07 2210 	mls	r2, r7, r0, r2
 80003b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x14e>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x14c>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2c2>
 80003cc:	4610      	mov	r0, r2
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003d6:	e79f      	b.n	8000318 <__udivmoddi4+0x98>
 80003d8:	f1c1 0720 	rsb	r7, r1, #32
 80003dc:	408b      	lsls	r3, r1
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ea:	fa20 f307 	lsr.w	r3, r0, r7
 80003ee:	40fd      	lsrs	r5, r7
 80003f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f4:	4323      	orrs	r3, r4
 80003f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003fa:	fa1f fe8c 	uxth.w	lr, ip
 80003fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000402:	0c1c      	lsrs	r4, r3, #16
 8000404:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000408:	fb08 f50e 	mul.w	r5, r8, lr
 800040c:	42a5      	cmp	r5, r4
 800040e:	fa02 f201 	lsl.w	r2, r2, r1
 8000412:	fa00 f001 	lsl.w	r0, r0, r1
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b0>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2b4>
 8000424:	42a5      	cmp	r5, r4
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2b4>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4464      	add	r4, ip
 8000430:	1b64      	subs	r4, r4, r5
 8000432:	b29d      	uxth	r5, r3
 8000434:	fbb4 f3f9 	udiv	r3, r4, r9
 8000438:	fb09 4413 	mls	r4, r9, r3, r4
 800043c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000440:	fb03 fe0e 	mul.w	lr, r3, lr
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1da>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2ac>
 8000452:	45a6      	cmp	lr, r4
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2ac>
 8000456:	3b02      	subs	r3, #2
 8000458:	4464      	add	r4, ip
 800045a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800045e:	fba3 9502 	umull	r9, r5, r3, r2
 8000462:	eba4 040e 	sub.w	r4, r4, lr
 8000466:	42ac      	cmp	r4, r5
 8000468:	46c8      	mov	r8, r9
 800046a:	46ae      	mov	lr, r5
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x29c>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x298>
 8000470:	b156      	cbz	r6, 8000488 <__udivmoddi4+0x208>
 8000472:	ebb0 0208 	subs.w	r2, r0, r8
 8000476:	eb64 040e 	sbc.w	r4, r4, lr
 800047a:	fa04 f707 	lsl.w	r7, r4, r7
 800047e:	40ca      	lsrs	r2, r1
 8000480:	40cc      	lsrs	r4, r1
 8000482:	4317      	orrs	r7, r2
 8000484:	e9c6 7400 	strd	r7, r4, [r6]
 8000488:	4618      	mov	r0, r3
 800048a:	2100      	movs	r1, #0
 800048c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000490:	f1c3 0120 	rsb	r1, r3, #32
 8000494:	fa02 fc03 	lsl.w	ip, r2, r3
 8000498:	fa20 f201 	lsr.w	r2, r0, r1
 800049c:	fa25 f101 	lsr.w	r1, r5, r1
 80004a0:	409d      	lsls	r5, r3
 80004a2:	432a      	orrs	r2, r5
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80004b0:	fb07 1510 	mls	r5, r7, r0, r1
 80004b4:	0c11      	lsrs	r1, r2, #16
 80004b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ba:	fb00 f50e 	mul.w	r5, r0, lr
 80004be:	428d      	cmp	r5, r1
 80004c0:	fa04 f403 	lsl.w	r4, r4, r3
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x258>
 80004c6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b0>
 80004d0:	428d      	cmp	r5, r1
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b0>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1b49      	subs	r1, r1, r5
 80004da:	b292      	uxth	r2, r2
 80004dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004e0:	fb07 1115 	mls	r1, r7, r5, r1
 80004e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ec:	4291      	cmp	r1, r2
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x282>
 80004f0:	eb1c 0202 	adds.w	r2, ip, r2
 80004f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2a8>
 80004fa:	4291      	cmp	r1, r2
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2a8>
 80004fe:	3d02      	subs	r5, #2
 8000500:	4462      	add	r2, ip
 8000502:	1a52      	subs	r2, r2, r1
 8000504:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0xfc>
 800050a:	4631      	mov	r1, r6
 800050c:	4630      	mov	r0, r6
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xa2>
 8000510:	4639      	mov	r1, r7
 8000512:	e6e6      	b.n	80002e2 <__udivmoddi4+0x62>
 8000514:	4610      	mov	r0, r2
 8000516:	e6fb      	b.n	8000310 <__udivmoddi4+0x90>
 8000518:	4548      	cmp	r0, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f0>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000524:	3b01      	subs	r3, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f0>
 8000528:	4645      	mov	r5, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x282>
 800052c:	462b      	mov	r3, r5
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1da>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x258>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b0>
 8000538:	3d02      	subs	r5, #2
 800053a:	4462      	add	r2, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x124>
 800053e:	4608      	mov	r0, r1
 8000540:	e70a      	b.n	8000358 <__udivmoddi4+0xd8>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x14e>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800054c:	b5b0      	push	{r4, r5, r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <APPD_EnableCPU2+0x5c>)
 8000554:	881a      	ldrh	r2, [r3, #0]
 8000556:	4b15      	ldr	r3, [pc, #84]	; (80005ac <APPD_EnableCPU2+0x60>)
 8000558:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <APPD_EnableCPU2+0x64>)
 800055c:	881a      	ldrh	r2, [r3, #0]
 800055e:	4b13      	ldr	r3, [pc, #76]	; (80005ac <APPD_EnableCPU2+0x60>)
 8000560:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 8000562:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <APPD_EnableCPU2+0x68>)
 8000564:	881a      	ldrh	r2, [r3, #0]
 8000566:	4b11      	ldr	r3, [pc, #68]	; (80005ac <APPD_EnableCPU2+0x60>)
 8000568:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 800056a:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <APPD_EnableCPU2+0x6c>)
 800056c:	881a      	ldrh	r2, [r3, #0]
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <APPD_EnableCPU2+0x60>)
 8000570:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 8000572:	4b12      	ldr	r3, [pc, #72]	; (80005bc <APPD_EnableCPU2+0x70>)
 8000574:	881a      	ldrh	r2, [r3, #0]
 8000576:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <APPD_EnableCPU2+0x60>)
 8000578:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800057a:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <APPD_EnableCPU2+0x74>)
 800057c:	1d3c      	adds	r4, r7, #4
 800057e:	461d      	mov	r5, r3
 8000580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000588:	c403      	stmia	r4!, {r0, r1}
 800058a:	8022      	strh	r2, [r4, #0]
 800058c:	3402      	adds	r4, #2
 800058e:	0c13      	lsrs	r3, r2, #16
 8000590:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000592:	f006 fb8d 	bl	8006cb0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	4618      	mov	r0, r3
 800059a:	f005 fe28 	bl	80061ee <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800059e:	bf00      	nop
}
 80005a0:	3720      	adds	r7, #32
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bdb0      	pop	{r4, r5, r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000004 	.word	0x20000004
 80005ac:	200301e8 	.word	0x200301e8
 80005b0:	20000006 	.word	0x20000006
 80005b4:	20000008 	.word	0x20000008
 80005b8:	2000000a 	.word	0x2000000a
 80005bc:	2000000c 	.word	0x2000000c
 80005c0:	08009a34 	.word	0x08009a34

080005c4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <LL_C2_PWR_SetPowerMode+0x28>)
 80005ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005d2:	f023 0207 	bic.w	r2, r3, #7
 80005d6:	4905      	ldr	r1, [pc, #20]	; (80005ec <LL_C2_PWR_SetPowerMode+0x28>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4313      	orrs	r3, r2
 80005dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	58000400 	.word	0x58000400

080005f0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <LL_EXTI_EnableIT_32_63+0x24>)
 80005fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80005fe:	4905      	ldr	r1, [pc, #20]	; (8000614 <LL_EXTI_EnableIT_32_63+0x24>)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4313      	orrs	r3, r2
 8000604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000608:	bf00      	nop
 800060a:	370c      	adds	r7, #12
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	58000800 	.word	0x58000800

08000618 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000624:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000626:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800062a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800062e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000632:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	021b      	lsls	r3, r3, #8
 800063a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800063e:	4313      	orrs	r3, r2
 8000640:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	cafecafe 	.word	0xcafecafe

08000654 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800065c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000660:	689b      	ldr	r3, [r3, #8]
 8000662:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000666:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4313      	orrs	r3, r2
 800066e:	608b      	str	r3, [r1, #8]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000688:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800068c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80006a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80006ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80006c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80006d4:	d101      	bne.n	80006da <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80006d6:	2301      	movs	r3, #1
 80006d8:	e000      	b.n	80006dc <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80006da:	2300      	movs	r3, #0
}
 80006dc:	4618      	mov	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80006ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80006ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80006fa:	d101      	bne.n	8000700 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80006fc:	2301      	movs	r3, #1
 80006fe:	e000      	b.n	8000702 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000718:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800071a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4313      	orrs	r3, r2
 8000722:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000728:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4013      	ands	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000730:	68fb      	ldr	r3, [r7, #12]
}
 8000732:	bf00      	nop
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
	...

08000740 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <LL_DBGMCU_GetRevisionID+0x18>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	0c1b      	lsrs	r3, r3, #16
 800074a:	b29b      	uxth	r3, r3
}
 800074c:	4618      	mov	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	e0042000 	.word	0xe0042000

0800075c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	685a      	ldr	r2, [r3, #4]
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	041b      	lsls	r3, r3, #16
 800076e:	431a      	orrs	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	605a      	str	r2, [r3, #4]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	685a      	ldr	r2, [r3, #4]
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	431a      	orrs	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	605a      	str	r2, [r3, #4]
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
 80007aa:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	695a      	ldr	r2, [r3, #20]
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	041b      	lsls	r3, r3, #16
 80007b4:	431a      	orrs	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	615a      	str	r2, [r3, #20]
}
 80007ba:	bf00      	nop
 80007bc:	370c      	adds	r7, #12
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr

080007c6 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007c6:	b480      	push	{r7}
 80007c8:	b083      	sub	sp, #12
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
 80007ce:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	695a      	ldr	r2, [r3, #20]
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	431a      	orrs	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	615a      	str	r2, [r3, #20]
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	683a      	ldr	r2, [r7, #0]
 80007f6:	609a      	str	r2, [r3, #8]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	619a      	str	r2, [r3, #24]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	22ff      	movs	r2, #255	; 0xff
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	22ca      	movs	r2, #202	; 0xca
 8000846:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	2253      	movs	r2, #83	; 0x53
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
 8000862:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	f023 0207 	bic.w	r2, r3, #7
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	431a      	orrs	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	609a      	str	r2, [r3, #8]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <MX_APPE_Config+0x18>)
 8000886:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800088a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800088c:	f000 f824 	bl	80008d8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000890:	f000 f864 	bl	800095c <Config_HSE>

  return;
 8000894:	bf00      	nop
}
 8000896:	bd80      	pop	{r7, pc}
 8000898:	58004000 	.word	0x58004000

0800089c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80008a0:	f000 f870 	bl	8000984 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80008a4:	f000 f888 	bl	80009b8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80008a8:	4903      	ldr	r1, [pc, #12]	; (80008b8 <MX_APPE_Init+0x1c>)
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 fdc0 	bl	8001430 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80008b0:	f000 f892 	bl	80009d8 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80008b4:	bf00      	nop
}
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200001e0 	.word	0x200001e0

080008bc <Init_Smps>:

void Init_Smps(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80008c0:	bf00      	nop
}
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <Init_Exti>:

void Init_Exti(void)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80008ce:	2050      	movs	r0, #80	; 0x50
 80008d0:	f7ff fe8e 	bl	80005f0 <LL_EXTI_EnableIT_32_63>

  return;
 80008d4:	bf00      	nop
}
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80008dc:	f000 f804 	bl	80008e8 <Reset_BackupDomain>

  Reset_IPCC();
 80008e0:	f000 f81a 	bl	8000918 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80008e4:	bf00      	nop
}
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80008ec:	f7ff fee8 	bl	80006c0 <LL_RCC_IsActiveFlag_PINRST>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d00d      	beq.n	8000912 <Reset_BackupDomain+0x2a>
 80008f6:	f7ff fef6 	bl	80006e6 <LL_RCC_IsActiveFlag_SFTRST>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d108      	bne.n	8000912 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000900:	f002 f90c 	bl	8002b1c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000904:	f002 f90a 	bl	8002b1c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8000908:	f7ff feb8 	bl	800067c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800090c:	f7ff fec7 	bl	800069e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000910:	bf00      	nop
 8000912:	bf00      	nop
}
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800091c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000920:	f7ff fef4 	bl	800070c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000924:	213f      	movs	r1, #63	; 0x3f
 8000926:	480c      	ldr	r0, [pc, #48]	; (8000958 <Reset_IPCC+0x40>)
 8000928:	f7ff ff5e 	bl	80007e8 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800092c:	213f      	movs	r1, #63	; 0x3f
 800092e:	480a      	ldr	r0, [pc, #40]	; (8000958 <Reset_IPCC+0x40>)
 8000930:	f7ff ff68 	bl	8000804 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000934:	213f      	movs	r1, #63	; 0x3f
 8000936:	4808      	ldr	r0, [pc, #32]	; (8000958 <Reset_IPCC+0x40>)
 8000938:	f7ff ff10 	bl	800075c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800093c:	213f      	movs	r1, #63	; 0x3f
 800093e:	4806      	ldr	r0, [pc, #24]	; (8000958 <Reset_IPCC+0x40>)
 8000940:	f7ff ff2f 	bl	80007a2 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000944:	213f      	movs	r1, #63	; 0x3f
 8000946:	4804      	ldr	r0, [pc, #16]	; (8000958 <Reset_IPCC+0x40>)
 8000948:	f7ff ff1a 	bl	8000780 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800094c:	213f      	movs	r1, #63	; 0x3f
 800094e:	4802      	ldr	r0, [pc, #8]	; (8000958 <Reset_IPCC+0x40>)
 8000950:	f7ff ff39 	bl	80007c6 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000954:	bf00      	nop
}
 8000956:	bd80      	pop	{r7, pc}
 8000958:	58000c00 	.word	0x58000c00

0800095c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000962:	2000      	movs	r0, #0
 8000964:	f006 fa30 	bl	8006dc8 <OTP_Read>
 8000968:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d005      	beq.n	800097c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	799b      	ldrb	r3, [r3, #6]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fe4f 	bl	8000618 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800097a:	bf00      	nop
 800097c:	bf00      	nop
}
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <System_Init>:

static void System_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  Init_Smps();
 8000988:	f7ff ff98 	bl	80008bc <Init_Smps>

  Init_Exti();
 800098c:	f7ff ff9d 	bl	80008ca <Init_Exti>

  Init_Rtc();
 8000990:	f000 f802 	bl	8000998 <Init_Rtc>

  return;
 8000994:	bf00      	nop
}
 8000996:	bd80      	pop	{r7, pc}

08000998 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <Init_Rtc+0x1c>)
 800099e:	f7ff ff4c 	bl	800083a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80009a2:	2100      	movs	r1, #0
 80009a4:	4803      	ldr	r0, [pc, #12]	; (80009b4 <Init_Rtc+0x1c>)
 80009a6:	f7ff ff58 	bl	800085a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80009aa:	4802      	ldr	r0, [pc, #8]	; (80009b4 <Init_Rtc+0x1c>)
 80009ac:	f7ff ff38 	bl	8000820 <LL_RTC_EnableWriteProtection>

  return;
 80009b0:	bf00      	nop
}
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40002800 	.word	0x40002800

080009b8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80009bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80009c0:	f7ff fe48 	bl	8000654 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80009c4:	f007 fc8c 	bl	80082e0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80009c8:	2004      	movs	r0, #4
 80009ca:	f7ff fdfb 	bl	80005c4 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 80009ce:	f002 f8c5 	bl	8002b5c <HAL_PWREx_EnableSRAMRetention>

  return;
 80009d2:	bf00      	nop
}
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80009de:	f005 ffb1 	bl	8006944 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80009e2:	4a11      	ldr	r2, [pc, #68]	; (8000a28 <appe_Tl_Init+0x50>)
 80009e4:	2100      	movs	r1, #0
 80009e6:	2020      	movs	r0, #32
 80009e8:	f007 fdb8 	bl	800855c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <appe_Tl_Init+0x54>)
 80009ee:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <appe_Tl_Init+0x58>)
 80009f2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80009f4:	463b      	mov	r3, r7
 80009f6:	4619      	mov	r1, r3
 80009f8:	480e      	ldr	r0, [pc, #56]	; (8000a34 <appe_Tl_Init+0x5c>)
 80009fa:	f005 fe69 	bl	80066d0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <appe_Tl_Init+0x60>)
 8000a00:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <appe_Tl_Init+0x64>)
 8000a04:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <appe_Tl_Init+0x68>)
 8000a08:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000a0a:	f240 533c 	movw	r3, #1340	; 0x53c
 8000a0e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	4618      	mov	r0, r3
 8000a16:	f006 f8d7 	bl	8006bc8 <TL_MM_Init>

  TL_Enable();
 8000a1a:	f005 ff8d 	bl	8006938 <TL_Enable>

  return;
 8000a1e:	bf00      	nop
}
 8000a20:	3720      	adds	r7, #32
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	08006709 	.word	0x08006709
 8000a2c:	20030734 	.word	0x20030734
 8000a30:	08000a45 	.word	0x08000a45
 8000a34:	08000a5d 	.word	0x08000a5d
 8000a38:	2003094c 	.word	0x2003094c
 8000a3c:	20030840 	.word	0x20030840
 8000a40:	200301f8 	.word	0x200301f8

08000a44 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000a4e:	bf00      	nop
}
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	330b      	adds	r3, #11
 8000a6a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000a6c:	69fb      	ldr	r3, [r7, #28]
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000a76:	2b07      	cmp	r3, #7
 8000a78:	d81f      	bhi.n	8000aba <APPE_SysUserEvtRx+0x5e>
 8000a7a:	a201      	add	r2, pc, #4	; (adr r2, 8000a80 <APPE_SysUserEvtRx+0x24>)
 8000a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a80:	08000aa1 	.word	0x08000aa1
 8000a84:	08000ab3 	.word	0x08000ab3
 8000a88:	08000abb 	.word	0x08000abb
 8000a8c:	08000abb 	.word	0x08000abb
 8000a90:	08000abb 	.word	0x08000abb
 8000a94:	08000abb 	.word	0x08000abb
 8000a98:	08000abb 	.word	0x08000abb
 8000a9c:	08000abb 	.word	0x08000abb
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f005 fbcf 	bl	8006248 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f000 f81b 	bl	8000ae6 <APPE_SysEvtReadyProcessing>
    break;
 8000ab0:	e004      	b.n	8000abc <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 f806 	bl	8000ac4 <APPE_SysEvtError>
    break;
 8000ab8:	e000      	b.n	8000abc <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000aba:	bf00      	nop
  }

  return;
 8000abc:	bf00      	nop
}
 8000abe:	3720      	adds	r7, #32
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	330b      	adds	r3, #11
 8000ad2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000ada:	bf00      	nop
}
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b08a      	sub	sp, #40	; 0x28
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	330b      	adds	r3, #11
 8000b06:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000b08:	6a3b      	ldr	r3, [r7, #32]
 8000b0a:	3302      	adds	r3, #2
 8000b0c:	61fb      	str	r3, [r7, #28]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d117      	bne.n	8000b46 <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000b16:	f7ff fd19 	bl	800054c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8000b1a:	230d      	movs	r3, #13
 8000b1c:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000b1e:	237f      	movs	r3, #127	; 0x7f
 8000b20:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000b22:	f7ff fe0d 	bl	8000740 <LL_DBGMCU_GetRevisionID>
 8000b26:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = RevisionID;
 8000b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	4618      	mov	r0, r3
 8000b34:	f005 fb72 	bl	800621c <SHCI_C2_Config>

    APP_BLE_Init();
 8000b38:	f006 fa50 	bl	8006fdc <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f007 fbe0 	bl	8008304 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000b44:	e007      	b.n	8000b56 <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d103      	bne.n	8000b56 <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
  return;
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
}
 8000b58:	3728      	adds	r7, #40	; 0x28
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000b62:	f04f 30ff 	mov.w	r0, #4294967295
 8000b66:	f007 fbfd 	bl	8008364 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000b72:	bf00      	nop
}
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000b86:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8a:	f007 fbeb 	bl	8008364 <UTIL_SEQ_Run>

  return;
 8000b8e:	bf00      	nop
}
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b082      	sub	sp, #8
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2020      	movs	r0, #32
 8000ba2:	f007 fcfd 	bl	80085a0 <UTIL_SEQ_SetTask>
  return;
 8000ba6:	bf00      	nop
}
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b082      	sub	sp, #8
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000bb6:	2002      	movs	r0, #2
 8000bb8:	f007 fd5e 	bl	8008678 <UTIL_SEQ_SetEvt>
  return;
 8000bbc:	bf00      	nop
}
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000bcc:	2002      	movs	r0, #2
 8000bce:	f007 fd73 	bl	80086b8 <UTIL_SEQ_WaitEvt>
  return;
 8000bd2:	bf00      	nop
}
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
	...

08000bdc <LL_EXTI_EnableIT_0_31>:
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <LL_EXTI_EnableIT_0_31+0x24>)
 8000be6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000bea:	4905      	ldr	r1, [pc, #20]	; (8000c00 <LL_EXTI_EnableIT_0_31+0x24>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	58000800 	.word	0x58000800

08000c04 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4904      	ldr	r1, [pc, #16]	; (8000c24 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	600b      	str	r3, [r1, #0]

}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	58000800 	.word	0x58000800

08000c28 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <ReadRtcSsrValue+0x3c>)
 8000c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c32:	b29b      	uxth	r3, r3
 8000c34:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c36:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <ReadRtcSsrValue+0x3c>)
 8000c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000c3e:	e005      	b.n	8000c4c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <ReadRtcSsrValue+0x3c>)
 8000c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c48:	b29b      	uxth	r3, r3
 8000c4a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d1f5      	bne.n	8000c40 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000c54:	683b      	ldr	r3, [r7, #0]
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40002800 	.word	0x40002800

08000c68 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	460a      	mov	r2, r1
 8000c72:	71fb      	strb	r3, [r7, #7]
 8000c74:	4613      	mov	r3, r2
 8000c76:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000c78:	79ba      	ldrb	r2, [r7, #6]
 8000c7a:	491d      	ldr	r1, [pc, #116]	; (8000cf0 <LinkTimerAfter+0x88>)
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	440b      	add	r3, r1
 8000c86:	3315      	adds	r3, #21
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	2b06      	cmp	r3, #6
 8000c90:	d009      	beq.n	8000ca6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000c92:	7bfa      	ldrb	r2, [r7, #15]
 8000c94:	4916      	ldr	r1, [pc, #88]	; (8000cf0 <LinkTimerAfter+0x88>)
 8000c96:	4613      	mov	r3, r2
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	4413      	add	r3, r2
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	440b      	add	r3, r1
 8000ca0:	3314      	adds	r3, #20
 8000ca2:	79fa      	ldrb	r2, [r7, #7]
 8000ca4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000ca6:	79fa      	ldrb	r2, [r7, #7]
 8000ca8:	4911      	ldr	r1, [pc, #68]	; (8000cf0 <LinkTimerAfter+0x88>)
 8000caa:	4613      	mov	r3, r2
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	4413      	add	r3, r2
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	440b      	add	r3, r1
 8000cb4:	3315      	adds	r3, #21
 8000cb6:	7bfa      	ldrb	r2, [r7, #15]
 8000cb8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000cba:	79fa      	ldrb	r2, [r7, #7]
 8000cbc:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <LinkTimerAfter+0x88>)
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	4413      	add	r3, r2
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	440b      	add	r3, r1
 8000cc8:	3314      	adds	r3, #20
 8000cca:	79ba      	ldrb	r2, [r7, #6]
 8000ccc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000cce:	79ba      	ldrb	r2, [r7, #6]
 8000cd0:	4907      	ldr	r1, [pc, #28]	; (8000cf0 <LinkTimerAfter+0x88>)
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	440b      	add	r3, r1
 8000cdc:	3315      	adds	r3, #21
 8000cde:	79fa      	ldrb	r2, [r7, #7]
 8000ce0:	701a      	strb	r2, [r3, #0]

  return;
 8000ce2:	bf00      	nop
}
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000080 	.word	0x20000080

08000cf4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	460a      	mov	r2, r1
 8000cfe:	71fb      	strb	r3, [r7, #7]
 8000d00:	4613      	mov	r3, r2
 8000d02:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000d04:	4b29      	ldr	r3, [pc, #164]	; (8000dac <LinkTimerBefore+0xb8>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	79ba      	ldrb	r2, [r7, #6]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d032      	beq.n	8000d76 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000d10:	79ba      	ldrb	r2, [r7, #6]
 8000d12:	4927      	ldr	r1, [pc, #156]	; (8000db0 <LinkTimerBefore+0xbc>)
 8000d14:	4613      	mov	r3, r2
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	4413      	add	r3, r2
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	440b      	add	r3, r1
 8000d1e:	3314      	adds	r3, #20
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000d24:	7bfa      	ldrb	r2, [r7, #15]
 8000d26:	4922      	ldr	r1, [pc, #136]	; (8000db0 <LinkTimerBefore+0xbc>)
 8000d28:	4613      	mov	r3, r2
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	440b      	add	r3, r1
 8000d32:	3315      	adds	r3, #21
 8000d34:	79fa      	ldrb	r2, [r7, #7]
 8000d36:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000d38:	79fa      	ldrb	r2, [r7, #7]
 8000d3a:	491d      	ldr	r1, [pc, #116]	; (8000db0 <LinkTimerBefore+0xbc>)
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	440b      	add	r3, r1
 8000d46:	3315      	adds	r3, #21
 8000d48:	79ba      	ldrb	r2, [r7, #6]
 8000d4a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000d4c:	79fa      	ldrb	r2, [r7, #7]
 8000d4e:	4918      	ldr	r1, [pc, #96]	; (8000db0 <LinkTimerBefore+0xbc>)
 8000d50:	4613      	mov	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	4413      	add	r3, r2
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	440b      	add	r3, r1
 8000d5a:	3314      	adds	r3, #20
 8000d5c:	7bfa      	ldrb	r2, [r7, #15]
 8000d5e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000d60:	79ba      	ldrb	r2, [r7, #6]
 8000d62:	4913      	ldr	r1, [pc, #76]	; (8000db0 <LinkTimerBefore+0xbc>)
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	440b      	add	r3, r1
 8000d6e:	3314      	adds	r3, #20
 8000d70:	79fa      	ldrb	r2, [r7, #7]
 8000d72:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000d74:	e014      	b.n	8000da0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000d76:	79fa      	ldrb	r2, [r7, #7]
 8000d78:	490d      	ldr	r1, [pc, #52]	; (8000db0 <LinkTimerBefore+0xbc>)
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	4413      	add	r3, r2
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	440b      	add	r3, r1
 8000d84:	3315      	adds	r3, #21
 8000d86:	79ba      	ldrb	r2, [r7, #6]
 8000d88:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000d8a:	79ba      	ldrb	r2, [r7, #6]
 8000d8c:	4908      	ldr	r1, [pc, #32]	; (8000db0 <LinkTimerBefore+0xbc>)
 8000d8e:	4613      	mov	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	4413      	add	r3, r2
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	440b      	add	r3, r1
 8000d98:	3314      	adds	r3, #20
 8000d9a:	79fa      	ldrb	r2, [r7, #7]
 8000d9c:	701a      	strb	r2, [r3, #0]
  return;
 8000d9e:	bf00      	nop
}
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000110 	.word	0x20000110
 8000db0:	20000080 	.word	0x20000080

08000db4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000dbe:	4b4e      	ldr	r3, [pc, #312]	; (8000ef8 <linkTimer+0x144>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	2b06      	cmp	r3, #6
 8000dc6:	d118      	bne.n	8000dfa <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000dc8:	4b4b      	ldr	r3, [pc, #300]	; (8000ef8 <linkTimer+0x144>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b4b      	ldr	r3, [pc, #300]	; (8000efc <linkTimer+0x148>)
 8000dd0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000dd2:	4a49      	ldr	r2, [pc, #292]	; (8000ef8 <linkTimer+0x144>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000dd8:	79fa      	ldrb	r2, [r7, #7]
 8000dda:	4949      	ldr	r1, [pc, #292]	; (8000f00 <linkTimer+0x14c>)
 8000ddc:	4613      	mov	r3, r2
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4413      	add	r3, r2
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	440b      	add	r3, r1
 8000de6:	3315      	adds	r3, #21
 8000de8:	2206      	movs	r2, #6
 8000dea:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000dec:	4b45      	ldr	r3, [pc, #276]	; (8000f04 <linkTimer+0x150>)
 8000dee:	f04f 32ff 	mov.w	r2, #4294967295
 8000df2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	81fb      	strh	r3, [r7, #14]
 8000df8:	e078      	b.n	8000eec <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000dfa:	f000 f909 	bl	8001010 <ReturnTimeElapsed>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000e02:	79fa      	ldrb	r2, [r7, #7]
 8000e04:	493e      	ldr	r1, [pc, #248]	; (8000f00 <linkTimer+0x14c>)
 8000e06:	4613      	mov	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4413      	add	r3, r2
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	440b      	add	r3, r1
 8000e10:	3308      	adds	r3, #8
 8000e12:	6819      	ldr	r1, [r3, #0]
 8000e14:	89fb      	ldrh	r3, [r7, #14]
 8000e16:	79fa      	ldrb	r2, [r7, #7]
 8000e18:	4419      	add	r1, r3
 8000e1a:	4839      	ldr	r0, [pc, #228]	; (8000f00 <linkTimer+0x14c>)
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	4413      	add	r3, r2
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	4403      	add	r3, r0
 8000e26:	3308      	adds	r3, #8
 8000e28:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000e2a:	79fa      	ldrb	r2, [r7, #7]
 8000e2c:	4934      	ldr	r1, [pc, #208]	; (8000f00 <linkTimer+0x14c>)
 8000e2e:	4613      	mov	r3, r2
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	4413      	add	r3, r2
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	440b      	add	r3, r1
 8000e38:	3308      	adds	r3, #8
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000e3e:	4b2e      	ldr	r3, [pc, #184]	; (8000ef8 <linkTimer+0x144>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	4619      	mov	r1, r3
 8000e46:	4a2e      	ldr	r2, [pc, #184]	; (8000f00 <linkTimer+0x14c>)
 8000e48:	460b      	mov	r3, r1
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	440b      	add	r3, r1
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	4413      	add	r3, r2
 8000e52:	3308      	adds	r3, #8
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d337      	bcc.n	8000ecc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000e5c:	4b26      	ldr	r3, [pc, #152]	; (8000ef8 <linkTimer+0x144>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000e62:	7b7a      	ldrb	r2, [r7, #13]
 8000e64:	4926      	ldr	r1, [pc, #152]	; (8000f00 <linkTimer+0x14c>)
 8000e66:	4613      	mov	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	440b      	add	r3, r1
 8000e70:	3315      	adds	r3, #21
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000e76:	e013      	b.n	8000ea0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000e78:	7b7a      	ldrb	r2, [r7, #13]
 8000e7a:	4921      	ldr	r1, [pc, #132]	; (8000f00 <linkTimer+0x14c>)
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4413      	add	r3, r2
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	440b      	add	r3, r1
 8000e86:	3315      	adds	r3, #21
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000e8c:	7b7a      	ldrb	r2, [r7, #13]
 8000e8e:	491c      	ldr	r1, [pc, #112]	; (8000f00 <linkTimer+0x14c>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	440b      	add	r3, r1
 8000e9a:	3315      	adds	r3, #21
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ea0:	7b3b      	ldrb	r3, [r7, #12]
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d00b      	beq.n	8000ebe <linkTimer+0x10a>
 8000ea6:	7b3a      	ldrb	r2, [r7, #12]
 8000ea8:	4915      	ldr	r1, [pc, #84]	; (8000f00 <linkTimer+0x14c>)
 8000eaa:	4613      	mov	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4413      	add	r3, r2
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	440b      	add	r3, r1
 8000eb4:	3308      	adds	r3, #8
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	68ba      	ldr	r2, [r7, #8]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d2dc      	bcs.n	8000e78 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000ebe:	7b7a      	ldrb	r2, [r7, #13]
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fecf 	bl	8000c68 <LinkTimerAfter>
 8000eca:	e00f      	b.n	8000eec <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <linkTimer+0x144>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff0c 	bl	8000cf4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <linkTimer+0x144>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <linkTimer+0x148>)
 8000ee4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000ee6:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <linkTimer+0x144>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000eec:	89fb      	ldrh	r3, [r7, #14]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000110 	.word	0x20000110
 8000efc:	20000111 	.word	0x20000111
 8000f00:	20000080 	.word	0x20000080
 8000f04:	20000114 	.word	0x20000114

08000f08 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	460a      	mov	r2, r1
 8000f12:	71fb      	strb	r3, [r7, #7]
 8000f14:	4613      	mov	r3, r2
 8000f16:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000f18:	4b39      	ldr	r3, [pc, #228]	; (8001000 <UnlinkTimer+0xf8>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	79fa      	ldrb	r2, [r7, #7]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d111      	bne.n	8000f48 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000f24:	4b36      	ldr	r3, [pc, #216]	; (8001000 <UnlinkTimer+0xf8>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4b36      	ldr	r3, [pc, #216]	; (8001004 <UnlinkTimer+0xfc>)
 8000f2c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000f2e:	79fa      	ldrb	r2, [r7, #7]
 8000f30:	4935      	ldr	r1, [pc, #212]	; (8001008 <UnlinkTimer+0x100>)
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	00db      	lsls	r3, r3, #3
 8000f3a:	440b      	add	r3, r1
 8000f3c:	3315      	adds	r3, #21
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b2f      	ldr	r3, [pc, #188]	; (8001000 <UnlinkTimer+0xf8>)
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	e03e      	b.n	8000fc6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000f48:	79fa      	ldrb	r2, [r7, #7]
 8000f4a:	492f      	ldr	r1, [pc, #188]	; (8001008 <UnlinkTimer+0x100>)
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	440b      	add	r3, r1
 8000f56:	3314      	adds	r3, #20
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000f5c:	79fa      	ldrb	r2, [r7, #7]
 8000f5e:	492a      	ldr	r1, [pc, #168]	; (8001008 <UnlinkTimer+0x100>)
 8000f60:	4613      	mov	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	4413      	add	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	440b      	add	r3, r1
 8000f6a:	3315      	adds	r3, #21
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000f70:	79f9      	ldrb	r1, [r7, #7]
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	4824      	ldr	r0, [pc, #144]	; (8001008 <UnlinkTimer+0x100>)
 8000f76:	460b      	mov	r3, r1
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	440b      	add	r3, r1
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	4403      	add	r3, r0
 8000f80:	3315      	adds	r3, #21
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b2d8      	uxtb	r0, r3
 8000f86:	4920      	ldr	r1, [pc, #128]	; (8001008 <UnlinkTimer+0x100>)
 8000f88:	4613      	mov	r3, r2
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	4413      	add	r3, r2
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	440b      	add	r3, r1
 8000f92:	3315      	adds	r3, #21
 8000f94:	4602      	mov	r2, r0
 8000f96:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f98:	7bbb      	ldrb	r3, [r7, #14]
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d013      	beq.n	8000fc6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000f9e:	79f9      	ldrb	r1, [r7, #7]
 8000fa0:	7bba      	ldrb	r2, [r7, #14]
 8000fa2:	4819      	ldr	r0, [pc, #100]	; (8001008 <UnlinkTimer+0x100>)
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	440b      	add	r3, r1
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	4403      	add	r3, r0
 8000fae:	3314      	adds	r3, #20
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b2d8      	uxtb	r0, r3
 8000fb4:	4914      	ldr	r1, [pc, #80]	; (8001008 <UnlinkTimer+0x100>)
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	440b      	add	r3, r1
 8000fc0:	3314      	adds	r3, #20
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000fc6:	79fa      	ldrb	r2, [r7, #7]
 8000fc8:	490f      	ldr	r1, [pc, #60]	; (8001008 <UnlinkTimer+0x100>)
 8000fca:	4613      	mov	r3, r2
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	440b      	add	r3, r1
 8000fd4:	330c      	adds	r3, #12
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <UnlinkTimer+0xf8>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b06      	cmp	r3, #6
 8000fe2:	d107      	bne.n	8000ff4 <UnlinkTimer+0xec>
 8000fe4:	79bb      	ldrb	r3, [r7, #6]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d104      	bne.n	8000ff4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <UnlinkTimer+0x104>)
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  return;
 8000ff2:	bf00      	nop
 8000ff4:	bf00      	nop
}
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	20000110 	.word	0x20000110
 8001004:	20000111 	.word	0x20000111
 8001008:	20000080 	.word	0x20000080
 800100c:	20000114 	.word	0x20000114

08001010 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001016:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <ReturnTimeElapsed+0x70>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800101e:	d026      	beq.n	800106e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001020:	f7ff fe02 	bl	8000c28 <ReadRtcSsrValue>
 8001024:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <ReturnTimeElapsed+0x70>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	d805      	bhi.n	800103c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001030:	4b13      	ldr	r3, [pc, #76]	; (8001080 <ReturnTimeElapsed+0x70>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	e00a      	b.n	8001052 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <ReturnTimeElapsed+0x74>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <ReturnTimeElapsed+0x70>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	4413      	add	r3, r2
 8001050:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <ReturnTimeElapsed+0x78>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	fb02 f303 	mul.w	r3, r2, r3
 800105e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <ReturnTimeElapsed+0x7c>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	40d3      	lsrs	r3, r2
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	e001      	b.n	8001072 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	b29b      	uxth	r3, r3
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000114 	.word	0x20000114
 8001084:	2000019e 	.word	0x2000019e
 8001088:	2000019d 	.word	0x2000019d
 800108c:	2000019c 	.word	0x2000019c

08001090 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d108      	bne.n	80010b2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80010a0:	f7ff fdc2 	bl	8000c28 <ReadRtcSsrValue>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4a24      	ldr	r2, [pc, #144]	; (8001138 <RestartWakeupCounter+0xa8>)
 80010a8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80010aa:	2003      	movs	r0, #3
 80010ac:	f001 fad7 	bl	800265e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80010b0:	e03e      	b.n	8001130 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d803      	bhi.n	80010c0 <RestartWakeupCounter+0x30>
 80010b8:	4b20      	ldr	r3, [pc, #128]	; (800113c <RestartWakeupCounter+0xac>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d002      	beq.n	80010c6 <RestartWakeupCounter+0x36>
      Value -= 1;
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80010c6:	bf00      	nop
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <RestartWakeupCounter+0xb0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f7      	beq.n	80010c8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <RestartWakeupCounter+0xb0>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <RestartWakeupCounter+0xb0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80010ec:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <RestartWakeupCounter+0xb4>)
 80010f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010f4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80010f6:	2003      	movs	r0, #3
 80010f8:	f001 fabf 	bl	800267a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <RestartWakeupCounter+0xb8>)
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	0c1b      	lsrs	r3, r3, #16
 8001102:	041b      	lsls	r3, r3, #16
 8001104:	88fa      	ldrh	r2, [r7, #6]
 8001106:	4910      	ldr	r1, [pc, #64]	; (8001148 <RestartWakeupCounter+0xb8>)
 8001108:	4313      	orrs	r3, r2
 800110a:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800110c:	f7ff fd8c 	bl	8000c28 <ReadRtcSsrValue>
 8001110:	4603      	mov	r3, r0
 8001112:	4a09      	ldr	r2, [pc, #36]	; (8001138 <RestartWakeupCounter+0xa8>)
 8001114:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <RestartWakeupCounter+0xb0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689a      	ldr	r2, [r3, #8]
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <RestartWakeupCounter+0xb0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001128:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800112a:	f3af 8000 	nop.w
  return ;
 800112e:	bf00      	nop
}
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000114 	.word	0x20000114
 800113c:	2000019c 	.word	0x2000019c
 8001140:	20000198 	.word	0x20000198
 8001144:	58000800 	.word	0x58000800
 8001148:	40002800 	.word	0x40002800

0800114c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001152:	4b47      	ldr	r3, [pc, #284]	; (8001270 <RescheduleTimerList+0x124>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800115a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115e:	d108      	bne.n	8001172 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001160:	bf00      	nop
 8001162:	4b44      	ldr	r3, [pc, #272]	; (8001274 <RescheduleTimerList+0x128>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f7      	bne.n	8001162 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001172:	4b40      	ldr	r3, [pc, #256]	; (8001274 <RescheduleTimerList+0x128>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	4b3e      	ldr	r3, [pc, #248]	; (8001274 <RescheduleTimerList+0x128>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001184:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001186:	4b3c      	ldr	r3, [pc, #240]	; (8001278 <RescheduleTimerList+0x12c>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	493b      	ldr	r1, [pc, #236]	; (800127c <RescheduleTimerList+0x130>)
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	440b      	add	r3, r1
 800119a:	3308      	adds	r3, #8
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80011a0:	f7ff ff36 	bl	8001010 <ReturnTimeElapsed>
 80011a4:	4603      	mov	r3, r0
 80011a6:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d205      	bcs.n	80011bc <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80011b4:	4b32      	ldr	r3, [pc, #200]	; (8001280 <RescheduleTimerList+0x134>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	e04d      	b.n	8001258 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	4a31      	ldr	r2, [pc, #196]	; (8001284 <RescheduleTimerList+0x138>)
 80011c0:	8812      	ldrh	r2, [r2, #0]
 80011c2:	b292      	uxth	r2, r2
 80011c4:	4413      	add	r3, r2
 80011c6:	461a      	mov	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d906      	bls.n	80011dc <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <RescheduleTimerList+0x138>)
 80011d0:	881b      	ldrh	r3, [r3, #0]
 80011d2:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80011d4:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <RescheduleTimerList+0x134>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	e03d      	b.n	8001258 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <RescheduleTimerList+0x134>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011ec:	e034      	b.n	8001258 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80011ee:	7bfa      	ldrb	r2, [r7, #15]
 80011f0:	4922      	ldr	r1, [pc, #136]	; (800127c <RescheduleTimerList+0x130>)
 80011f2:	4613      	mov	r3, r2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	4413      	add	r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	440b      	add	r3, r1
 80011fc:	3308      	adds	r3, #8
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	429a      	cmp	r2, r3
 8001204:	d20a      	bcs.n	800121c <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	491c      	ldr	r1, [pc, #112]	; (800127c <RescheduleTimerList+0x130>)
 800120a:	4613      	mov	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	440b      	add	r3, r1
 8001214:	3308      	adds	r3, #8
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	e013      	b.n	8001244 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800121c:	7bfa      	ldrb	r2, [r7, #15]
 800121e:	4917      	ldr	r1, [pc, #92]	; (800127c <RescheduleTimerList+0x130>)
 8001220:	4613      	mov	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	440b      	add	r3, r1
 800122a:	3308      	adds	r3, #8
 800122c:	6819      	ldr	r1, [r3, #0]
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	1ac9      	subs	r1, r1, r3
 8001234:	4811      	ldr	r0, [pc, #68]	; (800127c <RescheduleTimerList+0x130>)
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4403      	add	r3, r0
 8001240:	3308      	adds	r3, #8
 8001242:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	490d      	ldr	r1, [pc, #52]	; (800127c <RescheduleTimerList+0x130>)
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	440b      	add	r3, r1
 8001252:	3315      	adds	r3, #21
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	2b06      	cmp	r3, #6
 800125c:	d1c7      	bne.n	80011ee <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800125e:	89bb      	ldrh	r3, [r7, #12]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff15 	bl	8001090 <RestartWakeupCounter>

  return ;
 8001266:	bf00      	nop
}
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40002800 	.word	0x40002800
 8001274:	20000198 	.word	0x20000198
 8001278:	20000110 	.word	0x20000110
 800127c:	20000080 	.word	0x20000080
 8001280:	20000118 	.word	0x20000118
 8001284:	200001a0 	.word	0x200001a0

08001288 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800128e:	f3ef 8310 	mrs	r3, PRIMASK
 8001292:	617b      	str	r3, [r7, #20]
  return(result);
 8001294:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800129c:	4b5f      	ldr	r3, [pc, #380]	; (800141c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	22ca      	movs	r2, #202	; 0xca
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24
 80012a6:	4b5d      	ldr	r3, [pc, #372]	; (800141c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2253      	movs	r2, #83	; 0x53
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 80012b0:	4b5a      	ldr	r3, [pc, #360]	; (800141c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	4b58      	ldr	r3, [pc, #352]	; (800141c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012c2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80012c4:	4b56      	ldr	r3, [pc, #344]	; (8001420 <HW_TS_RTC_Wakeup_Handler+0x198>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80012cc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80012d0:	4954      	ldr	r1, [pc, #336]	; (8001424 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	440b      	add	r3, r1
 80012dc:	330c      	adds	r3, #12
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d172      	bne.n	80013cc <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80012e6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80012ea:	494e      	ldr	r1, [pc, #312]	; (8001424 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80012ec:	4613      	mov	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4413      	add	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	440b      	add	r3, r1
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80012fa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80012fe:	4949      	ldr	r1, [pc, #292]	; (8001424 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	3310      	adds	r3, #16
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001310:	4b45      	ldr	r3, [pc, #276]	; (8001428 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d050      	beq.n	80013bc <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800131a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800131e:	4941      	ldr	r1, [pc, #260]	; (8001424 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001320:	4613      	mov	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	4413      	add	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	440b      	add	r3, r1
 800132a:	330d      	adds	r3, #13
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b01      	cmp	r3, #1
 8001332:	d126      	bne.n	8001382 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001334:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001338:	2101      	movs	r1, #1
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fde4 	bl	8000f08 <UnlinkTimer>
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	f383 8810 	msr	PRIMASK, r3
}
 800134a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800134c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001350:	4934      	ldr	r1, [pc, #208]	; (8001424 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	440b      	add	r3, r1
 800135c:	3304      	adds	r3, #4
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fa4e 	bl	8001808 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	22ca      	movs	r2, #202	; 0xca
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
 8001376:	4b29      	ldr	r3, [pc, #164]	; (800141c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2253      	movs	r2, #83	; 0x53
 800137e:	625a      	str	r2, [r3, #36]	; 0x24
 8001380:	e014      	b.n	80013ac <HW_TS_RTC_Wakeup_Handler+0x124>
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f383 8810 	msr	PRIMASK, r3
}
 800138c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800138e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f9ac 	bl	80016f0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001398:	4b20      	ldr	r3, [pc, #128]	; (800141c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	22ca      	movs	r2, #202	; 0xca
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2253      	movs	r2, #83	; 0x53
 80013aa:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80013ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80013b0:	69fa      	ldr	r2, [r7, #28]
 80013b2:	4619      	mov	r1, r3
 80013b4:	69b8      	ldr	r0, [r7, #24]
 80013b6:	f000 faaf 	bl	8001918 <HW_TS_RTC_Int_AppNot>
 80013ba:	e025      	b.n	8001408 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 80013bc:	f7ff fec6 	bl	800114c <RescheduleTimerList>
 80013c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	f383 8810 	msr	PRIMASK, r3
}
 80013ca:	e01d      	b.n	8001408 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80013cc:	bf00      	nop
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f7      	beq.n	80013ce <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80013f2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80013f4:	4b0d      	ldr	r3, [pc, #52]	; (800142c <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 80013f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f383 8810 	msr	PRIMASK, r3
}
 8001406:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	22ff      	movs	r2, #255	; 0xff
 8001410:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001412:	bf00      	nop
}
 8001414:	3728      	adds	r7, #40	; 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000198 	.word	0x20000198
 8001420:	20000110 	.word	0x20000110
 8001424:	20000080 	.word	0x20000080
 8001428:	20000118 	.word	0x20000118
 800142c:	58000800 	.word	0x58000800

08001430 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b088      	sub	sp, #32
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800143c:	4a64      	ldr	r2, [pc, #400]	; (80015d0 <HW_TS_Init+0x1a0>)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001442:	4b63      	ldr	r3, [pc, #396]	; (80015d0 <HW_TS_Init+0x1a0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	22ca      	movs	r2, #202	; 0xca
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
 800144c:	4b60      	ldr	r3, [pc, #384]	; (80015d0 <HW_TS_Init+0x1a0>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2253      	movs	r2, #83	; 0x53
 8001454:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001456:	4b5f      	ldr	r3, [pc, #380]	; (80015d4 <HW_TS_Init+0x1a4>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	4a5e      	ldr	r2, [pc, #376]	; (80015d4 <HW_TS_Init+0x1a4>)
 800145c:	f043 0320 	orr.w	r3, r3, #32
 8001460:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001462:	4b5c      	ldr	r3, [pc, #368]	; (80015d4 <HW_TS_Init+0x1a4>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	b2db      	uxtb	r3, r3
 800146e:	f1c3 0304 	rsb	r3, r3, #4
 8001472:	b2da      	uxtb	r2, r3
 8001474:	4b58      	ldr	r3, [pc, #352]	; (80015d8 <HW_TS_Init+0x1a8>)
 8001476:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001478:	4b56      	ldr	r3, [pc, #344]	; (80015d4 <HW_TS_Init+0x1a4>)
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001480:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001484:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	fa92 f2a2 	rbit	r2, r2
 800148c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	2a00      	cmp	r2, #0
 8001496:	d101      	bne.n	800149c <HW_TS_Init+0x6c>
  {
    return 32U;
 8001498:	2220      	movs	r2, #32
 800149a:	e003      	b.n	80014a4 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	fab2 f282 	clz	r2, r2
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	40d3      	lsrs	r3, r2
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	3301      	adds	r3, #1
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b4b      	ldr	r3, [pc, #300]	; (80015dc <HW_TS_Init+0x1ac>)
 80014ae:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80014b0:	4b48      	ldr	r3, [pc, #288]	; (80015d4 <HW_TS_Init+0x1a4>)
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	3301      	adds	r3, #1
 80014be:	b29a      	uxth	r2, r3
 80014c0:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <HW_TS_Init+0x1b0>)
 80014c2:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80014c4:	4b46      	ldr	r3, [pc, #280]	; (80015e0 <HW_TS_Init+0x1b0>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	4a44      	ldr	r2, [pc, #272]	; (80015dc <HW_TS_Init+0x1ac>)
 80014cc:	7812      	ldrb	r2, [r2, #0]
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80014d6:	4a40      	ldr	r2, [pc, #256]	; (80015d8 <HW_TS_Init+0x1a8>)
 80014d8:	7812      	ldrb	r2, [r2, #0]
 80014da:	40d3      	lsrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d904      	bls.n	80014f2 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80014e8:	4b3e      	ldr	r3, [pc, #248]	; (80015e4 <HW_TS_Init+0x1b4>)
 80014ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014ee:	801a      	strh	r2, [r3, #0]
 80014f0:	e003      	b.n	80014fa <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	4b3b      	ldr	r3, [pc, #236]	; (80015e4 <HW_TS_Init+0x1b4>)
 80014f8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80014fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80014fe:	f7ff fb81 	bl	8000c04 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001502:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001506:	f7ff fb69 	bl	8000bdc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d143      	bne.n	8001598 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001510:	4b35      	ldr	r3, [pc, #212]	; (80015e8 <HW_TS_Init+0x1b8>)
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001516:	4b35      	ldr	r3, [pc, #212]	; (80015ec <HW_TS_Init+0x1bc>)
 8001518:	f04f 32ff 	mov.w	r2, #4294967295
 800151c:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800151e:	2300      	movs	r3, #0
 8001520:	77fb      	strb	r3, [r7, #31]
 8001522:	e00c      	b.n	800153e <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001524:	7ffa      	ldrb	r2, [r7, #31]
 8001526:	4932      	ldr	r1, [pc, #200]	; (80015f0 <HW_TS_Init+0x1c0>)
 8001528:	4613      	mov	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	4413      	add	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	440b      	add	r3, r1
 8001532:	330c      	adds	r3, #12
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001538:	7ffb      	ldrb	r3, [r7, #31]
 800153a:	3301      	adds	r3, #1
 800153c:	77fb      	strb	r3, [r7, #31]
 800153e:	7ffb      	ldrb	r3, [r7, #31]
 8001540:	2b05      	cmp	r3, #5
 8001542:	d9ef      	bls.n	8001524 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <HW_TS_Init+0x1c4>)
 8001546:	2206      	movs	r2, #6
 8001548:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800154a:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <HW_TS_Init+0x1a0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <HW_TS_Init+0x1a0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800155c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <HW_TS_Init+0x1a0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <HW_TS_Init+0x1a0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001572:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <HW_TS_Init+0x1c8>)
 8001576:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800157a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800157c:	2003      	movs	r0, #3
 800157e:	f001 f87c 	bl	800267a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <HW_TS_Init+0x1a0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HW_TS_Init+0x1a0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	e00a      	b.n	80015ae <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001598:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <HW_TS_Init+0x1a0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d002      	beq.n	80015ae <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80015a8:	2003      	movs	r0, #3
 80015aa:	f001 f858 	bl	800265e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HW_TS_Init+0x1a0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	22ff      	movs	r2, #255	; 0xff
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80015b8:	2200      	movs	r2, #0
 80015ba:	2103      	movs	r1, #3
 80015bc:	2003      	movs	r0, #3
 80015be:	f001 f80c 	bl	80025da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015c2:	2003      	movs	r0, #3
 80015c4:	f001 f823 	bl	800260e <HAL_NVIC_EnableIRQ>

  return;
 80015c8:	bf00      	nop
}
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000198 	.word	0x20000198
 80015d4:	40002800 	.word	0x40002800
 80015d8:	2000019c 	.word	0x2000019c
 80015dc:	2000019d 	.word	0x2000019d
 80015e0:	2000019e 	.word	0x2000019e
 80015e4:	200001a0 	.word	0x200001a0
 80015e8:	20000118 	.word	0x20000118
 80015ec:	20000114 	.word	0x20000114
 80015f0:	20000080 	.word	0x20000080
 80015f4:	20000110 	.word	0x20000110
 80015f8:	58000800 	.word	0x58000800

080015fc <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b08b      	sub	sp, #44	; 0x2c
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	4613      	mov	r3, r2
 800160a:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001612:	f3ef 8310 	mrs	r3, PRIMASK
 8001616:	61fb      	str	r3, [r7, #28]
  return(result);
 8001618:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800161a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800161c:	b672      	cpsid	i
}
 800161e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001620:	e004      	b.n	800162c <HW_TS_Create+0x30>
  {
    loop++;
 8001622:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001626:	3301      	adds	r3, #1
 8001628:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800162c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001630:	2b05      	cmp	r3, #5
 8001632:	d80c      	bhi.n	800164e <HW_TS_Create+0x52>
 8001634:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001638:	492c      	ldr	r1, [pc, #176]	; (80016ec <HW_TS_Create+0xf0>)
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	440b      	add	r3, r1
 8001644:	330c      	adds	r3, #12
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1e9      	bne.n	8001622 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800164e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001652:	2b06      	cmp	r3, #6
 8001654:	d038      	beq.n	80016c8 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001656:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800165a:	4924      	ldr	r1, [pc, #144]	; (80016ec <HW_TS_Create+0xf0>)
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	440b      	add	r3, r1
 8001666:	330c      	adds	r3, #12
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
 800166c:	6a3b      	ldr	r3, [r7, #32]
 800166e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	f383 8810 	msr	PRIMASK, r3
}
 8001676:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001678:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800167c:	491b      	ldr	r1, [pc, #108]	; (80016ec <HW_TS_Create+0xf0>)
 800167e:	4613      	mov	r3, r2
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	3310      	adds	r3, #16
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800168e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001692:	4916      	ldr	r1, [pc, #88]	; (80016ec <HW_TS_Create+0xf0>)
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	330d      	adds	r3, #13
 80016a0:	79fa      	ldrb	r2, [r7, #7]
 80016a2:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80016a4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80016a8:	4910      	ldr	r1, [pc, #64]	; (80016ec <HW_TS_Create+0xf0>)
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80016be:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80016c6:	e008      	b.n	80016da <HW_TS_Create+0xde>
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f383 8810 	msr	PRIMASK, r3
}
 80016d2:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80016d4:	2301      	movs	r3, #1
 80016d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80016da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80016de:	4618      	mov	r0, r3
 80016e0:	372c      	adds	r7, #44	; 0x2c
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000080 	.word	0x20000080

080016f0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016fa:	f3ef 8310 	mrs	r3, PRIMASK
 80016fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8001700:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001702:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001704:	b672      	cpsid	i
}
 8001706:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001708:	2003      	movs	r0, #3
 800170a:	f000 ff8e 	bl	800262a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800170e:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <HW_TS_Stop+0x100>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	22ca      	movs	r2, #202	; 0xca
 8001716:	625a      	str	r2, [r3, #36]	; 0x24
 8001718:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <HW_TS_Stop+0x100>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2253      	movs	r2, #83	; 0x53
 8001720:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001722:	79fa      	ldrb	r2, [r7, #7]
 8001724:	4933      	ldr	r1, [pc, #204]	; (80017f4 <HW_TS_Stop+0x104>)
 8001726:	4613      	mov	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	440b      	add	r3, r1
 8001730:	330c      	adds	r3, #12
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d148      	bne.n	80017cc <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fbe2 	bl	8000f08 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001744:	4b2c      	ldr	r3, [pc, #176]	; (80017f8 <HW_TS_Stop+0x108>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800174a:	7cfb      	ldrb	r3, [r7, #19]
 800174c:	2b06      	cmp	r3, #6
 800174e:	d135      	bne.n	80017bc <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001750:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <HW_TS_Stop+0x10c>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001758:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800175c:	d108      	bne.n	8001770 <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800175e:	bf00      	nop
 8001760:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <HW_TS_Stop+0x100>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1f7      	bne.n	8001760 <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <HW_TS_Stop+0x100>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HW_TS_Stop+0x100>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001782:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001784:	bf00      	nop
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <HW_TS_Stop+0x100>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f7      	beq.n	8001786 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <HW_TS_Stop+0x100>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <HW_TS_Stop+0x100>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80017aa:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <HW_TS_Stop+0x110>)
 80017ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80017b2:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80017b4:	2003      	movs	r0, #3
 80017b6:	f000 ff60 	bl	800267a <HAL_NVIC_ClearPendingIRQ>
 80017ba:	e007      	b.n	80017cc <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HW_TS_Stop+0x114>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	7cfa      	ldrb	r2, [r7, #19]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 80017c8:	f7ff fcc0 	bl	800114c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HW_TS_Stop+0x100>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	22ff      	movs	r2, #255	; 0xff
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80017d6:	2003      	movs	r0, #3
 80017d8:	f000 ff19 	bl	800260e <HAL_NVIC_EnableIRQ>
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	f383 8810 	msr	PRIMASK, r3
}
 80017e6:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80017e8:	bf00      	nop
}
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000198 	.word	0x20000198
 80017f4:	20000080 	.word	0x20000080
 80017f8:	20000110 	.word	0x20000110
 80017fc:	40002800 	.word	0x40002800
 8001800:	58000800 	.word	0x58000800
 8001804:	20000111 	.word	0x20000111

08001808 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001814:	79fa      	ldrb	r2, [r7, #7]
 8001816:	493c      	ldr	r1, [pc, #240]	; (8001908 <HW_TS_Start+0x100>)
 8001818:	4613      	mov	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	4413      	add	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	440b      	add	r3, r1
 8001822:	330c      	adds	r3, #12
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d103      	bne.n	8001834 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff5e 	bl	80016f0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001834:	f3ef 8310 	mrs	r3, PRIMASK
 8001838:	60fb      	str	r3, [r7, #12]
  return(result);
 800183a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800183c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800183e:	b672      	cpsid	i
}
 8001840:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001842:	2003      	movs	r0, #3
 8001844:	f000 fef1 	bl	800262a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001848:	4b30      	ldr	r3, [pc, #192]	; (800190c <HW_TS_Start+0x104>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	22ca      	movs	r2, #202	; 0xca
 8001850:	625a      	str	r2, [r3, #36]	; 0x24
 8001852:	4b2e      	ldr	r3, [pc, #184]	; (800190c <HW_TS_Start+0x104>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2253      	movs	r2, #83	; 0x53
 800185a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800185c:	79fa      	ldrb	r2, [r7, #7]
 800185e:	492a      	ldr	r1, [pc, #168]	; (8001908 <HW_TS_Start+0x100>)
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	440b      	add	r3, r1
 800186a:	330c      	adds	r3, #12
 800186c:	2202      	movs	r2, #2
 800186e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001870:	79fa      	ldrb	r2, [r7, #7]
 8001872:	4925      	ldr	r1, [pc, #148]	; (8001908 <HW_TS_Start+0x100>)
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	440b      	add	r3, r1
 800187e:	3308      	adds	r3, #8
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001884:	79fa      	ldrb	r2, [r7, #7]
 8001886:	4920      	ldr	r1, [pc, #128]	; (8001908 <HW_TS_Start+0x100>)
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	440b      	add	r3, r1
 8001892:	3304      	adds	r3, #4
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fa8a 	bl	8000db4 <linkTimer>
 80018a0:	4603      	mov	r3, r0
 80018a2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <HW_TS_Start+0x108>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <HW_TS_Start+0x10c>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	7c7a      	ldrb	r2, [r7, #17]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d002      	beq.n	80018bc <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 80018b6:	f7ff fc49 	bl	800114c <RescheduleTimerList>
 80018ba:	e013      	b.n	80018e4 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80018bc:	79fa      	ldrb	r2, [r7, #7]
 80018be:	4912      	ldr	r1, [pc, #72]	; (8001908 <HW_TS_Start+0x100>)
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	440b      	add	r3, r1
 80018ca:	3308      	adds	r3, #8
 80018cc:	6819      	ldr	r1, [r3, #0]
 80018ce:	8a7b      	ldrh	r3, [r7, #18]
 80018d0:	79fa      	ldrb	r2, [r7, #7]
 80018d2:	1ac9      	subs	r1, r1, r3
 80018d4:	480c      	ldr	r0, [pc, #48]	; (8001908 <HW_TS_Start+0x100>)
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4403      	add	r3, r0
 80018e0:	3308      	adds	r3, #8
 80018e2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <HW_TS_Start+0x104>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	22ff      	movs	r2, #255	; 0xff
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80018ee:	2003      	movs	r0, #3
 80018f0:	f000 fe8d 	bl	800260e <HAL_NVIC_EnableIRQ>
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	f383 8810 	msr	PRIMASK, r3
}
 80018fe:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001900:	bf00      	nop
}
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000080 	.word	0x20000080
 800190c:	20000198 	.word	0x20000198
 8001910:	20000110 	.word	0x20000110
 8001914:	20000111 	.word	0x20000111

08001918 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	460b      	mov	r3, r1
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4798      	blx	r3

  return;
 800192a:	bf00      	nop
}
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <LL_RCC_LSE_SetDriveCapability>:
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800193a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001942:	f023 0218 	bic.w	r2, r3, #24
 8001946:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4313      	orrs	r3, r2
 800194e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <LL_AHB2_GRP1_EnableClock>:
{
 800195e:	b480      	push	{r7}
 8001960:	b085      	sub	sp, #20
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800196c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	4313      	orrs	r3, r2
 8001974:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4013      	ands	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001982:	68fb      	ldr	r3, [r7, #12]
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001998:	1d39      	adds	r1, r7, #4
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	2201      	movs	r2, #1
 80019a0:	4803      	ldr	r0, [pc, #12]	; (80019b0 <__io_putchar+0x20>)
 80019a2:	f002 fe2b 	bl	80045fc <HAL_UART_Transmit>
  return ch;
 80019a6:	687b      	ldr	r3, [r7, #4]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000204 	.word	0x20000204

080019b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019b8:	f000 fc4e 	bl	8002258 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80019bc:	f7fe ff60 	bl	8000880 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c0:	f000 f81e 	bl	8001a00 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80019c4:	f000 f868 	bl	8001a98 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 80019c8:	f000 f886 	bl	8001ad8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019cc:	f000 f91c 	bl	8001c08 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80019d0:	f000 f8ce 	bl	8001b70 <MX_USART1_UART_Init>
  MX_RF_Init();
 80019d4:	f000 f894 	bl	8001b00 <MX_RF_Init>
  MX_RTC_Init();
 80019d8:	f000 f89a 	bl	8001b10 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80019dc:	f7fe ff5e 	bl	800089c <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Starting while loop\n\r");
 80019e0:	4805      	ldr	r0, [pc, #20]	; (80019f8 <main+0x44>)
 80019e2:	f006 ffbf 	bl	8008964 <iprintf>
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin, GPIO_PIN_SET);
 80019e6:	2201      	movs	r2, #1
 80019e8:	2101      	movs	r1, #1
 80019ea:	4804      	ldr	r0, [pc, #16]	; (80019fc <main+0x48>)
 80019ec:	f000 ffbc 	bl	8002968 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80019f0:	f7ff f8b5 	bl	8000b5e <MX_APPE_Process>
 80019f4:	e7fc      	b.n	80019f0 <main+0x3c>
 80019f6:	bf00      	nop
 80019f8:	08009a50 	.word	0x08009a50
 80019fc:	48000400 	.word	0x48000400

08001a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b098      	sub	sp, #96	; 0x60
 8001a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a06:	f107 031c 	add.w	r3, r7, #28
 8001a0a:	2244      	movs	r2, #68	; 0x44
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f007 f81d 	bl	8008a4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a14:	463b      	mov	r3, r7
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	611a      	str	r2, [r3, #16]
 8001a22:	615a      	str	r2, [r3, #20]
 8001a24:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a26:	f001 f879 	bl	8002b1c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f7ff ff81 	bl	8001932 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001a30:	2307      	movs	r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a38:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a44:	2340      	movs	r3, #64	; 0x40
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	4618      	mov	r0, r3
 8001a52:	f001 fbcb 	bl	80031ec <HAL_RCC_OscConfig>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001a5c:	f000 f953 	bl	8001d06 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001a60:	236f      	movs	r3, #111	; 0x6f
 8001a62:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001a64:	2302      	movs	r3, #2
 8001a66:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	2101      	movs	r1, #1
 8001a80:	4618      	mov	r0, r3
 8001a82:	f001 fee9 	bl	8003858 <HAL_RCC_ClockConfig>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001a8c:	f000 f93b 	bl	8001d06 <Error_Handler>
  }
}
 8001a90:	bf00      	nop
 8001a92:	3760      	adds	r7, #96	; 0x60
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08c      	sub	sp, #48	; 0x30
 8001a9c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	2230      	movs	r2, #48	; 0x30
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f006 ffd2 	bl	8008a4e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001aaa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001aae:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001ab0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ab4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001aba:	2310      	movs	r3, #16
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001abe:	463b      	mov	r3, r7
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 fa8b 	bl	8003fdc <HAL_RCCEx_PeriphCLKConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001acc:	f000 f91b 	bl	8001d06 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001ad0:	bf00      	nop
 8001ad2:	3730      	adds	r7, #48	; 0x30
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_IPCC_Init+0x20>)
 8001ade:	4a07      	ldr	r2, [pc, #28]	; (8001afc <MX_IPCC_Init+0x24>)
 8001ae0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_IPCC_Init+0x20>)
 8001ae4:	f000 ff94 	bl	8002a10 <HAL_IPCC_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001aee:	f000 f90a 	bl	8001d06 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	200001a4 	.word	0x200001a4
 8001afc:	58000c00 	.word	0x58000c00

08001b00 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <MX_RTC_Init+0x58>)
 8001b16:	4a15      	ldr	r2, [pc, #84]	; (8001b6c <MX_RTC_Init+0x5c>)
 8001b18:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <MX_RTC_Init+0x58>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_RTC_Init+0x58>)
 8001b22:	220f      	movs	r2, #15
 8001b24:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001b26:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <MX_RTC_Init+0x58>)
 8001b28:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001b2c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <MX_RTC_Init+0x58>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <MX_RTC_Init+0x58>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <MX_RTC_Init+0x58>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001b40:	4809      	ldr	r0, [pc, #36]	; (8001b68 <MX_RTC_Init+0x58>)
 8001b42:	f002 fb41 	bl	80041c8 <HAL_RTC_Init>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8001b4c:	f000 f8db 	bl	8001d06 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001b50:	2200      	movs	r2, #0
 8001b52:	2100      	movs	r1, #0
 8001b54:	4804      	ldr	r0, [pc, #16]	; (8001b68 <MX_RTC_Init+0x58>)
 8001b56:	f002 fc25 	bl	80043a4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001b60:	f000 f8d1 	bl	8001d06 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200001e0 	.word	0x200001e0
 8001b6c:	40002800 	.word	0x40002800

08001b70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b74:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001b76:	4a23      	ldr	r2, [pc, #140]	; (8001c04 <MX_USART1_UART_Init+0x94>)
 8001b78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b7a:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b82:	4b1f      	ldr	r3, [pc, #124]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b88:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ba6:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bac:	4b14      	ldr	r3, [pc, #80]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bb2:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bb8:	4811      	ldr	r0, [pc, #68]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001bba:	f002 fccf 	bl	800455c <HAL_UART_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bc4:	f000 f89f 	bl	8001d06 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bc8:	2100      	movs	r1, #0
 8001bca:	480d      	ldr	r0, [pc, #52]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001bcc:	f003 f9c0 	bl	8004f50 <HAL_UARTEx_SetTxFifoThreshold>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bd6:	f000 f896 	bl	8001d06 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4808      	ldr	r0, [pc, #32]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001bde:	f003 f9f5 	bl	8004fcc <HAL_UARTEx_SetRxFifoThreshold>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001be8:	f000 f88d 	bl	8001d06 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <MX_USART1_UART_Init+0x90>)
 8001bee:	f003 f976 	bl	8004ede <HAL_UARTEx_DisableFifoMode>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001bf8:	f000 f885 	bl	8001d06 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000204 	.word	0x20000204
 8001c04:	40013800 	.word	0x40013800

08001c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1c:	2004      	movs	r0, #4
 8001c1e:	f7ff fe9e 	bl	800195e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	2001      	movs	r0, #1
 8001c24:	f7ff fe9b 	bl	800195e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c28:	2002      	movs	r0, #2
 8001c2a:	f7ff fe98 	bl	800195e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c2e:	2010      	movs	r0, #16
 8001c30:	f7ff fe95 	bl	800195e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2123      	movs	r1, #35	; 0x23
 8001c38:	4822      	ldr	r0, [pc, #136]	; (8001cc4 <MX_GPIO_Init+0xbc>)
 8001c3a:	f000 fe95 	bl	8002968 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Button_1_Pin Button_3_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_3_Pin;
 8001c3e:	2341      	movs	r3, #65	; 0x41
 8001c40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c54:	f000 fd20 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 8001c58:	2323      	movs	r3, #35	; 0x23
 8001c5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c68:	1d3b      	adds	r3, r7, #4
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4815      	ldr	r0, [pc, #84]	; (8001cc4 <MX_GPIO_Init+0xbc>)
 8001c6e:	f000 fd13 	bl	8002698 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_2_Pin */
  GPIO_InitStruct.Pin = Button_2_Pin;
 8001c72:	2310      	movs	r3, #16
 8001c74:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Button_2_GPIO_Port, &GPIO_InitStruct);
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	4619      	mov	r1, r3
 8001c84:	4810      	ldr	r0, [pc, #64]	; (8001cc8 <MX_GPIO_Init+0xc0>)
 8001c86:	f000 fd07 	bl	8002698 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	2006      	movs	r0, #6
 8001c90:	f000 fca3 	bl	80025da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c94:	2006      	movs	r0, #6
 8001c96:	f000 fcba 	bl	800260e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	200a      	movs	r0, #10
 8001ca0:	f000 fc9b 	bl	80025da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001ca4:	200a      	movs	r0, #10
 8001ca6:	f000 fcb2 	bl	800260e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001caa:	2200      	movs	r2, #0
 8001cac:	2100      	movs	r1, #0
 8001cae:	2017      	movs	r0, #23
 8001cb0:	f000 fc93 	bl	80025da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001cb4:	2017      	movs	r0, #23
 8001cb6:	f000 fcaa 	bl	800260e <HAL_NVIC_EnableIRQ>

}
 8001cba:	bf00      	nop
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	48000400 	.word	0x48000400
 8001cc8:	48001000 	.word	0x48001000

08001ccc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	2b40      	cmp	r3, #64	; 0x40
 8001cda:	d00c      	beq.n	8001cf6 <HAL_GPIO_EXTI_Callback+0x2a>
 8001cdc:	2b40      	cmp	r3, #64	; 0x40
 8001cde:	dc0d      	bgt.n	8001cfc <HAL_GPIO_EXTI_Callback+0x30>
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d002      	beq.n	8001cea <HAL_GPIO_EXTI_Callback+0x1e>
 8001ce4:	2b10      	cmp	r3, #16
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_EXTI_Callback+0x24>
    case Button_3_Pin:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8001ce8:	e008      	b.n	8001cfc <HAL_GPIO_EXTI_Callback+0x30>
      APP_BLE_Key_Button1_Action();
 8001cea:	f005 fbc9 	bl	8007480 <APP_BLE_Key_Button1_Action>
      break;
 8001cee:	e006      	b.n	8001cfe <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 8001cf0:	f005 fbd4 	bl	800749c <APP_BLE_Key_Button2_Action>
      break;
 8001cf4:	e003      	b.n	8001cfe <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 8001cf6:	f005 fbdd 	bl	80074b4 <APP_BLE_Key_Button3_Action>
      break;
 8001cfa:	e000      	b.n	8001cfe <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8001cfc:	bf00      	nop

  }
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d06:	b480      	push	{r7}
 8001d08:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001d0a:	b672      	cpsid	i
}
 8001d0c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <Error_Handler+0x8>

08001d10 <LL_RCC_EnableRTC>:
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <LL_AHB2_GRP1_EnableClock>:
{
 8001d32:	b480      	push	{r7}
 8001d34:	b085      	sub	sp, #20
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4013      	ands	r3, r2
 8001d54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d56:	68fb      	ldr	r3, [r7, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <LL_AHB3_GRP1_EnableClock>:
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d88:	68fb      	ldr	r3, [r7, #12]
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b085      	sub	sp, #20
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001da4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4013      	ands	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4013      	ands	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dec:	68fb      	ldr	r3, [r7, #12]
}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001dfe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e02:	f7ff ffaf 	bl	8001d64 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	202e      	movs	r0, #46	; 0x2e
 8001e0c:	f000 fbe5 	bl	80025da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001e10:	202e      	movs	r0, #46	; 0x2e
 8001e12:	f000 fbfc 	bl	800260e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <HAL_IPCC_MspInit+0x44>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d113      	bne.n	8001e56 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001e2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001e32:	f7ff ff97 	bl	8001d64 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	202c      	movs	r0, #44	; 0x2c
 8001e3c:	f000 fbcd 	bl	80025da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001e40:	202c      	movs	r0, #44	; 0x2c
 8001e42:	f000 fbe4 	bl	800260e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2100      	movs	r1, #0
 8001e4a:	202d      	movs	r0, #45	; 0x2d
 8001e4c:	f000 fbc5 	bl	80025da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001e50:	202d      	movs	r0, #45	; 0x2d
 8001e52:	f000 fbdc 	bl	800260e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	58000c00 	.word	0x58000c00

08001e64 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08e      	sub	sp, #56	; 0x38
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e6c:	f107 0308 	add.w	r3, r7, #8
 8001e70:	2230      	movs	r2, #48	; 0x30
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f006 fdea 	bl	8008a4e <memset>
  if(hrtc->Instance==RTC)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <HAL_RTC_MspInit+0x64>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d11d      	bne.n	8001ec0 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e88:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e90:	f107 0308 	add.w	r3, r7, #8
 8001e94:	4618      	mov	r0, r3
 8001e96:	f002 f8a1 	bl	8003fdc <HAL_RCCEx_PeriphCLKConfig>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001ea0:	f7ff ff31 	bl	8001d06 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ea4:	f7ff ff34 	bl	8001d10 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001ea8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001eac:	f7ff ff73 	bl	8001d96 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f000 fb90 	bl	80025da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001eba:	2003      	movs	r0, #3
 8001ebc:	f000 fba7 	bl	800260e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ec0:	bf00      	nop
 8001ec2:	3738      	adds	r7, #56	; 0x38
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40002800 	.word	0x40002800

08001ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b094      	sub	sp, #80	; 0x50
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	2230      	movs	r2, #48	; 0x30
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f006 fdae 	bl	8008a4e <memset>
  if(huart->Instance==USART1)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a17      	ldr	r2, [pc, #92]	; (8001f54 <HAL_UART_MspInit+0x88>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d126      	bne.n	8001f4a <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001efc:	2301      	movs	r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f00:	2300      	movs	r3, #0
 8001f02:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f002 f867 	bl	8003fdc <HAL_RCCEx_PeriphCLKConfig>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f14:	f7ff fef7 	bl	8001d06 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f18:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f1c:	f7ff ff54 	bl	8001dc8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f20:	2001      	movs	r0, #1
 8001f22:	f7ff ff06 	bl	8001d32 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f26:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f38:	2307      	movs	r3, #7
 8001f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f40:	4619      	mov	r1, r3
 8001f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f46:	f000 fba7 	bl	8002698 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f4a:	bf00      	nop
 8001f4c:	3750      	adds	r7, #80	; 0x50
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40013800 	.word	0x40013800

08001f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <NMI_Handler+0x4>

08001f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f62:	e7fe      	b.n	8001f62 <HardFault_Handler+0x4>

08001f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f68:	e7fe      	b.n	8001f68 <MemManage_Handler+0x4>

08001f6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6e:	e7fe      	b.n	8001f6e <BusFault_Handler+0x4>

08001f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <UsageFault_Handler+0x4>

08001f76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa4:	f000 f9b2 	bl	800230c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}

08001fac <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001fb0:	f7ff f96a 	bl	8001288 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	f000 fceb 	bl	8002998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 8001fca:	2010      	movs	r0, #16
 8001fcc:	f000 fce4 	bl	8002998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 8001fd8:	2040      	movs	r0, #64	; 0x40
 8001fda:	f000 fcdd 	bl	8002998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001fe6:	f006 f83d 	bl	8008064 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}

08001fee <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001ff2:	f006 f86d 	bl	80080d0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001ffe:	f000 fce3 	bl	80029c8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}

08002006 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b086      	sub	sp, #24
 800200a:	af00      	add	r7, sp, #0
 800200c:	60f8      	str	r0, [r7, #12]
 800200e:	60b9      	str	r1, [r7, #8]
 8002010:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	e00a      	b.n	800202e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002018:	f3af 8000 	nop.w
 800201c:	4601      	mov	r1, r0
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	60ba      	str	r2, [r7, #8]
 8002024:	b2ca      	uxtb	r2, r1
 8002026:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3301      	adds	r3, #1
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	429a      	cmp	r2, r3
 8002034:	dbf0      	blt.n	8002018 <_read+0x12>
	}

return len;
 8002036:	687b      	ldr	r3, [r7, #4]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	e009      	b.n	8002066 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	1c5a      	adds	r2, r3, #1
 8002056:	60ba      	str	r2, [r7, #8]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fc98 	bl	8001990 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	3301      	adds	r3, #1
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	429a      	cmp	r2, r3
 800206c:	dbf1      	blt.n	8002052 <_write+0x12>
	}
	return len;
 800206e:	687b      	ldr	r3, [r7, #4]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <_close>:

int _close(int file)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	return -1;
 8002080:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020a0:	605a      	str	r2, [r3, #4]
	return 0;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <_isatty>:

int _isatty(int file)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
	return 1;
 80020b8:	2301      	movs	r3, #1
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b085      	sub	sp, #20
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	60f8      	str	r0, [r7, #12]
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
	return 0;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e8:	4a14      	ldr	r2, [pc, #80]	; (800213c <_sbrk+0x5c>)
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <_sbrk+0x60>)
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <_sbrk+0x64>)
 80020fe:	4a12      	ldr	r2, [pc, #72]	; (8002148 <_sbrk+0x68>)
 8002100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <_sbrk+0x64>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	429a      	cmp	r2, r3
 800210e:	d207      	bcs.n	8002120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002110:	f006 fcfa 	bl	8008b08 <__errno>
 8002114:	4603      	mov	r3, r0
 8002116:	220c      	movs	r2, #12
 8002118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
 800211e:	e009      	b.n	8002134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <_sbrk+0x64>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002126:	4b07      	ldr	r3, [pc, #28]	; (8002144 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	4a05      	ldr	r2, [pc, #20]	; (8002144 <_sbrk+0x64>)
 8002130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002132:	68fb      	ldr	r3, [r7, #12]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20003000 	.word	0x20003000
 8002140:	00000400 	.word	0x00000400
 8002144:	20000294 	.word	0x20000294
 8002148:	200005a8 	.word	0x200005a8

0800214c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002150:	4b22      	ldr	r3, [pc, #136]	; (80021dc <SystemInit+0x90>)
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002156:	4a21      	ldr	r2, [pc, #132]	; (80021dc <SystemInit+0x90>)
 8002158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800215c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002174:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8002178:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800217a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002184:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <SystemInit+0x94>)
 8002186:	4013      	ands	r3, r2
 8002188:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800218a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002192:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002196:	f023 0305 	bic.w	r3, r3, #5
 800219a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800219e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80021b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b6:	4a0b      	ldr	r2, [pc, #44]	; (80021e4 <SystemInit+0x98>)
 80021b8:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ce:	2200      	movs	r2, #0
 80021d0:	619a      	str	r2, [r3, #24]
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00
 80021e0:	faf6fefb 	.word	0xfaf6fefb
 80021e4:	22041000 	.word	0x22041000

080021e8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80021e8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ea:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ec:	3304      	adds	r3, #4

080021ee <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021ee:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021f0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80021f2:	d3f9      	bcc.n	80021e8 <CopyDataInit>
  bx lr
 80021f4:	4770      	bx	lr

080021f6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80021f6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80021f8:	3004      	adds	r0, #4

080021fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80021fa:	4288      	cmp	r0, r1
  bcc FillZerobss
 80021fc:	d3fb      	bcc.n	80021f6 <FillZerobss>
  bx lr
 80021fe:	4770      	bx	lr

08002200 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002200:	480c      	ldr	r0, [pc, #48]	; (8002234 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8002202:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002204:	f7ff ffa2 	bl	800214c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002208:	480b      	ldr	r0, [pc, #44]	; (8002238 <LoopForever+0x8>)
 800220a:	490c      	ldr	r1, [pc, #48]	; (800223c <LoopForever+0xc>)
 800220c:	4a0c      	ldr	r2, [pc, #48]	; (8002240 <LoopForever+0x10>)
 800220e:	2300      	movs	r3, #0
 8002210:	f7ff ffed 	bl	80021ee <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002214:	480b      	ldr	r0, [pc, #44]	; (8002244 <LoopForever+0x14>)
 8002216:	490c      	ldr	r1, [pc, #48]	; (8002248 <LoopForever+0x18>)
 8002218:	2300      	movs	r3, #0
 800221a:	f7ff ffee 	bl	80021fa <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800221e:	480b      	ldr	r0, [pc, #44]	; (800224c <LoopForever+0x1c>)
 8002220:	490b      	ldr	r1, [pc, #44]	; (8002250 <LoopForever+0x20>)
 8002222:	2300      	movs	r3, #0
 8002224:	f7ff ffe9 	bl	80021fa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002228:	f006 fc74 	bl	8008b14 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800222c:	f7ff fbc2 	bl	80019b4 <main>

08002230 <LoopForever>:

LoopForever:
  b LoopForever
 8002230:	e7fe      	b.n	8002230 <LoopForever>
 8002232:	0000      	.short	0x0000
  ldr   r0, =_estack
 8002234:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8002238:	20000004 	.word	0x20000004
 800223c:	20000080 	.word	0x20000080
 8002240:	08009e2c 	.word	0x08009e2c
  INIT_BSS _sbss, _ebss
 8002244:	2000017c 	.word	0x2000017c
 8002248:	200005a4 	.word	0x200005a4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800224c:	200301e4 	.word	0x200301e4
 8002250:	20030a67 	.word	0x20030a67

08002254 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002254:	e7fe      	b.n	8002254 <ADC1_IRQHandler>
	...

08002258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <HAL_Init+0x3c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <HAL_Init+0x3c>)
 8002268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800226c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226e:	2003      	movs	r0, #3
 8002270:	f000 f9a8 	bl	80025c4 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002274:	200f      	movs	r0, #15
 8002276:	f000 f80f 	bl	8002298 <HAL_InitTick>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	71fb      	strb	r3, [r7, #7]
 8002284:	e001      	b.n	800228a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002286:	f7ff fdb8 	bl	8001dfa <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800228a:	79fb      	ldrb	r3, [r7, #7]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	58004000 	.word	0x58004000

08002298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <HAL_InitTick+0x6c>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d024      	beq.n	80022f6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022ac:	f001 fc80 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_InitTick+0x6c>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	4619      	mov	r1, r3
 80022b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 f9be 	bl	8002646 <HAL_SYSTICK_Config>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10f      	bne.n	80022f0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	d809      	bhi.n	80022ea <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d6:	2200      	movs	r2, #0
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	f04f 30ff 	mov.w	r0, #4294967295
 80022de:	f000 f97c 	bl	80025da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022e2:	4a09      	ldr	r2, [pc, #36]	; (8002308 <HAL_InitTick+0x70>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	e007      	b.n	80022fa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	73fb      	strb	r3, [r7, #15]
 80022ee:	e004      	b.n	80022fa <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
 80022f4:	e001      	b.n	80022fa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000018 	.word	0x20000018
 8002308:	20000014 	.word	0x20000014

0800230c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <HAL_IncTick+0x20>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	461a      	mov	r2, r3
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_IncTick+0x24>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4413      	add	r3, r2
 800231c:	4a04      	ldr	r2, [pc, #16]	; (8002330 <HAL_IncTick+0x24>)
 800231e:	6013      	str	r3, [r2, #0]
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20000018 	.word	0x20000018
 8002330:	20000298 	.word	0x20000298

08002334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  return uwTick;
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <HAL_GetTick+0x14>)
 800233a:	681b      	ldr	r3, [r3, #0]
}
 800233c:	4618      	mov	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20000298 	.word	0x20000298

0800234c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <HAL_GetTickPrio+0x14>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	4618      	mov	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000014 	.word	0x20000014

08002364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002380:	4013      	ands	r3, r2
 8002382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800238c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002396:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	60d3      	str	r3, [r2, #12]
}
 800239c:	bf00      	nop
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <__NVIC_GetPriorityGrouping+0x18>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f003 0307 	and.w	r3, r3, #7
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	db0b      	blt.n	80023f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	f003 021f 	and.w	r2, r3, #31
 80023e0:	4907      	ldr	r1, [pc, #28]	; (8002400 <__NVIC_EnableIRQ+0x38>)
 80023e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2001      	movs	r0, #1
 80023ea:	fa00 f202 	lsl.w	r2, r0, r2
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000e100 	.word	0xe000e100

08002404 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	db12      	blt.n	800243c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	490a      	ldr	r1, [pc, #40]	; (8002448 <__NVIC_DisableIRQ+0x44>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2001      	movs	r0, #1
 8002426:	fa00 f202 	lsl.w	r2, r0, r2
 800242a:	3320      	adds	r3, #32
 800242c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002430:	f3bf 8f4f 	dsb	sy
}
 8002434:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002436:	f3bf 8f6f 	isb	sy
}
 800243a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000e100 	.word	0xe000e100

0800244c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	2b00      	cmp	r3, #0
 800245c:	db0c      	blt.n	8002478 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245e:	79fb      	ldrb	r3, [r7, #7]
 8002460:	f003 021f 	and.w	r2, r3, #31
 8002464:	4907      	ldr	r1, [pc, #28]	; (8002484 <__NVIC_SetPendingIRQ+0x38>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	2001      	movs	r0, #1
 800246e:	fa00 f202 	lsl.w	r2, r0, r2
 8002472:	3340      	adds	r3, #64	; 0x40
 8002474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000e100 	.word	0xe000e100

08002488 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	2b00      	cmp	r3, #0
 8002498:	db0c      	blt.n	80024b4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	f003 021f 	and.w	r2, r3, #31
 80024a0:	4907      	ldr	r1, [pc, #28]	; (80024c0 <__NVIC_ClearPendingIRQ+0x38>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	2001      	movs	r0, #1
 80024aa:	fa00 f202 	lsl.w	r2, r0, r2
 80024ae:	3360      	adds	r3, #96	; 0x60
 80024b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000e100 	.word	0xe000e100

080024c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	6039      	str	r1, [r7, #0]
 80024ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	db0a      	blt.n	80024ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	490c      	ldr	r1, [pc, #48]	; (8002510 <__NVIC_SetPriority+0x4c>)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	0112      	lsls	r2, r2, #4
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	440b      	add	r3, r1
 80024e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ec:	e00a      	b.n	8002504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	4908      	ldr	r1, [pc, #32]	; (8002514 <__NVIC_SetPriority+0x50>)
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	3b04      	subs	r3, #4
 80024fc:	0112      	lsls	r2, r2, #4
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	440b      	add	r3, r1
 8002502:	761a      	strb	r2, [r3, #24]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	e000e100 	.word	0xe000e100
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f1c3 0307 	rsb	r3, r3, #7
 8002532:	2b04      	cmp	r3, #4
 8002534:	bf28      	it	cs
 8002536:	2304      	movcs	r3, #4
 8002538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3304      	adds	r3, #4
 800253e:	2b06      	cmp	r3, #6
 8002540:	d902      	bls.n	8002548 <NVIC_EncodePriority+0x30>
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3b03      	subs	r3, #3
 8002546:	e000      	b.n	800254a <NVIC_EncodePriority+0x32>
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800254c:	f04f 32ff 	mov.w	r2, #4294967295
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43da      	mvns	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	401a      	ands	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002560:	f04f 31ff 	mov.w	r1, #4294967295
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	43d9      	mvns	r1, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002570:	4313      	orrs	r3, r2
         );
}
 8002572:	4618      	mov	r0, r3
 8002574:	3724      	adds	r7, #36	; 0x24
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3b01      	subs	r3, #1
 800258c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002590:	d301      	bcc.n	8002596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002592:	2301      	movs	r3, #1
 8002594:	e00f      	b.n	80025b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002596:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <SysTick_Config+0x40>)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800259e:	210f      	movs	r1, #15
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295
 80025a4:	f7ff ff8e 	bl	80024c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <SysTick_Config+0x40>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ae:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <SysTick_Config+0x40>)
 80025b0:	2207      	movs	r2, #7
 80025b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	e000e010 	.word	0xe000e010

080025c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff fec9 	bl	8002364 <__NVIC_SetPriorityGrouping>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b086      	sub	sp, #24
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025e8:	f7ff fee0 	bl	80023ac <__NVIC_GetPriorityGrouping>
 80025ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68b9      	ldr	r1, [r7, #8]
 80025f2:	6978      	ldr	r0, [r7, #20]
 80025f4:	f7ff ff90 	bl	8002518 <NVIC_EncodePriority>
 80025f8:	4602      	mov	r2, r0
 80025fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ff5f 	bl	80024c4 <__NVIC_SetPriority>
}
 8002606:	bf00      	nop
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fed3 	bl	80023c8 <__NVIC_EnableIRQ>
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	4603      	mov	r3, r0
 8002632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fee3 	bl	8002404 <__NVIC_DisableIRQ>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff ff96 	bl	8002580 <SysTick_Config>
 8002654:	4603      	mov	r3, r0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266c:	4618      	mov	r0, r3
 800266e:	f7ff feed 	bl	800244c <__NVIC_SetPendingIRQ>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	4603      	mov	r3, r0
 8002682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fefd 	bl	8002488 <__NVIC_ClearPendingIRQ>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a6:	e146      	b.n	8002936 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	2101      	movs	r1, #1
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	fa01 f303 	lsl.w	r3, r1, r3
 80026b4:	4013      	ands	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 8138 	beq.w	8002930 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d005      	beq.n	80026d8 <HAL_GPIO_Init+0x40>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d130      	bne.n	800273a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	2203      	movs	r2, #3
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68da      	ldr	r2, [r3, #12]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800270e:	2201      	movs	r2, #1
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43db      	mvns	r3, r3
 8002718:	693a      	ldr	r2, [r7, #16]
 800271a:	4013      	ands	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	f003 0201 	and.w	r2, r3, #1
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	4313      	orrs	r3, r2
 8002732:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b03      	cmp	r3, #3
 8002744:	d017      	beq.n	8002776 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	2203      	movs	r2, #3
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d123      	bne.n	80027ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	08da      	lsrs	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3208      	adds	r2, #8
 800278a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800278e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	220f      	movs	r2, #15
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43db      	mvns	r3, r3
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4013      	ands	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	08da      	lsrs	r2, r3, #3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3208      	adds	r2, #8
 80027c4:	6939      	ldr	r1, [r7, #16]
 80027c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	2203      	movs	r2, #3
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43db      	mvns	r3, r3
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4013      	ands	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 0203 	and.w	r2, r3, #3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	693a      	ldr	r2, [r7, #16]
 80027fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 8092 	beq.w	8002930 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800280c:	4a51      	ldr	r2, [pc, #324]	; (8002954 <HAL_GPIO_Init+0x2bc>)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	3302      	adds	r3, #2
 8002814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002818:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	220f      	movs	r2, #15
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002836:	d013      	beq.n	8002860 <HAL_GPIO_Init+0x1c8>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a47      	ldr	r2, [pc, #284]	; (8002958 <HAL_GPIO_Init+0x2c0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00d      	beq.n	800285c <HAL_GPIO_Init+0x1c4>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a46      	ldr	r2, [pc, #280]	; (800295c <HAL_GPIO_Init+0x2c4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d007      	beq.n	8002858 <HAL_GPIO_Init+0x1c0>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a45      	ldr	r2, [pc, #276]	; (8002960 <HAL_GPIO_Init+0x2c8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d101      	bne.n	8002854 <HAL_GPIO_Init+0x1bc>
 8002850:	2304      	movs	r3, #4
 8002852:	e006      	b.n	8002862 <HAL_GPIO_Init+0x1ca>
 8002854:	2307      	movs	r3, #7
 8002856:	e004      	b.n	8002862 <HAL_GPIO_Init+0x1ca>
 8002858:	2302      	movs	r3, #2
 800285a:	e002      	b.n	8002862 <HAL_GPIO_Init+0x1ca>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <HAL_GPIO_Init+0x1ca>
 8002860:	2300      	movs	r3, #0
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	f002 0203 	and.w	r2, r2, #3
 8002868:	0092      	lsls	r2, r2, #2
 800286a:	4093      	lsls	r3, r2
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002872:	4938      	ldr	r1, [pc, #224]	; (8002954 <HAL_GPIO_Init+0x2bc>)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	089b      	lsrs	r3, r3, #2
 8002878:	3302      	adds	r3, #2
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002880:	4b38      	ldr	r3, [pc, #224]	; (8002964 <HAL_GPIO_Init+0x2cc>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	43db      	mvns	r3, r3
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d003      	beq.n	80028a4 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028a4:	4a2f      	ldr	r2, [pc, #188]	; (8002964 <HAL_GPIO_Init+0x2cc>)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80028aa:	4b2e      	ldr	r3, [pc, #184]	; (8002964 <HAL_GPIO_Init+0x2cc>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4013      	ands	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028ce:	4a25      	ldr	r2, [pc, #148]	; (8002964 <HAL_GPIO_Init+0x2cc>)
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80028d4:	4b23      	ldr	r3, [pc, #140]	; (8002964 <HAL_GPIO_Init+0x2cc>)
 80028d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	43db      	mvns	r3, r3
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	4013      	ands	r3, r2
 80028e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028fa:	4a1a      	ldr	r2, [pc, #104]	; (8002964 <HAL_GPIO_Init+0x2cc>)
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002902:	4b18      	ldr	r3, [pc, #96]	; (8002964 <HAL_GPIO_Init+0x2cc>)
 8002904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002908:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	43db      	mvns	r3, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002928:	4a0e      	ldr	r2, [pc, #56]	; (8002964 <HAL_GPIO_Init+0x2cc>)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	3301      	adds	r3, #1
 8002934:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	f47f aeb1 	bne.w	80026a8 <HAL_GPIO_Init+0x10>
  }
}
 8002946:	bf00      	nop
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	40010000 	.word	0x40010000
 8002958:	48000400 	.word	0x48000400
 800295c:	48000800 	.word	0x48000800
 8002960:	48001000 	.word	0x48001000
 8002964:	58000800 	.word	0x58000800

08002968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	807b      	strh	r3, [r7, #2]
 8002974:	4613      	mov	r3, r2
 8002976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002978:	787b      	ldrb	r3, [r7, #1]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800297e:	887a      	ldrh	r2, [r7, #2]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002984:	e002      	b.n	800298c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002986:	887a      	ldrh	r2, [r7, #2]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d006      	beq.n	80029bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff f988 	bl	8001ccc <HAL_GPIO_EXTI_Callback>
  }
}
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	58000800 	.word	0x58000800

080029c8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_HSEM_IRQHandler+0x30>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_HSEM_IRQHandler+0x30>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	43db      	mvns	r3, r3
 80029dc:	4906      	ldr	r1, [pc, #24]	; (80029f8 <HAL_HSEM_IRQHandler+0x30>)
 80029de:	4013      	ands	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80029e2:	4a05      	ldr	r2, [pc, #20]	; (80029f8 <HAL_HSEM_IRQHandler+0x30>)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f807 	bl	80029fc <HAL_HSEM_FreeCallback>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	58001500 	.word	0x58001500

080029fc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d01e      	beq.n	8002a60 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002a22:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <HAL_IPCC_Init+0x60>)
 8002a24:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d102      	bne.n	8002a38 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff f9f2 	bl	8001e1c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002a38:	68b8      	ldr	r0, [r7, #8]
 8002a3a:	f000 f85b 	bl	8002af4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f82c 	bl	8002aa8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002a5e:	e001      	b.n	8002a64 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	58000c00 	.word	0x58000c00

08002a74 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b085      	sub	sp, #20
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	e00f      	b.n	8002ad6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	4a0b      	ldr	r2, [pc, #44]	; (8002aec <IPCC_SetDefaultCallbacks+0x44>)
 8002ac0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	3306      	adds	r3, #6
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <IPCC_SetDefaultCallbacks+0x48>)
 8002ace:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	d9ec      	bls.n	8002ab6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	08002a75 	.word	0x08002a75
 8002af0:	08002a8f 	.word	0x08002a8f

08002af4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002b08:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	223f      	movs	r2, #63	; 0x3f
 8002b0e:	609a      	str	r2, [r3, #8]
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a04      	ldr	r2, [pc, #16]	; (8002b38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2a:	6013      	str	r3, [r2, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	58000400 	.word	0x58000400

08002b3c <LL_PWR_EnableSRAM2Retention>:
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b4a:	6093      	str	r3, [r2, #8]
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	58000400 	.word	0x58000400

08002b5c <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended 
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8002b60:	f7ff ffec 	bl	8002b3c <LL_PWR_EnableSRAM2Retention>
}
 8002b64:	bf00      	nop
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b7a:	d101      	bne.n	8002b80 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_RCC_HSE_Enable>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9e:	6013      	str	r3, [r2, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <LL_RCC_HSE_Disable>:
{
 8002baa:	b480      	push	{r7}
 8002bac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]
}
 8002bbe:	bf00      	nop
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <LL_RCC_HSE_IsReady>:
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bda:	d101      	bne.n	8002be0 <LL_RCC_HSE_IsReady+0x18>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <LL_RCC_HSE_IsReady+0x1a>
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_RCC_HSI_Enable>:
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bfe:	6013      	str	r3, [r2, #0]
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <LL_RCC_HSI_Disable>:
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c1c:	6013      	str	r3, [r2, #0]
}
 8002c1e:	bf00      	nop
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_RCC_HSI_IsReady>:
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3a:	d101      	bne.n	8002c40 <LL_RCC_HSI_IsReady+0x18>
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e000      	b.n	8002c42 <LL_RCC_HSI_IsReady+0x1a>
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <LL_RCC_HSI_SetCalibTrimming>:
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	061b      	lsls	r3, r3, #24
 8002c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c66:	4313      	orrs	r3, r2
 8002c68:	604b      	str	r3, [r1, #4]
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_RCC_LSE_Enable>:
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c86:	f043 0301 	orr.w	r3, r3, #1
 8002c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_RCC_LSE_Disable>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ca8:	f023 0301 	bic.w	r3, r3, #1
 8002cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <LL_RCC_LSE_EnableBypass>:
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cca:	f043 0304 	orr.w	r3, r3, #4
 8002cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cd2:	bf00      	nop
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr

08002cdc <LL_RCC_LSE_DisableBypass>:
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cec:	f023 0304 	bic.w	r3, r3, #4
 8002cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <LL_RCC_LSE_IsReady>:
{
 8002cfe:	b480      	push	{r7}
 8002d00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d101      	bne.n	8002d16 <LL_RCC_LSE_IsReady+0x18>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <LL_RCC_LSE_IsReady+0x1a>
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <LL_RCC_LSI1_Enable>:
{
 8002d22:	b480      	push	{r7}
 8002d24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_RCC_LSI1_Disable>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <LL_RCC_LSI1_IsReady>:
{
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d101      	bne.n	8002d7e <LL_RCC_LSI1_IsReady+0x18>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <LL_RCC_LSI1_IsReady+0x1a>
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <LL_RCC_LSI2_Enable>:
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d9a:	f043 0304 	orr.w	r3, r3, #4
 8002d9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002da2:	bf00      	nop
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <LL_RCC_LSI2_Disable>:
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002db8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dbc:	f023 0304 	bic.w	r3, r3, #4
 8002dc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <LL_RCC_LSI2_IsReady>:
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d101      	bne.n	8002de6 <LL_RCC_LSI2_IsReady+0x18>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <LL_RCC_LSI2_IsReady+0x1a>
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <LL_RCC_LSI2_SetTrimming>:
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e02:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	021b      	lsls	r3, r3, #8
 8002e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <LL_RCC_MSI_Enable>:
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002e24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	6013      	str	r3, [r2, #0]
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_RCC_MSI_Disable>:
{
 8002e3e:	b480      	push	{r7}
 8002e40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e4c:	f023 0301 	bic.w	r3, r3, #1
 8002e50:	6013      	str	r3, [r2, #0]
}
 8002e52:	bf00      	nop
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <LL_RCC_MSI_IsReady>:
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d101      	bne.n	8002e72 <LL_RCC_MSI_IsReady+0x16>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <LL_RCC_MSI_IsReady+0x18>
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr

08002e7e <LL_RCC_MSI_SetRange>:
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <LL_RCC_MSI_GetRange>:
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002eb6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2bb0      	cmp	r3, #176	; 0xb0
 8002ebc:	d901      	bls.n	8002ec2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8002ebe:	23b0      	movs	r3, #176	; 0xb0
 8002ec0:	607b      	str	r3, [r7, #4]
  return msiRange;
 8002ec2:	687b      	ldr	r3, [r7, #4]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002eea:	4313      	orrs	r3, r2
 8002eec:	604b      	str	r3, [r1, #4]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <LL_RCC_SetSysClkSource>:
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f023 0203 	bic.w	r2, r3, #3
 8002f0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	608b      	str	r3, [r1, #8]
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <LL_RCC_GetSysClkSource>:
{
 8002f22:	b480      	push	{r7}
 8002f24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_RCC_SetAHBPrescaler>:
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <LL_C2_RCC_SetAHBPrescaler>:
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <LL_RCC_SetAHB4Prescaler>:
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f9e:	f023 020f 	bic.w	r2, r3, #15
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	091b      	lsrs	r3, r3, #4
 8002fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <LL_RCC_SetAPB1Prescaler>:
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	608b      	str	r3, [r1, #8]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <LL_RCC_SetAPB2Prescaler>:
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <LL_RCC_GetAHBPrescaler>:
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800301a:	4618      	mov	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <LL_RCC_GetAHB4Prescaler>:
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003036:	4618      	mov	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <LL_RCC_GetAPB1Prescaler>:
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800304e:	4618      	mov	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <LL_RCC_GetAPB2Prescaler>:
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800305c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003066:	4618      	mov	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <LL_RCC_PLL_Enable>:
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800307e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003082:	6013      	str	r3, [r2, #0]
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <LL_RCC_PLL_Disable>:
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800309c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030a0:	6013      	str	r3, [r2, #0]
}
 80030a2:	bf00      	nop
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <LL_RCC_PLL_IsReady>:
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80030b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030be:	d101      	bne.n	80030c4 <LL_RCC_PLL_IsReady+0x18>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <LL_RCC_PLL_IsReady+0x1a>
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_RCC_PLL_GetN>:
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80030d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	0a1b      	lsrs	r3, r3, #8
 80030dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <LL_RCC_PLL_GetR>:
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80030ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <LL_RCC_PLL_GetDivider>:
{
 8003102:	b480      	push	{r7}
 8003104:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <LL_RCC_PLL_GetMainSource>:
{
 800311a:	b480      	push	{r7}
 800311c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800311e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0303 	and.w	r3, r3, #3
}
 8003128:	4618      	mov	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <LL_RCC_IsActiveFlag_HPRE>:
{
 8003132:	b480      	push	{r7}
 8003134:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003136:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003144:	d101      	bne.n	800314a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8003156:	b480      	push	{r7}
 8003158:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800315a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800316a:	d101      	bne.n	8003170 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800316c:	2301      	movs	r3, #1
 800316e:	e000      	b.n	8003172 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003184:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003190:	d101      	bne.n	8003196 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80031a2:	b480      	push	{r7}
 80031a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80031a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031b4:	d101      	bne.n	80031ba <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80031c6:	b480      	push	{r7}
 80031c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80031ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031d8:	d101      	bne.n	80031de <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ec:	b590      	push	{r4, r7, lr}
 80031ee:	b08d      	sub	sp, #52	; 0x34
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e324      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 808d 	beq.w	8003326 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800320c:	f7ff fe89 	bl	8002f22 <LL_RCC_GetSysClkSource>
 8003210:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003212:	f7ff ff82 	bl	800311a <LL_RCC_PLL_GetMainSource>
 8003216:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <HAL_RCC_OscConfig+0x3e>
 800321e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003220:	2b0c      	cmp	r3, #12
 8003222:	d147      	bne.n	80032b4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003226:	2b01      	cmp	r3, #1
 8003228:	d144      	bne.n	80032b4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e308      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800323a:	f7ff fe34 	bl	8002ea6 <LL_RCC_MSI_GetRange>
 800323e:	4603      	mov	r3, r0
 8003240:	429c      	cmp	r4, r3
 8003242:	d914      	bls.n	800326e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	4618      	mov	r0, r3
 800324a:	f000 fcf1 	bl	8003c30 <RCC_SetFlashLatencyFromMSIRange>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e2f7      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fe0e 	bl	8002e7e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fe32 	bl	8002ed0 <LL_RCC_MSI_SetCalibTrimming>
 800326c:	e013      	b.n	8003296 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff fe03 	bl	8002e7e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff fe27 	bl	8002ed0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fcd2 	bl	8003c30 <RCC_SetFlashLatencyFromMSIRange>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e2d8      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003296:	f000 fc8b 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 800329a:	4603      	mov	r3, r0
 800329c:	4aa4      	ldr	r2, [pc, #656]	; (8003530 <HAL_RCC_OscConfig+0x344>)
 800329e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80032a0:	4ba4      	ldr	r3, [pc, #656]	; (8003534 <HAL_RCC_OscConfig+0x348>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe fff7 	bl	8002298 <HAL_InitTick>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d039      	beq.n	8003324 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e2c9      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d01e      	beq.n	80032fa <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032bc:	f7ff fdb0 	bl	8002e20 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032c0:	f7ff f838 	bl	8002334 <HAL_GetTick>
 80032c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032c8:	f7ff f834 	bl	8002334 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e2b6      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 80032da:	f7ff fdbf 	bl	8002e5c <LL_RCC_MSI_IsReady>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f1      	beq.n	80032c8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fdc8 	bl	8002e7e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff fdec 	bl	8002ed0 <LL_RCC_MSI_SetCalibTrimming>
 80032f8:	e015      	b.n	8003326 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032fa:	f7ff fda0 	bl	8002e3e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032fe:	f7ff f819 	bl	8002334 <HAL_GetTick>
 8003302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003306:	f7ff f815 	bl	8002334 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e297      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003318:	f7ff fda0 	bl	8002e5c <LL_RCC_MSI_IsReady>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1f1      	bne.n	8003306 <HAL_RCC_OscConfig+0x11a>
 8003322:	e000      	b.n	8003326 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003324:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d047      	beq.n	80033c2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003332:	f7ff fdf6 	bl	8002f22 <LL_RCC_GetSysClkSource>
 8003336:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003338:	f7ff feef 	bl	800311a <LL_RCC_PLL_GetMainSource>
 800333c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	2b08      	cmp	r3, #8
 8003342:	d005      	beq.n	8003350 <HAL_RCC_OscConfig+0x164>
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	2b0c      	cmp	r3, #12
 8003348:	d108      	bne.n	800335c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d105      	bne.n	800335c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d134      	bne.n	80033c2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e275      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003364:	d102      	bne.n	800336c <HAL_RCC_OscConfig+0x180>
 8003366:	f7ff fc11 	bl	8002b8c <LL_RCC_HSE_Enable>
 800336a:	e001      	b.n	8003370 <HAL_RCC_OscConfig+0x184>
 800336c:	f7ff fc1d 	bl	8002baa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d012      	beq.n	800339e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fe ffdc 	bl	8002334 <HAL_GetTick>
 800337c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003380:	f7fe ffd8 	bl	8002334 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b64      	cmp	r3, #100	; 0x64
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e25a      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003392:	f7ff fc19 	bl	8002bc8 <LL_RCC_HSE_IsReady>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f1      	beq.n	8003380 <HAL_RCC_OscConfig+0x194>
 800339c:	e011      	b.n	80033c2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339e:	f7fe ffc9 	bl	8002334 <HAL_GetTick>
 80033a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033a6:	f7fe ffc5 	bl	8002334 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b64      	cmp	r3, #100	; 0x64
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e247      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 80033b8:	f7ff fc06 	bl	8002bc8 <LL_RCC_HSE_IsReady>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f1      	bne.n	80033a6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d04c      	beq.n	8003468 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033ce:	f7ff fda8 	bl	8002f22 <LL_RCC_GetSysClkSource>
 80033d2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033d4:	f7ff fea1 	bl	800311a <LL_RCC_PLL_GetMainSource>
 80033d8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d005      	beq.n	80033ec <HAL_RCC_OscConfig+0x200>
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2b0c      	cmp	r3, #12
 80033e4:	d10e      	bne.n	8003404 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d10b      	bne.n	8003404 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e227      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fc25 	bl	8002c4c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003402:	e031      	b.n	8003468 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d019      	beq.n	8003440 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800340c:	f7ff fbee 	bl	8002bec <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7fe ff90 	bl	8002334 <HAL_GetTick>
 8003414:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003418:	f7fe ff8c 	bl	8002334 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e20e      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 800342a:	f7ff fbfd 	bl	8002c28 <LL_RCC_HSI_IsReady>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0f1      	beq.n	8003418 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fc07 	bl	8002c4c <LL_RCC_HSI_SetCalibTrimming>
 800343e:	e013      	b.n	8003468 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003440:	f7ff fbe3 	bl	8002c0a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7fe ff76 	bl	8002334 <HAL_GetTick>
 8003448:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800344c:	f7fe ff72 	bl	8002334 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e1f4      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 800345e:	f7ff fbe3 	bl	8002c28 <LL_RCC_HSI_IsReady>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f1      	bne.n	800344c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d106      	bne.n	8003482 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80a3 	beq.w	80035c8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d076      	beq.n	8003578 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0310 	and.w	r3, r3, #16
 8003492:	2b00      	cmp	r3, #0
 8003494:	d046      	beq.n	8003524 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003496:	f7ff fc66 	bl	8002d66 <LL_RCC_LSI1_IsReady>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d113      	bne.n	80034c8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80034a0:	f7ff fc3f 	bl	8002d22 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034a4:	f7fe ff46 	bl	8002334 <HAL_GetTick>
 80034a8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80034ac:	f7fe ff42 	bl	8002334 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e1c4      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80034be:	f7ff fc52 	bl	8002d66 <LL_RCC_LSI1_IsReady>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f1      	beq.n	80034ac <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80034c8:	f7ff fc5f 	bl	8002d8a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034cc:	f7fe ff32 	bl	8002334 <HAL_GetTick>
 80034d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80034d4:	f7fe ff2e 	bl	8002334 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b03      	cmp	r3, #3
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e1b0      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80034e6:	f7ff fc72 	bl	8002dce <LL_RCC_LSI2_IsReady>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f1      	beq.n	80034d4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff fc7c 	bl	8002df2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80034fa:	f7ff fc23 	bl	8002d44 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fe:	f7fe ff19 	bl	8002334 <HAL_GetTick>
 8003502:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003506:	f7fe ff15 	bl	8002334 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e197      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003518:	f7ff fc25 	bl	8002d66 <LL_RCC_LSI1_IsReady>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f1      	bne.n	8003506 <HAL_RCC_OscConfig+0x31a>
 8003522:	e051      	b.n	80035c8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003524:	f7ff fbfd 	bl	8002d22 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fe ff04 	bl	8002334 <HAL_GetTick>
 800352c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800352e:	e00c      	b.n	800354a <HAL_RCC_OscConfig+0x35e>
 8003530:	20000010 	.word	0x20000010
 8003534:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003538:	f7fe fefc 	bl	8002334 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e17e      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800354a:	f7ff fc0c 	bl	8002d66 <LL_RCC_LSI1_IsReady>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f1      	beq.n	8003538 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003554:	f7ff fc2a 	bl	8002dac <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800355a:	f7fe feeb 	bl	8002334 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b03      	cmp	r3, #3
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e16d      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800356c:	f7ff fc2f 	bl	8002dce <LL_RCC_LSI2_IsReady>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f1      	bne.n	800355a <HAL_RCC_OscConfig+0x36e>
 8003576:	e027      	b.n	80035c8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003578:	f7ff fc18 	bl	8002dac <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357c:	f7fe feda 	bl	8002334 <HAL_GetTick>
 8003580:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003584:	f7fe fed6 	bl	8002334 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b03      	cmp	r3, #3
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e158      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003596:	f7ff fc1a 	bl	8002dce <LL_RCC_LSI2_IsReady>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1f1      	bne.n	8003584 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80035a0:	f7ff fbd0 	bl	8002d44 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a4:	f7fe fec6 	bl	8002334 <HAL_GetTick>
 80035a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80035ac:	f7fe fec2 	bl	8002334 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e144      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80035be:	f7ff fbd2 	bl	8002d66 <LL_RCC_LSI1_IsReady>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f1      	bne.n	80035ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d05b      	beq.n	800368c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035d4:	4b9e      	ldr	r3, [pc, #632]	; (8003850 <HAL_RCC_OscConfig+0x664>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d114      	bne.n	800360a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80035e0:	f7ff fa9c 	bl	8002b1c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e4:	f7fe fea6 	bl	8002334 <HAL_GetTick>
 80035e8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ec:	f7fe fea2 	bl	8002334 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e124      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035fe:	4b94      	ldr	r3, [pc, #592]	; (8003850 <HAL_RCC_OscConfig+0x664>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d102      	bne.n	8003618 <HAL_RCC_OscConfig+0x42c>
 8003612:	f7ff fb30 	bl	8002c76 <LL_RCC_LSE_Enable>
 8003616:	e00c      	b.n	8003632 <HAL_RCC_OscConfig+0x446>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b05      	cmp	r3, #5
 800361e:	d104      	bne.n	800362a <HAL_RCC_OscConfig+0x43e>
 8003620:	f7ff fb4b 	bl	8002cba <LL_RCC_LSE_EnableBypass>
 8003624:	f7ff fb27 	bl	8002c76 <LL_RCC_LSE_Enable>
 8003628:	e003      	b.n	8003632 <HAL_RCC_OscConfig+0x446>
 800362a:	f7ff fb35 	bl	8002c98 <LL_RCC_LSE_Disable>
 800362e:	f7ff fb55 	bl	8002cdc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d014      	beq.n	8003664 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800363a:	f7fe fe7b 	bl	8002334 <HAL_GetTick>
 800363e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003640:	e00a      	b.n	8003658 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003642:	f7fe fe77 	bl	8002334 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003650:	4293      	cmp	r3, r2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e0f7      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003658:	f7ff fb51 	bl	8002cfe <LL_RCC_LSE_IsReady>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0ef      	beq.n	8003642 <HAL_RCC_OscConfig+0x456>
 8003662:	e013      	b.n	800368c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003664:	f7fe fe66 	bl	8002334 <HAL_GetTick>
 8003668:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800366a:	e00a      	b.n	8003682 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366c:	f7fe fe62 	bl	8002334 <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	f241 3288 	movw	r2, #5000	; 0x1388
 800367a:	4293      	cmp	r3, r2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e0e2      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003682:	f7ff fb3c 	bl	8002cfe <LL_RCC_LSE_IsReady>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1ef      	bne.n	800366c <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80d8 	beq.w	8003846 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003696:	f7ff fc44 	bl	8002f22 <LL_RCC_GetSysClkSource>
 800369a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800369c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	f040 80a6 	bne.w	80037fa <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f003 0203 	and.w	r2, r3, #3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d123      	bne.n	8003704 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d11c      	bne.n	8003704 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	0a1b      	lsrs	r3, r3, #8
 80036ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d114      	bne.n	8003704 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d10d      	bne.n	8003704 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d106      	bne.n	8003704 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003700:	429a      	cmp	r2, r3
 8003702:	d054      	beq.n	80037ae <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	2b0c      	cmp	r3, #12
 8003708:	d04f      	beq.n	80037aa <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800370a:	f7ff fcc0 	bl	800308e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800370e:	f7fe fe11 	bl	8002334 <HAL_GetTick>
 8003712:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003716:	f7fe fe0d 	bl	8002334 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e08f      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1ef      	bne.n	8003716 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	4b45      	ldr	r3, [pc, #276]	; (8003854 <HAL_RCC_OscConfig+0x668>)
 800373e:	4013      	ands	r3, r2
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003748:	4311      	orrs	r1, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800374e:	0212      	lsls	r2, r2, #8
 8003750:	4311      	orrs	r1, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003756:	4311      	orrs	r1, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800375c:	4311      	orrs	r1, r2
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003762:	430a      	orrs	r2, r1
 8003764:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003768:	4313      	orrs	r3, r2
 800376a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800376c:	f7ff fc80 	bl	8003070 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800377a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800377e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003780:	f7fe fdd8 	bl	8002334 <HAL_GetTick>
 8003784:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003788:	f7fe fdd4 	bl	8002334 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e056      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0ef      	beq.n	8003788 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037a8:	e04d      	b.n	8003846 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e04c      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d144      	bne.n	8003846 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037bc:	f7ff fc58 	bl	8003070 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037d0:	f7fe fdb0 	bl	8002334 <HAL_GetTick>
 80037d4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d8:	f7fe fdac 	bl	8002334 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e02e      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0ef      	beq.n	80037d8 <HAL_RCC_OscConfig+0x5ec>
 80037f8:	e025      	b.n	8003846 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b0c      	cmp	r3, #12
 80037fe:	d020      	beq.n	8003842 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003800:	f7ff fc45 	bl	800308e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fe fd96 	bl	8002334 <HAL_GetTick>
 8003808:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380c:	f7fe fd92 	bl	8002334 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e014      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800381e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1ef      	bne.n	800380c <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 800382c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800383a:	f023 0303 	bic.w	r3, r3, #3
 800383e:	60d3      	str	r3, [r2, #12]
 8003840:	e001      	b.n	8003846 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3734      	adds	r7, #52	; 0x34
 800384c:	46bd      	mov	sp, r7
 800384e:	bd90      	pop	{r4, r7, pc}
 8003850:	58000400 	.word	0x58000400
 8003854:	11c1808c 	.word	0x11c1808c

08003858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e12d      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800386c:	4b98      	ldr	r3, [pc, #608]	; (8003ad0 <HAL_RCC_ClockConfig+0x278>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d91b      	bls.n	80038b2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387a:	4b95      	ldr	r3, [pc, #596]	; (8003ad0 <HAL_RCC_ClockConfig+0x278>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 0207 	bic.w	r2, r3, #7
 8003882:	4993      	ldr	r1, [pc, #588]	; (8003ad0 <HAL_RCC_ClockConfig+0x278>)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800388a:	f7fe fd53 	bl	8002334 <HAL_GetTick>
 800388e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003892:	f7fe fd4f 	bl	8002334 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e111      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a4:	4b8a      	ldr	r3, [pc, #552]	; (8003ad0 <HAL_RCC_ClockConfig+0x278>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d1ef      	bne.n	8003892 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d016      	beq.n	80038ec <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff fb39 	bl	8002f3a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80038c8:	f7fe fd34 	bl	8002334 <HAL_GetTick>
 80038cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80038d0:	f7fe fd30 	bl	8002334 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e0f2      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80038e2:	f7ff fc26 	bl	8003132 <LL_RCC_IsActiveFlag_HPRE>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0f1      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d016      	beq.n	8003926 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fb30 	bl	8002f62 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003902:	f7fe fd17 	bl	8002334 <HAL_GetTick>
 8003906:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003908:	e008      	b.n	800391c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800390a:	f7fe fd13 	bl	8002334 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e0d5      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800391c:	f7ff fc1b 	bl	8003156 <LL_RCC_IsActiveFlag_C2HPRE>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0f1      	beq.n	800390a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d016      	beq.n	8003960 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff fb29 	bl	8002f8e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800393c:	f7fe fcfa 	bl	8002334 <HAL_GetTick>
 8003940:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003944:	f7fe fcf6 	bl	8002334 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e0b8      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003956:	f7ff fc11 	bl	800317c <LL_RCC_IsActiveFlag_SHDHPRE>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f1      	beq.n	8003944 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d016      	beq.n	800399a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff fb23 	bl	8002fbc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003976:	f7fe fcdd 	bl	8002334 <HAL_GetTick>
 800397a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800397c:	e008      	b.n	8003990 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800397e:	f7fe fcd9 	bl	8002334 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e09b      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003990:	f7ff fc07 	bl	80031a2 <LL_RCC_IsActiveFlag_PPRE1>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f1      	beq.n	800397e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0308 	and.w	r3, r3, #8
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d017      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fb19 	bl	8002fe4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80039b2:	f7fe fcbf 	bl	8002334 <HAL_GetTick>
 80039b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80039b8:	e008      	b.n	80039cc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039ba:	f7fe fcbb 	bl	8002334 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e07d      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80039cc:	f7ff fbfb 	bl	80031c6 <LL_RCC_IsActiveFlag_PPRE2>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f1      	beq.n	80039ba <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d043      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d106      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80039ea:	f7ff f8ed 	bl	8002bc8 <LL_RCC_HSE_IsReady>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d11e      	bne.n	8003a32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e067      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d106      	bne.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003a00:	f7ff fb54 	bl	80030ac <LL_RCC_PLL_IsReady>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d113      	bne.n	8003a32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e05c      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003a16:	f7ff fa21 	bl	8002e5c <LL_RCC_MSI_IsReady>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d108      	bne.n	8003a32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e051      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003a24:	f7ff f900 	bl	8002c28 <LL_RCC_HSI_IsReady>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e04a      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff fa5f 	bl	8002efa <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a3c:	f7fe fc7a 	bl	8002334 <HAL_GetTick>
 8003a40:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a42:	e00a      	b.n	8003a5a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a44:	f7fe fc76 	bl	8002334 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e036      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5a:	f7ff fa62 	bl	8002f22 <LL_RCC_GetSysClkSource>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d1ec      	bne.n	8003a44 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a6a:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <HAL_RCC_ClockConfig+0x278>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d21b      	bcs.n	8003ab0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a78:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <HAL_RCC_ClockConfig+0x278>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f023 0207 	bic.w	r2, r3, #7
 8003a80:	4913      	ldr	r1, [pc, #76]	; (8003ad0 <HAL_RCC_ClockConfig+0x278>)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a88:	f7fe fc54 	bl	8002334 <HAL_GetTick>
 8003a8c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a90:	f7fe fc50 	bl	8002334 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e012      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa2:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <HAL_RCC_ClockConfig+0x278>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d1ef      	bne.n	8003a90 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003ab0:	f000 f87e 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <HAL_RCC_ClockConfig+0x27c>)
 8003ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003aba:	f7fe fc47 	bl	800234c <HAL_GetTickPrio>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fe fbe9 	bl	8002298 <HAL_InitTick>
 8003ac6:	4603      	mov	r3, r0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	58004000 	.word	0x58004000
 8003ad4:	20000010 	.word	0x20000010

08003ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad8:	b590      	push	{r4, r7, lr}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ade:	f7ff fa20 	bl	8002f22 <LL_RCC_GetSysClkSource>
 8003ae2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003aea:	f7ff f9dc 	bl	8002ea6 <LL_RCC_MSI_GetRange>
 8003aee:	4603      	mov	r3, r0
 8003af0:	091b      	lsrs	r3, r3, #4
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	4a2b      	ldr	r2, [pc, #172]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	e04b      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d102      	bne.n	8003b0c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b06:	4b28      	ldr	r3, [pc, #160]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	e045      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d10a      	bne.n	8003b28 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003b12:	f7ff f829 	bl	8002b68 <LL_RCC_HSE_IsEnabledDiv2>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d102      	bne.n	8003b22 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003b1c:	4b22      	ldr	r3, [pc, #136]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	e03a      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003b22:	4b22      	ldr	r3, [pc, #136]	; (8003bac <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	e037      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003b28:	f7ff faf7 	bl	800311a <LL_RCC_PLL_GetMainSource>
 8003b2c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d003      	beq.n	8003b3c <HAL_RCC_GetSysClockFreq+0x64>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d003      	beq.n	8003b42 <HAL_RCC_GetSysClockFreq+0x6a>
 8003b3a:	e00d      	b.n	8003b58 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003b3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b3e:	60bb      	str	r3, [r7, #8]
        break;
 8003b40:	e015      	b.n	8003b6e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003b42:	f7ff f811 	bl	8002b68 <LL_RCC_HSE_IsEnabledDiv2>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d102      	bne.n	8003b52 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003b4c:	4b16      	ldr	r3, [pc, #88]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b4e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003b50:	e00d      	b.n	8003b6e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003b52:	4b16      	ldr	r3, [pc, #88]	; (8003bac <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b54:	60bb      	str	r3, [r7, #8]
        break;
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003b58:	f7ff f9a5 	bl	8002ea6 <LL_RCC_MSI_GetRange>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	4a0f      	ldr	r2, [pc, #60]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b6a:	60bb      	str	r3, [r7, #8]
        break;
 8003b6c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003b6e:	f7ff faaf 	bl	80030d0 <LL_RCC_PLL_GetN>
 8003b72:	4602      	mov	r2, r0
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	fb03 f402 	mul.w	r4, r3, r2
 8003b7a:	f7ff fac2 	bl	8003102 <LL_RCC_PLL_GetDivider>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	3301      	adds	r3, #1
 8003b84:	fbb4 f4f3 	udiv	r4, r4, r3
 8003b88:	f7ff faaf 	bl	80030ea <LL_RCC_PLL_GetR>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	0f5b      	lsrs	r3, r3, #29
 8003b90:	3301      	adds	r3, #1
 8003b92:	fbb4 f3f3 	udiv	r3, r4, r3
 8003b96:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003b98:	68fb      	ldr	r3, [r7, #12]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd90      	pop	{r4, r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	08009d48 	.word	0x08009d48
 8003ba8:	00f42400 	.word	0x00f42400
 8003bac:	01e84800 	.word	0x01e84800

08003bb0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb0:	b598      	push	{r3, r4, r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003bb4:	f7ff ff90 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 8003bb8:	4604      	mov	r4, r0
 8003bba:	f7ff fa27 	bl	800300c <LL_RCC_GetAHBPrescaler>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	4a03      	ldr	r2, [pc, #12]	; (8003bd4 <HAL_RCC_GetHCLKFreq+0x24>)
 8003bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bcc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd98      	pop	{r3, r4, r7, pc}
 8003bd4:	08009ce8 	.word	0x08009ce8

08003bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bd8:	b598      	push	{r3, r4, r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003bdc:	f7ff ffe8 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 8003be0:	4604      	mov	r4, r0
 8003be2:	f7ff fa2d 	bl	8003040 <LL_RCC_GetAPB1Prescaler>
 8003be6:	4603      	mov	r3, r0
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	4a04      	ldr	r2, [pc, #16]	; (8003c00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf4:	f003 031f 	and.w	r3, r3, #31
 8003bf8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	bd98      	pop	{r3, r4, r7, pc}
 8003c00:	08009d28 	.word	0x08009d28

08003c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c04:	b598      	push	{r3, r4, r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003c08:	f7ff ffd2 	bl	8003bb0 <HAL_RCC_GetHCLKFreq>
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	f7ff fa23 	bl	8003058 <LL_RCC_GetAPB2Prescaler>
 8003c12:	4603      	mov	r3, r0
 8003c14:	0adb      	lsrs	r3, r3, #11
 8003c16:	f003 0307 	and.w	r3, r3, #7
 8003c1a:	4a04      	ldr	r2, [pc, #16]	; (8003c2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	bd98      	pop	{r3, r4, r7, pc}
 8003c2c:	08009d28 	.word	0x08009d28

08003c30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2bb0      	cmp	r3, #176	; 0xb0
 8003c3c:	d903      	bls.n	8003c46 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003c3e:	4b14      	ldr	r3, [pc, #80]	; (8003c90 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	e007      	b.n	8003c56 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	091b      	lsrs	r3, r3, #4
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	4a10      	ldr	r2, [pc, #64]	; (8003c90 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c54:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003c56:	f7ff f9e5 	bl	8003024 <LL_RCC_GetAHB4Prescaler>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	091b      	lsrs	r3, r3, #4
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	4a0c      	ldr	r2, [pc, #48]	; (8003c94 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	4a09      	ldr	r2, [pc, #36]	; (8003c98 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003c74:	fba2 2303 	umull	r2, r3, r2, r3
 8003c78:	0c9b      	lsrs	r3, r3, #18
 8003c7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 f80c 	bl	8003c9c <RCC_SetFlashLatency>
 8003c84:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	08009d48 	.word	0x08009d48
 8003c94:	08009ce8 	.word	0x08009ce8
 8003c98:	431bde83 	.word	0x431bde83

08003c9c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003c9c:	b590      	push	{r4, r7, lr}
 8003c9e:	b08f      	sub	sp, #60	; 0x3c
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003ca6:	4b24      	ldr	r3, [pc, #144]	; (8003d38 <RCC_SetFlashLatency+0x9c>)
 8003ca8:	f107 041c 	add.w	r4, r7, #28
 8003cac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003cb2:	4b22      	ldr	r3, [pc, #136]	; (8003d3c <RCC_SetFlashLatency+0xa0>)
 8003cb4:	f107 040c 	add.w	r4, r7, #12
 8003cb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	633b      	str	r3, [r7, #48]	; 0x30
 8003cc6:	e013      	b.n	8003cf0 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	3338      	adds	r3, #56	; 0x38
 8003cce:	443b      	add	r3, r7
 8003cd0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d807      	bhi.n	8003cea <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	3338      	adds	r3, #56	; 0x38
 8003ce0:	443b      	add	r3, r7
 8003ce2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003ce6:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8003ce8:	e005      	b.n	8003cf6 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	3301      	adds	r3, #1
 8003cee:	633b      	str	r3, [r7, #48]	; 0x30
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d9e8      	bls.n	8003cc8 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003cf6:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <RCC_SetFlashLatency+0xa4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 0207 	bic.w	r2, r3, #7
 8003cfe:	4910      	ldr	r1, [pc, #64]	; (8003d40 <RCC_SetFlashLatency+0xa4>)
 8003d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d02:	4313      	orrs	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003d06:	f7fe fb15 	bl	8002334 <HAL_GetTick>
 8003d0a:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003d0c:	e008      	b.n	8003d20 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003d0e:	f7fe fb11 	bl	8002334 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e007      	b.n	8003d30 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003d20:	4b07      	ldr	r3, [pc, #28]	; (8003d40 <RCC_SetFlashLatency+0xa4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d1ef      	bne.n	8003d0e <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	373c      	adds	r7, #60	; 0x3c
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd90      	pop	{r4, r7, pc}
 8003d38:	08009a68 	.word	0x08009a68
 8003d3c:	08009a78 	.word	0x08009a78
 8003d40:	58004000 	.word	0x58004000

08003d44 <LL_RCC_LSE_IsEnabled>:
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <LL_RCC_LSE_IsEnabled+0x18>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <LL_RCC_LSE_IsEnabled+0x1a>
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <LL_RCC_LSE_IsReady>:
{
 8003d68:	b480      	push	{r7}
 8003d6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d101      	bne.n	8003d80 <LL_RCC_LSE_IsReady+0x18>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <LL_RCC_LSE_IsReady+0x1a>
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <LL_RCC_SetRFWKPClockSource>:
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003d94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003da0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <LL_RCC_SetSMPSClockSource>:
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	f023 0203 	bic.w	r2, r3, #3
 8003dca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <LL_RCC_SetSMPSPrescaler>:
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003de8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003df2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <LL_RCC_SetUSARTClockSource>:
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e18:	f023 0203 	bic.w	r2, r3, #3
 8003e1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <LL_RCC_SetLPUARTClockSource>:
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <LL_RCC_SetI2CClockSource>:
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	091b      	lsrs	r3, r3, #4
 8003e74:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	401a      	ands	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003e84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <LL_RCC_SetLPTIMClockSource>:
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	0c1b      	lsrs	r3, r3, #16
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	401a      	ands	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	041b      	lsls	r3, r3, #16
 8003eb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <LL_RCC_SetRNGClockSource>:
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ede:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003ee2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <LL_RCC_SetCLK48ClockSource>:
{
 8003efa:	b480      	push	{r7}
 8003efc:	b083      	sub	sp, #12
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <LL_RCC_SetADCClockSource>:
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <LL_RCC_SetRTCClockSource>:
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <LL_RCC_GetRTCClockSource>:
{
 8003f7e:	b480      	push	{r7}
 8003f80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <LL_RCC_ForceBackupDomainReset>:
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fb0:	bf00      	nop
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <LL_RCC_ReleaseBackupDomainReset>:
{
 8003fba:	b480      	push	{r7}
 8003fbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003fd2:	bf00      	nop
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b088      	sub	sp, #32
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003fe8:	2300      	movs	r3, #0
 8003fea:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d046      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003ff8:	f7ff ffc1 	bl	8003f7e <LL_RCC_GetRTCClockSource>
 8003ffc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	429a      	cmp	r2, r3
 8004006:	d03c      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004008:	f7fe fd88 	bl	8002b1c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d105      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff ff9b 	bl	8003f52 <LL_RCC_SetRTCClockSource>
 800401c:	e02e      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800401e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004026:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004028:	f7ff ffb6 	bl	8003f98 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800402c:	f7ff ffc5 	bl	8003fba <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800403e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004048:	f7ff fe7c 	bl	8003d44 <LL_RCC_LSE_IsEnabled>
 800404c:	4603      	mov	r3, r0
 800404e:	2b01      	cmp	r3, #1
 8004050:	d114      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004052:	f7fe f96f 	bl	8002334 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004058:	e00b      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405a:	f7fe f96b 	bl	8002334 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	f241 3288 	movw	r2, #5000	; 0x1388
 8004068:	4293      	cmp	r3, r2
 800406a:	d902      	bls.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	77fb      	strb	r3, [r7, #31]
              break;
 8004070:	e004      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004072:	f7ff fe79 	bl	8003d68 <LL_RCC_LSE_IsReady>
 8004076:	4603      	mov	r3, r0
 8004078:	2b01      	cmp	r3, #1
 800407a:	d1ee      	bne.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800407c:	7ffb      	ldrb	r3, [r7, #31]
 800407e:	77bb      	strb	r3, [r7, #30]
 8004080:	e001      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004082:	7ffb      	ldrb	r3, [r7, #31]
 8004084:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d004      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4618      	mov	r0, r3
 8004098:	f7ff feb6 	bl	8003e08 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d004      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff fec1 	bl	8003e34 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0310 	and.w	r3, r3, #16
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d004      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff fee9 	bl	8003e9a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d004      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff fede 	bl	8003e9a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d004      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff feb6 	bl	8003e60 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d02b      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004108:	d008      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x140>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004112:	d003      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x140>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d105      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fed4 	bl	8003ece <LL_RCC_SetRNGClockSource>
 8004126:	e00a      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	2000      	movs	r0, #0
 8004134:	f7ff fecb 	bl	8003ece <LL_RCC_SetRNGClockSource>
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f7ff fede 	bl	8003efa <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004146:	d107      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004156:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004160:	2b00      	cmp	r3, #0
 8004162:	d011      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fedc 	bl	8003f26 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004176:	d107      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004186:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d004      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff fdf7 	bl	8003d8c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d009      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fe16 	bl	8003de0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fdfd 	bl	8003db8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80041be:	7fbb      	ldrb	r3, [r7, #30]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3720      	adds	r7, #32
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e090      	b.n	80042fc <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d106      	bne.n	80041f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fd fe38 	bl	8001e64 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	22ca      	movs	r2, #202	; 0xca
 8004202:	625a      	str	r2, [r3, #36]	; 0x24
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2253      	movs	r2, #83	; 0x53
 800420a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f89f 	bl	8004350 <RTC_EnterInitMode>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d009      	beq.n	800422c <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	22ff      	movs	r2, #255	; 0xff
 800421e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2204      	movs	r2, #4
 8004224:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e067      	b.n	80042fc <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6812      	ldr	r2, [r2, #0]
 8004236:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800423a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800423e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6899      	ldr	r1, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	68d2      	ldr	r2, [r2, #12]
 8004266:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6919      	ldr	r1, [r3, #16]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	041a      	lsls	r2, r3, #16
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	430a      	orrs	r2, r1
 800427a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800428a:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0202 	bic.w	r2, r2, #2
 800429a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69da      	ldr	r2, [r3, #28]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d113      	bne.n	80042ea <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 f81e 	bl	8004304 <HAL_RTC_WaitForSynchro>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00d      	beq.n	80042ea <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	22ff      	movs	r2, #255	; 0xff
 80042d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2204      	movs	r2, #4
 80042da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e008      	b.n	80042fc <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	22ff      	movs	r2, #255	; 0xff
 80042f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
  }
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800431a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800431c:	f7fe f80a 	bl	8002334 <HAL_GetTick>
 8004320:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004322:	e009      	b.n	8004338 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004324:	f7fe f806 	bl	8002334 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004332:	d901      	bls.n	8004338 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e007      	b.n	8004348 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	f003 0320 	and.w	r3, r3, #32
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0ee      	beq.n	8004324 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004362:	2b00      	cmp	r3, #0
 8004364:	d119      	bne.n	800439a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f04f 32ff 	mov.w	r2, #4294967295
 800436e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004370:	f7fd ffe0 	bl	8002334 <HAL_GetTick>
 8004374:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004376:	e009      	b.n	800438c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004378:	f7fd ffdc 	bl	8002334 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004386:	d901      	bls.n	800438c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e007      	b.n	800439c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0ee      	beq.n	8004378 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e0a8      	b.n	8004510 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2202      	movs	r2, #2
 80043ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	22ca      	movs	r2, #202	; 0xca
 80043d4:	625a      	str	r2, [r3, #36]	; 0x24
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2253      	movs	r2, #83	; 0x53
 80043dc:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d020      	beq.n	800442e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80043ec:	f7fd ffa2 	bl	8002334 <HAL_GetTick>
 80043f0:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80043f2:	e015      	b.n	8004420 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043f4:	f7fd ff9e 	bl	8002334 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004402:	d90d      	bls.n	8004420 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	22ff      	movs	r2, #255	; 0xff
 800440a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2203      	movs	r2, #3
 8004410:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e077      	b.n	8004510 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1e2      	bne.n	80043f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800443c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	b2da      	uxtb	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800444e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004450:	f7fd ff70 	bl	8002334 <HAL_GetTick>
 8004454:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004456:	e015      	b.n	8004484 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004458:	f7fd ff6c 	bl	8002334 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004466:	d90d      	bls.n	8004484 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	22ff      	movs	r2, #255	; 0xff
 800446e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2203      	movs	r2, #3
 8004474:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e045      	b.n	8004510 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0e2      	beq.n	8004458 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0207 	bic.w	r2, r2, #7
 80044a8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	6899      	ldr	r1, [r3, #8]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80044ba:	4b17      	ldr	r3, [pc, #92]	; (8004518 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80044bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044c0:	4a15      	ldr	r2, [pc, #84]	; (8004518 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80044c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80044ca:	4b13      	ldr	r3, [pc, #76]	; (8004518 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a12      	ldr	r2, [pc, #72]	; (8004518 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80044d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044d4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044e4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044f4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	22ff      	movs	r2, #255	; 0xff
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	58000800 	.word	0x58000800

0800451c <LL_RCC_GetUSARTClockSource>:
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004528:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4013      	ands	r3, r2
}
 8004530:	4618      	mov	r0, r3
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <LL_RCC_GetLPUARTClockSource>:
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004548:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4013      	ands	r3, r2
}
 8004550:	4618      	mov	r0, r3
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e042      	b.n	80045f4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fd fca3 	bl	8001ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2224      	movs	r2, #36	; 0x24
 800458a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f8c2 	bl	8004728 <UART_SetConfig>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e022      	b.n	80045f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fadc 	bl	8004b74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fb63 	bl	8004cb8 <UART_CheckIdleState>
 80045f2:	4603      	mov	r3, r0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08a      	sub	sp, #40	; 0x28
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	4613      	mov	r3, r2
 800460a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004612:	2b20      	cmp	r3, #32
 8004614:	f040 8083 	bne.w	800471e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <HAL_UART_Transmit+0x28>
 800461e:	88fb      	ldrh	r3, [r7, #6]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d101      	bne.n	8004628 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e07b      	b.n	8004720 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_UART_Transmit+0x3a>
 8004632:	2302      	movs	r3, #2
 8004634:	e074      	b.n	8004720 <HAL_UART_Transmit+0x124>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2221      	movs	r2, #33	; 0x21
 800464a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800464e:	f7fd fe71 	bl	8002334 <HAL_GetTick>
 8004652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	88fa      	ldrh	r2, [r7, #6]
 8004658:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466c:	d108      	bne.n	8004680 <HAL_UART_Transmit+0x84>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d104      	bne.n	8004680 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	61bb      	str	r3, [r7, #24]
 800467e:	e003      	b.n	8004688 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004684:	2300      	movs	r3, #0
 8004686:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004690:	e02c      	b.n	80046ec <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2200      	movs	r2, #0
 800469a:	2180      	movs	r1, #128	; 0x80
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 fb56 	bl	8004d4e <UART_WaitOnFlagUntilTimeout>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80046a8:	2303      	movs	r3, #3
 80046aa:	e039      	b.n	8004720 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10b      	bne.n	80046ca <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	3302      	adds	r3, #2
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	e007      	b.n	80046da <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	781a      	ldrb	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	3301      	adds	r3, #1
 80046d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1cc      	bne.n	8004692 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2200      	movs	r2, #0
 8004700:	2140      	movs	r1, #64	; 0x40
 8004702:	68f8      	ldr	r0, [r7, #12]
 8004704:	f000 fb23 	bl	8004d4e <UART_WaitOnFlagUntilTimeout>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d001      	beq.n	8004712 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e006      	b.n	8004720 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	e000      	b.n	8004720 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800471e:	2302      	movs	r3, #2
  }
}
 8004720:	4618      	mov	r0, r3
 8004722:	3720      	adds	r7, #32
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800472c:	b08c      	sub	sp, #48	; 0x30
 800472e:	af00      	add	r7, sp, #0
 8004730:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	689a      	ldr	r2, [r3, #8]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	431a      	orrs	r2, r3
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	431a      	orrs	r2, r3
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	4313      	orrs	r3, r2
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	4baf      	ldr	r3, [pc, #700]	; (8004a14 <UART_SetConfig+0x2ec>)
 8004758:	4013      	ands	r3, r2
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	6812      	ldr	r2, [r2, #0]
 800475e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004760:	430b      	orrs	r3, r1
 8004762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4aa4      	ldr	r2, [pc, #656]	; (8004a18 <UART_SetConfig+0x2f0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004790:	4313      	orrs	r3, r2
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800479e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	6812      	ldr	r2, [r2, #0]
 80047a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047a8:	430b      	orrs	r3, r1
 80047aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b2:	f023 010f 	bic.w	r1, r3, #15
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a95      	ldr	r2, [pc, #596]	; (8004a1c <UART_SetConfig+0x2f4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d125      	bne.n	8004818 <UART_SetConfig+0xf0>
 80047cc:	2003      	movs	r0, #3
 80047ce:	f7ff fea5 	bl	800451c <LL_RCC_GetUSARTClockSource>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d81b      	bhi.n	8004810 <UART_SetConfig+0xe8>
 80047d8:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <UART_SetConfig+0xb8>)
 80047da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047de:	bf00      	nop
 80047e0:	080047f1 	.word	0x080047f1
 80047e4:	08004801 	.word	0x08004801
 80047e8:	080047f9 	.word	0x080047f9
 80047ec:	08004809 	.word	0x08004809
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047f6:	e042      	b.n	800487e <UART_SetConfig+0x156>
 80047f8:	2302      	movs	r3, #2
 80047fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047fe:	e03e      	b.n	800487e <UART_SetConfig+0x156>
 8004800:	2304      	movs	r3, #4
 8004802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004806:	e03a      	b.n	800487e <UART_SetConfig+0x156>
 8004808:	2308      	movs	r3, #8
 800480a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800480e:	e036      	b.n	800487e <UART_SetConfig+0x156>
 8004810:	2310      	movs	r3, #16
 8004812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004816:	e032      	b.n	800487e <UART_SetConfig+0x156>
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a7e      	ldr	r2, [pc, #504]	; (8004a18 <UART_SetConfig+0x2f0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d12a      	bne.n	8004878 <UART_SetConfig+0x150>
 8004822:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004826:	f7ff fe89 	bl	800453c <LL_RCC_GetLPUARTClockSource>
 800482a:	4603      	mov	r3, r0
 800482c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004830:	d01a      	beq.n	8004868 <UART_SetConfig+0x140>
 8004832:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004836:	d81b      	bhi.n	8004870 <UART_SetConfig+0x148>
 8004838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800483c:	d00c      	beq.n	8004858 <UART_SetConfig+0x130>
 800483e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004842:	d815      	bhi.n	8004870 <UART_SetConfig+0x148>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <UART_SetConfig+0x128>
 8004848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484c:	d008      	beq.n	8004860 <UART_SetConfig+0x138>
 800484e:	e00f      	b.n	8004870 <UART_SetConfig+0x148>
 8004850:	2300      	movs	r3, #0
 8004852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004856:	e012      	b.n	800487e <UART_SetConfig+0x156>
 8004858:	2302      	movs	r3, #2
 800485a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800485e:	e00e      	b.n	800487e <UART_SetConfig+0x156>
 8004860:	2304      	movs	r3, #4
 8004862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004866:	e00a      	b.n	800487e <UART_SetConfig+0x156>
 8004868:	2308      	movs	r3, #8
 800486a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800486e:	e006      	b.n	800487e <UART_SetConfig+0x156>
 8004870:	2310      	movs	r3, #16
 8004872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004876:	e002      	b.n	800487e <UART_SetConfig+0x156>
 8004878:	2310      	movs	r3, #16
 800487a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a65      	ldr	r2, [pc, #404]	; (8004a18 <UART_SetConfig+0x2f0>)
 8004884:	4293      	cmp	r3, r2
 8004886:	f040 8097 	bne.w	80049b8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800488a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800488e:	2b08      	cmp	r3, #8
 8004890:	d823      	bhi.n	80048da <UART_SetConfig+0x1b2>
 8004892:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <UART_SetConfig+0x170>)
 8004894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004898:	080048bd 	.word	0x080048bd
 800489c:	080048db 	.word	0x080048db
 80048a0:	080048c5 	.word	0x080048c5
 80048a4:	080048db 	.word	0x080048db
 80048a8:	080048cb 	.word	0x080048cb
 80048ac:	080048db 	.word	0x080048db
 80048b0:	080048db 	.word	0x080048db
 80048b4:	080048db 	.word	0x080048db
 80048b8:	080048d3 	.word	0x080048d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048bc:	f7ff f98c 	bl	8003bd8 <HAL_RCC_GetPCLK1Freq>
 80048c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048c2:	e010      	b.n	80048e6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048c4:	4b56      	ldr	r3, [pc, #344]	; (8004a20 <UART_SetConfig+0x2f8>)
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048c8:	e00d      	b.n	80048e6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ca:	f7ff f905 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 80048ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048d0:	e009      	b.n	80048e6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048d8:	e005      	b.n	80048e6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80048da:	2300      	movs	r3, #0
 80048dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80048e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 812a 	beq.w	8004b42 <UART_SetConfig+0x41a>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	4a4c      	ldr	r2, [pc, #304]	; (8004a24 <UART_SetConfig+0x2fc>)
 80048f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048f8:	461a      	mov	r2, r3
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004900:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	4413      	add	r3, r2
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	429a      	cmp	r2, r3
 8004910:	d305      	bcc.n	800491e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	429a      	cmp	r2, r3
 800491c:	d903      	bls.n	8004926 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004924:	e10d      	b.n	8004b42 <UART_SetConfig+0x41a>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	2200      	movs	r2, #0
 800492a:	60bb      	str	r3, [r7, #8]
 800492c:	60fa      	str	r2, [r7, #12]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	4a3c      	ldr	r2, [pc, #240]	; (8004a24 <UART_SetConfig+0x2fc>)
 8004934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004938:	b29b      	uxth	r3, r3
 800493a:	2200      	movs	r2, #0
 800493c:	603b      	str	r3, [r7, #0]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004944:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004948:	f7fb fc82 	bl	8000250 <__aeabi_uldivmod>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4610      	mov	r0, r2
 8004952:	4619      	mov	r1, r3
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	020b      	lsls	r3, r1, #8
 800495e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004962:	0202      	lsls	r2, r0, #8
 8004964:	6979      	ldr	r1, [r7, #20]
 8004966:	6849      	ldr	r1, [r1, #4]
 8004968:	0849      	lsrs	r1, r1, #1
 800496a:	2000      	movs	r0, #0
 800496c:	460c      	mov	r4, r1
 800496e:	4605      	mov	r5, r0
 8004970:	eb12 0804 	adds.w	r8, r2, r4
 8004974:	eb43 0905 	adc.w	r9, r3, r5
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	469a      	mov	sl, r3
 8004980:	4693      	mov	fp, r2
 8004982:	4652      	mov	r2, sl
 8004984:	465b      	mov	r3, fp
 8004986:	4640      	mov	r0, r8
 8004988:	4649      	mov	r1, r9
 800498a:	f7fb fc61 	bl	8000250 <__aeabi_uldivmod>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4613      	mov	r3, r2
 8004994:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800499c:	d308      	bcc.n	80049b0 <UART_SetConfig+0x288>
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049a4:	d204      	bcs.n	80049b0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6a3a      	ldr	r2, [r7, #32]
 80049ac:	60da      	str	r2, [r3, #12]
 80049ae:	e0c8      	b.n	8004b42 <UART_SetConfig+0x41a>
        }
        else
        {
          ret = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80049b6:	e0c4      	b.n	8004b42 <UART_SetConfig+0x41a>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c0:	d16d      	bne.n	8004a9e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80049c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049c6:	3b01      	subs	r3, #1
 80049c8:	2b07      	cmp	r3, #7
 80049ca:	d82d      	bhi.n	8004a28 <UART_SetConfig+0x300>
 80049cc:	a201      	add	r2, pc, #4	; (adr r2, 80049d4 <UART_SetConfig+0x2ac>)
 80049ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d2:	bf00      	nop
 80049d4:	080049f5 	.word	0x080049f5
 80049d8:	080049fd 	.word	0x080049fd
 80049dc:	08004a29 	.word	0x08004a29
 80049e0:	08004a03 	.word	0x08004a03
 80049e4:	08004a29 	.word	0x08004a29
 80049e8:	08004a29 	.word	0x08004a29
 80049ec:	08004a29 	.word	0x08004a29
 80049f0:	08004a0b 	.word	0x08004a0b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049f4:	f7ff f906 	bl	8003c04 <HAL_RCC_GetPCLK2Freq>
 80049f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049fa:	e01b      	b.n	8004a34 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049fc:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <UART_SetConfig+0x2f8>)
 80049fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a00:	e018      	b.n	8004a34 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a02:	f7ff f869 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 8004a06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a08:	e014      	b.n	8004a34 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a10:	e010      	b.n	8004a34 <UART_SetConfig+0x30c>
 8004a12:	bf00      	nop
 8004a14:	cfff69f3 	.word	0xcfff69f3
 8004a18:	40008000 	.word	0x40008000
 8004a1c:	40013800 	.word	0x40013800
 8004a20:	00f42400 	.word	0x00f42400
 8004a24:	08009d88 	.word	0x08009d88
      default:
        pclk = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 8083 	beq.w	8004b42 <UART_SetConfig+0x41a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	4a4a      	ldr	r2, [pc, #296]	; (8004b6c <UART_SetConfig+0x444>)
 8004a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a46:	461a      	mov	r2, r3
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a4e:	005a      	lsls	r2, r3, #1
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	085b      	lsrs	r3, r3, #1
 8004a56:	441a      	add	r2, r3
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	2b0f      	cmp	r3, #15
 8004a66:	d916      	bls.n	8004a96 <UART_SetConfig+0x36e>
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a6e:	d212      	bcs.n	8004a96 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	f023 030f 	bic.w	r3, r3, #15
 8004a78:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	085b      	lsrs	r3, r3, #1
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	8bfb      	ldrh	r3, [r7, #30]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	8bfa      	ldrh	r2, [r7, #30]
 8004a92:	60da      	str	r2, [r3, #12]
 8004a94:	e055      	b.n	8004b42 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a9c:	e051      	b.n	8004b42 <UART_SetConfig+0x41a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	2b07      	cmp	r3, #7
 8004aa6:	d822      	bhi.n	8004aee <UART_SetConfig+0x3c6>
 8004aa8:	a201      	add	r2, pc, #4	; (adr r2, 8004ab0 <UART_SetConfig+0x388>)
 8004aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aae:	bf00      	nop
 8004ab0:	08004ad1 	.word	0x08004ad1
 8004ab4:	08004ad9 	.word	0x08004ad9
 8004ab8:	08004aef 	.word	0x08004aef
 8004abc:	08004adf 	.word	0x08004adf
 8004ac0:	08004aef 	.word	0x08004aef
 8004ac4:	08004aef 	.word	0x08004aef
 8004ac8:	08004aef 	.word	0x08004aef
 8004acc:	08004ae7 	.word	0x08004ae7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ad0:	f7ff f898 	bl	8003c04 <HAL_RCC_GetPCLK2Freq>
 8004ad4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ad6:	e010      	b.n	8004afa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad8:	4b25      	ldr	r3, [pc, #148]	; (8004b70 <UART_SetConfig+0x448>)
 8004ada:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004adc:	e00d      	b.n	8004afa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ade:	f7fe fffb 	bl	8003ad8 <HAL_RCC_GetSysClockFreq>
 8004ae2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ae4:	e009      	b.n	8004afa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004aec:	e005      	b.n	8004afa <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004af8:	bf00      	nop
    }

    if (pclk != 0U)
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d020      	beq.n	8004b42 <UART_SetConfig+0x41a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	4a19      	ldr	r2, [pc, #100]	; (8004b6c <UART_SetConfig+0x444>)
 8004b06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	085b      	lsrs	r3, r3, #1
 8004b18:	441a      	add	r2, r3
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	2b0f      	cmp	r3, #15
 8004b28:	d908      	bls.n	8004b3c <UART_SetConfig+0x414>
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b30:	d204      	bcs.n	8004b3c <UART_SetConfig+0x414>
      {
        huart->Instance->BRR = usartdiv;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6a3a      	ldr	r2, [r7, #32]
 8004b38:	60da      	str	r2, [r3, #12]
 8004b3a:	e002      	b.n	8004b42 <UART_SetConfig+0x41a>
      }
      else
      {
        ret = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2200      	movs	r2, #0
 8004b56:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004b5e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3730      	adds	r7, #48	; 0x30
 8004b66:	46bd      	mov	sp, r7
 8004b68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b6c:	08009d88 	.word	0x08009d88
 8004b70:	00f42400 	.word	0x00f42400

08004b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00a      	beq.n	8004b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00a      	beq.n	8004be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c08:	f003 0310 	and.w	r3, r3, #16
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2a:	f003 0320 	and.w	r3, r3, #32
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01a      	beq.n	8004c8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c72:	d10a      	bne.n	8004c8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	605a      	str	r2, [r3, #4]
  }
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cc8:	f7fd fb34 	bl	8002334 <HAL_GetTick>
 8004ccc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d10e      	bne.n	8004cfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f82f 	bl	8004d4e <UART_WaitOnFlagUntilTimeout>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e025      	b.n	8004d46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b04      	cmp	r3, #4
 8004d06:	d10e      	bne.n	8004d26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f819 	bl	8004d4e <UART_WaitOnFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e00f      	b.n	8004d46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b09c      	sub	sp, #112	; 0x70
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	603b      	str	r3, [r7, #0]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d5e:	e0a9      	b.n	8004eb4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d66:	f000 80a5 	beq.w	8004eb4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6a:	f7fd fae3 	bl	8002334 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d302      	bcc.n	8004d80 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d140      	bne.n	8004e02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d94:	667b      	str	r3, [r7, #100]	; 0x64
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004da0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004da4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e6      	bne.n	8004d80 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3308      	adds	r3, #8
 8004db8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	663b      	str	r3, [r7, #96]	; 0x60
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3308      	adds	r3, #8
 8004dd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004dd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004dd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dda:	e841 2300 	strex	r3, r2, [r1]
 8004dde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1e5      	bne.n	8004db2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e069      	b.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d051      	beq.n	8004eb4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e1e:	d149      	bne.n	8004eb4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e48:	637b      	str	r3, [r7, #52]	; 0x34
 8004e4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e6      	bne.n	8004e2a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3308      	adds	r3, #8
 8004e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	e853 3f00 	ldrex	r3, [r3]
 8004e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	f023 0301 	bic.w	r3, r3, #1
 8004e72:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3308      	adds	r3, #8
 8004e7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e7c:	623a      	str	r2, [r7, #32]
 8004e7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e80:	69f9      	ldr	r1, [r7, #28]
 8004e82:	6a3a      	ldr	r2, [r7, #32]
 8004e84:	e841 2300 	strex	r3, r2, [r1]
 8004e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1e5      	bne.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e010      	b.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	69da      	ldr	r2, [r3, #28]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2301      	moveq	r3, #1
 8004ec6:	2300      	movne	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	461a      	mov	r2, r3
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	f43f af46 	beq.w	8004d60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3770      	adds	r7, #112	; 0x70
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b085      	sub	sp, #20
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d101      	bne.n	8004ef4 <HAL_UARTEx_DisableFifoMode+0x16>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e027      	b.n	8004f44 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2224      	movs	r2, #36	; 0x24
 8004f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0201 	bic.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d101      	bne.n	8004f68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f64:	2302      	movs	r3, #2
 8004f66:	e02d      	b.n	8004fc4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2224      	movs	r2, #36	; 0x24
 8004f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0201 	bic.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f84f 	bl	8005048 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e02d      	b.n	8005040 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2224      	movs	r2, #36	; 0x24
 8004ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0201 	bic.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f811 	bl	8005048 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2220      	movs	r2, #32
 8005032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005054:	2b00      	cmp	r3, #0
 8005056:	d108      	bne.n	800506a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005068:	e031      	b.n	80050ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800506a:	2308      	movs	r3, #8
 800506c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800506e:	2308      	movs	r3, #8
 8005070:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	0e5b      	lsrs	r3, r3, #25
 800507a:	b2db      	uxtb	r3, r3
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	0f5b      	lsrs	r3, r3, #29
 800508a:	b2db      	uxtb	r3, r3
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005092:	7bbb      	ldrb	r3, [r7, #14]
 8005094:	7b3a      	ldrb	r2, [r7, #12]
 8005096:	4911      	ldr	r1, [pc, #68]	; (80050dc <UARTEx_SetNbDataToProcess+0x94>)
 8005098:	5c8a      	ldrb	r2, [r1, r2]
 800509a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800509e:	7b3a      	ldrb	r2, [r7, #12]
 80050a0:	490f      	ldr	r1, [pc, #60]	; (80050e0 <UARTEx_SetNbDataToProcess+0x98>)
 80050a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	7b7a      	ldrb	r2, [r7, #13]
 80050b4:	4909      	ldr	r1, [pc, #36]	; (80050dc <UARTEx_SetNbDataToProcess+0x94>)
 80050b6:	5c8a      	ldrb	r2, [r1, r2]
 80050b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80050bc:	7b7a      	ldrb	r2, [r7, #13]
 80050be:	4908      	ldr	r1, [pc, #32]	; (80050e0 <UARTEx_SetNbDataToProcess+0x98>)
 80050c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80050ce:	bf00      	nop
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	08009da0 	.word	0x08009da0
 80050e0:	08009da8 	.word	0x08009da8

080050e4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b0cc      	sub	sp, #304	; 0x130
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	4602      	mov	r2, r0
 80050ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80050f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80050f6:	f107 0310 	add.w	r3, r7, #16
 80050fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80050fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005102:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005106:	2200      	movs	r2, #0
 8005108:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800510a:	2300      	movs	r3, #0
 800510c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8005110:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005114:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005118:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800511c:	7812      	ldrb	r2, [r2, #0]
 800511e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005120:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005124:	3301      	adds	r3, #1
 8005126:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800512a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800512e:	2218      	movs	r2, #24
 8005130:	2100      	movs	r1, #0
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fef4 	bl	8005f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005138:	233f      	movs	r3, #63	; 0x3f
 800513a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800513e:	2385      	movs	r3, #133	; 0x85
 8005140:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005144:	f107 0310 	add.w	r3, r7, #16
 8005148:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800514c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005150:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005154:	f107 030f 	add.w	r3, r7, #15
 8005158:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800515c:	2301      	movs	r3, #1
 800515e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005162:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005166:	2100      	movs	r1, #0
 8005168:	4618      	mov	r0, r3
 800516a:	f001 f985 	bl	8006478 <hci_send_req>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	da01      	bge.n	8005178 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8005174:	23ff      	movs	r3, #255	; 0xff
 8005176:	e004      	b.n	8005182 <aci_gap_set_io_capability+0x9e>
  return status;
 8005178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005180:	781b      	ldrb	r3, [r3, #0]
}
 8005182:	4618      	mov	r0, r3
 8005184:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800518c:	b5b0      	push	{r4, r5, r7, lr}
 800518e:	b0cc      	sub	sp, #304	; 0x130
 8005190:	af00      	add	r7, sp, #0
 8005192:	4605      	mov	r5, r0
 8005194:	460c      	mov	r4, r1
 8005196:	4610      	mov	r0, r2
 8005198:	4619      	mov	r1, r3
 800519a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80051a2:	462a      	mov	r2, r5
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051aa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80051ae:	4622      	mov	r2, r4
 80051b0:	701a      	strb	r2, [r3, #0]
 80051b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80051ba:	4602      	mov	r2, r0
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051c6:	460a      	mov	r2, r1
 80051c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80051ca:	f107 0310 	add.w	r3, r7, #16
 80051ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80051d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80051da:	2200      	movs	r2, #0
 80051dc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80051de:	2300      	movs	r3, #0
 80051e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80051e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051ec:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80051f0:	7812      	ldrb	r2, [r2, #0]
 80051f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80051f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80051f8:	3301      	adds	r3, #1
 80051fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80051fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005202:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005206:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800520a:	7812      	ldrb	r2, [r2, #0]
 800520c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800520e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005212:	3301      	adds	r3, #1
 8005214:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8005218:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800521c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005220:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8005224:	7812      	ldrb	r2, [r2, #0]
 8005226:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005228:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800522c:	3301      	adds	r3, #1
 800522e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8005232:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005236:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800523a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800523e:	7812      	ldrb	r2, [r2, #0]
 8005240:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8005242:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005246:	3301      	adds	r3, #1
 8005248:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800524c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005250:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8005254:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005256:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800525a:	3301      	adds	r3, #1
 800525c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8005260:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005264:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8005268:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800526a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800526e:	3301      	adds	r3, #1
 8005270:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8005274:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005278:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800527c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800527e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005282:	3301      	adds	r3, #1
 8005284:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8005288:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800528c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005290:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005294:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005298:	3304      	adds	r3, #4
 800529a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800529e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80052a6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80052a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052ac:	3301      	adds	r3, #1
 80052ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80052b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052b6:	2218      	movs	r2, #24
 80052b8:	2100      	movs	r1, #0
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fe30 	bl	8005f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 80052c0:	233f      	movs	r3, #63	; 0x3f
 80052c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80052c6:	2386      	movs	r3, #134	; 0x86
 80052c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80052cc:	f107 0310 	add.w	r3, r7, #16
 80052d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80052d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80052dc:	f107 030f 	add.w	r3, r7, #15
 80052e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80052e4:	2301      	movs	r3, #1
 80052e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80052ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052ee:	2100      	movs	r1, #0
 80052f0:	4618      	mov	r0, r3
 80052f2:	f001 f8c1 	bl	8006478 <hci_send_req>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	da01      	bge.n	8005300 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80052fc:	23ff      	movs	r3, #255	; 0xff
 80052fe:	e004      	b.n	800530a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8005300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005304:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005308:	781b      	ldrb	r3, [r3, #0]
}
 800530a:	4618      	mov	r0, r3
 800530c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005310:	46bd      	mov	sp, r7
 8005312:	bdb0      	pop	{r4, r5, r7, pc}

08005314 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8005314:	b590      	push	{r4, r7, lr}
 8005316:	b0cd      	sub	sp, #308	; 0x134
 8005318:	af00      	add	r7, sp, #0
 800531a:	4604      	mov	r4, r0
 800531c:	4608      	mov	r0, r1
 800531e:	4611      	mov	r1, r2
 8005320:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005324:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800532e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005332:	4622      	mov	r2, r4
 8005334:	701a      	strb	r2, [r3, #0]
 8005336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800533a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800533e:	4602      	mov	r2, r0
 8005340:	701a      	strb	r2, [r3, #0]
 8005342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005346:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800534a:	460a      	mov	r2, r1
 800534c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800534e:	f107 0310 	add.w	r3, r7, #16
 8005352:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005356:	f107 0308 	add.w	r3, r7, #8
 800535a:	2207      	movs	r2, #7
 800535c:	2100      	movs	r1, #0
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fdde 	bl	8005f20 <Osal_MemSet>
  int index_input = 0;
 8005364:	2300      	movs	r3, #0
 8005366:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800536a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800536e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005372:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005376:	7812      	ldrb	r2, [r2, #0]
 8005378:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800537a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800537e:	3301      	adds	r3, #1
 8005380:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8005384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005388:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800538c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005390:	7812      	ldrb	r2, [r2, #0]
 8005392:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005394:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005398:	3301      	adds	r3, #1
 800539a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800539e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053a6:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80053aa:	7812      	ldrb	r2, [r2, #0]
 80053ac:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80053ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80053b2:	3301      	adds	r3, #1
 80053b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80053b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80053bc:	2218      	movs	r2, #24
 80053be:	2100      	movs	r1, #0
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fdad 	bl	8005f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 80053c6:	233f      	movs	r3, #63	; 0x3f
 80053c8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80053cc:	238a      	movs	r3, #138	; 0x8a
 80053ce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80053d2:	f107 0310 	add.w	r3, r7, #16
 80053d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80053da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80053de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80053e2:	f107 0308 	add.w	r3, r7, #8
 80053e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80053ea:	2307      	movs	r3, #7
 80053ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80053f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80053f4:	2100      	movs	r1, #0
 80053f6:	4618      	mov	r0, r3
 80053f8:	f001 f83e 	bl	8006478 <hci_send_req>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	da01      	bge.n	8005406 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8005402:	23ff      	movs	r3, #255	; 0xff
 8005404:	e02e      	b.n	8005464 <aci_gap_init+0x150>
  if ( resp.Status )
 8005406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800540a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <aci_gap_init+0x10c>
    return resp.Status;
 8005414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005418:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	e021      	b.n	8005464 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8005420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005424:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005428:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800542c:	b29a      	uxth	r2, r3
 800542e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800543a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005442:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8005446:	b29a      	uxth	r2, r3
 8005448:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800544c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800544e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005452:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005456:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800545a:	b29a      	uxth	r2, r3
 800545c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8005460:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800546a:	46bd      	mov	sp, r7
 800546c:	bd90      	pop	{r4, r7, pc}

0800546e <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b088      	sub	sp, #32
 8005472:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005478:	f107 0308 	add.w	r3, r7, #8
 800547c:	2218      	movs	r2, #24
 800547e:	2100      	movs	r1, #0
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fd4d 	bl	8005f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005486:	233f      	movs	r3, #63	; 0x3f
 8005488:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800548a:	2392      	movs	r3, #146	; 0x92
 800548c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800548e:	1dfb      	adds	r3, r7, #7
 8005490:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005492:	2301      	movs	r3, #1
 8005494:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005496:	f107 0308 	add.w	r3, r7, #8
 800549a:	2100      	movs	r1, #0
 800549c:	4618      	mov	r0, r3
 800549e:	f000 ffeb 	bl	8006478 <hci_send_req>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	da01      	bge.n	80054ac <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 80054a8:	23ff      	movs	r3, #255	; 0xff
 80054aa:	e000      	b.n	80054ae <aci_gap_configure_whitelist+0x40>
  return status;
 80054ac:	79fb      	ldrb	r3, [r7, #7]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3720      	adds	r7, #32
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <aci_gap_create_connection>:
                                      uint16_t Conn_Interval_Max,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint16_t Minimum_CE_Length,
                                      uint16_t Maximum_CE_Length )
{
 80054b6:	b590      	push	{r4, r7, lr}
 80054b8:	b0cf      	sub	sp, #316	; 0x13c
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	4604      	mov	r4, r0
 80054be:	4608      	mov	r0, r1
 80054c0:	4611      	mov	r1, r2
 80054c2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80054c6:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80054d0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80054d4:	4622      	mov	r2, r4
 80054d6:	801a      	strh	r2, [r3, #0]
 80054d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80054dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054e0:	4602      	mov	r2, r0
 80054e2:	801a      	strh	r2, [r3, #0]
 80054e4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80054e8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80054ec:	460a      	mov	r2, r1
 80054ee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 80054f0:	f107 0318 	add.w	r3, r7, #24
 80054f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 80054f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80054fc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 800550a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800550e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005512:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005516:	8812      	ldrh	r2, [r2, #0]
 8005518:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800551a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800551e:	3302      	adds	r3, #2
 8005520:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = LE_Scan_Window;
 8005524:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005528:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800552c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005530:	8812      	ldrh	r2, [r2, #0]
 8005532:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005534:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005538:	3302      	adds	r3, #2
 800553a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = Peer_Address_Type;
 800553e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005542:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8005546:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800554a:	7812      	ldrb	r2, [r2, #0]
 800554c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800554e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005552:	3301      	adds	r3, #1
 8005554:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Peer_Address, (const void*)Peer_Address, 6 );
 8005558:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800555c:	1d58      	adds	r0, r3, #5
 800555e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005562:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005566:	2206      	movs	r2, #6
 8005568:	6819      	ldr	r1, [r3, #0]
 800556a:	f000 fcc9 	bl	8005f00 <Osal_MemCpy>
  index_input += 6;
 800556e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005572:	3306      	adds	r3, #6
 8005574:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = Own_Address_Type;
 8005578:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800557c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8005580:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005582:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005586:	3301      	adds	r3, #1
 8005588:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800558c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005590:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8005594:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8005596:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800559a:	3302      	adds	r3, #2
 800559c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 80055a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055a4:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 80055a8:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 80055aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055ae:	3302      	adds	r3, #2
 80055b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = Conn_Latency;
 80055b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055b8:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 80055bc:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 80055be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055c2:	3302      	adds	r3, #2
 80055c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = Supervision_Timeout;
 80055c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055cc:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 80055d0:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 80055d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055d6:	3302      	adds	r3, #2
 80055d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 80055dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055e0:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 80055e4:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 80055e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055ea:	3302      	adds	r3, #2
 80055ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 80055f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80055f4:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80055f8:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 80055fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80055fe:	3302      	adds	r3, #2
 8005600:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005604:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005608:	2218      	movs	r2, #24
 800560a:	2100      	movs	r1, #0
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fc87 	bl	8005f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005612:	233f      	movs	r3, #63	; 0x3f
 8005614:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 8005618:	239c      	movs	r3, #156	; 0x9c
 800561a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800561e:	230f      	movs	r3, #15
 8005620:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 8005624:	f107 0318 	add.w	r3, r7, #24
 8005628:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800562c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005630:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 8005634:	f107 0317 	add.w	r3, r7, #23
 8005638:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800563c:	2301      	movs	r3, #1
 800563e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005642:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005646:	2100      	movs	r1, #0
 8005648:	4618      	mov	r0, r3
 800564a:	f000 ff15 	bl	8006478 <hci_send_req>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	da01      	bge.n	8005658 <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 8005654:	23ff      	movs	r3, #255	; 0xff
 8005656:	e004      	b.n	8005662 <aci_gap_create_connection+0x1ac>
  return status;
 8005658:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800565c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005660:	781b      	ldrb	r3, [r3, #0]
}
 8005662:	4618      	mov	r0, r3
 8005664:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005668:	46bd      	mov	sp, r7
 800566a:	bd90      	pop	{r4, r7, pc}

0800566c <aci_gap_terminate_gap_proc>:

tBleStatus aci_gap_terminate_gap_proc( uint8_t Procedure_Code )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b0cc      	sub	sp, #304	; 0x130
 8005670:	af00      	add	r7, sp, #0
 8005672:	4602      	mov	r2, r0
 8005674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005678:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800567c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 800567e:	f107 0310 	add.w	r3, r7, #16
 8005682:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800568a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800568e:	2200      	movs	r2, #0
 8005690:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005692:	2300      	movs	r3, #0
 8005694:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Procedure_Code = Procedure_Code;
 8005698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800569c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056a0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80056a4:	7812      	ldrb	r2, [r2, #0]
 80056a6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80056a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056ac:	3301      	adds	r3, #1
 80056ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80056b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056b6:	2218      	movs	r2, #24
 80056b8:	2100      	movs	r1, #0
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fc30 	bl	8005f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 80056c0:	233f      	movs	r3, #63	; 0x3f
 80056c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 80056c6:	239d      	movs	r3, #157	; 0x9d
 80056c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80056cc:	f107 0310 	add.w	r3, r7, #16
 80056d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80056d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80056dc:	f107 030f 	add.w	r3, r7, #15
 80056e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80056e4:	2301      	movs	r3, #1
 80056e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80056ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80056ee:	2100      	movs	r1, #0
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fec1 	bl	8006478 <hci_send_req>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	da01      	bge.n	8005700 <aci_gap_terminate_gap_proc+0x94>
    return BLE_STATUS_TIMEOUT;
 80056fc:	23ff      	movs	r3, #255	; 0xff
 80056fe:	e004      	b.n	800570a <aci_gap_terminate_gap_proc+0x9e>
  return status;
 8005700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005704:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005708:	781b      	ldrb	r3, [r3, #0]
}
 800570a:	4618      	mov	r0, r3
 800570c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <aci_gap_start_observation_proc>:
                                           uint16_t LE_Scan_Window,
                                           uint8_t LE_Scan_Type,
                                           uint8_t Own_Address_Type,
                                           uint8_t Filter_Duplicates,
                                           uint8_t Scanning_Filter_Policy )
{
 8005714:	b5b0      	push	{r4, r5, r7, lr}
 8005716:	b0cc      	sub	sp, #304	; 0x130
 8005718:	af00      	add	r7, sp, #0
 800571a:	4605      	mov	r5, r0
 800571c:	460c      	mov	r4, r1
 800571e:	4610      	mov	r0, r2
 8005720:	4619      	mov	r1, r3
 8005722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005726:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800572a:	462a      	mov	r2, r5
 800572c:	801a      	strh	r2, [r3, #0]
 800572e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005732:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005736:	4622      	mov	r2, r4
 8005738:	801a      	strh	r2, [r3, #0]
 800573a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800573e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8005742:	4602      	mov	r2, r0
 8005744:	701a      	strb	r2, [r3, #0]
 8005746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800574e:	460a      	mov	r2, r1
 8005750:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_observation_proc_cp0 *cp0 = (aci_gap_start_observation_proc_cp0*)(cmd_buffer);
 8005752:	f107 0310 	add.w	r3, r7, #16
 8005756:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800575a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800575e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005762:	2200      	movs	r2, #0
 8005764:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 800576c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005770:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005774:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005778:	8812      	ldrh	r2, [r2, #0]
 800577a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800577c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005780:	3302      	adds	r3, #2
 8005782:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 8005786:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800578a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800578e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005792:	8812      	ldrh	r2, [r2, #0]
 8005794:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005796:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800579a:	3302      	adds	r3, #2
 800579c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Type = LE_Scan_Type;
 80057a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80057a8:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80057ac:	7812      	ldrb	r2, [r2, #0]
 80057ae:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80057b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057b4:	3301      	adds	r3, #1
 80057b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80057ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80057c2:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80057c6:	7812      	ldrb	r2, [r2, #0]
 80057c8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80057ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057ce:	3301      	adds	r3, #1
 80057d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 80057d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d8:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80057dc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80057de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057e2:	3301      	adds	r3, #1
 80057e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scanning_Filter_Policy = Scanning_Filter_Policy;
 80057e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ec:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80057f0:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80057f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057f6:	3301      	adds	r3, #1
 80057f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80057fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005800:	2218      	movs	r2, #24
 8005802:	2100      	movs	r1, #0
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fb8b 	bl	8005f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 800580a:	233f      	movs	r3, #63	; 0x3f
 800580c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a2;
 8005810:	23a2      	movs	r3, #162	; 0xa2
 8005812:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8005816:	230f      	movs	r3, #15
 8005818:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800581c:	f107 0310 	add.w	r3, r7, #16
 8005820:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005824:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005828:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800582c:	f107 030f 	add.w	r3, r7, #15
 8005830:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005834:	2301      	movs	r3, #1
 8005836:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800583a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800583e:	2100      	movs	r1, #0
 8005840:	4618      	mov	r0, r3
 8005842:	f000 fe19 	bl	8006478 <hci_send_req>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	da01      	bge.n	8005850 <aci_gap_start_observation_proc+0x13c>
    return BLE_STATUS_TIMEOUT;
 800584c:	23ff      	movs	r3, #255	; 0xff
 800584e:	e004      	b.n	800585a <aci_gap_start_observation_proc+0x146>
  return status;
 8005850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005854:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005858:	781b      	ldrb	r3, [r3, #0]
}
 800585a:	4618      	mov	r0, r3
 800585c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005860:	46bd      	mov	sp, r7
 8005862:	bdb0      	pop	{r4, r5, r7, pc}

08005864 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800586e:	f107 0308 	add.w	r3, r7, #8
 8005872:	2218      	movs	r2, #24
 8005874:	2100      	movs	r1, #0
 8005876:	4618      	mov	r0, r3
 8005878:	f000 fb52 	bl	8005f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 800587c:	233f      	movs	r3, #63	; 0x3f
 800587e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005880:	f240 1301 	movw	r3, #257	; 0x101
 8005884:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005886:	1dfb      	adds	r3, r7, #7
 8005888:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800588a:	2301      	movs	r3, #1
 800588c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800588e:	f107 0308 	add.w	r3, r7, #8
 8005892:	2100      	movs	r1, #0
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fdef 	bl	8006478 <hci_send_req>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	da01      	bge.n	80058a4 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80058a0:	23ff      	movs	r3, #255	; 0xff
 80058a2:	e000      	b.n	80058a6 <aci_gatt_init+0x42>
  return status;
 80058a4:	79fb      	ldrb	r3, [r7, #7]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3720      	adds	r7, #32
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80058ae:	b5b0      	push	{r4, r5, r7, lr}
 80058b0:	b0cc      	sub	sp, #304	; 0x130
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	4605      	mov	r5, r0
 80058b6:	460c      	mov	r4, r1
 80058b8:	4610      	mov	r0, r2
 80058ba:	4619      	mov	r1, r3
 80058bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80058c4:	462a      	mov	r2, r5
 80058c6:	801a      	strh	r2, [r3, #0]
 80058c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058d0:	4622      	mov	r2, r4
 80058d2:	801a      	strh	r2, [r3, #0]
 80058d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80058dc:	4602      	mov	r2, r0
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80058e8:	460a      	mov	r2, r1
 80058ea:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80058ec:	f107 0310 	add.w	r3, r7, #16
 80058f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80058f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80058fc:	2200      	movs	r2, #0
 80058fe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005900:	2300      	movs	r3, #0
 8005902:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8005906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800590a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800590e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005912:	8812      	ldrh	r2, [r2, #0]
 8005914:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005916:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800591a:	3302      	adds	r3, #2
 800591c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8005920:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005924:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005928:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800592c:	8812      	ldrh	r2, [r2, #0]
 800592e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005930:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005934:	3302      	adds	r3, #2
 8005936:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800593a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005942:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8005946:	7812      	ldrb	r2, [r2, #0]
 8005948:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800594a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800594e:	3301      	adds	r3, #1
 8005950:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8005954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005958:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800595c:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8005960:	7812      	ldrb	r2, [r2, #0]
 8005962:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005964:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005968:	3301      	adds	r3, #1
 800596a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800596e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005972:	1d98      	adds	r0, r3, #6
 8005974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005978:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005984:	f000 fabc 	bl	8005f00 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8005988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005996:	4413      	add	r3, r2
 8005998:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800599c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059a0:	2218      	movs	r2, #24
 80059a2:	2100      	movs	r1, #0
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fabb 	bl	8005f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 80059aa:	233f      	movs	r3, #63	; 0x3f
 80059ac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80059b0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80059b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80059b8:	f107 0310 	add.w	r3, r7, #16
 80059bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80059c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80059c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80059c8:	f107 030f 	add.w	r3, r7, #15
 80059cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80059d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80059da:	2100      	movs	r1, #0
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fd4b 	bl	8006478 <hci_send_req>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	da01      	bge.n	80059ec <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80059e8:	23ff      	movs	r3, #255	; 0xff
 80059ea:	e004      	b.n	80059f6 <aci_gatt_update_char_value+0x148>
  return status;
 80059ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80059f4:	781b      	ldrb	r3, [r3, #0]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bdb0      	pop	{r4, r5, r7, pc}

08005a00 <aci_gatt_disc_all_primary_services>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_disc_all_primary_services( uint16_t Connection_Handle )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b0cc      	sub	sp, #304	; 0x130
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4602      	mov	r2, r0
 8005a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a0c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005a10:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 8005a12:	f107 0310 	add.w	r3, r7, #16
 8005a16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a1e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005a22:	2200      	movs	r2, #0
 8005a24:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005a26:	2300      	movs	r3, #0
 8005a28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a30:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a34:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005a38:	8812      	ldrh	r2, [r2, #0]
 8005a3a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005a3c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a40:	3302      	adds	r3, #2
 8005a42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005a46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a4a:	2218      	movs	r2, #24
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fa66 	bl	8005f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005a54:	233f      	movs	r3, #63	; 0x3f
 8005a56:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 8005a5a:	f44f 7389 	mov.w	r3, #274	; 0x112
 8005a5e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8005a62:	230f      	movs	r3, #15
 8005a64:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8005a68:	f107 0310 	add.w	r3, r7, #16
 8005a6c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005a70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a74:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005a78:	f107 030f 	add.w	r3, r7, #15
 8005a7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005a80:	2301      	movs	r3, #1
 8005a82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005a86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fcf3 	bl	8006478 <hci_send_req>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	da01      	bge.n	8005a9c <aci_gatt_disc_all_primary_services+0x9c>
    return BLE_STATUS_TIMEOUT;
 8005a98:	23ff      	movs	r3, #255	; 0xff
 8005a9a:	e004      	b.n	8005aa6 <aci_gatt_disc_all_primary_services+0xa6>
  return status;
 8005a9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005aa4:	781b      	ldrb	r3, [r3, #0]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b0cc      	sub	sp, #304	; 0x130
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005abe:	601a      	str	r2, [r3, #0]
 8005ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005ac8:	4602      	mov	r2, r0
 8005aca:	701a      	strb	r2, [r3, #0]
 8005acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005ad4:	460a      	mov	r2, r1
 8005ad6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8005ad8:	f107 0310 	add.w	r3, r7, #16
 8005adc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005ae8:	2200      	movs	r2, #0
 8005aea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8005af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005afa:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005afe:	7812      	ldrb	r2, [r2, #0]
 8005b00:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005b02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b06:	3301      	adds	r3, #1
 8005b08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8005b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b10:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005b14:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005b18:	7812      	ldrb	r2, [r2, #0]
 8005b1a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005b1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b20:	3301      	adds	r3, #1
 8005b22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8005b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b2a:	1c98      	adds	r0, r3, #2
 8005b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b30:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005b34:	781a      	ldrb	r2, [r3, #0]
 8005b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b3e:	6819      	ldr	r1, [r3, #0]
 8005b40:	f000 f9de 	bl	8005f00 <Osal_MemCpy>
  index_input += Length;
 8005b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b48:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005b52:	4413      	add	r3, r2
 8005b54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005b58:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b5c:	2218      	movs	r2, #24
 8005b5e:	2100      	movs	r1, #0
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 f9dd 	bl	8005f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b66:	233f      	movs	r3, #63	; 0x3f
 8005b68:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8005b6c:	230c      	movs	r3, #12
 8005b6e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005b72:	f107 0310 	add.w	r3, r7, #16
 8005b76:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005b7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005b82:	f107 030f 	add.w	r3, r7, #15
 8005b86:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005b90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005b94:	2100      	movs	r1, #0
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fc6e 	bl	8006478 <hci_send_req>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	da01      	bge.n	8005ba6 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8005ba2:	23ff      	movs	r3, #255	; 0xff
 8005ba4:	e004      	b.n	8005bb0 <aci_hal_write_config_data+0x100>
  return status;
 8005ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005baa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005bae:	781b      	ldrb	r3, [r3, #0]
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b0cc      	sub	sp, #304	; 0x130
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005bca:	701a      	strb	r2, [r3, #0]
 8005bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005bd4:	460a      	mov	r2, r1
 8005bd6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8005bd8:	f107 0310 	add.w	r3, r7, #16
 8005bdc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005be0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005be8:	2200      	movs	r2, #0
 8005bea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005bec:	2300      	movs	r3, #0
 8005bee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8005bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005bfa:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005bfe:	7812      	ldrb	r2, [r2, #0]
 8005c00:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005c02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c06:	3301      	adds	r3, #1
 8005c08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8005c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c10:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005c14:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005c18:	7812      	ldrb	r2, [r2, #0]
 8005c1a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005c1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c20:	3301      	adds	r3, #1
 8005c22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005c26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c2a:	2218      	movs	r2, #24
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 f976 	bl	8005f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005c34:	233f      	movs	r3, #63	; 0x3f
 8005c36:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8005c3a:	230f      	movs	r3, #15
 8005c3c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005c40:	f107 0310 	add.w	r3, r7, #16
 8005c44:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005c48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005c50:	f107 030f 	add.w	r3, r7, #15
 8005c54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005c5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005c62:	2100      	movs	r1, #0
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fc07 	bl	8006478 <hci_send_req>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	da01      	bge.n	8005c74 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8005c70:	23ff      	movs	r3, #255	; 0xff
 8005c72:	e004      	b.n	8005c7e <aci_hal_set_tx_power_level+0xc4>
  return status;
 8005c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c78:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005c7c:	781b      	ldrb	r3, [r3, #0]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b0cc      	sub	sp, #304	; 0x130
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	4602      	mov	r2, r0
 8005c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c94:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005c98:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8005c9a:	f107 0310 	add.w	r3, r7, #16
 8005c9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005caa:	2200      	movs	r2, #0
 8005cac:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8005cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005cbc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005cc0:	8812      	ldrh	r2, [r2, #0]
 8005cc2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005cc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cc8:	3302      	adds	r3, #2
 8005cca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005cce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005cd2:	2218      	movs	r2, #24
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 f922 	bl	8005f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005cdc:	233f      	movs	r3, #63	; 0x3f
 8005cde:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8005ce2:	2318      	movs	r3, #24
 8005ce4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005ce8:	f107 0310 	add.w	r3, r7, #16
 8005cec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005cf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005cf4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005cf8:	f107 030f 	add.w	r3, r7, #15
 8005cfc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005d00:	2301      	movs	r3, #1
 8005d02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005d06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 fbb3 	bl	8006478 <hci_send_req>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	da01      	bge.n	8005d1c <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8005d18:	23ff      	movs	r3, #255	; 0xff
 8005d1a:	e004      	b.n	8005d26 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8005d1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d20:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005d24:	781b      	ldrb	r3, [r3, #0]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005d3a:	f107 0308 	add.w	r3, r7, #8
 8005d3e:	2218      	movs	r2, #24
 8005d40:	2100      	movs	r1, #0
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 f8ec 	bl	8005f20 <Osal_MemSet>
  rq.ogf = 0x03;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005d50:	1dfb      	adds	r3, r7, #7
 8005d52:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005d54:	2301      	movs	r3, #1
 8005d56:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005d58:	f107 0308 	add.w	r3, r7, #8
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fb8a 	bl	8006478 <hci_send_req>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	da01      	bge.n	8005d6e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005d6a:	23ff      	movs	r3, #255	; 0xff
 8005d6c:	e000      	b.n	8005d70 <hci_reset+0x40>
  return status;
 8005d6e:	79fb      	ldrb	r3, [r7, #7]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3720      	adds	r7, #32
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <aci_l2cap_connection_parameter_update_resp>:
                                                       uint16_t Timeout_Multiplier,
                                                       uint16_t Minimum_CE_Length,
                                                       uint16_t Maximum_CE_Length,
                                                       uint8_t Identifier,
                                                       uint8_t Accept )
{
 8005d78:	b5b0      	push	{r4, r5, r7, lr}
 8005d7a:	b0cc      	sub	sp, #304	; 0x130
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4605      	mov	r5, r0
 8005d80:	460c      	mov	r4, r1
 8005d82:	4610      	mov	r0, r2
 8005d84:	4619      	mov	r1, r3
 8005d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005d8e:	462a      	mov	r2, r5
 8005d90:	801a      	strh	r2, [r3, #0]
 8005d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d9a:	4622      	mov	r2, r4
 8005d9c:	801a      	strh	r2, [r3, #0]
 8005d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8005da6:	4602      	mov	r2, r0
 8005da8:	801a      	strh	r2, [r3, #0]
 8005daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005db2:	460a      	mov	r2, r1
 8005db4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
 8005db6:	f107 0310 	add.w	r3, r7, #16
 8005dba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005dd8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8005ddc:	8812      	ldrh	r2, [r2, #0]
 8005dde:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005de0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005de4:	3302      	adds	r3, #2
 8005de6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8005dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005df2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005df6:	8812      	ldrh	r2, [r2, #0]
 8005df8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005dfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005dfe:	3302      	adds	r3, #2
 8005e00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8005e04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e0c:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8005e10:	8812      	ldrh	r2, [r2, #0]
 8005e12:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8005e14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e18:	3302      	adds	r3, #2
 8005e1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 8005e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005e26:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8005e2a:	8812      	ldrh	r2, [r2, #0]
 8005e2c:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8005e2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e32:	3302      	adds	r3, #2
 8005e34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8005e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e3c:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8005e40:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8005e42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e46:	3302      	adds	r3, #2
 8005e48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 8005e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e50:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 8005e54:	815a      	strh	r2, [r3, #10]
  index_input += 2;
 8005e56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e5a:	3302      	adds	r3, #2
 8005e5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 8005e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e64:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 8005e68:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 8005e6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e6e:	3302      	adds	r3, #2
 8005e70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identifier = Identifier;
 8005e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e78:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8005e7c:	739a      	strb	r2, [r3, #14]
  index_input += 1;
 8005e7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e82:	3301      	adds	r3, #1
 8005e84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Accept = Accept;
 8005e88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e8c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8005e90:	73da      	strb	r2, [r3, #15]
  index_input += 1;
 8005e92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005e96:	3301      	adds	r3, #1
 8005e98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005e9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ea0:	2218      	movs	r2, #24
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 f83b 	bl	8005f20 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005eaa:	233f      	movs	r3, #63	; 0x3f
 8005eac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x182;
 8005eb0:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8005eb4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005eb8:	f107 0310 	add.w	r3, r7, #16
 8005ebc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005ec0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005ec4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005ec8:	f107 030f 	add.w	r3, r7, #15
 8005ecc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005ed6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005eda:	2100      	movs	r1, #0
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 facb 	bl	8006478 <hci_send_req>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	da01      	bge.n	8005eec <aci_l2cap_connection_parameter_update_resp+0x174>
    return BLE_STATUS_TIMEOUT;
 8005ee8:	23ff      	movs	r3, #255	; 0xff
 8005eea:	e004      	b.n	8005ef6 <aci_l2cap_connection_parameter_update_resp+0x17e>
  return status;
 8005eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005ef4:	781b      	ldrb	r3, [r3, #0]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bdb0      	pop	{r4, r5, r7, pc}

08005f00 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	68b9      	ldr	r1, [r7, #8]
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f002 fe26 	bl	8008b62 <memcpy>
 8005f16:	4603      	mov	r3, r0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	68b9      	ldr	r1, [r7, #8]
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f002 fd8c 	bl	8008a4e <memset>
 8005f36:	4603      	mov	r3, r0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
  return;
 8005f44:	bf00      	nop
}
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr

08005f4e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8005f4e:	b480      	push	{r7}
 8005f50:	af00      	add	r7, sp, #0
  return;
 8005f52:	bf00      	nop
}
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
  return;
 8005f60:	bf00      	nop
}
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	af00      	add	r7, sp, #0
  return;
 8005f6e:	bf00      	nop
}
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	af00      	add	r7, sp, #0
  return;
 8005f7c:	bf00      	nop
}
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8005f86:	b480      	push	{r7}
 8005f88:	af00      	add	r7, sp, #0
  return;
 8005f8a:	bf00      	nop
}
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8005f94:	b480      	push	{r7}
 8005f96:	af00      	add	r7, sp, #0
  return;
 8005f98:	bf00      	nop
}
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	af00      	add	r7, sp, #0
  return;
 8005fa6:	bf00      	nop
}
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
  return;
 8005fb4:	bf00      	nop
}
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	af00      	add	r7, sp, #0
  return;
 8005fc2:	bf00      	nop
}
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8005fcc:	b480      	push	{r7}
 8005fce:	af00      	add	r7, sp, #0
  return;
 8005fd0:	bf00      	nop
}
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8005fda:	b480      	push	{r7}
 8005fdc:	af00      	add	r7, sp, #0
  return;
 8005fde:	bf00      	nop
}
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
  return;
 8005fec:	bf00      	nop
}
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	af00      	add	r7, sp, #0
  return;
 8005ffa:	bf00      	nop
}
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  return;
 8006008:	bf00      	nop
}
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8006012:	b480      	push	{r7}
 8006014:	af00      	add	r7, sp, #0
  return;
 8006016:	bf00      	nop
}
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8006020:	b480      	push	{r7}
 8006022:	af00      	add	r7, sp, #0
  return;
 8006024:	bf00      	nop
}
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800602e:	b480      	push	{r7}
 8006030:	af00      	add	r7, sp, #0
  return;
 8006032:	bf00      	nop
}
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8006040:	4b04      	ldr	r3, [pc, #16]	; (8006054 <SVCCTL_Init+0x18>)
 8006042:	2200      	movs	r2, #0
 8006044:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8006046:	4b04      	ldr	r3, [pc, #16]	; (8006058 <SVCCTL_Init+0x1c>)
 8006048:	2200      	movs	r2, #0
 800604a:	711a      	strb	r2, [r3, #4]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800604c:	f000 f806 	bl	800605c <SVCCTL_SvcInit>

  return;
 8006050:	bf00      	nop
}
 8006052:	bd80      	pop	{r7, pc}
 8006054:	2000011c 	.word	0x2000011c
 8006058:	2000013c 	.word	0x2000013c

0800605c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  BAS_Init();
 8006060:	f7ff ff6e 	bl	8005f40 <BAS_Init>

  BLS_Init();
 8006064:	f7ff ff73 	bl	8005f4e <BLS_Init>

  CRS_STM_Init();
 8006068:	f7ff ff78 	bl	8005f5c <CRS_STM_Init>

  DIS_Init();
 800606c:	f7ff ff7d 	bl	8005f6a <DIS_Init>

  EDS_STM_Init();
 8006070:	f7ff ff82 	bl	8005f78 <EDS_STM_Init>

  HIDS_Init();
 8006074:	f7ff ff87 	bl	8005f86 <HIDS_Init>

  HRS_Init();
 8006078:	f7ff ff8c 	bl	8005f94 <HRS_Init>

  HTS_Init();
 800607c:	f7ff ff91 	bl	8005fa2 <HTS_Init>

  IAS_Init();
 8006080:	f7ff ff96 	bl	8005fb0 <IAS_Init>

  LLS_Init();
 8006084:	f7ff ff9b 	bl	8005fbe <LLS_Init>

  TPS_Init();
 8006088:	f7ff ffa0 	bl	8005fcc <TPS_Init>

  MOTENV_STM_Init();
 800608c:	f7ff ffa5 	bl	8005fda <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006090:	f7ff ffaa 	bl	8005fe8 <P2PS_STM_Init>

  ZDD_STM_Init();
 8006094:	f7ff ffaf 	bl	8005ff6 <ZDD_STM_Init>

  OTAS_STM_Init();
 8006098:	f7ff ffb4 	bl	8006004 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800609c:	f7ff ffc0 	bl	8006020 <BVOPUS_STM_Init>

  MESH_Init();
 80060a0:	f7ff ffb7 	bl	8006012 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80060a4:	f7ff ffc3 	bl	800602e <SVCCTL_InitCustomSvc>
  
  return;
 80060a8:	bf00      	nop
}
 80060aa:	bd80      	pop	{r7, pc}

080060ac <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 80060b4:	4b09      	ldr	r3, [pc, #36]	; (80060dc <SVCCTL_RegisterCltHandler+0x30>)
 80060b6:	791b      	ldrb	r3, [r3, #4]
 80060b8:	4619      	mov	r1, r3
 80060ba:	4a08      	ldr	r2, [pc, #32]	; (80060dc <SVCCTL_RegisterCltHandler+0x30>)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 80060c2:	4b06      	ldr	r3, [pc, #24]	; (80060dc <SVCCTL_RegisterCltHandler+0x30>)
 80060c4:	791b      	ldrb	r3, [r3, #4]
 80060c6:	3301      	adds	r3, #1
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	4b04      	ldr	r3, [pc, #16]	; (80060dc <SVCCTL_RegisterCltHandler+0x30>)
 80060cc:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Client_Event_Handler);
#endif

  return;
 80060ce:	bf00      	nop
}
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	2000013c 	.word	0x2000013c

080060e0 <SVCCTL_UserEvtRx>:

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	3301      	adds	r3, #1
 80060ec:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80060ee:	2300      	movs	r3, #0
 80060f0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2bff      	cmp	r3, #255	; 0xff
 80060f8:	d13f      	bne.n	800617a <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	3302      	adds	r3, #2
 80060fe:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	881b      	ldrh	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800610a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800610e:	d132      	bne.n	8006176 <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006110:	2300      	movs	r3, #0
 8006112:	757b      	strb	r3, [r7, #21]
 8006114:	e00d      	b.n	8006132 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8006116:	7d7b      	ldrb	r3, [r7, #21]
 8006118:	4a27      	ldr	r2, [pc, #156]	; (80061b8 <SVCCTL_UserEvtRx+0xd8>)
 800611a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	4798      	blx	r3
 8006122:	4603      	mov	r3, r0
 8006124:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8006126:	7dfb      	ldrb	r3, [r7, #23]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d108      	bne.n	800613e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800612c:	7d7b      	ldrb	r3, [r7, #21]
 800612e:	3301      	adds	r3, #1
 8006130:	757b      	strb	r3, [r7, #21]
 8006132:	4b21      	ldr	r3, [pc, #132]	; (80061b8 <SVCCTL_UserEvtRx+0xd8>)
 8006134:	7f1b      	ldrb	r3, [r3, #28]
 8006136:	7d7a      	ldrb	r2, [r7, #21]
 8006138:	429a      	cmp	r2, r3
 800613a:	d3ec      	bcc.n	8006116 <SVCCTL_UserEvtRx+0x36>
 800613c:	e000      	b.n	8006140 <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 800613e:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 8006140:	2300      	movs	r3, #0
 8006142:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8006144:	2300      	movs	r3, #0
 8006146:	757b      	strb	r3, [r7, #21]
 8006148:	e00d      	b.n	8006166 <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800614a:	7d7b      	ldrb	r3, [r7, #21]
 800614c:	4a1b      	ldr	r2, [pc, #108]	; (80061bc <SVCCTL_UserEvtRx+0xdc>)
 800614e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	4798      	blx	r3
 8006156:	4603      	mov	r3, r0
 8006158:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800615a:	7dfb      	ldrb	r3, [r7, #23]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d108      	bne.n	8006172 <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8006160:	7d7b      	ldrb	r3, [r7, #21]
 8006162:	3301      	adds	r3, #1
 8006164:	757b      	strb	r3, [r7, #21]
 8006166:	4b15      	ldr	r3, [pc, #84]	; (80061bc <SVCCTL_UserEvtRx+0xdc>)
 8006168:	791b      	ldrb	r3, [r3, #4]
 800616a:	7d7a      	ldrb	r2, [r7, #21]
 800616c:	429a      	cmp	r2, r3
 800616e:	d3ec      	bcc.n	800614a <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 8006170:	e002      	b.n	8006178 <SVCCTL_UserEvtRx+0x98>
              break;
 8006172:	bf00      	nop
          break;
 8006174:	e000      	b.n	8006178 <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 8006176:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006178:	e000      	b.n	800617c <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 800617a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800617c:	7dfb      	ldrb	r3, [r7, #23]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d00f      	beq.n	80061a2 <SVCCTL_UserEvtRx+0xc2>
 8006182:	2b02      	cmp	r3, #2
 8006184:	dc10      	bgt.n	80061a8 <SVCCTL_UserEvtRx+0xc8>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <SVCCTL_UserEvtRx+0xb0>
 800618a:	2b01      	cmp	r3, #1
 800618c:	d006      	beq.n	800619c <SVCCTL_UserEvtRx+0xbc>
 800618e:	e00b      	b.n	80061a8 <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 ff9f 	bl	80070d4 <SVCCTL_App_Notification>
 8006196:	4603      	mov	r3, r0
 8006198:	75bb      	strb	r3, [r7, #22]
      break;
 800619a:	e008      	b.n	80061ae <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800619c:	2301      	movs	r3, #1
 800619e:	75bb      	strb	r3, [r7, #22]
      break;
 80061a0:	e005      	b.n	80061ae <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80061a2:	2300      	movs	r3, #0
 80061a4:	75bb      	strb	r3, [r7, #22]
      break;
 80061a6:	e002      	b.n	80061ae <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 80061a8:	2301      	movs	r3, #1
 80061aa:	75bb      	strb	r3, [r7, #22]
      break;
 80061ac:	bf00      	nop
  }

  return (return_status);
 80061ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	2000011c 	.word	0x2000011c
 80061bc:	2000013c 	.word	0x2000013c

080061c0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80061c8:	f107 030c 	add.w	r3, r7, #12
 80061cc:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	212c      	movs	r1, #44	; 0x2c
 80061d8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80061dc:	f000 fae2 	bl	80067a4 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	330b      	adds	r3, #11
 80061e4:	78db      	ldrb	r3, [r3, #3]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3720      	adds	r7, #32
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b088      	sub	sp, #32
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80061f6:	f107 030c 	add.w	r3, r7, #12
 80061fa:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	210f      	movs	r1, #15
 8006206:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800620a:	f000 facb 	bl	80067a4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	330b      	adds	r3, #11
 8006212:	78db      	ldrb	r3, [r3, #3]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3720      	adds	r7, #32
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b088      	sub	sp, #32
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006224:	f107 030c 	add.w	r3, r7, #12
 8006228:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	210e      	movs	r1, #14
 8006230:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8006234:	f000 fab6 	bl	80067a4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	330b      	adds	r3, #11
 800623c:	78db      	ldrb	r3, [r3, #3]
}
 800623e:	4618      	mov	r0, r3
 8006240:	3720      	adds	r7, #32
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
	...

08006248 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8006248:	b480      	push	{r7}
 800624a:	b08b      	sub	sp, #44	; 0x2c
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8006250:	2300      	movs	r3, #0
 8006252:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8006254:	2300      	movs	r3, #0
 8006256:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8006258:	2300      	movs	r3, #0
 800625a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8006260:	2300      	movs	r3, #0
 8006262:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8006264:	2300      	movs	r3, #0
 8006266:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8006268:	2300      	movs	r3, #0
 800626a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800626c:	2300      	movs	r3, #0
 800626e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8006270:	4b4a      	ldr	r3, [pc, #296]	; (800639c <SHCI_GetWirelessFwInfo+0x154>)
 8006272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006274:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006278:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8006282:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a44      	ldr	r2, [pc, #272]	; (80063a0 <SHCI_GetWirelessFwInfo+0x158>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d10f      	bne.n	80062b4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	617b      	str	r3, [r7, #20]
 80062b2:	e01a      	b.n	80062ea <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80062bc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80062c0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	0e1b      	lsrs	r3, r3, #24
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	0c1b      	lsrs	r3, r3, #16
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	0a1b      	lsrs	r3, r3, #8
 8006302:	b2da      	uxtb	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8006308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630a:	091b      	lsrs	r3, r3, #4
 800630c:	b2db      	uxtb	r3, r3
 800630e:	f003 030f 	and.w	r3, r3, #15
 8006312:	b2da      	uxtb	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	b2db      	uxtb	r3, r3
 800631c:	f003 030f 	and.w	r3, r3, #15
 8006320:	b2da      	uxtb	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	0e1b      	lsrs	r3, r3, #24
 800632a:	b2da      	uxtb	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006330:	6a3b      	ldr	r3, [r7, #32]
 8006332:	0c1b      	lsrs	r3, r3, #16
 8006334:	b2da      	uxtb	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	0a1b      	lsrs	r3, r3, #8
 800633e:	b2da      	uxtb	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	b2da      	uxtb	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	b2da      	uxtb	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	0e1b      	lsrs	r3, r3, #24
 8006358:	b2da      	uxtb	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	0c1b      	lsrs	r3, r3, #16
 8006362:	b2da      	uxtb	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	0a1b      	lsrs	r3, r3, #8
 800636c:	b2da      	uxtb	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	0e1b      	lsrs	r3, r3, #24
 8006376:	b2da      	uxtb	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	0c1b      	lsrs	r3, r3, #16
 8006380:	b2da      	uxtb	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	b2da      	uxtb	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	372c      	adds	r7, #44	; 0x2c
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	58004000 	.word	0x58004000
 80063a0:	a94656b9 	.word	0xa94656b9

080063a4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	4a08      	ldr	r2, [pc, #32]	; (80063d4 <hci_init+0x30>)
 80063b4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80063b6:	4a08      	ldr	r2, [pc, #32]	; (80063d8 <hci_init+0x34>)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80063bc:	4806      	ldr	r0, [pc, #24]	; (80063d8 <hci_init+0x34>)
 80063be:	f000 f973 	bl	80066a8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 f8d4 	bl	8006574 <TlInit>

  return;
 80063cc:	bf00      	nop
}
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	200002c4 	.word	0x200002c4
 80063d8:	2000029c 	.word	0x2000029c

080063dc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80063e2:	4822      	ldr	r0, [pc, #136]	; (800646c <hci_user_evt_proc+0x90>)
 80063e4:	f000 fd28 	bl	8006e38 <LST_is_empty>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d12b      	bne.n	8006446 <hci_user_evt_proc+0x6a>
 80063ee:	4b20      	ldr	r3, [pc, #128]	; (8006470 <hci_user_evt_proc+0x94>)
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d027      	beq.n	8006446 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80063f6:	f107 030c 	add.w	r3, r7, #12
 80063fa:	4619      	mov	r1, r3
 80063fc:	481b      	ldr	r0, [pc, #108]	; (800646c <hci_user_evt_proc+0x90>)
 80063fe:	f000 fdaa 	bl	8006f56 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006402:	4b1c      	ldr	r3, [pc, #112]	; (8006474 <hci_user_evt_proc+0x98>)
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00c      	beq.n	8006424 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800640e:	2301      	movs	r3, #1
 8006410:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006412:	4b18      	ldr	r3, [pc, #96]	; (8006474 <hci_user_evt_proc+0x98>)
 8006414:	69db      	ldr	r3, [r3, #28]
 8006416:	1d3a      	adds	r2, r7, #4
 8006418:	4610      	mov	r0, r2
 800641a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800641c:	793a      	ldrb	r2, [r7, #4]
 800641e:	4b14      	ldr	r3, [pc, #80]	; (8006470 <hci_user_evt_proc+0x94>)
 8006420:	701a      	strb	r2, [r3, #0]
 8006422:	e002      	b.n	800642a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006424:	4b12      	ldr	r3, [pc, #72]	; (8006470 <hci_user_evt_proc+0x94>)
 8006426:	2201      	movs	r2, #1
 8006428:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800642a:	4b11      	ldr	r3, [pc, #68]	; (8006470 <hci_user_evt_proc+0x94>)
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d004      	beq.n	800643c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fc03 	bl	8006c40 <TL_MM_EvtDone>
 800643a:	e004      	b.n	8006446 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4619      	mov	r1, r3
 8006440:	480a      	ldr	r0, [pc, #40]	; (800646c <hci_user_evt_proc+0x90>)
 8006442:	f000 fd1b 	bl	8006e7c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006446:	4809      	ldr	r0, [pc, #36]	; (800646c <hci_user_evt_proc+0x90>)
 8006448:	f000 fcf6 	bl	8006e38 <LST_is_empty>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d107      	bne.n	8006462 <hci_user_evt_proc+0x86>
 8006452:	4b07      	ldr	r3, [pc, #28]	; (8006470 <hci_user_evt_proc+0x94>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800645a:	4804      	ldr	r0, [pc, #16]	; (800646c <hci_user_evt_proc+0x90>)
 800645c:	f001 f9c8 	bl	80077f0 <hci_notify_asynch_evt>
  }


  return;
 8006460:	bf00      	nop
 8006462:	bf00      	nop
}
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20000148 	.word	0x20000148
 8006470:	20000154 	.word	0x20000154
 8006474:	2000029c 	.word	0x2000029c

08006478 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	460b      	mov	r3, r1
 8006482:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006484:	2000      	movs	r0, #0
 8006486:	f000 f8cb 	bl	8006620 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800648a:	2300      	movs	r3, #0
 800648c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	885b      	ldrh	r3, [r3, #2]
 8006492:	b21b      	sxth	r3, r3
 8006494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006498:	b21a      	sxth	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	029b      	lsls	r3, r3, #10
 80064a0:	b21b      	sxth	r3, r3
 80064a2:	4313      	orrs	r3, r2
 80064a4:	b21b      	sxth	r3, r3
 80064a6:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	b2d9      	uxtb	r1, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	8bbb      	ldrh	r3, [r7, #28]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f000 f88d 	bl	80065d4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80064ba:	e04e      	b.n	800655a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80064bc:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80064c0:	f001 f9ad 	bl	800781e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80064c4:	e043      	b.n	800654e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80064c6:	f107 030c 	add.w	r3, r7, #12
 80064ca:	4619      	mov	r1, r3
 80064cc:	4828      	ldr	r0, [pc, #160]	; (8006570 <hci_send_req+0xf8>)
 80064ce:	f000 fd42 	bl	8006f56 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	7a5b      	ldrb	r3, [r3, #9]
 80064d6:	2b0f      	cmp	r3, #15
 80064d8:	d114      	bne.n	8006504 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	330b      	adds	r3, #11
 80064de:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	885b      	ldrh	r3, [r3, #2]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	8bba      	ldrh	r2, [r7, #28]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d104      	bne.n	80064f6 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	7812      	ldrb	r2, [r2, #0]
 80064f4:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	785b      	ldrb	r3, [r3, #1]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d027      	beq.n	800654e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80064fe:	2301      	movs	r3, #1
 8006500:	77fb      	strb	r3, [r7, #31]
 8006502:	e024      	b.n	800654e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	330b      	adds	r3, #11
 8006508:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006510:	b29b      	uxth	r3, r3
 8006512:	8bba      	ldrh	r2, [r7, #28]
 8006514:	429a      	cmp	r2, r3
 8006516:	d114      	bne.n	8006542 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	7a9b      	ldrb	r3, [r3, #10]
 800651c:	3b03      	subs	r3, #3
 800651e:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	695a      	ldr	r2, [r3, #20]
 8006524:	7dfb      	ldrb	r3, [r7, #23]
 8006526:	429a      	cmp	r2, r3
 8006528:	bfa8      	it	ge
 800652a:	461a      	movge	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6918      	ldr	r0, [r3, #16]
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	1cd9      	adds	r1, r3, #3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	695b      	ldr	r3, [r3, #20]
 800653c:	461a      	mov	r2, r3
 800653e:	f002 fb10 	bl	8008b62 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800654a:	2301      	movs	r3, #1
 800654c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800654e:	4808      	ldr	r0, [pc, #32]	; (8006570 <hci_send_req+0xf8>)
 8006550:	f000 fc72 	bl	8006e38 <LST_is_empty>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d0b5      	beq.n	80064c6 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800655a:	7ffb      	ldrb	r3, [r7, #31]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0ad      	beq.n	80064bc <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8006560:	2001      	movs	r0, #1
 8006562:	f000 f85d 	bl	8006620 <NotifyCmdStatus>

  return 0;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3720      	adds	r7, #32
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	200002bc 	.word	0x200002bc

08006574 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800657c:	480f      	ldr	r0, [pc, #60]	; (80065bc <TlInit+0x48>)
 800657e:	f000 fc4b 	bl	8006e18 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006582:	4a0f      	ldr	r2, [pc, #60]	; (80065c0 <TlInit+0x4c>)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006588:	480e      	ldr	r0, [pc, #56]	; (80065c4 <TlInit+0x50>)
 800658a:	f000 fc45 	bl	8006e18 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800658e:	4b0e      	ldr	r3, [pc, #56]	; (80065c8 <TlInit+0x54>)
 8006590:	2201      	movs	r2, #1
 8006592:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006594:	4b0d      	ldr	r3, [pc, #52]	; (80065cc <TlInit+0x58>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00a      	beq.n	80065b2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80065a0:	4b0b      	ldr	r3, [pc, #44]	; (80065d0 <TlInit+0x5c>)
 80065a2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80065a4:	4b09      	ldr	r3, [pc, #36]	; (80065cc <TlInit+0x58>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f107 0208 	add.w	r2, r7, #8
 80065ac:	4610      	mov	r0, r2
 80065ae:	4798      	blx	r3
  }

  return;
 80065b0:	bf00      	nop
 80065b2:	bf00      	nop
}
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	200002bc 	.word	0x200002bc
 80065c0:	20000150 	.word	0x20000150
 80065c4:	20000148 	.word	0x20000148
 80065c8:	20000154 	.word	0x20000154
 80065cc:	2000029c 	.word	0x2000029c
 80065d0:	08006661 	.word	0x08006661

080065d4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	4603      	mov	r3, r0
 80065dc:	603a      	str	r2, [r7, #0]
 80065de:	80fb      	strh	r3, [r7, #6]
 80065e0:	460b      	mov	r3, r1
 80065e2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80065e4:	4b0c      	ldr	r3, [pc, #48]	; (8006618 <SendCmd+0x44>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	88fa      	ldrh	r2, [r7, #6]
 80065ea:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80065ee:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <SendCmd+0x44>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	797a      	ldrb	r2, [r7, #5]
 80065f4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80065f6:	4b08      	ldr	r3, [pc, #32]	; (8006618 <SendCmd+0x44>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	330c      	adds	r3, #12
 80065fc:	797a      	ldrb	r2, [r7, #5]
 80065fe:	6839      	ldr	r1, [r7, #0]
 8006600:	4618      	mov	r0, r3
 8006602:	f002 faae 	bl	8008b62 <memcpy>

  hciContext.io.Send(0,0);
 8006606:	4b05      	ldr	r3, [pc, #20]	; (800661c <SendCmd+0x48>)
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	2100      	movs	r1, #0
 800660c:	2000      	movs	r0, #0
 800660e:	4798      	blx	r3

  return;
 8006610:	bf00      	nop
}
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	20000150 	.word	0x20000150
 800661c:	2000029c 	.word	0x2000029c

08006620 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	4603      	mov	r3, r0
 8006628:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800662a:	79fb      	ldrb	r3, [r7, #7]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d108      	bne.n	8006642 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006630:	4b0a      	ldr	r3, [pc, #40]	; (800665c <NotifyCmdStatus+0x3c>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00d      	beq.n	8006654 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006638:	4b08      	ldr	r3, [pc, #32]	; (800665c <NotifyCmdStatus+0x3c>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2000      	movs	r0, #0
 800663e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006640:	e008      	b.n	8006654 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8006642:	4b06      	ldr	r3, [pc, #24]	; (800665c <NotifyCmdStatus+0x3c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d004      	beq.n	8006654 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800664a:	4b04      	ldr	r3, [pc, #16]	; (800665c <NotifyCmdStatus+0x3c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2001      	movs	r0, #1
 8006650:	4798      	blx	r3
  return;
 8006652:	bf00      	nop
 8006654:	bf00      	nop
}
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	200002c4 	.word	0x200002c4

08006660 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	7a5b      	ldrb	r3, [r3, #9]
 800666c:	2b0f      	cmp	r3, #15
 800666e:	d003      	beq.n	8006678 <TlEvtReceived+0x18>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	7a5b      	ldrb	r3, [r3, #9]
 8006674:	2b0e      	cmp	r3, #14
 8006676:	d107      	bne.n	8006688 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	4809      	ldr	r0, [pc, #36]	; (80066a0 <TlEvtReceived+0x40>)
 800667c:	f000 fc24 	bl	8006ec8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006680:	2000      	movs	r0, #0
 8006682:	f001 f8c1 	bl	8007808 <hci_cmd_resp_release>
 8006686:	e006      	b.n	8006696 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	4806      	ldr	r0, [pc, #24]	; (80066a4 <TlEvtReceived+0x44>)
 800668c:	f000 fc1c 	bl	8006ec8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006690:	4804      	ldr	r0, [pc, #16]	; (80066a4 <TlEvtReceived+0x44>)
 8006692:	f001 f8ad 	bl	80077f0 <hci_notify_asynch_evt>
  }

  return;
 8006696:	bf00      	nop
}
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	200002bc 	.word	0x200002bc
 80066a4:	20000148 	.word	0x20000148

080066a8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a05      	ldr	r2, [pc, #20]	; (80066c8 <hci_register_io_bus+0x20>)
 80066b4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a04      	ldr	r2, [pc, #16]	; (80066cc <hci_register_io_bus+0x24>)
 80066ba:	611a      	str	r2, [r3, #16]

  return;
 80066bc:	bf00      	nop
}
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	080069b9 	.word	0x080069b9
 80066cc:	08006a21 	.word	0x08006a21

080066d0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	4a08      	ldr	r2, [pc, #32]	; (8006700 <shci_init+0x30>)
 80066e0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80066e2:	4a08      	ldr	r2, [pc, #32]	; (8006704 <shci_init+0x34>)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80066e8:	4806      	ldr	r0, [pc, #24]	; (8006704 <shci_init+0x34>)
 80066ea:	f000 f911 	bl	8006910 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 f894 	bl	8006820 <TlInit>

  return;
 80066f8:	bf00      	nop
}
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	200002e8 	.word	0x200002e8
 8006704:	200002c8 	.word	0x200002c8

08006708 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800670e:	4822      	ldr	r0, [pc, #136]	; (8006798 <shci_user_evt_proc+0x90>)
 8006710:	f000 fb92 	bl	8006e38 <LST_is_empty>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d12b      	bne.n	8006772 <shci_user_evt_proc+0x6a>
 800671a:	4b20      	ldr	r3, [pc, #128]	; (800679c <shci_user_evt_proc+0x94>)
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d027      	beq.n	8006772 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006722:	f107 030c 	add.w	r3, r7, #12
 8006726:	4619      	mov	r1, r3
 8006728:	481b      	ldr	r0, [pc, #108]	; (8006798 <shci_user_evt_proc+0x90>)
 800672a:	f000 fc14 	bl	8006f56 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800672e:	4b1c      	ldr	r3, [pc, #112]	; (80067a0 <shci_user_evt_proc+0x98>)
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00c      	beq.n	8006750 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800673a:	2301      	movs	r3, #1
 800673c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800673e:	4b18      	ldr	r3, [pc, #96]	; (80067a0 <shci_user_evt_proc+0x98>)
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	1d3a      	adds	r2, r7, #4
 8006744:	4610      	mov	r0, r2
 8006746:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8006748:	793a      	ldrb	r2, [r7, #4]
 800674a:	4b14      	ldr	r3, [pc, #80]	; (800679c <shci_user_evt_proc+0x94>)
 800674c:	701a      	strb	r2, [r3, #0]
 800674e:	e002      	b.n	8006756 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006750:	4b12      	ldr	r3, [pc, #72]	; (800679c <shci_user_evt_proc+0x94>)
 8006752:	2201      	movs	r2, #1
 8006754:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8006756:	4b11      	ldr	r3, [pc, #68]	; (800679c <shci_user_evt_proc+0x94>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d004      	beq.n	8006768 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4618      	mov	r0, r3
 8006762:	f000 fa6d 	bl	8006c40 <TL_MM_EvtDone>
 8006766:	e004      	b.n	8006772 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4619      	mov	r1, r3
 800676c:	480a      	ldr	r0, [pc, #40]	; (8006798 <shci_user_evt_proc+0x90>)
 800676e:	f000 fb85 	bl	8006e7c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006772:	4809      	ldr	r0, [pc, #36]	; (8006798 <shci_user_evt_proc+0x90>)
 8006774:	f000 fb60 	bl	8006e38 <LST_is_empty>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d107      	bne.n	800678e <shci_user_evt_proc+0x86>
 800677e:	4b07      	ldr	r3, [pc, #28]	; (800679c <shci_user_evt_proc+0x94>)
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8006786:	4804      	ldr	r0, [pc, #16]	; (8006798 <shci_user_evt_proc+0x90>)
 8006788:	f7fa fa05 	bl	8000b96 <shci_notify_asynch_evt>
  }


  return;
 800678c:	bf00      	nop
 800678e:	bf00      	nop
}
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	20000158 	.word	0x20000158
 800679c:	20000168 	.word	0x20000168
 80067a0:	200002c8 	.word	0x200002c8

080067a4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60ba      	str	r2, [r7, #8]
 80067ac:	607b      	str	r3, [r7, #4]
 80067ae:	4603      	mov	r3, r0
 80067b0:	81fb      	strh	r3, [r7, #14]
 80067b2:	460b      	mov	r3, r1
 80067b4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80067b6:	2000      	movs	r0, #0
 80067b8:	f000 f864 	bl	8006884 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80067bc:	4b16      	ldr	r3, [pc, #88]	; (8006818 <shci_send+0x74>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	89fa      	ldrh	r2, [r7, #14]
 80067c2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80067c6:	4b14      	ldr	r3, [pc, #80]	; (8006818 <shci_send+0x74>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	7b7a      	ldrb	r2, [r7, #13]
 80067cc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80067ce:	4b12      	ldr	r3, [pc, #72]	; (8006818 <shci_send+0x74>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	330c      	adds	r3, #12
 80067d4:	7b7a      	ldrb	r2, [r7, #13]
 80067d6:	68b9      	ldr	r1, [r7, #8]
 80067d8:	4618      	mov	r0, r3
 80067da:	f002 f9c2 	bl	8008b62 <memcpy>

  shciContext.io.Send(0,0);
 80067de:	4b0f      	ldr	r3, [pc, #60]	; (800681c <shci_send+0x78>)
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	2100      	movs	r1, #0
 80067e4:	2000      	movs	r0, #0
 80067e6:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80067e8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80067ec:	f7fa f9ea 	bl	8000bc4 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f103 0008 	add.w	r0, r3, #8
 80067f6:	4b08      	ldr	r3, [pc, #32]	; (8006818 <shci_send+0x74>)
 80067f8:	6819      	ldr	r1, [r3, #0]
 80067fa:	4b07      	ldr	r3, [pc, #28]	; (8006818 <shci_send+0x74>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	789b      	ldrb	r3, [r3, #2]
 8006800:	3303      	adds	r3, #3
 8006802:	461a      	mov	r2, r3
 8006804:	f002 f9ad 	bl	8008b62 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006808:	2001      	movs	r0, #1
 800680a:	f000 f83b 	bl	8006884 <Cmd_SetStatus>

  return;
 800680e:	bf00      	nop
}
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	20000164 	.word	0x20000164
 800681c:	200002c8 	.word	0x200002c8

08006820 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8006828:	4a10      	ldr	r2, [pc, #64]	; (800686c <TlInit+0x4c>)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800682e:	4810      	ldr	r0, [pc, #64]	; (8006870 <TlInit+0x50>)
 8006830:	f000 faf2 	bl	8006e18 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006834:	2001      	movs	r0, #1
 8006836:	f000 f825 	bl	8006884 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800683a:	4b0e      	ldr	r3, [pc, #56]	; (8006874 <TlInit+0x54>)
 800683c:	2201      	movs	r2, #1
 800683e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8006840:	4b0d      	ldr	r3, [pc, #52]	; (8006878 <TlInit+0x58>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00c      	beq.n	8006862 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800684c:	4b0b      	ldr	r3, [pc, #44]	; (800687c <TlInit+0x5c>)
 800684e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8006850:	4b0b      	ldr	r3, [pc, #44]	; (8006880 <TlInit+0x60>)
 8006852:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8006854:	4b08      	ldr	r3, [pc, #32]	; (8006878 <TlInit+0x58>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f107 020c 	add.w	r2, r7, #12
 800685c:	4610      	mov	r0, r2
 800685e:	4798      	blx	r3
  }

  return;
 8006860:	bf00      	nop
 8006862:	bf00      	nop
}
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	20000164 	.word	0x20000164
 8006870:	20000158 	.word	0x20000158
 8006874:	20000168 	.word	0x20000168
 8006878:	200002c8 	.word	0x200002c8
 800687c:	080068d5 	.word	0x080068d5
 8006880:	080068ed 	.word	0x080068ed

08006884 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	4603      	mov	r3, r0
 800688c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800688e:	79fb      	ldrb	r3, [r7, #7]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10b      	bne.n	80068ac <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8006894:	4b0d      	ldr	r3, [pc, #52]	; (80068cc <Cmd_SetStatus+0x48>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800689c:	4b0b      	ldr	r3, [pc, #44]	; (80068cc <Cmd_SetStatus+0x48>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2000      	movs	r0, #0
 80068a2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80068a4:	4b0a      	ldr	r3, [pc, #40]	; (80068d0 <Cmd_SetStatus+0x4c>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80068aa:	e00b      	b.n	80068c4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80068ac:	4b08      	ldr	r3, [pc, #32]	; (80068d0 <Cmd_SetStatus+0x4c>)
 80068ae:	2201      	movs	r2, #1
 80068b0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80068b2:	4b06      	ldr	r3, [pc, #24]	; (80068cc <Cmd_SetStatus+0x48>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d004      	beq.n	80068c4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80068ba:	4b04      	ldr	r3, [pc, #16]	; (80068cc <Cmd_SetStatus+0x48>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2001      	movs	r0, #1
 80068c0:	4798      	blx	r3
  return;
 80068c2:	bf00      	nop
 80068c4:	bf00      	nop
}
 80068c6:	3708      	adds	r7, #8
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	200002e8 	.word	0x200002e8
 80068d0:	20000160 	.word	0x20000160

080068d4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80068dc:	2000      	movs	r0, #0
 80068de:	f7fa f966 	bl	8000bae <shci_cmd_resp_release>

  return;
 80068e2:	bf00      	nop
}
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80068f4:	6879      	ldr	r1, [r7, #4]
 80068f6:	4805      	ldr	r0, [pc, #20]	; (800690c <TlUserEvtReceived+0x20>)
 80068f8:	f000 fae6 	bl	8006ec8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80068fc:	4803      	ldr	r0, [pc, #12]	; (800690c <TlUserEvtReceived+0x20>)
 80068fe:	f7fa f94a 	bl	8000b96 <shci_notify_asynch_evt>

  return;
 8006902:	bf00      	nop
}
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	20000158 	.word	0x20000158

08006910 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a05      	ldr	r2, [pc, #20]	; (8006930 <shci_register_io_bus+0x20>)
 800691c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a04      	ldr	r2, [pc, #16]	; (8006934 <shci_register_io_bus+0x24>)
 8006922:	611a      	str	r2, [r3, #16]

  return;
 8006924:	bf00      	nop
}
 8006926:	370c      	adds	r7, #12
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	08006acd 	.word	0x08006acd
 8006934:	08006b21 	.word	0x08006b21

08006938 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800693c:	f001 fbfe 	bl	800813c <HW_IPCC_Enable>

  return;
 8006940:	bf00      	nop
}
 8006942:	bd80      	pop	{r7, pc}

08006944 <TL_Init>:


void TL_Init( void )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8006948:	4b10      	ldr	r3, [pc, #64]	; (800698c <TL_Init+0x48>)
 800694a:	4a11      	ldr	r2, [pc, #68]	; (8006990 <TL_Init+0x4c>)
 800694c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800694e:	4b0f      	ldr	r3, [pc, #60]	; (800698c <TL_Init+0x48>)
 8006950:	4a10      	ldr	r2, [pc, #64]	; (8006994 <TL_Init+0x50>)
 8006952:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8006954:	4b0d      	ldr	r3, [pc, #52]	; (800698c <TL_Init+0x48>)
 8006956:	4a10      	ldr	r2, [pc, #64]	; (8006998 <TL_Init+0x54>)
 8006958:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800695a:	4b0c      	ldr	r3, [pc, #48]	; (800698c <TL_Init+0x48>)
 800695c:	4a0f      	ldr	r2, [pc, #60]	; (800699c <TL_Init+0x58>)
 800695e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8006960:	4b0a      	ldr	r3, [pc, #40]	; (800698c <TL_Init+0x48>)
 8006962:	4a0f      	ldr	r2, [pc, #60]	; (80069a0 <TL_Init+0x5c>)
 8006964:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8006966:	4b09      	ldr	r3, [pc, #36]	; (800698c <TL_Init+0x48>)
 8006968:	4a0e      	ldr	r2, [pc, #56]	; (80069a4 <TL_Init+0x60>)
 800696a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800696c:	4b07      	ldr	r3, [pc, #28]	; (800698c <TL_Init+0x48>)
 800696e:	4a0e      	ldr	r2, [pc, #56]	; (80069a8 <TL_Init+0x64>)
 8006970:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8006972:	4b06      	ldr	r3, [pc, #24]	; (800698c <TL_Init+0x48>)
 8006974:	4a0d      	ldr	r2, [pc, #52]	; (80069ac <TL_Init+0x68>)
 8006976:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8006978:	4b04      	ldr	r3, [pc, #16]	; (800698c <TL_Init+0x48>)
 800697a:	4a0d      	ldr	r2, [pc, #52]	; (80069b0 <TL_Init+0x6c>)
 800697c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800697e:	4b03      	ldr	r3, [pc, #12]	; (800698c <TL_Init+0x48>)
 8006980:	4a0c      	ldr	r2, [pc, #48]	; (80069b4 <TL_Init+0x70>)
 8006982:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8006984:	f001 fbee 	bl	8008164 <HW_IPCC_Init>

  return;
 8006988:	bf00      	nop
}
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20030000 	.word	0x20030000
 8006990:	20030028 	.word	0x20030028
 8006994:	20030048 	.word	0x20030048
 8006998:	20030058 	.word	0x20030058
 800699c:	20030068 	.word	0x20030068
 80069a0:	20030070 	.word	0x20030070
 80069a4:	20030078 	.word	0x20030078
 80069a8:	20030080 	.word	0x20030080
 80069ac:	2003009c 	.word	0x2003009c
 80069b0:	200300a0 	.word	0x200300a0
 80069b4:	200300ac 	.word	0x200300ac

080069b8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80069c4:	4811      	ldr	r0, [pc, #68]	; (8006a0c <TL_BLE_Init+0x54>)
 80069c6:	f000 fa27 	bl	8006e18 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80069ca:	4b11      	ldr	r3, [pc, #68]	; (8006a10 <TL_BLE_Init+0x58>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	68da      	ldr	r2, [r3, #12]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	4a0c      	ldr	r2, [pc, #48]	; (8006a14 <TL_BLE_Init+0x5c>)
 80069e4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	4a08      	ldr	r2, [pc, #32]	; (8006a0c <TL_BLE_Init+0x54>)
 80069ea:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80069ec:	f001 fbd0 	bl	8008190 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a08      	ldr	r2, [pc, #32]	; (8006a18 <TL_BLE_Init+0x60>)
 80069f6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	4a07      	ldr	r2, [pc, #28]	; (8006a1c <TL_BLE_Init+0x64>)
 80069fe:	6013      	str	r3, [r2, #0]

  return 0;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	200300c8 	.word	0x200300c8
 8006a10:	20030000 	.word	0x20030000
 8006a14:	20030a58 	.word	0x20030a58
 8006a18:	200002f4 	.word	0x200002f4
 8006a1c:	200002f8 	.word	0x200002f8

08006a20 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	460b      	mov	r3, r1
 8006a2a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8006a2c:	4b09      	ldr	r3, [pc, #36]	; (8006a54 <TL_BLE_SendCmd+0x34>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2201      	movs	r2, #1
 8006a34:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8006a36:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <TL_BLE_SendCmd+0x34>)
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	2001      	movs	r0, #1
 8006a40:	f000 f96c 	bl	8006d1c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8006a44:	f001 fbae 	bl	80081a4 <HW_IPCC_BLE_SendCmd>

  return 0;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	20030000 	.word	0x20030000

08006a58 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8006a5e:	e01c      	b.n	8006a9a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8006a60:	1d3b      	adds	r3, r7, #4
 8006a62:	4619      	mov	r1, r3
 8006a64:	4812      	ldr	r0, [pc, #72]	; (8006ab0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006a66:	f000 fa76 	bl	8006f56 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	7a5b      	ldrb	r3, [r3, #9]
 8006a6e:	2b0f      	cmp	r3, #15
 8006a70:	d003      	beq.n	8006a7a <HW_IPCC_BLE_RxEvtNot+0x22>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	7a5b      	ldrb	r3, [r3, #9]
 8006a76:	2b0e      	cmp	r3, #14
 8006a78:	d105      	bne.n	8006a86 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	2002      	movs	r0, #2
 8006a80:	f000 f94c 	bl	8006d1c <OutputDbgTrace>
 8006a84:	e004      	b.n	8006a90 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4619      	mov	r1, r3
 8006a8a:	2003      	movs	r0, #3
 8006a8c:	f000 f946 	bl	8006d1c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8006a90:	4b08      	ldr	r3, [pc, #32]	; (8006ab4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	4610      	mov	r0, r2
 8006a98:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8006a9a:	4805      	ldr	r0, [pc, #20]	; (8006ab0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006a9c:	f000 f9cc 	bl	8006e38 <LST_is_empty>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0dc      	beq.n	8006a60 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8006aa6:	bf00      	nop
}
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	200300c8 	.word	0x200300c8
 8006ab4:	200002f4 	.word	0x200002f4

08006ab8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8006abc:	4b02      	ldr	r3, [pc, #8]	; (8006ac8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4798      	blx	r3

  return;
 8006ac2:	bf00      	nop
}
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	200002f8 	.word	0x200002f8

08006acc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8006ad8:	480d      	ldr	r0, [pc, #52]	; (8006b10 <TL_SYS_Init+0x44>)
 8006ada:	f000 f99d 	bl	8006e18 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8006ade:	4b0d      	ldr	r3, [pc, #52]	; (8006b14 <TL_SYS_Init+0x48>)
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	689a      	ldr	r2, [r3, #8]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	4a08      	ldr	r2, [pc, #32]	; (8006b10 <TL_SYS_Init+0x44>)
 8006af0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8006af2:	f001 fb79 	bl	80081e8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a07      	ldr	r2, [pc, #28]	; (8006b18 <TL_SYS_Init+0x4c>)
 8006afc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	4a06      	ldr	r2, [pc, #24]	; (8006b1c <TL_SYS_Init+0x50>)
 8006b04:	6013      	str	r3, [r2, #0]

  return 0;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	200300d0 	.word	0x200300d0
 8006b14:	20030000 	.word	0x20030000
 8006b18:	200002fc 	.word	0x200002fc
 8006b1c:	20000300 	.word	0x20000300

08006b20 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	460b      	mov	r3, r1
 8006b2a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8006b2c:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <TL_SYS_SendCmd+0x34>)
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2210      	movs	r2, #16
 8006b34:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8006b36:	4b07      	ldr	r3, [pc, #28]	; (8006b54 <TL_SYS_SendCmd+0x34>)
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	2004      	movs	r0, #4
 8006b40:	f000 f8ec 	bl	8006d1c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8006b44:	f001 fb5a 	bl	80081fc <HW_IPCC_SYS_SendCmd>

  return 0;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	20030000 	.word	0x20030000

08006b58 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8006b5c:	4b07      	ldr	r3, [pc, #28]	; (8006b7c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4619      	mov	r1, r3
 8006b64:	2005      	movs	r0, #5
 8006b66:	f000 f8d9 	bl	8006d1c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8006b6a:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a03      	ldr	r2, [pc, #12]	; (8006b7c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8006b70:	68d2      	ldr	r2, [r2, #12]
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	4610      	mov	r0, r2
 8006b76:	4798      	blx	r3

  return;
 8006b78:	bf00      	nop
}
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	20030000 	.word	0x20030000
 8006b80:	200002fc 	.word	0x200002fc

08006b84 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8006b8a:	e00e      	b.n	8006baa <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8006b8c:	1d3b      	adds	r3, r7, #4
 8006b8e:	4619      	mov	r1, r3
 8006b90:	480b      	ldr	r0, [pc, #44]	; (8006bc0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8006b92:	f000 f9e0 	bl	8006f56 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	2006      	movs	r0, #6
 8006b9c:	f000 f8be 	bl	8006d1c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8006ba0:	4b08      	ldr	r3, [pc, #32]	; (8006bc4 <HW_IPCC_SYS_EvtNot+0x40>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	4610      	mov	r0, r2
 8006ba8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8006baa:	4805      	ldr	r0, [pc, #20]	; (8006bc0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8006bac:	f000 f944 	bl	8006e38 <LST_is_empty>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d0ea      	beq.n	8006b8c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8006bb6:	bf00      	nop
}
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	200300d0 	.word	0x200300d0
 8006bc4:	20000300 	.word	0x20000300

08006bc8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8006bd0:	4817      	ldr	r0, [pc, #92]	; (8006c30 <TL_MM_Init+0x68>)
 8006bd2:	f000 f921 	bl	8006e18 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8006bd6:	4817      	ldr	r0, [pc, #92]	; (8006c34 <TL_MM_Init+0x6c>)
 8006bd8:	f000 f91e 	bl	8006e18 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8006bdc:	4b16      	ldr	r3, [pc, #88]	; (8006c38 <TL_MM_Init+0x70>)
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	4a16      	ldr	r2, [pc, #88]	; (8006c3c <TL_MM_Init+0x74>)
 8006be2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8006be4:	4b15      	ldr	r3, [pc, #84]	; (8006c3c <TL_MM_Init+0x74>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	6892      	ldr	r2, [r2, #8]
 8006bec:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8006bee:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <TL_MM_Init+0x74>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	68d2      	ldr	r2, [r2, #12]
 8006bf6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8006bf8:	4b10      	ldr	r3, [pc, #64]	; (8006c3c <TL_MM_Init+0x74>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a0c      	ldr	r2, [pc, #48]	; (8006c30 <TL_MM_Init+0x68>)
 8006bfe:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8006c00:	4b0e      	ldr	r3, [pc, #56]	; (8006c3c <TL_MM_Init+0x74>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6812      	ldr	r2, [r2, #0]
 8006c08:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8006c0a:	4b0c      	ldr	r3, [pc, #48]	; (8006c3c <TL_MM_Init+0x74>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	6852      	ldr	r2, [r2, #4]
 8006c12:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8006c14:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <TL_MM_Init+0x74>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	6912      	ldr	r2, [r2, #16]
 8006c1c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8006c1e:	4b07      	ldr	r3, [pc, #28]	; (8006c3c <TL_MM_Init+0x74>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6952      	ldr	r2, [r2, #20]
 8006c26:	619a      	str	r2, [r3, #24]

  return;
 8006c28:	bf00      	nop
}
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	200300b8 	.word	0x200300b8
 8006c34:	200002ec 	.word	0x200002ec
 8006c38:	20030000 	.word	0x20030000
 8006c3c:	20000304 	.word	0x20000304

08006c40 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8006c48:	6879      	ldr	r1, [r7, #4]
 8006c4a:	4807      	ldr	r0, [pc, #28]	; (8006c68 <TL_MM_EvtDone+0x28>)
 8006c4c:	f000 f93c 	bl	8006ec8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8006c50:	6879      	ldr	r1, [r7, #4]
 8006c52:	2000      	movs	r0, #0
 8006c54:	f000 f862 	bl	8006d1c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8006c58:	4804      	ldr	r0, [pc, #16]	; (8006c6c <TL_MM_EvtDone+0x2c>)
 8006c5a:	f001 faf5 	bl	8008248 <HW_IPCC_MM_SendFreeBuf>

  return;
 8006c5e:	bf00      	nop
}
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	200002ec 	.word	0x200002ec
 8006c6c:	08006c71 	.word	0x08006c71

08006c70 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006c76:	e00c      	b.n	8006c92 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8006c78:	1d3b      	adds	r3, r7, #4
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	480a      	ldr	r0, [pc, #40]	; (8006ca8 <SendFreeBuf+0x38>)
 8006c7e:	f000 f96a 	bl	8006f56 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8006c82:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <SendFreeBuf+0x3c>)
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	4611      	mov	r1, r2
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 f91b 	bl	8006ec8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006c92:	4805      	ldr	r0, [pc, #20]	; (8006ca8 <SendFreeBuf+0x38>)
 8006c94:	f000 f8d0 	bl	8006e38 <LST_is_empty>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0ec      	beq.n	8006c78 <SendFreeBuf+0x8>
  }

  return;
 8006c9e:	bf00      	nop
}
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	200002ec 	.word	0x200002ec
 8006cac:	20030000 	.word	0x20030000

08006cb0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8006cb4:	4805      	ldr	r0, [pc, #20]	; (8006ccc <TL_TRACES_Init+0x1c>)
 8006cb6:	f000 f8af 	bl	8006e18 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8006cba:	4b05      	ldr	r3, [pc, #20]	; (8006cd0 <TL_TRACES_Init+0x20>)
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	4a03      	ldr	r2, [pc, #12]	; (8006ccc <TL_TRACES_Init+0x1c>)
 8006cc0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8006cc2:	f001 faf7 	bl	80082b4 <HW_IPCC_TRACES_Init>

  return;
 8006cc6:	bf00      	nop
}
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	200300c0 	.word	0x200300c0
 8006cd0:	20030000 	.word	0x20030000

08006cd4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8006cda:	e008      	b.n	8006cee <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8006cdc:	1d3b      	adds	r3, r7, #4
 8006cde:	4619      	mov	r1, r3
 8006ce0:	4808      	ldr	r0, [pc, #32]	; (8006d04 <HW_IPCC_TRACES_EvtNot+0x30>)
 8006ce2:	f000 f938 	bl	8006f56 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 f80d 	bl	8006d08 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8006cee:	4805      	ldr	r0, [pc, #20]	; (8006d04 <HW_IPCC_TRACES_EvtNot+0x30>)
 8006cf0:	f000 f8a2 	bl	8006e38 <LST_is_empty>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0f0      	beq.n	8006cdc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8006cfa:	bf00      	nop
}
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	200300c0 	.word	0x200300c0

08006d08 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	6039      	str	r1, [r7, #0]
 8006d26:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	2b06      	cmp	r3, #6
 8006d2c:	d845      	bhi.n	8006dba <OutputDbgTrace+0x9e>
 8006d2e:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <OutputDbgTrace+0x18>)
 8006d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d34:	08006d51 	.word	0x08006d51
 8006d38:	08006d75 	.word	0x08006d75
 8006d3c:	08006d7b 	.word	0x08006d7b
 8006d40:	08006d8f 	.word	0x08006d8f
 8006d44:	08006d9b 	.word	0x08006d9b
 8006d48:	08006da1 	.word	0x08006da1
 8006d4c:	08006daf 	.word	0x08006daf
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	7a5b      	ldrb	r3, [r3, #9]
 8006d58:	2bff      	cmp	r3, #255	; 0xff
 8006d5a:	d005      	beq.n	8006d68 <OutputDbgTrace+0x4c>
 8006d5c:	2bff      	cmp	r3, #255	; 0xff
 8006d5e:	dc05      	bgt.n	8006d6c <OutputDbgTrace+0x50>
 8006d60:	2b0e      	cmp	r3, #14
 8006d62:	d005      	beq.n	8006d70 <OutputDbgTrace+0x54>
 8006d64:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8006d66:	e001      	b.n	8006d6c <OutputDbgTrace+0x50>
          break;
 8006d68:	bf00      	nop
 8006d6a:	e027      	b.n	8006dbc <OutputDbgTrace+0xa0>
          break;
 8006d6c:	bf00      	nop
 8006d6e:	e025      	b.n	8006dbc <OutputDbgTrace+0xa0>
          break;
 8006d70:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8006d72:	e023      	b.n	8006dbc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8006d78:	e020      	b.n	8006dbc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	7a5b      	ldrb	r3, [r3, #9]
 8006d82:	2b0e      	cmp	r3, #14
 8006d84:	d001      	beq.n	8006d8a <OutputDbgTrace+0x6e>
 8006d86:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8006d88:	e000      	b.n	8006d8c <OutputDbgTrace+0x70>
          break;
 8006d8a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006d8c:	e016      	b.n	8006dbc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	7a5b      	ldrb	r3, [r3, #9]
 8006d96:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006d98:	e010      	b.n	8006dbc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8006d9e:	e00d      	b.n	8006dbc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	7a5b      	ldrb	r3, [r3, #9]
 8006da8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8006daa:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006dac:	e006      	b.n	8006dbc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	7a5b      	ldrb	r3, [r3, #9]
 8006db6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006db8:	e000      	b.n	8006dbc <OutputDbgTrace+0xa0>

    default:
      break;
 8006dba:	bf00      	nop
  }

  return;
 8006dbc:	bf00      	nop
}
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8006dd2:	4b0f      	ldr	r3, [pc, #60]	; (8006e10 <OTP_Read+0x48>)
 8006dd4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006dd6:	e002      	b.n	8006dde <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3b08      	subs	r3, #8
 8006ddc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	3307      	adds	r3, #7
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	79fa      	ldrb	r2, [r7, #7]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d003      	beq.n	8006df2 <OTP_Read+0x2a>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	4a09      	ldr	r2, [pc, #36]	; (8006e14 <OTP_Read+0x4c>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d1f2      	bne.n	8006dd8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3307      	adds	r3, #7
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	79fa      	ldrb	r2, [r7, #7]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d001      	beq.n	8006e02 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8006e02:	68fb      	ldr	r3, [r7, #12]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	1fff73f8 	.word	0x1fff73f8
 8006e14:	1fff7000 	.word	0x1fff7000

08006e18 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	605a      	str	r2, [r3, #4]
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e40:	f3ef 8310 	mrs	r3, PRIMASK
 8006e44:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e46:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006e48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e4a:	b672      	cpsid	i
}
 8006e4c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d102      	bne.n	8006e5e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	75fb      	strb	r3, [r7, #23]
 8006e5c:	e001      	b.n	8006e62 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	75fb      	strb	r3, [r7, #23]
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	f383 8810 	msr	PRIMASK, r3
}
 8006e6c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	371c      	adds	r7, #28
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e86:	f3ef 8310 	mrs	r3, PRIMASK
 8006e8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006e8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e90:	b672      	cpsid	i
}
 8006e92:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	605a      	str	r2, [r3, #4]
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f383 8810 	msr	PRIMASK, r3
}
 8006eba:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006ebc:	bf00      	nop
 8006ebe:	371c      	adds	r7, #28
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ed6:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006eda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006edc:	b672      	cpsid	i
}
 8006ede:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	683a      	ldr	r2, [r7, #0]
 8006ef2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f383 8810 	msr	PRIMASK, r3
}
 8006f06:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006f08:	bf00      	nop
 8006f0a:	371c      	adds	r7, #28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006f20:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f22:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006f24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f26:	b672      	cpsid	i
}
 8006f28:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	6812      	ldr	r2, [r2, #0]
 8006f32:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	6852      	ldr	r2, [r2, #4]
 8006f3c:	605a      	str	r2, [r3, #4]
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f383 8810 	msr	PRIMASK, r3
}
 8006f48:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006f4a:	bf00      	nop
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr

08006f56 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b086      	sub	sp, #24
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f60:	f3ef 8310 	mrs	r3, PRIMASK
 8006f64:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f66:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006f68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f6a:	b672      	cpsid	i
}
 8006f6c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f7ff ffca 	bl	8006f14 <LST_remove_node>
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f383 8810 	msr	PRIMASK, r3
}
 8006f8a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006f8c:	bf00      	nop
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8006f94:	b480      	push	{r7}
 8006f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8006f98:	4b03      	ldr	r3, [pc, #12]	; (8006fa8 <LL_FLASH_GetUDN+0x14>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	1fff7580 	.word	0x1fff7580

08006fac <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8006fac:	b480      	push	{r7}
 8006fae:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8006fb0:	4b03      	ldr	r3, [pc, #12]	; (8006fc0 <LL_FLASH_GetDeviceID+0x14>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	b2db      	uxtb	r3, r3
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	1fff7584 	.word	0x1fff7584

08006fc4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8006fc8:	4b03      	ldr	r3, [pc, #12]	; (8006fd8 <LL_FLASH_GetSTCompanyID+0x14>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	0a1b      	lsrs	r3, r3, #8
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	1fff7584 	.word	0x1fff7584

08006fdc <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b090      	sub	sp, #64	; 0x40
 8006fe0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006fe2:	2392      	movs	r3, #146	; 0x92
 8006fe4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8006fe8:	1d3b      	adds	r3, r7, #4
 8006fea:	2238      	movs	r2, #56	; 0x38
 8006fec:	2100      	movs	r1, #0
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f001 fd2d 	bl	8008a4e <memset>
 8006ff4:	231e      	movs	r3, #30
 8006ff6:	833b      	strh	r3, [r7, #24]
 8006ff8:	2304      	movs	r3, #4
 8006ffa:	837b      	strh	r3, [r7, #26]
 8006ffc:	f240 530a 	movw	r3, #1290	; 0x50a
 8007000:	83bb      	strh	r3, [r7, #28]
 8007002:	2302      	movs	r3, #2
 8007004:	77bb      	strb	r3, [r7, #30]
 8007006:	2301      	movs	r3, #1
 8007008:	77fb      	strb	r3, [r7, #31]
 800700a:	2312      	movs	r3, #18
 800700c:	f887 3020 	strb.w	r3, [r7, #32]
 8007010:	2327      	movs	r3, #39	; 0x27
 8007012:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007016:	239c      	movs	r3, #156	; 0x9c
 8007018:	847b      	strh	r3, [r7, #34]	; 0x22
 800701a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800701e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007020:	23ff      	movs	r3, #255	; 0xff
 8007022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007026:	f44f 73a4 	mov.w	r3, #328	; 0x148
 800702a:	62bb      	str	r3, [r7, #40]	; 0x28
 800702c:	2301      	movs	r3, #1
 800702e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007030:	2320      	movs	r3, #32
 8007032:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8007036:	2303      	movs	r3, #3
 8007038:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800703c:	2372      	movs	r3, #114	; 0x72
 800703e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8007042:	f000 fa3f 	bl	80074c4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007046:	2101      	movs	r1, #1
 8007048:	2002      	movs	r0, #2
 800704a:	f001 f95b 	bl	8008304 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800704e:	4a1b      	ldr	r2, [pc, #108]	; (80070bc <APP_BLE_Init+0xe0>)
 8007050:	2100      	movs	r1, #0
 8007052:	2010      	movs	r0, #16
 8007054:	f001 fa82 	bl	800855c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8007058:	1d3b      	adds	r3, r7, #4
 800705a:	4618      	mov	r0, r3
 800705c:	f7ff f8b0 	bl	80061c0 <SHCI_C2_BLE_Init>
 8007060:	4603      	mov	r3, r0
 8007062:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 8007066:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <APP_BLE_Init+0x96>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800706e:	f7fa fe4a 	bl	8001d06 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8007072:	f000 fa3d 	bl	80074f0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007076:	f7fe ffe1 	bl	800603c <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 800707a:	4a11      	ldr	r2, [pc, #68]	; (80070c0 <APP_BLE_Init+0xe4>)
 800707c:	2100      	movs	r1, #0
 800707e:	2001      	movs	r0, #1
 8007080:	f001 fa6c 	bl	800855c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
 8007084:	4a0f      	ldr	r2, [pc, #60]	; (80070c4 <APP_BLE_Init+0xe8>)
 8007086:	2100      	movs	r1, #0
 8007088:	2002      	movs	r0, #2
 800708a:	f001 fa67 	bl	800855c <UTIL_SEQ_RegTask>
  //UTIL_SEQ_SetTask(1<<CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_1);

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800708e:	4b0e      	ldr	r3, [pc, #56]	; (80070c8 <APP_BLE_Init+0xec>)
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /*Radio mask Activity*/
#if (OOB_DEMO != 0)
  ret = aci_hal_set_radio_activity_mask(0x0020);
 8007096:	2020      	movs	r0, #32
 8007098:	f7fe fdf6 	bl	8005c88 <aci_hal_set_radio_activity_mask>
 800709c:	4603      	mov	r3, r0
 800709e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  APP_DBG_MSG("\n");
#endif
  /**
   * Initialize P2P Client Application
   */
  P2PC_APP_Init();
 80070a2:	f000 fbff 	bl	80078a4 <P2PC_APP_Init>
  /* USER CODE BEGIN APP_BLE_Init_3 */

  /* USER CODE END APP_BLE_Init_3 */

#if (OOB_DEMO != 0)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 80070a6:	4b09      	ldr	r3, [pc, #36]	; (80070cc <APP_BLE_Init+0xf0>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	4909      	ldr	r1, [pc, #36]	; (80070d0 <APP_BLE_Init+0xf4>)
 80070ac:	2000      	movs	r0, #0
 80070ae:	f7fa faa5 	bl	80015fc <HW_TS_Create>
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
#endif
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */
  return;
 80070b2:	bf00      	nop
}
 80070b4:	3740      	adds	r7, #64	; 0x40
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	080063dd 	.word	0x080063dd
 80070c0:	08007671 	.word	0x08007671
 80070c4:	080076e5 	.word	0x080076e5
 80070c8:	2000031c 	.word	0x2000031c
 80070cc:	08007759 	.word	0x08007759
 80070d0:	2000039d 	.word	0x2000039d

080070d4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *pckt)
{
 80070d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070d6:	b09b      	sub	sp, #108	; 0x6c
 80070d8:	af06      	add	r7, sp, #24
 80070da:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  evt_blecore_aci *blecore_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3301      	adds	r3, #1
 80070e0:	647b      	str	r3, [r7, #68]	; 0x44
  hci_disconnection_complete_event_rp0 *cc = (void *) event_pckt->data;
 80070e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070e4:	3302      	adds	r3, #2
 80070e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t result;
  uint8_t event_type, event_data_size;
  int k = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint8_t adtype, adlength;
#if (OOB_DEMO != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80070ec:	2392      	movs	r3, #146	; 0x92
 80070ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif
  switch (event_pckt->evt)
 80070f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	2bff      	cmp	r3, #255	; 0xff
 80070f8:	d009      	beq.n	800710e <SVCCTL_App_Notification+0x3a>
 80070fa:	2bff      	cmp	r3, #255	; 0xff
 80070fc:	f300 8199 	bgt.w	8007432 <SVCCTL_App_Notification+0x35e>
 8007100:	2b05      	cmp	r3, #5
 8007102:	f000 8088 	beq.w	8007216 <SVCCTL_App_Notification+0x142>
 8007106:	2b3e      	cmp	r3, #62	; 0x3e
 8007108:	f000 80a0 	beq.w	800724c <SVCCTL_App_Notification+0x178>

    default:
      /* USER CODE BEGIN evt_default */

      /* USER CODE END evt_default */
      break;
 800710c:	e191      	b.n	8007432 <SVCCTL_App_Notification+0x35e>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800710e:	4b8c      	ldr	r3, [pc, #560]	; (8007340 <SVCCTL_App_Notification+0x26c>)
 8007110:	2201      	movs	r2, #1
 8007112:	701a      	strb	r2, [r3, #0]
        blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007116:	3302      	adds	r3, #2
 8007118:	63bb      	str	r3, [r7, #56]	; 0x38
        switch (blecore_evt->ecode)
 800711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711c:	881b      	ldrh	r3, [r3, #0]
 800711e:	b29b      	uxth	r3, r3
 8007120:	f640 0202 	movw	r2, #2050	; 0x802
 8007124:	4293      	cmp	r3, r2
 8007126:	d023      	beq.n	8007170 <SVCCTL_App_Notification+0x9c>
 8007128:	f640 0202 	movw	r2, #2050	; 0x802
 800712c:	4293      	cmp	r3, r2
 800712e:	dc6e      	bgt.n	800720e <SVCCTL_App_Notification+0x13a>
 8007130:	2b04      	cmp	r3, #4
 8007132:	d064      	beq.n	80071fe <SVCCTL_App_Notification+0x12a>
 8007134:	f240 4207 	movw	r2, #1031	; 0x407
 8007138:	4293      	cmp	r3, r2
 800713a:	d168      	bne.n	800720e <SVCCTL_App_Notification+0x13a>
              aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blecore_evt->data;
 800713c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713e:	3302      	adds	r3, #2
 8007140:	633b      	str	r3, [r7, #48]	; 0x30
              if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	2b02      	cmp	r3, #2
 8007148:	d163      	bne.n	8007212 <SVCCTL_App_Notification+0x13e>
                  && gap_evt_proc_complete->Status == 0x00)
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	785b      	ldrb	r3, [r3, #1]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d15f      	bne.n	8007212 <SVCCTL_App_Notification+0x13e>
                if (BleApplicationContext.DeviceServerFound == 0x01 && BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 8007152:	4b7c      	ldr	r3, [pc, #496]	; (8007344 <SVCCTL_App_Notification+0x270>)
 8007154:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8007158:	2b01      	cmp	r3, #1
 800715a:	d15a      	bne.n	8007212 <SVCCTL_App_Notification+0x13e>
 800715c:	4b79      	ldr	r3, [pc, #484]	; (8007344 <SVCCTL_App_Notification+0x270>)
 800715e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007162:	2b06      	cmp	r3, #6
 8007164:	d055      	beq.n	8007212 <SVCCTL_App_Notification+0x13e>
                  UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 8007166:	2100      	movs	r1, #0
 8007168:	2002      	movs	r0, #2
 800716a:	f001 fa19 	bl	80085a0 <UTIL_SEQ_SetTask>
            break;
 800716e:	e050      	b.n	8007212 <SVCCTL_App_Notification+0x13e>
              aci_l2cap_connection_update_req_event_rp0 *pr = (aci_l2cap_connection_update_req_event_rp0 *) blecore_evt->data;
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007172:	3302      	adds	r3, #2
 8007174:	637b      	str	r3, [r7, #52]	; 0x34
              ret = aci_hal_set_radio_activity_mask(0x0000);
 8007176:	2000      	movs	r0, #0
 8007178:	f7fe fd86 	bl	8005c88 <aci_hal_set_radio_activity_mask>
 800717c:	4603      	mov	r3, r0
 800717e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 8007182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007184:	789a      	ldrb	r2, [r3, #2]
 8007186:	4b70      	ldr	r3, [pc, #448]	; (8007348 <SVCCTL_App_Notification+0x274>)
 8007188:	701a      	strb	r2, [r3, #0]
              APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 800718a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007190:	b29a      	uxth	r2, r3
 8007192:	4b6d      	ldr	r3, [pc, #436]	; (8007348 <SVCCTL_App_Notification+0x274>)
 8007194:	805a      	strh	r2, [r3, #2]
              APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 8007196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007198:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800719c:	b29a      	uxth	r2, r3
 800719e:	4b6a      	ldr	r3, [pc, #424]	; (8007348 <SVCCTL_App_Notification+0x274>)
 80071a0:	809a      	strh	r2, [r3, #4]
              APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 80071a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	4b67      	ldr	r3, [pc, #412]	; (8007348 <SVCCTL_App_Notification+0x274>)
 80071ac:	80da      	strh	r2, [r3, #6]
              APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 80071ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b0:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80071b4:	b29a      	uxth	r2, r3
 80071b6:	4b64      	ldr	r3, [pc, #400]	; (8007348 <SVCCTL_App_Notification+0x274>)
 80071b8:	815a      	strh	r2, [r3, #10]
              ret = aci_l2cap_connection_parameter_update_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 80071ba:	4b62      	ldr	r3, [pc, #392]	; (8007344 <SVCCTL_App_Notification+0x270>)
 80071bc:	8ad8      	ldrh	r0, [r3, #22]
 80071be:	4b62      	ldr	r3, [pc, #392]	; (8007348 <SVCCTL_App_Notification+0x274>)
 80071c0:	8899      	ldrh	r1, [r3, #4]
 80071c2:	4b61      	ldr	r3, [pc, #388]	; (8007348 <SVCCTL_App_Notification+0x274>)
 80071c4:	88dc      	ldrh	r4, [r3, #6]
 80071c6:	4b60      	ldr	r3, [pc, #384]	; (8007348 <SVCCTL_App_Notification+0x274>)
 80071c8:	891d      	ldrh	r5, [r3, #8]
 80071ca:	4b5f      	ldr	r3, [pc, #380]	; (8007348 <SVCCTL_App_Notification+0x274>)
 80071cc:	895b      	ldrh	r3, [r3, #10]
 80071ce:	4a5e      	ldr	r2, [pc, #376]	; (8007348 <SVCCTL_App_Notification+0x274>)
 80071d0:	7812      	ldrb	r2, [r2, #0]
 80071d2:	2601      	movs	r6, #1
 80071d4:	9604      	str	r6, [sp, #16]
 80071d6:	9203      	str	r2, [sp, #12]
 80071d8:	2210      	movs	r2, #16
 80071da:	9202      	str	r2, [sp, #8]
 80071dc:	2210      	movs	r2, #16
 80071de:	9201      	str	r2, [sp, #4]
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	462b      	mov	r3, r5
 80071e4:	4622      	mov	r2, r4
 80071e6:	f7fe fdc7 	bl	8005d78 <aci_l2cap_connection_parameter_update_resp>
 80071ea:	4603      	mov	r3, r0
 80071ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              ret = aci_hal_set_radio_activity_mask(0x0020);
 80071f0:	2020      	movs	r0, #32
 80071f2:	f7fe fd49 	bl	8005c88 <aci_hal_set_radio_activity_mask>
 80071f6:	4603      	mov	r3, r0
 80071f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 80071fc:	e00a      	b.n	8007214 <SVCCTL_App_Notification+0x140>
              HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 80071fe:	4b51      	ldr	r3, [pc, #324]	; (8007344 <SVCCTL_App_Notification+0x270>)
 8007200:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007204:	210a      	movs	r1, #10
 8007206:	4618      	mov	r0, r3
 8007208:	f7fa fafe 	bl	8001808 <HW_TS_Start>
            break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800720c:	e002      	b.n	8007214 <SVCCTL_App_Notification+0x140>
            break;
 800720e:	bf00      	nop
 8007210:	e112      	b.n	8007438 <SVCCTL_App_Notification+0x364>
            break;
 8007212:	bf00      	nop
      break;
 8007214:	e110      	b.n	8007438 <SVCCTL_App_Notification+0x364>
        if (cc->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8007216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007218:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800721c:	b29a      	uxth	r2, r3
 800721e:	4b49      	ldr	r3, [pc, #292]	; (8007344 <SVCCTL_App_Notification+0x270>)
 8007220:	8adb      	ldrh	r3, [r3, #22]
 8007222:	429a      	cmp	r2, r3
 8007224:	f040 8107 	bne.w	8007436 <SVCCTL_App_Notification+0x362>
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8007228:	4b46      	ldr	r3, [pc, #280]	; (8007344 <SVCCTL_App_Notification+0x270>)
 800722a:	2200      	movs	r2, #0
 800722c:	82da      	strh	r2, [r3, #22]
          BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800722e:	4b45      	ldr	r3, [pc, #276]	; (8007344 <SVCCTL_App_Notification+0x270>)
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8007236:	4b42      	ldr	r3, [pc, #264]	; (8007340 <SVCCTL_App_Notification+0x26c>)
 8007238:	2201      	movs	r2, #1
 800723a:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800723c:	4b41      	ldr	r3, [pc, #260]	; (8007344 <SVCCTL_App_Notification+0x270>)
 800723e:	8ada      	ldrh	r2, [r3, #22]
 8007240:	4b3f      	ldr	r3, [pc, #252]	; (8007340 <SVCCTL_App_Notification+0x26c>)
 8007242:	805a      	strh	r2, [r3, #2]
          P2PC_APP_Notification(&handleNotification);
 8007244:	483e      	ldr	r0, [pc, #248]	; (8007340 <SVCCTL_App_Notification+0x26c>)
 8007246:	f000 fb4d 	bl	80078e4 <P2PC_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800724a:	e0f4      	b.n	8007436 <SVCCTL_App_Notification+0x362>
        meta_evt = (evt_le_meta_event*) event_pckt->data;
 800724c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800724e:	3302      	adds	r3, #2
 8007250:	62fb      	str	r3, [r7, #44]	; 0x2c
        switch (meta_evt->subevent)
 8007252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d002      	beq.n	8007260 <SVCCTL_App_Notification+0x18c>
 800725a:	2b02      	cmp	r3, #2
 800725c:	d01f      	beq.n	800729e <SVCCTL_App_Notification+0x1ca>
            break;
 800725e:	e0e7      	b.n	8007430 <SVCCTL_App_Notification+0x35c>
            connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8007260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007262:	3301      	adds	r3, #1
 8007264:	617b      	str	r3, [r7, #20]
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800726c:	b29a      	uxth	r2, r3
 800726e:	4b35      	ldr	r3, [pc, #212]	; (8007344 <SVCCTL_App_Notification+0x270>)
 8007270:	82da      	strh	r2, [r3, #22]
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8007272:	4b34      	ldr	r3, [pc, #208]	; (8007344 <SVCCTL_App_Notification+0x270>)
 8007274:	2206      	movs	r2, #6
 8007276:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800727a:	4b31      	ldr	r3, [pc, #196]	; (8007340 <SVCCTL_App_Notification+0x26c>)
 800727c:	2200      	movs	r2, #0
 800727e:	701a      	strb	r2, [r3, #0]
            handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007280:	4b30      	ldr	r3, [pc, #192]	; (8007344 <SVCCTL_App_Notification+0x270>)
 8007282:	8ada      	ldrh	r2, [r3, #22]
 8007284:	4b2e      	ldr	r3, [pc, #184]	; (8007340 <SVCCTL_App_Notification+0x26c>)
 8007286:	805a      	strh	r2, [r3, #2]
            P2PC_APP_Notification(&handleNotification);
 8007288:	482d      	ldr	r0, [pc, #180]	; (8007340 <SVCCTL_App_Notification+0x26c>)
 800728a:	f000 fb2b 	bl	80078e4 <P2PC_APP_Notification>
            result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800728e:	4b2d      	ldr	r3, [pc, #180]	; (8007344 <SVCCTL_App_Notification+0x270>)
 8007290:	8adb      	ldrh	r3, [r3, #22]
 8007292:	4618      	mov	r0, r3
 8007294:	f7fe fbb4 	bl	8005a00 <aci_gatt_disc_all_primary_services>
 8007298:	4603      	mov	r3, r0
 800729a:	74fb      	strb	r3, [r7, #19]
            break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800729c:	e0c8      	b.n	8007430 <SVCCTL_App_Notification+0x35c>
              le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	3301      	adds	r3, #1
 80072a2:	62bb      	str	r3, [r7, #40]	; 0x28
              event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 80072a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a6:	785b      	ldrb	r3, [r3, #1]
 80072a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 80072ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ae:	7a5b      	ldrb	r3, [r3, #9]
 80072b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
              adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 80072b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b6:	3309      	adds	r3, #9
 80072b8:	3301      	adds	r3, #1
 80072ba:	623b      	str	r3, [r7, #32]
              RSSI = (int8_t)*(uint8_t*) (adv_report_data + le_advertising_event->Advertising_Report[0].Length_Data);
 80072bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072be:	7a5b      	ldrb	r3, [r3, #9]
 80072c0:	461a      	mov	r2, r3
 80072c2:	6a3b      	ldr	r3, [r7, #32]
 80072c4:	4413      	add	r3, r2
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	77fb      	strb	r3, [r7, #31]
              k = 0;
 80072ca:	2300      	movs	r3, #0
 80072cc:	64fb      	str	r3, [r7, #76]	; 0x4c
              if (event_type == ADV_NONCONN_IND)
 80072ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	f040 80ab 	bne.w	800742e <SVCCTL_App_Notification+0x35a>
   			   char MAC_Address[7] = "\0";
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	f107 0310 	add.w	r3, r7, #16
 80072e0:	2100      	movs	r1, #0
 80072e2:	460a      	mov	r2, r1
 80072e4:	801a      	strh	r2, [r3, #0]
 80072e6:	460a      	mov	r2, r1
 80072e8:	709a      	strb	r2, [r3, #2]
   			   for(int i=5; i>=0; i--) {
 80072ea:	2305      	movs	r3, #5
 80072ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80072ee:	e016      	b.n	800731e <SVCCTL_App_Notification+0x24a>
   				   sprintf(address, "%02X", le_advertising_event->Advertising_Report[0].Address[i]);
 80072f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072f4:	4413      	add	r3, r2
 80072f6:	3303      	adds	r3, #3
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	f107 0308 	add.w	r3, r7, #8
 8007300:	4912      	ldr	r1, [pc, #72]	; (800734c <SVCCTL_App_Notification+0x278>)
 8007302:	4618      	mov	r0, r3
 8007304:	f001 fb40 	bl	8008988 <siprintf>
   				   strcat(MAC_Address,address);
 8007308:	f107 0208 	add.w	r2, r7, #8
 800730c:	f107 030c 	add.w	r3, r7, #12
 8007310:	4611      	mov	r1, r2
 8007312:	4618      	mov	r0, r3
 8007314:	f001 fba3 	bl	8008a5e <strcat>
   			   for(int i=5; i>=0; i--) {
 8007318:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800731a:	3b01      	subs	r3, #1
 800731c:	64bb      	str	r3, [r7, #72]	; 0x48
 800731e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007320:	2b00      	cmp	r3, #0
 8007322:	dae5      	bge.n	80072f0 <SVCCTL_App_Notification+0x21c>
   			   if(!strcmp(MAC_Address, "0080E121BEFA")) {
 8007324:	f107 030c 	add.w	r3, r7, #12
 8007328:	4909      	ldr	r1, [pc, #36]	; (8007350 <SVCCTL_App_Notification+0x27c>)
 800732a:	4618      	mov	r0, r3
 800732c:	f7f8 ff28 	bl	8000180 <strcmp>
 8007330:	4603      	mov	r3, r0
 8007332:	2b00      	cmp	r3, #0
 8007334:	d17b      	bne.n	800742e <SVCCTL_App_Notification+0x35a>
   				   printf("Found\n\r");
 8007336:	4807      	ldr	r0, [pc, #28]	; (8007354 <SVCCTL_App_Notification+0x280>)
 8007338:	f001 fb14 	bl	8008964 <iprintf>
					while(k < event_data_size)
 800733c:	e072      	b.n	8007424 <SVCCTL_App_Notification+0x350>
 800733e:	bf00      	nop
 8007340:	20000318 	.word	0x20000318
 8007344:	2000031c 	.word	0x2000031c
 8007348:	200003a0 	.word	0x200003a0
 800734c:	08009a88 	.word	0x08009a88
 8007350:	08009a90 	.word	0x08009a90
 8007354:	08009aa0 	.word	0x08009aa0
					  adlength = adv_report_data[k];
 8007358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800735a:	6a3a      	ldr	r2, [r7, #32]
 800735c:	4413      	add	r3, r2
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	77bb      	strb	r3, [r7, #30]
					  adtype = adv_report_data[k + 1];
 8007362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007364:	3301      	adds	r3, #1
 8007366:	6a3a      	ldr	r2, [r7, #32]
 8007368:	4413      	add	r3, r2
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	777b      	strb	r3, [r7, #29]
					  uint16_t Company_ID = (adv_report_data[k+2] << 8) | (adv_report_data[k+3]);
 800736e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007370:	3302      	adds	r3, #2
 8007372:	6a3a      	ldr	r2, [r7, #32]
 8007374:	4413      	add	r3, r2
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	021b      	lsls	r3, r3, #8
 800737a:	b21a      	sxth	r2, r3
 800737c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800737e:	3303      	adds	r3, #3
 8007380:	6a39      	ldr	r1, [r7, #32]
 8007382:	440b      	add	r3, r1
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	b21b      	sxth	r3, r3
 8007388:	4313      	orrs	r3, r2
 800738a:	b21b      	sxth	r3, r3
 800738c:	837b      	strh	r3, [r7, #26]
					  uint16_t Beacon_type = (adv_report_data[k+4] << 8) | (adv_report_data[k+5]);
 800738e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007390:	3304      	adds	r3, #4
 8007392:	6a3a      	ldr	r2, [r7, #32]
 8007394:	4413      	add	r3, r2
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	021b      	lsls	r3, r3, #8
 800739a:	b21a      	sxth	r2, r3
 800739c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800739e:	3305      	adds	r3, #5
 80073a0:	6a39      	ldr	r1, [r7, #32]
 80073a2:	440b      	add	r3, r1
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	b21b      	sxth	r3, r3
 80073a8:	4313      	orrs	r3, r2
 80073aa:	b21b      	sxth	r3, r3
 80073ac:	833b      	strh	r3, [r7, #24]
					  switch (adtype)
 80073ae:	7f7b      	ldrb	r3, [r7, #29]
 80073b0:	2bff      	cmp	r3, #255	; 0xff
 80073b2:	d009      	beq.n	80073c8 <SVCCTL_App_Notification+0x2f4>
 80073b4:	2bff      	cmp	r3, #255	; 0xff
 80073b6:	dc29      	bgt.n	800740c <SVCCTL_App_Notification+0x338>
 80073b8:	2b16      	cmp	r3, #22
 80073ba:	d029      	beq.n	8007410 <SVCCTL_App_Notification+0x33c>
 80073bc:	2b16      	cmp	r3, #22
 80073be:	dc25      	bgt.n	800740c <SVCCTL_App_Notification+0x338>
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d027      	beq.n	8007414 <SVCCTL_App_Notification+0x340>
 80073c4:	2b0a      	cmp	r3, #10
						  break;
 80073c6:	e028      	b.n	800741a <SVCCTL_App_Notification+0x346>
						  if ((Company_ID == 0x4C00) & (Beacon_type == 0x0215))
 80073c8:	8b7b      	ldrh	r3, [r7, #26]
 80073ca:	f5b3 4f98 	cmp.w	r3, #19456	; 0x4c00
 80073ce:	bf0c      	ite	eq
 80073d0:	2301      	moveq	r3, #1
 80073d2:	2300      	movne	r3, #0
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	8b3b      	ldrh	r3, [r7, #24]
 80073d8:	f240 2115 	movw	r1, #533	; 0x215
 80073dc:	428b      	cmp	r3, r1
 80073de:	bf0c      	ite	eq
 80073e0:	2301      	moveq	r3, #1
 80073e2:	2300      	movne	r3, #0
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	4013      	ands	r3, r2
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d014      	beq.n	8007418 <SVCCTL_App_Notification+0x344>
						   printf("Device found. RSSI: %d\n\r", RSSI);
 80073ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80073f2:	4619      	mov	r1, r3
 80073f4:	4813      	ldr	r0, [pc, #76]	; (8007444 <SVCCTL_App_Notification+0x370>)
 80073f6:	f001 fab5 	bl	8008964 <iprintf>
						   BleApplicationContext.DeviceServerFound = 0x01;
 80073fa:	4b13      	ldr	r3, [pc, #76]	; (8007448 <SVCCTL_App_Notification+0x374>)
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
						   SERVER_REMOTE_ADDR_TYPE = le_advertising_event->Advertising_Report[0].Address_Type;
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	789a      	ldrb	r2, [r3, #2]
 8007406:	4b11      	ldr	r3, [pc, #68]	; (800744c <SVCCTL_App_Notification+0x378>)
 8007408:	701a      	strb	r2, [r3, #0]
						  break;
 800740a:	e005      	b.n	8007418 <SVCCTL_App_Notification+0x344>
						  break;
 800740c:	bf00      	nop
 800740e:	e004      	b.n	800741a <SVCCTL_App_Notification+0x346>
						  break;
 8007410:	bf00      	nop
 8007412:	e002      	b.n	800741a <SVCCTL_App_Notification+0x346>
						  break;
 8007414:	bf00      	nop
 8007416:	e000      	b.n	800741a <SVCCTL_App_Notification+0x346>
						  break;
 8007418:	bf00      	nop
					  k += adlength + 1;
 800741a:	7fbb      	ldrb	r3, [r7, #30]
 800741c:	3301      	adds	r3, #1
 800741e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007420:	4413      	add	r3, r2
 8007422:	64fb      	str	r3, [r7, #76]	; 0x4c
					while(k < event_data_size)
 8007424:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007428:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800742a:	429a      	cmp	r2, r3
 800742c:	db94      	blt.n	8007358 <SVCCTL_App_Notification+0x284>
            break;
 800742e:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8007430:	e002      	b.n	8007438 <SVCCTL_App_Notification+0x364>
      break;
 8007432:	bf00      	nop
 8007434:	e000      	b.n	8007438 <SVCCTL_App_Notification+0x364>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007436:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007438:	2301      	movs	r3, #1
}
 800743a:	4618      	mov	r0, r3
 800743c:	3754      	adds	r7, #84	; 0x54
 800743e:	46bd      	mov	sp, r7
 8007440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007442:	bf00      	nop
 8007444:	08009aa8 	.word	0x08009aa8
 8007448:	2000031c 	.word	0x2000031c
 800744c:	20000316 	.word	0x20000316

08007450 <APP_BLE_Get_Client_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status(uint16_t Connection_Handle)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	4603      	mov	r3, r0
 8007458:	80fb      	strh	r3, [r7, #6]
  if (BleApplicationContext.BleApplicationContext_legacy.connectionHandle == Connection_Handle)
 800745a:	4b08      	ldr	r3, [pc, #32]	; (800747c <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800745c:	8adb      	ldrh	r3, [r3, #22]
 800745e:	88fa      	ldrh	r2, [r7, #6]
 8007460:	429a      	cmp	r2, r3
 8007462:	d103      	bne.n	800746c <APP_BLE_Get_Client_Connection_Status+0x1c>
  {
    return BleApplicationContext.Device_Connection_Status;
 8007464:	4b05      	ldr	r3, [pc, #20]	; (800747c <APP_BLE_Get_Client_Connection_Status+0x2c>)
 8007466:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800746a:	e000      	b.n	800746e <APP_BLE_Get_Client_Connection_Status+0x1e>
  }
  return APP_BLE_IDLE;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	2000031c 	.word	0x2000031c

08007480 <APP_BLE_Key_Button1_Action>:
/* USER CODE BEGIN FD */
void APP_BLE_Key_Button1_Action(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	af00      	add	r7, sp, #0

   printf("Start BLE Scan\n\r");
 8007484:	4804      	ldr	r0, [pc, #16]	; (8007498 <APP_BLE_Key_Button1_Action+0x18>)
 8007486:	f001 fa6d 	bl	8008964 <iprintf>
   UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 800748a:	2100      	movs	r1, #0
 800748c:	2001      	movs	r0, #1
 800748e:	f001 f887 	bl	80085a0 <UTIL_SEQ_SetTask>
   //BSP_LED_On(LED_BLUE);
   //BSP_LED_Off(LED_RED);


}
 8007492:	bf00      	nop
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	08009ac4 	.word	0x08009ac4

0800749c <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
	printf("Stop BLE Scan\n\r");
 80074a0:	4803      	ldr	r0, [pc, #12]	; (80074b0 <APP_BLE_Key_Button2_Action+0x14>)
 80074a2:	f001 fa5f 	bl	8008964 <iprintf>
	aci_gap_terminate_gap_proc(GAP_OBSERVATION_PROC);
 80074a6:	2080      	movs	r0, #128	; 0x80
 80074a8:	f7fe f8e0 	bl	800566c <aci_gap_terminate_gap_proc>
    //BSP_LED_Off(LED_BLUE);
    //BSP_LED_On(LED_RED);
}
 80074ac:	bf00      	nop
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	08009ad8 	.word	0x08009ad8

080074b4 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 80074b4:	b480      	push	{r7}
 80074b6:	af00      	add	r7, sp, #0

}
 80074b8:	bf00      	nop
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
	...

080074c4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80074ca:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <Ble_Tl_Init+0x20>)
 80074cc:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80074ce:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <Ble_Tl_Init+0x24>)
 80074d0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80074d2:	463b      	mov	r3, r7
 80074d4:	4619      	mov	r1, r3
 80074d6:	4805      	ldr	r0, [pc, #20]	; (80074ec <Ble_Tl_Init+0x28>)
 80074d8:	f7fe ff64 	bl	80063a4 <hci_init>

  return;
 80074dc:	bf00      	nop
}
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	200300d8 	.word	0x200300d8
 80074e8:	0800786d 	.word	0x0800786d
 80074ec:	08007835 	.word	0x08007835

080074f0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80074f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074f2:	b08d      	sub	sp, #52	; 0x34
 80074f4:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;

  uint16_t a_appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80074f6:	2300      	movs	r3, #0
 80074f8:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80074fa:	2392      	movs	r3, #146	; 0x92
 80074fc:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80074fe:	f7fe fc17 	bl	8005d30 <hci_reset>
 8007502:	4603      	mov	r3, r0
 8007504:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8007506:	f000 f92f 	bl	8007768 <BleGetBdAddress>
 800750a:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	2106      	movs	r1, #6
 8007510:	2000      	movs	r0, #0
 8007512:	f7fe facd 	bl	8005ab0 <aci_hal_write_config_data>
 8007516:	4603      	mov	r3, r0
 8007518:	75fb      	strb	r3, [r7, #23]
   }

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800751a:	4a4e      	ldr	r2, [pc, #312]	; (8007654 <Ble_Hci_Gap_Gatt_Init+0x164>)
 800751c:	2110      	movs	r1, #16
 800751e:	2018      	movs	r0, #24
 8007520:	f7fe fac6 	bl	8005ab0 <aci_hal_write_config_data>
 8007524:	4603      	mov	r3, r0
 8007526:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8007528:	4a4b      	ldr	r2, [pc, #300]	; (8007658 <Ble_Hci_Gap_Gatt_Init+0x168>)
 800752a:	2110      	movs	r1, #16
 800752c:	2008      	movs	r0, #8
 800752e:	f7fe fabf 	bl	8005ab0 <aci_hal_write_config_data>
 8007532:	4603      	mov	r3, r0
 8007534:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8007536:	2118      	movs	r1, #24
 8007538:	2001      	movs	r0, #1
 800753a:	f7fe fb3e 	bl	8005bba <aci_hal_set_tx_power_level>
 800753e:	4603      	mov	r3, r0
 8007540:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8007542:	f7fe f98f 	bl	8005864 <aci_gatt_init>
 8007546:	4603      	mov	r3, r0
 8007548:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]
#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
#endif /* BLE_CFG_PERIPHERAL == 1 */

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 800754e:	7bfb      	ldrb	r3, [r7, #15]
 8007550:	f043 0304 	orr.w	r3, r3, #4
 8007554:	73fb      	strb	r3, [r7, #15]
#endif /* BLE_CFG_CENTRAL == 1 */

/* USER CODE BEGIN Role_Mngt*/
role |= GAP_OBSERVER_ROLE;
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	f043 0308 	orr.w	r3, r3, #8
 800755c:	73fb      	strb	r3, [r7, #15]
/* USER CODE END Role_Mngt */

  if (role > 0)
 800755e:	7bfb      	ldrb	r3, [r7, #15]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d02b      	beq.n	80075bc <Ble_Hci_Gap_Gatt_Init+0xcc>
  {
    const char *name = "P2PCLI";
 8007564:	4b3d      	ldr	r3, [pc, #244]	; (800765c <Ble_Hci_Gap_Gatt_Init+0x16c>)
 8007566:	60bb      	str	r3, [r7, #8]

    ret = aci_gap_init(role,
 8007568:	1dba      	adds	r2, r7, #6
 800756a:	7bf8      	ldrb	r0, [r7, #15]
 800756c:	1cbb      	adds	r3, r7, #2
 800756e:	9301      	str	r3, [sp, #4]
 8007570:	1d3b      	adds	r3, r7, #4
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	4613      	mov	r3, r2
 8007576:	2207      	movs	r2, #7
 8007578:	2100      	movs	r1, #0
 800757a:	f7fd fecb 	bl	8005314 <aci_gap_init>
 800757e:	4603      	mov	r3, r0
 8007580:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8007582:	7dfb      	ldrb	r3, [r7, #23]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d005      	beq.n	8007594 <Ble_Hci_Gap_Gatt_Init+0xa4>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
      printf("  Fail   : aci_gap_init command, result: 0x%x \n\r", ret);
 8007588:	7dfb      	ldrb	r3, [r7, #23]
 800758a:	4619      	mov	r1, r3
 800758c:	4834      	ldr	r0, [pc, #208]	; (8007660 <Ble_Hci_Gap_Gatt_Init+0x170>)
 800758e:	f001 f9e9 	bl	8008964 <iprintf>
 8007592:	e002      	b.n	800759a <Ble_Hci_Gap_Gatt_Init+0xaa>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
      printf("  GAP Init command done \n\r");
 8007594:	4833      	ldr	r0, [pc, #204]	; (8007664 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8007596:	f001 f9e5 	bl	8008964 <iprintf>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800759a:	88fc      	ldrh	r4, [r7, #6]
 800759c:	88bd      	ldrh	r5, [r7, #4]
 800759e:	68b8      	ldr	r0, [r7, #8]
 80075a0:	f7f8 fdf8 	bl	8000194 <strlen>
 80075a4:	4603      	mov	r3, r0
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	4613      	mov	r3, r2
 80075ae:	2200      	movs	r2, #0
 80075b0:	4629      	mov	r1, r5
 80075b2:	4620      	mov	r0, r4
 80075b4:	f7fe f97b 	bl	80058ae <aci_gatt_update_char_value>
 80075b8:	4603      	mov	r3, r0
 80075ba:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80075bc:	88f8      	ldrh	r0, [r7, #6]
 80075be:	8879      	ldrh	r1, [r7, #2]
 80075c0:	463b      	mov	r3, r7
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	2302      	movs	r3, #2
 80075c6:	2200      	movs	r2, #0
 80075c8:	f7fe f971 	bl	80058ae <aci_gatt_update_char_value>
 80075cc:	4603      	mov	r3, r0
 80075ce:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80075d0:	4b25      	ldr	r3, [pc, #148]	; (8007668 <Ble_Hci_Gap_Gatt_Init+0x178>)
 80075d2:	2201      	movs	r2, #1
 80075d4:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80075d6:	4b24      	ldr	r3, [pc, #144]	; (8007668 <Ble_Hci_Gap_Gatt_Init+0x178>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fd fd82 	bl	80050e4 <aci_gap_set_io_capability>
 80075e0:	4603      	mov	r3, r0
 80075e2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80075e4:	4b20      	ldr	r3, [pc, #128]	; (8007668 <Ble_Hci_Gap_Gatt_Init+0x178>)
 80075e6:	2201      	movs	r2, #1
 80075e8:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80075ea:	4b1f      	ldr	r3, [pc, #124]	; (8007668 <Ble_Hci_Gap_Gatt_Init+0x178>)
 80075ec:	2208      	movs	r2, #8
 80075ee:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80075f0:	4b1d      	ldr	r3, [pc, #116]	; (8007668 <Ble_Hci_Gap_Gatt_Init+0x178>)
 80075f2:	2210      	movs	r2, #16
 80075f4:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80075f6:	4b1c      	ldr	r3, [pc, #112]	; (8007668 <Ble_Hci_Gap_Gatt_Init+0x178>)
 80075f8:	2201      	movs	r2, #1
 80075fa:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80075fc:	4b1a      	ldr	r3, [pc, #104]	; (8007668 <Ble_Hci_Gap_Gatt_Init+0x178>)
 80075fe:	4a1b      	ldr	r2, [pc, #108]	; (800766c <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8007600:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8007602:	4b19      	ldr	r3, [pc, #100]	; (8007668 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8007604:	2201      	movs	r2, #1
 8007606:	709a      	strb	r2, [r3, #2]

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8007608:	4b17      	ldr	r3, [pc, #92]	; (8007668 <Ble_Hci_Gap_Gatt_Init+0x178>)
 800760a:	789c      	ldrb	r4, [r3, #2]
 800760c:	4b16      	ldr	r3, [pc, #88]	; (8007668 <Ble_Hci_Gap_Gatt_Init+0x178>)
 800760e:	785d      	ldrb	r5, [r3, #1]
 8007610:	4b15      	ldr	r3, [pc, #84]	; (8007668 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8007612:	791b      	ldrb	r3, [r3, #4]
 8007614:	4a14      	ldr	r2, [pc, #80]	; (8007668 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8007616:	7952      	ldrb	r2, [r2, #5]
 8007618:	4913      	ldr	r1, [pc, #76]	; (8007668 <Ble_Hci_Gap_Gatt_Init+0x178>)
 800761a:	78c9      	ldrb	r1, [r1, #3]
 800761c:	4812      	ldr	r0, [pc, #72]	; (8007668 <Ble_Hci_Gap_Gatt_Init+0x178>)
 800761e:	6880      	ldr	r0, [r0, #8]
 8007620:	2600      	movs	r6, #0
 8007622:	9604      	str	r6, [sp, #16]
 8007624:	9003      	str	r0, [sp, #12]
 8007626:	9102      	str	r1, [sp, #8]
 8007628:	9201      	str	r2, [sp, #4]
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	2300      	movs	r3, #0
 800762e:	2201      	movs	r2, #1
 8007630:	4629      	mov	r1, r5
 8007632:	4620      	mov	r0, r4
 8007634:	f7fd fdaa 	bl	800518c <aci_gap_set_authentication_requirement>
 8007638:	4603      	mov	r3, r0
 800763a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800763c:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <Ble_Hci_Gap_Gatt_Init+0x178>)
 800763e:	789b      	ldrb	r3, [r3, #2]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <Ble_Hci_Gap_Gatt_Init+0x15c>
  {
    ret = aci_gap_configure_whitelist();
 8007644:	f7fd ff13 	bl	800546e <aci_gap_configure_whitelist>
 8007648:	4603      	mov	r3, r0
 800764a:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800764c:	bf00      	nop
 800764e:	371c      	adds	r7, #28
 8007650:	46bd      	mov	sp, r7
 8007652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007654:	08009db8 	.word	0x08009db8
 8007658:	08009dc8 	.word	0x08009dc8
 800765c:	08009ae8 	.word	0x08009ae8
 8007660:	08009af0 	.word	0x08009af0
 8007664:	08009b24 	.word	0x08009b24
 8007668:	2000031c 	.word	0x2000031c
 800766c:	0001b207 	.word	0x0001b207

08007670 <Scan_Request>:

static void Scan_Request(void)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Scan_Request_1 */
	printf("Starting scan request\n\r");
 8007676:	4816      	ldr	r0, [pc, #88]	; (80076d0 <Scan_Request+0x60>)
 8007678:	f001 f974 	bl	8008964 <iprintf>
  /* USER CODE END Scan_Request_1 */
  tBleStatus result;
  printf("Device Connection Status: %d \n\r", BleApplicationContext.Device_Connection_Status);
 800767c:	4b15      	ldr	r3, [pc, #84]	; (80076d4 <Scan_Request+0x64>)
 800767e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007682:	4619      	mov	r1, r3
 8007684:	4814      	ldr	r0, [pc, #80]	; (80076d8 <Scan_Request+0x68>)
 8007686:	f001 f96d 	bl	8008964 <iprintf>
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 800768a:	4b12      	ldr	r3, [pc, #72]	; (80076d4 <Scan_Request+0x64>)
 800768c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007690:	2b06      	cmp	r3, #6
 8007692:	d018      	beq.n	80076c6 <Scan_Request+0x56>
    /* USER CODE BEGIN APP_BLE_CONNECTED_CLIENT */

    APP_DBG_MSG("LED BLUE ON\n");
    /* USER CODE END APP_BLE_CONNECTED_CLIENT */
    //result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, CFG_BLE_ADDRESS_TYPE, 1);
    result = aci_gap_start_observation_proc(SCAN_P, SCAN_L, 0x00U, GAP_PUBLIC_ADDR, 1, 0);
 8007694:	2300      	movs	r3, #0
 8007696:	9301      	str	r3, [sp, #4]
 8007698:	2301      	movs	r3, #1
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	2300      	movs	r3, #0
 800769e:	2200      	movs	r2, #0
 80076a0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80076a4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80076a8:	f7fe f834 	bl	8005714 <aci_gap_start_observation_proc>
 80076ac:	4603      	mov	r3, r0
 80076ae:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 80076b0:	79fb      	ldrb	r3, [r7, #7]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d103      	bne.n	80076be <Scan_Request+0x4e>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */
    	printf("Success (SCAN)\n\r");
 80076b6:	4809      	ldr	r0, [pc, #36]	; (80076dc <Scan_Request+0x6c>)
 80076b8:	f001 f954 	bl	8008964 <iprintf>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 80076bc:	e003      	b.n	80076c6 <Scan_Request+0x56>
      printf("BLE_App_Start_Limited_Disc_Req, Failed \r\n\r");
 80076be:	4808      	ldr	r0, [pc, #32]	; (80076e0 <Scan_Request+0x70>)
 80076c0:	f001 f950 	bl	8008964 <iprintf>
  return;
 80076c4:	bf00      	nop
 80076c6:	bf00      	nop
}
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	08009b40 	.word	0x08009b40
 80076d4:	2000031c 	.word	0x2000031c
 80076d8:	08009b58 	.word	0x08009b58
 80076dc:	08009b78 	.word	0x08009b78
 80076e0:	08009b8c 	.word	0x08009b8c

080076e4 <Connect_Request>:

static void Connect_Request(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08a      	sub	sp, #40	; 0x28
 80076e8:	af08      	add	r7, sp, #32
  /* USER CODE END Connect_Request_1 */
  tBleStatus result;

  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO SERVER **  \r\n\r");

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 80076ea:	4b18      	ldr	r3, [pc, #96]	; (800774c <Connect_Request+0x68>)
 80076ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076f0:	2b06      	cmp	r3, #6
 80076f2:	d026      	beq.n	8007742 <Connect_Request+0x5e>
  {
    result = aci_gap_create_connection(SCAN_P,
 80076f4:	4b16      	ldr	r3, [pc, #88]	; (8007750 <Connect_Request+0x6c>)
 80076f6:	781a      	ldrb	r2, [r3, #0]
 80076f8:	2310      	movs	r3, #16
 80076fa:	9306      	str	r3, [sp, #24]
 80076fc:	2310      	movs	r3, #16
 80076fe:	9305      	str	r3, [sp, #20]
 8007700:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007704:	9304      	str	r3, [sp, #16]
 8007706:	2300      	movs	r3, #0
 8007708:	9303      	str	r3, [sp, #12]
 800770a:	2350      	movs	r3, #80	; 0x50
 800770c:	9302      	str	r3, [sp, #8]
 800770e:	2328      	movs	r3, #40	; 0x28
 8007710:	9301      	str	r3, [sp, #4]
 8007712:	2300      	movs	r3, #0
 8007714:	9300      	str	r3, [sp, #0]
 8007716:	4b0f      	ldr	r3, [pc, #60]	; (8007754 <Connect_Request+0x70>)
 8007718:	f44f 7148 	mov.w	r1, #800	; 0x320
 800771c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8007720:	f7fd fec9 	bl	80054b6 <aci_gap_create_connection>
 8007724:	4603      	mov	r3, r0
 8007726:	71fb      	strb	r3, [r7, #7]
                                       0,
                                       SUPERV_TIMEOUT,
                                       CONN_L1,
                                       CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 8007728:	79fb      	ldrb	r3, [r7, #7]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d104      	bne.n	8007738 <Connect_Request+0x54>
    {
      /* USER CODE BEGIN BLE_CONNECT_SUCCESS */

      /* USER CODE END BLE_CONNECT_SUCCESS */
      BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 800772e:	4b07      	ldr	r3, [pc, #28]	; (800774c <Connect_Request+0x68>)
 8007730:	2204      	movs	r2, #4
 8007732:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 8007736:	e004      	b.n	8007742 <Connect_Request+0x5e>
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007738:	4b04      	ldr	r3, [pc, #16]	; (800774c <Connect_Request+0x68>)
 800773a:	2200      	movs	r2, #0
 800773c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return;
 8007740:	bf00      	nop
 8007742:	bf00      	nop
}
 8007744:	3708      	adds	r7, #8
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	2000031c 	.word	0x2000031c
 8007750:	20000316 	.word	0x20000316
 8007754:	20000310 	.word	0x20000310

08007758 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 8007758:	b480      	push	{r7}
 800775a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */

  /* USER CODE END Switch_OFF_GPIO */
}
 800775c:	bf00      	nop
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
	...

08007768 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800776e:	f7ff fc11 	bl	8006f94 <LL_FLASH_GetUDN>
 8007772:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777a:	d023      	beq.n	80077c4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800777c:	f7ff fc22 	bl	8006fc4 <LL_FLASH_GetSTCompanyID>
 8007780:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8007782:	f7ff fc13 	bl	8006fac <LL_FLASH_GetDeviceID>
 8007786:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	b2da      	uxtb	r2, r3
 800778c:	4b16      	ldr	r3, [pc, #88]	; (80077e8 <BleGetBdAddress+0x80>)
 800778e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	0a1b      	lsrs	r3, r3, #8
 8007794:	b2da      	uxtb	r2, r3
 8007796:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <BleGetBdAddress+0x80>)
 8007798:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	b2da      	uxtb	r2, r3
 800779e:	4b12      	ldr	r3, [pc, #72]	; (80077e8 <BleGetBdAddress+0x80>)
 80077a0:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	4b10      	ldr	r3, [pc, #64]	; (80077e8 <BleGetBdAddress+0x80>)
 80077a8:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	0a1b      	lsrs	r3, r3, #8
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	4b0d      	ldr	r3, [pc, #52]	; (80077e8 <BleGetBdAddress+0x80>)
 80077b2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	0c1b      	lsrs	r3, r3, #16
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	4b0b      	ldr	r3, [pc, #44]	; (80077e8 <BleGetBdAddress+0x80>)
 80077bc:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80077be:	4b0a      	ldr	r3, [pc, #40]	; (80077e8 <BleGetBdAddress+0x80>)
 80077c0:	617b      	str	r3, [r7, #20]
 80077c2:	e00b      	b.n	80077dc <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80077c4:	2000      	movs	r0, #0
 80077c6:	f7ff faff 	bl	8006dc8 <OTP_Read>
 80077ca:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d002      	beq.n	80077d8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	617b      	str	r3, [r7, #20]
 80077d6:	e001      	b.n	80077dc <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80077d8:	4b04      	ldr	r3, [pc, #16]	; (80077ec <BleGetBdAddress+0x84>)
 80077da:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80077dc:	697b      	ldr	r3, [r7, #20]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20000308 	.word	0x20000308
 80077ec:	08009db0 	.word	0x08009db0

080077f0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80077f8:	2100      	movs	r1, #0
 80077fa:	2010      	movs	r0, #16
 80077fc:	f000 fed0 	bl	80085a0 <UTIL_SEQ_SetTask>
  return;
 8007800:	bf00      	nop
}
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007810:	2001      	movs	r0, #1
 8007812:	f000 ff31 	bl	8008678 <UTIL_SEQ_SetEvt>
  return;
 8007816:	bf00      	nop
}
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b082      	sub	sp, #8
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007826:	2001      	movs	r0, #1
 8007828:	f000 ff46 	bl	80086b8 <UTIL_SEQ_WaitEvt>
  return;
 800782c:	bf00      	nop
}
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void * pPayload)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	3308      	adds	r3, #8
 8007846:	4618      	mov	r0, r3
 8007848:	f7fe fc4a 	bl	80060e0 <SVCCTL_UserEvtRx>
 800784c:	4603      	mov	r3, r0
 800784e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8007850:	7afb      	ldrb	r3, [r7, #11]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d003      	beq.n	800785e <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2201      	movs	r2, #1
 800785a:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800785c:	e003      	b.n	8007866 <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	701a      	strb	r2, [r3, #0]
  return;
 8007864:	bf00      	nop
}
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t status)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	4603      	mov	r3, r0
 8007874:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8007876:	79fb      	ldrb	r3, [r7, #7]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <BLE_StatusNot+0x16>
 800787c:	2b01      	cmp	r3, #1
 800787e:	d006      	beq.n	800788e <BLE_StatusNot+0x22>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
      break;

    default:
      break;
 8007880:	e00b      	b.n	800789a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007882:	231f      	movs	r3, #31
 8007884:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f000 feb6 	bl	80085f8 <UTIL_SEQ_PauseTask>
      break;
 800788c:	e005      	b.n	800789a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800788e:	231f      	movs	r3, #31
 8007890:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f000 fed0 	bl	8008638 <UTIL_SEQ_ResumeTask>
      break;
 8007898:	bf00      	nop
  }
  return;
 800789a:	bf00      	nop
}
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <P2PC_APP_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PC_APP_Init(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
  uint8_t index =0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2PC_APP_Init_1 */

/* USER CODE END P2PC_APP_Init_1 */
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 80078ae:	2300      	movs	r3, #0
 80078b0:	71fb      	strb	r3, [r7, #7]
 80078b2:	e008      	b.n	80078c6 <P2PC_APP_Init+0x22>
  {
    aP2PClientContext[index].state= APP_BLE_IDLE;
 80078b4:	79fb      	ldrb	r3, [r7, #7]
 80078b6:	4a09      	ldr	r2, [pc, #36]	; (80078dc <P2PC_APP_Init+0x38>)
 80078b8:	011b      	lsls	r3, r3, #4
 80078ba:	4413      	add	r3, r2
 80078bc:	2200      	movs	r2, #0
 80078be:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 80078c0:	79fb      	ldrb	r3, [r7, #7]
 80078c2:	3301      	adds	r3, #1
 80078c4:	71fb      	strb	r3, [r7, #7]
 80078c6:	79fb      	ldrb	r3, [r7, #7]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d0f3      	beq.n	80078b4 <P2PC_APP_Init+0x10>
  }

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterCltHandler(Event_Handler);
 80078cc:	4804      	ldr	r0, [pc, #16]	; (80078e0 <P2PC_APP_Init+0x3c>)
 80078ce:	f7fe fbed 	bl	80060ac <SVCCTL_RegisterCltHandler>
#endif

/* USER CODE BEGIN P2PC_APP_Init_2 */

/* USER CODE END P2PC_APP_Init_2 */
  return;
 80078d2:	bf00      	nop
}
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	2000016c 	.word	0x2000016c
 80078e0:	0800790d 	.word	0x0800790d

080078e4 <P2PC_APP_Notification>:

void P2PC_APP_Notification(P2PC_APP_ConnHandle_Not_evt_t *pNotification)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PC_APP_Notification_1 */

/* USER CODE END P2PC_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <P2PC_APP_Notification+0x16>
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d002      	beq.n	80078fe <P2PC_APP_Notification+0x1a>

    default:
/* USER CODE BEGIN P2P_Evt_Opcode_Default */

/* USER CODE END P2P_Evt_Opcode_Default */
      break;
 80078f8:	e002      	b.n	8007900 <P2PC_APP_Notification+0x1c>
      break;
 80078fa:	bf00      	nop
 80078fc:	e000      	b.n	8007900 <P2PC_APP_Notification+0x1c>
      break;
 80078fe:	bf00      	nop
  }
/* USER CODE BEGIN P2PC_APP_Notification_2 */

/* USER CODE END P2PC_APP_Notification_2 */
  return;
 8007900:	bf00      	nop
}
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Event_Handler(void *Event)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b094      	sub	sp, #80	; 0x50
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;

  P2P_Client_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8007914:	2300      	movs	r3, #0
 8007916:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3301      	adds	r3, #1
 800791e:	643b      	str	r3, [r7, #64]	; 0x40

  switch(event_pckt->evt)
 8007920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	2bff      	cmp	r3, #255	; 0xff
 8007926:	f040 827c 	bne.w	8007e22 <Event_Handler+0x516>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800792a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800792c:	3302      	adds	r3, #2
 800792e:	63fb      	str	r3, [r7, #60]	; 0x3c
      switch(blecore_evt->ecode)
 8007930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	b29b      	uxth	r3, r3
 8007936:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 800793a:	2b0c      	cmp	r3, #12
 800793c:	f200 8265 	bhi.w	8007e0a <Event_Handler+0x4fe>
 8007940:	a201      	add	r2, pc, #4	; (adr r2, 8007948 <Event_Handler+0x3c>)
 8007942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007946:	bf00      	nop
 8007948:	08007c3b 	.word	0x08007c3b
 800794c:	08007e0b 	.word	0x08007e0b
 8007950:	08007b1d 	.word	0x08007b1d
 8007954:	08007e0b 	.word	0x08007e0b
 8007958:	08007e0b 	.word	0x08007e0b
 800795c:	08007e0b 	.word	0x08007e0b
 8007960:	0800797d 	.word	0x0800797d
 8007964:	08007e0b 	.word	0x08007e0b
 8007968:	08007e0b 	.word	0x08007e0b
 800796c:	08007e0b 	.word	0x08007e0b
 8007970:	08007e0b 	.word	0x08007e0b
 8007974:	08007d45 	.word	0x08007d45
 8007978:	08007dc1 	.word	0x08007dc1
      {

        case ACI_ATT_READ_BY_GROUP_TYPE_RESP_VSEVT_CODE:
        {
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800797c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797e:	3302      	adds	r3, #2
 8007980:	633b      	str	r3, [r7, #48]	; 0x30
          uint8_t numServ, i, idx;
          uint16_t uuid, handle;

          uint8_t index;
          handle = pr->Connection_Handle;
 8007982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007984:	781a      	ldrb	r2, [r3, #0]
 8007986:	785b      	ldrb	r3, [r3, #1]
 8007988:	021b      	lsls	r3, r3, #8
 800798a:	4313      	orrs	r3, r2
 800798c:	85fb      	strh	r3, [r7, #46]	; 0x2e
          index = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8007994:	e02e      	b.n	80079f4 <Event_Handler+0xe8>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
          {
            APP_BLE_ConnStatus_t status;

            status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 8007996:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800799a:	4aab      	ldr	r2, [pc, #684]	; (8007c48 <Event_Handler+0x33c>)
 800799c:	011b      	lsls	r3, r3, #4
 800799e:	4413      	add	r3, r2
 80079a0:	3302      	adds	r3, #2
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7ff fd53 	bl	8007450 <APP_BLE_Get_Client_Connection_Status>
 80079aa:	4603      	mov	r3, r0
 80079ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

            if((aP2PClientContext[index].state == APP_BLE_CONNECTED_CLIENT)&&
 80079b0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80079b4:	4aa4      	ldr	r2, [pc, #656]	; (8007c48 <Event_Handler+0x33c>)
 80079b6:	011b      	lsls	r3, r3, #4
 80079b8:	4413      	add	r3, r2
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	2b06      	cmp	r3, #6
 80079be:	d114      	bne.n	80079ea <Event_Handler+0xde>
 80079c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d110      	bne.n	80079ea <Event_Handler+0xde>
                    (status == APP_BLE_IDLE))
            {
              /* Handle deconnected */

              aP2PClientContext[index].state = APP_BLE_IDLE;
 80079c8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80079cc:	4a9e      	ldr	r2, [pc, #632]	; (8007c48 <Event_Handler+0x33c>)
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	4413      	add	r3, r2
 80079d2:	2200      	movs	r2, #0
 80079d4:	701a      	strb	r2, [r3, #0]
              aP2PClientContext[index].connHandle = 0xFFFF;
 80079d6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80079da:	4a9b      	ldr	r2, [pc, #620]	; (8007c48 <Event_Handler+0x33c>)
 80079dc:	011b      	lsls	r3, r3, #4
 80079de:	4413      	add	r3, r2
 80079e0:	3302      	adds	r3, #2
 80079e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80079e6:	801a      	strh	r2, [r3, #0]
              break;
 80079e8:	e010      	b.n	8007a0c <Event_Handler+0x100>
            }
            index++;
 80079ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80079ee:	3301      	adds	r3, #1
 80079f0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80079f4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d107      	bne.n	8007a0c <Event_Handler+0x100>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 80079fc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007a00:	4a91      	ldr	r2, [pc, #580]	; (8007c48 <Event_Handler+0x33c>)
 8007a02:	011b      	lsls	r3, r3, #4
 8007a04:	4413      	add	r3, r2
 8007a06:	781b      	ldrb	r3, [r3, #0]
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1c4      	bne.n	8007996 <Event_Handler+0x8a>
          }

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8007a0c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f040 81fc 	bne.w	8007e0e <Event_Handler+0x502>
          {
            aP2PClientContext[index].connHandle= handle;
 8007a16:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007a1a:	4a8b      	ldr	r2, [pc, #556]	; (8007c48 <Event_Handler+0x33c>)
 8007a1c:	011b      	lsls	r3, r3, #4
 8007a1e:	4413      	add	r3, r2
 8007a20:	3302      	adds	r3, #2
 8007a22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007a24:	801a      	strh	r2, [r3, #0]

            numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 8007a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a28:	78da      	ldrb	r2, [r3, #3]
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	789b      	ldrb	r3, [r3, #2]
 8007a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a32:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
             * 2 or 16 bytes data
             * we are interested only if the UUID is 16 bit.
             * So check if the data length is 6
             */
#if (UUID_128BIT_FORMAT==1)
          if (pr->Attribute_Data_Length == 20)
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	789b      	ldrb	r3, [r3, #2]
 8007a3a:	2b14      	cmp	r3, #20
 8007a3c:	f040 81e7 	bne.w	8007e0e <Event_Handler+0x502>
          {
            idx = 16;
 8007a40:	2310      	movs	r3, #16
 8007a42:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
#else
          if (pr->Attribute_Data_Length == 6)
          {
            idx = 4;
#endif
              for (i=0; i<numServ; i++)
 8007a46:	2300      	movs	r3, #0
 8007a48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007a4c:	e05f      	b.n	8007b0e <Event_Handler+0x202>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 8007a4e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8007a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a54:	4413      	add	r3, r2
 8007a56:	791b      	ldrb	r3, [r3, #4]
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8007a5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a60:	440b      	add	r3, r1
 8007a62:	3304      	adds	r3, #4
 8007a64:	3301      	adds	r3, #1
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	021b      	lsls	r3, r3, #8
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	857b      	strh	r3, [r7, #42]	; 0x2a
                if(uuid == P2P_SERVICE_UUID)
 8007a72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007a74:	f64f 6240 	movw	r2, #65088	; 0xfe40
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d13e      	bne.n	8007afa <Event_Handler+0x1ee>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : P2P_SERVICE_UUID FOUND - connection handle 0x%x \n", aP2PClientContext[index].connHandle);
#endif
#if (UUID_128BIT_FORMAT==1)
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 8007a7c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8007a80:	3b10      	subs	r3, #16
 8007a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a84:	4413      	add	r3, r2
 8007a86:	791b      	ldrb	r3, [r3, #4]
 8007a88:	b299      	uxth	r1, r3
 8007a8a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8007a8e:	3b10      	subs	r3, #16
 8007a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a92:	4413      	add	r3, r2
 8007a94:	3304      	adds	r3, #4
 8007a96:	3301      	adds	r3, #1
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	021b      	lsls	r3, r3, #8
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007aa4:	430a      	orrs	r2, r1
 8007aa6:	b291      	uxth	r1, r2
 8007aa8:	4a67      	ldr	r2, [pc, #412]	; (8007c48 <Event_Handler+0x33c>)
 8007aaa:	011b      	lsls	r3, r3, #4
 8007aac:	4413      	add	r3, r2
 8007aae:	3304      	adds	r3, #4
 8007ab0:	460a      	mov	r2, r1
 8007ab2:	801a      	strh	r2, [r3, #0]
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 8007ab4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8007ab8:	3b0e      	subs	r3, #14
 8007aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007abc:	4413      	add	r3, r2
 8007abe:	791b      	ldrb	r3, [r3, #4]
 8007ac0:	b299      	uxth	r1, r3
 8007ac2:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8007ac6:	3b0e      	subs	r3, #14
 8007ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aca:	4413      	add	r3, r2
 8007acc:	3304      	adds	r3, #4
 8007ace:	3301      	adds	r3, #1
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	021b      	lsls	r3, r3, #8
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007adc:	430a      	orrs	r2, r1
 8007ade:	b291      	uxth	r1, r2
 8007ae0:	4a59      	ldr	r2, [pc, #356]	; (8007c48 <Event_Handler+0x33c>)
 8007ae2:	011b      	lsls	r3, r3, #4
 8007ae4:	4413      	add	r3, r2
 8007ae6:	3306      	adds	r3, #6
 8007ae8:	460a      	mov	r2, r1
 8007aea:	801a      	strh	r2, [r3, #0]
#else
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-4]);
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-2]);
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 8007aec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007af0:	4a55      	ldr	r2, [pc, #340]	; (8007c48 <Event_Handler+0x33c>)
 8007af2:	011b      	lsls	r3, r3, #4
 8007af4:	4413      	add	r3, r2
 8007af6:	2208      	movs	r2, #8
 8007af8:	701a      	strb	r2, [r3, #0]
                }
                idx += 6;
 8007afa:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8007afe:	3306      	adds	r3, #6
 8007b00:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 8007b04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007b08:	3301      	adds	r3, #1
 8007b0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007b0e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8007b12:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d399      	bcc.n	8007a4e <Event_Handler+0x142>
              }
            }
          }
        }
        break;
 8007b1a:	e178      	b.n	8007e0e <Event_Handler+0x502>

        case ACI_ATT_READ_BY_TYPE_RESP_VSEVT_CODE:
        {

          aci_att_read_by_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 8007b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b1e:	3302      	adds	r3, #2
 8007b20:	627b      	str	r3, [r7, #36]	; 0x24
           * 2 or 16 bytes data
           */

          uint8_t index;

          index = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8007b28:	e004      	b.n	8007b34 <Event_Handler+0x228>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 8007b2a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007b2e:	3301      	adds	r3, #1
 8007b30:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8007b34:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d10b      	bne.n	8007b54 <Event_Handler+0x248>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 8007b3c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007b40:	4a41      	ldr	r2, [pc, #260]	; (8007c48 <Event_Handler+0x33c>)
 8007b42:	011b      	lsls	r3, r3, #4
 8007b44:	4413      	add	r3, r2
 8007b46:	3302      	adds	r3, #2
 8007b48:	881a      	ldrh	r2, [r3, #0]
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d1ea      	bne.n	8007b2a <Event_Handler+0x21e>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8007b54:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f040 815a 	bne.w	8007e12 <Event_Handler+0x506>
          {

            /* we are interested in only 16 bit UUIDs */
#if (UUID_128BIT_FORMAT==1)
            idx = 17;
 8007b5e:	2311      	movs	r3, #17
 8007b60:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            if (pr->Handle_Value_Pair_Length == 21)
 8007b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b66:	789b      	ldrb	r3, [r3, #2]
 8007b68:	2b15      	cmp	r3, #21
 8007b6a:	f040 8152 	bne.w	8007e12 <Event_Handler+0x506>
#else
              idx = 5;
            if (pr->Handle_Value_Pair_Length == 7)
#endif
            {
              pr->Data_Length -= 1;
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	78db      	ldrb	r3, [r3, #3]
 8007b72:	3b01      	subs	r3, #1
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b78:	70da      	strb	r2, [r3, #3]
              while(pr->Data_Length > 0)
 8007b7a:	e059      	b.n	8007c30 <Event_Handler+0x324>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 8007b7c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8007b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b82:	4413      	add	r3, r2
 8007b84:	791b      	ldrb	r3, [r3, #4]
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8007b8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b8e:	440b      	add	r3, r1
 8007b90:	3304      	adds	r3, #4
 8007b92:	3301      	adds	r3, #1
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	021b      	lsls	r3, r3, #8
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	847b      	strh	r3, [r7, #34]	; 0x22
                /* store the characteristic handle not the attribute handle */
#if (UUID_128BIT_FORMAT==1)
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 8007ba0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8007ba4:	3b0e      	subs	r3, #14
 8007ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba8:	4413      	add	r3, r2
 8007baa:	791b      	ldrb	r3, [r3, #4]
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8007bb2:	3b0e      	subs	r3, #14
 8007bb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bb6:	440b      	add	r3, r1
 8007bb8:	3304      	adds	r3, #4
 8007bba:	3301      	adds	r3, #1
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	021b      	lsls	r3, r3, #8
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	843b      	strh	r3, [r7, #32]
#else
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-2]);
#endif
                if(uuid == P2P_WRITE_CHAR_UUID)
 8007bc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007bca:	f64f 6241 	movw	r2, #65089	; 0xfe41
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d10f      	bne.n	8007bf2 <Event_Handler+0x2e6>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : WRITE_UUID FOUND - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_WRITE_DESC;
 8007bd2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007bd6:	4a1c      	ldr	r2, [pc, #112]	; (8007c48 <Event_Handler+0x33c>)
 8007bd8:	011b      	lsls	r3, r3, #4
 8007bda:	4413      	add	r3, r2
 8007bdc:	2209      	movs	r2, #9
 8007bde:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PWriteToServerCharHdle = handle;
 8007be0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007be4:	4a18      	ldr	r2, [pc, #96]	; (8007c48 <Event_Handler+0x33c>)
 8007be6:	011b      	lsls	r3, r3, #4
 8007be8:	4413      	add	r3, r2
 8007bea:	3308      	adds	r3, #8
 8007bec:	8c3a      	ldrh	r2, [r7, #32]
 8007bee:	801a      	strh	r2, [r3, #0]
 8007bf0:	e013      	b.n	8007c1a <Event_Handler+0x30e>
                }

                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 8007bf2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007bf4:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d10e      	bne.n	8007c1a <Event_Handler+0x30e>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : NOTIFICATION_CHAR_UUID FOUND  - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC;
 8007bfc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007c00:	4a11      	ldr	r2, [pc, #68]	; (8007c48 <Event_Handler+0x33c>)
 8007c02:	011b      	lsls	r3, r3, #4
 8007c04:	4413      	add	r3, r2
 8007c06:	220a      	movs	r2, #10
 8007c08:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PNotificationCharHdle = handle;
 8007c0a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007c0e:	4a0e      	ldr	r2, [pc, #56]	; (8007c48 <Event_Handler+0x33c>)
 8007c10:	011b      	lsls	r3, r3, #4
 8007c12:	4413      	add	r3, r2
 8007c14:	330c      	adds	r3, #12
 8007c16:	8c3a      	ldrh	r2, [r7, #32]
 8007c18:	801a      	strh	r2, [r3, #0]
                }
#if (UUID_128BIT_FORMAT==1)
                pr->Data_Length -= 21;
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	78db      	ldrb	r3, [r3, #3]
 8007c1e:	3b15      	subs	r3, #21
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	70da      	strb	r2, [r3, #3]
                idx += 21;
 8007c26:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8007c2a:	3315      	adds	r3, #21
 8007c2c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
              while(pr->Data_Length > 0)
 8007c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c32:	78db      	ldrb	r3, [r3, #3]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1a1      	bne.n	8007b7c <Event_Handler+0x270>
#endif
              }
            }
          }
        }
        break;
 8007c38:	e0eb      	b.n	8007e12 <Event_Handler+0x506>

        case ACI_ATT_FIND_INFO_RESP_VSEVT_CODE:
        {
          aci_att_find_info_resp_event_rp0 *pr = (void*)blecore_evt->data;
 8007c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c3c:	3302      	adds	r3, #2
 8007c3e:	61fb      	str	r3, [r7, #28]
           * 2 bytes UUID
           */

          uint8_t index;

          index = 0;
 8007c40:	2300      	movs	r3, #0
 8007c42:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8007c46:	e006      	b.n	8007c56 <Event_Handler+0x34a>
 8007c48:	2000016c 	.word	0x2000016c
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))

            index++;
 8007c4c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007c50:	3301      	adds	r3, #1
 8007c52:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8007c56:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10b      	bne.n	8007c76 <Event_Handler+0x36a>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 8007c5e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007c62:	4a73      	ldr	r2, [pc, #460]	; (8007e30 <Event_Handler+0x524>)
 8007c64:	011b      	lsls	r3, r3, #4
 8007c66:	4413      	add	r3, r2
 8007c68:	3302      	adds	r3, #2
 8007c6a:	881a      	ldrh	r2, [r3, #0]
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d1ea      	bne.n	8007c4c <Event_Handler+0x340>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8007c76:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f040 80cb 	bne.w	8007e16 <Event_Handler+0x50a>
          {

            numDesc = (pr->Event_Data_Length) / 4;
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	78db      	ldrb	r3, [r3, #3]
 8007c84:	089b      	lsrs	r3, r3, #2
 8007c86:	76fb      	strb	r3, [r7, #27]
            /* we are interested only in 16 bit UUIDs */
            idx = 0;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            if (pr->Format == UUID_TYPE_16)
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	789b      	ldrb	r3, [r3, #2]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	f040 80bf 	bne.w	8007e16 <Event_Handler+0x50a>
            {
              for (i=0; i<numDesc; i++)
 8007c98:	2300      	movs	r3, #0
 8007c9a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8007c9e:	e04b      	b.n	8007d38 <Event_Handler+0x42c>
              {
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 8007ca0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007ca4:	69fa      	ldr	r2, [r7, #28]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	791b      	ldrb	r3, [r3, #4]
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007cb0:	69f9      	ldr	r1, [r7, #28]
 8007cb2:	440b      	add	r3, r1
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	021b      	lsls	r3, r3, #8
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	833b      	strh	r3, [r7, #24]
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 8007cc4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007cc8:	3302      	adds	r3, #2
 8007cca:	69fa      	ldr	r2, [r7, #28]
 8007ccc:	4413      	add	r3, r2
 8007cce:	791b      	ldrb	r3, [r3, #4]
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007cd6:	3302      	adds	r3, #2
 8007cd8:	69f9      	ldr	r1, [r7, #28]
 8007cda:	440b      	add	r3, r1
 8007cdc:	3304      	adds	r3, #4
 8007cde:	3301      	adds	r3, #1
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	021b      	lsls	r3, r3, #8
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	82fb      	strh	r3, [r7, #22]

                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 8007cec:	8afb      	ldrh	r3, [r7, #22]
 8007cee:	f642 1202 	movw	r2, #10498	; 0x2902
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d116      	bne.n	8007d24 <Event_Handler+0x418>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID- connection handle 0x%x\n", aP2PClientContext[index].connHandle);
#endif
                  if( aP2PClientContext[index].state == APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC)
 8007cf6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007cfa:	4a4d      	ldr	r2, [pc, #308]	; (8007e30 <Event_Handler+0x524>)
 8007cfc:	011b      	lsls	r3, r3, #4
 8007cfe:	4413      	add	r3, r2
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	2b0a      	cmp	r3, #10
 8007d04:	d10e      	bne.n	8007d24 <Event_Handler+0x418>
                  {

                    aP2PClientContext[index].P2PNotificationDescHandle = handle;
 8007d06:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007d0a:	4a49      	ldr	r2, [pc, #292]	; (8007e30 <Event_Handler+0x524>)
 8007d0c:	011b      	lsls	r3, r3, #4
 8007d0e:	4413      	add	r3, r2
 8007d10:	330e      	adds	r3, #14
 8007d12:	8b3a      	ldrh	r2, [r7, #24]
 8007d14:	801a      	strh	r2, [r3, #0]
                    aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_DESC;
 8007d16:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8007d1a:	4a45      	ldr	r2, [pc, #276]	; (8007e30 <Event_Handler+0x524>)
 8007d1c:	011b      	lsls	r3, r3, #4
 8007d1e:	4413      	add	r3, r2
 8007d20:	220b      	movs	r2, #11
 8007d22:	701a      	strb	r2, [r3, #0]

                  }
                }
                idx += 4;
 8007d24:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007d28:	3304      	adds	r3, #4
 8007d2a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              for (i=0; i<numDesc; i++)
 8007d2e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8007d32:	3301      	adds	r3, #1
 8007d34:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 8007d38:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8007d3c:	7efb      	ldrb	r3, [r7, #27]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d3ae      	bcc.n	8007ca0 <Event_Handler+0x394>
              }
            }
          }
        }
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 8007d42:	e068      	b.n	8007e16 <Event_Handler+0x50a>

        case ACI_GATT_NOTIFICATION_VSEVT_CODE:
        {
          aci_gatt_notification_event_rp0 *pr = (void*)blecore_evt->data;
 8007d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d46:	3302      	adds	r3, #2
 8007d48:	637b      	str	r3, [r7, #52]	; 0x34
          uint8_t index;

          index = 0;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8007d50:	e004      	b.n	8007d5c <Event_Handler+0x450>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 8007d52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d56:	3301      	adds	r3, #1
 8007d58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8007d5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10b      	bne.n	8007d7c <Event_Handler+0x470>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 8007d64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d68:	4a31      	ldr	r2, [pc, #196]	; (8007e30 <Event_Handler+0x524>)
 8007d6a:	011b      	lsls	r3, r3, #4
 8007d6c:	4413      	add	r3, r2
 8007d6e:	3302      	adds	r3, #2
 8007d70:	881a      	ldrh	r2, [r3, #0]
 8007d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d1ea      	bne.n	8007d52 <Event_Handler+0x446>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8007d7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d14a      	bne.n	8007e1a <Event_Handler+0x50e>
          {

            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 8007d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d86:	885b      	ldrh	r3, [r3, #2]
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d8e:	4928      	ldr	r1, [pc, #160]	; (8007e30 <Event_Handler+0x524>)
 8007d90:	011b      	lsls	r3, r3, #4
 8007d92:	440b      	add	r3, r1
 8007d94:	330c      	adds	r3, #12
 8007d96:	881b      	ldrh	r3, [r3, #0]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d13e      	bne.n	8007e1a <Event_Handler+0x50e>
                    (pr->Attribute_Value_Length == (2)) )
 8007d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9e:	791b      	ldrb	r3, [r3, #4]
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d13a      	bne.n	8007e1a <Event_Handler+0x50e>
            {

              Notification.P2P_Client_Evt_Opcode = P2P_NOTIFICATION_INFO_RECEIVED_EVT;
 8007da4:	2302      	movs	r3, #2
 8007da6:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length = pr->Attribute_Value_Length;
 8007da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007daa:	791b      	ldrb	r3, [r3, #4]
 8007dac:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload = &pr->Attribute_Value[0];
 8007dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db0:	3305      	adds	r3, #5
 8007db2:	60fb      	str	r3, [r7, #12]

              Gatt_Notification(&Notification);
 8007db4:	f107 0308 	add.w	r3, r7, #8
 8007db8:	4618      	mov	r0, r3
 8007dba:	f000 f83b 	bl	8007e34 <Gatt_Notification>
              /* INFORM APPLICATION BUTTON IS PUSHED BY END DEVICE */

            }
          }
        }
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 8007dbe:	e02c      	b.n	8007e1a <Event_Handler+0x50e>

        case ACI_GATT_PROC_COMPLETE_VSEVT_CODE:
        {
          aci_gatt_proc_complete_event_rp0 *pr = (void*)blecore_evt->data;
 8007dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc2:	3302      	adds	r3, #2
 8007dc4:	63bb      	str	r3, [r7, #56]	; 0x38
          APP_DBG_MSG("\n");
#endif

          uint8_t index;

          index = 0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8007dcc:	e004      	b.n	8007dd8 <Event_Handler+0x4cc>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 8007dce:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8007dd8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10b      	bne.n	8007df8 <Event_Handler+0x4ec>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 8007de0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007de4:	4a12      	ldr	r2, [pc, #72]	; (8007e30 <Event_Handler+0x524>)
 8007de6:	011b      	lsls	r3, r3, #4
 8007de8:	4413      	add	r3, r2
 8007dea:	3302      	adds	r3, #2
 8007dec:	881a      	ldrh	r2, [r3, #0]
 8007dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df0:	881b      	ldrh	r3, [r3, #0]
 8007df2:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d1ea      	bne.n	8007dce <Event_Handler+0x4c2>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8007df8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10e      	bne.n	8007e1e <Event_Handler+0x512>
          {

            UTIL_SEQ_SetTask( 1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0);
 8007e00:	2100      	movs	r1, #0
 8007e02:	2004      	movs	r0, #4
 8007e04:	f000 fbcc 	bl	80085a0 <UTIL_SEQ_SetTask>

          }
        }
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 8007e08:	e009      	b.n	8007e1e <Event_Handler+0x512>
        default:
          break;
 8007e0a:	bf00      	nop
 8007e0c:	e00a      	b.n	8007e24 <Event_Handler+0x518>
        break;
 8007e0e:	bf00      	nop
 8007e10:	e008      	b.n	8007e24 <Event_Handler+0x518>
        break;
 8007e12:	bf00      	nop
 8007e14:	e006      	b.n	8007e24 <Event_Handler+0x518>
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 8007e16:	bf00      	nop
 8007e18:	e004      	b.n	8007e24 <Event_Handler+0x518>
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 8007e1a:	bf00      	nop
 8007e1c:	e002      	b.n	8007e24 <Event_Handler+0x518>
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 8007e1e:	bf00      	nop
      }
    }

    break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007e20:	e000      	b.n	8007e24 <Event_Handler+0x518>

    default:
      break;
 8007e22:	bf00      	nop
  }

  return(return_value);
 8007e24:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
}/* end BLE_CTRL_Event_Acknowledged_Status_t */
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3750      	adds	r7, #80	; 0x50
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	2000016c 	.word	0x2000016c

08007e34 <Gatt_Notification>:

void Gatt_Notification(P2P_Client_App_Notification_evt_t *pNotification)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Gatt_Notification_1*/

/* USER CODE END Gatt_Notification_1 */
  switch(pNotification->P2P_Client_Evt_Opcode)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	2b02      	cmp	r3, #2

    default:
/* USER CODE BEGIN P2P_Client_Evt_Opcode_Default */

/* USER CODE END P2P_Client_Evt_Opcode_Default */
      break;
 8007e42:	bf00      	nop
  }
/* USER CODE BEGIN Gatt_Notification_2*/

/* USER CODE END Gatt_Notification_2 */
  return;
 8007e44:	bf00      	nop
}
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <LL_PWR_EnableBootC2>:
{
 8007e50:	b480      	push	{r7}
 8007e52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8007e54:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <LL_PWR_EnableBootC2+0x1c>)
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	4a04      	ldr	r2, [pc, #16]	; (8007e6c <LL_PWR_EnableBootC2+0x1c>)
 8007e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e5e:	60d3      	str	r3, [r2, #12]
}
 8007e60:	bf00      	nop
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	58000400 	.word	0x58000400

08007e70 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8007e78:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007e7a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8007e7e:	4905      	ldr	r1, [pc, #20]	; (8007e94 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr
 8007e94:	58000800 	.word	0x58000800

08007e98 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007ea0:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007ea2:	6a1a      	ldr	r2, [r3, #32]
 8007ea4:	4904      	ldr	r1, [pc, #16]	; (8007eb8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	620b      	str	r3, [r1, #32]
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	58000800 	.word	0x58000800

08007ebc <LL_AHB3_GRP1_EnableClock>:
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007eca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4013      	ands	r3, r2
 8007ede:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
}
 8007ee2:	bf00      	nop
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b085      	sub	sp, #20
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8007ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007efa:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8007efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8007f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f0e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4013      	ands	r3, r2
 8007f16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007f18:	68fb      	ldr	r3, [r7, #12]
}
 8007f1a:	bf00      	nop
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr

08007f26 <LL_C1_IPCC_EnableIT_TXF>:
{
 8007f26:	b480      	push	{r7}
 8007f28:	b083      	sub	sp, #12
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	601a      	str	r2, [r3, #0]
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <LL_C1_IPCC_EnableIT_RXO>:
{
 8007f46:	b480      	push	{r7}
 8007f48:	b083      	sub	sp, #12
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f043 0201 	orr.w	r2, r3, #1
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	601a      	str	r2, [r3, #0]
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
 8007f6e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685a      	ldr	r2, [r3, #4]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	041b      	lsls	r3, r3, #16
 8007f78:	43db      	mvns	r3, r3
 8007f7a:	401a      	ands	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	605a      	str	r2, [r3, #4]
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <LL_C1_IPCC_DisableTransmitChannel>:
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	041b      	lsls	r3, r3, #16
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	605a      	str	r2, [r3, #4]
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	43db      	mvns	r3, r3
 8007fc2:	401a      	ands	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	605a      	str	r2, [r3, #4]
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	683a      	ldr	r2, [r7, #0]
 8007fe2:	609a      	str	r2, [r3, #8]
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <LL_C1_IPCC_SetFlag_CHx>:
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	041a      	lsls	r2, r3, #16
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	609a      	str	r2, [r3, #8]
}
 8008002:	bf00      	nop
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800800e:	b480      	push	{r7}
 8008010:	b083      	sub	sp, #12
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68da      	ldr	r2, [r3, #12]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	4013      	ands	r3, r2
 8008020:	683a      	ldr	r2, [r7, #0]
 8008022:	429a      	cmp	r2, r3
 8008024:	d101      	bne.n	800802a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8008026:	2301      	movs	r3, #1
 8008028:	e000      	b.n	800802c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800802a:	2300      	movs	r3, #0
}
 800802c:	4618      	mov	r0, r3
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008036:	4770      	bx	lr

08008038 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008038:	b480      	push	{r7}
 800803a:	b083      	sub	sp, #12
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	69da      	ldr	r2, [r3, #28]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	4013      	ands	r3, r2
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	429a      	cmp	r2, r3
 800804e:	d101      	bne.n	8008054 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008050:	2301      	movs	r3, #1
 8008052:	e000      	b.n	8008056 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
	...

08008064 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008068:	2102      	movs	r1, #2
 800806a:	4818      	ldr	r0, [pc, #96]	; (80080cc <HW_IPCC_Rx_Handler+0x68>)
 800806c:	f7ff ffe4 	bl	8008038 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d008      	beq.n	8008088 <HW_IPCC_Rx_Handler+0x24>
 8008076:	4b15      	ldr	r3, [pc, #84]	; (80080cc <HW_IPCC_Rx_Handler+0x68>)
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f003 0302 	and.w	r3, r3, #2
 800807e:	2b00      	cmp	r3, #0
 8008080:	d102      	bne.n	8008088 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8008082:	f000 f8d5 	bl	8008230 <HW_IPCC_SYS_EvtHandler>
 8008086:	e01e      	b.n	80080c6 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8008088:	2101      	movs	r1, #1
 800808a:	4810      	ldr	r0, [pc, #64]	; (80080cc <HW_IPCC_Rx_Handler+0x68>)
 800808c:	f7ff ffd4 	bl	8008038 <LL_C2_IPCC_IsActiveFlag_CHx>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d008      	beq.n	80080a8 <HW_IPCC_Rx_Handler+0x44>
 8008096:	4b0d      	ldr	r3, [pc, #52]	; (80080cc <HW_IPCC_Rx_Handler+0x68>)
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d102      	bne.n	80080a8 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80080a2:	f000 f889 	bl	80081b8 <HW_IPCC_BLE_EvtHandler>
 80080a6:	e00e      	b.n	80080c6 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80080a8:	2108      	movs	r1, #8
 80080aa:	4808      	ldr	r0, [pc, #32]	; (80080cc <HW_IPCC_Rx_Handler+0x68>)
 80080ac:	f7ff ffc4 	bl	8008038 <LL_C2_IPCC_IsActiveFlag_CHx>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d008      	beq.n	80080c8 <HW_IPCC_Rx_Handler+0x64>
 80080b6:	4b05      	ldr	r3, [pc, #20]	; (80080cc <HW_IPCC_Rx_Handler+0x68>)
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	f003 0308 	and.w	r3, r3, #8
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d102      	bne.n	80080c8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80080c2:	f000 f901 	bl	80082c8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80080c6:	bf00      	nop
 80080c8:	bf00      	nop
}
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	58000c00 	.word	0x58000c00

080080d0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80080d4:	2102      	movs	r1, #2
 80080d6:	4818      	ldr	r0, [pc, #96]	; (8008138 <HW_IPCC_Tx_Handler+0x68>)
 80080d8:	f7ff ff99 	bl	800800e <LL_C1_IPCC_IsActiveFlag_CHx>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d108      	bne.n	80080f4 <HW_IPCC_Tx_Handler+0x24>
 80080e2:	4b15      	ldr	r3, [pc, #84]	; (8008138 <HW_IPCC_Tx_Handler+0x68>)
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d102      	bne.n	80080f4 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80080ee:	f000 f893 	bl	8008218 <HW_IPCC_SYS_CmdEvtHandler>
 80080f2:	e01e      	b.n	8008132 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80080f4:	2108      	movs	r1, #8
 80080f6:	4810      	ldr	r0, [pc, #64]	; (8008138 <HW_IPCC_Tx_Handler+0x68>)
 80080f8:	f7ff ff89 	bl	800800e <LL_C1_IPCC_IsActiveFlag_CHx>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d108      	bne.n	8008114 <HW_IPCC_Tx_Handler+0x44>
 8008102:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <HW_IPCC_Tx_Handler+0x68>)
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d102      	bne.n	8008114 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800810e:	f000 f8bd 	bl	800828c <HW_IPCC_MM_FreeBufHandler>
 8008112:	e00e      	b.n	8008132 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8008114:	2120      	movs	r1, #32
 8008116:	4808      	ldr	r0, [pc, #32]	; (8008138 <HW_IPCC_Tx_Handler+0x68>)
 8008118:	f7ff ff79 	bl	800800e <LL_C1_IPCC_IsActiveFlag_CHx>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d108      	bne.n	8008134 <HW_IPCC_Tx_Handler+0x64>
 8008122:	4b05      	ldr	r3, [pc, #20]	; (8008138 <HW_IPCC_Tx_Handler+0x68>)
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d102      	bne.n	8008134 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800812e:	f000 f84f 	bl	80081d0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8008132:	bf00      	nop
 8008134:	bf00      	nop
}
 8008136:	bd80      	pop	{r7, pc}
 8008138:	58000c00 	.word	0x58000c00

0800813c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800813c:	b580      	push	{r7, lr}
 800813e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8008140:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008144:	f7ff fed3 	bl	8007eee <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8008148:	f44f 7000 	mov.w	r0, #512	; 0x200
 800814c:	f7ff fea4 	bl	8007e98 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8008150:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008154:	f7ff fe8c 	bl	8007e70 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8008158:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800815a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800815c:	f7ff fe78 	bl	8007e50 <LL_PWR_EnableBootC2>

  return;
 8008160:	bf00      	nop
}
 8008162:	bd80      	pop	{r7, pc}

08008164 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8008168:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800816c:	f7ff fea6 	bl	8007ebc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8008170:	4806      	ldr	r0, [pc, #24]	; (800818c <HW_IPCC_Init+0x28>)
 8008172:	f7ff fee8 	bl	8007f46 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8008176:	4805      	ldr	r0, [pc, #20]	; (800818c <HW_IPCC_Init+0x28>)
 8008178:	f7ff fed5 	bl	8007f26 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800817c:	202c      	movs	r0, #44	; 0x2c
 800817e:	f7fa fa46 	bl	800260e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8008182:	202d      	movs	r0, #45	; 0x2d
 8008184:	f7fa fa43 	bl	800260e <HAL_NVIC_EnableIRQ>

  return;
 8008188:	bf00      	nop
}
 800818a:	bd80      	pop	{r7, pc}
 800818c:	58000c00 	.word	0x58000c00

08008190 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8008194:	2101      	movs	r1, #1
 8008196:	4802      	ldr	r0, [pc, #8]	; (80081a0 <HW_IPCC_BLE_Init+0x10>)
 8008198:	f7ff ff0a 	bl	8007fb0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800819c:	bf00      	nop
}
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	58000c00 	.word	0x58000c00

080081a4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 80081a8:	2101      	movs	r1, #1
 80081aa:	4802      	ldr	r0, [pc, #8]	; (80081b4 <HW_IPCC_BLE_SendCmd+0x10>)
 80081ac:	f7ff ff20 	bl	8007ff0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80081b0:	bf00      	nop
}
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	58000c00 	.word	0x58000c00

080081b8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80081bc:	f7fe fc4c 	bl	8006a58 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80081c0:	2101      	movs	r1, #1
 80081c2:	4802      	ldr	r0, [pc, #8]	; (80081cc <HW_IPCC_BLE_EvtHandler+0x14>)
 80081c4:	f7ff ff06 	bl	8007fd4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80081c8:	bf00      	nop
}
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	58000c00 	.word	0x58000c00

080081d0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80081d4:	2120      	movs	r1, #32
 80081d6:	4803      	ldr	r0, [pc, #12]	; (80081e4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80081d8:	f7ff fed8 	bl	8007f8c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80081dc:	f7fe fc6c 	bl	8006ab8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80081e0:	bf00      	nop
}
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	58000c00 	.word	0x58000c00

080081e8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80081ec:	2102      	movs	r1, #2
 80081ee:	4802      	ldr	r0, [pc, #8]	; (80081f8 <HW_IPCC_SYS_Init+0x10>)
 80081f0:	f7ff fede 	bl	8007fb0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80081f4:	bf00      	nop
}
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	58000c00 	.word	0x58000c00

080081fc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008200:	2102      	movs	r1, #2
 8008202:	4804      	ldr	r0, [pc, #16]	; (8008214 <HW_IPCC_SYS_SendCmd+0x18>)
 8008204:	f7ff fef4 	bl	8007ff0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008208:	2102      	movs	r1, #2
 800820a:	4802      	ldr	r0, [pc, #8]	; (8008214 <HW_IPCC_SYS_SendCmd+0x18>)
 800820c:	f7ff feab 	bl	8007f66 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008210:	bf00      	nop
}
 8008212:	bd80      	pop	{r7, pc}
 8008214:	58000c00 	.word	0x58000c00

08008218 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800821c:	2102      	movs	r1, #2
 800821e:	4803      	ldr	r0, [pc, #12]	; (800822c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008220:	f7ff feb4 	bl	8007f8c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8008224:	f7fe fc98 	bl	8006b58 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008228:	bf00      	nop
}
 800822a:	bd80      	pop	{r7, pc}
 800822c:	58000c00 	.word	0x58000c00

08008230 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8008234:	f7fe fca6 	bl	8006b84 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008238:	2102      	movs	r1, #2
 800823a:	4802      	ldr	r0, [pc, #8]	; (8008244 <HW_IPCC_SYS_EvtHandler+0x14>)
 800823c:	f7ff feca 	bl	8007fd4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008240:	bf00      	nop
}
 8008242:	bd80      	pop	{r7, pc}
 8008244:	58000c00 	.word	0x58000c00

08008248 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b082      	sub	sp, #8
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008250:	2108      	movs	r1, #8
 8008252:	480c      	ldr	r0, [pc, #48]	; (8008284 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008254:	f7ff fedb 	bl	800800e <LL_C1_IPCC_IsActiveFlag_CHx>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d007      	beq.n	800826e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800825e:	4a0a      	ldr	r2, [pc, #40]	; (8008288 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008264:	2108      	movs	r1, #8
 8008266:	4807      	ldr	r0, [pc, #28]	; (8008284 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008268:	f7ff fe7d 	bl	8007f66 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800826c:	e006      	b.n	800827c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008272:	2108      	movs	r1, #8
 8008274:	4803      	ldr	r0, [pc, #12]	; (8008284 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008276:	f7ff febb 	bl	8007ff0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800827a:	bf00      	nop
}
 800827c:	3708      	adds	r7, #8
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}
 8008282:	bf00      	nop
 8008284:	58000c00 	.word	0x58000c00
 8008288:	200003ac 	.word	0x200003ac

0800828c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008290:	2108      	movs	r1, #8
 8008292:	4806      	ldr	r0, [pc, #24]	; (80082ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 8008294:	f7ff fe7a 	bl	8007f8c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8008298:	4b05      	ldr	r3, [pc, #20]	; (80082b0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800829e:	2108      	movs	r1, #8
 80082a0:	4802      	ldr	r0, [pc, #8]	; (80082ac <HW_IPCC_MM_FreeBufHandler+0x20>)
 80082a2:	f7ff fea5 	bl	8007ff0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80082a6:	bf00      	nop
}
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	58000c00 	.word	0x58000c00
 80082b0:	200003ac 	.word	0x200003ac

080082b4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80082b8:	2108      	movs	r1, #8
 80082ba:	4802      	ldr	r0, [pc, #8]	; (80082c4 <HW_IPCC_TRACES_Init+0x10>)
 80082bc:	f7ff fe78 	bl	8007fb0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80082c0:	bf00      	nop
}
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	58000c00 	.word	0x58000c00

080082c8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80082cc:	f7fe fd02 	bl	8006cd4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80082d0:	2108      	movs	r1, #8
 80082d2:	4802      	ldr	r0, [pc, #8]	; (80082dc <HW_IPCC_TRACES_EvtHandler+0x14>)
 80082d4:	f7ff fe7e 	bl	8007fd4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80082d8:	bf00      	nop
}
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	58000c00 	.word	0x58000c00

080082e0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80082e0:	b480      	push	{r7}
 80082e2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80082e4:	4b05      	ldr	r3, [pc, #20]	; (80082fc <UTIL_LPM_Init+0x1c>)
 80082e6:	2200      	movs	r2, #0
 80082e8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80082ea:	4b05      	ldr	r3, [pc, #20]	; (8008300 <UTIL_LPM_Init+0x20>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80082f0:	bf00      	nop
 80082f2:	46bd      	mov	sp, r7
 80082f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f8:	4770      	bx	lr
 80082fa:	bf00      	nop
 80082fc:	200003b0 	.word	0x200003b0
 8008300:	200003b4 	.word	0x200003b4

08008304 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008304:	b480      	push	{r7}
 8008306:	b087      	sub	sp, #28
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	460b      	mov	r3, r1
 800830e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008310:	f3ef 8310 	mrs	r3, PRIMASK
 8008314:	613b      	str	r3, [r7, #16]
  return(result);
 8008316:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008318:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800831a:	b672      	cpsid	i
}
 800831c:	bf00      	nop
  
  switch(state)
 800831e:	78fb      	ldrb	r3, [r7, #3]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d008      	beq.n	8008336 <UTIL_LPM_SetOffMode+0x32>
 8008324:	2b01      	cmp	r3, #1
 8008326:	d10e      	bne.n	8008346 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008328:	4b0d      	ldr	r3, [pc, #52]	; (8008360 <UTIL_LPM_SetOffMode+0x5c>)
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4313      	orrs	r3, r2
 8008330:	4a0b      	ldr	r2, [pc, #44]	; (8008360 <UTIL_LPM_SetOffMode+0x5c>)
 8008332:	6013      	str	r3, [r2, #0]
      break;
 8008334:	e008      	b.n	8008348 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	43da      	mvns	r2, r3
 800833a:	4b09      	ldr	r3, [pc, #36]	; (8008360 <UTIL_LPM_SetOffMode+0x5c>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4013      	ands	r3, r2
 8008340:	4a07      	ldr	r2, [pc, #28]	; (8008360 <UTIL_LPM_SetOffMode+0x5c>)
 8008342:	6013      	str	r3, [r2, #0]
      break;
 8008344:	e000      	b.n	8008348 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8008346:	bf00      	nop
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f383 8810 	msr	PRIMASK, r3
}
 8008352:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008354:	bf00      	nop
 8008356:	371c      	adds	r7, #28
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	200003b4 	.word	0x200003b4

08008364 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b090      	sub	sp, #64	; 0x40
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800836c:	4b73      	ldr	r3, [pc, #460]	; (800853c <UTIL_SEQ_Run+0x1d8>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8008372:	4b72      	ldr	r3, [pc, #456]	; (800853c <UTIL_SEQ_Run+0x1d8>)
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4013      	ands	r3, r2
 800837a:	4a70      	ldr	r2, [pc, #448]	; (800853c <UTIL_SEQ_Run+0x1d8>)
 800837c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800837e:	4b70      	ldr	r3, [pc, #448]	; (8008540 <UTIL_SEQ_Run+0x1dc>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8008384:	4b6f      	ldr	r3, [pc, #444]	; (8008544 <UTIL_SEQ_Run+0x1e0>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800838a:	4b6f      	ldr	r3, [pc, #444]	; (8008548 <UTIL_SEQ_Run+0x1e4>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8008390:	4b6e      	ldr	r3, [pc, #440]	; (800854c <UTIL_SEQ_Run+0x1e8>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008396:	e08d      	b.n	80084b4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8008398:	2300      	movs	r3, #0
 800839a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800839c:	e002      	b.n	80083a4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800839e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a0:	3301      	adds	r3, #1
 80083a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80083a4:	4a6a      	ldr	r2, [pc, #424]	; (8008550 <UTIL_SEQ_Run+0x1ec>)
 80083a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	401a      	ands	r2, r3
 80083b0:	4b62      	ldr	r3, [pc, #392]	; (800853c <UTIL_SEQ_Run+0x1d8>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4013      	ands	r3, r2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d0f1      	beq.n	800839e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80083ba:	4a65      	ldr	r2, [pc, #404]	; (8008550 <UTIL_SEQ_Run+0x1ec>)
 80083bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083be:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	401a      	ands	r2, r3
 80083c6:	4b5d      	ldr	r3, [pc, #372]	; (800853c <UTIL_SEQ_Run+0x1d8>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4013      	ands	r3, r2
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80083ce:	4a60      	ldr	r2, [pc, #384]	; (8008550 <UTIL_SEQ_Run+0x1ec>)
 80083d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	4413      	add	r3, r2
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	4013      	ands	r3, r2
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d106      	bne.n	80083ee <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80083e0:	4a5b      	ldr	r2, [pc, #364]	; (8008550 <UTIL_SEQ_Run+0x1ec>)
 80083e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e4:	00db      	lsls	r3, r3, #3
 80083e6:	4413      	add	r3, r2
 80083e8:	f04f 32ff 	mov.w	r2, #4294967295
 80083ec:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80083ee:	4a58      	ldr	r2, [pc, #352]	; (8008550 <UTIL_SEQ_Run+0x1ec>)
 80083f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083f2:	00db      	lsls	r3, r3, #3
 80083f4:	4413      	add	r3, r2
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	4013      	ands	r3, r2
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 f9b3 	bl	8008768 <SEQ_BitPosition>
 8008402:	4603      	mov	r3, r0
 8008404:	461a      	mov	r2, r3
 8008406:	4b53      	ldr	r3, [pc, #332]	; (8008554 <UTIL_SEQ_Run+0x1f0>)
 8008408:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800840a:	4a51      	ldr	r2, [pc, #324]	; (8008550 <UTIL_SEQ_Run+0x1ec>)
 800840c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	4413      	add	r3, r2
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	4b4f      	ldr	r3, [pc, #316]	; (8008554 <UTIL_SEQ_Run+0x1f0>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2101      	movs	r1, #1
 800841a:	fa01 f303 	lsl.w	r3, r1, r3
 800841e:	43db      	mvns	r3, r3
 8008420:	401a      	ands	r2, r3
 8008422:	494b      	ldr	r1, [pc, #300]	; (8008550 <UTIL_SEQ_Run+0x1ec>)
 8008424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008426:	00db      	lsls	r3, r3, #3
 8008428:	440b      	add	r3, r1
 800842a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800842c:	f3ef 8310 	mrs	r3, PRIMASK
 8008430:	61bb      	str	r3, [r7, #24]
  return(result);
 8008432:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008434:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008436:	b672      	cpsid	i
}
 8008438:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800843a:	4b46      	ldr	r3, [pc, #280]	; (8008554 <UTIL_SEQ_Run+0x1f0>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2201      	movs	r2, #1
 8008440:	fa02 f303 	lsl.w	r3, r2, r3
 8008444:	43da      	mvns	r2, r3
 8008446:	4b3e      	ldr	r3, [pc, #248]	; (8008540 <UTIL_SEQ_Run+0x1dc>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4013      	ands	r3, r2
 800844c:	4a3c      	ldr	r2, [pc, #240]	; (8008540 <UTIL_SEQ_Run+0x1dc>)
 800844e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008450:	2302      	movs	r3, #2
 8008452:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008454:	e013      	b.n	800847e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8008456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008458:	3b01      	subs	r3, #1
 800845a:	4a3d      	ldr	r2, [pc, #244]	; (8008550 <UTIL_SEQ_Run+0x1ec>)
 800845c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8008460:	4b3c      	ldr	r3, [pc, #240]	; (8008554 <UTIL_SEQ_Run+0x1f0>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2201      	movs	r2, #1
 8008466:	fa02 f303 	lsl.w	r3, r2, r3
 800846a:	43da      	mvns	r2, r3
 800846c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800846e:	3b01      	subs	r3, #1
 8008470:	400a      	ands	r2, r1
 8008472:	4937      	ldr	r1, [pc, #220]	; (8008550 <UTIL_SEQ_Run+0x1ec>)
 8008474:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800847a:	3b01      	subs	r3, #1
 800847c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800847e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008480:	2b00      	cmp	r3, #0
 8008482:	d1e8      	bne.n	8008456 <UTIL_SEQ_Run+0xf2>
 8008484:	6a3b      	ldr	r3, [r7, #32]
 8008486:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	f383 8810 	msr	PRIMASK, r3
}
 800848e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8008490:	4b30      	ldr	r3, [pc, #192]	; (8008554 <UTIL_SEQ_Run+0x1f0>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a30      	ldr	r2, [pc, #192]	; (8008558 <UTIL_SEQ_Run+0x1f4>)
 8008496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800849a:	4798      	blx	r3

    local_taskset = TaskSet;
 800849c:	4b28      	ldr	r3, [pc, #160]	; (8008540 <UTIL_SEQ_Run+0x1dc>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 80084a2:	4b28      	ldr	r3, [pc, #160]	; (8008544 <UTIL_SEQ_Run+0x1e0>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 80084a8:	4b27      	ldr	r3, [pc, #156]	; (8008548 <UTIL_SEQ_Run+0x1e4>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 80084ae:	4b27      	ldr	r3, [pc, #156]	; (800854c <UTIL_SEQ_Run+0x1e8>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80084b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	401a      	ands	r2, r3
 80084ba:	4b20      	ldr	r3, [pc, #128]	; (800853c <UTIL_SEQ_Run+0x1d8>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4013      	ands	r3, r2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d005      	beq.n	80084d0 <UTIL_SEQ_Run+0x16c>
 80084c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c8:	4013      	ands	r3, r2
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f43f af64 	beq.w	8008398 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80084d0:	4b20      	ldr	r3, [pc, #128]	; (8008554 <UTIL_SEQ_Run+0x1f0>)
 80084d2:	f04f 32ff 	mov.w	r2, #4294967295
 80084d6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80084d8:	f000 f938 	bl	800874c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084dc:	f3ef 8310 	mrs	r3, PRIMASK
 80084e0:	613b      	str	r3, [r7, #16]
  return(result);
 80084e2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80084e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80084e6:	b672      	cpsid	i
}
 80084e8:	bf00      	nop
  local_taskset = TaskSet;
 80084ea:	4b15      	ldr	r3, [pc, #84]	; (8008540 <UTIL_SEQ_Run+0x1dc>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80084f0:	4b14      	ldr	r3, [pc, #80]	; (8008544 <UTIL_SEQ_Run+0x1e0>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80084f6:	4b14      	ldr	r3, [pc, #80]	; (8008548 <UTIL_SEQ_Run+0x1e4>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80084fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	401a      	ands	r2, r3
 8008502:	4b0e      	ldr	r3, [pc, #56]	; (800853c <UTIL_SEQ_Run+0x1d8>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4013      	ands	r3, r2
 8008508:	2b00      	cmp	r3, #0
 800850a:	d107      	bne.n	800851c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800850c:	4b0f      	ldr	r3, [pc, #60]	; (800854c <UTIL_SEQ_Run+0x1e8>)
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008512:	4013      	ands	r3, r2
 8008514:	2b00      	cmp	r3, #0
 8008516:	d101      	bne.n	800851c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8008518:	f7f8 fb29 	bl	8000b6e <UTIL_SEQ_Idle>
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f383 8810 	msr	PRIMASK, r3
}
 8008526:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8008528:	f000 f917 	bl	800875a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800852c:	4a03      	ldr	r2, [pc, #12]	; (800853c <UTIL_SEQ_Run+0x1d8>)
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	6013      	str	r3, [r2, #0]

  return;
 8008532:	bf00      	nop
}
 8008534:	3740      	adds	r7, #64	; 0x40
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	20000020 	.word	0x20000020
 8008540:	200003b8 	.word	0x200003b8
 8008544:	200003bc 	.word	0x200003bc
 8008548:	2000001c 	.word	0x2000001c
 800854c:	200003c0 	.word	0x200003c0
 8008550:	20000448 	.word	0x20000448
 8008554:	200003c4 	.word	0x200003c4
 8008558:	200003c8 	.word	0x200003c8

0800855c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b088      	sub	sp, #32
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008568:	f3ef 8310 	mrs	r3, PRIMASK
 800856c:	617b      	str	r3, [r7, #20]
  return(result);
 800856e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8008570:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008572:	b672      	cpsid	i
}
 8008574:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f000 f8f6 	bl	8008768 <SEQ_BitPosition>
 800857c:	4603      	mov	r3, r0
 800857e:	4619      	mov	r1, r3
 8008580:	4a06      	ldr	r2, [pc, #24]	; (800859c <UTIL_SEQ_RegTask+0x40>)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	f383 8810 	msr	PRIMASK, r3
}
 8008592:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8008594:	bf00      	nop
}
 8008596:	3720      	adds	r7, #32
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	200003c8 	.word	0x200003c8

080085a0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085aa:	f3ef 8310 	mrs	r3, PRIMASK
 80085ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80085b0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80085b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80085b4:	b672      	cpsid	i
}
 80085b6:	bf00      	nop

  TaskSet |= TaskId_bm;
 80085b8:	4b0d      	ldr	r3, [pc, #52]	; (80085f0 <UTIL_SEQ_SetTask+0x50>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4313      	orrs	r3, r2
 80085c0:	4a0b      	ldr	r2, [pc, #44]	; (80085f0 <UTIL_SEQ_SetTask+0x50>)
 80085c2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80085c4:	4a0b      	ldr	r2, [pc, #44]	; (80085f4 <UTIL_SEQ_SetTask+0x54>)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	431a      	orrs	r2, r3
 80085d0:	4908      	ldr	r1, [pc, #32]	; (80085f4 <UTIL_SEQ_SetTask+0x54>)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	f383 8810 	msr	PRIMASK, r3
}
 80085e2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80085e4:	bf00      	nop
}
 80085e6:	371c      	adds	r7, #28
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	200003b8 	.word	0x200003b8
 80085f4:	20000448 	.word	0x20000448

080085f8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008600:	f3ef 8310 	mrs	r3, PRIMASK
 8008604:	60fb      	str	r3, [r7, #12]
  return(result);
 8008606:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008608:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800860a:	b672      	cpsid	i
}
 800860c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	43da      	mvns	r2, r3
 8008612:	4b08      	ldr	r3, [pc, #32]	; (8008634 <UTIL_SEQ_PauseTask+0x3c>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4013      	ands	r3, r2
 8008618:	4a06      	ldr	r2, [pc, #24]	; (8008634 <UTIL_SEQ_PauseTask+0x3c>)
 800861a:	6013      	str	r3, [r2, #0]
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	f383 8810 	msr	PRIMASK, r3
}
 8008626:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008628:	bf00      	nop
}
 800862a:	371c      	adds	r7, #28
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr
 8008634:	2000001c 	.word	0x2000001c

08008638 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008638:	b480      	push	{r7}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008640:	f3ef 8310 	mrs	r3, PRIMASK
 8008644:	60fb      	str	r3, [r7, #12]
  return(result);
 8008646:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008648:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800864a:	b672      	cpsid	i
}
 800864c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800864e:	4b09      	ldr	r3, [pc, #36]	; (8008674 <UTIL_SEQ_ResumeTask+0x3c>)
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4313      	orrs	r3, r2
 8008656:	4a07      	ldr	r2, [pc, #28]	; (8008674 <UTIL_SEQ_ResumeTask+0x3c>)
 8008658:	6013      	str	r3, [r2, #0]
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	f383 8810 	msr	PRIMASK, r3
}
 8008664:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008666:	bf00      	nop
}
 8008668:	371c      	adds	r7, #28
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	2000001c 	.word	0x2000001c

08008678 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8008678:	b480      	push	{r7}
 800867a:	b087      	sub	sp, #28
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008680:	f3ef 8310 	mrs	r3, PRIMASK
 8008684:	60fb      	str	r3, [r7, #12]
  return(result);
 8008686:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008688:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800868a:	b672      	cpsid	i
}
 800868c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800868e:	4b09      	ldr	r3, [pc, #36]	; (80086b4 <UTIL_SEQ_SetEvt+0x3c>)
 8008690:	681a      	ldr	r2, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4313      	orrs	r3, r2
 8008696:	4a07      	ldr	r2, [pc, #28]	; (80086b4 <UTIL_SEQ_SetEvt+0x3c>)
 8008698:	6013      	str	r3, [r2, #0]
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	f383 8810 	msr	PRIMASK, r3
}
 80086a4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80086a6:	bf00      	nop
}
 80086a8:	371c      	adds	r7, #28
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	200003bc 	.word	0x200003bc

080086b8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80086c0:	4b1f      	ldr	r3, [pc, #124]	; (8008740 <UTIL_SEQ_WaitEvt+0x88>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80086c6:	4b1e      	ldr	r3, [pc, #120]	; (8008740 <UTIL_SEQ_WaitEvt+0x88>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ce:	d102      	bne.n	80086d6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80086d0:	2300      	movs	r3, #0
 80086d2:	61fb      	str	r3, [r7, #28]
 80086d4:	e005      	b.n	80086e2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80086d6:	4b1a      	ldr	r3, [pc, #104]	; (8008740 <UTIL_SEQ_WaitEvt+0x88>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2201      	movs	r2, #1
 80086dc:	fa02 f303 	lsl.w	r3, r2, r3
 80086e0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80086e2:	4b18      	ldr	r3, [pc, #96]	; (8008744 <UTIL_SEQ_WaitEvt+0x8c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80086e8:	4a16      	ldr	r2, [pc, #88]	; (8008744 <UTIL_SEQ_WaitEvt+0x8c>)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80086ee:	e003      	b.n	80086f8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	69f8      	ldr	r0, [r7, #28]
 80086f4:	f7f8 fa42 	bl	8000b7c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80086f8:	4b13      	ldr	r3, [pc, #76]	; (8008748 <UTIL_SEQ_WaitEvt+0x90>)
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	4013      	ands	r3, r2
 8008700:	2b00      	cmp	r3, #0
 8008702:	d0f5      	beq.n	80086f0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8008704:	4a0e      	ldr	r2, [pc, #56]	; (8008740 <UTIL_SEQ_WaitEvt+0x88>)
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800870a:	f3ef 8310 	mrs	r3, PRIMASK
 800870e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008710:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008712:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008714:	b672      	cpsid	i
}
 8008716:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	43da      	mvns	r2, r3
 800871c:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <UTIL_SEQ_WaitEvt+0x90>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4013      	ands	r3, r2
 8008722:	4a09      	ldr	r2, [pc, #36]	; (8008748 <UTIL_SEQ_WaitEvt+0x90>)
 8008724:	6013      	str	r3, [r2, #0]
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f383 8810 	msr	PRIMASK, r3
}
 8008730:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8008732:	4a04      	ldr	r2, [pc, #16]	; (8008744 <UTIL_SEQ_WaitEvt+0x8c>)
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	6013      	str	r3, [r2, #0]
  return;
 8008738:	bf00      	nop
}
 800873a:	3720      	adds	r7, #32
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}
 8008740:	200003c4 	.word	0x200003c4
 8008744:	200003c0 	.word	0x200003c0
 8008748:	200003bc 	.word	0x200003bc

0800874c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800874c:	b480      	push	{r7}
 800874e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008750:	bf00      	nop
}
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800875a:	b480      	push	{r7}
 800875c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800875e:	bf00      	nop
}
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	0c1b      	lsrs	r3, r3, #16
 800877c:	041b      	lsls	r3, r3, #16
 800877e:	2b00      	cmp	r3, #0
 8008780:	d104      	bne.n	800878c <SEQ_BitPosition+0x24>
 8008782:	2310      	movs	r3, #16
 8008784:	73fb      	strb	r3, [r7, #15]
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	041b      	lsls	r3, r3, #16
 800878a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d105      	bne.n	80087a2 <SEQ_BitPosition+0x3a>
 8008796:	7bfb      	ldrb	r3, [r7, #15]
 8008798:	3308      	adds	r3, #8
 800879a:	73fb      	strb	r3, [r7, #15]
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	021b      	lsls	r3, r3, #8
 80087a0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d105      	bne.n	80087b8 <SEQ_BitPosition+0x50>
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	3304      	adds	r3, #4
 80087b0:	73fb      	strb	r3, [r7, #15]
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	011b      	lsls	r3, r3, #4
 80087b6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	0f1b      	lsrs	r3, r3, #28
 80087bc:	4a07      	ldr	r2, [pc, #28]	; (80087dc <SEQ_BitPosition+0x74>)
 80087be:	5cd2      	ldrb	r2, [r2, r3]
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
 80087c2:	4413      	add	r3, r2
 80087c4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	f1c3 031f 	rsb	r3, r3, #31
 80087cc:	b2db      	uxtb	r3, r3
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3714      	adds	r7, #20
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	08009dd8 	.word	0x08009dd8

080087e0 <std>:
 80087e0:	2300      	movs	r3, #0
 80087e2:	b510      	push	{r4, lr}
 80087e4:	4604      	mov	r4, r0
 80087e6:	e9c0 3300 	strd	r3, r3, [r0]
 80087ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087ee:	6083      	str	r3, [r0, #8]
 80087f0:	8181      	strh	r1, [r0, #12]
 80087f2:	6643      	str	r3, [r0, #100]	; 0x64
 80087f4:	81c2      	strh	r2, [r0, #14]
 80087f6:	6183      	str	r3, [r0, #24]
 80087f8:	4619      	mov	r1, r3
 80087fa:	2208      	movs	r2, #8
 80087fc:	305c      	adds	r0, #92	; 0x5c
 80087fe:	f000 f926 	bl	8008a4e <memset>
 8008802:	4b0d      	ldr	r3, [pc, #52]	; (8008838 <std+0x58>)
 8008804:	6263      	str	r3, [r4, #36]	; 0x24
 8008806:	4b0d      	ldr	r3, [pc, #52]	; (800883c <std+0x5c>)
 8008808:	62a3      	str	r3, [r4, #40]	; 0x28
 800880a:	4b0d      	ldr	r3, [pc, #52]	; (8008840 <std+0x60>)
 800880c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800880e:	4b0d      	ldr	r3, [pc, #52]	; (8008844 <std+0x64>)
 8008810:	6323      	str	r3, [r4, #48]	; 0x30
 8008812:	4b0d      	ldr	r3, [pc, #52]	; (8008848 <std+0x68>)
 8008814:	6224      	str	r4, [r4, #32]
 8008816:	429c      	cmp	r4, r3
 8008818:	d006      	beq.n	8008828 <std+0x48>
 800881a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800881e:	4294      	cmp	r4, r2
 8008820:	d002      	beq.n	8008828 <std+0x48>
 8008822:	33d0      	adds	r3, #208	; 0xd0
 8008824:	429c      	cmp	r4, r3
 8008826:	d105      	bne.n	8008834 <std+0x54>
 8008828:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800882c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008830:	f000 b994 	b.w	8008b5c <__retarget_lock_init_recursive>
 8008834:	bd10      	pop	{r4, pc}
 8008836:	bf00      	nop
 8008838:	080089c9 	.word	0x080089c9
 800883c:	080089eb 	.word	0x080089eb
 8008840:	08008a23 	.word	0x08008a23
 8008844:	08008a47 	.word	0x08008a47
 8008848:	20000458 	.word	0x20000458

0800884c <stdio_exit_handler>:
 800884c:	4a02      	ldr	r2, [pc, #8]	; (8008858 <stdio_exit_handler+0xc>)
 800884e:	4903      	ldr	r1, [pc, #12]	; (800885c <stdio_exit_handler+0x10>)
 8008850:	4803      	ldr	r0, [pc, #12]	; (8008860 <stdio_exit_handler+0x14>)
 8008852:	f000 b869 	b.w	8008928 <_fwalk_sglue>
 8008856:	bf00      	nop
 8008858:	20000024 	.word	0x20000024
 800885c:	080096d5 	.word	0x080096d5
 8008860:	20000030 	.word	0x20000030

08008864 <cleanup_stdio>:
 8008864:	6841      	ldr	r1, [r0, #4]
 8008866:	4b0c      	ldr	r3, [pc, #48]	; (8008898 <cleanup_stdio+0x34>)
 8008868:	4299      	cmp	r1, r3
 800886a:	b510      	push	{r4, lr}
 800886c:	4604      	mov	r4, r0
 800886e:	d001      	beq.n	8008874 <cleanup_stdio+0x10>
 8008870:	f000 ff30 	bl	80096d4 <_fflush_r>
 8008874:	68a1      	ldr	r1, [r4, #8]
 8008876:	4b09      	ldr	r3, [pc, #36]	; (800889c <cleanup_stdio+0x38>)
 8008878:	4299      	cmp	r1, r3
 800887a:	d002      	beq.n	8008882 <cleanup_stdio+0x1e>
 800887c:	4620      	mov	r0, r4
 800887e:	f000 ff29 	bl	80096d4 <_fflush_r>
 8008882:	68e1      	ldr	r1, [r4, #12]
 8008884:	4b06      	ldr	r3, [pc, #24]	; (80088a0 <cleanup_stdio+0x3c>)
 8008886:	4299      	cmp	r1, r3
 8008888:	d004      	beq.n	8008894 <cleanup_stdio+0x30>
 800888a:	4620      	mov	r0, r4
 800888c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008890:	f000 bf20 	b.w	80096d4 <_fflush_r>
 8008894:	bd10      	pop	{r4, pc}
 8008896:	bf00      	nop
 8008898:	20000458 	.word	0x20000458
 800889c:	200004c0 	.word	0x200004c0
 80088a0:	20000528 	.word	0x20000528

080088a4 <global_stdio_init.part.0>:
 80088a4:	b510      	push	{r4, lr}
 80088a6:	4b0b      	ldr	r3, [pc, #44]	; (80088d4 <global_stdio_init.part.0+0x30>)
 80088a8:	4c0b      	ldr	r4, [pc, #44]	; (80088d8 <global_stdio_init.part.0+0x34>)
 80088aa:	4a0c      	ldr	r2, [pc, #48]	; (80088dc <global_stdio_init.part.0+0x38>)
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	4620      	mov	r0, r4
 80088b0:	2200      	movs	r2, #0
 80088b2:	2104      	movs	r1, #4
 80088b4:	f7ff ff94 	bl	80087e0 <std>
 80088b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80088bc:	2201      	movs	r2, #1
 80088be:	2109      	movs	r1, #9
 80088c0:	f7ff ff8e 	bl	80087e0 <std>
 80088c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80088c8:	2202      	movs	r2, #2
 80088ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088ce:	2112      	movs	r1, #18
 80088d0:	f7ff bf86 	b.w	80087e0 <std>
 80088d4:	20000590 	.word	0x20000590
 80088d8:	20000458 	.word	0x20000458
 80088dc:	0800884d 	.word	0x0800884d

080088e0 <__sfp_lock_acquire>:
 80088e0:	4801      	ldr	r0, [pc, #4]	; (80088e8 <__sfp_lock_acquire+0x8>)
 80088e2:	f000 b93c 	b.w	8008b5e <__retarget_lock_acquire_recursive>
 80088e6:	bf00      	nop
 80088e8:	20000599 	.word	0x20000599

080088ec <__sfp_lock_release>:
 80088ec:	4801      	ldr	r0, [pc, #4]	; (80088f4 <__sfp_lock_release+0x8>)
 80088ee:	f000 b937 	b.w	8008b60 <__retarget_lock_release_recursive>
 80088f2:	bf00      	nop
 80088f4:	20000599 	.word	0x20000599

080088f8 <__sinit>:
 80088f8:	b510      	push	{r4, lr}
 80088fa:	4604      	mov	r4, r0
 80088fc:	f7ff fff0 	bl	80088e0 <__sfp_lock_acquire>
 8008900:	6a23      	ldr	r3, [r4, #32]
 8008902:	b11b      	cbz	r3, 800890c <__sinit+0x14>
 8008904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008908:	f7ff bff0 	b.w	80088ec <__sfp_lock_release>
 800890c:	4b04      	ldr	r3, [pc, #16]	; (8008920 <__sinit+0x28>)
 800890e:	6223      	str	r3, [r4, #32]
 8008910:	4b04      	ldr	r3, [pc, #16]	; (8008924 <__sinit+0x2c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1f5      	bne.n	8008904 <__sinit+0xc>
 8008918:	f7ff ffc4 	bl	80088a4 <global_stdio_init.part.0>
 800891c:	e7f2      	b.n	8008904 <__sinit+0xc>
 800891e:	bf00      	nop
 8008920:	08008865 	.word	0x08008865
 8008924:	20000590 	.word	0x20000590

08008928 <_fwalk_sglue>:
 8008928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800892c:	4607      	mov	r7, r0
 800892e:	4688      	mov	r8, r1
 8008930:	4614      	mov	r4, r2
 8008932:	2600      	movs	r6, #0
 8008934:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008938:	f1b9 0901 	subs.w	r9, r9, #1
 800893c:	d505      	bpl.n	800894a <_fwalk_sglue+0x22>
 800893e:	6824      	ldr	r4, [r4, #0]
 8008940:	2c00      	cmp	r4, #0
 8008942:	d1f7      	bne.n	8008934 <_fwalk_sglue+0xc>
 8008944:	4630      	mov	r0, r6
 8008946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800894a:	89ab      	ldrh	r3, [r5, #12]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d907      	bls.n	8008960 <_fwalk_sglue+0x38>
 8008950:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008954:	3301      	adds	r3, #1
 8008956:	d003      	beq.n	8008960 <_fwalk_sglue+0x38>
 8008958:	4629      	mov	r1, r5
 800895a:	4638      	mov	r0, r7
 800895c:	47c0      	blx	r8
 800895e:	4306      	orrs	r6, r0
 8008960:	3568      	adds	r5, #104	; 0x68
 8008962:	e7e9      	b.n	8008938 <_fwalk_sglue+0x10>

08008964 <iprintf>:
 8008964:	b40f      	push	{r0, r1, r2, r3}
 8008966:	b507      	push	{r0, r1, r2, lr}
 8008968:	4906      	ldr	r1, [pc, #24]	; (8008984 <iprintf+0x20>)
 800896a:	ab04      	add	r3, sp, #16
 800896c:	6808      	ldr	r0, [r1, #0]
 800896e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008972:	6881      	ldr	r1, [r0, #8]
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	f000 fb7d 	bl	8009074 <_vfiprintf_r>
 800897a:	b003      	add	sp, #12
 800897c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008980:	b004      	add	sp, #16
 8008982:	4770      	bx	lr
 8008984:	2000007c 	.word	0x2000007c

08008988 <siprintf>:
 8008988:	b40e      	push	{r1, r2, r3}
 800898a:	b500      	push	{lr}
 800898c:	b09c      	sub	sp, #112	; 0x70
 800898e:	ab1d      	add	r3, sp, #116	; 0x74
 8008990:	9002      	str	r0, [sp, #8]
 8008992:	9006      	str	r0, [sp, #24]
 8008994:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008998:	4809      	ldr	r0, [pc, #36]	; (80089c0 <siprintf+0x38>)
 800899a:	9107      	str	r1, [sp, #28]
 800899c:	9104      	str	r1, [sp, #16]
 800899e:	4909      	ldr	r1, [pc, #36]	; (80089c4 <siprintf+0x3c>)
 80089a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a4:	9105      	str	r1, [sp, #20]
 80089a6:	6800      	ldr	r0, [r0, #0]
 80089a8:	9301      	str	r3, [sp, #4]
 80089aa:	a902      	add	r1, sp, #8
 80089ac:	f000 fa3a 	bl	8008e24 <_svfiprintf_r>
 80089b0:	9b02      	ldr	r3, [sp, #8]
 80089b2:	2200      	movs	r2, #0
 80089b4:	701a      	strb	r2, [r3, #0]
 80089b6:	b01c      	add	sp, #112	; 0x70
 80089b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089bc:	b003      	add	sp, #12
 80089be:	4770      	bx	lr
 80089c0:	2000007c 	.word	0x2000007c
 80089c4:	ffff0208 	.word	0xffff0208

080089c8 <__sread>:
 80089c8:	b510      	push	{r4, lr}
 80089ca:	460c      	mov	r4, r1
 80089cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d0:	f000 f876 	bl	8008ac0 <_read_r>
 80089d4:	2800      	cmp	r0, #0
 80089d6:	bfab      	itete	ge
 80089d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089da:	89a3      	ldrhlt	r3, [r4, #12]
 80089dc:	181b      	addge	r3, r3, r0
 80089de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089e2:	bfac      	ite	ge
 80089e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80089e6:	81a3      	strhlt	r3, [r4, #12]
 80089e8:	bd10      	pop	{r4, pc}

080089ea <__swrite>:
 80089ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ee:	461f      	mov	r7, r3
 80089f0:	898b      	ldrh	r3, [r1, #12]
 80089f2:	05db      	lsls	r3, r3, #23
 80089f4:	4605      	mov	r5, r0
 80089f6:	460c      	mov	r4, r1
 80089f8:	4616      	mov	r6, r2
 80089fa:	d505      	bpl.n	8008a08 <__swrite+0x1e>
 80089fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a00:	2302      	movs	r3, #2
 8008a02:	2200      	movs	r2, #0
 8008a04:	f000 f84a 	bl	8008a9c <_lseek_r>
 8008a08:	89a3      	ldrh	r3, [r4, #12]
 8008a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a12:	81a3      	strh	r3, [r4, #12]
 8008a14:	4632      	mov	r2, r6
 8008a16:	463b      	mov	r3, r7
 8008a18:	4628      	mov	r0, r5
 8008a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1e:	f000 b861 	b.w	8008ae4 <_write_r>

08008a22 <__sseek>:
 8008a22:	b510      	push	{r4, lr}
 8008a24:	460c      	mov	r4, r1
 8008a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a2a:	f000 f837 	bl	8008a9c <_lseek_r>
 8008a2e:	1c43      	adds	r3, r0, #1
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	bf15      	itete	ne
 8008a34:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a3e:	81a3      	strheq	r3, [r4, #12]
 8008a40:	bf18      	it	ne
 8008a42:	81a3      	strhne	r3, [r4, #12]
 8008a44:	bd10      	pop	{r4, pc}

08008a46 <__sclose>:
 8008a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a4a:	f000 b817 	b.w	8008a7c <_close_r>

08008a4e <memset>:
 8008a4e:	4402      	add	r2, r0
 8008a50:	4603      	mov	r3, r0
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d100      	bne.n	8008a58 <memset+0xa>
 8008a56:	4770      	bx	lr
 8008a58:	f803 1b01 	strb.w	r1, [r3], #1
 8008a5c:	e7f9      	b.n	8008a52 <memset+0x4>

08008a5e <strcat>:
 8008a5e:	b510      	push	{r4, lr}
 8008a60:	4602      	mov	r2, r0
 8008a62:	7814      	ldrb	r4, [r2, #0]
 8008a64:	4613      	mov	r3, r2
 8008a66:	3201      	adds	r2, #1
 8008a68:	2c00      	cmp	r4, #0
 8008a6a:	d1fa      	bne.n	8008a62 <strcat+0x4>
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a76:	2a00      	cmp	r2, #0
 8008a78:	d1f9      	bne.n	8008a6e <strcat+0x10>
 8008a7a:	bd10      	pop	{r4, pc}

08008a7c <_close_r>:
 8008a7c:	b538      	push	{r3, r4, r5, lr}
 8008a7e:	4d06      	ldr	r5, [pc, #24]	; (8008a98 <_close_r+0x1c>)
 8008a80:	2300      	movs	r3, #0
 8008a82:	4604      	mov	r4, r0
 8008a84:	4608      	mov	r0, r1
 8008a86:	602b      	str	r3, [r5, #0]
 8008a88:	f7f9 faf6 	bl	8002078 <_close>
 8008a8c:	1c43      	adds	r3, r0, #1
 8008a8e:	d102      	bne.n	8008a96 <_close_r+0x1a>
 8008a90:	682b      	ldr	r3, [r5, #0]
 8008a92:	b103      	cbz	r3, 8008a96 <_close_r+0x1a>
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	bd38      	pop	{r3, r4, r5, pc}
 8008a98:	20000594 	.word	0x20000594

08008a9c <_lseek_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4d07      	ldr	r5, [pc, #28]	; (8008abc <_lseek_r+0x20>)
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	4608      	mov	r0, r1
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	602a      	str	r2, [r5, #0]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	f7f9 fb0b 	bl	80020c6 <_lseek>
 8008ab0:	1c43      	adds	r3, r0, #1
 8008ab2:	d102      	bne.n	8008aba <_lseek_r+0x1e>
 8008ab4:	682b      	ldr	r3, [r5, #0]
 8008ab6:	b103      	cbz	r3, 8008aba <_lseek_r+0x1e>
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	bd38      	pop	{r3, r4, r5, pc}
 8008abc:	20000594 	.word	0x20000594

08008ac0 <_read_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4d07      	ldr	r5, [pc, #28]	; (8008ae0 <_read_r+0x20>)
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	4608      	mov	r0, r1
 8008ac8:	4611      	mov	r1, r2
 8008aca:	2200      	movs	r2, #0
 8008acc:	602a      	str	r2, [r5, #0]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	f7f9 fa99 	bl	8002006 <_read>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_read_r+0x1e>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_read_r+0x1e>
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	20000594 	.word	0x20000594

08008ae4 <_write_r>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	4d07      	ldr	r5, [pc, #28]	; (8008b04 <_write_r+0x20>)
 8008ae8:	4604      	mov	r4, r0
 8008aea:	4608      	mov	r0, r1
 8008aec:	4611      	mov	r1, r2
 8008aee:	2200      	movs	r2, #0
 8008af0:	602a      	str	r2, [r5, #0]
 8008af2:	461a      	mov	r2, r3
 8008af4:	f7f9 faa4 	bl	8002040 <_write>
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	d102      	bne.n	8008b02 <_write_r+0x1e>
 8008afc:	682b      	ldr	r3, [r5, #0]
 8008afe:	b103      	cbz	r3, 8008b02 <_write_r+0x1e>
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	bd38      	pop	{r3, r4, r5, pc}
 8008b04:	20000594 	.word	0x20000594

08008b08 <__errno>:
 8008b08:	4b01      	ldr	r3, [pc, #4]	; (8008b10 <__errno+0x8>)
 8008b0a:	6818      	ldr	r0, [r3, #0]
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	2000007c 	.word	0x2000007c

08008b14 <__libc_init_array>:
 8008b14:	b570      	push	{r4, r5, r6, lr}
 8008b16:	4d0d      	ldr	r5, [pc, #52]	; (8008b4c <__libc_init_array+0x38>)
 8008b18:	4c0d      	ldr	r4, [pc, #52]	; (8008b50 <__libc_init_array+0x3c>)
 8008b1a:	1b64      	subs	r4, r4, r5
 8008b1c:	10a4      	asrs	r4, r4, #2
 8008b1e:	2600      	movs	r6, #0
 8008b20:	42a6      	cmp	r6, r4
 8008b22:	d109      	bne.n	8008b38 <__libc_init_array+0x24>
 8008b24:	4d0b      	ldr	r5, [pc, #44]	; (8008b54 <__libc_init_array+0x40>)
 8008b26:	4c0c      	ldr	r4, [pc, #48]	; (8008b58 <__libc_init_array+0x44>)
 8008b28:	f000 ff78 	bl	8009a1c <_init>
 8008b2c:	1b64      	subs	r4, r4, r5
 8008b2e:	10a4      	asrs	r4, r4, #2
 8008b30:	2600      	movs	r6, #0
 8008b32:	42a6      	cmp	r6, r4
 8008b34:	d105      	bne.n	8008b42 <__libc_init_array+0x2e>
 8008b36:	bd70      	pop	{r4, r5, r6, pc}
 8008b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b3c:	4798      	blx	r3
 8008b3e:	3601      	adds	r6, #1
 8008b40:	e7ee      	b.n	8008b20 <__libc_init_array+0xc>
 8008b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b46:	4798      	blx	r3
 8008b48:	3601      	adds	r6, #1
 8008b4a:	e7f2      	b.n	8008b32 <__libc_init_array+0x1e>
 8008b4c:	08009e24 	.word	0x08009e24
 8008b50:	08009e24 	.word	0x08009e24
 8008b54:	08009e24 	.word	0x08009e24
 8008b58:	08009e28 	.word	0x08009e28

08008b5c <__retarget_lock_init_recursive>:
 8008b5c:	4770      	bx	lr

08008b5e <__retarget_lock_acquire_recursive>:
 8008b5e:	4770      	bx	lr

08008b60 <__retarget_lock_release_recursive>:
 8008b60:	4770      	bx	lr

08008b62 <memcpy>:
 8008b62:	440a      	add	r2, r1
 8008b64:	4291      	cmp	r1, r2
 8008b66:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b6a:	d100      	bne.n	8008b6e <memcpy+0xc>
 8008b6c:	4770      	bx	lr
 8008b6e:	b510      	push	{r4, lr}
 8008b70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b78:	4291      	cmp	r1, r2
 8008b7a:	d1f9      	bne.n	8008b70 <memcpy+0xe>
 8008b7c:	bd10      	pop	{r4, pc}
	...

08008b80 <_free_r>:
 8008b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b82:	2900      	cmp	r1, #0
 8008b84:	d044      	beq.n	8008c10 <_free_r+0x90>
 8008b86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b8a:	9001      	str	r0, [sp, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f1a1 0404 	sub.w	r4, r1, #4
 8008b92:	bfb8      	it	lt
 8008b94:	18e4      	addlt	r4, r4, r3
 8008b96:	f000 f8df 	bl	8008d58 <__malloc_lock>
 8008b9a:	4a1e      	ldr	r2, [pc, #120]	; (8008c14 <_free_r+0x94>)
 8008b9c:	9801      	ldr	r0, [sp, #4]
 8008b9e:	6813      	ldr	r3, [r2, #0]
 8008ba0:	b933      	cbnz	r3, 8008bb0 <_free_r+0x30>
 8008ba2:	6063      	str	r3, [r4, #4]
 8008ba4:	6014      	str	r4, [r2, #0]
 8008ba6:	b003      	add	sp, #12
 8008ba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bac:	f000 b8da 	b.w	8008d64 <__malloc_unlock>
 8008bb0:	42a3      	cmp	r3, r4
 8008bb2:	d908      	bls.n	8008bc6 <_free_r+0x46>
 8008bb4:	6825      	ldr	r5, [r4, #0]
 8008bb6:	1961      	adds	r1, r4, r5
 8008bb8:	428b      	cmp	r3, r1
 8008bba:	bf01      	itttt	eq
 8008bbc:	6819      	ldreq	r1, [r3, #0]
 8008bbe:	685b      	ldreq	r3, [r3, #4]
 8008bc0:	1949      	addeq	r1, r1, r5
 8008bc2:	6021      	streq	r1, [r4, #0]
 8008bc4:	e7ed      	b.n	8008ba2 <_free_r+0x22>
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	b10b      	cbz	r3, 8008bd0 <_free_r+0x50>
 8008bcc:	42a3      	cmp	r3, r4
 8008bce:	d9fa      	bls.n	8008bc6 <_free_r+0x46>
 8008bd0:	6811      	ldr	r1, [r2, #0]
 8008bd2:	1855      	adds	r5, r2, r1
 8008bd4:	42a5      	cmp	r5, r4
 8008bd6:	d10b      	bne.n	8008bf0 <_free_r+0x70>
 8008bd8:	6824      	ldr	r4, [r4, #0]
 8008bda:	4421      	add	r1, r4
 8008bdc:	1854      	adds	r4, r2, r1
 8008bde:	42a3      	cmp	r3, r4
 8008be0:	6011      	str	r1, [r2, #0]
 8008be2:	d1e0      	bne.n	8008ba6 <_free_r+0x26>
 8008be4:	681c      	ldr	r4, [r3, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	6053      	str	r3, [r2, #4]
 8008bea:	440c      	add	r4, r1
 8008bec:	6014      	str	r4, [r2, #0]
 8008bee:	e7da      	b.n	8008ba6 <_free_r+0x26>
 8008bf0:	d902      	bls.n	8008bf8 <_free_r+0x78>
 8008bf2:	230c      	movs	r3, #12
 8008bf4:	6003      	str	r3, [r0, #0]
 8008bf6:	e7d6      	b.n	8008ba6 <_free_r+0x26>
 8008bf8:	6825      	ldr	r5, [r4, #0]
 8008bfa:	1961      	adds	r1, r4, r5
 8008bfc:	428b      	cmp	r3, r1
 8008bfe:	bf04      	itt	eq
 8008c00:	6819      	ldreq	r1, [r3, #0]
 8008c02:	685b      	ldreq	r3, [r3, #4]
 8008c04:	6063      	str	r3, [r4, #4]
 8008c06:	bf04      	itt	eq
 8008c08:	1949      	addeq	r1, r1, r5
 8008c0a:	6021      	streq	r1, [r4, #0]
 8008c0c:	6054      	str	r4, [r2, #4]
 8008c0e:	e7ca      	b.n	8008ba6 <_free_r+0x26>
 8008c10:	b003      	add	sp, #12
 8008c12:	bd30      	pop	{r4, r5, pc}
 8008c14:	2000059c 	.word	0x2000059c

08008c18 <sbrk_aligned>:
 8008c18:	b570      	push	{r4, r5, r6, lr}
 8008c1a:	4e0e      	ldr	r6, [pc, #56]	; (8008c54 <sbrk_aligned+0x3c>)
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	6831      	ldr	r1, [r6, #0]
 8008c20:	4605      	mov	r5, r0
 8008c22:	b911      	cbnz	r1, 8008c2a <sbrk_aligned+0x12>
 8008c24:	f000 fe2e 	bl	8009884 <_sbrk_r>
 8008c28:	6030      	str	r0, [r6, #0]
 8008c2a:	4621      	mov	r1, r4
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	f000 fe29 	bl	8009884 <_sbrk_r>
 8008c32:	1c43      	adds	r3, r0, #1
 8008c34:	d00a      	beq.n	8008c4c <sbrk_aligned+0x34>
 8008c36:	1cc4      	adds	r4, r0, #3
 8008c38:	f024 0403 	bic.w	r4, r4, #3
 8008c3c:	42a0      	cmp	r0, r4
 8008c3e:	d007      	beq.n	8008c50 <sbrk_aligned+0x38>
 8008c40:	1a21      	subs	r1, r4, r0
 8008c42:	4628      	mov	r0, r5
 8008c44:	f000 fe1e 	bl	8009884 <_sbrk_r>
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d101      	bne.n	8008c50 <sbrk_aligned+0x38>
 8008c4c:	f04f 34ff 	mov.w	r4, #4294967295
 8008c50:	4620      	mov	r0, r4
 8008c52:	bd70      	pop	{r4, r5, r6, pc}
 8008c54:	200005a0 	.word	0x200005a0

08008c58 <_malloc_r>:
 8008c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c5c:	1ccd      	adds	r5, r1, #3
 8008c5e:	f025 0503 	bic.w	r5, r5, #3
 8008c62:	3508      	adds	r5, #8
 8008c64:	2d0c      	cmp	r5, #12
 8008c66:	bf38      	it	cc
 8008c68:	250c      	movcc	r5, #12
 8008c6a:	2d00      	cmp	r5, #0
 8008c6c:	4607      	mov	r7, r0
 8008c6e:	db01      	blt.n	8008c74 <_malloc_r+0x1c>
 8008c70:	42a9      	cmp	r1, r5
 8008c72:	d905      	bls.n	8008c80 <_malloc_r+0x28>
 8008c74:	230c      	movs	r3, #12
 8008c76:	603b      	str	r3, [r7, #0]
 8008c78:	2600      	movs	r6, #0
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008d54 <_malloc_r+0xfc>
 8008c84:	f000 f868 	bl	8008d58 <__malloc_lock>
 8008c88:	f8d8 3000 	ldr.w	r3, [r8]
 8008c8c:	461c      	mov	r4, r3
 8008c8e:	bb5c      	cbnz	r4, 8008ce8 <_malloc_r+0x90>
 8008c90:	4629      	mov	r1, r5
 8008c92:	4638      	mov	r0, r7
 8008c94:	f7ff ffc0 	bl	8008c18 <sbrk_aligned>
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	d155      	bne.n	8008d4a <_malloc_r+0xf2>
 8008c9e:	f8d8 4000 	ldr.w	r4, [r8]
 8008ca2:	4626      	mov	r6, r4
 8008ca4:	2e00      	cmp	r6, #0
 8008ca6:	d145      	bne.n	8008d34 <_malloc_r+0xdc>
 8008ca8:	2c00      	cmp	r4, #0
 8008caa:	d048      	beq.n	8008d3e <_malloc_r+0xe6>
 8008cac:	6823      	ldr	r3, [r4, #0]
 8008cae:	4631      	mov	r1, r6
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	eb04 0903 	add.w	r9, r4, r3
 8008cb6:	f000 fde5 	bl	8009884 <_sbrk_r>
 8008cba:	4581      	cmp	r9, r0
 8008cbc:	d13f      	bne.n	8008d3e <_malloc_r+0xe6>
 8008cbe:	6821      	ldr	r1, [r4, #0]
 8008cc0:	1a6d      	subs	r5, r5, r1
 8008cc2:	4629      	mov	r1, r5
 8008cc4:	4638      	mov	r0, r7
 8008cc6:	f7ff ffa7 	bl	8008c18 <sbrk_aligned>
 8008cca:	3001      	adds	r0, #1
 8008ccc:	d037      	beq.n	8008d3e <_malloc_r+0xe6>
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	442b      	add	r3, r5
 8008cd2:	6023      	str	r3, [r4, #0]
 8008cd4:	f8d8 3000 	ldr.w	r3, [r8]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d038      	beq.n	8008d4e <_malloc_r+0xf6>
 8008cdc:	685a      	ldr	r2, [r3, #4]
 8008cde:	42a2      	cmp	r2, r4
 8008ce0:	d12b      	bne.n	8008d3a <_malloc_r+0xe2>
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	605a      	str	r2, [r3, #4]
 8008ce6:	e00f      	b.n	8008d08 <_malloc_r+0xb0>
 8008ce8:	6822      	ldr	r2, [r4, #0]
 8008cea:	1b52      	subs	r2, r2, r5
 8008cec:	d41f      	bmi.n	8008d2e <_malloc_r+0xd6>
 8008cee:	2a0b      	cmp	r2, #11
 8008cf0:	d917      	bls.n	8008d22 <_malloc_r+0xca>
 8008cf2:	1961      	adds	r1, r4, r5
 8008cf4:	42a3      	cmp	r3, r4
 8008cf6:	6025      	str	r5, [r4, #0]
 8008cf8:	bf18      	it	ne
 8008cfa:	6059      	strne	r1, [r3, #4]
 8008cfc:	6863      	ldr	r3, [r4, #4]
 8008cfe:	bf08      	it	eq
 8008d00:	f8c8 1000 	streq.w	r1, [r8]
 8008d04:	5162      	str	r2, [r4, r5]
 8008d06:	604b      	str	r3, [r1, #4]
 8008d08:	4638      	mov	r0, r7
 8008d0a:	f104 060b 	add.w	r6, r4, #11
 8008d0e:	f000 f829 	bl	8008d64 <__malloc_unlock>
 8008d12:	f026 0607 	bic.w	r6, r6, #7
 8008d16:	1d23      	adds	r3, r4, #4
 8008d18:	1af2      	subs	r2, r6, r3
 8008d1a:	d0ae      	beq.n	8008c7a <_malloc_r+0x22>
 8008d1c:	1b9b      	subs	r3, r3, r6
 8008d1e:	50a3      	str	r3, [r4, r2]
 8008d20:	e7ab      	b.n	8008c7a <_malloc_r+0x22>
 8008d22:	42a3      	cmp	r3, r4
 8008d24:	6862      	ldr	r2, [r4, #4]
 8008d26:	d1dd      	bne.n	8008ce4 <_malloc_r+0x8c>
 8008d28:	f8c8 2000 	str.w	r2, [r8]
 8008d2c:	e7ec      	b.n	8008d08 <_malloc_r+0xb0>
 8008d2e:	4623      	mov	r3, r4
 8008d30:	6864      	ldr	r4, [r4, #4]
 8008d32:	e7ac      	b.n	8008c8e <_malloc_r+0x36>
 8008d34:	4634      	mov	r4, r6
 8008d36:	6876      	ldr	r6, [r6, #4]
 8008d38:	e7b4      	b.n	8008ca4 <_malloc_r+0x4c>
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	e7cc      	b.n	8008cd8 <_malloc_r+0x80>
 8008d3e:	230c      	movs	r3, #12
 8008d40:	603b      	str	r3, [r7, #0]
 8008d42:	4638      	mov	r0, r7
 8008d44:	f000 f80e 	bl	8008d64 <__malloc_unlock>
 8008d48:	e797      	b.n	8008c7a <_malloc_r+0x22>
 8008d4a:	6025      	str	r5, [r4, #0]
 8008d4c:	e7dc      	b.n	8008d08 <_malloc_r+0xb0>
 8008d4e:	605b      	str	r3, [r3, #4]
 8008d50:	deff      	udf	#255	; 0xff
 8008d52:	bf00      	nop
 8008d54:	2000059c 	.word	0x2000059c

08008d58 <__malloc_lock>:
 8008d58:	4801      	ldr	r0, [pc, #4]	; (8008d60 <__malloc_lock+0x8>)
 8008d5a:	f7ff bf00 	b.w	8008b5e <__retarget_lock_acquire_recursive>
 8008d5e:	bf00      	nop
 8008d60:	20000598 	.word	0x20000598

08008d64 <__malloc_unlock>:
 8008d64:	4801      	ldr	r0, [pc, #4]	; (8008d6c <__malloc_unlock+0x8>)
 8008d66:	f7ff befb 	b.w	8008b60 <__retarget_lock_release_recursive>
 8008d6a:	bf00      	nop
 8008d6c:	20000598 	.word	0x20000598

08008d70 <__ssputs_r>:
 8008d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d74:	688e      	ldr	r6, [r1, #8]
 8008d76:	461f      	mov	r7, r3
 8008d78:	42be      	cmp	r6, r7
 8008d7a:	680b      	ldr	r3, [r1, #0]
 8008d7c:	4682      	mov	sl, r0
 8008d7e:	460c      	mov	r4, r1
 8008d80:	4690      	mov	r8, r2
 8008d82:	d82c      	bhi.n	8008dde <__ssputs_r+0x6e>
 8008d84:	898a      	ldrh	r2, [r1, #12]
 8008d86:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d8a:	d026      	beq.n	8008dda <__ssputs_r+0x6a>
 8008d8c:	6965      	ldr	r5, [r4, #20]
 8008d8e:	6909      	ldr	r1, [r1, #16]
 8008d90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d94:	eba3 0901 	sub.w	r9, r3, r1
 8008d98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d9c:	1c7b      	adds	r3, r7, #1
 8008d9e:	444b      	add	r3, r9
 8008da0:	106d      	asrs	r5, r5, #1
 8008da2:	429d      	cmp	r5, r3
 8008da4:	bf38      	it	cc
 8008da6:	461d      	movcc	r5, r3
 8008da8:	0553      	lsls	r3, r2, #21
 8008daa:	d527      	bpl.n	8008dfc <__ssputs_r+0x8c>
 8008dac:	4629      	mov	r1, r5
 8008dae:	f7ff ff53 	bl	8008c58 <_malloc_r>
 8008db2:	4606      	mov	r6, r0
 8008db4:	b360      	cbz	r0, 8008e10 <__ssputs_r+0xa0>
 8008db6:	6921      	ldr	r1, [r4, #16]
 8008db8:	464a      	mov	r2, r9
 8008dba:	f7ff fed2 	bl	8008b62 <memcpy>
 8008dbe:	89a3      	ldrh	r3, [r4, #12]
 8008dc0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dc8:	81a3      	strh	r3, [r4, #12]
 8008dca:	6126      	str	r6, [r4, #16]
 8008dcc:	6165      	str	r5, [r4, #20]
 8008dce:	444e      	add	r6, r9
 8008dd0:	eba5 0509 	sub.w	r5, r5, r9
 8008dd4:	6026      	str	r6, [r4, #0]
 8008dd6:	60a5      	str	r5, [r4, #8]
 8008dd8:	463e      	mov	r6, r7
 8008dda:	42be      	cmp	r6, r7
 8008ddc:	d900      	bls.n	8008de0 <__ssputs_r+0x70>
 8008dde:	463e      	mov	r6, r7
 8008de0:	6820      	ldr	r0, [r4, #0]
 8008de2:	4632      	mov	r2, r6
 8008de4:	4641      	mov	r1, r8
 8008de6:	f000 fd33 	bl	8009850 <memmove>
 8008dea:	68a3      	ldr	r3, [r4, #8]
 8008dec:	1b9b      	subs	r3, r3, r6
 8008dee:	60a3      	str	r3, [r4, #8]
 8008df0:	6823      	ldr	r3, [r4, #0]
 8008df2:	4433      	add	r3, r6
 8008df4:	6023      	str	r3, [r4, #0]
 8008df6:	2000      	movs	r0, #0
 8008df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dfc:	462a      	mov	r2, r5
 8008dfe:	f000 fd51 	bl	80098a4 <_realloc_r>
 8008e02:	4606      	mov	r6, r0
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d1e0      	bne.n	8008dca <__ssputs_r+0x5a>
 8008e08:	6921      	ldr	r1, [r4, #16]
 8008e0a:	4650      	mov	r0, sl
 8008e0c:	f7ff feb8 	bl	8008b80 <_free_r>
 8008e10:	230c      	movs	r3, #12
 8008e12:	f8ca 3000 	str.w	r3, [sl]
 8008e16:	89a3      	ldrh	r3, [r4, #12]
 8008e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e1c:	81a3      	strh	r3, [r4, #12]
 8008e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e22:	e7e9      	b.n	8008df8 <__ssputs_r+0x88>

08008e24 <_svfiprintf_r>:
 8008e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e28:	4698      	mov	r8, r3
 8008e2a:	898b      	ldrh	r3, [r1, #12]
 8008e2c:	061b      	lsls	r3, r3, #24
 8008e2e:	b09d      	sub	sp, #116	; 0x74
 8008e30:	4607      	mov	r7, r0
 8008e32:	460d      	mov	r5, r1
 8008e34:	4614      	mov	r4, r2
 8008e36:	d50e      	bpl.n	8008e56 <_svfiprintf_r+0x32>
 8008e38:	690b      	ldr	r3, [r1, #16]
 8008e3a:	b963      	cbnz	r3, 8008e56 <_svfiprintf_r+0x32>
 8008e3c:	2140      	movs	r1, #64	; 0x40
 8008e3e:	f7ff ff0b 	bl	8008c58 <_malloc_r>
 8008e42:	6028      	str	r0, [r5, #0]
 8008e44:	6128      	str	r0, [r5, #16]
 8008e46:	b920      	cbnz	r0, 8008e52 <_svfiprintf_r+0x2e>
 8008e48:	230c      	movs	r3, #12
 8008e4a:	603b      	str	r3, [r7, #0]
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e50:	e0d0      	b.n	8008ff4 <_svfiprintf_r+0x1d0>
 8008e52:	2340      	movs	r3, #64	; 0x40
 8008e54:	616b      	str	r3, [r5, #20]
 8008e56:	2300      	movs	r3, #0
 8008e58:	9309      	str	r3, [sp, #36]	; 0x24
 8008e5a:	2320      	movs	r3, #32
 8008e5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e60:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e64:	2330      	movs	r3, #48	; 0x30
 8008e66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800900c <_svfiprintf_r+0x1e8>
 8008e6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e6e:	f04f 0901 	mov.w	r9, #1
 8008e72:	4623      	mov	r3, r4
 8008e74:	469a      	mov	sl, r3
 8008e76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e7a:	b10a      	cbz	r2, 8008e80 <_svfiprintf_r+0x5c>
 8008e7c:	2a25      	cmp	r2, #37	; 0x25
 8008e7e:	d1f9      	bne.n	8008e74 <_svfiprintf_r+0x50>
 8008e80:	ebba 0b04 	subs.w	fp, sl, r4
 8008e84:	d00b      	beq.n	8008e9e <_svfiprintf_r+0x7a>
 8008e86:	465b      	mov	r3, fp
 8008e88:	4622      	mov	r2, r4
 8008e8a:	4629      	mov	r1, r5
 8008e8c:	4638      	mov	r0, r7
 8008e8e:	f7ff ff6f 	bl	8008d70 <__ssputs_r>
 8008e92:	3001      	adds	r0, #1
 8008e94:	f000 80a9 	beq.w	8008fea <_svfiprintf_r+0x1c6>
 8008e98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e9a:	445a      	add	r2, fp
 8008e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8008e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 80a1 	beq.w	8008fea <_svfiprintf_r+0x1c6>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8008eae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008eb2:	f10a 0a01 	add.w	sl, sl, #1
 8008eb6:	9304      	str	r3, [sp, #16]
 8008eb8:	9307      	str	r3, [sp, #28]
 8008eba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ebe:	931a      	str	r3, [sp, #104]	; 0x68
 8008ec0:	4654      	mov	r4, sl
 8008ec2:	2205      	movs	r2, #5
 8008ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ec8:	4850      	ldr	r0, [pc, #320]	; (800900c <_svfiprintf_r+0x1e8>)
 8008eca:	f7f7 f971 	bl	80001b0 <memchr>
 8008ece:	9a04      	ldr	r2, [sp, #16]
 8008ed0:	b9d8      	cbnz	r0, 8008f0a <_svfiprintf_r+0xe6>
 8008ed2:	06d0      	lsls	r0, r2, #27
 8008ed4:	bf44      	itt	mi
 8008ed6:	2320      	movmi	r3, #32
 8008ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008edc:	0711      	lsls	r1, r2, #28
 8008ede:	bf44      	itt	mi
 8008ee0:	232b      	movmi	r3, #43	; 0x2b
 8008ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8008eea:	2b2a      	cmp	r3, #42	; 0x2a
 8008eec:	d015      	beq.n	8008f1a <_svfiprintf_r+0xf6>
 8008eee:	9a07      	ldr	r2, [sp, #28]
 8008ef0:	4654      	mov	r4, sl
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	f04f 0c0a 	mov.w	ip, #10
 8008ef8:	4621      	mov	r1, r4
 8008efa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008efe:	3b30      	subs	r3, #48	; 0x30
 8008f00:	2b09      	cmp	r3, #9
 8008f02:	d94d      	bls.n	8008fa0 <_svfiprintf_r+0x17c>
 8008f04:	b1b0      	cbz	r0, 8008f34 <_svfiprintf_r+0x110>
 8008f06:	9207      	str	r2, [sp, #28]
 8008f08:	e014      	b.n	8008f34 <_svfiprintf_r+0x110>
 8008f0a:	eba0 0308 	sub.w	r3, r0, r8
 8008f0e:	fa09 f303 	lsl.w	r3, r9, r3
 8008f12:	4313      	orrs	r3, r2
 8008f14:	9304      	str	r3, [sp, #16]
 8008f16:	46a2      	mov	sl, r4
 8008f18:	e7d2      	b.n	8008ec0 <_svfiprintf_r+0x9c>
 8008f1a:	9b03      	ldr	r3, [sp, #12]
 8008f1c:	1d19      	adds	r1, r3, #4
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	9103      	str	r1, [sp, #12]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	bfbb      	ittet	lt
 8008f26:	425b      	neglt	r3, r3
 8008f28:	f042 0202 	orrlt.w	r2, r2, #2
 8008f2c:	9307      	strge	r3, [sp, #28]
 8008f2e:	9307      	strlt	r3, [sp, #28]
 8008f30:	bfb8      	it	lt
 8008f32:	9204      	strlt	r2, [sp, #16]
 8008f34:	7823      	ldrb	r3, [r4, #0]
 8008f36:	2b2e      	cmp	r3, #46	; 0x2e
 8008f38:	d10c      	bne.n	8008f54 <_svfiprintf_r+0x130>
 8008f3a:	7863      	ldrb	r3, [r4, #1]
 8008f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f3e:	d134      	bne.n	8008faa <_svfiprintf_r+0x186>
 8008f40:	9b03      	ldr	r3, [sp, #12]
 8008f42:	1d1a      	adds	r2, r3, #4
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	9203      	str	r2, [sp, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	bfb8      	it	lt
 8008f4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f50:	3402      	adds	r4, #2
 8008f52:	9305      	str	r3, [sp, #20]
 8008f54:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800901c <_svfiprintf_r+0x1f8>
 8008f58:	7821      	ldrb	r1, [r4, #0]
 8008f5a:	2203      	movs	r2, #3
 8008f5c:	4650      	mov	r0, sl
 8008f5e:	f7f7 f927 	bl	80001b0 <memchr>
 8008f62:	b138      	cbz	r0, 8008f74 <_svfiprintf_r+0x150>
 8008f64:	9b04      	ldr	r3, [sp, #16]
 8008f66:	eba0 000a 	sub.w	r0, r0, sl
 8008f6a:	2240      	movs	r2, #64	; 0x40
 8008f6c:	4082      	lsls	r2, r0
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	3401      	adds	r4, #1
 8008f72:	9304      	str	r3, [sp, #16]
 8008f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f78:	4825      	ldr	r0, [pc, #148]	; (8009010 <_svfiprintf_r+0x1ec>)
 8008f7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f7e:	2206      	movs	r2, #6
 8008f80:	f7f7 f916 	bl	80001b0 <memchr>
 8008f84:	2800      	cmp	r0, #0
 8008f86:	d038      	beq.n	8008ffa <_svfiprintf_r+0x1d6>
 8008f88:	4b22      	ldr	r3, [pc, #136]	; (8009014 <_svfiprintf_r+0x1f0>)
 8008f8a:	bb1b      	cbnz	r3, 8008fd4 <_svfiprintf_r+0x1b0>
 8008f8c:	9b03      	ldr	r3, [sp, #12]
 8008f8e:	3307      	adds	r3, #7
 8008f90:	f023 0307 	bic.w	r3, r3, #7
 8008f94:	3308      	adds	r3, #8
 8008f96:	9303      	str	r3, [sp, #12]
 8008f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f9a:	4433      	add	r3, r6
 8008f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f9e:	e768      	b.n	8008e72 <_svfiprintf_r+0x4e>
 8008fa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	2001      	movs	r0, #1
 8008fa8:	e7a6      	b.n	8008ef8 <_svfiprintf_r+0xd4>
 8008faa:	2300      	movs	r3, #0
 8008fac:	3401      	adds	r4, #1
 8008fae:	9305      	str	r3, [sp, #20]
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	f04f 0c0a 	mov.w	ip, #10
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fbc:	3a30      	subs	r2, #48	; 0x30
 8008fbe:	2a09      	cmp	r2, #9
 8008fc0:	d903      	bls.n	8008fca <_svfiprintf_r+0x1a6>
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d0c6      	beq.n	8008f54 <_svfiprintf_r+0x130>
 8008fc6:	9105      	str	r1, [sp, #20]
 8008fc8:	e7c4      	b.n	8008f54 <_svfiprintf_r+0x130>
 8008fca:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fce:	4604      	mov	r4, r0
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e7f0      	b.n	8008fb6 <_svfiprintf_r+0x192>
 8008fd4:	ab03      	add	r3, sp, #12
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	462a      	mov	r2, r5
 8008fda:	4b0f      	ldr	r3, [pc, #60]	; (8009018 <_svfiprintf_r+0x1f4>)
 8008fdc:	a904      	add	r1, sp, #16
 8008fde:	4638      	mov	r0, r7
 8008fe0:	f3af 8000 	nop.w
 8008fe4:	1c42      	adds	r2, r0, #1
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	d1d6      	bne.n	8008f98 <_svfiprintf_r+0x174>
 8008fea:	89ab      	ldrh	r3, [r5, #12]
 8008fec:	065b      	lsls	r3, r3, #25
 8008fee:	f53f af2d 	bmi.w	8008e4c <_svfiprintf_r+0x28>
 8008ff2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ff4:	b01d      	add	sp, #116	; 0x74
 8008ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffa:	ab03      	add	r3, sp, #12
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	462a      	mov	r2, r5
 8009000:	4b05      	ldr	r3, [pc, #20]	; (8009018 <_svfiprintf_r+0x1f4>)
 8009002:	a904      	add	r1, sp, #16
 8009004:	4638      	mov	r0, r7
 8009006:	f000 f9bd 	bl	8009384 <_printf_i>
 800900a:	e7eb      	b.n	8008fe4 <_svfiprintf_r+0x1c0>
 800900c:	08009de8 	.word	0x08009de8
 8009010:	08009df2 	.word	0x08009df2
 8009014:	00000000 	.word	0x00000000
 8009018:	08008d71 	.word	0x08008d71
 800901c:	08009dee 	.word	0x08009dee

08009020 <__sfputc_r>:
 8009020:	6893      	ldr	r3, [r2, #8]
 8009022:	3b01      	subs	r3, #1
 8009024:	2b00      	cmp	r3, #0
 8009026:	b410      	push	{r4}
 8009028:	6093      	str	r3, [r2, #8]
 800902a:	da08      	bge.n	800903e <__sfputc_r+0x1e>
 800902c:	6994      	ldr	r4, [r2, #24]
 800902e:	42a3      	cmp	r3, r4
 8009030:	db01      	blt.n	8009036 <__sfputc_r+0x16>
 8009032:	290a      	cmp	r1, #10
 8009034:	d103      	bne.n	800903e <__sfputc_r+0x1e>
 8009036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800903a:	f000 bb73 	b.w	8009724 <__swbuf_r>
 800903e:	6813      	ldr	r3, [r2, #0]
 8009040:	1c58      	adds	r0, r3, #1
 8009042:	6010      	str	r0, [r2, #0]
 8009044:	7019      	strb	r1, [r3, #0]
 8009046:	4608      	mov	r0, r1
 8009048:	f85d 4b04 	ldr.w	r4, [sp], #4
 800904c:	4770      	bx	lr

0800904e <__sfputs_r>:
 800904e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009050:	4606      	mov	r6, r0
 8009052:	460f      	mov	r7, r1
 8009054:	4614      	mov	r4, r2
 8009056:	18d5      	adds	r5, r2, r3
 8009058:	42ac      	cmp	r4, r5
 800905a:	d101      	bne.n	8009060 <__sfputs_r+0x12>
 800905c:	2000      	movs	r0, #0
 800905e:	e007      	b.n	8009070 <__sfputs_r+0x22>
 8009060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009064:	463a      	mov	r2, r7
 8009066:	4630      	mov	r0, r6
 8009068:	f7ff ffda 	bl	8009020 <__sfputc_r>
 800906c:	1c43      	adds	r3, r0, #1
 800906e:	d1f3      	bne.n	8009058 <__sfputs_r+0xa>
 8009070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009074 <_vfiprintf_r>:
 8009074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	460d      	mov	r5, r1
 800907a:	b09d      	sub	sp, #116	; 0x74
 800907c:	4614      	mov	r4, r2
 800907e:	4698      	mov	r8, r3
 8009080:	4606      	mov	r6, r0
 8009082:	b118      	cbz	r0, 800908c <_vfiprintf_r+0x18>
 8009084:	6a03      	ldr	r3, [r0, #32]
 8009086:	b90b      	cbnz	r3, 800908c <_vfiprintf_r+0x18>
 8009088:	f7ff fc36 	bl	80088f8 <__sinit>
 800908c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800908e:	07d9      	lsls	r1, r3, #31
 8009090:	d405      	bmi.n	800909e <_vfiprintf_r+0x2a>
 8009092:	89ab      	ldrh	r3, [r5, #12]
 8009094:	059a      	lsls	r2, r3, #22
 8009096:	d402      	bmi.n	800909e <_vfiprintf_r+0x2a>
 8009098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800909a:	f7ff fd60 	bl	8008b5e <__retarget_lock_acquire_recursive>
 800909e:	89ab      	ldrh	r3, [r5, #12]
 80090a0:	071b      	lsls	r3, r3, #28
 80090a2:	d501      	bpl.n	80090a8 <_vfiprintf_r+0x34>
 80090a4:	692b      	ldr	r3, [r5, #16]
 80090a6:	b99b      	cbnz	r3, 80090d0 <_vfiprintf_r+0x5c>
 80090a8:	4629      	mov	r1, r5
 80090aa:	4630      	mov	r0, r6
 80090ac:	f000 fb78 	bl	80097a0 <__swsetup_r>
 80090b0:	b170      	cbz	r0, 80090d0 <_vfiprintf_r+0x5c>
 80090b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090b4:	07dc      	lsls	r4, r3, #31
 80090b6:	d504      	bpl.n	80090c2 <_vfiprintf_r+0x4e>
 80090b8:	f04f 30ff 	mov.w	r0, #4294967295
 80090bc:	b01d      	add	sp, #116	; 0x74
 80090be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090c2:	89ab      	ldrh	r3, [r5, #12]
 80090c4:	0598      	lsls	r0, r3, #22
 80090c6:	d4f7      	bmi.n	80090b8 <_vfiprintf_r+0x44>
 80090c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090ca:	f7ff fd49 	bl	8008b60 <__retarget_lock_release_recursive>
 80090ce:	e7f3      	b.n	80090b8 <_vfiprintf_r+0x44>
 80090d0:	2300      	movs	r3, #0
 80090d2:	9309      	str	r3, [sp, #36]	; 0x24
 80090d4:	2320      	movs	r3, #32
 80090d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090da:	f8cd 800c 	str.w	r8, [sp, #12]
 80090de:	2330      	movs	r3, #48	; 0x30
 80090e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009294 <_vfiprintf_r+0x220>
 80090e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090e8:	f04f 0901 	mov.w	r9, #1
 80090ec:	4623      	mov	r3, r4
 80090ee:	469a      	mov	sl, r3
 80090f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090f4:	b10a      	cbz	r2, 80090fa <_vfiprintf_r+0x86>
 80090f6:	2a25      	cmp	r2, #37	; 0x25
 80090f8:	d1f9      	bne.n	80090ee <_vfiprintf_r+0x7a>
 80090fa:	ebba 0b04 	subs.w	fp, sl, r4
 80090fe:	d00b      	beq.n	8009118 <_vfiprintf_r+0xa4>
 8009100:	465b      	mov	r3, fp
 8009102:	4622      	mov	r2, r4
 8009104:	4629      	mov	r1, r5
 8009106:	4630      	mov	r0, r6
 8009108:	f7ff ffa1 	bl	800904e <__sfputs_r>
 800910c:	3001      	adds	r0, #1
 800910e:	f000 80a9 	beq.w	8009264 <_vfiprintf_r+0x1f0>
 8009112:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009114:	445a      	add	r2, fp
 8009116:	9209      	str	r2, [sp, #36]	; 0x24
 8009118:	f89a 3000 	ldrb.w	r3, [sl]
 800911c:	2b00      	cmp	r3, #0
 800911e:	f000 80a1 	beq.w	8009264 <_vfiprintf_r+0x1f0>
 8009122:	2300      	movs	r3, #0
 8009124:	f04f 32ff 	mov.w	r2, #4294967295
 8009128:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800912c:	f10a 0a01 	add.w	sl, sl, #1
 8009130:	9304      	str	r3, [sp, #16]
 8009132:	9307      	str	r3, [sp, #28]
 8009134:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009138:	931a      	str	r3, [sp, #104]	; 0x68
 800913a:	4654      	mov	r4, sl
 800913c:	2205      	movs	r2, #5
 800913e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009142:	4854      	ldr	r0, [pc, #336]	; (8009294 <_vfiprintf_r+0x220>)
 8009144:	f7f7 f834 	bl	80001b0 <memchr>
 8009148:	9a04      	ldr	r2, [sp, #16]
 800914a:	b9d8      	cbnz	r0, 8009184 <_vfiprintf_r+0x110>
 800914c:	06d1      	lsls	r1, r2, #27
 800914e:	bf44      	itt	mi
 8009150:	2320      	movmi	r3, #32
 8009152:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009156:	0713      	lsls	r3, r2, #28
 8009158:	bf44      	itt	mi
 800915a:	232b      	movmi	r3, #43	; 0x2b
 800915c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009160:	f89a 3000 	ldrb.w	r3, [sl]
 8009164:	2b2a      	cmp	r3, #42	; 0x2a
 8009166:	d015      	beq.n	8009194 <_vfiprintf_r+0x120>
 8009168:	9a07      	ldr	r2, [sp, #28]
 800916a:	4654      	mov	r4, sl
 800916c:	2000      	movs	r0, #0
 800916e:	f04f 0c0a 	mov.w	ip, #10
 8009172:	4621      	mov	r1, r4
 8009174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009178:	3b30      	subs	r3, #48	; 0x30
 800917a:	2b09      	cmp	r3, #9
 800917c:	d94d      	bls.n	800921a <_vfiprintf_r+0x1a6>
 800917e:	b1b0      	cbz	r0, 80091ae <_vfiprintf_r+0x13a>
 8009180:	9207      	str	r2, [sp, #28]
 8009182:	e014      	b.n	80091ae <_vfiprintf_r+0x13a>
 8009184:	eba0 0308 	sub.w	r3, r0, r8
 8009188:	fa09 f303 	lsl.w	r3, r9, r3
 800918c:	4313      	orrs	r3, r2
 800918e:	9304      	str	r3, [sp, #16]
 8009190:	46a2      	mov	sl, r4
 8009192:	e7d2      	b.n	800913a <_vfiprintf_r+0xc6>
 8009194:	9b03      	ldr	r3, [sp, #12]
 8009196:	1d19      	adds	r1, r3, #4
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	9103      	str	r1, [sp, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	bfbb      	ittet	lt
 80091a0:	425b      	neglt	r3, r3
 80091a2:	f042 0202 	orrlt.w	r2, r2, #2
 80091a6:	9307      	strge	r3, [sp, #28]
 80091a8:	9307      	strlt	r3, [sp, #28]
 80091aa:	bfb8      	it	lt
 80091ac:	9204      	strlt	r2, [sp, #16]
 80091ae:	7823      	ldrb	r3, [r4, #0]
 80091b0:	2b2e      	cmp	r3, #46	; 0x2e
 80091b2:	d10c      	bne.n	80091ce <_vfiprintf_r+0x15a>
 80091b4:	7863      	ldrb	r3, [r4, #1]
 80091b6:	2b2a      	cmp	r3, #42	; 0x2a
 80091b8:	d134      	bne.n	8009224 <_vfiprintf_r+0x1b0>
 80091ba:	9b03      	ldr	r3, [sp, #12]
 80091bc:	1d1a      	adds	r2, r3, #4
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	9203      	str	r2, [sp, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	bfb8      	it	lt
 80091c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80091ca:	3402      	adds	r4, #2
 80091cc:	9305      	str	r3, [sp, #20]
 80091ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80092a4 <_vfiprintf_r+0x230>
 80091d2:	7821      	ldrb	r1, [r4, #0]
 80091d4:	2203      	movs	r2, #3
 80091d6:	4650      	mov	r0, sl
 80091d8:	f7f6 ffea 	bl	80001b0 <memchr>
 80091dc:	b138      	cbz	r0, 80091ee <_vfiprintf_r+0x17a>
 80091de:	9b04      	ldr	r3, [sp, #16]
 80091e0:	eba0 000a 	sub.w	r0, r0, sl
 80091e4:	2240      	movs	r2, #64	; 0x40
 80091e6:	4082      	lsls	r2, r0
 80091e8:	4313      	orrs	r3, r2
 80091ea:	3401      	adds	r4, #1
 80091ec:	9304      	str	r3, [sp, #16]
 80091ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091f2:	4829      	ldr	r0, [pc, #164]	; (8009298 <_vfiprintf_r+0x224>)
 80091f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091f8:	2206      	movs	r2, #6
 80091fa:	f7f6 ffd9 	bl	80001b0 <memchr>
 80091fe:	2800      	cmp	r0, #0
 8009200:	d03f      	beq.n	8009282 <_vfiprintf_r+0x20e>
 8009202:	4b26      	ldr	r3, [pc, #152]	; (800929c <_vfiprintf_r+0x228>)
 8009204:	bb1b      	cbnz	r3, 800924e <_vfiprintf_r+0x1da>
 8009206:	9b03      	ldr	r3, [sp, #12]
 8009208:	3307      	adds	r3, #7
 800920a:	f023 0307 	bic.w	r3, r3, #7
 800920e:	3308      	adds	r3, #8
 8009210:	9303      	str	r3, [sp, #12]
 8009212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009214:	443b      	add	r3, r7
 8009216:	9309      	str	r3, [sp, #36]	; 0x24
 8009218:	e768      	b.n	80090ec <_vfiprintf_r+0x78>
 800921a:	fb0c 3202 	mla	r2, ip, r2, r3
 800921e:	460c      	mov	r4, r1
 8009220:	2001      	movs	r0, #1
 8009222:	e7a6      	b.n	8009172 <_vfiprintf_r+0xfe>
 8009224:	2300      	movs	r3, #0
 8009226:	3401      	adds	r4, #1
 8009228:	9305      	str	r3, [sp, #20]
 800922a:	4619      	mov	r1, r3
 800922c:	f04f 0c0a 	mov.w	ip, #10
 8009230:	4620      	mov	r0, r4
 8009232:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009236:	3a30      	subs	r2, #48	; 0x30
 8009238:	2a09      	cmp	r2, #9
 800923a:	d903      	bls.n	8009244 <_vfiprintf_r+0x1d0>
 800923c:	2b00      	cmp	r3, #0
 800923e:	d0c6      	beq.n	80091ce <_vfiprintf_r+0x15a>
 8009240:	9105      	str	r1, [sp, #20]
 8009242:	e7c4      	b.n	80091ce <_vfiprintf_r+0x15a>
 8009244:	fb0c 2101 	mla	r1, ip, r1, r2
 8009248:	4604      	mov	r4, r0
 800924a:	2301      	movs	r3, #1
 800924c:	e7f0      	b.n	8009230 <_vfiprintf_r+0x1bc>
 800924e:	ab03      	add	r3, sp, #12
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	462a      	mov	r2, r5
 8009254:	4b12      	ldr	r3, [pc, #72]	; (80092a0 <_vfiprintf_r+0x22c>)
 8009256:	a904      	add	r1, sp, #16
 8009258:	4630      	mov	r0, r6
 800925a:	f3af 8000 	nop.w
 800925e:	4607      	mov	r7, r0
 8009260:	1c78      	adds	r0, r7, #1
 8009262:	d1d6      	bne.n	8009212 <_vfiprintf_r+0x19e>
 8009264:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009266:	07d9      	lsls	r1, r3, #31
 8009268:	d405      	bmi.n	8009276 <_vfiprintf_r+0x202>
 800926a:	89ab      	ldrh	r3, [r5, #12]
 800926c:	059a      	lsls	r2, r3, #22
 800926e:	d402      	bmi.n	8009276 <_vfiprintf_r+0x202>
 8009270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009272:	f7ff fc75 	bl	8008b60 <__retarget_lock_release_recursive>
 8009276:	89ab      	ldrh	r3, [r5, #12]
 8009278:	065b      	lsls	r3, r3, #25
 800927a:	f53f af1d 	bmi.w	80090b8 <_vfiprintf_r+0x44>
 800927e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009280:	e71c      	b.n	80090bc <_vfiprintf_r+0x48>
 8009282:	ab03      	add	r3, sp, #12
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	462a      	mov	r2, r5
 8009288:	4b05      	ldr	r3, [pc, #20]	; (80092a0 <_vfiprintf_r+0x22c>)
 800928a:	a904      	add	r1, sp, #16
 800928c:	4630      	mov	r0, r6
 800928e:	f000 f879 	bl	8009384 <_printf_i>
 8009292:	e7e4      	b.n	800925e <_vfiprintf_r+0x1ea>
 8009294:	08009de8 	.word	0x08009de8
 8009298:	08009df2 	.word	0x08009df2
 800929c:	00000000 	.word	0x00000000
 80092a0:	0800904f 	.word	0x0800904f
 80092a4:	08009dee 	.word	0x08009dee

080092a8 <_printf_common>:
 80092a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092ac:	4616      	mov	r6, r2
 80092ae:	4699      	mov	r9, r3
 80092b0:	688a      	ldr	r2, [r1, #8]
 80092b2:	690b      	ldr	r3, [r1, #16]
 80092b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092b8:	4293      	cmp	r3, r2
 80092ba:	bfb8      	it	lt
 80092bc:	4613      	movlt	r3, r2
 80092be:	6033      	str	r3, [r6, #0]
 80092c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092c4:	4607      	mov	r7, r0
 80092c6:	460c      	mov	r4, r1
 80092c8:	b10a      	cbz	r2, 80092ce <_printf_common+0x26>
 80092ca:	3301      	adds	r3, #1
 80092cc:	6033      	str	r3, [r6, #0]
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	0699      	lsls	r1, r3, #26
 80092d2:	bf42      	ittt	mi
 80092d4:	6833      	ldrmi	r3, [r6, #0]
 80092d6:	3302      	addmi	r3, #2
 80092d8:	6033      	strmi	r3, [r6, #0]
 80092da:	6825      	ldr	r5, [r4, #0]
 80092dc:	f015 0506 	ands.w	r5, r5, #6
 80092e0:	d106      	bne.n	80092f0 <_printf_common+0x48>
 80092e2:	f104 0a19 	add.w	sl, r4, #25
 80092e6:	68e3      	ldr	r3, [r4, #12]
 80092e8:	6832      	ldr	r2, [r6, #0]
 80092ea:	1a9b      	subs	r3, r3, r2
 80092ec:	42ab      	cmp	r3, r5
 80092ee:	dc26      	bgt.n	800933e <_printf_common+0x96>
 80092f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092f4:	1e13      	subs	r3, r2, #0
 80092f6:	6822      	ldr	r2, [r4, #0]
 80092f8:	bf18      	it	ne
 80092fa:	2301      	movne	r3, #1
 80092fc:	0692      	lsls	r2, r2, #26
 80092fe:	d42b      	bmi.n	8009358 <_printf_common+0xb0>
 8009300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009304:	4649      	mov	r1, r9
 8009306:	4638      	mov	r0, r7
 8009308:	47c0      	blx	r8
 800930a:	3001      	adds	r0, #1
 800930c:	d01e      	beq.n	800934c <_printf_common+0xa4>
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	6922      	ldr	r2, [r4, #16]
 8009312:	f003 0306 	and.w	r3, r3, #6
 8009316:	2b04      	cmp	r3, #4
 8009318:	bf02      	ittt	eq
 800931a:	68e5      	ldreq	r5, [r4, #12]
 800931c:	6833      	ldreq	r3, [r6, #0]
 800931e:	1aed      	subeq	r5, r5, r3
 8009320:	68a3      	ldr	r3, [r4, #8]
 8009322:	bf0c      	ite	eq
 8009324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009328:	2500      	movne	r5, #0
 800932a:	4293      	cmp	r3, r2
 800932c:	bfc4      	itt	gt
 800932e:	1a9b      	subgt	r3, r3, r2
 8009330:	18ed      	addgt	r5, r5, r3
 8009332:	2600      	movs	r6, #0
 8009334:	341a      	adds	r4, #26
 8009336:	42b5      	cmp	r5, r6
 8009338:	d11a      	bne.n	8009370 <_printf_common+0xc8>
 800933a:	2000      	movs	r0, #0
 800933c:	e008      	b.n	8009350 <_printf_common+0xa8>
 800933e:	2301      	movs	r3, #1
 8009340:	4652      	mov	r2, sl
 8009342:	4649      	mov	r1, r9
 8009344:	4638      	mov	r0, r7
 8009346:	47c0      	blx	r8
 8009348:	3001      	adds	r0, #1
 800934a:	d103      	bne.n	8009354 <_printf_common+0xac>
 800934c:	f04f 30ff 	mov.w	r0, #4294967295
 8009350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009354:	3501      	adds	r5, #1
 8009356:	e7c6      	b.n	80092e6 <_printf_common+0x3e>
 8009358:	18e1      	adds	r1, r4, r3
 800935a:	1c5a      	adds	r2, r3, #1
 800935c:	2030      	movs	r0, #48	; 0x30
 800935e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009362:	4422      	add	r2, r4
 8009364:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800936c:	3302      	adds	r3, #2
 800936e:	e7c7      	b.n	8009300 <_printf_common+0x58>
 8009370:	2301      	movs	r3, #1
 8009372:	4622      	mov	r2, r4
 8009374:	4649      	mov	r1, r9
 8009376:	4638      	mov	r0, r7
 8009378:	47c0      	blx	r8
 800937a:	3001      	adds	r0, #1
 800937c:	d0e6      	beq.n	800934c <_printf_common+0xa4>
 800937e:	3601      	adds	r6, #1
 8009380:	e7d9      	b.n	8009336 <_printf_common+0x8e>
	...

08009384 <_printf_i>:
 8009384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009388:	7e0f      	ldrb	r7, [r1, #24]
 800938a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800938c:	2f78      	cmp	r7, #120	; 0x78
 800938e:	4691      	mov	r9, r2
 8009390:	4680      	mov	r8, r0
 8009392:	460c      	mov	r4, r1
 8009394:	469a      	mov	sl, r3
 8009396:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800939a:	d807      	bhi.n	80093ac <_printf_i+0x28>
 800939c:	2f62      	cmp	r7, #98	; 0x62
 800939e:	d80a      	bhi.n	80093b6 <_printf_i+0x32>
 80093a0:	2f00      	cmp	r7, #0
 80093a2:	f000 80d4 	beq.w	800954e <_printf_i+0x1ca>
 80093a6:	2f58      	cmp	r7, #88	; 0x58
 80093a8:	f000 80c0 	beq.w	800952c <_printf_i+0x1a8>
 80093ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093b4:	e03a      	b.n	800942c <_printf_i+0xa8>
 80093b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093ba:	2b15      	cmp	r3, #21
 80093bc:	d8f6      	bhi.n	80093ac <_printf_i+0x28>
 80093be:	a101      	add	r1, pc, #4	; (adr r1, 80093c4 <_printf_i+0x40>)
 80093c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093c4:	0800941d 	.word	0x0800941d
 80093c8:	08009431 	.word	0x08009431
 80093cc:	080093ad 	.word	0x080093ad
 80093d0:	080093ad 	.word	0x080093ad
 80093d4:	080093ad 	.word	0x080093ad
 80093d8:	080093ad 	.word	0x080093ad
 80093dc:	08009431 	.word	0x08009431
 80093e0:	080093ad 	.word	0x080093ad
 80093e4:	080093ad 	.word	0x080093ad
 80093e8:	080093ad 	.word	0x080093ad
 80093ec:	080093ad 	.word	0x080093ad
 80093f0:	08009535 	.word	0x08009535
 80093f4:	0800945d 	.word	0x0800945d
 80093f8:	080094ef 	.word	0x080094ef
 80093fc:	080093ad 	.word	0x080093ad
 8009400:	080093ad 	.word	0x080093ad
 8009404:	08009557 	.word	0x08009557
 8009408:	080093ad 	.word	0x080093ad
 800940c:	0800945d 	.word	0x0800945d
 8009410:	080093ad 	.word	0x080093ad
 8009414:	080093ad 	.word	0x080093ad
 8009418:	080094f7 	.word	0x080094f7
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	1d1a      	adds	r2, r3, #4
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	602a      	str	r2, [r5, #0]
 8009424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800942c:	2301      	movs	r3, #1
 800942e:	e09f      	b.n	8009570 <_printf_i+0x1ec>
 8009430:	6820      	ldr	r0, [r4, #0]
 8009432:	682b      	ldr	r3, [r5, #0]
 8009434:	0607      	lsls	r7, r0, #24
 8009436:	f103 0104 	add.w	r1, r3, #4
 800943a:	6029      	str	r1, [r5, #0]
 800943c:	d501      	bpl.n	8009442 <_printf_i+0xbe>
 800943e:	681e      	ldr	r6, [r3, #0]
 8009440:	e003      	b.n	800944a <_printf_i+0xc6>
 8009442:	0646      	lsls	r6, r0, #25
 8009444:	d5fb      	bpl.n	800943e <_printf_i+0xba>
 8009446:	f9b3 6000 	ldrsh.w	r6, [r3]
 800944a:	2e00      	cmp	r6, #0
 800944c:	da03      	bge.n	8009456 <_printf_i+0xd2>
 800944e:	232d      	movs	r3, #45	; 0x2d
 8009450:	4276      	negs	r6, r6
 8009452:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009456:	485a      	ldr	r0, [pc, #360]	; (80095c0 <_printf_i+0x23c>)
 8009458:	230a      	movs	r3, #10
 800945a:	e012      	b.n	8009482 <_printf_i+0xfe>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	6820      	ldr	r0, [r4, #0]
 8009460:	1d19      	adds	r1, r3, #4
 8009462:	6029      	str	r1, [r5, #0]
 8009464:	0605      	lsls	r5, r0, #24
 8009466:	d501      	bpl.n	800946c <_printf_i+0xe8>
 8009468:	681e      	ldr	r6, [r3, #0]
 800946a:	e002      	b.n	8009472 <_printf_i+0xee>
 800946c:	0641      	lsls	r1, r0, #25
 800946e:	d5fb      	bpl.n	8009468 <_printf_i+0xe4>
 8009470:	881e      	ldrh	r6, [r3, #0]
 8009472:	4853      	ldr	r0, [pc, #332]	; (80095c0 <_printf_i+0x23c>)
 8009474:	2f6f      	cmp	r7, #111	; 0x6f
 8009476:	bf0c      	ite	eq
 8009478:	2308      	moveq	r3, #8
 800947a:	230a      	movne	r3, #10
 800947c:	2100      	movs	r1, #0
 800947e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009482:	6865      	ldr	r5, [r4, #4]
 8009484:	60a5      	str	r5, [r4, #8]
 8009486:	2d00      	cmp	r5, #0
 8009488:	bfa2      	ittt	ge
 800948a:	6821      	ldrge	r1, [r4, #0]
 800948c:	f021 0104 	bicge.w	r1, r1, #4
 8009490:	6021      	strge	r1, [r4, #0]
 8009492:	b90e      	cbnz	r6, 8009498 <_printf_i+0x114>
 8009494:	2d00      	cmp	r5, #0
 8009496:	d04b      	beq.n	8009530 <_printf_i+0x1ac>
 8009498:	4615      	mov	r5, r2
 800949a:	fbb6 f1f3 	udiv	r1, r6, r3
 800949e:	fb03 6711 	mls	r7, r3, r1, r6
 80094a2:	5dc7      	ldrb	r7, [r0, r7]
 80094a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094a8:	4637      	mov	r7, r6
 80094aa:	42bb      	cmp	r3, r7
 80094ac:	460e      	mov	r6, r1
 80094ae:	d9f4      	bls.n	800949a <_printf_i+0x116>
 80094b0:	2b08      	cmp	r3, #8
 80094b2:	d10b      	bne.n	80094cc <_printf_i+0x148>
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	07de      	lsls	r6, r3, #31
 80094b8:	d508      	bpl.n	80094cc <_printf_i+0x148>
 80094ba:	6923      	ldr	r3, [r4, #16]
 80094bc:	6861      	ldr	r1, [r4, #4]
 80094be:	4299      	cmp	r1, r3
 80094c0:	bfde      	ittt	le
 80094c2:	2330      	movle	r3, #48	; 0x30
 80094c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80094cc:	1b52      	subs	r2, r2, r5
 80094ce:	6122      	str	r2, [r4, #16]
 80094d0:	f8cd a000 	str.w	sl, [sp]
 80094d4:	464b      	mov	r3, r9
 80094d6:	aa03      	add	r2, sp, #12
 80094d8:	4621      	mov	r1, r4
 80094da:	4640      	mov	r0, r8
 80094dc:	f7ff fee4 	bl	80092a8 <_printf_common>
 80094e0:	3001      	adds	r0, #1
 80094e2:	d14a      	bne.n	800957a <_printf_i+0x1f6>
 80094e4:	f04f 30ff 	mov.w	r0, #4294967295
 80094e8:	b004      	add	sp, #16
 80094ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ee:	6823      	ldr	r3, [r4, #0]
 80094f0:	f043 0320 	orr.w	r3, r3, #32
 80094f4:	6023      	str	r3, [r4, #0]
 80094f6:	4833      	ldr	r0, [pc, #204]	; (80095c4 <_printf_i+0x240>)
 80094f8:	2778      	movs	r7, #120	; 0x78
 80094fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	6829      	ldr	r1, [r5, #0]
 8009502:	061f      	lsls	r7, r3, #24
 8009504:	f851 6b04 	ldr.w	r6, [r1], #4
 8009508:	d402      	bmi.n	8009510 <_printf_i+0x18c>
 800950a:	065f      	lsls	r7, r3, #25
 800950c:	bf48      	it	mi
 800950e:	b2b6      	uxthmi	r6, r6
 8009510:	07df      	lsls	r7, r3, #31
 8009512:	bf48      	it	mi
 8009514:	f043 0320 	orrmi.w	r3, r3, #32
 8009518:	6029      	str	r1, [r5, #0]
 800951a:	bf48      	it	mi
 800951c:	6023      	strmi	r3, [r4, #0]
 800951e:	b91e      	cbnz	r6, 8009528 <_printf_i+0x1a4>
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	f023 0320 	bic.w	r3, r3, #32
 8009526:	6023      	str	r3, [r4, #0]
 8009528:	2310      	movs	r3, #16
 800952a:	e7a7      	b.n	800947c <_printf_i+0xf8>
 800952c:	4824      	ldr	r0, [pc, #144]	; (80095c0 <_printf_i+0x23c>)
 800952e:	e7e4      	b.n	80094fa <_printf_i+0x176>
 8009530:	4615      	mov	r5, r2
 8009532:	e7bd      	b.n	80094b0 <_printf_i+0x12c>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	6826      	ldr	r6, [r4, #0]
 8009538:	6961      	ldr	r1, [r4, #20]
 800953a:	1d18      	adds	r0, r3, #4
 800953c:	6028      	str	r0, [r5, #0]
 800953e:	0635      	lsls	r5, r6, #24
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	d501      	bpl.n	8009548 <_printf_i+0x1c4>
 8009544:	6019      	str	r1, [r3, #0]
 8009546:	e002      	b.n	800954e <_printf_i+0x1ca>
 8009548:	0670      	lsls	r0, r6, #25
 800954a:	d5fb      	bpl.n	8009544 <_printf_i+0x1c0>
 800954c:	8019      	strh	r1, [r3, #0]
 800954e:	2300      	movs	r3, #0
 8009550:	6123      	str	r3, [r4, #16]
 8009552:	4615      	mov	r5, r2
 8009554:	e7bc      	b.n	80094d0 <_printf_i+0x14c>
 8009556:	682b      	ldr	r3, [r5, #0]
 8009558:	1d1a      	adds	r2, r3, #4
 800955a:	602a      	str	r2, [r5, #0]
 800955c:	681d      	ldr	r5, [r3, #0]
 800955e:	6862      	ldr	r2, [r4, #4]
 8009560:	2100      	movs	r1, #0
 8009562:	4628      	mov	r0, r5
 8009564:	f7f6 fe24 	bl	80001b0 <memchr>
 8009568:	b108      	cbz	r0, 800956e <_printf_i+0x1ea>
 800956a:	1b40      	subs	r0, r0, r5
 800956c:	6060      	str	r0, [r4, #4]
 800956e:	6863      	ldr	r3, [r4, #4]
 8009570:	6123      	str	r3, [r4, #16]
 8009572:	2300      	movs	r3, #0
 8009574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009578:	e7aa      	b.n	80094d0 <_printf_i+0x14c>
 800957a:	6923      	ldr	r3, [r4, #16]
 800957c:	462a      	mov	r2, r5
 800957e:	4649      	mov	r1, r9
 8009580:	4640      	mov	r0, r8
 8009582:	47d0      	blx	sl
 8009584:	3001      	adds	r0, #1
 8009586:	d0ad      	beq.n	80094e4 <_printf_i+0x160>
 8009588:	6823      	ldr	r3, [r4, #0]
 800958a:	079b      	lsls	r3, r3, #30
 800958c:	d413      	bmi.n	80095b6 <_printf_i+0x232>
 800958e:	68e0      	ldr	r0, [r4, #12]
 8009590:	9b03      	ldr	r3, [sp, #12]
 8009592:	4298      	cmp	r0, r3
 8009594:	bfb8      	it	lt
 8009596:	4618      	movlt	r0, r3
 8009598:	e7a6      	b.n	80094e8 <_printf_i+0x164>
 800959a:	2301      	movs	r3, #1
 800959c:	4632      	mov	r2, r6
 800959e:	4649      	mov	r1, r9
 80095a0:	4640      	mov	r0, r8
 80095a2:	47d0      	blx	sl
 80095a4:	3001      	adds	r0, #1
 80095a6:	d09d      	beq.n	80094e4 <_printf_i+0x160>
 80095a8:	3501      	adds	r5, #1
 80095aa:	68e3      	ldr	r3, [r4, #12]
 80095ac:	9903      	ldr	r1, [sp, #12]
 80095ae:	1a5b      	subs	r3, r3, r1
 80095b0:	42ab      	cmp	r3, r5
 80095b2:	dcf2      	bgt.n	800959a <_printf_i+0x216>
 80095b4:	e7eb      	b.n	800958e <_printf_i+0x20a>
 80095b6:	2500      	movs	r5, #0
 80095b8:	f104 0619 	add.w	r6, r4, #25
 80095bc:	e7f5      	b.n	80095aa <_printf_i+0x226>
 80095be:	bf00      	nop
 80095c0:	08009df9 	.word	0x08009df9
 80095c4:	08009e0a 	.word	0x08009e0a

080095c8 <__sflush_r>:
 80095c8:	898a      	ldrh	r2, [r1, #12]
 80095ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ce:	4605      	mov	r5, r0
 80095d0:	0710      	lsls	r0, r2, #28
 80095d2:	460c      	mov	r4, r1
 80095d4:	d458      	bmi.n	8009688 <__sflush_r+0xc0>
 80095d6:	684b      	ldr	r3, [r1, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	dc05      	bgt.n	80095e8 <__sflush_r+0x20>
 80095dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095de:	2b00      	cmp	r3, #0
 80095e0:	dc02      	bgt.n	80095e8 <__sflush_r+0x20>
 80095e2:	2000      	movs	r0, #0
 80095e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095ea:	2e00      	cmp	r6, #0
 80095ec:	d0f9      	beq.n	80095e2 <__sflush_r+0x1a>
 80095ee:	2300      	movs	r3, #0
 80095f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095f4:	682f      	ldr	r7, [r5, #0]
 80095f6:	6a21      	ldr	r1, [r4, #32]
 80095f8:	602b      	str	r3, [r5, #0]
 80095fa:	d032      	beq.n	8009662 <__sflush_r+0x9a>
 80095fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095fe:	89a3      	ldrh	r3, [r4, #12]
 8009600:	075a      	lsls	r2, r3, #29
 8009602:	d505      	bpl.n	8009610 <__sflush_r+0x48>
 8009604:	6863      	ldr	r3, [r4, #4]
 8009606:	1ac0      	subs	r0, r0, r3
 8009608:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800960a:	b10b      	cbz	r3, 8009610 <__sflush_r+0x48>
 800960c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800960e:	1ac0      	subs	r0, r0, r3
 8009610:	2300      	movs	r3, #0
 8009612:	4602      	mov	r2, r0
 8009614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009616:	6a21      	ldr	r1, [r4, #32]
 8009618:	4628      	mov	r0, r5
 800961a:	47b0      	blx	r6
 800961c:	1c43      	adds	r3, r0, #1
 800961e:	89a3      	ldrh	r3, [r4, #12]
 8009620:	d106      	bne.n	8009630 <__sflush_r+0x68>
 8009622:	6829      	ldr	r1, [r5, #0]
 8009624:	291d      	cmp	r1, #29
 8009626:	d82b      	bhi.n	8009680 <__sflush_r+0xb8>
 8009628:	4a29      	ldr	r2, [pc, #164]	; (80096d0 <__sflush_r+0x108>)
 800962a:	410a      	asrs	r2, r1
 800962c:	07d6      	lsls	r6, r2, #31
 800962e:	d427      	bmi.n	8009680 <__sflush_r+0xb8>
 8009630:	2200      	movs	r2, #0
 8009632:	6062      	str	r2, [r4, #4]
 8009634:	04d9      	lsls	r1, r3, #19
 8009636:	6922      	ldr	r2, [r4, #16]
 8009638:	6022      	str	r2, [r4, #0]
 800963a:	d504      	bpl.n	8009646 <__sflush_r+0x7e>
 800963c:	1c42      	adds	r2, r0, #1
 800963e:	d101      	bne.n	8009644 <__sflush_r+0x7c>
 8009640:	682b      	ldr	r3, [r5, #0]
 8009642:	b903      	cbnz	r3, 8009646 <__sflush_r+0x7e>
 8009644:	6560      	str	r0, [r4, #84]	; 0x54
 8009646:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009648:	602f      	str	r7, [r5, #0]
 800964a:	2900      	cmp	r1, #0
 800964c:	d0c9      	beq.n	80095e2 <__sflush_r+0x1a>
 800964e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009652:	4299      	cmp	r1, r3
 8009654:	d002      	beq.n	800965c <__sflush_r+0x94>
 8009656:	4628      	mov	r0, r5
 8009658:	f7ff fa92 	bl	8008b80 <_free_r>
 800965c:	2000      	movs	r0, #0
 800965e:	6360      	str	r0, [r4, #52]	; 0x34
 8009660:	e7c0      	b.n	80095e4 <__sflush_r+0x1c>
 8009662:	2301      	movs	r3, #1
 8009664:	4628      	mov	r0, r5
 8009666:	47b0      	blx	r6
 8009668:	1c41      	adds	r1, r0, #1
 800966a:	d1c8      	bne.n	80095fe <__sflush_r+0x36>
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d0c5      	beq.n	80095fe <__sflush_r+0x36>
 8009672:	2b1d      	cmp	r3, #29
 8009674:	d001      	beq.n	800967a <__sflush_r+0xb2>
 8009676:	2b16      	cmp	r3, #22
 8009678:	d101      	bne.n	800967e <__sflush_r+0xb6>
 800967a:	602f      	str	r7, [r5, #0]
 800967c:	e7b1      	b.n	80095e2 <__sflush_r+0x1a>
 800967e:	89a3      	ldrh	r3, [r4, #12]
 8009680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009684:	81a3      	strh	r3, [r4, #12]
 8009686:	e7ad      	b.n	80095e4 <__sflush_r+0x1c>
 8009688:	690f      	ldr	r7, [r1, #16]
 800968a:	2f00      	cmp	r7, #0
 800968c:	d0a9      	beq.n	80095e2 <__sflush_r+0x1a>
 800968e:	0793      	lsls	r3, r2, #30
 8009690:	680e      	ldr	r6, [r1, #0]
 8009692:	bf08      	it	eq
 8009694:	694b      	ldreq	r3, [r1, #20]
 8009696:	600f      	str	r7, [r1, #0]
 8009698:	bf18      	it	ne
 800969a:	2300      	movne	r3, #0
 800969c:	eba6 0807 	sub.w	r8, r6, r7
 80096a0:	608b      	str	r3, [r1, #8]
 80096a2:	f1b8 0f00 	cmp.w	r8, #0
 80096a6:	dd9c      	ble.n	80095e2 <__sflush_r+0x1a>
 80096a8:	6a21      	ldr	r1, [r4, #32]
 80096aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096ac:	4643      	mov	r3, r8
 80096ae:	463a      	mov	r2, r7
 80096b0:	4628      	mov	r0, r5
 80096b2:	47b0      	blx	r6
 80096b4:	2800      	cmp	r0, #0
 80096b6:	dc06      	bgt.n	80096c6 <__sflush_r+0xfe>
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096be:	81a3      	strh	r3, [r4, #12]
 80096c0:	f04f 30ff 	mov.w	r0, #4294967295
 80096c4:	e78e      	b.n	80095e4 <__sflush_r+0x1c>
 80096c6:	4407      	add	r7, r0
 80096c8:	eba8 0800 	sub.w	r8, r8, r0
 80096cc:	e7e9      	b.n	80096a2 <__sflush_r+0xda>
 80096ce:	bf00      	nop
 80096d0:	dfbffffe 	.word	0xdfbffffe

080096d4 <_fflush_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	690b      	ldr	r3, [r1, #16]
 80096d8:	4605      	mov	r5, r0
 80096da:	460c      	mov	r4, r1
 80096dc:	b913      	cbnz	r3, 80096e4 <_fflush_r+0x10>
 80096de:	2500      	movs	r5, #0
 80096e0:	4628      	mov	r0, r5
 80096e2:	bd38      	pop	{r3, r4, r5, pc}
 80096e4:	b118      	cbz	r0, 80096ee <_fflush_r+0x1a>
 80096e6:	6a03      	ldr	r3, [r0, #32]
 80096e8:	b90b      	cbnz	r3, 80096ee <_fflush_r+0x1a>
 80096ea:	f7ff f905 	bl	80088f8 <__sinit>
 80096ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d0f3      	beq.n	80096de <_fflush_r+0xa>
 80096f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096f8:	07d0      	lsls	r0, r2, #31
 80096fa:	d404      	bmi.n	8009706 <_fflush_r+0x32>
 80096fc:	0599      	lsls	r1, r3, #22
 80096fe:	d402      	bmi.n	8009706 <_fflush_r+0x32>
 8009700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009702:	f7ff fa2c 	bl	8008b5e <__retarget_lock_acquire_recursive>
 8009706:	4628      	mov	r0, r5
 8009708:	4621      	mov	r1, r4
 800970a:	f7ff ff5d 	bl	80095c8 <__sflush_r>
 800970e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009710:	07da      	lsls	r2, r3, #31
 8009712:	4605      	mov	r5, r0
 8009714:	d4e4      	bmi.n	80096e0 <_fflush_r+0xc>
 8009716:	89a3      	ldrh	r3, [r4, #12]
 8009718:	059b      	lsls	r3, r3, #22
 800971a:	d4e1      	bmi.n	80096e0 <_fflush_r+0xc>
 800971c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800971e:	f7ff fa1f 	bl	8008b60 <__retarget_lock_release_recursive>
 8009722:	e7dd      	b.n	80096e0 <_fflush_r+0xc>

08009724 <__swbuf_r>:
 8009724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009726:	460e      	mov	r6, r1
 8009728:	4614      	mov	r4, r2
 800972a:	4605      	mov	r5, r0
 800972c:	b118      	cbz	r0, 8009736 <__swbuf_r+0x12>
 800972e:	6a03      	ldr	r3, [r0, #32]
 8009730:	b90b      	cbnz	r3, 8009736 <__swbuf_r+0x12>
 8009732:	f7ff f8e1 	bl	80088f8 <__sinit>
 8009736:	69a3      	ldr	r3, [r4, #24]
 8009738:	60a3      	str	r3, [r4, #8]
 800973a:	89a3      	ldrh	r3, [r4, #12]
 800973c:	071a      	lsls	r2, r3, #28
 800973e:	d525      	bpl.n	800978c <__swbuf_r+0x68>
 8009740:	6923      	ldr	r3, [r4, #16]
 8009742:	b31b      	cbz	r3, 800978c <__swbuf_r+0x68>
 8009744:	6823      	ldr	r3, [r4, #0]
 8009746:	6922      	ldr	r2, [r4, #16]
 8009748:	1a98      	subs	r0, r3, r2
 800974a:	6963      	ldr	r3, [r4, #20]
 800974c:	b2f6      	uxtb	r6, r6
 800974e:	4283      	cmp	r3, r0
 8009750:	4637      	mov	r7, r6
 8009752:	dc04      	bgt.n	800975e <__swbuf_r+0x3a>
 8009754:	4621      	mov	r1, r4
 8009756:	4628      	mov	r0, r5
 8009758:	f7ff ffbc 	bl	80096d4 <_fflush_r>
 800975c:	b9e0      	cbnz	r0, 8009798 <__swbuf_r+0x74>
 800975e:	68a3      	ldr	r3, [r4, #8]
 8009760:	3b01      	subs	r3, #1
 8009762:	60a3      	str	r3, [r4, #8]
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	1c5a      	adds	r2, r3, #1
 8009768:	6022      	str	r2, [r4, #0]
 800976a:	701e      	strb	r6, [r3, #0]
 800976c:	6962      	ldr	r2, [r4, #20]
 800976e:	1c43      	adds	r3, r0, #1
 8009770:	429a      	cmp	r2, r3
 8009772:	d004      	beq.n	800977e <__swbuf_r+0x5a>
 8009774:	89a3      	ldrh	r3, [r4, #12]
 8009776:	07db      	lsls	r3, r3, #31
 8009778:	d506      	bpl.n	8009788 <__swbuf_r+0x64>
 800977a:	2e0a      	cmp	r6, #10
 800977c:	d104      	bne.n	8009788 <__swbuf_r+0x64>
 800977e:	4621      	mov	r1, r4
 8009780:	4628      	mov	r0, r5
 8009782:	f7ff ffa7 	bl	80096d4 <_fflush_r>
 8009786:	b938      	cbnz	r0, 8009798 <__swbuf_r+0x74>
 8009788:	4638      	mov	r0, r7
 800978a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800978c:	4621      	mov	r1, r4
 800978e:	4628      	mov	r0, r5
 8009790:	f000 f806 	bl	80097a0 <__swsetup_r>
 8009794:	2800      	cmp	r0, #0
 8009796:	d0d5      	beq.n	8009744 <__swbuf_r+0x20>
 8009798:	f04f 37ff 	mov.w	r7, #4294967295
 800979c:	e7f4      	b.n	8009788 <__swbuf_r+0x64>
	...

080097a0 <__swsetup_r>:
 80097a0:	b538      	push	{r3, r4, r5, lr}
 80097a2:	4b2a      	ldr	r3, [pc, #168]	; (800984c <__swsetup_r+0xac>)
 80097a4:	4605      	mov	r5, r0
 80097a6:	6818      	ldr	r0, [r3, #0]
 80097a8:	460c      	mov	r4, r1
 80097aa:	b118      	cbz	r0, 80097b4 <__swsetup_r+0x14>
 80097ac:	6a03      	ldr	r3, [r0, #32]
 80097ae:	b90b      	cbnz	r3, 80097b4 <__swsetup_r+0x14>
 80097b0:	f7ff f8a2 	bl	80088f8 <__sinit>
 80097b4:	89a3      	ldrh	r3, [r4, #12]
 80097b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097ba:	0718      	lsls	r0, r3, #28
 80097bc:	d422      	bmi.n	8009804 <__swsetup_r+0x64>
 80097be:	06d9      	lsls	r1, r3, #27
 80097c0:	d407      	bmi.n	80097d2 <__swsetup_r+0x32>
 80097c2:	2309      	movs	r3, #9
 80097c4:	602b      	str	r3, [r5, #0]
 80097c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097ca:	81a3      	strh	r3, [r4, #12]
 80097cc:	f04f 30ff 	mov.w	r0, #4294967295
 80097d0:	e034      	b.n	800983c <__swsetup_r+0x9c>
 80097d2:	0758      	lsls	r0, r3, #29
 80097d4:	d512      	bpl.n	80097fc <__swsetup_r+0x5c>
 80097d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097d8:	b141      	cbz	r1, 80097ec <__swsetup_r+0x4c>
 80097da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097de:	4299      	cmp	r1, r3
 80097e0:	d002      	beq.n	80097e8 <__swsetup_r+0x48>
 80097e2:	4628      	mov	r0, r5
 80097e4:	f7ff f9cc 	bl	8008b80 <_free_r>
 80097e8:	2300      	movs	r3, #0
 80097ea:	6363      	str	r3, [r4, #52]	; 0x34
 80097ec:	89a3      	ldrh	r3, [r4, #12]
 80097ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80097f2:	81a3      	strh	r3, [r4, #12]
 80097f4:	2300      	movs	r3, #0
 80097f6:	6063      	str	r3, [r4, #4]
 80097f8:	6923      	ldr	r3, [r4, #16]
 80097fa:	6023      	str	r3, [r4, #0]
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	f043 0308 	orr.w	r3, r3, #8
 8009802:	81a3      	strh	r3, [r4, #12]
 8009804:	6923      	ldr	r3, [r4, #16]
 8009806:	b94b      	cbnz	r3, 800981c <__swsetup_r+0x7c>
 8009808:	89a3      	ldrh	r3, [r4, #12]
 800980a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800980e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009812:	d003      	beq.n	800981c <__swsetup_r+0x7c>
 8009814:	4621      	mov	r1, r4
 8009816:	4628      	mov	r0, r5
 8009818:	f000 f899 	bl	800994e <__smakebuf_r>
 800981c:	89a0      	ldrh	r0, [r4, #12]
 800981e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009822:	f010 0301 	ands.w	r3, r0, #1
 8009826:	d00a      	beq.n	800983e <__swsetup_r+0x9e>
 8009828:	2300      	movs	r3, #0
 800982a:	60a3      	str	r3, [r4, #8]
 800982c:	6963      	ldr	r3, [r4, #20]
 800982e:	425b      	negs	r3, r3
 8009830:	61a3      	str	r3, [r4, #24]
 8009832:	6923      	ldr	r3, [r4, #16]
 8009834:	b943      	cbnz	r3, 8009848 <__swsetup_r+0xa8>
 8009836:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800983a:	d1c4      	bne.n	80097c6 <__swsetup_r+0x26>
 800983c:	bd38      	pop	{r3, r4, r5, pc}
 800983e:	0781      	lsls	r1, r0, #30
 8009840:	bf58      	it	pl
 8009842:	6963      	ldrpl	r3, [r4, #20]
 8009844:	60a3      	str	r3, [r4, #8]
 8009846:	e7f4      	b.n	8009832 <__swsetup_r+0x92>
 8009848:	2000      	movs	r0, #0
 800984a:	e7f7      	b.n	800983c <__swsetup_r+0x9c>
 800984c:	2000007c 	.word	0x2000007c

08009850 <memmove>:
 8009850:	4288      	cmp	r0, r1
 8009852:	b510      	push	{r4, lr}
 8009854:	eb01 0402 	add.w	r4, r1, r2
 8009858:	d902      	bls.n	8009860 <memmove+0x10>
 800985a:	4284      	cmp	r4, r0
 800985c:	4623      	mov	r3, r4
 800985e:	d807      	bhi.n	8009870 <memmove+0x20>
 8009860:	1e43      	subs	r3, r0, #1
 8009862:	42a1      	cmp	r1, r4
 8009864:	d008      	beq.n	8009878 <memmove+0x28>
 8009866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800986a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800986e:	e7f8      	b.n	8009862 <memmove+0x12>
 8009870:	4402      	add	r2, r0
 8009872:	4601      	mov	r1, r0
 8009874:	428a      	cmp	r2, r1
 8009876:	d100      	bne.n	800987a <memmove+0x2a>
 8009878:	bd10      	pop	{r4, pc}
 800987a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800987e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009882:	e7f7      	b.n	8009874 <memmove+0x24>

08009884 <_sbrk_r>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	4d06      	ldr	r5, [pc, #24]	; (80098a0 <_sbrk_r+0x1c>)
 8009888:	2300      	movs	r3, #0
 800988a:	4604      	mov	r4, r0
 800988c:	4608      	mov	r0, r1
 800988e:	602b      	str	r3, [r5, #0]
 8009890:	f7f8 fc26 	bl	80020e0 <_sbrk>
 8009894:	1c43      	adds	r3, r0, #1
 8009896:	d102      	bne.n	800989e <_sbrk_r+0x1a>
 8009898:	682b      	ldr	r3, [r5, #0]
 800989a:	b103      	cbz	r3, 800989e <_sbrk_r+0x1a>
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	bd38      	pop	{r3, r4, r5, pc}
 80098a0:	20000594 	.word	0x20000594

080098a4 <_realloc_r>:
 80098a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a8:	4680      	mov	r8, r0
 80098aa:	4614      	mov	r4, r2
 80098ac:	460e      	mov	r6, r1
 80098ae:	b921      	cbnz	r1, 80098ba <_realloc_r+0x16>
 80098b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098b4:	4611      	mov	r1, r2
 80098b6:	f7ff b9cf 	b.w	8008c58 <_malloc_r>
 80098ba:	b92a      	cbnz	r2, 80098c8 <_realloc_r+0x24>
 80098bc:	f7ff f960 	bl	8008b80 <_free_r>
 80098c0:	4625      	mov	r5, r4
 80098c2:	4628      	mov	r0, r5
 80098c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098c8:	f000 f8a0 	bl	8009a0c <_malloc_usable_size_r>
 80098cc:	4284      	cmp	r4, r0
 80098ce:	4607      	mov	r7, r0
 80098d0:	d802      	bhi.n	80098d8 <_realloc_r+0x34>
 80098d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80098d6:	d812      	bhi.n	80098fe <_realloc_r+0x5a>
 80098d8:	4621      	mov	r1, r4
 80098da:	4640      	mov	r0, r8
 80098dc:	f7ff f9bc 	bl	8008c58 <_malloc_r>
 80098e0:	4605      	mov	r5, r0
 80098e2:	2800      	cmp	r0, #0
 80098e4:	d0ed      	beq.n	80098c2 <_realloc_r+0x1e>
 80098e6:	42bc      	cmp	r4, r7
 80098e8:	4622      	mov	r2, r4
 80098ea:	4631      	mov	r1, r6
 80098ec:	bf28      	it	cs
 80098ee:	463a      	movcs	r2, r7
 80098f0:	f7ff f937 	bl	8008b62 <memcpy>
 80098f4:	4631      	mov	r1, r6
 80098f6:	4640      	mov	r0, r8
 80098f8:	f7ff f942 	bl	8008b80 <_free_r>
 80098fc:	e7e1      	b.n	80098c2 <_realloc_r+0x1e>
 80098fe:	4635      	mov	r5, r6
 8009900:	e7df      	b.n	80098c2 <_realloc_r+0x1e>

08009902 <__swhatbuf_r>:
 8009902:	b570      	push	{r4, r5, r6, lr}
 8009904:	460c      	mov	r4, r1
 8009906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800990a:	2900      	cmp	r1, #0
 800990c:	b096      	sub	sp, #88	; 0x58
 800990e:	4615      	mov	r5, r2
 8009910:	461e      	mov	r6, r3
 8009912:	da0d      	bge.n	8009930 <__swhatbuf_r+0x2e>
 8009914:	89a3      	ldrh	r3, [r4, #12]
 8009916:	f013 0f80 	tst.w	r3, #128	; 0x80
 800991a:	f04f 0100 	mov.w	r1, #0
 800991e:	bf0c      	ite	eq
 8009920:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009924:	2340      	movne	r3, #64	; 0x40
 8009926:	2000      	movs	r0, #0
 8009928:	6031      	str	r1, [r6, #0]
 800992a:	602b      	str	r3, [r5, #0]
 800992c:	b016      	add	sp, #88	; 0x58
 800992e:	bd70      	pop	{r4, r5, r6, pc}
 8009930:	466a      	mov	r2, sp
 8009932:	f000 f849 	bl	80099c8 <_fstat_r>
 8009936:	2800      	cmp	r0, #0
 8009938:	dbec      	blt.n	8009914 <__swhatbuf_r+0x12>
 800993a:	9901      	ldr	r1, [sp, #4]
 800993c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009940:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009944:	4259      	negs	r1, r3
 8009946:	4159      	adcs	r1, r3
 8009948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800994c:	e7eb      	b.n	8009926 <__swhatbuf_r+0x24>

0800994e <__smakebuf_r>:
 800994e:	898b      	ldrh	r3, [r1, #12]
 8009950:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009952:	079d      	lsls	r5, r3, #30
 8009954:	4606      	mov	r6, r0
 8009956:	460c      	mov	r4, r1
 8009958:	d507      	bpl.n	800996a <__smakebuf_r+0x1c>
 800995a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800995e:	6023      	str	r3, [r4, #0]
 8009960:	6123      	str	r3, [r4, #16]
 8009962:	2301      	movs	r3, #1
 8009964:	6163      	str	r3, [r4, #20]
 8009966:	b002      	add	sp, #8
 8009968:	bd70      	pop	{r4, r5, r6, pc}
 800996a:	ab01      	add	r3, sp, #4
 800996c:	466a      	mov	r2, sp
 800996e:	f7ff ffc8 	bl	8009902 <__swhatbuf_r>
 8009972:	9900      	ldr	r1, [sp, #0]
 8009974:	4605      	mov	r5, r0
 8009976:	4630      	mov	r0, r6
 8009978:	f7ff f96e 	bl	8008c58 <_malloc_r>
 800997c:	b948      	cbnz	r0, 8009992 <__smakebuf_r+0x44>
 800997e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009982:	059a      	lsls	r2, r3, #22
 8009984:	d4ef      	bmi.n	8009966 <__smakebuf_r+0x18>
 8009986:	f023 0303 	bic.w	r3, r3, #3
 800998a:	f043 0302 	orr.w	r3, r3, #2
 800998e:	81a3      	strh	r3, [r4, #12]
 8009990:	e7e3      	b.n	800995a <__smakebuf_r+0xc>
 8009992:	89a3      	ldrh	r3, [r4, #12]
 8009994:	6020      	str	r0, [r4, #0]
 8009996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800999a:	81a3      	strh	r3, [r4, #12]
 800999c:	9b00      	ldr	r3, [sp, #0]
 800999e:	6163      	str	r3, [r4, #20]
 80099a0:	9b01      	ldr	r3, [sp, #4]
 80099a2:	6120      	str	r0, [r4, #16]
 80099a4:	b15b      	cbz	r3, 80099be <__smakebuf_r+0x70>
 80099a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099aa:	4630      	mov	r0, r6
 80099ac:	f000 f81e 	bl	80099ec <_isatty_r>
 80099b0:	b128      	cbz	r0, 80099be <__smakebuf_r+0x70>
 80099b2:	89a3      	ldrh	r3, [r4, #12]
 80099b4:	f023 0303 	bic.w	r3, r3, #3
 80099b8:	f043 0301 	orr.w	r3, r3, #1
 80099bc:	81a3      	strh	r3, [r4, #12]
 80099be:	89a3      	ldrh	r3, [r4, #12]
 80099c0:	431d      	orrs	r5, r3
 80099c2:	81a5      	strh	r5, [r4, #12]
 80099c4:	e7cf      	b.n	8009966 <__smakebuf_r+0x18>
	...

080099c8 <_fstat_r>:
 80099c8:	b538      	push	{r3, r4, r5, lr}
 80099ca:	4d07      	ldr	r5, [pc, #28]	; (80099e8 <_fstat_r+0x20>)
 80099cc:	2300      	movs	r3, #0
 80099ce:	4604      	mov	r4, r0
 80099d0:	4608      	mov	r0, r1
 80099d2:	4611      	mov	r1, r2
 80099d4:	602b      	str	r3, [r5, #0]
 80099d6:	f7f8 fb5b 	bl	8002090 <_fstat>
 80099da:	1c43      	adds	r3, r0, #1
 80099dc:	d102      	bne.n	80099e4 <_fstat_r+0x1c>
 80099de:	682b      	ldr	r3, [r5, #0]
 80099e0:	b103      	cbz	r3, 80099e4 <_fstat_r+0x1c>
 80099e2:	6023      	str	r3, [r4, #0]
 80099e4:	bd38      	pop	{r3, r4, r5, pc}
 80099e6:	bf00      	nop
 80099e8:	20000594 	.word	0x20000594

080099ec <_isatty_r>:
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	4d06      	ldr	r5, [pc, #24]	; (8009a08 <_isatty_r+0x1c>)
 80099f0:	2300      	movs	r3, #0
 80099f2:	4604      	mov	r4, r0
 80099f4:	4608      	mov	r0, r1
 80099f6:	602b      	str	r3, [r5, #0]
 80099f8:	f7f8 fb5a 	bl	80020b0 <_isatty>
 80099fc:	1c43      	adds	r3, r0, #1
 80099fe:	d102      	bne.n	8009a06 <_isatty_r+0x1a>
 8009a00:	682b      	ldr	r3, [r5, #0]
 8009a02:	b103      	cbz	r3, 8009a06 <_isatty_r+0x1a>
 8009a04:	6023      	str	r3, [r4, #0]
 8009a06:	bd38      	pop	{r3, r4, r5, pc}
 8009a08:	20000594 	.word	0x20000594

08009a0c <_malloc_usable_size_r>:
 8009a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a10:	1f18      	subs	r0, r3, #4
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	bfbc      	itt	lt
 8009a16:	580b      	ldrlt	r3, [r1, r0]
 8009a18:	18c0      	addlt	r0, r0, r3
 8009a1a:	4770      	bx	lr

08009a1c <_init>:
 8009a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1e:	bf00      	nop
 8009a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a22:	bc08      	pop	{r3}
 8009a24:	469e      	mov	lr, r3
 8009a26:	4770      	bx	lr

08009a28 <_fini>:
 8009a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2a:	bf00      	nop
 8009a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a2e:	bc08      	pop	{r3}
 8009a30:	469e      	mov	lr, r3
 8009a32:	4770      	bx	lr
