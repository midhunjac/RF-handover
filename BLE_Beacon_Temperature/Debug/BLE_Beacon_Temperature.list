
BLE_Beacon_Temperature.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072d0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  0800740c  0800740c  0001740c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080076a0  080076a0  000176a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080076a4  080076a4  000176a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000004  080076a8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 BLE_DRIVER_CONTEXT 00000035  20000024  080076c8  00020024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  2000005c  080076fd  0002005c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000002bc  20000070  0800770e  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  2000032c  0800770e  0002032c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 12 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 13 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 14 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 15 .debug_info   00027f4e  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005e93  00000000  00000000  0004802e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002610  00000000  00000000  0004dec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001cf3  00000000  00000000  000504d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0000ac67  00000000  00000000  000521cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002a281  00000000  00000000  0005ce32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000cf625  00000000  00000000  000870b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00009d80  00000000  00000000  001566d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000078  00000000  00000000  00160458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	080073f4 	.word	0x080073f4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	080073f4 	.word	0x080073f4

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000192:	4b15      	ldr	r3, [pc, #84]	; (80001e8 <APPD_EnableCPU2+0x5c>)
 8000194:	881a      	ldrh	r2, [r3, #0]
 8000196:	4b15      	ldr	r3, [pc, #84]	; (80001ec <APPD_EnableCPU2+0x60>)
 8000198:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800019a:	4b15      	ldr	r3, [pc, #84]	; (80001f0 <APPD_EnableCPU2+0x64>)
 800019c:	881a      	ldrh	r2, [r3, #0]
 800019e:	4b13      	ldr	r3, [pc, #76]	; (80001ec <APPD_EnableCPU2+0x60>)
 80001a0:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 80001a2:	4b14      	ldr	r3, [pc, #80]	; (80001f4 <APPD_EnableCPU2+0x68>)
 80001a4:	881a      	ldrh	r2, [r3, #0]
 80001a6:	4b11      	ldr	r3, [pc, #68]	; (80001ec <APPD_EnableCPU2+0x60>)
 80001a8:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 80001aa:	4b13      	ldr	r3, [pc, #76]	; (80001f8 <APPD_EnableCPU2+0x6c>)
 80001ac:	881a      	ldrh	r2, [r3, #0]
 80001ae:	4b0f      	ldr	r3, [pc, #60]	; (80001ec <APPD_EnableCPU2+0x60>)
 80001b0:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 80001b2:	4b12      	ldr	r3, [pc, #72]	; (80001fc <APPD_EnableCPU2+0x70>)
 80001b4:	881a      	ldrh	r2, [r3, #0]
 80001b6:	4b0d      	ldr	r3, [pc, #52]	; (80001ec <APPD_EnableCPU2+0x60>)
 80001b8:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80001ba:	4b11      	ldr	r3, [pc, #68]	; (8000200 <APPD_EnableCPU2+0x74>)
 80001bc:	1d3c      	adds	r4, r7, #4
 80001be:	461d      	mov	r5, r3
 80001c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001c8:	c403      	stmia	r4!, {r0, r1}
 80001ca:	8022      	strh	r2, [r4, #0]
 80001cc:	3402      	adds	r4, #2
 80001ce:	0c13      	lsrs	r3, r2, #16
 80001d0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001d2:	f005 fee9 	bl	8005fa8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	4618      	mov	r0, r3
 80001da:	f005 f97a 	bl	80054d2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001de:	bf00      	nop
}
 80001e0:	3720      	adds	r7, #32
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bdb0      	pop	{r4, r5, r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000004 	.word	0x20000004
 80001ec:	200301e8 	.word	0x200301e8
 80001f0:	20000006 	.word	0x20000006
 80001f4:	20000008 	.word	0x20000008
 80001f8:	2000000a 	.word	0x2000000a
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	0800740c 	.word	0x0800740c

08000204 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 8000208:	4b05      	ldr	r3, [pc, #20]	; (8000220 <LL_PWR_SMPS_Enable+0x1c>)
 800020a:	69db      	ldr	r3, [r3, #28]
 800020c:	4a04      	ldr	r2, [pc, #16]	; (8000220 <LL_PWR_SMPS_Enable+0x1c>)
 800020e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000212:	61d3      	str	r3, [r2, #28]
}
 8000214:	bf00      	nop
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop
 8000220:	58000400 	.word	0x58000400

08000224 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 800022e:	69db      	ldr	r3, [r3, #28]
 8000230:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000234:	4904      	ldr	r1, [pc, #16]	; (8000248 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	4313      	orrs	r3, r2
 800023a:	61cb      	str	r3, [r1, #28]
}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr
 8000248:	58000400 	.word	0x58000400

0800024c <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 800024c:	b480      	push	{r7}
 800024e:	b087      	sub	sp, #28
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	0a1b      	lsrs	r3, r3, #8
 800025a:	f003 030f 	and.w	r3, r3, #15
 800025e:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d108      	bne.n	8000278 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 8000266:	4b15      	ldr	r3, [pc, #84]	; (80002bc <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000268:	69db      	ldr	r3, [r3, #28]
 800026a:	f023 020f 	bic.w	r2, r3, #15
 800026e:	4913      	ldr	r1, [pc, #76]	; (80002bc <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	4313      	orrs	r3, r2
 8000274:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 8000276:	e019      	b.n	80002ac <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	3b06      	subs	r3, #6
 800027c:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	693a      	ldr	r2, [r7, #16]
 8000282:	4413      	add	r3, r2
 8000284:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 8000286:	697b      	ldr	r3, [r7, #20]
 8000288:	2b00      	cmp	r3, #0
 800028a:	da02      	bge.n	8000292 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 800028c:	2300      	movs	r3, #0
 800028e:	617b      	str	r3, [r7, #20]
 8000290:	e004      	b.n	800029c <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8000292:	697b      	ldr	r3, [r7, #20]
 8000294:	2b0f      	cmp	r3, #15
 8000296:	dd01      	ble.n	800029c <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8000298:	230f      	movs	r3, #15
 800029a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800029e:	69db      	ldr	r3, [r3, #28]
 80002a0:	f023 020f 	bic.w	r2, r3, #15
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	4905      	ldr	r1, [pc, #20]	; (80002bc <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80002a8:	4313      	orrs	r3, r2
 80002aa:	61cb      	str	r3, [r1, #28]
}
 80002ac:	bf00      	nop
 80002ae:	371c      	adds	r7, #28
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	1fff7558 	.word	0x1fff7558
 80002bc:	58000400 	.word	0x58000400

080002c0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80002c8:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <LL_C2_PWR_SetPowerMode+0x28>)
 80002ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002ce:	f023 0207 	bic.w	r2, r3, #7
 80002d2:	4905      	ldr	r1, [pc, #20]	; (80002e8 <LL_C2_PWR_SetPowerMode+0x28>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4313      	orrs	r3, r2
 80002d8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	58000400 	.word	0x58000400

080002ec <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <LL_EXTI_EnableIT_32_63+0x24>)
 80002f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80002fa:	4905      	ldr	r1, [pc, #20]	; (8000310 <LL_EXTI_EnableIT_32_63+0x24>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4313      	orrs	r3, r2
 8000300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	58000800 	.word	0x58000800

08000314 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800031c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000320:	4a0a      	ldr	r2, [pc, #40]	; (800034c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000322:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800032a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800032e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	021b      	lsls	r3, r3, #8
 8000336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800033a:	4313      	orrs	r3, r2
 800033c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	cafecafe 	.word	0xcafecafe

08000350 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800035c:	689b      	ldr	r3, [r3, #8]
 800035e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4313      	orrs	r3, r2
 800036a:	608b      	str	r3, [r1, #8]
}
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800037c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000384:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800038c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr

0800039a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800039e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80003a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80003aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80003c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80003c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80003cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80003d0:	d101      	bne.n	80003d6 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80003d2:	2301      	movs	r3, #1
 80003d4:	e000      	b.n	80003d8 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80003d6:	2300      	movs	r3, #0
}
 80003d8:	4618      	mov	r0, r3
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr

080003e2 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80003e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80003ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80003f6:	d101      	bne.n	80003fc <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80003f8:	2301      	movs	r3, #1
 80003fa:	e000      	b.n	80003fe <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80003fc:	2300      	movs	r3, #0
}
 80003fe:	4618      	mov	r0, r3
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000414:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4313      	orrs	r3, r2
 800041e:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000424:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4013      	ands	r3, r2
 800042a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800042c:	68fb      	ldr	r3, [r7, #12]
}
 800042e:	bf00      	nop
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
	...

0800043c <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <LL_DBGMCU_GetDeviceID+0x18>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000448:	4618      	mov	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	e0042000 	.word	0xe0042000

08000458 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800045c:	4b04      	ldr	r3, [pc, #16]	; (8000470 <LL_DBGMCU_GetRevisionID+0x18>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	0c1b      	lsrs	r3, r3, #16
 8000462:	b29b      	uxth	r3, r3
}
 8000464:	4618      	mov	r0, r3
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	e0042000 	.word	0xe0042000

08000474 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	685a      	ldr	r2, [r3, #4]
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	431a      	orrs	r2, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	605a      	str	r2, [r3, #4]
}
 800048c:	bf00      	nop
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr

08000498 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000498:	b480      	push	{r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	685a      	ldr	r2, [r3, #4]
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	431a      	orrs	r2, r3
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	605a      	str	r2, [r3, #4]
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr

080004ba <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80004ba:	b480      	push	{r7}
 80004bc:	b083      	sub	sp, #12
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
 80004c2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	695a      	ldr	r2, [r3, #20]
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	041b      	lsls	r3, r3, #16
 80004cc:	431a      	orrs	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	615a      	str	r2, [r3, #20]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr

080004de <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80004de:	b480      	push	{r7}
 80004e0:	b083      	sub	sp, #12
 80004e2:	af00      	add	r7, sp, #0
 80004e4:	6078      	str	r0, [r7, #4]
 80004e6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	695a      	ldr	r2, [r3, #20]
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	431a      	orrs	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	615a      	str	r2, [r3, #20]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	683a      	ldr	r2, [r7, #0]
 800050e:	609a      	str	r2, [r3, #8]
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	683a      	ldr	r2, [r7, #0]
 800052a:	619a      	str	r2, [r3, #24]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	22ff      	movs	r2, #255	; 0xff
 8000544:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	22ca      	movs	r2, #202	; 0xca
 800055e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2253      	movs	r2, #83	; 0x53
 8000564:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
 800057a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	f023 0207 	bic.w	r2, r3, #7
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	431a      	orrs	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	609a      	str	r2, [r3, #8]
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <MX_APPE_Config+0x18>)
 800059e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005a2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80005a4:	f000 f829 	bl	80005fa <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80005a8:	f000 f868 	bl	800067c <Config_HSE>

  return;
 80005ac:	bf00      	nop
}
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	58004000 	.word	0x58004000

080005b4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80005b8:	f000 f874 	bl	80006a4 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80005bc:	f000 f88c 	bl	80006d8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80005c0:	4903      	ldr	r1, [pc, #12]	; (80005d0 <MX_APPE_Init+0x1c>)
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 fdb4 	bl	8001130 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80005c8:	f000 f896 	bl	80006f8 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80005cc:	bf00      	nop
}
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200001bc 	.word	0x200001bc

080005d4 <Init_Smps>:

void Init_Smps(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 80005d8:	2000      	movs	r0, #0
 80005da:	f7ff fe23 	bl	8000224 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 80005de:	2004      	movs	r0, #4
 80005e0:	f7ff fe34 	bl	800024c <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 80005e4:	f7ff fe0e 	bl	8000204 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 80005e8:	bf00      	nop
}
 80005ea:	bd80      	pop	{r7, pc}

080005ec <Init_Exti>:

void Init_Exti(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80005f0:	2050      	movs	r0, #80	; 0x50
 80005f2:	f7ff fe7b 	bl	80002ec <LL_EXTI_EnableIT_32_63>

  return;
 80005f6:	bf00      	nop
}
 80005f8:	bd80      	pop	{r7, pc}

080005fa <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80005fe:	f000 f804 	bl	800060a <Reset_BackupDomain>

  Reset_IPCC();
 8000602:	f000 f819 	bl	8000638 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8000606:	bf00      	nop
}
 8000608:	bd80      	pop	{r7, pc}

0800060a <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 800060e:	f7ff fed5 	bl	80003bc <LL_RCC_IsActiveFlag_PINRST>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d00d      	beq.n	8000634 <Reset_BackupDomain+0x2a>
 8000618:	f7ff fee3 	bl	80003e2 <LL_RCC_IsActiveFlag_SFTRST>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d108      	bne.n	8000634 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000622:	f002 fbc7 	bl	8002db4 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8000626:	f002 fbc5 	bl	8002db4 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800062a:	f7ff fea5 	bl	8000378 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800062e:	f7ff feb4 	bl	800039a <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000632:	bf00      	nop
 8000634:	bf00      	nop
}
 8000636:	bd80      	pop	{r7, pc}

08000638 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800063c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000640:	f7ff fee2 	bl	8000408 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000644:	213f      	movs	r1, #63	; 0x3f
 8000646:	480c      	ldr	r0, [pc, #48]	; (8000678 <Reset_IPCC+0x40>)
 8000648:	f7ff ff5a 	bl	8000500 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800064c:	213f      	movs	r1, #63	; 0x3f
 800064e:	480a      	ldr	r0, [pc, #40]	; (8000678 <Reset_IPCC+0x40>)
 8000650:	f7ff ff64 	bl	800051c <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000654:	213f      	movs	r1, #63	; 0x3f
 8000656:	4808      	ldr	r0, [pc, #32]	; (8000678 <Reset_IPCC+0x40>)
 8000658:	f7ff ff0c 	bl	8000474 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800065c:	213f      	movs	r1, #63	; 0x3f
 800065e:	4806      	ldr	r0, [pc, #24]	; (8000678 <Reset_IPCC+0x40>)
 8000660:	f7ff ff2b 	bl	80004ba <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000664:	213f      	movs	r1, #63	; 0x3f
 8000666:	4804      	ldr	r0, [pc, #16]	; (8000678 <Reset_IPCC+0x40>)
 8000668:	f7ff ff16 	bl	8000498 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800066c:	213f      	movs	r1, #63	; 0x3f
 800066e:	4802      	ldr	r0, [pc, #8]	; (8000678 <Reset_IPCC+0x40>)
 8000670:	f7ff ff35 	bl	80004de <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000674:	bf00      	nop
}
 8000676:	bd80      	pop	{r7, pc}
 8000678:	58000c00 	.word	0x58000c00

0800067c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000682:	2000      	movs	r0, #0
 8000684:	f005 fd1c 	bl	80060c0 <OTP_Read>
 8000688:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d005      	beq.n	800069c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	799b      	ldrb	r3, [r3, #6]
 8000694:	4618      	mov	r0, r3
 8000696:	f7ff fe3d 	bl	8000314 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800069a:	bf00      	nop
 800069c:	bf00      	nop
}
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <System_Init>:

static void System_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  Init_Smps();
 80006a8:	f7ff ff94 	bl	80005d4 <Init_Smps>

  Init_Exti();
 80006ac:	f7ff ff9e 	bl	80005ec <Init_Exti>

  Init_Rtc();
 80006b0:	f000 f802 	bl	80006b8 <Init_Rtc>

  return;
 80006b4:	bf00      	nop
}
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <Init_Rtc>:

static void Init_Rtc(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <Init_Rtc+0x1c>)
 80006be:	f7ff ff48 	bl	8000552 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80006c2:	2100      	movs	r1, #0
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <Init_Rtc+0x1c>)
 80006c6:	f7ff ff54 	bl	8000572 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80006ca:	4802      	ldr	r0, [pc, #8]	; (80006d4 <Init_Rtc+0x1c>)
 80006cc:	f7ff ff34 	bl	8000538 <LL_RTC_EnableWriteProtection>

  return;
 80006d0:	bf00      	nop
}
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40002800 	.word	0x40002800

080006d8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80006dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80006e0:	f7ff fe36 	bl	8000350 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80006e4:	f006 fb96 	bl	8006e14 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80006e8:	2004      	movs	r0, #4
 80006ea:	f7ff fde9 	bl	80002c0 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 80006ee:	f002 fb99 	bl	8002e24 <HAL_PWREx_EnableSRAMRetention>

  return;
 80006f2:	bf00      	nop
}
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b088      	sub	sp, #32
 80006fc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80006fe:	f005 fa9d 	bl	8005c3c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8000702:	4a11      	ldr	r2, [pc, #68]	; (8000748 <appe_Tl_Init+0x50>)
 8000704:	2100      	movs	r1, #0
 8000706:	2010      	movs	r0, #16
 8000708:	f006 fcf8 	bl	80070fc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <appe_Tl_Init+0x54>)
 800070e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <appe_Tl_Init+0x58>)
 8000712:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000714:	463b      	mov	r3, r7
 8000716:	4619      	mov	r1, r3
 8000718:	480e      	ldr	r0, [pc, #56]	; (8000754 <appe_Tl_Init+0x5c>)
 800071a:	f005 f951 	bl	80059c0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <appe_Tl_Init+0x60>)
 8000720:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <appe_Tl_Init+0x64>)
 8000724:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <appe_Tl_Init+0x68>)
 8000728:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800072a:	f240 533c 	movw	r3, #1340	; 0x53c
 800072e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	4618      	mov	r0, r3
 8000736:	f005 fbc3 	bl	8005ec0 <TL_MM_Init>

  TL_Enable();
 800073a:	f005 fa79 	bl	8005c30 <TL_Enable>

  return;
 800073e:	bf00      	nop
}
 8000740:	3720      	adds	r7, #32
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	080059f9 	.word	0x080059f9
 800074c:	20030734 	.word	0x20030734
 8000750:	08000765 	.word	0x08000765
 8000754:	0800077d 	.word	0x0800077d
 8000758:	2003094c 	.word	0x2003094c
 800075c:	20030840 	.word	0x20030840
 8000760:	200301f8 	.word	0x200301f8

08000764 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800076e:	bf00      	nop
}
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
	...

0800077c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	330b      	adds	r3, #11
 800078a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	b29b      	uxth	r3, r3
 8000792:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 8000796:	2b07      	cmp	r3, #7
 8000798:	d81f      	bhi.n	80007da <APPE_SysUserEvtRx+0x5e>
 800079a:	a201      	add	r2, pc, #4	; (adr r2, 80007a0 <APPE_SysUserEvtRx+0x24>)
 800079c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a0:	080007c1 	.word	0x080007c1
 80007a4:	080007d3 	.word	0x080007d3
 80007a8:	080007db 	.word	0x080007db
 80007ac:	080007db 	.word	0x080007db
 80007b0:	080007db 	.word	0x080007db
 80007b4:	080007db 	.word	0x080007db
 80007b8:	080007db 	.word	0x080007db
 80007bc:	080007db 	.word	0x080007db
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	4618      	mov	r0, r3
 80007c6:	f004 feb1 	bl	800552c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f000 f81b 	bl	8000806 <APPE_SysEvtReadyProcessing>
    break;
 80007d0:	e004      	b.n	80007dc <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f000 f806 	bl	80007e4 <APPE_SysEvtError>
    break;
 80007d8:	e000      	b.n	80007dc <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80007da:	bf00      	nop
  }

  return;
 80007dc:	bf00      	nop
}
 80007de:	3720      	adds	r7, #32
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	330b      	adds	r3, #11
 80007f2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	3302      	adds	r3, #2
 80007f8:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80007fa:	bf00      	nop
}
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b08a      	sub	sp, #40	; 0x28
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	330b      	adds	r3, #11
 800082a:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	3302      	adds	r3, #2
 8000830:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d11d      	bne.n	8000876 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800083a:	f7ff fca7 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800083e:	230f      	movs	r3, #15
 8000840:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000842:	237f      	movs	r3, #127	; 0x7f
 8000844:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000846:	f7ff fe07 	bl	8000458 <LL_DBGMCU_GetRevisionID>
 800084a:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	b29b      	uxth	r3, r3
 8000850:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000852:	f7ff fdf3 	bl	800043c <LL_DBGMCU_GetDeviceID>
 8000856:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000858:	6a3b      	ldr	r3, [r7, #32]
 800085a:	b29b      	uxth	r3, r3
 800085c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	4618      	mov	r0, r3
 8000864:	f004 fe4c 	bl	8005500 <SHCI_C2_Config>

    APP_BLE_Init();
 8000868:	f005 fd4a 	bl	8006300 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800086c:	2100      	movs	r1, #0
 800086e:	2001      	movs	r0, #1
 8000870:	f006 fae2 	bl	8006e38 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000874:	e007      	b.n	8000886 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d103      	bne.n	8000886 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
  return;
 8000884:	bf00      	nop
 8000886:	bf00      	nop
}
 8000888:	3728      	adds	r7, #40	; 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000892:	f04f 30ff 	mov.w	r0, #4294967295
 8000896:	f006 fb35 	bl	8006f04 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}

0800089e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 80008a2:	f006 faf9 	bl	8006e98 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80008a6:	bf00      	nop
}
 80008a8:	bd80      	pop	{r7, pc}

080008aa <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295
 80008b8:	f006 fb24 	bl	8006f04 <UTIL_SEQ_Run>
  return;
 80008bc:	bf00      	nop
}
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80008cc:	2100      	movs	r1, #0
 80008ce:	2010      	movs	r0, #16
 80008d0:	f006 fc36 	bl	8007140 <UTIL_SEQ_SetTask>
  return;
 80008d4:	bf00      	nop
}
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008e4:	2002      	movs	r0, #2
 80008e6:	f006 fc97 	bl	8007218 <UTIL_SEQ_SetEvt>
  return;
 80008ea:	bf00      	nop
}
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008fa:	2002      	movs	r0, #2
 80008fc:	f006 fcac 	bl	8007258 <UTIL_SEQ_WaitEvt>
  return;
 8000900:	bf00      	nop
}
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <LL_EXTI_EnableIT_0_31>:
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <LL_EXTI_EnableIT_0_31+0x24>)
 8000912:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000916:	4905      	ldr	r1, [pc, #20]	; (800092c <LL_EXTI_EnableIT_0_31+0x24>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4313      	orrs	r3, r2
 800091c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	58000800 	.word	0x58000800

08000930 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4904      	ldr	r1, [pc, #16]	; (8000950 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4313      	orrs	r3, r2
 8000942:	600b      	str	r3, [r1, #0]

}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	58000800 	.word	0x58000800

08000954 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800095a:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <ReadRtcSsrValue+0x3c>)
 800095c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095e:	b29b      	uxth	r3, r3
 8000960:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <ReadRtcSsrValue+0x3c>)
 8000964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000966:	b29b      	uxth	r3, r3
 8000968:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800096a:	e005      	b.n	8000978 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <ReadRtcSsrValue+0x3c>)
 8000972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000974:	b29b      	uxth	r3, r3
 8000976:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	429a      	cmp	r2, r3
 800097e:	d1f5      	bne.n	800096c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000980:	683b      	ldr	r3, [r7, #0]
}
 8000982:	4618      	mov	r0, r3
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40002800 	.word	0x40002800

08000994 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	460a      	mov	r2, r1
 800099e:	71fb      	strb	r3, [r7, #7]
 80009a0:	4613      	mov	r3, r2
 80009a2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80009a4:	79ba      	ldrb	r2, [r7, #6]
 80009a6:	491d      	ldr	r1, [pc, #116]	; (8000a1c <LinkTimerAfter+0x88>)
 80009a8:	4613      	mov	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4413      	add	r3, r2
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	440b      	add	r3, r1
 80009b2:	3315      	adds	r3, #21
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	2b06      	cmp	r3, #6
 80009bc:	d009      	beq.n	80009d2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80009be:	7bfa      	ldrb	r2, [r7, #15]
 80009c0:	4916      	ldr	r1, [pc, #88]	; (8000a1c <LinkTimerAfter+0x88>)
 80009c2:	4613      	mov	r3, r2
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	4413      	add	r3, r2
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	440b      	add	r3, r1
 80009cc:	3314      	adds	r3, #20
 80009ce:	79fa      	ldrb	r2, [r7, #7]
 80009d0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80009d2:	79fa      	ldrb	r2, [r7, #7]
 80009d4:	4911      	ldr	r1, [pc, #68]	; (8000a1c <LinkTimerAfter+0x88>)
 80009d6:	4613      	mov	r3, r2
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4413      	add	r3, r2
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	440b      	add	r3, r1
 80009e0:	3315      	adds	r3, #21
 80009e2:	7bfa      	ldrb	r2, [r7, #15]
 80009e4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80009e6:	79fa      	ldrb	r2, [r7, #7]
 80009e8:	490c      	ldr	r1, [pc, #48]	; (8000a1c <LinkTimerAfter+0x88>)
 80009ea:	4613      	mov	r3, r2
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	4413      	add	r3, r2
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	440b      	add	r3, r1
 80009f4:	3314      	adds	r3, #20
 80009f6:	79ba      	ldrb	r2, [r7, #6]
 80009f8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80009fa:	79ba      	ldrb	r2, [r7, #6]
 80009fc:	4907      	ldr	r1, [pc, #28]	; (8000a1c <LinkTimerAfter+0x88>)
 80009fe:	4613      	mov	r3, r2
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	4413      	add	r3, r2
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	440b      	add	r3, r1
 8000a08:	3315      	adds	r3, #21
 8000a0a:	79fa      	ldrb	r2, [r7, #7]
 8000a0c:	701a      	strb	r2, [r3, #0]

  return;
 8000a0e:	bf00      	nop
}
 8000a10:	3714      	adds	r7, #20
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	2000008c 	.word	0x2000008c

08000a20 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	460a      	mov	r2, r1
 8000a2a:	71fb      	strb	r3, [r7, #7]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000a30:	4b29      	ldr	r3, [pc, #164]	; (8000ad8 <LinkTimerBefore+0xb8>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	79ba      	ldrb	r2, [r7, #6]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d032      	beq.n	8000aa2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000a3c:	79ba      	ldrb	r2, [r7, #6]
 8000a3e:	4927      	ldr	r1, [pc, #156]	; (8000adc <LinkTimerBefore+0xbc>)
 8000a40:	4613      	mov	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	440b      	add	r3, r1
 8000a4a:	3314      	adds	r3, #20
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000a50:	7bfa      	ldrb	r2, [r7, #15]
 8000a52:	4922      	ldr	r1, [pc, #136]	; (8000adc <LinkTimerBefore+0xbc>)
 8000a54:	4613      	mov	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	440b      	add	r3, r1
 8000a5e:	3315      	adds	r3, #21
 8000a60:	79fa      	ldrb	r2, [r7, #7]
 8000a62:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a64:	79fa      	ldrb	r2, [r7, #7]
 8000a66:	491d      	ldr	r1, [pc, #116]	; (8000adc <LinkTimerBefore+0xbc>)
 8000a68:	4613      	mov	r3, r2
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4413      	add	r3, r2
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	440b      	add	r3, r1
 8000a72:	3315      	adds	r3, #21
 8000a74:	79ba      	ldrb	r2, [r7, #6]
 8000a76:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000a78:	79fa      	ldrb	r2, [r7, #7]
 8000a7a:	4918      	ldr	r1, [pc, #96]	; (8000adc <LinkTimerBefore+0xbc>)
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	440b      	add	r3, r1
 8000a86:	3314      	adds	r3, #20
 8000a88:	7bfa      	ldrb	r2, [r7, #15]
 8000a8a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a8c:	79ba      	ldrb	r2, [r7, #6]
 8000a8e:	4913      	ldr	r1, [pc, #76]	; (8000adc <LinkTimerBefore+0xbc>)
 8000a90:	4613      	mov	r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4413      	add	r3, r2
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	440b      	add	r3, r1
 8000a9a:	3314      	adds	r3, #20
 8000a9c:	79fa      	ldrb	r2, [r7, #7]
 8000a9e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000aa0:	e014      	b.n	8000acc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000aa2:	79fa      	ldrb	r2, [r7, #7]
 8000aa4:	490d      	ldr	r1, [pc, #52]	; (8000adc <LinkTimerBefore+0xbc>)
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	00db      	lsls	r3, r3, #3
 8000aae:	440b      	add	r3, r1
 8000ab0:	3315      	adds	r3, #21
 8000ab2:	79ba      	ldrb	r2, [r7, #6]
 8000ab4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000ab6:	79ba      	ldrb	r2, [r7, #6]
 8000ab8:	4908      	ldr	r1, [pc, #32]	; (8000adc <LinkTimerBefore+0xbc>)
 8000aba:	4613      	mov	r3, r2
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	4413      	add	r3, r2
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	440b      	add	r3, r1
 8000ac4:	3314      	adds	r3, #20
 8000ac6:	79fa      	ldrb	r2, [r7, #7]
 8000ac8:	701a      	strb	r2, [r3, #0]
  return;
 8000aca:	bf00      	nop
}
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	2000011c 	.word	0x2000011c
 8000adc:	2000008c 	.word	0x2000008c

08000ae0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000aea:	4b4e      	ldr	r3, [pc, #312]	; (8000c24 <linkTimer+0x144>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b06      	cmp	r3, #6
 8000af2:	d118      	bne.n	8000b26 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000af4:	4b4b      	ldr	r3, [pc, #300]	; (8000c24 <linkTimer+0x144>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b4b      	ldr	r3, [pc, #300]	; (8000c28 <linkTimer+0x148>)
 8000afc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000afe:	4a49      	ldr	r2, [pc, #292]	; (8000c24 <linkTimer+0x144>)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000b04:	79fa      	ldrb	r2, [r7, #7]
 8000b06:	4949      	ldr	r1, [pc, #292]	; (8000c2c <linkTimer+0x14c>)
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	440b      	add	r3, r1
 8000b12:	3315      	adds	r3, #21
 8000b14:	2206      	movs	r2, #6
 8000b16:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000b18:	4b45      	ldr	r3, [pc, #276]	; (8000c30 <linkTimer+0x150>)
 8000b1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	81fb      	strh	r3, [r7, #14]
 8000b24:	e078      	b.n	8000c18 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000b26:	f000 f909 	bl	8000d3c <ReturnTimeElapsed>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000b2e:	79fa      	ldrb	r2, [r7, #7]
 8000b30:	493e      	ldr	r1, [pc, #248]	; (8000c2c <linkTimer+0x14c>)
 8000b32:	4613      	mov	r3, r2
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	4413      	add	r3, r2
 8000b38:	00db      	lsls	r3, r3, #3
 8000b3a:	440b      	add	r3, r1
 8000b3c:	3308      	adds	r3, #8
 8000b3e:	6819      	ldr	r1, [r3, #0]
 8000b40:	89fb      	ldrh	r3, [r7, #14]
 8000b42:	79fa      	ldrb	r2, [r7, #7]
 8000b44:	4419      	add	r1, r3
 8000b46:	4839      	ldr	r0, [pc, #228]	; (8000c2c <linkTimer+0x14c>)
 8000b48:	4613      	mov	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	4413      	add	r3, r2
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	4403      	add	r3, r0
 8000b52:	3308      	adds	r3, #8
 8000b54:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000b56:	79fa      	ldrb	r2, [r7, #7]
 8000b58:	4934      	ldr	r1, [pc, #208]	; (8000c2c <linkTimer+0x14c>)
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4413      	add	r3, r2
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	440b      	add	r3, r1
 8000b64:	3308      	adds	r3, #8
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000b6a:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <linkTimer+0x144>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	4619      	mov	r1, r3
 8000b72:	4a2e      	ldr	r2, [pc, #184]	; (8000c2c <linkTimer+0x14c>)
 8000b74:	460b      	mov	r3, r1
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	440b      	add	r3, r1
 8000b7a:	00db      	lsls	r3, r3, #3
 8000b7c:	4413      	add	r3, r2
 8000b7e:	3308      	adds	r3, #8
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d337      	bcc.n	8000bf8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000b88:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <linkTimer+0x144>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000b8e:	7b7a      	ldrb	r2, [r7, #13]
 8000b90:	4926      	ldr	r1, [pc, #152]	; (8000c2c <linkTimer+0x14c>)
 8000b92:	4613      	mov	r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4413      	add	r3, r2
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	440b      	add	r3, r1
 8000b9c:	3315      	adds	r3, #21
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ba2:	e013      	b.n	8000bcc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000ba4:	7b7a      	ldrb	r2, [r7, #13]
 8000ba6:	4921      	ldr	r1, [pc, #132]	; (8000c2c <linkTimer+0x14c>)
 8000ba8:	4613      	mov	r3, r2
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4413      	add	r3, r2
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	440b      	add	r3, r1
 8000bb2:	3315      	adds	r3, #21
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000bb8:	7b7a      	ldrb	r2, [r7, #13]
 8000bba:	491c      	ldr	r1, [pc, #112]	; (8000c2c <linkTimer+0x14c>)
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	4413      	add	r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	440b      	add	r3, r1
 8000bc6:	3315      	adds	r3, #21
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000bcc:	7b3b      	ldrb	r3, [r7, #12]
 8000bce:	2b06      	cmp	r3, #6
 8000bd0:	d00b      	beq.n	8000bea <linkTimer+0x10a>
 8000bd2:	7b3a      	ldrb	r2, [r7, #12]
 8000bd4:	4915      	ldr	r1, [pc, #84]	; (8000c2c <linkTimer+0x14c>)
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	4413      	add	r3, r2
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	440b      	add	r3, r1
 8000be0:	3308      	adds	r3, #8
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	68ba      	ldr	r2, [r7, #8]
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d2dc      	bcs.n	8000ba4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000bea:	7b7a      	ldrb	r2, [r7, #13]
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	4611      	mov	r1, r2
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fecf 	bl	8000994 <LinkTimerAfter>
 8000bf6:	e00f      	b.n	8000c18 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000bf8:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <linkTimer+0x144>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff0c 	bl	8000a20 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <linkTimer+0x144>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <linkTimer+0x148>)
 8000c10:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000c12:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <linkTimer+0x144>)
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000c18:	89fb      	ldrh	r3, [r7, #14]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000011c 	.word	0x2000011c
 8000c28:	2000011d 	.word	0x2000011d
 8000c2c:	2000008c 	.word	0x2000008c
 8000c30:	20000120 	.word	0x20000120

08000c34 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	460a      	mov	r2, r1
 8000c3e:	71fb      	strb	r3, [r7, #7]
 8000c40:	4613      	mov	r3, r2
 8000c42:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000c44:	4b39      	ldr	r3, [pc, #228]	; (8000d2c <UnlinkTimer+0xf8>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	79fa      	ldrb	r2, [r7, #7]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d111      	bne.n	8000c74 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c50:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <UnlinkTimer+0xf8>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b36      	ldr	r3, [pc, #216]	; (8000d30 <UnlinkTimer+0xfc>)
 8000c58:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000c5a:	79fa      	ldrb	r2, [r7, #7]
 8000c5c:	4935      	ldr	r1, [pc, #212]	; (8000d34 <UnlinkTimer+0x100>)
 8000c5e:	4613      	mov	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4413      	add	r3, r2
 8000c64:	00db      	lsls	r3, r3, #3
 8000c66:	440b      	add	r3, r1
 8000c68:	3315      	adds	r3, #21
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	; (8000d2c <UnlinkTimer+0xf8>)
 8000c70:	701a      	strb	r2, [r3, #0]
 8000c72:	e03e      	b.n	8000cf2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000c74:	79fa      	ldrb	r2, [r7, #7]
 8000c76:	492f      	ldr	r1, [pc, #188]	; (8000d34 <UnlinkTimer+0x100>)
 8000c78:	4613      	mov	r3, r2
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	4413      	add	r3, r2
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	440b      	add	r3, r1
 8000c82:	3314      	adds	r3, #20
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000c88:	79fa      	ldrb	r2, [r7, #7]
 8000c8a:	492a      	ldr	r1, [pc, #168]	; (8000d34 <UnlinkTimer+0x100>)
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4413      	add	r3, r2
 8000c92:	00db      	lsls	r3, r3, #3
 8000c94:	440b      	add	r3, r1
 8000c96:	3315      	adds	r3, #21
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000c9c:	79f9      	ldrb	r1, [r7, #7]
 8000c9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ca0:	4824      	ldr	r0, [pc, #144]	; (8000d34 <UnlinkTimer+0x100>)
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	440b      	add	r3, r1
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	4403      	add	r3, r0
 8000cac:	3315      	adds	r3, #21
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2d8      	uxtb	r0, r3
 8000cb2:	4920      	ldr	r1, [pc, #128]	; (8000d34 <UnlinkTimer+0x100>)
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	4413      	add	r3, r2
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	440b      	add	r3, r1
 8000cbe:	3315      	adds	r3, #21
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cc4:	7bbb      	ldrb	r3, [r7, #14]
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d013      	beq.n	8000cf2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000cca:	79f9      	ldrb	r1, [r7, #7]
 8000ccc:	7bba      	ldrb	r2, [r7, #14]
 8000cce:	4819      	ldr	r0, [pc, #100]	; (8000d34 <UnlinkTimer+0x100>)
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	440b      	add	r3, r1
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4403      	add	r3, r0
 8000cda:	3314      	adds	r3, #20
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b2d8      	uxtb	r0, r3
 8000ce0:	4914      	ldr	r1, [pc, #80]	; (8000d34 <UnlinkTimer+0x100>)
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	4413      	add	r3, r2
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	440b      	add	r3, r1
 8000cec:	3314      	adds	r3, #20
 8000cee:	4602      	mov	r2, r0
 8000cf0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000cf2:	79fa      	ldrb	r2, [r7, #7]
 8000cf4:	490f      	ldr	r1, [pc, #60]	; (8000d34 <UnlinkTimer+0x100>)
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	440b      	add	r3, r1
 8000d00:	330c      	adds	r3, #12
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <UnlinkTimer+0xf8>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	2b06      	cmp	r3, #6
 8000d0e:	d107      	bne.n	8000d20 <UnlinkTimer+0xec>
 8000d10:	79bb      	ldrb	r3, [r7, #6]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d104      	bne.n	8000d20 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <UnlinkTimer+0x104>)
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	601a      	str	r2, [r3, #0]
  }

  return;
 8000d1e:	bf00      	nop
 8000d20:	bf00      	nop
}
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	2000011c 	.word	0x2000011c
 8000d30:	2000011d 	.word	0x2000011d
 8000d34:	2000008c 	.word	0x2000008c
 8000d38:	20000120 	.word	0x20000120

08000d3c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <ReturnTimeElapsed+0x70>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d4a:	d026      	beq.n	8000d9a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000d4c:	f7ff fe02 	bl	8000954 <ReadRtcSsrValue>
 8000d50:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <ReturnTimeElapsed+0x70>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d805      	bhi.n	8000d68 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000d5c:	4b13      	ldr	r3, [pc, #76]	; (8000dac <ReturnTimeElapsed+0x70>)
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	e00a      	b.n	8000d7e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <ReturnTimeElapsed+0x74>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	1ad3      	subs	r3, r2, r3
 8000d72:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <ReturnTimeElapsed+0x70>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <ReturnTimeElapsed+0x78>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	fb02 f303 	mul.w	r3, r2, r3
 8000d8a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <ReturnTimeElapsed+0x7c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	40d3      	lsrs	r3, r2
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	e001      	b.n	8000d9e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	b29b      	uxth	r3, r3
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000120 	.word	0x20000120
 8000db0:	20000128 	.word	0x20000128
 8000db4:	20000126 	.word	0x20000126
 8000db8:	20000125 	.word	0x20000125

08000dbc <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d108      	bne.n	8000dde <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000dcc:	f7ff fdc2 	bl	8000954 <ReadRtcSsrValue>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <RestartWakeupCounter+0x9c>)
 8000dd4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000dd6:	2003      	movs	r0, #3
 8000dd8:	f001 fb03 	bl	80023e2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000ddc:	e039      	b.n	8000e52 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d803      	bhi.n	8000dec <RestartWakeupCounter+0x30>
 8000de4:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <RestartWakeupCounter+0xa0>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d002      	beq.n	8000df2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000dec:	88fb      	ldrh	r3, [r7, #6]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000df2:	bf00      	nop
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <RestartWakeupCounter+0xa4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	f003 0304 	and.w	r3, r3, #4
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d0f8      	beq.n	8000df4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <RestartWakeupCounter+0xa4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <RestartWakeupCounter+0xa4>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000e12:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <RestartWakeupCounter+0xa8>)
 8000e16:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e1a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000e1c:	2003      	movs	r0, #3
 8000e1e:	f001 faee 	bl	80023fe <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000e22:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <RestartWakeupCounter+0xac>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	0c1b      	lsrs	r3, r3, #16
 8000e28:	041b      	lsls	r3, r3, #16
 8000e2a:	88fa      	ldrh	r2, [r7, #6]
 8000e2c:	490e      	ldr	r1, [pc, #56]	; (8000e68 <RestartWakeupCounter+0xac>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e32:	f7ff fd8f 	bl	8000954 <ReadRtcSsrValue>
 8000e36:	4603      	mov	r3, r0
 8000e38:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <RestartWakeupCounter+0x9c>)
 8000e3a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <RestartWakeupCounter+0xa4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <RestartWakeupCounter+0xa4>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e4a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000e4c:	f3af 8000 	nop.w
  return ;
 8000e50:	bf00      	nop
}
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000120 	.word	0x20000120
 8000e5c:	20000125 	.word	0x20000125
 8000e60:	200001bc 	.word	0x200001bc
 8000e64:	58000800 	.word	0x58000800
 8000e68:	40002800 	.word	0x40002800

08000e6c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000e72:	4b45      	ldr	r3, [pc, #276]	; (8000f88 <RescheduleTimerList+0x11c>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e7e:	d107      	bne.n	8000e90 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000e80:	bf00      	nop
 8000e82:	4b42      	ldr	r3, [pc, #264]	; (8000f8c <RescheduleTimerList+0x120>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	f003 0304 	and.w	r3, r3, #4
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1f8      	bne.n	8000e82 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000e90:	4b3e      	ldr	r3, [pc, #248]	; (8000f8c <RescheduleTimerList+0x120>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	4b3d      	ldr	r3, [pc, #244]	; (8000f8c <RescheduleTimerList+0x120>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e9e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000ea0:	4b3b      	ldr	r3, [pc, #236]	; (8000f90 <RescheduleTimerList+0x124>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000ea6:	7bfa      	ldrb	r2, [r7, #15]
 8000ea8:	493a      	ldr	r1, [pc, #232]	; (8000f94 <RescheduleTimerList+0x128>)
 8000eaa:	4613      	mov	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4413      	add	r3, r2
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	440b      	add	r3, r1
 8000eb4:	3308      	adds	r3, #8
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000eba:	f7ff ff3f 	bl	8000d3c <ReturnTimeElapsed>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	68ba      	ldr	r2, [r7, #8]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d205      	bcs.n	8000ed6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ece:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <RescheduleTimerList+0x12c>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	701a      	strb	r2, [r3, #0]
 8000ed4:	e04d      	b.n	8000f72 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	4a30      	ldr	r2, [pc, #192]	; (8000f9c <RescheduleTimerList+0x130>)
 8000eda:	8812      	ldrh	r2, [r2, #0]
 8000edc:	b292      	uxth	r2, r2
 8000ede:	4413      	add	r3, r2
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d906      	bls.n	8000ef6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000ee8:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <RescheduleTimerList+0x130>)
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000eee:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <RescheduleTimerList+0x12c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	e03d      	b.n	8000f72 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <RescheduleTimerList+0x12c>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f06:	e034      	b.n	8000f72 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000f08:	7bfa      	ldrb	r2, [r7, #15]
 8000f0a:	4922      	ldr	r1, [pc, #136]	; (8000f94 <RescheduleTimerList+0x128>)
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	440b      	add	r3, r1
 8000f16:	3308      	adds	r3, #8
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d20a      	bcs.n	8000f36 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000f20:	7bfa      	ldrb	r2, [r7, #15]
 8000f22:	491c      	ldr	r1, [pc, #112]	; (8000f94 <RescheduleTimerList+0x128>)
 8000f24:	4613      	mov	r3, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	4413      	add	r3, r2
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	440b      	add	r3, r1
 8000f2e:	3308      	adds	r3, #8
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	e013      	b.n	8000f5e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000f36:	7bfa      	ldrb	r2, [r7, #15]
 8000f38:	4916      	ldr	r1, [pc, #88]	; (8000f94 <RescheduleTimerList+0x128>)
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	4413      	add	r3, r2
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	440b      	add	r3, r1
 8000f44:	3308      	adds	r3, #8
 8000f46:	6819      	ldr	r1, [r3, #0]
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	1ac9      	subs	r1, r1, r3
 8000f4e:	4811      	ldr	r0, [pc, #68]	; (8000f94 <RescheduleTimerList+0x128>)
 8000f50:	4613      	mov	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	4403      	add	r3, r0
 8000f5a:	3308      	adds	r3, #8
 8000f5c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	490c      	ldr	r1, [pc, #48]	; (8000f94 <RescheduleTimerList+0x128>)
 8000f62:	4613      	mov	r3, r2
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	4413      	add	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3315      	adds	r3, #21
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	2b06      	cmp	r3, #6
 8000f76:	d1c7      	bne.n	8000f08 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000f78:	89bb      	ldrh	r3, [r7, #12]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff ff1e 	bl	8000dbc <RestartWakeupCounter>

  return ;
 8000f80:	bf00      	nop
}
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40002800 	.word	0x40002800
 8000f8c:	200001bc 	.word	0x200001bc
 8000f90:	2000011c 	.word	0x2000011c
 8000f94:	2000008c 	.word	0x2000008c
 8000f98:	20000124 	.word	0x20000124
 8000f9c:	2000012a 	.word	0x2000012a

08000fa0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000fa6:	f3ef 8310 	mrs	r3, PRIMASK
 8000faa:	617b      	str	r3, [r7, #20]
  return(result);
 8000fac:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000fb4:	4b59      	ldr	r3, [pc, #356]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	22ca      	movs	r2, #202	; 0xca
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24
 8000fbc:	4b57      	ldr	r3, [pc, #348]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2253      	movs	r2, #83	; 0x53
 8000fc2:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000fc4:	4b55      	ldr	r3, [pc, #340]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	689a      	ldr	r2, [r3, #8]
 8000fca:	4b54      	ldr	r3, [pc, #336]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fd2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000fd4:	4b52      	ldr	r3, [pc, #328]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000fdc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000fe0:	4950      	ldr	r1, [pc, #320]	; (8001124 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	440b      	add	r3, r1
 8000fec:	330c      	adds	r3, #12
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d16e      	bne.n	80010d4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000ff6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ffa:	494a      	ldr	r1, [pc, #296]	; (8001124 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	440b      	add	r3, r1
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800100a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800100e:	4945      	ldr	r1, [pc, #276]	; (8001124 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001010:	4613      	mov	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4413      	add	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	440b      	add	r3, r1
 800101a:	3310      	adds	r3, #16
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001020:	4b41      	ldr	r3, [pc, #260]	; (8001128 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d04c      	beq.n	80010c4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800102a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800102e:	493d      	ldr	r1, [pc, #244]	; (8001124 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	440b      	add	r3, r1
 800103a:	330d      	adds	r3, #13
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b01      	cmp	r3, #1
 8001042:	d124      	bne.n	800108e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001044:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001048:	2101      	movs	r1, #1
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fdf2 	bl	8000c34 <UnlinkTimer>
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	f383 8810 	msr	PRIMASK, r3
}
 800105a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800105c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001060:	4930      	ldr	r1, [pc, #192]	; (8001124 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	3304      	adds	r3, #4
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001074:	4611      	mov	r1, r2
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f9b8 	bl	80013ec <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800107c:	4b27      	ldr	r3, [pc, #156]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	22ca      	movs	r2, #202	; 0xca
 8001082:	625a      	str	r2, [r3, #36]	; 0x24
 8001084:	4b25      	ldr	r3, [pc, #148]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2253      	movs	r2, #83	; 0x53
 800108a:	625a      	str	r2, [r3, #36]	; 0x24
 800108c:	e012      	b.n	80010b4 <HW_TS_RTC_Wakeup_Handler+0x114>
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f383 8810 	msr	PRIMASK, r3
}
 8001098:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800109a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 f920 	bl	80012e4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	22ca      	movs	r2, #202	; 0xca
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2253      	movs	r2, #83	; 0x53
 80010b2:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80010b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010b8:	69fa      	ldr	r2, [r7, #28]
 80010ba:	4619      	mov	r1, r3
 80010bc:	69b8      	ldr	r0, [r7, #24]
 80010be:	f000 fa1b 	bl	80014f8 <HW_TS_RTC_Int_AppNot>
 80010c2:	e022      	b.n	800110a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80010c4:	f7ff fed2 	bl	8000e6c <RescheduleTimerList>
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	f383 8810 	msr	PRIMASK, r3
}
 80010d2:	e01a      	b.n	800110a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80010d4:	bf00      	nop
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d0f8      	beq.n	80010d6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80010e4:	4b0d      	ldr	r3, [pc, #52]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80010f4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f383 8810 	msr	PRIMASK, r3
}
 8001108:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	22ff      	movs	r2, #255	; 0xff
 8001110:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001112:	bf00      	nop
}
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001bc 	.word	0x200001bc
 8001120:	2000011c 	.word	0x2000011c
 8001124:	2000008c 	.word	0x2000008c
 8001128:	20000124 	.word	0x20000124
 800112c:	58000800 	.word	0x58000800

08001130 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800113c:	4b5e      	ldr	r3, [pc, #376]	; (80012b8 <HW_TS_Init+0x188>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	22ca      	movs	r2, #202	; 0xca
 8001142:	625a      	str	r2, [r3, #36]	; 0x24
 8001144:	4b5c      	ldr	r3, [pc, #368]	; (80012b8 <HW_TS_Init+0x188>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2253      	movs	r2, #83	; 0x53
 800114a:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800114c:	4b5b      	ldr	r3, [pc, #364]	; (80012bc <HW_TS_Init+0x18c>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	4a5a      	ldr	r2, [pc, #360]	; (80012bc <HW_TS_Init+0x18c>)
 8001152:	f043 0320 	orr.w	r3, r3, #32
 8001156:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001158:	4b58      	ldr	r3, [pc, #352]	; (80012bc <HW_TS_Init+0x18c>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	b2db      	uxtb	r3, r3
 8001164:	f1c3 0304 	rsb	r3, r3, #4
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4b55      	ldr	r3, [pc, #340]	; (80012c0 <HW_TS_Init+0x190>)
 800116c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800116e:	4b53      	ldr	r3, [pc, #332]	; (80012bc <HW_TS_Init+0x18c>)
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001176:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800117a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	fa92 f2a2 	rbit	r2, r2
 8001182:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	2a00      	cmp	r2, #0
 800118c:	d101      	bne.n	8001192 <HW_TS_Init+0x62>
  {
    return 32U;
 800118e:	2220      	movs	r2, #32
 8001190:	e003      	b.n	800119a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	fab2 f282 	clz	r2, r2
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	40d3      	lsrs	r3, r2
 800119c:	b2db      	uxtb	r3, r3
 800119e:	3301      	adds	r3, #1
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4b48      	ldr	r3, [pc, #288]	; (80012c4 <HW_TS_Init+0x194>)
 80011a4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80011a6:	4b45      	ldr	r3, [pc, #276]	; (80012bc <HW_TS_Init+0x18c>)
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	3301      	adds	r3, #1
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	4b44      	ldr	r3, [pc, #272]	; (80012c8 <HW_TS_Init+0x198>)
 80011b8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80011ba:	4b43      	ldr	r3, [pc, #268]	; (80012c8 <HW_TS_Init+0x198>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	3b01      	subs	r3, #1
 80011c0:	4a40      	ldr	r2, [pc, #256]	; (80012c4 <HW_TS_Init+0x194>)
 80011c2:	7812      	ldrb	r2, [r2, #0]
 80011c4:	fb02 f303 	mul.w	r3, r2, r3
 80011c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80011cc:	4a3c      	ldr	r2, [pc, #240]	; (80012c0 <HW_TS_Init+0x190>)
 80011ce:	7812      	ldrb	r2, [r2, #0]
 80011d0:	40d3      	lsrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011da:	4293      	cmp	r3, r2
 80011dc:	d904      	bls.n	80011e8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80011de:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <HW_TS_Init+0x19c>)
 80011e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e4:	801a      	strh	r2, [r3, #0]
 80011e6:	e003      	b.n	80011f0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b37      	ldr	r3, [pc, #220]	; (80012cc <HW_TS_Init+0x19c>)
 80011ee:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011f0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011f4:	f7ff fb9c 	bl	8000930 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011f8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011fc:	f7ff fb84 	bl	8000908 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d13d      	bne.n	8001282 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001206:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <HW_TS_Init+0x1a0>)
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800120c:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <HW_TS_Init+0x1a4>)
 800120e:	f04f 32ff 	mov.w	r2, #4294967295
 8001212:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001214:	2300      	movs	r3, #0
 8001216:	77fb      	strb	r3, [r7, #31]
 8001218:	e00c      	b.n	8001234 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800121a:	7ffa      	ldrb	r2, [r7, #31]
 800121c:	492e      	ldr	r1, [pc, #184]	; (80012d8 <HW_TS_Init+0x1a8>)
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	440b      	add	r3, r1
 8001228:	330c      	adds	r3, #12
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800122e:	7ffb      	ldrb	r3, [r7, #31]
 8001230:	3301      	adds	r3, #1
 8001232:	77fb      	strb	r3, [r7, #31]
 8001234:	7ffb      	ldrb	r3, [r7, #31]
 8001236:	2b05      	cmp	r3, #5
 8001238:	d9ef      	bls.n	800121a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <HW_TS_Init+0x1ac>)
 800123c:	2206      	movs	r2, #6
 800123e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HW_TS_Init+0x188>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <HW_TS_Init+0x188>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800124e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001250:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HW_TS_Init+0x188>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HW_TS_Init+0x188>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001260:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001262:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <HW_TS_Init+0x1b0>)
 8001264:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001268:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800126a:	2003      	movs	r0, #3
 800126c:	f001 f8c7 	bl	80023fe <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HW_TS_Init+0x188>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <HW_TS_Init+0x188>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	e009      	b.n	8001296 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <HW_TS_Init+0x188>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	2b00      	cmp	r3, #0
 800128e:	d002      	beq.n	8001296 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001290:	2003      	movs	r0, #3
 8001292:	f001 f8a6 	bl	80023e2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HW_TS_Init+0x188>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	22ff      	movs	r2, #255	; 0xff
 800129c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800129e:	2200      	movs	r2, #0
 80012a0:	2103      	movs	r1, #3
 80012a2:	2003      	movs	r0, #3
 80012a4:	f001 f85b 	bl	800235e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012a8:	2003      	movs	r0, #3
 80012aa:	f001 f872 	bl	8002392 <HAL_NVIC_EnableIRQ>

  return;
 80012ae:	bf00      	nop
}
 80012b0:	3720      	adds	r7, #32
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200001bc 	.word	0x200001bc
 80012bc:	40002800 	.word	0x40002800
 80012c0:	20000125 	.word	0x20000125
 80012c4:	20000126 	.word	0x20000126
 80012c8:	20000128 	.word	0x20000128
 80012cc:	2000012a 	.word	0x2000012a
 80012d0:	20000124 	.word	0x20000124
 80012d4:	20000120 	.word	0x20000120
 80012d8:	2000008c 	.word	0x2000008c
 80012dc:	2000011c 	.word	0x2000011c
 80012e0:	58000800 	.word	0x58000800

080012e4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012ee:	f3ef 8310 	mrs	r3, PRIMASK
 80012f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80012f4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012fc:	2003      	movs	r0, #3
 80012fe:	f001 f856 	bl	80023ae <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001302:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <HW_TS_Stop+0xf0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	22ca      	movs	r2, #202	; 0xca
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
 800130a:	4b32      	ldr	r3, [pc, #200]	; (80013d4 <HW_TS_Stop+0xf0>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2253      	movs	r2, #83	; 0x53
 8001310:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001312:	79fa      	ldrb	r2, [r7, #7]
 8001314:	4930      	ldr	r1, [pc, #192]	; (80013d8 <HW_TS_Stop+0xf4>)
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	440b      	add	r3, r1
 8001320:	330c      	adds	r3, #12
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d142      	bne.n	80013b0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fc80 	bl	8000c34 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001334:	4b29      	ldr	r3, [pc, #164]	; (80013dc <HW_TS_Stop+0xf8>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800133a:	7cfb      	ldrb	r3, [r7, #19]
 800133c:	2b06      	cmp	r3, #6
 800133e:	d12f      	bne.n	80013a0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001340:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <HW_TS_Stop+0xfc>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800134c:	d107      	bne.n	800135e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800134e:	bf00      	nop
 8001350:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HW_TS_Stop+0xf0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f8      	bne.n	8001350 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <HW_TS_Stop+0xf0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <HW_TS_Stop+0xf0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800136c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800136e:	bf00      	nop
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HW_TS_Stop+0xf0>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f8      	beq.n	8001370 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HW_TS_Stop+0xf0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	b2da      	uxtb	r2, r3
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <HW_TS_Stop+0xf0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800138e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <HW_TS_Stop+0x100>)
 8001392:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001396:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001398:	2003      	movs	r0, #3
 800139a:	f001 f830 	bl	80023fe <HAL_NVIC_ClearPendingIRQ>
 800139e:	e007      	b.n	80013b0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <HW_TS_Stop+0x104>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	7cfa      	ldrb	r2, [r7, #19]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d001      	beq.n	80013b0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80013ac:	f7ff fd5e 	bl	8000e6c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HW_TS_Stop+0xf0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	22ff      	movs	r2, #255	; 0xff
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013b8:	2003      	movs	r0, #3
 80013ba:	f000 ffea 	bl	8002392 <HAL_NVIC_EnableIRQ>
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	f383 8810 	msr	PRIMASK, r3
}
 80013c8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013ca:	bf00      	nop
}
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200001bc 	.word	0x200001bc
 80013d8:	2000008c 	.word	0x2000008c
 80013dc:	2000011c 	.word	0x2000011c
 80013e0:	40002800 	.word	0x40002800
 80013e4:	58000800 	.word	0x58000800
 80013e8:	2000011d 	.word	0x2000011d

080013ec <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013f8:	79fa      	ldrb	r2, [r7, #7]
 80013fa:	493b      	ldr	r1, [pc, #236]	; (80014e8 <HW_TS_Start+0xfc>)
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	330c      	adds	r3, #12
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d103      	bne.n	8001418 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff66 	bl	80012e4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001418:	f3ef 8310 	mrs	r3, PRIMASK
 800141c:	60fb      	str	r3, [r7, #12]
  return(result);
 800141e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001420:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001422:	b672      	cpsid	i
}
 8001424:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001426:	2003      	movs	r0, #3
 8001428:	f000 ffc1 	bl	80023ae <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800142c:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <HW_TS_Start+0x100>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	22ca      	movs	r2, #202	; 0xca
 8001432:	625a      	str	r2, [r3, #36]	; 0x24
 8001434:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <HW_TS_Start+0x100>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2253      	movs	r2, #83	; 0x53
 800143a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800143c:	79fa      	ldrb	r2, [r7, #7]
 800143e:	492a      	ldr	r1, [pc, #168]	; (80014e8 <HW_TS_Start+0xfc>)
 8001440:	4613      	mov	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	4413      	add	r3, r2
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	440b      	add	r3, r1
 800144a:	330c      	adds	r3, #12
 800144c:	2202      	movs	r2, #2
 800144e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001450:	79fa      	ldrb	r2, [r7, #7]
 8001452:	4925      	ldr	r1, [pc, #148]	; (80014e8 <HW_TS_Start+0xfc>)
 8001454:	4613      	mov	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	00db      	lsls	r3, r3, #3
 800145c:	440b      	add	r3, r1
 800145e:	3308      	adds	r3, #8
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001464:	79fa      	ldrb	r2, [r7, #7]
 8001466:	4920      	ldr	r1, [pc, #128]	; (80014e8 <HW_TS_Start+0xfc>)
 8001468:	4613      	mov	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	440b      	add	r3, r1
 8001472:	3304      	adds	r3, #4
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fb30 	bl	8000ae0 <linkTimer>
 8001480:	4603      	mov	r3, r0
 8001482:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001484:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <HW_TS_Start+0x104>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <HW_TS_Start+0x108>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	7c7a      	ldrb	r2, [r7, #17]
 8001492:	429a      	cmp	r2, r3
 8001494:	d002      	beq.n	800149c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001496:	f7ff fce9 	bl	8000e6c <RescheduleTimerList>
 800149a:	e013      	b.n	80014c4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800149c:	79fa      	ldrb	r2, [r7, #7]
 800149e:	4912      	ldr	r1, [pc, #72]	; (80014e8 <HW_TS_Start+0xfc>)
 80014a0:	4613      	mov	r3, r2
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	4413      	add	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	440b      	add	r3, r1
 80014aa:	3308      	adds	r3, #8
 80014ac:	6819      	ldr	r1, [r3, #0]
 80014ae:	8a7b      	ldrh	r3, [r7, #18]
 80014b0:	79fa      	ldrb	r2, [r7, #7]
 80014b2:	1ac9      	subs	r1, r1, r3
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <HW_TS_Start+0xfc>)
 80014b6:	4613      	mov	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	4403      	add	r3, r0
 80014c0:	3308      	adds	r3, #8
 80014c2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80014c4:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HW_TS_Start+0x100>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	22ff      	movs	r2, #255	; 0xff
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014cc:	2003      	movs	r0, #3
 80014ce:	f000 ff60 	bl	8002392 <HAL_NVIC_EnableIRQ>
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	f383 8810 	msr	PRIMASK, r3
}
 80014dc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014de:	bf00      	nop
}
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000008c 	.word	0x2000008c
 80014ec:	200001bc 	.word	0x200001bc
 80014f0:	2000011c 	.word	0x2000011c
 80014f4:	2000011d 	.word	0x2000011d

080014f8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	460b      	mov	r3, r1
 8001502:	607a      	str	r2, [r7, #4]
 8001504:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4798      	blx	r3

  return;
 800150a:	bf00      	nop
}
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <LL_RCC_LSE_SetDriveCapability>:
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800151a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001522:	f023 0218 	bic.w	r2, r3, #24
 8001526:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4313      	orrs	r3, r2
 800152e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <LL_AHB2_GRP1_EnableClock>:
{
 800153e:	b480      	push	{r7}
 8001540:	b085      	sub	sp, #20
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800154c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4313      	orrs	r3, r2
 8001554:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4013      	ands	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001574:	f000 fd12 	bl	8001f9c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001578:	f7ff f80e 	bl	8000598 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800157c:	f000 f811 	bl	80015a2 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001580:	f000 f85b 	bl	800163a <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001584:	f000 f8ba 	bl	80016fc <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001588:	f000 f908 	bl	800179c <MX_GPIO_Init>
  MX_I2C1_Init();
 800158c:	f000 f876 	bl	800167c <MX_I2C1_Init>
  MX_RTC_Init();
 8001590:	f000 f8d0 	bl	8001734 <MX_RTC_Init>
  MX_RF_Init();
 8001594:	f000 f8c6 	bl	8001724 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001598:	f7ff f80c 	bl	80005b4 <MX_APPE_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800159c:	f7ff f977 	bl	800088e <MX_APPE_Process>
 80015a0:	e7fc      	b.n	800159c <main+0x2c>

080015a2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b098      	sub	sp, #96	; 0x60
 80015a6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	2244      	movs	r2, #68	; 0x44
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f005 fee5 	bl	8007380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b6:	463b      	mov	r3, r7
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
 80015c4:	615a      	str	r2, [r3, #20]
 80015c6:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015c8:	f001 fbf4 	bl	8002db4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff ffa0 	bl	8001512 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80015d2:	2307      	movs	r3, #7
 80015d4:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015dc:	2301      	movs	r3, #1
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015e6:	2340      	movs	r3, #64	; 0x40
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 ff9c 	bl	8003530 <HAL_RCC_OscConfig>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80015fe:	f000 f947 	bl	8001890 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001602:	236f      	movs	r3, #111	; 0x6f
 8001604:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001606:	2302      	movs	r3, #2
 8001608:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800161e:	463b      	mov	r3, r7
 8001620:	2101      	movs	r1, #1
 8001622:	4618      	mov	r0, r3
 8001624:	f002 faba 	bl	8003b9c <HAL_RCC_ClockConfig>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800162e:	f000 f92f 	bl	8001890 <Error_Handler>
  }
}
 8001632:	bf00      	nop
 8001634:	3760      	adds	r7, #96	; 0x60
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b08c      	sub	sp, #48	; 0x30
 800163e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001640:	463b      	mov	r3, r7
 8001642:	2230      	movs	r2, #48	; 0x30
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f005 fe9a 	bl	8007380 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800164c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001650:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001652:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001658:	2300      	movs	r3, #0
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800165c:	2310      	movs	r3, #16
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001660:	463b      	mov	r3, r7
 8001662:	4618      	mov	r0, r3
 8001664:	f002 fe30 	bl	80042c8 <HAL_RCCEx_PeriphCLKConfig>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800166e:	f000 f90f 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001672:	bf00      	nop
 8001674:	3730      	adds	r7, #48	; 0x30
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <MX_I2C1_Init+0x74>)
 8001682:	4a1c      	ldr	r2, [pc, #112]	; (80016f4 <MX_I2C1_Init+0x78>)
 8001684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8001686:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <MX_I2C1_Init+0x74>)
 8001688:	4a1b      	ldr	r2, [pc, #108]	; (80016f8 <MX_I2C1_Init+0x7c>)
 800168a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_I2C1_Init+0x74>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_I2C1_Init+0x74>)
 8001694:	2201      	movs	r2, #1
 8001696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_I2C1_Init+0x74>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016b6:	480e      	ldr	r0, [pc, #56]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016b8:	f001 f9c4 	bl	8002a44 <HAL_I2C_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016c2:	f000 f8e5 	bl	8001890 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016c6:	2100      	movs	r1, #0
 80016c8:	4809      	ldr	r0, [pc, #36]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016ca:	f001 fa56 	bl	8002b7a <HAL_I2CEx_ConfigAnalogFilter>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016d4:	f000 f8dc 	bl	8001890 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016d8:	2100      	movs	r1, #0
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016dc:	f001 fa98 	bl	8002c10 <HAL_I2CEx_ConfigDigitalFilter>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016e6:	f000 f8d3 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	2000012c 	.word	0x2000012c
 80016f4:	40005400 	.word	0x40005400
 80016f8:	00303d5b 	.word	0x00303d5b

080016fc <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_IPCC_Init+0x20>)
 8001702:	4a07      	ldr	r2, [pc, #28]	; (8001720 <MX_IPCC_Init+0x24>)
 8001704:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_IPCC_Init+0x20>)
 8001708:	f001 face 	bl	8002ca8 <HAL_IPCC_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001712:	f000 f8bd 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000180 	.word	0x20000180
 8001720:	58000c00 	.word	0x58000c00

08001724 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001738:	4b16      	ldr	r3, [pc, #88]	; (8001794 <MX_RTC_Init+0x60>)
 800173a:	4a17      	ldr	r2, [pc, #92]	; (8001798 <MX_RTC_Init+0x64>)
 800173c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <MX_RTC_Init+0x60>)
 8001740:	2200      	movs	r2, #0
 8001742:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <MX_RTC_Init+0x60>)
 8001746:	220f      	movs	r2, #15
 8001748:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800174a:	4b12      	ldr	r3, [pc, #72]	; (8001794 <MX_RTC_Init+0x60>)
 800174c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001750:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <MX_RTC_Init+0x60>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_RTC_Init+0x60>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <MX_RTC_Init+0x60>)
 8001760:	2200      	movs	r2, #0
 8001762:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001764:	480b      	ldr	r0, [pc, #44]	; (8001794 <MX_RTC_Init+0x60>)
 8001766:	f002 fea5 	bl	80044b4 <HAL_RTC_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8001770:	f000 f88e 	bl	8001890 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001774:	2200      	movs	r2, #0
 8001776:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800177a:	4806      	ldr	r0, [pc, #24]	; (8001794 <MX_RTC_Init+0x60>)
 800177c:	f002 ff9a 	bl	80046b4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8001786:	f000 f883 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800178a:	4802      	ldr	r0, [pc, #8]	; (8001794 <MX_RTC_Init+0x60>)
 800178c:	f003 f84e 	bl	800482c <HAL_RTCEx_DeactivateWakeUpTimer>
  /* USER CODE END RTC_Init 2 */

}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}
 8001794:	200001bc 	.word	0x200001bc
 8001798:	40002800 	.word	0x40002800

0800179c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b0:	2004      	movs	r0, #4
 80017b2:	f7ff fec4 	bl	800153e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017b6:	2080      	movs	r0, #128	; 0x80
 80017b8:	f7ff fec1 	bl	800153e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017bc:	2002      	movs	r0, #2
 80017be:	f7ff febe 	bl	800153e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	2001      	movs	r0, #1
 80017c4:	f7ff febb 	bl	800153e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017c8:	2010      	movs	r0, #16
 80017ca:	f7ff feb8 	bl	800153e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017ce:	2308      	movs	r3, #8
 80017d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d2:	2303      	movs	r3, #3
 80017d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017da:	1d3b      	adds	r3, r7, #4
 80017dc:	4619      	mov	r1, r3
 80017de:	481f      	ldr	r0, [pc, #124]	; (800185c <MX_GPIO_Init+0xc0>)
 80017e0:	f000 ff8c 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017e8:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ea:	2303      	movs	r3, #3
 80017ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	4619      	mov	r1, r3
 80017f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fa:	f000 ff7f 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB0 PB1 PB3
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3
 80017fe:	23ef      	movs	r3, #239	; 0xef
 8001800:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001802:	2303      	movs	r3, #3
 8001804:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4619      	mov	r1, r3
 800180e:	4814      	ldr	r0, [pc, #80]	; (8001860 <MX_GPIO_Init+0xc4>)
 8001810:	f000 ff74 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001814:	2310      	movs	r3, #16
 8001816:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001818:	2303      	movs	r3, #3
 800181a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	4619      	mov	r1, r3
 8001824:	480f      	ldr	r0, [pc, #60]	; (8001864 <MX_GPIO_Init+0xc8>)
 8001826:	f000 ff69 	bl	80026fc <HAL_GPIO_Init>

  /*Configure GPIO pin : Data_Ready_Pin */
  GPIO_InitStruct.Pin = Data_Ready_Pin;
 800182a:	2310      	movs	r3, #16
 800182c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800182e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001832:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Data_Ready_GPIO_Port, &GPIO_InitStruct);
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	4619      	mov	r1, r3
 800183c:	4808      	ldr	r0, [pc, #32]	; (8001860 <MX_GPIO_Init+0xc4>)
 800183e:	f000 ff5d 	bl	80026fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	200a      	movs	r0, #10
 8001848:	f000 fd89 	bl	800235e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800184c:	200a      	movs	r0, #10
 800184e:	f000 fda0 	bl	8002392 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001852:	bf00      	nop
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	48001c00 	.word	0x48001c00
 8001860:	48000400 	.word	0x48000400
 8001864:	48001000 	.word	0x48001000

08001868 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Data_Ready_Pin) {
 8001872:	88fb      	ldrh	r3, [r7, #6]
 8001874:	2b10      	cmp	r3, #16
 8001876:	d107      	bne.n	8001888 <HAL_GPIO_EXTI_Callback+0x20>
		SystemClock_Config ();
 8001878:	f7ff fe93 	bl	80015a2 <SystemClock_Config>
		HAL_ResumeTick();
 800187c:	f000 fc24 	bl	80020c8 <HAL_ResumeTick>
		UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_TEMP, CFG_SCH_PRIO_0);
 8001880:	2100      	movs	r1, #0
 8001882:	2008      	movs	r0, #8
 8001884:	f005 fc5c 	bl	8007140 <UTIL_SEQ_SetTask>
	}
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001894:	b672      	cpsid	i
}
 8001896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001898:	e7fe      	b.n	8001898 <Error_Handler+0x8>
	...

0800189c <LL_PWR_SetPowerMode>:
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <LL_PWR_SetPowerMode+0x24>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f023 0207 	bic.w	r2, r3, #7
 80018ac:	4904      	ldr	r1, [pc, #16]	; (80018c0 <LL_PWR_SetPowerMode+0x24>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	58000400 	.word	0x58000400

080018c4 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 80018c8:	4b03      	ldr	r3, [pc, #12]	; (80018d8 <LL_PWR_ClearFlag_WU+0x14>)
 80018ca:	2209      	movs	r2, #9
 80018cc:	619a      	str	r2, [r3, #24]
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	58000400 	.word	0x58000400

080018dc <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 80018e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ee:	d101      	bne.n	80018f4 <LL_PWR_IsActiveFlag_C2SB+0x18>
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	58000400 	.word	0x58000400

08001904 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 800190a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800190e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001916:	d101      	bne.n	800191c <LL_PWR_IsActiveFlag_C2DS+0x18>
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <LL_PWR_IsActiveFlag_C2DS+0x1a>
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	58000400 	.word	0x58000400

0800192c <LL_RCC_HSI_Enable>:
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800193a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <LL_RCC_HSI_IsReady>:
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800194e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195c:	d101      	bne.n	8001962 <LL_RCC_HSI_IsReady+0x18>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <LL_RCC_HSI_IsReady+0x1a>
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <LL_RCC_SetSysClkSource>:
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f023 0203 	bic.w	r2, r3, #3
 8001980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4313      	orrs	r3, r2
 8001988:	608b      	str	r3, [r1, #8]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <LL_RCC_GetSysClkSource>:
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800199a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 030c 	and.w	r3, r3, #12
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <LL_RCC_SetSMPSClockSource>:
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80019b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	f023 0203 	bic.w	r2, r3, #3
 80019c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	624b      	str	r3, [r1, #36]	; 0x24
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80019da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80019fc:	4b05      	ldr	r3, [pc, #20]	; (8001a14 <LL_LPM_EnableSleep+0x1c>)
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <LL_LPM_EnableSleep+0x1c>)
 8001a02:	f023 0304 	bic.w	r3, r3, #4
 8001a06:	6113      	str	r3, [r2, #16]
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <LL_LPM_EnableDeepSleep+0x1c>)
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <LL_LPM_EnableDeepSleep+0x1c>)
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	6113      	str	r3, [r2, #16]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	3220      	adds	r2, #32
 8001a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4c:	4a05      	ldr	r2, [pc, #20]	; (8001a64 <LL_HSEM_1StepLock+0x2c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d001      	beq.n	8001a56 <LL_HSEM_1StepLock+0x1e>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <LL_HSEM_1StepLock+0x20>
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	80000400 	.word	0x80000400

08001a68 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001a82:	bf00      	nop
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8001a92:	f000 fb09 	bl	80020a8 <HAL_SuspendTick>
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001a96:	f7ff ff9e 	bl	80019d6 <LL_RCC_ClearResetFlags>

  EnterLowPower();
 8001a9a:	f000 f835 	bl	8001b08 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8001a9e:	f7ff ff11 	bl	80018c4 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8001aa2:	2003      	movs	r0, #3
 8001aa4:	f7ff fefa 	bl	800189c <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001aa8:	f7ff ffb6 	bl	8001a18 <LL_LPM_EnableDeepSleep>
#endif

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8001aac:	bf00      	nop
}
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  }
#endif
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8001ab4:	bf00      	nop
}
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 8001ac2:	f000 faf1 	bl	80020a8 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8001ac6:	f000 f81f 	bl	8001b08 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 8001aca:	2001      	movs	r0, #1
 8001acc:	f7ff fee6 	bl	800189c <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001ad0:	f7ff ffa2 	bl	8001a18 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001ad4:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 8001ad6:	bf00      	nop
}
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8001ade:	f000 f84f 	bl	8001b80 <ExitLowPower>

  HAL_ResumeTick();
 8001ae2:	f000 faf1 	bl	80020c8 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 8001ae6:	bf00      	nop
}
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8001aee:	f000 fadb 	bl	80020a8 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001af2:	f7ff ff81 	bl	80019f8 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001af6:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8001af8:	bf00      	nop
}
 8001afa:	bd80      	pop	{r7, pc}

08001afc <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8001b00:	f000 fae2 	bl	80020c8 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8001b04:	bf00      	nop
}
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001b0c:	bf00      	nop
 8001b0e:	2103      	movs	r1, #3
 8001b10:	4819      	ldr	r0, [pc, #100]	; (8001b78 <EnterLowPower+0x70>)
 8001b12:	f7ff ff91 	bl	8001a38 <LL_HSEM_1StepLock>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f8      	bne.n	8001b0e <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8001b1c:	2104      	movs	r1, #4
 8001b1e:	4816      	ldr	r0, [pc, #88]	; (8001b78 <EnterLowPower+0x70>)
 8001b20:	f7ff ff8a 	bl	8001a38 <LL_HSEM_1StepLock>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d117      	bne.n	8001b5a <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8001b2a:	f7ff feeb 	bl	8001904 <LL_PWR_IsActiveFlag_C2DS>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d104      	bne.n	8001b3e <EnterLowPower+0x36>
 8001b34:	f7ff fed2 	bl	80018dc <LL_PWR_IsActiveFlag_C2SB>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d015      	beq.n	8001b6a <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2104      	movs	r1, #4
 8001b42:	480d      	ldr	r0, [pc, #52]	; (8001b78 <EnterLowPower+0x70>)
 8001b44:	f7ff ff90 	bl	8001a68 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8001b48:	f000 f834 	bl	8001bb4 <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <EnterLowPower+0x74>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0a      	ldr	r2, [pc, #40]	; (8001b7c <EnterLowPower+0x74>)
 8001b52:	f023 0307 	bic.w	r3, r3, #7
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	e007      	b.n	8001b6a <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8001b5a:	f000 f82b 	bl	8001bb4 <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <EnterLowPower+0x74>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a06      	ldr	r2, [pc, #24]	; (8001b7c <EnterLowPower+0x74>)
 8001b64:	f023 0307 	bic.w	r3, r3, #7
 8001b68:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2103      	movs	r1, #3
 8001b6e:	4802      	ldr	r0, [pc, #8]	; (8001b78 <EnterLowPower+0x70>)
 8001b70:	f7ff ff7a 	bl	8001a68 <LL_HSEM_ReleaseLock>

  return;
 8001b74:	bf00      	nop
}
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	58001400 	.word	0x58001400
 8001b7c:	58004000 	.word	0x58004000

08001b80 <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2104      	movs	r1, #4
 8001b88:	4809      	ldr	r0, [pc, #36]	; (8001bb0 <ExitLowPower+0x30>)
 8001b8a:	f7ff ff6d 	bl	8001a68 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001b8e:	bf00      	nop
 8001b90:	2103      	movs	r1, #3
 8001b92:	4807      	ldr	r0, [pc, #28]	; (8001bb0 <ExitLowPower+0x30>)
 8001b94:	f7ff ff50 	bl	8001a38 <LL_HSEM_1StepLock>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f8      	bne.n	8001b90 <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001b9e:	f7ff fefa 	bl	8001996 <LL_RCC_GetSysClkSource>

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
#endif

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2103      	movs	r1, #3
 8001ba6:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <ExitLowPower+0x30>)
 8001ba8:	f7ff ff5e 	bl	8001a68 <LL_HSEM_ReleaseLock>

  return;
 8001bac:	bf00      	nop
}
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	58001400 	.word	0x58001400

08001bb4 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8001bb8:	f7ff feb8 	bl	800192c <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8001bbc:	bf00      	nop
 8001bbe:	f7ff fec4 	bl	800194a <LL_RCC_HSI_IsReady>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d0fa      	beq.n	8001bbe <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f7ff fed0 	bl	800196e <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f7ff feed 	bl	80019ae <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8001bd4:	bf00      	nop
 8001bd6:	f7ff fede 	bl	8001996 <LL_RCC_GetSysClkSource>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d1fa      	bne.n	8001bd6 <Switch_On_HSI+0x22>
  return;
 8001be0:	bf00      	nop
}
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <LL_RCC_EnableRTC>:
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_AHB2_GRP1_EnableClock>:
{
 8001c06:	b480      	push	{r7}
 8001c08:	b085      	sub	sp, #20
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4013      	ands	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_AHB3_GRP1_EnableClock>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b085      	sub	sp, #20
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001ca0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001ca4:	f7ff ffc8 	bl	8001c38 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	202e      	movs	r0, #46	; 0x2e
 8001cae:	f000 fb56 	bl	800235e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001cb2:	202e      	movs	r0, #46	; 0x2e
 8001cb4:	f000 fb6d 	bl	8002392 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b094      	sub	sp, #80	; 0x50
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	2230      	movs	r2, #48	; 0x30
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f005 fb4f 	bl	8007380 <memset>
  if(hi2c->Instance==I2C1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a17      	ldr	r2, [pc, #92]	; (8001d44 <HAL_I2C_MspInit+0x88>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d126      	bne.n	8001d3a <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cec:	2304      	movs	r3, #4
 8001cee:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001cf0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001cf4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f002 fae4 	bl	80042c8 <HAL_RCCEx_PeriphCLKConfig>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d06:	f7ff fdc3 	bl	8001890 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0a:	2002      	movs	r0, #2
 8001d0c:	f7ff ff7b 	bl	8001c06 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d14:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d16:	2312      	movs	r3, #18
 8001d18:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d22:	2304      	movs	r3, #4
 8001d24:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4806      	ldr	r0, [pc, #24]	; (8001d48 <HAL_I2C_MspInit+0x8c>)
 8001d2e:	f000 fce5 	bl	80026fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d32:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001d36:	f7ff ff98 	bl	8001c6a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3750      	adds	r7, #80	; 0x50
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40005400 	.word	0x40005400
 8001d48:	48000400 	.word	0x48000400

08001d4c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <HAL_IPCC_MspInit+0x44>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d113      	bne.n	8001d86 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001d5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001d62:	f7ff ff69 	bl	8001c38 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	202c      	movs	r0, #44	; 0x2c
 8001d6c:	f000 faf7 	bl	800235e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001d70:	202c      	movs	r0, #44	; 0x2c
 8001d72:	f000 fb0e 	bl	8002392 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	202d      	movs	r0, #45	; 0x2d
 8001d7c:	f000 faef 	bl	800235e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001d80:	202d      	movs	r0, #45	; 0x2d
 8001d82:	f000 fb06 	bl	8002392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	58000c00 	.word	0x58000c00

08001d94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08e      	sub	sp, #56	; 0x38
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d9c:	f107 0308 	add.w	r3, r7, #8
 8001da0:	2230      	movs	r2, #48	; 0x30
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f005 faeb 	bl	8007380 <memset>
  if(hrtc->Instance==RTC)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <HAL_RTC_MspInit+0x64>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d11d      	bne.n	8001df0 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001db4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001db8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dc0:	f107 0308 	add.w	r3, r7, #8
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f002 fa7f 	bl	80042c8 <HAL_RCCEx_PeriphCLKConfig>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001dd0:	f7ff fd5e 	bl	8001890 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001dd4:	f7ff ff06 	bl	8001be4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001dd8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ddc:	f7ff ff45 	bl	8001c6a <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 15, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	210f      	movs	r1, #15
 8001de4:	2003      	movs	r0, #3
 8001de6:	f000 faba 	bl	800235e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001dea:	2003      	movs	r0, #3
 8001dec:	f000 fad1 	bl	8002392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001df0:	bf00      	nop
 8001df2:	3738      	adds	r7, #56	; 0x38
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40002800 	.word	0x40002800

08001dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <NMI_Handler+0x4>

08001e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <HardFault_Handler+0x4>

08001e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <MemManage_Handler+0x4>

08001e0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <BusFault_Handler+0x4>

08001e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <UsageFault_Handler+0x4>

08001e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e48:	f000 f902 	bl	8002050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001e54:	f7ff f8a4 	bl	8000fa0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Data_Ready_Pin);
 8001e60:	2010      	movs	r0, #16
 8001e62:	f000 fdb3 	bl	80029cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001e6e:	f004 fe93 	bl	8006b98 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001e7a:	f004 fec3 	bl	8006c04 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001e86:	f000 fdb9 	bl	80029fc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001e94:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <SystemInit+0x90>)
 8001e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9a:	4a21      	ldr	r2, [pc, #132]	; (8001f20 <SystemInit+0x90>)
 8001e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ea0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001ebc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ec8:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <SystemInit+0x94>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001ece:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eda:	f023 0305 	bic.w	r3, r3, #5
 8001ede:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eee:	f023 0301 	bic.w	r3, r3, #1
 8001ef2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efa:	4a0b      	ldr	r2, [pc, #44]	; (8001f28 <SystemInit+0x98>)
 8001efc:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f12:	2200      	movs	r2, #0
 8001f14:	619a      	str	r2, [r3, #24]
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	faf6fefb 	.word	0xfaf6fefb
 8001f28:	22041000 	.word	0x22041000

08001f2c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001f2c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f2e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f30:	3304      	adds	r3, #4

08001f32 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f32:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f34:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001f36:	d3f9      	bcc.n	8001f2c <CopyDataInit>
  bx lr
 8001f38:	4770      	bx	lr

08001f3a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001f3a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001f3c:	3004      	adds	r0, #4

08001f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001f3e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001f40:	d3fb      	bcc.n	8001f3a <FillZerobss>
  bx lr
 8001f42:	4770      	bx	lr

08001f44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f44:	480c      	ldr	r0, [pc, #48]	; (8001f78 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001f46:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f48:	f7ff ffa2 	bl	8001e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001f4c:	480b      	ldr	r0, [pc, #44]	; (8001f7c <LoopForever+0x8>)
 8001f4e:	490c      	ldr	r1, [pc, #48]	; (8001f80 <LoopForever+0xc>)
 8001f50:	4a0c      	ldr	r2, [pc, #48]	; (8001f84 <LoopForever+0x10>)
 8001f52:	2300      	movs	r3, #0
 8001f54:	f7ff ffed 	bl	8001f32 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001f58:	480b      	ldr	r0, [pc, #44]	; (8001f88 <LoopForever+0x14>)
 8001f5a:	490c      	ldr	r1, [pc, #48]	; (8001f8c <LoopForever+0x18>)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f7ff ffee 	bl	8001f3e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001f62:	480b      	ldr	r0, [pc, #44]	; (8001f90 <LoopForever+0x1c>)
 8001f64:	490b      	ldr	r1, [pc, #44]	; (8001f94 <LoopForever+0x20>)
 8001f66:	2300      	movs	r3, #0
 8001f68:	f7ff ffe9 	bl	8001f3e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f6c:	f005 fa10 	bl	8007390 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001f70:	f7ff fafe 	bl	8001570 <main>

08001f74 <LoopForever>:

LoopForever:
  b LoopForever
 8001f74:	e7fe      	b.n	8001f74 <LoopForever>
 8001f76:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001f78:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8001f7c:	20000004 	.word	0x20000004
 8001f80:	20000024 	.word	0x20000024
 8001f84:	080076a8 	.word	0x080076a8
  INIT_BSS _sbss, _ebss
 8001f88:	20000070 	.word	0x20000070
 8001f8c:	2000032c 	.word	0x2000032c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001f90:	200301e4 	.word	0x200301e4
 8001f94:	20030a67 	.word	0x20030a67

08001f98 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f98:	e7fe      	b.n	8001f98 <ADC1_IRQHandler>
	...

08001f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_Init+0x3c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <HAL_Init+0x3c>)
 8001fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb2:	2003      	movs	r0, #3
 8001fb4:	f000 f9c8 	bl	8002348 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fb8:	200f      	movs	r0, #15
 8001fba:	f000 f80f 	bl	8001fdc <HAL_InitTick>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d002      	beq.n	8001fca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	71fb      	strb	r3, [r7, #7]
 8001fc8:	e001      	b.n	8001fce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fca:	f7ff fe67 	bl	8001c9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fce:	79fb      	ldrb	r3, [r7, #7]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	58004000 	.word	0x58004000

08001fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001fe8:	4b17      	ldr	r3, [pc, #92]	; (8002048 <HAL_InitTick+0x6c>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d024      	beq.n	800203a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ff0:	f001 ff80 	bl	8003ef4 <HAL_RCC_GetHCLKFreq>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <HAL_InitTick+0x6c>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002000:	fbb3 f3f1 	udiv	r3, r3, r1
 8002004:	fbb2 f3f3 	udiv	r3, r2, r3
 8002008:	4618      	mov	r0, r3
 800200a:	f000 f9de 	bl	80023ca <HAL_SYSTICK_Config>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10f      	bne.n	8002034 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b0f      	cmp	r3, #15
 8002018:	d809      	bhi.n	800202e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800201a:	2200      	movs	r2, #0
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	f04f 30ff 	mov.w	r0, #4294967295
 8002022:	f000 f99c 	bl	800235e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002026:	4a09      	ldr	r2, [pc, #36]	; (800204c <HAL_InitTick+0x70>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	e007      	b.n	800203e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	73fb      	strb	r3, [r7, #15]
 8002032:	e004      	b.n	800203e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
 8002038:	e001      	b.n	800203e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800203e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000018 	.word	0x20000018
 800204c:	20000014 	.word	0x20000014

08002050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_IncTick+0x20>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_IncTick+0x24>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4413      	add	r3, r2
 8002060:	4a04      	ldr	r2, [pc, #16]	; (8002074 <HAL_IncTick+0x24>)
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000018 	.word	0x20000018
 8002074:	200001e4 	.word	0x200001e4

08002078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return uwTick;
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HAL_GetTick+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	200001e4 	.word	0x200001e4

08002090 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <HAL_GetTickPrio+0x14>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000014 	.word	0x20000014

080020a8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80020ac:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_SuspendTick+0x1c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <HAL_SuspendTick+0x1c>)
 80020b2:	f023 0302 	bic.w	r3, r3, #2
 80020b6:	6013      	str	r3, [r2, #0]
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000e010 	.word	0xe000e010

080020c8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <HAL_ResumeTick+0x1c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <HAL_ResumeTick+0x1c>)
 80020d2:	f043 0302 	orr.w	r3, r3, #2
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000e010 	.word	0xe000e010

080020e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <__NVIC_SetPriorityGrouping+0x44>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002104:	4013      	ands	r3, r2
 8002106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800211a:	4a04      	ldr	r2, [pc, #16]	; (800212c <__NVIC_SetPriorityGrouping+0x44>)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	60d3      	str	r3, [r2, #12]
}
 8002120:	bf00      	nop
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <__NVIC_GetPriorityGrouping+0x18>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	0a1b      	lsrs	r3, r3, #8
 800213a:	f003 0307 	and.w	r3, r3, #7
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	2b00      	cmp	r3, #0
 800215c:	db0b      	blt.n	8002176 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	f003 021f 	and.w	r2, r3, #31
 8002164:	4907      	ldr	r1, [pc, #28]	; (8002184 <__NVIC_EnableIRQ+0x38>)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	2001      	movs	r0, #1
 800216e:	fa00 f202 	lsl.w	r2, r0, r2
 8002172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000e100 	.word	0xe000e100

08002188 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	db12      	blt.n	80021c0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	490a      	ldr	r1, [pc, #40]	; (80021cc <__NVIC_DisableIRQ+0x44>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2001      	movs	r0, #1
 80021aa:	fa00 f202 	lsl.w	r2, r0, r2
 80021ae:	3320      	adds	r3, #32
 80021b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80021b4:	f3bf 8f4f 	dsb	sy
}
 80021b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021ba:	f3bf 8f6f 	isb	sy
}
 80021be:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000e100 	.word	0xe000e100

080021d0 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	db0c      	blt.n	80021fc <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	4907      	ldr	r1, [pc, #28]	; (8002208 <__NVIC_SetPendingIRQ+0x38>)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	2001      	movs	r0, #1
 80021f2:	fa00 f202 	lsl.w	r2, r0, r2
 80021f6:	3340      	adds	r3, #64	; 0x40
 80021f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000e100 	.word	0xe000e100

0800220c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221a:	2b00      	cmp	r3, #0
 800221c:	db0c      	blt.n	8002238 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	f003 021f 	and.w	r2, r3, #31
 8002224:	4907      	ldr	r1, [pc, #28]	; (8002244 <__NVIC_ClearPendingIRQ+0x38>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	2001      	movs	r0, #1
 800222e:	fa00 f202 	lsl.w	r2, r0, r2
 8002232:	3360      	adds	r3, #96	; 0x60
 8002234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000e100 	.word	0xe000e100

08002248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	6039      	str	r1, [r7, #0]
 8002252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	2b00      	cmp	r3, #0
 800225a:	db0a      	blt.n	8002272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	b2da      	uxtb	r2, r3
 8002260:	490c      	ldr	r1, [pc, #48]	; (8002294 <__NVIC_SetPriority+0x4c>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	0112      	lsls	r2, r2, #4
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	440b      	add	r3, r1
 800226c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002270:	e00a      	b.n	8002288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4908      	ldr	r1, [pc, #32]	; (8002298 <__NVIC_SetPriority+0x50>)
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	3b04      	subs	r3, #4
 8002280:	0112      	lsls	r2, r2, #4
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	440b      	add	r3, r1
 8002286:	761a      	strb	r2, [r3, #24]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000e100 	.word	0xe000e100
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	; 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f1c3 0307 	rsb	r3, r3, #7
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	bf28      	it	cs
 80022ba:	2304      	movcs	r3, #4
 80022bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3304      	adds	r3, #4
 80022c2:	2b06      	cmp	r3, #6
 80022c4:	d902      	bls.n	80022cc <NVIC_EncodePriority+0x30>
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3b03      	subs	r3, #3
 80022ca:	e000      	b.n	80022ce <NVIC_EncodePriority+0x32>
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	f04f 32ff 	mov.w	r2, #4294967295
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	43da      	mvns	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	401a      	ands	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022e4:	f04f 31ff 	mov.w	r1, #4294967295
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	43d9      	mvns	r1, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	4313      	orrs	r3, r2
         );
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3724      	adds	r7, #36	; 0x24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
	...

08002304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3b01      	subs	r3, #1
 8002310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002314:	d301      	bcc.n	800231a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002316:	2301      	movs	r3, #1
 8002318:	e00f      	b.n	800233a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800231a:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <SysTick_Config+0x40>)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002322:	210f      	movs	r1, #15
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
 8002328:	f7ff ff8e 	bl	8002248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <SysTick_Config+0x40>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002332:	4b04      	ldr	r3, [pc, #16]	; (8002344 <SysTick_Config+0x40>)
 8002334:	2207      	movs	r2, #7
 8002336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	e000e010 	.word	0xe000e010

08002348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7ff fec9 	bl	80020e8 <__NVIC_SetPriorityGrouping>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b086      	sub	sp, #24
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	60b9      	str	r1, [r7, #8]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800236c:	f7ff fee0 	bl	8002130 <__NVIC_GetPriorityGrouping>
 8002370:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	6978      	ldr	r0, [r7, #20]
 8002378:	f7ff ff90 	bl	800229c <NVIC_EncodePriority>
 800237c:	4602      	mov	r2, r0
 800237e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff5f 	bl	8002248 <__NVIC_SetPriority>
}
 800238a:	bf00      	nop
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b082      	sub	sp, #8
 8002396:	af00      	add	r7, sp, #0
 8002398:	4603      	mov	r3, r0
 800239a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800239c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fed3 	bl	800214c <__NVIC_EnableIRQ>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff fee3 	bl	8002188 <__NVIC_DisableIRQ>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ff96 	bl	8002304 <SysTick_Config>
 80023d8:	4603      	mov	r3, r0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff feed 	bl	80021d0 <__NVIC_SetPendingIRQ>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fefd 	bl	800220c <__NVIC_ClearPendingIRQ>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <HAL_FLASH_Unlock+0x38>)
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	2b00      	cmp	r3, #0
 800242c:	da0b      	bge.n	8002446 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <HAL_FLASH_Unlock+0x38>)
 8002430:	4a09      	ldr	r2, [pc, #36]	; (8002458 <HAL_FLASH_Unlock+0x3c>)
 8002432:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002434:	4b07      	ldr	r3, [pc, #28]	; (8002454 <HAL_FLASH_Unlock+0x38>)
 8002436:	4a09      	ldr	r2, [pc, #36]	; (800245c <HAL_FLASH_Unlock+0x40>)
 8002438:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_FLASH_Unlock+0x38>)
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	2b00      	cmp	r3, #0
 8002440:	da01      	bge.n	8002446 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002446:	79fb      	ldrb	r3, [r7, #7]
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	58004000 	.word	0x58004000
 8002458:	45670123 	.word	0x45670123
 800245c:	cdef89ab 	.word	0xcdef89ab

08002460 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_FLASH_Lock+0x30>)
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	4a08      	ldr	r2, [pc, #32]	; (8002490 <HAL_FLASH_Lock+0x30>)
 8002470:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002474:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8002476:	4b06      	ldr	r3, [pc, #24]	; (8002490 <HAL_FLASH_Lock+0x30>)
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	2b00      	cmp	r3, #0
 800247c:	db01      	blt.n	8002482 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8002482:	79fb      	ldrb	r3, [r7, #7]
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	58004000 	.word	0x58004000

08002494 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800249c:	f7ff fdec 	bl	8002078 <HAL_GetTick>
 80024a0:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80024a2:	e009      	b.n	80024b8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80024a4:	f7ff fde8 	bl	8002078 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d801      	bhi.n	80024b8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e054      	b.n	8002562 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80024b8:	4b2c      	ldr	r3, [pc, #176]	; (800256c <FLASH_WaitForLastOperation+0xd8>)
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c4:	d0ee      	beq.n	80024a4 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 80024c6:	4b29      	ldr	r3, [pc, #164]	; (800256c <FLASH_WaitForLastOperation+0xd8>)
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80024d6:	4b25      	ldr	r3, [pc, #148]	; (800256c <FLASH_WaitForLastOperation+0xd8>)
 80024d8:	2201      	movs	r2, #1
 80024da:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d007      	beq.n	80024f6 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80024e6:	4b21      	ldr	r3, [pc, #132]	; (800256c <FLASH_WaitForLastOperation+0xd8>)
 80024e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024ec:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80024f4:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80024fc:	4013      	ands	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d007      	beq.n	800251a <FLASH_WaitForLastOperation+0x86>
 800250a:	4b18      	ldr	r3, [pc, #96]	; (800256c <FLASH_WaitForLastOperation+0xd8>)
 800250c:	699a      	ldr	r2, [r3, #24]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8002514:	4915      	ldr	r1, [pc, #84]	; (800256c <FLASH_WaitForLastOperation+0xd8>)
 8002516:	4313      	orrs	r3, r2
 8002518:	618b      	str	r3, [r1, #24]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d004      	beq.n	800252e <FLASH_WaitForLastOperation+0x9a>
 8002524:	4a11      	ldr	r2, [pc, #68]	; (800256c <FLASH_WaitForLastOperation+0xd8>)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800252c:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00e      	beq.n	8002552 <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8002534:	4a0e      	ldr	r2, [pc, #56]	; (8002570 <FLASH_WaitForLastOperation+0xdc>)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e011      	b.n	8002562 <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800253e:	f7ff fd9b 	bl	8002078 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	429a      	cmp	r2, r3
 800254c:	d801      	bhi.n	8002552 <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e007      	b.n	8002562 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <FLASH_WaitForLastOperation+0xd8>)
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800255a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800255e:	d0ee      	beq.n	800253e <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	58004000 	.word	0x58004000
 8002570:	200001e8 	.word	0x200001e8

08002574 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800257e:	4b24      	ldr	r3, [pc, #144]	; (8002610 <HAL_FLASHEx_Erase+0x9c>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_FLASHEx_Erase+0x16>
 8002586:	2302      	movs	r3, #2
 8002588:	e03d      	b.n	8002606 <HAL_FLASHEx_Erase+0x92>
 800258a:	4b21      	ldr	r3, [pc, #132]	; (8002610 <HAL_FLASHEx_Erase+0x9c>)
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002590:	4b1f      	ldr	r3, [pc, #124]	; (8002610 <HAL_FLASHEx_Erase+0x9c>)
 8002592:	2200      	movs	r2, #0
 8002594:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002596:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800259a:	f7ff ff7b 	bl	8002494 <FLASH_WaitForLastOperation>
 800259e:	4603      	mov	r3, r0
 80025a0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80025a2:	7bfb      	ldrb	r3, [r7, #15]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d12a      	bne.n	80025fe <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d124      	bne.n	80025fa <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	f04f 32ff 	mov.w	r2, #4294967295
 80025b6:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	e012      	b.n	80025e6 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 80025c0:	68b8      	ldr	r0, [r7, #8]
 80025c2:	f000 f827 	bl	8002614 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025ca:	f7ff ff63 	bl	8002494 <FLASH_WaitForLastOperation>
 80025ce:	4603      	mov	r3, r0
 80025d0:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	601a      	str	r2, [r3, #0]
          break;
 80025de:	e00a      	b.n	80025f6 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	3301      	adds	r3, #1
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	4413      	add	r3, r2
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d3e4      	bcc.n	80025c0 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 80025f6:	f000 f86f 	bl	80026d8 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80025fa:	f000 f825 	bl	8002648 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80025fe:	4b04      	ldr	r3, [pc, #16]	; (8002610 <HAL_FLASHEx_Erase+0x9c>)
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]

  return status;
 8002604:	7bfb      	ldrb	r3, [r7, #15]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200001e8 	.word	0x200001e8

08002614 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <FLASH_PageErase+0x30>)
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4313      	orrs	r3, r2
 800262a:	4a06      	ldr	r2, [pc, #24]	; (8002644 <FLASH_PageErase+0x30>)
 800262c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002630:	f043 0302 	orr.w	r3, r3, #2
 8002634:	6153      	str	r3, [r2, #20]
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	58004000 	.word	0x58004000

08002648 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 800264c:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <FLASH_FlushCaches+0x8c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002658:	d117      	bne.n	800268a <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800265a:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <FLASH_FlushCaches+0x8c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1d      	ldr	r2, [pc, #116]	; (80026d4 <FLASH_FlushCaches+0x8c>)
 8002660:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002664:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002666:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <FLASH_FlushCaches+0x8c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1a      	ldr	r2, [pc, #104]	; (80026d4 <FLASH_FlushCaches+0x8c>)
 800266c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <FLASH_FlushCaches+0x8c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a17      	ldr	r2, [pc, #92]	; (80026d4 <FLASH_FlushCaches+0x8c>)
 8002678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800267c:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800267e:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <FLASH_FlushCaches+0x8c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <FLASH_FlushCaches+0x8c>)
 8002684:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002688:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <FLASH_FlushCaches+0x8c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002696:	d117      	bne.n	80026c8 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002698:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <FLASH_FlushCaches+0x8c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0d      	ldr	r2, [pc, #52]	; (80026d4 <FLASH_FlushCaches+0x8c>)
 800269e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026a2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <FLASH_FlushCaches+0x8c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <FLASH_FlushCaches+0x8c>)
 80026aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	4b08      	ldr	r3, [pc, #32]	; (80026d4 <FLASH_FlushCaches+0x8c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a07      	ldr	r2, [pc, #28]	; (80026d4 <FLASH_FlushCaches+0x8c>)
 80026b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026ba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <FLASH_FlushCaches+0x8c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a04      	ldr	r2, [pc, #16]	; (80026d4 <FLASH_FlushCaches+0x8c>)
 80026c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026c6:	6013      	str	r3, [r2, #0]
  }
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	58004000 	.word	0x58004000

080026d8 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <FLASH_AcknowledgePageErase+0x20>)
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <FLASH_AcknowledgePageErase+0x20>)
 80026e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80026e6:	f023 0302 	bic.w	r3, r3, #2
 80026ea:	6153      	str	r3, [r2, #20]
}
 80026ec:	bf00      	nop
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	58004000 	.word	0x58004000

080026fc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002706:	2300      	movs	r3, #0
 8002708:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800270a:	e146      	b.n	800299a <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	2101      	movs	r1, #1
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	fa01 f303 	lsl.w	r3, r1, r3
 8002718:	4013      	ands	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8138 	beq.w	8002994 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	2b01      	cmp	r3, #1
 800272e:	d005      	beq.n	800273c <HAL_GPIO_Init+0x40>
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d130      	bne.n	800279e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2203      	movs	r2, #3
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002772:	2201      	movs	r2, #1
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	091b      	lsrs	r3, r3, #4
 8002788:	f003 0201 	and.w	r2, r3, #1
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	d017      	beq.n	80027da <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	2203      	movs	r2, #3
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4013      	ands	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d123      	bne.n	800282e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	08da      	lsrs	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	3208      	adds	r2, #8
 80027ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	220f      	movs	r2, #15
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4013      	ands	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	08da      	lsrs	r2, r3, #3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3208      	adds	r2, #8
 8002828:	6939      	ldr	r1, [r7, #16]
 800282a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	2203      	movs	r2, #3
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4013      	ands	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f003 0203 	and.w	r2, r3, #3
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800286a:	2b00      	cmp	r3, #0
 800286c:	f000 8092 	beq.w	8002994 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002870:	4a51      	ldr	r2, [pc, #324]	; (80029b8 <HAL_GPIO_Init+0x2bc>)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	089b      	lsrs	r3, r3, #2
 8002876:	3302      	adds	r3, #2
 8002878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800287c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f003 0303 	and.w	r3, r3, #3
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	220f      	movs	r2, #15
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4013      	ands	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800289a:	d013      	beq.n	80028c4 <HAL_GPIO_Init+0x1c8>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a47      	ldr	r2, [pc, #284]	; (80029bc <HAL_GPIO_Init+0x2c0>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00d      	beq.n	80028c0 <HAL_GPIO_Init+0x1c4>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a46      	ldr	r2, [pc, #280]	; (80029c0 <HAL_GPIO_Init+0x2c4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d007      	beq.n	80028bc <HAL_GPIO_Init+0x1c0>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a45      	ldr	r2, [pc, #276]	; (80029c4 <HAL_GPIO_Init+0x2c8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d101      	bne.n	80028b8 <HAL_GPIO_Init+0x1bc>
 80028b4:	2304      	movs	r3, #4
 80028b6:	e006      	b.n	80028c6 <HAL_GPIO_Init+0x1ca>
 80028b8:	2307      	movs	r3, #7
 80028ba:	e004      	b.n	80028c6 <HAL_GPIO_Init+0x1ca>
 80028bc:	2302      	movs	r3, #2
 80028be:	e002      	b.n	80028c6 <HAL_GPIO_Init+0x1ca>
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <HAL_GPIO_Init+0x1ca>
 80028c4:	2300      	movs	r3, #0
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	f002 0203 	and.w	r2, r2, #3
 80028cc:	0092      	lsls	r2, r2, #2
 80028ce:	4093      	lsls	r3, r2
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028d6:	4938      	ldr	r1, [pc, #224]	; (80029b8 <HAL_GPIO_Init+0x2bc>)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	089b      	lsrs	r3, r3, #2
 80028dc:	3302      	adds	r3, #2
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028e4:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <HAL_GPIO_Init+0x2cc>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002908:	4a2f      	ldr	r2, [pc, #188]	; (80029c8 <HAL_GPIO_Init+0x2cc>)
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800290e:	4b2e      	ldr	r3, [pc, #184]	; (80029c8 <HAL_GPIO_Init+0x2cc>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	43db      	mvns	r3, r3
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4013      	ands	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002932:	4a25      	ldr	r2, [pc, #148]	; (80029c8 <HAL_GPIO_Init+0x2cc>)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002938:	4b23      	ldr	r3, [pc, #140]	; (80029c8 <HAL_GPIO_Init+0x2cc>)
 800293a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800293e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	43db      	mvns	r3, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4013      	ands	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800295e:	4a1a      	ldr	r2, [pc, #104]	; (80029c8 <HAL_GPIO_Init+0x2cc>)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <HAL_GPIO_Init+0x2cc>)
 8002968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800296c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	43db      	mvns	r3, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800298c:	4a0e      	ldr	r2, [pc, #56]	; (80029c8 <HAL_GPIO_Init+0x2cc>)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	3301      	adds	r3, #1
 8002998:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f47f aeb1 	bne.w	800270c <HAL_GPIO_Init+0x10>
  }
}
 80029aa:	bf00      	nop
 80029ac:	bf00      	nop
 80029ae:	371c      	adds	r7, #28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	40010000 	.word	0x40010000
 80029bc:	48000400 	.word	0x48000400
 80029c0:	48000800 	.word	0x48000800
 80029c4:	48001000 	.word	0x48001000
 80029c8:	58000800 	.word	0x58000800

080029cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	4013      	ands	r3, r2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d006      	beq.n	80029f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029e2:	4a05      	ldr	r2, [pc, #20]	; (80029f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe ff3c 	bl	8001868 <HAL_GPIO_EXTI_Callback>
  }
}
 80029f0:	bf00      	nop
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	58000800 	.word	0x58000800

080029fc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002a02:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <HAL_HSEM_IRQHandler+0x30>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002a08:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <HAL_HSEM_IRQHandler+0x30>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	4906      	ldr	r1, [pc, #24]	; (8002a2c <HAL_HSEM_IRQHandler+0x30>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002a16:	4a05      	ldr	r2, [pc, #20]	; (8002a2c <HAL_HSEM_IRQHandler+0x30>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f807 	bl	8002a30 <HAL_HSEM_FreeCallback>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	58001500 	.word	0x58001500

08002a30 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e08d      	b.n	8002b72 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff f926 	bl	8001cbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2224      	movs	r2, #36	; 0x24
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aa4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d107      	bne.n	8002abe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	e006      	b.n	8002acc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002aca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d108      	bne.n	8002ae6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ae2:	605a      	str	r2, [r3, #4]
 8002ae4:	e007      	b.n	8002af6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002af4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69d9      	ldr	r1, [r3, #28]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1a      	ldr	r2, [r3, #32]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d138      	bne.n	8002c02 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e032      	b.n	8002c04 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2224      	movs	r2, #36	; 0x24
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0201 	bic.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002bcc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6819      	ldr	r1, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0201 	orr.w	r2, r2, #1
 8002bec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	e000      	b.n	8002c04 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c02:	2302      	movs	r3, #2
  }
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d139      	bne.n	8002c9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e033      	b.n	8002c9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2224      	movs	r2, #36	; 0x24
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0201 	bic.w	r2, r2, #1
 8002c52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0201 	orr.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e000      	b.n	8002c9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c9a:	2302      	movs	r3, #2
  }
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d01e      	beq.n	8002cf8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <HAL_IPCC_Init+0x60>)
 8002cbc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d102      	bne.n	8002cd0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7ff f83e 	bl	8001d4c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002cd0:	68b8      	ldr	r0, [r7, #8]
 8002cd2:	f000 f85b 	bl	8002d8c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f82c 	bl	8002d40 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002cf6:	e001      	b.n	8002cfc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	58000c00 	.word	0x58000c00

08002d0c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	4613      	mov	r3, r2
 8002d18:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b085      	sub	sp, #20
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	4613      	mov	r3, r2
 8002d32:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	e00f      	b.n	8002d6e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4413      	add	r3, r2
 8002d56:	4a0b      	ldr	r2, [pc, #44]	; (8002d84 <IPCC_SetDefaultCallbacks+0x44>)
 8002d58:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	3306      	adds	r3, #6
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	4a08      	ldr	r2, [pc, #32]	; (8002d88 <IPCC_SetDefaultCallbacks+0x48>)
 8002d66:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d9ec      	bls.n	8002d4e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	08002d0d 	.word	0x08002d0d
 8002d88:	08002d27 	.word	0x08002d27

08002d8c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002da0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	223f      	movs	r2, #63	; 0x3f
 8002da6:	609a      	str	r2, [r3, #8]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc2:	6013      	str	r3, [r2, #0]
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	58000400 	.word	0x58000400

08002dd4 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if (Regulator == PWR_LOWPOWERREGULATOR_ON)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002de6:	d104      	bne.n	8002df2 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 f84a 	bl	8002e84 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8002df0:	e003      	b.n	8002dfa <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 f81b 	bl	8002e30 <HAL_PWREx_EnterSTOP0Mode>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <LL_PWR_EnableSRAM2Retention>:
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	4a04      	ldr	r2, [pc, #16]	; (8002e20 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e12:	6093      	str	r3, [r2, #8]
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	58000400 	.word	0x58000400

08002e24 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8002e28:	f7ff ffec 	bl	8002e04 <LL_PWR_EnableSRAM2Retention>
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a0f      	ldr	r2, [pc, #60]	; (8002e7c <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002e40:	f023 0307 	bic.w	r3, r3, #7
 8002e44:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	4a0d      	ldr	r2, [pc, #52]	; (8002e80 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002e4c:	f043 0304 	orr.w	r3, r3, #4
 8002e50:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002e58:	bf30      	wfi
 8002e5a:	e002      	b.n	8002e62 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002e5c:	bf40      	sev
    __WFE();
 8002e5e:	bf20      	wfe
    __WFE();
 8002e60:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002e62:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	4a06      	ldr	r2, [pc, #24]	; (8002e80 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002e68:	f023 0304 	bic.w	r3, r3, #4
 8002e6c:	6113      	str	r3, [r2, #16]
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	58000400 	.word	0x58000400
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8002e8e:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 0307 	bic.w	r3, r3, #7
 8002e96:	4a0f      	ldr	r2, [pc, #60]	; (8002ed4 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002e9e:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	4a0d      	ldr	r2, [pc, #52]	; (8002ed8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002ea4:	f043 0304 	orr.w	r3, r3, #4
 8002ea8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002eb0:	bf30      	wfi
 8002eb2:	e002      	b.n	8002eba <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002eb4:	bf40      	sev
    __WFE();
 8002eb6:	bf20      	wfe
    __WFE();
 8002eb8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002eba:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	4a06      	ldr	r2, [pc, #24]	; (8002ed8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002ec0:	f023 0304 	bic.w	r3, r3, #4
 8002ec4:	6113      	str	r3, [r2, #16]
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	58000400 	.word	0x58000400
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eee:	d101      	bne.n	8002ef4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <LL_RCC_HSE_Enable>:
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f12:	6013      	str	r3, [r2, #0]
}
 8002f14:	bf00      	nop
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_RCC_HSE_Disable>:
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
}
 8002f32:	bf00      	nop
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <LL_RCC_HSE_IsReady>:
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f4e:	d101      	bne.n	8002f54 <LL_RCC_HSE_IsReady+0x18>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <LL_RCC_HSE_IsReady+0x1a>
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_RCC_HSI_Enable>:
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f72:	6013      	str	r3, [r2, #0]
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <LL_RCC_HSI_Disable>:
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f90:	6013      	str	r3, [r2, #0]
}
 8002f92:	bf00      	nop
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_RCC_HSI_IsReady>:
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fae:	d101      	bne.n	8002fb4 <LL_RCC_HSI_IsReady+0x18>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <LL_RCC_HSI_IsReady+0x1a>
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002fc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	604b      	str	r3, [r1, #4]
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <LL_RCC_LSE_Enable>:
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003002:	bf00      	nop
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <LL_RCC_LSE_Disable>:
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003018:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800301c:	f023 0301 	bic.w	r3, r3, #1
 8003020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <LL_RCC_LSE_EnableBypass>:
{
 800302e:	b480      	push	{r7}
 8003030:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800303e:	f043 0304 	orr.w	r3, r3, #4
 8003042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003046:	bf00      	nop
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <LL_RCC_LSE_DisableBypass>:
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003060:	f023 0304 	bic.w	r3, r3, #4
 8003064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003068:	bf00      	nop
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <LL_RCC_LSE_IsReady>:
{
 8003072:	b480      	push	{r7}
 8003074:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	2b02      	cmp	r3, #2
 8003084:	d101      	bne.n	800308a <LL_RCC_LSE_IsReady+0x18>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <LL_RCC_LSE_IsReady+0x1a>
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <LL_RCC_LSI1_Enable>:
{
 8003096:	b480      	push	{r7}
 8003098:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800309a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800309e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80030ae:	bf00      	nop
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <LL_RCC_LSI1_Disable>:
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80030bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030c8:	f023 0301 	bic.w	r3, r3, #1
 80030cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <LL_RCC_LSI1_IsReady>:
{
 80030da:	b480      	push	{r7}
 80030dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80030de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d101      	bne.n	80030f2 <LL_RCC_LSI1_IsReady+0x18>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <LL_RCC_LSI1_IsReady+0x1a>
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <LL_RCC_LSI2_Enable>:
{
 80030fe:	b480      	push	{r7}
 8003100:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800310a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800310e:	f043 0304 	orr.w	r3, r3, #4
 8003112:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003116:	bf00      	nop
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_RCC_LSI2_Disable>:
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800312c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003130:	f023 0304 	bic.w	r3, r3, #4
 8003134:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <LL_RCC_LSI2_IsReady>:
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b08      	cmp	r3, #8
 8003154:	d101      	bne.n	800315a <LL_RCC_LSI2_IsReady+0x18>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <LL_RCC_LSI2_IsReady+0x1a>
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <LL_RCC_LSI2_SetTrimming>:
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800316e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003176:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	021b      	lsls	r3, r3, #8
 800317e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <LL_RCC_MSI_Enable>:
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	6013      	str	r3, [r2, #0]
}
 80031a8:	bf00      	nop
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <LL_RCC_MSI_Disable>:
{
 80031b2:	b480      	push	{r7}
 80031b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80031b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031c0:	f023 0301 	bic.w	r3, r3, #1
 80031c4:	6013      	str	r3, [r2, #0]
}
 80031c6:	bf00      	nop
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <LL_RCC_MSI_IsReady>:
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80031d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d101      	bne.n	80031e6 <LL_RCC_MSI_IsReady+0x16>
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <LL_RCC_MSI_IsReady+0x18>
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <LL_RCC_MSI_SetRange>:
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80031fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003204:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4313      	orrs	r3, r2
 800320c:	600b      	str	r3, [r1, #0]
}
 800320e:	bf00      	nop
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <LL_RCC_MSI_GetRange>:
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800322a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2bb0      	cmp	r3, #176	; 0xb0
 8003230:	d901      	bls.n	8003236 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003232:	23b0      	movs	r3, #176	; 0xb0
 8003234:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003236:	687b      	ldr	r3, [r7, #4]
}
 8003238:	4618      	mov	r0, r3
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800324c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	021b      	lsls	r3, r3, #8
 800325a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800325e:	4313      	orrs	r3, r2
 8003260:	604b      	str	r3, [r1, #4]
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <LL_RCC_SetSysClkSource>:
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f023 0203 	bic.w	r2, r3, #3
 8003280:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <LL_RCC_GetSysClkSource>:
{
 8003296:	b480      	push	{r7}
 8003298:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800329a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 030c 	and.w	r3, r3, #12
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <LL_RCC_SetAHBPrescaler>:
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80032b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	608b      	str	r3, [r1, #8]
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80032d6:	b480      	push	{r7}
 80032d8:	b083      	sub	sp, #12
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80032de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80032f6:	bf00      	nop
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <LL_RCC_SetAHB4Prescaler>:
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800330a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800330e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003312:	f023 020f 	bic.w	r2, r3, #15
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	091b      	lsrs	r3, r3, #4
 800331a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <LL_RCC_SetAPB1Prescaler>:
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003342:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4313      	orrs	r3, r2
 800334a:	608b      	str	r3, [r1, #8]
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <LL_RCC_SetAPB2Prescaler>:
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800336a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4313      	orrs	r3, r2
 8003372:	608b      	str	r3, [r1, #8]
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <LL_RCC_GetAHBPrescaler>:
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <LL_RCC_GetAHB4Prescaler>:
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800339c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <LL_RCC_PLL_Enable>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80033b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033c6:	6013      	str	r3, [r2, #0]
}
 80033c8:	bf00      	nop
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <LL_RCC_PLL_Disable>:
{
 80033d2:	b480      	push	{r7}
 80033d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80033d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033e4:	6013      	str	r3, [r2, #0]
}
 80033e6:	bf00      	nop
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <LL_RCC_PLL_IsReady>:
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80033f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003402:	d101      	bne.n	8003408 <LL_RCC_PLL_IsReady+0x18>
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <LL_RCC_PLL_IsReady+0x1a>
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <LL_RCC_PLL_GetN>:
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	0a1b      	lsrs	r3, r3, #8
 8003420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <LL_RCC_PLL_GetR>:
{
 800342e:	b480      	push	{r7}
 8003430:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <LL_RCC_PLL_GetDivider>:
{
 8003446:	b480      	push	{r7}
 8003448:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800344a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003454:	4618      	mov	r0, r3
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <LL_RCC_PLL_GetMainSource>:
{
 800345e:	b480      	push	{r7}
 8003460:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0303 	and.w	r3, r3, #3
}
 800346c:	4618      	mov	r0, r3
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <LL_RCC_IsActiveFlag_HPRE>:
{
 8003476:	b480      	push	{r7}
 8003478:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800347a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003488:	d101      	bne.n	800348e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800348a:	2301      	movs	r3, #1
 800348c:	e000      	b.n	8003490 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800349a:	b480      	push	{r7}
 800349c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800349e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034ae:	d101      	bne.n	80034b4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80034c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80034cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d4:	d101      	bne.n	80034da <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80034ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034f8:	d101      	bne.n	80034fe <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <LL_RCC_IsActiveFlag_PPRE2>:
{
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800350e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003518:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800351c:	d101      	bne.n	8003522 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
	...

08003530 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003530:	b590      	push	{r4, r7, lr}
 8003532:	b08d      	sub	sp, #52	; 0x34
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e324      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 808d 	beq.w	800366a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003550:	f7ff fea1 	bl	8003296 <LL_RCC_GetSysClkSource>
 8003554:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003556:	f7ff ff82 	bl	800345e <LL_RCC_PLL_GetMainSource>
 800355a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800355c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_RCC_OscConfig+0x3e>
 8003562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003564:	2b0c      	cmp	r3, #12
 8003566:	d147      	bne.n	80035f8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	2b01      	cmp	r3, #1
 800356c:	d144      	bne.n	80035f8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e308      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800357e:	f7ff fe4c 	bl	800321a <LL_RCC_MSI_GetRange>
 8003582:	4603      	mov	r3, r0
 8003584:	429c      	cmp	r4, r3
 8003586:	d914      	bls.n	80035b2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fcc5 	bl	8003f1c <RCC_SetFlashLatencyFromMSIRange>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e2f7      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fe26 	bl	80031f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fe4a 	bl	8003244 <LL_RCC_MSI_SetCalibTrimming>
 80035b0:	e013      	b.n	80035da <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff fe1b 	bl	80031f2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff fe3f 	bl	8003244 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fca6 	bl	8003f1c <RCC_SetFlashLatencyFromMSIRange>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e2d8      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80035da:	f000 fc8b 	bl	8003ef4 <HAL_RCC_GetHCLKFreq>
 80035de:	4603      	mov	r3, r0
 80035e0:	4aa4      	ldr	r2, [pc, #656]	; (8003874 <HAL_RCC_OscConfig+0x344>)
 80035e2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035e4:	4ba4      	ldr	r3, [pc, #656]	; (8003878 <HAL_RCC_OscConfig+0x348>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fe fcf7 	bl	8001fdc <HAL_InitTick>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d039      	beq.n	8003668 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e2c9      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d01e      	beq.n	800363e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003600:	f7ff fdc8 	bl	8003194 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003604:	f7fe fd38 	bl	8002078 <HAL_GetTick>
 8003608:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800360c:	f7fe fd34 	bl	8002078 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e2b6      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 800361e:	f7ff fdd7 	bl	80031d0 <LL_RCC_MSI_IsReady>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0f1      	beq.n	800360c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff fde0 	bl	80031f2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff fe04 	bl	8003244 <LL_RCC_MSI_SetCalibTrimming>
 800363c:	e015      	b.n	800366a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800363e:	f7ff fdb8 	bl	80031b2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003642:	f7fe fd19 	bl	8002078 <HAL_GetTick>
 8003646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003648:	e008      	b.n	800365c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800364a:	f7fe fd15 	bl	8002078 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d901      	bls.n	800365c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e297      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 800365c:	f7ff fdb8 	bl	80031d0 <LL_RCC_MSI_IsReady>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f1      	bne.n	800364a <HAL_RCC_OscConfig+0x11a>
 8003666:	e000      	b.n	800366a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003668:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d047      	beq.n	8003706 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003676:	f7ff fe0e 	bl	8003296 <LL_RCC_GetSysClkSource>
 800367a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800367c:	f7ff feef 	bl	800345e <LL_RCC_PLL_GetMainSource>
 8003680:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	2b08      	cmp	r3, #8
 8003686:	d005      	beq.n	8003694 <HAL_RCC_OscConfig+0x164>
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	2b0c      	cmp	r3, #12
 800368c:	d108      	bne.n	80036a0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	2b03      	cmp	r3, #3
 8003692:	d105      	bne.n	80036a0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d134      	bne.n	8003706 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e275      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a8:	d102      	bne.n	80036b0 <HAL_RCC_OscConfig+0x180>
 80036aa:	f7ff fc29 	bl	8002f00 <LL_RCC_HSE_Enable>
 80036ae:	e001      	b.n	80036b4 <HAL_RCC_OscConfig+0x184>
 80036b0:	f7ff fc35 	bl	8002f1e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d012      	beq.n	80036e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fe fcdc 	bl	8002078 <HAL_GetTick>
 80036c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c4:	f7fe fcd8 	bl	8002078 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b64      	cmp	r3, #100	; 0x64
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e25a      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 80036d6:	f7ff fc31 	bl	8002f3c <LL_RCC_HSE_IsReady>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f1      	beq.n	80036c4 <HAL_RCC_OscConfig+0x194>
 80036e0:	e011      	b.n	8003706 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e2:	f7fe fcc9 	bl	8002078 <HAL_GetTick>
 80036e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ea:	f7fe fcc5 	bl	8002078 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b64      	cmp	r3, #100	; 0x64
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e247      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 80036fc:	f7ff fc1e 	bl	8002f3c <LL_RCC_HSE_IsReady>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f1      	bne.n	80036ea <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d04c      	beq.n	80037ac <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003712:	f7ff fdc0 	bl	8003296 <LL_RCC_GetSysClkSource>
 8003716:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003718:	f7ff fea1 	bl	800345e <LL_RCC_PLL_GetMainSource>
 800371c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2b04      	cmp	r3, #4
 8003722:	d005      	beq.n	8003730 <HAL_RCC_OscConfig+0x200>
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	2b0c      	cmp	r3, #12
 8003728:	d10e      	bne.n	8003748 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b02      	cmp	r3, #2
 800372e:	d10b      	bne.n	8003748 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e227      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fc3d 	bl	8002fc0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003746:	e031      	b.n	80037ac <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d019      	beq.n	8003784 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003750:	f7ff fc06 	bl	8002f60 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fe fc90 	bl	8002078 <HAL_GetTick>
 8003758:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800375c:	f7fe fc8c 	bl	8002078 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e20e      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 800376e:	f7ff fc15 	bl	8002f9c <LL_RCC_HSI_IsReady>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0f1      	beq.n	800375c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fc1f 	bl	8002fc0 <LL_RCC_HSI_SetCalibTrimming>
 8003782:	e013      	b.n	80037ac <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003784:	f7ff fbfb 	bl	8002f7e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fe fc76 	bl	8002078 <HAL_GetTick>
 800378c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003790:	f7fe fc72 	bl	8002078 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e1f4      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 80037a2:	f7ff fbfb 	bl	8002f9c <LL_RCC_HSI_IsReady>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f1      	bne.n	8003790 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d106      	bne.n	80037c6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80a3 	beq.w	800390c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d076      	beq.n	80038bc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0310 	and.w	r3, r3, #16
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d046      	beq.n	8003868 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80037da:	f7ff fc7e 	bl	80030da <LL_RCC_LSI1_IsReady>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d113      	bne.n	800380c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80037e4:	f7ff fc57 	bl	8003096 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037e8:	f7fe fc46 	bl	8002078 <HAL_GetTick>
 80037ec:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80037f0:	f7fe fc42 	bl	8002078 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e1c4      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003802:	f7ff fc6a 	bl	80030da <LL_RCC_LSI1_IsReady>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f1      	beq.n	80037f0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800380c:	f7ff fc77 	bl	80030fe <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003810:	f7fe fc32 	bl	8002078 <HAL_GetTick>
 8003814:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003818:	f7fe fc2e 	bl	8002078 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b03      	cmp	r3, #3
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e1b0      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800382a:	f7ff fc8a 	bl	8003142 <LL_RCC_LSI2_IsReady>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f1      	beq.n	8003818 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fc94 	bl	8003166 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800383e:	f7ff fc3b 	bl	80030b8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003842:	f7fe fc19 	bl	8002078 <HAL_GetTick>
 8003846:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800384a:	f7fe fc15 	bl	8002078 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e197      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800385c:	f7ff fc3d 	bl	80030da <LL_RCC_LSI1_IsReady>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f1      	bne.n	800384a <HAL_RCC_OscConfig+0x31a>
 8003866:	e051      	b.n	800390c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003868:	f7ff fc15 	bl	8003096 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800386c:	f7fe fc04 	bl	8002078 <HAL_GetTick>
 8003870:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003872:	e00c      	b.n	800388e <HAL_RCC_OscConfig+0x35e>
 8003874:	20000010 	.word	0x20000010
 8003878:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800387c:	f7fe fbfc 	bl	8002078 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e17e      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800388e:	f7ff fc24 	bl	80030da <LL_RCC_LSI1_IsReady>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f1      	beq.n	800387c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003898:	f7ff fc42 	bl	8003120 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800389e:	f7fe fbeb 	bl	8002078 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e16d      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80038b0:	f7ff fc47 	bl	8003142 <LL_RCC_LSI2_IsReady>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f1      	bne.n	800389e <HAL_RCC_OscConfig+0x36e>
 80038ba:	e027      	b.n	800390c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80038bc:	f7ff fc30 	bl	8003120 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c0:	f7fe fbda 	bl	8002078 <HAL_GetTick>
 80038c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80038c8:	f7fe fbd6 	bl	8002078 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e158      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80038da:	f7ff fc32 	bl	8003142 <LL_RCC_LSI2_IsReady>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f1      	bne.n	80038c8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80038e4:	f7ff fbe8 	bl	80030b8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e8:	f7fe fbc6 	bl	8002078 <HAL_GetTick>
 80038ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80038f0:	f7fe fbc2 	bl	8002078 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e144      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003902:	f7ff fbea 	bl	80030da <LL_RCC_LSI1_IsReady>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f1      	bne.n	80038f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d05b      	beq.n	80039d0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003918:	4b9e      	ldr	r3, [pc, #632]	; (8003b94 <HAL_RCC_OscConfig+0x664>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d114      	bne.n	800394e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003924:	f7ff fa46 	bl	8002db4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003928:	f7fe fba6 	bl	8002078 <HAL_GetTick>
 800392c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003930:	f7fe fba2 	bl	8002078 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e124      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003942:	4b94      	ldr	r3, [pc, #592]	; (8003b94 <HAL_RCC_OscConfig+0x664>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0f0      	beq.n	8003930 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d102      	bne.n	800395c <HAL_RCC_OscConfig+0x42c>
 8003956:	f7ff fb48 	bl	8002fea <LL_RCC_LSE_Enable>
 800395a:	e00c      	b.n	8003976 <HAL_RCC_OscConfig+0x446>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b05      	cmp	r3, #5
 8003962:	d104      	bne.n	800396e <HAL_RCC_OscConfig+0x43e>
 8003964:	f7ff fb63 	bl	800302e <LL_RCC_LSE_EnableBypass>
 8003968:	f7ff fb3f 	bl	8002fea <LL_RCC_LSE_Enable>
 800396c:	e003      	b.n	8003976 <HAL_RCC_OscConfig+0x446>
 800396e:	f7ff fb4d 	bl	800300c <LL_RCC_LSE_Disable>
 8003972:	f7ff fb6d 	bl	8003050 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d014      	beq.n	80039a8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397e:	f7fe fb7b 	bl	8002078 <HAL_GetTick>
 8003982:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003984:	e00a      	b.n	800399c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003986:	f7fe fb77 	bl	8002078 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	f241 3288 	movw	r2, #5000	; 0x1388
 8003994:	4293      	cmp	r3, r2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e0f7      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 800399c:	f7ff fb69 	bl	8003072 <LL_RCC_LSE_IsReady>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0ef      	beq.n	8003986 <HAL_RCC_OscConfig+0x456>
 80039a6:	e013      	b.n	80039d0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7fe fb66 	bl	8002078 <HAL_GetTick>
 80039ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b0:	f7fe fb62 	bl	8002078 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e0e2      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 80039c6:	f7ff fb54 	bl	8003072 <LL_RCC_LSE_IsReady>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1ef      	bne.n	80039b0 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 80d8 	beq.w	8003b8a <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039da:	f7ff fc5c 	bl	8003296 <LL_RCC_GetSysClkSource>
 80039de:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80039e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	f040 80a6 	bne.w	8003b3e <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f003 0203 	and.w	r2, r3, #3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d123      	bne.n	8003a48 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d11c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	0a1b      	lsrs	r3, r3, #8
 8003a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d114      	bne.n	8003a48 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d10d      	bne.n	8003a48 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d106      	bne.n	8003a48 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d054      	beq.n	8003af2 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	2b0c      	cmp	r3, #12
 8003a4c:	d04f      	beq.n	8003aee <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a4e:	f7ff fcc0 	bl	80033d2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a52:	f7fe fb11 	bl	8002078 <HAL_GetTick>
 8003a56:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a5a:	f7fe fb0d 	bl	8002078 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e08f      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1ef      	bne.n	8003a5a <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	4b45      	ldr	r3, [pc, #276]	; (8003b98 <HAL_RCC_OscConfig+0x668>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a8c:	4311      	orrs	r1, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a92:	0212      	lsls	r2, r2, #8
 8003a94:	4311      	orrs	r1, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a9a:	4311      	orrs	r1, r2
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003aa0:	4311      	orrs	r1, r2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aac:	4313      	orrs	r3, r2
 8003aae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ab0:	f7ff fc80 	bl	80033b4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ac4:	f7fe fad8 	bl	8002078 <HAL_GetTick>
 8003ac8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fe fad4 	bl	8002078 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e056      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0ef      	beq.n	8003acc <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aec:	e04d      	b.n	8003b8a <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e04c      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d144      	bne.n	8003b8a <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b00:	f7ff fc58 	bl	80033b4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b14:	f7fe fab0 	bl	8002078 <HAL_GetTick>
 8003b18:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b1c:	f7fe faac 	bl	8002078 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e02e      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ef      	beq.n	8003b1c <HAL_RCC_OscConfig+0x5ec>
 8003b3c:	e025      	b.n	8003b8a <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b0c      	cmp	r3, #12
 8003b42:	d020      	beq.n	8003b86 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b44:	f7ff fc45 	bl	80033d2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b48:	f7fe fa96 	bl	8002078 <HAL_GetTick>
 8003b4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b50:	f7fe fa92 	bl	8002078 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e014      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1ef      	bne.n	8003b50 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8003b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	f023 0303 	bic.w	r3, r3, #3
 8003b82:	60d3      	str	r3, [r2, #12]
 8003b84:	e001      	b.n	8003b8a <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3734      	adds	r7, #52	; 0x34
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd90      	pop	{r4, r7, pc}
 8003b94:	58000400 	.word	0x58000400
 8003b98:	11c1808c 	.word	0x11c1808c

08003b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e12d      	b.n	8003e0c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb0:	4b98      	ldr	r3, [pc, #608]	; (8003e14 <HAL_RCC_ClockConfig+0x278>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d91b      	bls.n	8003bf6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bbe:	4b95      	ldr	r3, [pc, #596]	; (8003e14 <HAL_RCC_ClockConfig+0x278>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f023 0207 	bic.w	r2, r3, #7
 8003bc6:	4993      	ldr	r1, [pc, #588]	; (8003e14 <HAL_RCC_ClockConfig+0x278>)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bce:	f7fe fa53 	bl	8002078 <HAL_GetTick>
 8003bd2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003bd6:	f7fe fa4f 	bl	8002078 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e111      	b.n	8003e0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be8:	4b8a      	ldr	r3, [pc, #552]	; (8003e14 <HAL_RCC_ClockConfig+0x278>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d1ef      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d016      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff fb51 	bl	80032ae <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003c0c:	f7fe fa34 	bl	8002078 <HAL_GetTick>
 8003c10:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c14:	f7fe fa30 	bl	8002078 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e0f2      	b.n	8003e0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003c26:	f7ff fc26 	bl	8003476 <LL_RCC_IsActiveFlag_HPRE>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f1      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d016      	beq.n	8003c6a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fb48 	bl	80032d6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003c46:	f7fe fa17 	bl	8002078 <HAL_GetTick>
 8003c4a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c4e:	f7fe fa13 	bl	8002078 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e0d5      	b.n	8003e0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003c60:	f7ff fc1b 	bl	800349a <LL_RCC_IsActiveFlag_C2HPRE>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f1      	beq.n	8003c4e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d016      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff fb41 	bl	8003302 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003c80:	f7fe f9fa 	bl	8002078 <HAL_GetTick>
 8003c84:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003c88:	f7fe f9f6 	bl	8002078 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e0b8      	b.n	8003e0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003c9a:	f7ff fc11 	bl	80034c0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d0f1      	beq.n	8003c88 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d016      	beq.n	8003cde <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff fb3b 	bl	8003330 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003cba:	f7fe f9dd 	bl	8002078 <HAL_GetTick>
 8003cbe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003cc2:	f7fe f9d9 	bl	8002078 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e09b      	b.n	8003e0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003cd4:	f7ff fc07 	bl	80034e6 <LL_RCC_IsActiveFlag_PPRE1>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0f1      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d017      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fb31 	bl	8003358 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003cf6:	f7fe f9bf 	bl	8002078 <HAL_GetTick>
 8003cfa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003cfe:	f7fe f9bb 	bl	8002078 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e07d      	b.n	8003e0c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003d10:	f7ff fbfb 	bl	800350a <LL_RCC_IsActiveFlag_PPRE2>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f1      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d043      	beq.n	8003dae <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d106      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003d2e:	f7ff f905 	bl	8002f3c <LL_RCC_HSE_IsReady>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d11e      	bne.n	8003d76 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e067      	b.n	8003e0c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d106      	bne.n	8003d52 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003d44:	f7ff fb54 	bl	80033f0 <LL_RCC_PLL_IsReady>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d113      	bne.n	8003d76 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e05c      	b.n	8003e0c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003d5a:	f7ff fa39 	bl	80031d0 <LL_RCC_MSI_IsReady>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d108      	bne.n	8003d76 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e051      	b.n	8003e0c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003d68:	f7ff f918 	bl	8002f9c <LL_RCC_HSI_IsReady>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e04a      	b.n	8003e0c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff fa77 	bl	800326e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d80:	f7fe f97a 	bl	8002078 <HAL_GetTick>
 8003d84:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d86:	e00a      	b.n	8003d9e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d88:	f7fe f976 	bl	8002078 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e036      	b.n	8003e0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d9e:	f7ff fa7a 	bl	8003296 <LL_RCC_GetSysClkSource>
 8003da2:	4602      	mov	r2, r0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d1ec      	bne.n	8003d88 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dae:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <HAL_RCC_ClockConfig+0x278>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d21b      	bcs.n	8003df4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dbc:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <HAL_RCC_ClockConfig+0x278>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f023 0207 	bic.w	r2, r3, #7
 8003dc4:	4913      	ldr	r1, [pc, #76]	; (8003e14 <HAL_RCC_ClockConfig+0x278>)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dcc:	f7fe f954 	bl	8002078 <HAL_GetTick>
 8003dd0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003dd4:	f7fe f950 	bl	8002078 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e012      	b.n	8003e0c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de6:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCC_ClockConfig+0x278>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d1ef      	bne.n	8003dd4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003df4:	f000 f87e 	bl	8003ef4 <HAL_RCC_GetHCLKFreq>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4a07      	ldr	r2, [pc, #28]	; (8003e18 <HAL_RCC_ClockConfig+0x27c>)
 8003dfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003dfe:	f7fe f947 	bl	8002090 <HAL_GetTickPrio>
 8003e02:	4603      	mov	r3, r0
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe f8e9 	bl	8001fdc <HAL_InitTick>
 8003e0a:	4603      	mov	r3, r0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	58004000 	.word	0x58004000
 8003e18:	20000010 	.word	0x20000010

08003e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e1c:	b590      	push	{r4, r7, lr}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e22:	f7ff fa38 	bl	8003296 <LL_RCC_GetSysClkSource>
 8003e26:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003e2e:	f7ff f9f4 	bl	800321a <LL_RCC_MSI_GetRange>
 8003e32:	4603      	mov	r3, r0
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	4a2b      	ldr	r2, [pc, #172]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	e04b      	b.n	8003edc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d102      	bne.n	8003e50 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e4a:	4b28      	ldr	r3, [pc, #160]	; (8003eec <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	e045      	b.n	8003edc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b08      	cmp	r3, #8
 8003e54:	d10a      	bne.n	8003e6c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003e56:	f7ff f841 	bl	8002edc <LL_RCC_HSE_IsEnabledDiv2>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d102      	bne.n	8003e66 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003e60:	4b22      	ldr	r3, [pc, #136]	; (8003eec <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	e03a      	b.n	8003edc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003e66:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	e037      	b.n	8003edc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003e6c:	f7ff faf7 	bl	800345e <LL_RCC_PLL_GetMainSource>
 8003e70:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d003      	beq.n	8003e80 <HAL_RCC_GetSysClockFreq+0x64>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b03      	cmp	r3, #3
 8003e7c:	d003      	beq.n	8003e86 <HAL_RCC_GetSysClockFreq+0x6a>
 8003e7e:	e00d      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003e80:	4b1a      	ldr	r3, [pc, #104]	; (8003eec <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e82:	60bb      	str	r3, [r7, #8]
        break;
 8003e84:	e015      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003e86:	f7ff f829 	bl	8002edc <LL_RCC_HSE_IsEnabledDiv2>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d102      	bne.n	8003e96 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003e90:	4b16      	ldr	r3, [pc, #88]	; (8003eec <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e92:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003e94:	e00d      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003e96:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003e98:	60bb      	str	r3, [r7, #8]
        break;
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003e9c:	f7ff f9bd 	bl	800321a <LL_RCC_MSI_GetRange>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	091b      	lsrs	r3, r3, #4
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	4a0f      	ldr	r2, [pc, #60]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eae:	60bb      	str	r3, [r7, #8]
        break;
 8003eb0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003eb2:	f7ff faaf 	bl	8003414 <LL_RCC_PLL_GetN>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	fb03 f402 	mul.w	r4, r3, r2
 8003ebe:	f7ff fac2 	bl	8003446 <LL_RCC_PLL_GetDivider>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	fbb4 f4f3 	udiv	r4, r4, r3
 8003ecc:	f7ff faaf 	bl	800342e <LL_RCC_PLL_GetR>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	0f5b      	lsrs	r3, r3, #29
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	fbb4 f3f3 	udiv	r3, r4, r3
 8003eda:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003edc:	68fb      	ldr	r3, [r7, #12]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd90      	pop	{r4, r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	08007628 	.word	0x08007628
 8003eec:	00f42400 	.word	0x00f42400
 8003ef0:	01e84800 	.word	0x01e84800

08003ef4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef4:	b598      	push	{r3, r4, r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003ef8:	f7ff ff90 	bl	8003e1c <HAL_RCC_GetSysClockFreq>
 8003efc:	4604      	mov	r4, r0
 8003efe:	f7ff fa3f 	bl	8003380 <LL_RCC_GetAHBPrescaler>
 8003f02:	4603      	mov	r3, r0
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	4a03      	ldr	r2, [pc, #12]	; (8003f18 <HAL_RCC_GetHCLKFreq+0x24>)
 8003f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f10:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	bd98      	pop	{r3, r4, r7, pc}
 8003f18:	080075e8 	.word	0x080075e8

08003f1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2bb0      	cmp	r3, #176	; 0xb0
 8003f28:	d903      	bls.n	8003f32 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003f2a:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2e:	60fb      	str	r3, [r7, #12]
 8003f30:	e007      	b.n	8003f42 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	4a10      	ldr	r2, [pc, #64]	; (8003f7c <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f40:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003f42:	f7ff fa29 	bl	8003398 <LL_RCC_GetAHB4Prescaler>
 8003f46:	4603      	mov	r3, r0
 8003f48:	091b      	lsrs	r3, r3, #4
 8003f4a:	f003 030f 	and.w	r3, r3, #15
 8003f4e:	4a0c      	ldr	r2, [pc, #48]	; (8003f80 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	0c9b      	lsrs	r3, r3, #18
 8003f66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f80c 	bl	8003f88 <RCC_SetFlashLatency>
 8003f70:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	08007628 	.word	0x08007628
 8003f80:	080075e8 	.word	0x080075e8
 8003f84:	431bde83 	.word	0x431bde83

08003f88 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003f88:	b590      	push	{r4, r7, lr}
 8003f8a:	b08f      	sub	sp, #60	; 0x3c
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003f92:	4b24      	ldr	r3, [pc, #144]	; (8004024 <RCC_SetFlashLatency+0x9c>)
 8003f94:	f107 041c 	add.w	r4, r7, #28
 8003f98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003f9e:	4b22      	ldr	r3, [pc, #136]	; (8004028 <RCC_SetFlashLatency+0xa0>)
 8003fa0:	f107 040c 	add.w	r4, r7, #12
 8003fa4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fa6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003faa:	2300      	movs	r3, #0
 8003fac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003fae:	2300      	movs	r3, #0
 8003fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8003fb2:	e013      	b.n	8003fdc <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	3338      	adds	r3, #56	; 0x38
 8003fba:	443b      	add	r3, r7
 8003fbc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d807      	bhi.n	8003fd6 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8003fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	3338      	adds	r3, #56	; 0x38
 8003fcc:	443b      	add	r3, r7
 8003fce:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003fd2:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8003fd4:	e005      	b.n	8003fe2 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	3301      	adds	r3, #1
 8003fda:	633b      	str	r3, [r7, #48]	; 0x30
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d9e8      	bls.n	8003fb4 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003fe2:	4b12      	ldr	r3, [pc, #72]	; (800402c <RCC_SetFlashLatency+0xa4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f023 0207 	bic.w	r2, r3, #7
 8003fea:	4910      	ldr	r1, [pc, #64]	; (800402c <RCC_SetFlashLatency+0xa4>)
 8003fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003ff2:	f7fe f841 	bl	8002078 <HAL_GetTick>
 8003ff6:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003ff8:	e008      	b.n	800400c <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ffa:	f7fe f83d 	bl	8002078 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d901      	bls.n	800400c <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e007      	b.n	800401c <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800400c:	4b07      	ldr	r3, [pc, #28]	; (800402c <RCC_SetFlashLatency+0xa4>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004016:	429a      	cmp	r2, r3
 8004018:	d1ef      	bne.n	8003ffa <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	4618      	mov	r0, r3
 800401e:	373c      	adds	r7, #60	; 0x3c
 8004020:	46bd      	mov	sp, r7
 8004022:	bd90      	pop	{r4, r7, pc}
 8004024:	08007428 	.word	0x08007428
 8004028:	08007438 	.word	0x08007438
 800402c:	58004000 	.word	0x58004000

08004030 <LL_RCC_LSE_IsEnabled>:
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b01      	cmp	r3, #1
 8004042:	d101      	bne.n	8004048 <LL_RCC_LSE_IsEnabled+0x18>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <LL_RCC_LSE_IsEnabled+0x1a>
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <LL_RCC_LSE_IsReady>:
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b02      	cmp	r3, #2
 8004066:	d101      	bne.n	800406c <LL_RCC_LSE_IsReady+0x18>
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <LL_RCC_LSE_IsReady+0x1a>
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <LL_RCC_SetRFWKPClockSource>:
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004084:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004088:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800408c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <LL_RCC_SetSMPSClockSource>:
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80040ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f023 0203 	bic.w	r2, r3, #3
 80040b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4313      	orrs	r3, r2
 80040be:	624b      	str	r3, [r1, #36]	; 0x24
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <LL_RCC_SetSMPSPrescaler>:
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80040d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <LL_RCC_SetUSARTClockSource>:
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80040fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004104:	f023 0203 	bic.w	r2, r3, #3
 8004108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <LL_RCC_SetLPUARTClockSource>:
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004128:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004130:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004134:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <LL_RCC_SetI2CClockSource>:
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004158:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	091b      	lsrs	r3, r3, #4
 8004160:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004164:	43db      	mvns	r3, r3
 8004166:	401a      	ands	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004170:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <LL_RCC_SetLPTIMClockSource>:
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800418e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004192:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	0c1b      	lsrs	r3, r3, #16
 800419a:	041b      	lsls	r3, r3, #16
 800419c:	43db      	mvns	r3, r3
 800419e:	401a      	ands	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	041b      	lsls	r3, r3, #16
 80041a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <LL_RCC_SetRNGClockSource>:
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80041c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80041ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <LL_RCC_SetCLK48ClockSource>:
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80041ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <LL_RCC_SetADCClockSource>:
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800421a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004222:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004226:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4313      	orrs	r3, r2
 800422e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <LL_RCC_SetRTCClockSource>:
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4313      	orrs	r3, r2
 800425a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <LL_RCC_GetRTCClockSource>:
{
 800426a:	b480      	push	{r7}
 800426c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800426e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800427a:	4618      	mov	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <LL_RCC_ForceBackupDomainReset>:
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004290:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800429c:	bf00      	nop
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80042a6:	b480      	push	{r7}
 80042a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80042aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80042be:	bf00      	nop
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b088      	sub	sp, #32
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80042d0:	2300      	movs	r3, #0
 80042d2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80042d4:	2300      	movs	r3, #0
 80042d6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d046      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80042e4:	f7ff ffc1 	bl	800426a <LL_RCC_GetRTCClockSource>
 80042e8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d03c      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80042f4:	f7fe fd5e 	bl	8002db4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d105      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff ff9b 	bl	800423e <LL_RCC_SetRTCClockSource>
 8004308:	e02e      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800430a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004312:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004314:	f7ff ffb6 	bl	8004284 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004318:	f7ff ffc5 	bl	80042a6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800432a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004334:	f7ff fe7c 	bl	8004030 <LL_RCC_LSE_IsEnabled>
 8004338:	4603      	mov	r3, r0
 800433a:	2b01      	cmp	r3, #1
 800433c:	d114      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800433e:	f7fd fe9b 	bl	8002078 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004344:	e00b      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004346:	f7fd fe97 	bl	8002078 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	f241 3288 	movw	r2, #5000	; 0x1388
 8004354:	4293      	cmp	r3, r2
 8004356:	d902      	bls.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	77fb      	strb	r3, [r7, #31]
              break;
 800435c:	e004      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 800435e:	f7ff fe79 	bl	8004054 <LL_RCC_LSE_IsReady>
 8004362:	4603      	mov	r3, r0
 8004364:	2b01      	cmp	r3, #1
 8004366:	d1ee      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004368:	7ffb      	ldrb	r3, [r7, #31]
 800436a:	77bb      	strb	r3, [r7, #30]
 800436c:	e001      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436e:	7ffb      	ldrb	r3, [r7, #31]
 8004370:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d004      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	4618      	mov	r0, r3
 8004384:	f7ff feb6 	bl	80040f4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d004      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fec1 	bl	8004120 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0310 	and.w	r3, r3, #16
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d004      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff fee9 	bl	8004186 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d004      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff fede 	bl	8004186 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d004      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff feb6 	bl	800414c <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d02b      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f4:	d008      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043fe:	d003      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d105      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff fed4 	bl	80041ba <LL_RCC_SetRNGClockSource>
 8004412:	e00a      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	2000      	movs	r0, #0
 8004420:	f7ff fecb 	bl	80041ba <LL_RCC_SetRNGClockSource>
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7ff fede 	bl	80041e6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004432:	d107      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800443e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004442:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800444c:	2b00      	cmp	r3, #0
 800444e:	d011      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff fedc 	bl	8004212 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004462:	d107      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800446e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004472:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d004      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff fdf7 	bl	8004078 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d009      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff fe16 	bl	80040cc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff fdfd 	bl	80040a4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80044aa:	7fbb      	ldrb	r3, [r7, #30]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3720      	adds	r7, #32
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e09f      	b.n	8004606 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fd fc5a 	bl	8001d94 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80044e8:	4b49      	ldr	r3, [pc, #292]	; (8004610 <HAL_RTC_Init+0x15c>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b10      	cmp	r3, #16
 80044f2:	d07e      	beq.n	80045f2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	22ca      	movs	r2, #202	; 0xca
 80044fa:	625a      	str	r2, [r3, #36]	; 0x24
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2253      	movs	r2, #83	; 0x53
 8004502:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f8ab 	bl	8004660 <RTC_EnterInitMode>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	22ff      	movs	r2, #255	; 0xff
 8004516:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2204      	movs	r2, #4
 800451c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	73fb      	strb	r3, [r7, #15]
 8004524:	e067      	b.n	80045f6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6812      	ldr	r2, [r2, #0]
 8004530:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004538:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6899      	ldr	r1, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	68d2      	ldr	r2, [r2, #12]
 8004560:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6919      	ldr	r1, [r3, #16]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	041a      	lsls	r2, r3, #16
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	430a      	orrs	r2, r1
 8004574:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004584:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0202 	bic.w	r2, r2, #2
 8004594:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69da      	ldr	r2, [r3, #28]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d113      	bne.n	80045e4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f829 	bl	8004614 <HAL_RTC_WaitForSynchro>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00d      	beq.n	80045e4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	22ff      	movs	r2, #255	; 0xff
 80045ce:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2204      	movs	r2, #4
 80045d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e010      	b.n	8004606 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	22ff      	movs	r2, #255	; 0xff
 80045ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	73fb      	strb	r3, [r7, #15]
 80045f0:	e001      	b.n	80045f6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80045f2:	2300      	movs	r3, #0
 80045f4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80045f6:	7bfb      	ldrb	r3, [r7, #15]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d103      	bne.n	8004604 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8004604:	7bfb      	ldrb	r3, [r7, #15]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	40002800 	.word	0x40002800

08004614 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68da      	ldr	r2, [r3, #12]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800462a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800462c:	f7fd fd24 	bl	8002078 <HAL_GetTick>
 8004630:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004632:	e009      	b.n	8004648 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004634:	f7fd fd20 	bl	8002078 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004642:	d901      	bls.n	8004648 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e007      	b.n	8004658 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0ee      	beq.n	8004634 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004672:	2b00      	cmp	r3, #0
 8004674:	d119      	bne.n	80046aa <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f04f 32ff 	mov.w	r2, #4294967295
 800467e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004680:	f7fd fcfa 	bl	8002078 <HAL_GetTick>
 8004684:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004686:	e009      	b.n	800469c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004688:	f7fd fcf6 	bl	8002078 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004696:	d901      	bls.n	800469c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e007      	b.n	80046ac <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0ee      	beq.n	8004688 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e0a8      	b.n	8004820 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2202      	movs	r2, #2
 80046da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	22ca      	movs	r2, #202	; 0xca
 80046e4:	625a      	str	r2, [r3, #36]	; 0x24
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2253      	movs	r2, #83	; 0x53
 80046ec:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d020      	beq.n	800473e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80046fc:	f7fd fcbc 	bl	8002078 <HAL_GetTick>
 8004700:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004702:	e015      	b.n	8004730 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004704:	f7fd fcb8 	bl	8002078 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004712:	d90d      	bls.n	8004730 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	22ff      	movs	r2, #255	; 0xff
 800471a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2203      	movs	r2, #3
 8004720:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e077      	b.n	8004820 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e2      	bne.n	8004704 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800474c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	b2da      	uxtb	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800475e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004760:	f7fd fc8a 	bl	8002078 <HAL_GetTick>
 8004764:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004766:	e015      	b.n	8004794 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004768:	f7fd fc86 	bl	8002078 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004776:	d90d      	bls.n	8004794 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	22ff      	movs	r2, #255	; 0xff
 800477e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2203      	movs	r2, #3
 8004784:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e045      	b.n	8004820 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0e2      	beq.n	8004768 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0207 	bic.w	r2, r2, #7
 80047b8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6899      	ldr	r1, [r3, #8]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80047ca:	4b17      	ldr	r3, [pc, #92]	; (8004828 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80047cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047d0:	4a15      	ldr	r2, [pc, #84]	; (8004828 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80047d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80047da:	4b13      	ldr	r3, [pc, #76]	; (8004828 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a12      	ldr	r2, [pc, #72]	; (8004828 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80047e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047e4:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047f4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004804:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	22ff      	movs	r2, #255	; 0xff
 800480c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	58000800 	.word	0x58000800

0800482c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 3020 	ldrb.w	r3, [r3, #32]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800483e:	2302      	movs	r3, #2
 8004840:	e04d      	b.n	80048de <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	22ca      	movs	r2, #202	; 0xca
 8004858:	625a      	str	r2, [r3, #36]	; 0x24
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2253      	movs	r2, #83	; 0x53
 8004860:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004870:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004880:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8004882:	f7fd fbf9 	bl	8002078 <HAL_GetTick>
 8004886:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004888:	e015      	b.n	80048b6 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800488a:	f7fd fbf5 	bl	8002078 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004898:	d90d      	bls.n	80048b6 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	22ff      	movs	r2, #255	; 0xff
 80048a0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2203      	movs	r2, #3
 80048a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e013      	b.n	80048de <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0e2      	beq.n	800488a <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	22ff      	movs	r2, #255	; 0xff
 80048ca:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80048e6:	b5b0      	push	{r4, r5, r7, lr}
 80048e8:	b0ce      	sub	sp, #312	; 0x138
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	4605      	mov	r5, r0
 80048ee:	460c      	mov	r4, r1
 80048f0:	4610      	mov	r0, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80048f8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80048fc:	462a      	mov	r2, r5
 80048fe:	701a      	strb	r2, [r3, #0]
 8004900:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004904:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004908:	4622      	mov	r2, r4
 800490a:	801a      	strh	r2, [r3, #0]
 800490c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004910:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8004914:	4602      	mov	r2, r0
 8004916:	801a      	strh	r2, [r3, #0]
 8004918:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800491c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8004920:	460a      	mov	r2, r1
 8004922:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8004924:	f107 0310 	add.w	r3, r7, #16
 8004928:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800492c:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004930:	3308      	adds	r3, #8
 8004932:	f107 0210 	add.w	r2, r7, #16
 8004936:	4413      	add	r3, r2
 8004938:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800493c:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004940:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004944:	4413      	add	r3, r2
 8004946:	3309      	adds	r3, #9
 8004948:	f107 0210 	add.w	r2, r7, #16
 800494c:	4413      	add	r3, r2
 800494e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004952:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004956:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800495e:	2300      	movs	r3, #0
 8004960:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8004964:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004968:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800496c:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8004970:	7812      	ldrb	r2, [r2, #0]
 8004972:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004974:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004978:	3301      	adds	r3, #1
 800497a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800497e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004982:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004986:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800498a:	8812      	ldrh	r2, [r2, #0]
 800498c:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8004990:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004994:	3302      	adds	r3, #2
 8004996:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800499a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800499e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80049a2:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80049a6:	8812      	ldrh	r2, [r2, #0]
 80049a8:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80049ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049b0:	3302      	adds	r3, #2
 80049b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80049b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80049ba:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80049be:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80049c2:	7812      	ldrb	r2, [r2, #0]
 80049c4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80049c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049ca:	3301      	adds	r3, #1
 80049cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80049d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80049d4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80049d8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80049da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049de:	3301      	adds	r3, #1
 80049e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80049e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80049e8:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80049ec:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80049ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049f2:	3301      	adds	r3, #1
 80049f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80049f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80049fc:	3308      	adds	r3, #8
 80049fe:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004a02:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fc21 	bl	800524e <Osal_MemCpy>
    index_input += Local_Name_Length;
 8004a0c:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004a10:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004a14:	4413      	add	r3, r2
 8004a16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8004a1a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004a1e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004a22:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004a24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a28:	3301      	adds	r3, #1
 8004a2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8004a2e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004a32:	3301      	adds	r3, #1
 8004a34:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004a38:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 fc06 	bl	800524e <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8004a42:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004a46:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8004a50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a54:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8004a58:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004a5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a5e:	3302      	adds	r3, #2
 8004a60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8004a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a68:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8004a6c:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8004a6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a72:	3302      	adds	r3, #2
 8004a74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004a78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004a7c:	2218      	movs	r2, #24
 8004a7e:	2100      	movs	r1, #0
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fbf4 	bl	800526e <Osal_MemSet>
  rq.ogf = 0x3f;
 8004a86:	233f      	movs	r3, #63	; 0x3f
 8004a88:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8004a8c:	2383      	movs	r3, #131	; 0x83
 8004a8e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004a92:	f107 0310 	add.w	r3, r7, #16
 8004a96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004a9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004aa2:	f107 030f 	add.w	r3, r7, #15
 8004aa6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004ab0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fe50 	bl	800575c <hci_send_req>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	da01      	bge.n	8004ac6 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8004ac2:	23ff      	movs	r3, #255	; 0xff
 8004ac4:	e004      	b.n	8004ad0 <aci_gap_set_discoverable+0x1ea>
  return status;
 8004ac6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004aca:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004ace:	781b      	ldrb	r3, [r3, #0]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bdb0      	pop	{r4, r5, r7, pc}

08004ada <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8004ada:	b590      	push	{r4, r7, lr}
 8004adc:	b0cd      	sub	sp, #308	; 0x134
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	4608      	mov	r0, r1
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004aea:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004af8:	4622      	mov	r2, r4
 8004afa:	701a      	strb	r2, [r3, #0]
 8004afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b00:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004b04:	4602      	mov	r2, r0
 8004b06:	701a      	strb	r2, [r3, #0]
 8004b08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b0c:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8004b10:	460a      	mov	r2, r1
 8004b12:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8004b14:	f107 0310 	add.w	r3, r7, #16
 8004b18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004b1c:	f107 0308 	add.w	r3, r7, #8
 8004b20:	2207      	movs	r2, #7
 8004b22:	2100      	movs	r1, #0
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fba2 	bl	800526e <Osal_MemSet>
  int index_input = 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8004b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b34:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b38:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004b3c:	7812      	ldrb	r2, [r2, #0]
 8004b3e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004b40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b44:	3301      	adds	r3, #1
 8004b46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8004b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b52:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004b56:	7812      	ldrb	r2, [r2, #0]
 8004b58:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004b5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b5e:	3301      	adds	r3, #1
 8004b60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8004b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b68:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b6c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8004b70:	7812      	ldrb	r2, [r2, #0]
 8004b72:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004b74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b78:	3301      	adds	r3, #1
 8004b7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004b7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b82:	2218      	movs	r2, #24
 8004b84:	2100      	movs	r1, #0
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 fb71 	bl	800526e <Osal_MemSet>
  rq.ogf = 0x3f;
 8004b8c:	233f      	movs	r3, #63	; 0x3f
 8004b8e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8004b92:	238a      	movs	r3, #138	; 0x8a
 8004b94:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004b98:	f107 0310 	add.w	r3, r7, #16
 8004b9c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004ba0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ba4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004ba8:	f107 0308 	add.w	r3, r7, #8
 8004bac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8004bb0:	2307      	movs	r3, #7
 8004bb2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004bb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004bba:	2100      	movs	r1, #0
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fdcd 	bl	800575c <hci_send_req>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	da01      	bge.n	8004bcc <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8004bc8:	23ff      	movs	r3, #255	; 0xff
 8004bca:	e02e      	b.n	8004c2a <aci_gap_init+0x150>
  if ( resp.Status )
 8004bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bd0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d005      	beq.n	8004be6 <aci_gap_init+0x10c>
    return resp.Status;
 8004bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bde:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	e021      	b.n	8004c2a <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8004be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004bee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8004c00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c04:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c08:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004c12:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8004c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c18:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004c1c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004c26:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd90      	pop	{r4, r7, pc}

08004c34 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b0cc      	sub	sp, #304	; 0x130
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c44:	6019      	str	r1, [r3, #0]
 8004c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004c4e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8004c50:	f107 0310 	add.w	r3, r7, #16
 8004c54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c5c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004c60:	2200      	movs	r2, #0
 8004c62:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8004c6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c72:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004c76:	7812      	ldrb	r2, [r2, #0]
 8004c78:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004c7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c7e:	3301      	adds	r3, #1
 8004c80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8004c84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c88:	1c58      	adds	r0, r3, #1
 8004c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004c92:	781a      	ldrb	r2, [r3, #0]
 8004c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c9c:	6819      	ldr	r1, [r3, #0]
 8004c9e:	f000 fad6 	bl	800524e <Osal_MemCpy>
  index_input += AdvDataLen;
 8004ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004cb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cba:	2218      	movs	r2, #24
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fad5 	bl	800526e <Osal_MemSet>
  rq.ogf = 0x3f;
 8004cc4:	233f      	movs	r3, #63	; 0x3f
 8004cc6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8004cca:	238e      	movs	r3, #142	; 0x8e
 8004ccc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004cd0:	f107 0310 	add.w	r3, r7, #16
 8004cd4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004cd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004cdc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004ce0:	f107 030f 	add.w	r3, r7, #15
 8004ce4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004cee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 fd31 	bl	800575c <hci_send_req>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	da01      	bge.n	8004d04 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8004d00:	23ff      	movs	r3, #255	; 0xff
 8004d02:	e004      	b.n	8004d0e <aci_gap_update_adv_data+0xda>
  return status;
 8004d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d08:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004d0c:	781b      	ldrb	r3, [r3, #0]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <aci_gap_delete_ad_type>:

tBleStatus aci_gap_delete_ad_type( uint8_t ADType )
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b0cc      	sub	sp, #304	; 0x130
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4602      	mov	r2, r0
 8004d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d24:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004d28:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_delete_ad_type_cp0 *cp0 = (aci_gap_delete_ad_type_cp0*)(cmd_buffer);
 8004d2a:	f107 0310 	add.w	r3, r7, #16
 8004d2e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d36:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ADType = ADType;
 8004d44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d48:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d4c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004d50:	7812      	ldrb	r2, [r2, #0]
 8004d52:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004d54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d58:	3301      	adds	r3, #1
 8004d5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004d5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d62:	2218      	movs	r2, #24
 8004d64:	2100      	movs	r1, #0
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fa81 	bl	800526e <Osal_MemSet>
  rq.ogf = 0x3f;
 8004d6c:	233f      	movs	r3, #63	; 0x3f
 8004d6e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08f;
 8004d72:	238f      	movs	r3, #143	; 0x8f
 8004d74:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004d78:	f107 0310 	add.w	r3, r7, #16
 8004d7c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004d80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d84:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004d88:	f107 030f 	add.w	r3, r7, #15
 8004d8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004d90:	2301      	movs	r3, #1
 8004d92:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004d96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fcdd 	bl	800575c <hci_send_req>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	da01      	bge.n	8004dac <aci_gap_delete_ad_type+0x94>
    return BLE_STATUS_TIMEOUT;
 8004da8:	23ff      	movs	r3, #255	; 0xff
 8004daa:	e004      	b.n	8004db6 <aci_gap_delete_ad_type+0x9e>
  return status;
 8004dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004db4:	781b      	ldrb	r3, [r3, #0]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b088      	sub	sp, #32
 8004dc4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004dca:	f107 0308 	add.w	r3, r7, #8
 8004dce:	2218      	movs	r2, #24
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fa4b 	bl	800526e <Osal_MemSet>
  rq.ogf = 0x3f;
 8004dd8:	233f      	movs	r3, #63	; 0x3f
 8004dda:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8004ddc:	f240 1301 	movw	r3, #257	; 0x101
 8004de0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004de2:	1dfb      	adds	r3, r7, #7
 8004de4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004de6:	2301      	movs	r3, #1
 8004de8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004dea:	f107 0308 	add.w	r3, r7, #8
 8004dee:	2100      	movs	r1, #0
 8004df0:	4618      	mov	r0, r3
 8004df2:	f000 fcb3 	bl	800575c <hci_send_req>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	da01      	bge.n	8004e00 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8004dfc:	23ff      	movs	r3, #255	; 0xff
 8004dfe:	e000      	b.n	8004e02 <aci_gatt_init+0x42>
  return status;
 8004e00:	79fb      	ldrb	r3, [r7, #7]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3720      	adds	r7, #32
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8004e0a:	b5b0      	push	{r4, r5, r7, lr}
 8004e0c:	b0cc      	sub	sp, #304	; 0x130
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	4605      	mov	r5, r0
 8004e12:	460c      	mov	r4, r1
 8004e14:	4610      	mov	r0, r2
 8004e16:	4619      	mov	r1, r3
 8004e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004e20:	462a      	mov	r2, r5
 8004e22:	801a      	strh	r2, [r3, #0]
 8004e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	801a      	strh	r2, [r3, #0]
 8004e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e34:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8004e38:	4602      	mov	r2, r0
 8004e3a:	701a      	strb	r2, [r3, #0]
 8004e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e40:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004e44:	460a      	mov	r2, r1
 8004e46:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8004e48:	f107 0310 	add.w	r3, r7, #16
 8004e4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e54:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004e58:	2200      	movs	r2, #0
 8004e5a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8004e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e6a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004e6e:	8812      	ldrh	r2, [r2, #0]
 8004e70:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004e72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e76:	3302      	adds	r3, #2
 8004e78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8004e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e80:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e84:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e88:	8812      	ldrh	r2, [r2, #0]
 8004e8a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8004e8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e90:	3302      	adds	r3, #2
 8004e92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8004e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e9a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e9e:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8004ea2:	7812      	ldrb	r2, [r2, #0]
 8004ea4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004ea6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004eaa:	3301      	adds	r3, #1
 8004eac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8004eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eb4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004eb8:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8004ebc:	7812      	ldrb	r2, [r2, #0]
 8004ebe:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004ec0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8004eca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ece:	1d98      	adds	r0, r3, #6
 8004ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004ee0:	f000 f9b5 	bl	800524e <Osal_MemCpy>
  index_input += Char_Value_Length;
 8004ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004ef8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004efc:	2218      	movs	r2, #24
 8004efe:	2100      	movs	r1, #0
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 f9b4 	bl	800526e <Osal_MemSet>
  rq.ogf = 0x3f;
 8004f06:	233f      	movs	r3, #63	; 0x3f
 8004f08:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8004f0c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8004f10:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004f14:	f107 0310 	add.w	r3, r7, #16
 8004f18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004f1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004f24:	f107 030f 	add.w	r3, r7, #15
 8004f28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004f32:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f36:	2100      	movs	r1, #0
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fc0f 	bl	800575c <hci_send_req>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	da01      	bge.n	8004f48 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8004f44:	23ff      	movs	r3, #255	; 0xff
 8004f46:	e004      	b.n	8004f52 <aci_gatt_update_char_value+0x148>
  return status;
 8004f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f4c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004f50:	781b      	ldrb	r3, [r3, #0]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bdb0      	pop	{r4, r5, r7, pc}

08004f5c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b0cc      	sub	sp, #304	; 0x130
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f70:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004f74:	4602      	mov	r2, r0
 8004f76:	701a      	strb	r2, [r3, #0]
 8004f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f7c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004f80:	460a      	mov	r2, r1
 8004f82:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8004f84:	f107 0310 	add.w	r3, r7, #16
 8004f88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f90:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004f94:	2200      	movs	r2, #0
 8004f96:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8004f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fa2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fa6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004faa:	7812      	ldrb	r2, [r2, #0]
 8004fac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004fae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8004fb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fbc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fc0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004fc4:	7812      	ldrb	r2, [r2, #0]
 8004fc6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004fc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fcc:	3301      	adds	r3, #1
 8004fce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8004fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd6:	1c98      	adds	r0, r3, #2
 8004fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fdc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004fe0:	781a      	ldrb	r2, [r3, #0]
 8004fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fea:	6819      	ldr	r1, [r3, #0]
 8004fec:	f000 f92f 	bl	800524e <Osal_MemCpy>
  index_input += Length;
 8004ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004ffe:	4413      	add	r3, r2
 8005000:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005004:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005008:	2218      	movs	r2, #24
 800500a:	2100      	movs	r1, #0
 800500c:	4618      	mov	r0, r3
 800500e:	f000 f92e 	bl	800526e <Osal_MemSet>
  rq.ogf = 0x3f;
 8005012:	233f      	movs	r3, #63	; 0x3f
 8005014:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8005018:	230c      	movs	r3, #12
 800501a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800501e:	f107 0310 	add.w	r3, r7, #16
 8005022:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005026:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800502a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800502e:	f107 030f 	add.w	r3, r7, #15
 8005032:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005036:	2301      	movs	r3, #1
 8005038:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800503c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005040:	2100      	movs	r1, #0
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fb8a 	bl	800575c <hci_send_req>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	da01      	bge.n	8005052 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800504e:	23ff      	movs	r3, #255	; 0xff
 8005050:	e004      	b.n	800505c <aci_hal_write_config_data+0x100>
  return status;
 8005052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005056:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800505a:	781b      	ldrb	r3, [r3, #0]
}
 800505c:	4618      	mov	r0, r3
 800505e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b0cc      	sub	sp, #304	; 0x130
 800506a:	af00      	add	r7, sp, #0
 800506c:	4602      	mov	r2, r0
 800506e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005072:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005076:	701a      	strb	r2, [r3, #0]
 8005078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800507c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8005080:	460a      	mov	r2, r1
 8005082:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8005084:	f107 0310 	add.w	r3, r7, #16
 8005088:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800508c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005090:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005094:	2200      	movs	r2, #0
 8005096:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005098:	2300      	movs	r3, #0
 800509a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800509e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050a6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80050aa:	7812      	ldrb	r2, [r2, #0]
 80050ac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80050ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050b2:	3301      	adds	r3, #1
 80050b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80050b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050c0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80050c4:	7812      	ldrb	r2, [r2, #0]
 80050c6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80050c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050cc:	3301      	adds	r3, #1
 80050ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80050d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050d6:	2218      	movs	r2, #24
 80050d8:	2100      	movs	r1, #0
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 f8c7 	bl	800526e <Osal_MemSet>
  rq.ogf = 0x3f;
 80050e0:	233f      	movs	r3, #63	; 0x3f
 80050e2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80050e6:	230f      	movs	r3, #15
 80050e8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80050ec:	f107 0310 	add.w	r3, r7, #16
 80050f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80050f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80050fc:	f107 030f 	add.w	r3, r7, #15
 8005100:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005104:	2301      	movs	r3, #1
 8005106:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800510a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800510e:	2100      	movs	r1, #0
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fb23 	bl	800575c <hci_send_req>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	da01      	bge.n	8005120 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800511c:	23ff      	movs	r3, #255	; 0xff
 800511e:	e004      	b.n	800512a <aci_hal_set_tx_power_level+0xc4>
  return status;
 8005120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005124:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005128:	781b      	ldrb	r3, [r3, #0]
}
 800512a:	4618      	mov	r0, r3
 800512c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800513e:	f107 0308 	add.w	r3, r7, #8
 8005142:	2218      	movs	r2, #24
 8005144:	2100      	movs	r1, #0
 8005146:	4618      	mov	r0, r3
 8005148:	f000 f891 	bl	800526e <Osal_MemSet>
  rq.ogf = 0x03;
 800514c:	2303      	movs	r3, #3
 800514e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8005150:	2303      	movs	r3, #3
 8005152:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005154:	1dfb      	adds	r3, r7, #7
 8005156:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005158:	2301      	movs	r3, #1
 800515a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800515c:	f107 0308 	add.w	r3, r7, #8
 8005160:	2100      	movs	r1, #0
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fafa 	bl	800575c <hci_send_req>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	da01      	bge.n	8005172 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800516e:	23ff      	movs	r3, #255	; 0xff
 8005170:	e000      	b.n	8005174 <hci_reset+0x40>
  return status;
 8005172:	79fb      	ldrb	r3, [r7, #7]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3720      	adds	r7, #32
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <hci_le_set_scan_response_data>:
  return status;
}

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b0cc      	sub	sp, #304	; 0x130
 8005180:	af00      	add	r7, sp, #0
 8005182:	4602      	mov	r2, r0
 8005184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005188:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518c:	6019      	str	r1, [r3, #0]
 800518e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005192:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005196:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 8005198:	f107 0310 	add.w	r3, r7, #16
 800519c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80051a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80051a8:	2200      	movs	r2, #0
 80051aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80051ac:	2300      	movs	r3, #0
 80051ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 80051b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051ba:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80051be:	7812      	ldrb	r2, [r2, #0]
 80051c0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80051c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80051c6:	3301      	adds	r3, #1
 80051c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 80051cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051d0:	1c58      	adds	r0, r3, #1
 80051d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051da:	221f      	movs	r2, #31
 80051dc:	6819      	ldr	r1, [r3, #0]
 80051de:	f000 f836 	bl	800524e <Osal_MemCpy>
  index_input += 31;
 80051e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80051e6:	331f      	adds	r3, #31
 80051e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80051ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051f0:	2218      	movs	r2, #24
 80051f2:	2100      	movs	r1, #0
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 f83a 	bl	800526e <Osal_MemSet>
  rq.ogf = 0x08;
 80051fa:	2308      	movs	r3, #8
 80051fc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 8005200:	2309      	movs	r3, #9
 8005202:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005206:	f107 0310 	add.w	r3, r7, #16
 800520a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800520e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005212:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005216:	f107 030f 	add.w	r3, r7, #15
 800521a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800521e:	2301      	movs	r3, #1
 8005220:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005224:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005228:	2100      	movs	r1, #0
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fa96 	bl	800575c <hci_send_req>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	da01      	bge.n	800523a <hci_le_set_scan_response_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8005236:	23ff      	movs	r3, #255	; 0xff
 8005238:	e004      	b.n	8005244 <hci_le_set_scan_response_data+0xc8>
  return status;
 800523a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005242:	781b      	ldrb	r3, [r3, #0]
}
 8005244:	4618      	mov	r0, r3
 8005246:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f002 f8ba 	bl	80073d8 <memcpy>
 8005264:	4603      	mov	r3, r0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b084      	sub	sp, #16
 8005272:	af00      	add	r7, sp, #0
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	68b9      	ldr	r1, [r7, #8]
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f002 f87e 	bl	8007380 <memset>
 8005284:	4603      	mov	r3, r0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800528e:	b480      	push	{r7}
 8005290:	af00      	add	r7, sp, #0
  return;
 8005292:	bf00      	nop
}
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
  return;
 80052a0:	bf00      	nop
}
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80052aa:	b480      	push	{r7}
 80052ac:	af00      	add	r7, sp, #0
  return;
 80052ae:	bf00      	nop
}
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  return;
 80052bc:	bf00      	nop
}
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80052c6:	b480      	push	{r7}
 80052c8:	af00      	add	r7, sp, #0
  return;
 80052ca:	bf00      	nop
}
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  return;
 80052d8:	bf00      	nop
}
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80052e2:	b480      	push	{r7}
 80052e4:	af00      	add	r7, sp, #0
  return;
 80052e6:	bf00      	nop
}
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  return;
 80052f4:	bf00      	nop
}
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80052fe:	b480      	push	{r7}
 8005300:	af00      	add	r7, sp, #0
  return;
 8005302:	bf00      	nop
}
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  return;
 8005310:	bf00      	nop
}
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800531a:	b480      	push	{r7}
 800531c:	af00      	add	r7, sp, #0
  return;
 800531e:	bf00      	nop
}
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  return;
 800532c:	bf00      	nop
}
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8005336:	b480      	push	{r7}
 8005338:	af00      	add	r7, sp, #0
  return;
 800533a:	bf00      	nop
}
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  return;
 8005348:	bf00      	nop
}
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8005352:	b480      	push	{r7}
 8005354:	af00      	add	r7, sp, #0
  return;
 8005356:	bf00      	nop
}
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  return;
 8005364:	bf00      	nop
}
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800536e:	b480      	push	{r7}
 8005370:	af00      	add	r7, sp, #0
  return;
 8005372:	bf00      	nop
}
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800537c:	b480      	push	{r7}
 800537e:	af00      	add	r7, sp, #0
  return;
 8005380:	bf00      	nop
}
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
	...

0800538c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8005390:	4b04      	ldr	r3, [pc, #16]	; (80053a4 <SVCCTL_Init+0x18>)
 8005392:	2200      	movs	r2, #0
 8005394:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8005396:	4b04      	ldr	r3, [pc, #16]	; (80053a8 <SVCCTL_Init+0x1c>)
 8005398:	2200      	movs	r2, #0
 800539a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800539c:	f000 f806 	bl	80053ac <SVCCTL_SvcInit>

  return;
 80053a0:	bf00      	nop
}
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20000024 	.word	0x20000024
 80053a8:	20000044 	.word	0x20000044

080053ac <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  BAS_Init();
 80053b0:	f7ff ff6d 	bl	800528e <BAS_Init>

  BLS_Init();
 80053b4:	f7ff ff72 	bl	800529c <BLS_Init>

  CRS_STM_Init();
 80053b8:	f7ff ff77 	bl	80052aa <CRS_STM_Init>

  DIS_Init();
 80053bc:	f7ff ff7c 	bl	80052b8 <DIS_Init>

  EDS_STM_Init();
 80053c0:	f7ff ff81 	bl	80052c6 <EDS_STM_Init>

  HIDS_Init();
 80053c4:	f7ff ff86 	bl	80052d4 <HIDS_Init>

  HRS_Init();
 80053c8:	f7ff ff8b 	bl	80052e2 <HRS_Init>

  HTS_Init();
 80053cc:	f7ff ff90 	bl	80052f0 <HTS_Init>

  IAS_Init();
 80053d0:	f7ff ff95 	bl	80052fe <IAS_Init>

  LLS_Init();
 80053d4:	f7ff ff9a 	bl	800530c <LLS_Init>

  TPS_Init();
 80053d8:	f7ff ff9f 	bl	800531a <TPS_Init>

  MOTENV_STM_Init();
 80053dc:	f7ff ffa4 	bl	8005328 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80053e0:	f7ff ffa9 	bl	8005336 <P2PS_STM_Init>

  ZDD_STM_Init();
 80053e4:	f7ff ffae 	bl	8005344 <ZDD_STM_Init>

  OTAS_STM_Init();
 80053e8:	f7ff ffb3 	bl	8005352 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80053ec:	f7ff ffbf 	bl	800536e <BVOPUS_STM_Init>

  MESH_Init();
 80053f0:	f7ff ffb6 	bl	8005360 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80053f4:	f7ff ffc2 	bl	800537c <SVCCTL_InitCustomSvc>
  
  return;
 80053f8:	bf00      	nop
}
 80053fa:	bd80      	pop	{r7, pc}

080053fc <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3301      	adds	r3, #1
 8005408:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800540a:	2300      	movs	r3, #0
 800540c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2bff      	cmp	r3, #255	; 0xff
 8005414:	d125      	bne.n	8005462 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	3302      	adds	r3, #2
 800541a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	b29b      	uxth	r3, r3
 8005422:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005426:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800542a:	d118      	bne.n	800545e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800542c:	2300      	movs	r3, #0
 800542e:	757b      	strb	r3, [r7, #21]
 8005430:	e00d      	b.n	800544e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8005432:	7d7b      	ldrb	r3, [r7, #21]
 8005434:	4a1a      	ldr	r2, [pc, #104]	; (80054a0 <SVCCTL_UserEvtRx+0xa4>)
 8005436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	4798      	blx	r3
 800543e:	4603      	mov	r3, r0
 8005440:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8005442:	7dfb      	ldrb	r3, [r7, #23]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d108      	bne.n	800545a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005448:	7d7b      	ldrb	r3, [r7, #21]
 800544a:	3301      	adds	r3, #1
 800544c:	757b      	strb	r3, [r7, #21]
 800544e:	4b14      	ldr	r3, [pc, #80]	; (80054a0 <SVCCTL_UserEvtRx+0xa4>)
 8005450:	7f1b      	ldrb	r3, [r3, #28]
 8005452:	7d7a      	ldrb	r2, [r7, #21]
 8005454:	429a      	cmp	r2, r3
 8005456:	d3ec      	bcc.n	8005432 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8005458:	e002      	b.n	8005460 <SVCCTL_UserEvtRx+0x64>
              break;
 800545a:	bf00      	nop
          break;
 800545c:	e000      	b.n	8005460 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800545e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8005460:	e000      	b.n	8005464 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8005462:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8005464:	7dfb      	ldrb	r3, [r7, #23]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d00f      	beq.n	800548a <SVCCTL_UserEvtRx+0x8e>
 800546a:	2b02      	cmp	r3, #2
 800546c:	dc10      	bgt.n	8005490 <SVCCTL_UserEvtRx+0x94>
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <SVCCTL_UserEvtRx+0x7c>
 8005472:	2b01      	cmp	r3, #1
 8005474:	d006      	beq.n	8005484 <SVCCTL_UserEvtRx+0x88>
 8005476:	e00b      	b.n	8005490 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 ff91 	bl	80063a0 <SVCCTL_App_Notification>
 800547e:	4603      	mov	r3, r0
 8005480:	75bb      	strb	r3, [r7, #22]
      break;
 8005482:	e008      	b.n	8005496 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8005484:	2301      	movs	r3, #1
 8005486:	75bb      	strb	r3, [r7, #22]
      break;
 8005488:	e005      	b.n	8005496 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800548a:	2300      	movs	r3, #0
 800548c:	75bb      	strb	r3, [r7, #22]
      break;
 800548e:	e002      	b.n	8005496 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8005490:	2301      	movs	r3, #1
 8005492:	75bb      	strb	r3, [r7, #22]
      break;
 8005494:	bf00      	nop
  }

  return (return_status);
 8005496:	7dbb      	ldrb	r3, [r7, #22]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	20000024 	.word	0x20000024

080054a4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80054ac:	f107 030c 	add.w	r3, r7, #12
 80054b0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	212e      	movs	r1, #46	; 0x2e
 80054bc:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80054c0:	f000 fae8 	bl	8005a94 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	330b      	adds	r3, #11
 80054c8:	78db      	ldrb	r3, [r3, #3]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3720      	adds	r7, #32
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b088      	sub	sp, #32
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80054da:	f107 030c 	add.w	r3, r7, #12
 80054de:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	210f      	movs	r1, #15
 80054ea:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80054ee:	f000 fad1 	bl	8005a94 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	330b      	adds	r3, #11
 80054f6:	78db      	ldrb	r3, [r3, #3]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3720      	adds	r7, #32
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005508:	f107 030c 	add.w	r3, r7, #12
 800550c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	2110      	movs	r1, #16
 8005514:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8005518:	f000 fabc 	bl	8005a94 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	330b      	adds	r3, #11
 8005520:	78db      	ldrb	r3, [r3, #3]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800552c:	b480      	push	{r7}
 800552e:	b08b      	sub	sp, #44	; 0x2c
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8005534:	2300      	movs	r3, #0
 8005536:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8005538:	2300      	movs	r3, #0
 800553a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8005548:	2300      	movs	r3, #0
 800554a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800554c:	2300      	movs	r3, #0
 800554e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8005554:	4b4a      	ldr	r3, [pc, #296]	; (8005680 <SHCI_GetWirelessFwInfo+0x154>)
 8005556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005558:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800555c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005566:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a44      	ldr	r2, [pc, #272]	; (8005684 <SHCI_GetWirelessFwInfo+0x158>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d10f      	bne.n	8005598 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	69db      	ldr	r3, [r3, #28]
 8005588:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	617b      	str	r3, [r7, #20]
 8005596:	e01a      	b.n	80055ce <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80055a0:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 80055a4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80055ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d0:	0e1b      	lsrs	r3, r3, #24
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	0c1b      	lsrs	r3, r3, #16
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	0a1b      	lsrs	r3, r3, #8
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	091b      	lsrs	r3, r3, #4
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	b2da      	uxtb	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800560a:	6a3b      	ldr	r3, [r7, #32]
 800560c:	0e1b      	lsrs	r3, r3, #24
 800560e:	b2da      	uxtb	r2, r3
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	0c1b      	lsrs	r3, r3, #16
 8005618:	b2da      	uxtb	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	0a1b      	lsrs	r3, r3, #8
 8005622:	b2da      	uxtb	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	b2da      	uxtb	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	b2da      	uxtb	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	0e1b      	lsrs	r3, r3, #24
 800563c:	b2da      	uxtb	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	0c1b      	lsrs	r3, r3, #16
 8005646:	b2da      	uxtb	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	0a1b      	lsrs	r3, r3, #8
 8005650:	b2da      	uxtb	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	0e1b      	lsrs	r3, r3, #24
 800565a:	b2da      	uxtb	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	0c1b      	lsrs	r3, r3, #16
 8005664:	b2da      	uxtb	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	b2da      	uxtb	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	372c      	adds	r7, #44	; 0x2c
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	58004000 	.word	0x58004000
 8005684:	a94656b9 	.word	0xa94656b9

08005688 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	4a08      	ldr	r2, [pc, #32]	; (80056b8 <hci_init+0x30>)
 8005698:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800569a:	4a08      	ldr	r2, [pc, #32]	; (80056bc <hci_init+0x34>)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80056a0:	4806      	ldr	r0, [pc, #24]	; (80056bc <hci_init+0x34>)
 80056a2:	f000 f979 	bl	8005998 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 f8da 	bl	8005864 <TlInit>

  return;
 80056b0:	bf00      	nop
}
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	20000228 	.word	0x20000228
 80056bc:	20000200 	.word	0x20000200

080056c0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80056c6:	4822      	ldr	r0, [pc, #136]	; (8005750 <hci_user_evt_proc+0x90>)
 80056c8:	f000 fd32 	bl	8006130 <LST_is_empty>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d12b      	bne.n	800572a <hci_user_evt_proc+0x6a>
 80056d2:	4b20      	ldr	r3, [pc, #128]	; (8005754 <hci_user_evt_proc+0x94>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d027      	beq.n	800572a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80056da:	f107 030c 	add.w	r3, r7, #12
 80056de:	4619      	mov	r1, r3
 80056e0:	481b      	ldr	r0, [pc, #108]	; (8005750 <hci_user_evt_proc+0x90>)
 80056e2:	f000 fdb4 	bl	800624e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80056e6:	4b1c      	ldr	r3, [pc, #112]	; (8005758 <hci_user_evt_proc+0x98>)
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00c      	beq.n	8005708 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80056f2:	2301      	movs	r3, #1
 80056f4:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80056f6:	4b18      	ldr	r3, [pc, #96]	; (8005758 <hci_user_evt_proc+0x98>)
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	1d3a      	adds	r2, r7, #4
 80056fc:	4610      	mov	r0, r2
 80056fe:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8005700:	793a      	ldrb	r2, [r7, #4]
 8005702:	4b14      	ldr	r3, [pc, #80]	; (8005754 <hci_user_evt_proc+0x94>)
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	e002      	b.n	800570e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8005708:	4b12      	ldr	r3, [pc, #72]	; (8005754 <hci_user_evt_proc+0x94>)
 800570a:	2201      	movs	r2, #1
 800570c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800570e:	4b11      	ldr	r3, [pc, #68]	; (8005754 <hci_user_evt_proc+0x94>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d004      	beq.n	8005720 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fc0d 	bl	8005f38 <TL_MM_EvtDone>
 800571e:	e004      	b.n	800572a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	4619      	mov	r1, r3
 8005724:	480a      	ldr	r0, [pc, #40]	; (8005750 <hci_user_evt_proc+0x90>)
 8005726:	f000 fd25 	bl	8006174 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800572a:	4809      	ldr	r0, [pc, #36]	; (8005750 <hci_user_evt_proc+0x90>)
 800572c:	f000 fd00 	bl	8006130 <LST_is_empty>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d107      	bne.n	8005746 <hci_user_evt_proc+0x86>
 8005736:	4b07      	ldr	r3, [pc, #28]	; (8005754 <hci_user_evt_proc+0x94>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800573e:	4804      	ldr	r0, [pc, #16]	; (8005750 <hci_user_evt_proc+0x90>)
 8005740:	f000 ff58 	bl	80065f4 <hci_notify_asynch_evt>
  }


  return;
 8005744:	bf00      	nop
 8005746:	bf00      	nop
}
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	2000004c 	.word	0x2000004c
 8005754:	20000058 	.word	0x20000058
 8005758:	20000200 	.word	0x20000200

0800575c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	460b      	mov	r3, r1
 8005766:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8005768:	2000      	movs	r0, #0
 800576a:	f000 f8d1 	bl	8005910 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800576e:	2300      	movs	r3, #0
 8005770:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	885b      	ldrh	r3, [r3, #2]
 8005776:	b21b      	sxth	r3, r3
 8005778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800577c:	b21a      	sxth	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	029b      	lsls	r3, r3, #10
 8005784:	b21b      	sxth	r3, r3
 8005786:	4313      	orrs	r3, r2
 8005788:	b21b      	sxth	r3, r3
 800578a:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800578c:	4b33      	ldr	r3, [pc, #204]	; (800585c <hci_send_req+0x100>)
 800578e:	2201      	movs	r2, #1
 8005790:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	b2d9      	uxtb	r1, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	8bbb      	ldrh	r3, [r7, #28]
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 f890 	bl	80058c4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80057a4:	e04e      	b.n	8005844 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80057a6:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80057aa:	f000 ff3a 	bl	8006622 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80057ae:	e043      	b.n	8005838 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80057b0:	f107 030c 	add.w	r3, r7, #12
 80057b4:	4619      	mov	r1, r3
 80057b6:	482a      	ldr	r0, [pc, #168]	; (8005860 <hci_send_req+0x104>)
 80057b8:	f000 fd49 	bl	800624e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	7a5b      	ldrb	r3, [r3, #9]
 80057c0:	2b0f      	cmp	r3, #15
 80057c2:	d114      	bne.n	80057ee <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	330b      	adds	r3, #11
 80057c8:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	885b      	ldrh	r3, [r3, #2]
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	8bba      	ldrh	r2, [r7, #28]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d104      	bne.n	80057e0 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	7812      	ldrb	r2, [r2, #0]
 80057de:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	785b      	ldrb	r3, [r3, #1]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d027      	beq.n	8005838 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80057e8:	2301      	movs	r3, #1
 80057ea:	77fb      	strb	r3, [r7, #31]
 80057ec:	e024      	b.n	8005838 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	330b      	adds	r3, #11
 80057f2:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	8bba      	ldrh	r2, [r7, #28]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d114      	bne.n	800582c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	7a9b      	ldrb	r3, [r3, #10]
 8005806:	3b03      	subs	r3, #3
 8005808:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695a      	ldr	r2, [r3, #20]
 800580e:	7dfb      	ldrb	r3, [r7, #23]
 8005810:	429a      	cmp	r2, r3
 8005812:	bfa8      	it	ge
 8005814:	461a      	movge	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6918      	ldr	r0, [r3, #16]
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	1cd9      	adds	r1, r3, #3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	461a      	mov	r2, r3
 8005828:	f001 fdd6 	bl	80073d8 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8005834:	2301      	movs	r3, #1
 8005836:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005838:	4809      	ldr	r0, [pc, #36]	; (8005860 <hci_send_req+0x104>)
 800583a:	f000 fc79 	bl	8006130 <LST_is_empty>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0b5      	beq.n	80057b0 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8005844:	7ffb      	ldrb	r3, [r7, #31]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0ad      	beq.n	80057a6 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800584a:	2001      	movs	r0, #1
 800584c:	f000 f860 	bl	8005910 <NotifyCmdStatus>

  return 0;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3720      	adds	r7, #32
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	2000022c 	.word	0x2000022c
 8005860:	20000220 	.word	0x20000220

08005864 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800586c:	480f      	ldr	r0, [pc, #60]	; (80058ac <TlInit+0x48>)
 800586e:	f000 fc4f 	bl	8006110 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8005872:	4a0f      	ldr	r2, [pc, #60]	; (80058b0 <TlInit+0x4c>)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8005878:	480e      	ldr	r0, [pc, #56]	; (80058b4 <TlInit+0x50>)
 800587a:	f000 fc49 	bl	8006110 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800587e:	4b0e      	ldr	r3, [pc, #56]	; (80058b8 <TlInit+0x54>)
 8005880:	2201      	movs	r2, #1
 8005882:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8005884:	4b0d      	ldr	r3, [pc, #52]	; (80058bc <TlInit+0x58>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00a      	beq.n	80058a2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <TlInit+0x5c>)
 8005892:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8005894:	4b09      	ldr	r3, [pc, #36]	; (80058bc <TlInit+0x58>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f107 0208 	add.w	r2, r7, #8
 800589c:	4610      	mov	r0, r2
 800589e:	4798      	blx	r3
  }

  return;
 80058a0:	bf00      	nop
 80058a2:	bf00      	nop
}
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20000220 	.word	0x20000220
 80058b0:	20000054 	.word	0x20000054
 80058b4:	2000004c 	.word	0x2000004c
 80058b8:	20000058 	.word	0x20000058
 80058bc:	20000200 	.word	0x20000200
 80058c0:	08005951 	.word	0x08005951

080058c4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	603a      	str	r2, [r7, #0]
 80058ce:	80fb      	strh	r3, [r7, #6]
 80058d0:	460b      	mov	r3, r1
 80058d2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80058d4:	4b0c      	ldr	r3, [pc, #48]	; (8005908 <SendCmd+0x44>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	88fa      	ldrh	r2, [r7, #6]
 80058da:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80058de:	4b0a      	ldr	r3, [pc, #40]	; (8005908 <SendCmd+0x44>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	797a      	ldrb	r2, [r7, #5]
 80058e4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80058e6:	4b08      	ldr	r3, [pc, #32]	; (8005908 <SendCmd+0x44>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	330c      	adds	r3, #12
 80058ec:	797a      	ldrb	r2, [r7, #5]
 80058ee:	6839      	ldr	r1, [r7, #0]
 80058f0:	4618      	mov	r0, r3
 80058f2:	f001 fd71 	bl	80073d8 <memcpy>

  hciContext.io.Send(0,0);
 80058f6:	4b05      	ldr	r3, [pc, #20]	; (800590c <SendCmd+0x48>)
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2100      	movs	r1, #0
 80058fc:	2000      	movs	r0, #0
 80058fe:	4798      	blx	r3

  return;
 8005900:	bf00      	nop
}
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	20000054 	.word	0x20000054
 800590c:	20000200 	.word	0x20000200

08005910 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	4603      	mov	r3, r0
 8005918:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800591a:	79fb      	ldrb	r3, [r7, #7]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d108      	bne.n	8005932 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8005920:	4b0a      	ldr	r3, [pc, #40]	; (800594c <NotifyCmdStatus+0x3c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00d      	beq.n	8005944 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8005928:	4b08      	ldr	r3, [pc, #32]	; (800594c <NotifyCmdStatus+0x3c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2000      	movs	r0, #0
 800592e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8005930:	e008      	b.n	8005944 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8005932:	4b06      	ldr	r3, [pc, #24]	; (800594c <NotifyCmdStatus+0x3c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d004      	beq.n	8005944 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800593a:	4b04      	ldr	r3, [pc, #16]	; (800594c <NotifyCmdStatus+0x3c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	2001      	movs	r0, #1
 8005940:	4798      	blx	r3
  return;
 8005942:	bf00      	nop
 8005944:	bf00      	nop
}
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20000228 	.word	0x20000228

08005950 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	7a5b      	ldrb	r3, [r3, #9]
 800595c:	2b0f      	cmp	r3, #15
 800595e:	d003      	beq.n	8005968 <TlEvtReceived+0x18>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	7a5b      	ldrb	r3, [r3, #9]
 8005964:	2b0e      	cmp	r3, #14
 8005966:	d107      	bne.n	8005978 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8005968:	6879      	ldr	r1, [r7, #4]
 800596a:	4809      	ldr	r0, [pc, #36]	; (8005990 <TlEvtReceived+0x40>)
 800596c:	f000 fc28 	bl	80061c0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8005970:	2000      	movs	r0, #0
 8005972:	f000 fe4b 	bl	800660c <hci_cmd_resp_release>
 8005976:	e006      	b.n	8005986 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	4806      	ldr	r0, [pc, #24]	; (8005994 <TlEvtReceived+0x44>)
 800597c:	f000 fc20 	bl	80061c0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005980:	4804      	ldr	r0, [pc, #16]	; (8005994 <TlEvtReceived+0x44>)
 8005982:	f000 fe37 	bl	80065f4 <hci_notify_asynch_evt>
  }

  return;
 8005986:	bf00      	nop
}
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	20000220 	.word	0x20000220
 8005994:	2000004c 	.word	0x2000004c

08005998 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a05      	ldr	r2, [pc, #20]	; (80059b8 <hci_register_io_bus+0x20>)
 80059a4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a04      	ldr	r2, [pc, #16]	; (80059bc <hci_register_io_bus+0x24>)
 80059aa:	611a      	str	r2, [r3, #16]

  return;
 80059ac:	bf00      	nop
}
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	08005cb1 	.word	0x08005cb1
 80059bc:	08005d19 	.word	0x08005d19

080059c0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	4a08      	ldr	r2, [pc, #32]	; (80059f0 <shci_init+0x30>)
 80059d0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80059d2:	4a08      	ldr	r2, [pc, #32]	; (80059f4 <shci_init+0x34>)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80059d8:	4806      	ldr	r0, [pc, #24]	; (80059f4 <shci_init+0x34>)
 80059da:	f000 f915 	bl	8005c08 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 f898 	bl	8005b18 <TlInit>

  return;
 80059e8:	bf00      	nop
}
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	20000250 	.word	0x20000250
 80059f4:	20000230 	.word	0x20000230

080059f8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80059fe:	4822      	ldr	r0, [pc, #136]	; (8005a88 <shci_user_evt_proc+0x90>)
 8005a00:	f000 fb96 	bl	8006130 <LST_is_empty>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d12b      	bne.n	8005a62 <shci_user_evt_proc+0x6a>
 8005a0a:	4b20      	ldr	r3, [pc, #128]	; (8005a8c <shci_user_evt_proc+0x94>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d027      	beq.n	8005a62 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005a12:	f107 030c 	add.w	r3, r7, #12
 8005a16:	4619      	mov	r1, r3
 8005a18:	481b      	ldr	r0, [pc, #108]	; (8005a88 <shci_user_evt_proc+0x90>)
 8005a1a:	f000 fc18 	bl	800624e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8005a1e:	4b1c      	ldr	r3, [pc, #112]	; (8005a90 <shci_user_evt_proc+0x98>)
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00c      	beq.n	8005a40 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005a2e:	4b18      	ldr	r3, [pc, #96]	; (8005a90 <shci_user_evt_proc+0x98>)
 8005a30:	69db      	ldr	r3, [r3, #28]
 8005a32:	1d3a      	adds	r2, r7, #4
 8005a34:	4610      	mov	r0, r2
 8005a36:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8005a38:	793a      	ldrb	r2, [r7, #4]
 8005a3a:	4b14      	ldr	r3, [pc, #80]	; (8005a8c <shci_user_evt_proc+0x94>)
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	e002      	b.n	8005a46 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005a40:	4b12      	ldr	r3, [pc, #72]	; (8005a8c <shci_user_evt_proc+0x94>)
 8005a42:	2201      	movs	r2, #1
 8005a44:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8005a46:	4b11      	ldr	r3, [pc, #68]	; (8005a8c <shci_user_evt_proc+0x94>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d004      	beq.n	8005a58 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fa71 	bl	8005f38 <TL_MM_EvtDone>
 8005a56:	e004      	b.n	8005a62 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	480a      	ldr	r0, [pc, #40]	; (8005a88 <shci_user_evt_proc+0x90>)
 8005a5e:	f000 fb89 	bl	8006174 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005a62:	4809      	ldr	r0, [pc, #36]	; (8005a88 <shci_user_evt_proc+0x90>)
 8005a64:	f000 fb64 	bl	8006130 <LST_is_empty>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d107      	bne.n	8005a7e <shci_user_evt_proc+0x86>
 8005a6e:	4b07      	ldr	r3, [pc, #28]	; (8005a8c <shci_user_evt_proc+0x94>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8005a76:	4804      	ldr	r0, [pc, #16]	; (8005a88 <shci_user_evt_proc+0x90>)
 8005a78:	f7fa ff24 	bl	80008c4 <shci_notify_asynch_evt>
  }


  return;
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
}
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	2000005c 	.word	0x2000005c
 8005a8c:	2000006c 	.word	0x2000006c
 8005a90:	20000230 	.word	0x20000230

08005a94 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60ba      	str	r2, [r7, #8]
 8005a9c:	607b      	str	r3, [r7, #4]
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	81fb      	strh	r3, [r7, #14]
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	f000 f868 	bl	8005b7c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8005aac:	4b17      	ldr	r3, [pc, #92]	; (8005b0c <shci_send+0x78>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	89fa      	ldrh	r2, [r7, #14]
 8005ab2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8005ab6:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <shci_send+0x78>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	7b7a      	ldrb	r2, [r7, #13]
 8005abc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8005abe:	4b13      	ldr	r3, [pc, #76]	; (8005b0c <shci_send+0x78>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	330c      	adds	r3, #12
 8005ac4:	7b7a      	ldrb	r2, [r7, #13]
 8005ac6:	68b9      	ldr	r1, [r7, #8]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f001 fc85 	bl	80073d8 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8005ace:	4b10      	ldr	r3, [pc, #64]	; (8005b10 <shci_send+0x7c>)
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8005ad4:	4b0f      	ldr	r3, [pc, #60]	; (8005b14 <shci_send+0x80>)
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	2100      	movs	r1, #0
 8005ada:	2000      	movs	r0, #0
 8005adc:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8005ade:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005ae2:	f7fa ff06 	bl	80008f2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f103 0008 	add.w	r0, r3, #8
 8005aec:	4b07      	ldr	r3, [pc, #28]	; (8005b0c <shci_send+0x78>)
 8005aee:	6819      	ldr	r1, [r3, #0]
 8005af0:	4b06      	ldr	r3, [pc, #24]	; (8005b0c <shci_send+0x78>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	789b      	ldrb	r3, [r3, #2]
 8005af6:	3303      	adds	r3, #3
 8005af8:	461a      	mov	r2, r3
 8005afa:	f001 fc6d 	bl	80073d8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005afe:	2001      	movs	r0, #1
 8005b00:	f000 f83c 	bl	8005b7c <Cmd_SetStatus>

  return;
 8005b04:	bf00      	nop
}
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	20000068 	.word	0x20000068
 8005b10:	20000254 	.word	0x20000254
 8005b14:	20000230 	.word	0x20000230

08005b18 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8005b20:	4a10      	ldr	r2, [pc, #64]	; (8005b64 <TlInit+0x4c>)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8005b26:	4810      	ldr	r0, [pc, #64]	; (8005b68 <TlInit+0x50>)
 8005b28:	f000 faf2 	bl	8006110 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005b2c:	2001      	movs	r0, #1
 8005b2e:	f000 f825 	bl	8005b7c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005b32:	4b0e      	ldr	r3, [pc, #56]	; (8005b6c <TlInit+0x54>)
 8005b34:	2201      	movs	r2, #1
 8005b36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8005b38:	4b0d      	ldr	r3, [pc, #52]	; (8005b70 <TlInit+0x58>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00c      	beq.n	8005b5a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8005b44:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <TlInit+0x5c>)
 8005b46:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8005b48:	4b0b      	ldr	r3, [pc, #44]	; (8005b78 <TlInit+0x60>)
 8005b4a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8005b4c:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <TlInit+0x58>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f107 020c 	add.w	r2, r7, #12
 8005b54:	4610      	mov	r0, r2
 8005b56:	4798      	blx	r3
  }

  return;
 8005b58:	bf00      	nop
 8005b5a:	bf00      	nop
}
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	20000068 	.word	0x20000068
 8005b68:	2000005c 	.word	0x2000005c
 8005b6c:	2000006c 	.word	0x2000006c
 8005b70:	20000230 	.word	0x20000230
 8005b74:	08005bcd 	.word	0x08005bcd
 8005b78:	08005be5 	.word	0x08005be5

08005b7c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10b      	bne.n	8005ba4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8005b8c:	4b0d      	ldr	r3, [pc, #52]	; (8005bc4 <Cmd_SetStatus+0x48>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d003      	beq.n	8005b9c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8005b94:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <Cmd_SetStatus+0x48>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2000      	movs	r0, #0
 8005b9a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8005b9c:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <Cmd_SetStatus+0x4c>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8005ba2:	e00b      	b.n	8005bbc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8005ba4:	4b08      	ldr	r3, [pc, #32]	; (8005bc8 <Cmd_SetStatus+0x4c>)
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8005baa:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <Cmd_SetStatus+0x48>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d004      	beq.n	8005bbc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8005bb2:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <Cmd_SetStatus+0x48>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2001      	movs	r0, #1
 8005bb8:	4798      	blx	r3
  return;
 8005bba:	bf00      	nop
 8005bbc:	bf00      	nop
}
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	20000250 	.word	0x20000250
 8005bc8:	20000064 	.word	0x20000064

08005bcc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	f7fa fe81 	bl	80008dc <shci_cmd_resp_release>

  return;
 8005bda:	bf00      	nop
}
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8005bec:	6879      	ldr	r1, [r7, #4]
 8005bee:	4805      	ldr	r0, [pc, #20]	; (8005c04 <TlUserEvtReceived+0x20>)
 8005bf0:	f000 fae6 	bl	80061c0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005bf4:	4803      	ldr	r0, [pc, #12]	; (8005c04 <TlUserEvtReceived+0x20>)
 8005bf6:	f7fa fe65 	bl	80008c4 <shci_notify_asynch_evt>

  return;
 8005bfa:	bf00      	nop
}
 8005bfc:	3708      	adds	r7, #8
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	2000005c 	.word	0x2000005c

08005c08 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a05      	ldr	r2, [pc, #20]	; (8005c28 <shci_register_io_bus+0x20>)
 8005c14:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a04      	ldr	r2, [pc, #16]	; (8005c2c <shci_register_io_bus+0x24>)
 8005c1a:	611a      	str	r2, [r3, #16]

  return;
 8005c1c:	bf00      	nop
}
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	08005dc5 	.word	0x08005dc5
 8005c2c:	08005e19 	.word	0x08005e19

08005c30 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8005c34:	f001 f81c 	bl	8006c70 <HW_IPCC_Enable>

  return;
 8005c38:	bf00      	nop
}
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <TL_Init>:


void TL_Init( void )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005c40:	4b10      	ldr	r3, [pc, #64]	; (8005c84 <TL_Init+0x48>)
 8005c42:	4a11      	ldr	r2, [pc, #68]	; (8005c88 <TL_Init+0x4c>)
 8005c44:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005c46:	4b0f      	ldr	r3, [pc, #60]	; (8005c84 <TL_Init+0x48>)
 8005c48:	4a10      	ldr	r2, [pc, #64]	; (8005c8c <TL_Init+0x50>)
 8005c4a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005c4c:	4b0d      	ldr	r3, [pc, #52]	; (8005c84 <TL_Init+0x48>)
 8005c4e:	4a10      	ldr	r2, [pc, #64]	; (8005c90 <TL_Init+0x54>)
 8005c50:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8005c52:	4b0c      	ldr	r3, [pc, #48]	; (8005c84 <TL_Init+0x48>)
 8005c54:	4a0f      	ldr	r2, [pc, #60]	; (8005c94 <TL_Init+0x58>)
 8005c56:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8005c58:	4b0a      	ldr	r3, [pc, #40]	; (8005c84 <TL_Init+0x48>)
 8005c5a:	4a0f      	ldr	r2, [pc, #60]	; (8005c98 <TL_Init+0x5c>)
 8005c5c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8005c5e:	4b09      	ldr	r3, [pc, #36]	; (8005c84 <TL_Init+0x48>)
 8005c60:	4a0e      	ldr	r2, [pc, #56]	; (8005c9c <TL_Init+0x60>)
 8005c62:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005c64:	4b07      	ldr	r3, [pc, #28]	; (8005c84 <TL_Init+0x48>)
 8005c66:	4a0e      	ldr	r2, [pc, #56]	; (8005ca0 <TL_Init+0x64>)
 8005c68:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8005c6a:	4b06      	ldr	r3, [pc, #24]	; (8005c84 <TL_Init+0x48>)
 8005c6c:	4a0d      	ldr	r2, [pc, #52]	; (8005ca4 <TL_Init+0x68>)
 8005c6e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005c70:	4b04      	ldr	r3, [pc, #16]	; (8005c84 <TL_Init+0x48>)
 8005c72:	4a0d      	ldr	r2, [pc, #52]	; (8005ca8 <TL_Init+0x6c>)
 8005c74:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005c76:	4b03      	ldr	r3, [pc, #12]	; (8005c84 <TL_Init+0x48>)
 8005c78:	4a0c      	ldr	r2, [pc, #48]	; (8005cac <TL_Init+0x70>)
 8005c7a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8005c7c:	f001 f80c 	bl	8006c98 <HW_IPCC_Init>

  return;
 8005c80:	bf00      	nop
}
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	20030000 	.word	0x20030000
 8005c88:	20030028 	.word	0x20030028
 8005c8c:	20030048 	.word	0x20030048
 8005c90:	20030058 	.word	0x20030058
 8005c94:	20030068 	.word	0x20030068
 8005c98:	20030070 	.word	0x20030070
 8005c9c:	20030078 	.word	0x20030078
 8005ca0:	20030080 	.word	0x20030080
 8005ca4:	2003009c 	.word	0x2003009c
 8005ca8:	200300a0 	.word	0x200300a0
 8005cac:	200300ac 	.word	0x200300ac

08005cb0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8005cbc:	4811      	ldr	r0, [pc, #68]	; (8005d04 <TL_BLE_Init+0x54>)
 8005cbe:	f000 fa27 	bl	8006110 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8005cc2:	4b11      	ldr	r3, [pc, #68]	; (8005d08 <TL_BLE_Init+0x58>)
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	4a0c      	ldr	r2, [pc, #48]	; (8005d0c <TL_BLE_Init+0x5c>)
 8005cdc:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	4a08      	ldr	r2, [pc, #32]	; (8005d04 <TL_BLE_Init+0x54>)
 8005ce2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8005ce4:	f000 ffee 	bl	8006cc4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a08      	ldr	r2, [pc, #32]	; (8005d10 <TL_BLE_Init+0x60>)
 8005cee:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	4a07      	ldr	r2, [pc, #28]	; (8005d14 <TL_BLE_Init+0x64>)
 8005cf6:	6013      	str	r3, [r2, #0]

  return 0;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	200300c8 	.word	0x200300c8
 8005d08:	20030000 	.word	0x20030000
 8005d0c:	20030a58 	.word	0x20030a58
 8005d10:	20000260 	.word	0x20000260
 8005d14:	20000264 	.word	0x20000264

08005d18 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	460b      	mov	r3, r1
 8005d22:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8005d24:	4b09      	ldr	r3, [pc, #36]	; (8005d4c <TL_BLE_SendCmd+0x34>)
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8005d2e:	4b07      	ldr	r3, [pc, #28]	; (8005d4c <TL_BLE_SendCmd+0x34>)
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4619      	mov	r1, r3
 8005d36:	2001      	movs	r0, #1
 8005d38:	f000 f96c 	bl	8006014 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8005d3c:	f000 ffcc 	bl	8006cd8 <HW_IPCC_BLE_SendCmd>

  return 0;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20030000 	.word	0x20030000

08005d50 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8005d56:	e01c      	b.n	8005d92 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8005d58:	1d3b      	adds	r3, r7, #4
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4812      	ldr	r0, [pc, #72]	; (8005da8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005d5e:	f000 fa76 	bl	800624e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	7a5b      	ldrb	r3, [r3, #9]
 8005d66:	2b0f      	cmp	r3, #15
 8005d68:	d003      	beq.n	8005d72 <HW_IPCC_BLE_RxEvtNot+0x22>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	7a5b      	ldrb	r3, [r3, #9]
 8005d6e:	2b0e      	cmp	r3, #14
 8005d70:	d105      	bne.n	8005d7e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4619      	mov	r1, r3
 8005d76:	2002      	movs	r0, #2
 8005d78:	f000 f94c 	bl	8006014 <OutputDbgTrace>
 8005d7c:	e004      	b.n	8005d88 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4619      	mov	r1, r3
 8005d82:	2003      	movs	r0, #3
 8005d84:	f000 f946 	bl	8006014 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8005d88:	4b08      	ldr	r3, [pc, #32]	; (8005dac <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	4610      	mov	r0, r2
 8005d90:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8005d92:	4805      	ldr	r0, [pc, #20]	; (8005da8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005d94:	f000 f9cc 	bl	8006130 <LST_is_empty>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d0dc      	beq.n	8005d58 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8005d9e:	bf00      	nop
}
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	200300c8 	.word	0x200300c8
 8005dac:	20000260 	.word	0x20000260

08005db0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8005db4:	4b02      	ldr	r3, [pc, #8]	; (8005dc0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4798      	blx	r3

  return;
 8005dba:	bf00      	nop
}
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000264 	.word	0x20000264

08005dc4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8005dd0:	480d      	ldr	r0, [pc, #52]	; (8005e08 <TL_SYS_Init+0x44>)
 8005dd2:	f000 f99d 	bl	8006110 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8005dd6:	4b0d      	ldr	r3, [pc, #52]	; (8005e0c <TL_SYS_Init+0x48>)
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689a      	ldr	r2, [r3, #8]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	4a08      	ldr	r2, [pc, #32]	; (8005e08 <TL_SYS_Init+0x44>)
 8005de8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8005dea:	f000 ff97 	bl	8006d1c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a07      	ldr	r2, [pc, #28]	; (8005e10 <TL_SYS_Init+0x4c>)
 8005df4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	4a06      	ldr	r2, [pc, #24]	; (8005e14 <TL_SYS_Init+0x50>)
 8005dfc:	6013      	str	r3, [r2, #0]

  return 0;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	200300d0 	.word	0x200300d0
 8005e0c:	20030000 	.word	0x20030000
 8005e10:	20000268 	.word	0x20000268
 8005e14:	2000026c 	.word	0x2000026c

08005e18 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8005e24:	4b09      	ldr	r3, [pc, #36]	; (8005e4c <TL_SYS_SendCmd+0x34>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2210      	movs	r2, #16
 8005e2c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8005e2e:	4b07      	ldr	r3, [pc, #28]	; (8005e4c <TL_SYS_SendCmd+0x34>)
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4619      	mov	r1, r3
 8005e36:	2004      	movs	r0, #4
 8005e38:	f000 f8ec 	bl	8006014 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8005e3c:	f000 ff78 	bl	8006d30 <HW_IPCC_SYS_SendCmd>

  return 0;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20030000 	.word	0x20030000

08005e50 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005e54:	4b07      	ldr	r3, [pc, #28]	; (8005e74 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	2005      	movs	r0, #5
 8005e5e:	f000 f8d9 	bl	8006014 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005e62:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a03      	ldr	r2, [pc, #12]	; (8005e74 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005e68:	68d2      	ldr	r2, [r2, #12]
 8005e6a:	6812      	ldr	r2, [r2, #0]
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	4798      	blx	r3

  return;
 8005e70:	bf00      	nop
}
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	20030000 	.word	0x20030000
 8005e78:	20000268 	.word	0x20000268

08005e7c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005e82:	e00e      	b.n	8005ea2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8005e84:	1d3b      	adds	r3, r7, #4
 8005e86:	4619      	mov	r1, r3
 8005e88:	480b      	ldr	r0, [pc, #44]	; (8005eb8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005e8a:	f000 f9e0 	bl	800624e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4619      	mov	r1, r3
 8005e92:	2006      	movs	r0, #6
 8005e94:	f000 f8be 	bl	8006014 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005e98:	4b08      	ldr	r3, [pc, #32]	; (8005ebc <HW_IPCC_SYS_EvtNot+0x40>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005ea2:	4805      	ldr	r0, [pc, #20]	; (8005eb8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005ea4:	f000 f944 	bl	8006130 <LST_is_empty>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0ea      	beq.n	8005e84 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8005eae:	bf00      	nop
}
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	200300d0 	.word	0x200300d0
 8005ebc:	2000026c 	.word	0x2000026c

08005ec0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8005ec8:	4817      	ldr	r0, [pc, #92]	; (8005f28 <TL_MM_Init+0x68>)
 8005eca:	f000 f921 	bl	8006110 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8005ece:	4817      	ldr	r0, [pc, #92]	; (8005f2c <TL_MM_Init+0x6c>)
 8005ed0:	f000 f91e 	bl	8006110 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005ed4:	4b16      	ldr	r3, [pc, #88]	; (8005f30 <TL_MM_Init+0x70>)
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	4a16      	ldr	r2, [pc, #88]	; (8005f34 <TL_MM_Init+0x74>)
 8005eda:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005edc:	4b15      	ldr	r3, [pc, #84]	; (8005f34 <TL_MM_Init+0x74>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6892      	ldr	r2, [r2, #8]
 8005ee4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8005ee6:	4b13      	ldr	r3, [pc, #76]	; (8005f34 <TL_MM_Init+0x74>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	68d2      	ldr	r2, [r2, #12]
 8005eee:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005ef0:	4b10      	ldr	r3, [pc, #64]	; (8005f34 <TL_MM_Init+0x74>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a0c      	ldr	r2, [pc, #48]	; (8005f28 <TL_MM_Init+0x68>)
 8005ef6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8005ef8:	4b0e      	ldr	r3, [pc, #56]	; (8005f34 <TL_MM_Init+0x74>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6812      	ldr	r2, [r2, #0]
 8005f00:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005f02:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <TL_MM_Init+0x74>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	6852      	ldr	r2, [r2, #4]
 8005f0a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8005f0c:	4b09      	ldr	r3, [pc, #36]	; (8005f34 <TL_MM_Init+0x74>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6912      	ldr	r2, [r2, #16]
 8005f14:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8005f16:	4b07      	ldr	r3, [pc, #28]	; (8005f34 <TL_MM_Init+0x74>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6952      	ldr	r2, [r2, #20]
 8005f1e:	619a      	str	r2, [r3, #24]

  return;
 8005f20:	bf00      	nop
}
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	200300b8 	.word	0x200300b8
 8005f2c:	20000258 	.word	0x20000258
 8005f30:	20030000 	.word	0x20030000
 8005f34:	20000270 	.word	0x20000270

08005f38 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8005f40:	6879      	ldr	r1, [r7, #4]
 8005f42:	4807      	ldr	r0, [pc, #28]	; (8005f60 <TL_MM_EvtDone+0x28>)
 8005f44:	f000 f93c 	bl	80061c0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	f000 f862 	bl	8006014 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8005f50:	4804      	ldr	r0, [pc, #16]	; (8005f64 <TL_MM_EvtDone+0x2c>)
 8005f52:	f000 ff13 	bl	8006d7c <HW_IPCC_MM_SendFreeBuf>

  return;
 8005f56:	bf00      	nop
}
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20000258 	.word	0x20000258
 8005f64:	08005f69 	.word	0x08005f69

08005f68 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005f6e:	e00c      	b.n	8005f8a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8005f70:	1d3b      	adds	r3, r7, #4
 8005f72:	4619      	mov	r1, r3
 8005f74:	480a      	ldr	r0, [pc, #40]	; (8005fa0 <SendFreeBuf+0x38>)
 8005f76:	f000 f96a 	bl	800624e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8005f7a:	4b0a      	ldr	r3, [pc, #40]	; (8005fa4 <SendFreeBuf+0x3c>)
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	4611      	mov	r1, r2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 f91b 	bl	80061c0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8005f8a:	4805      	ldr	r0, [pc, #20]	; (8005fa0 <SendFreeBuf+0x38>)
 8005f8c:	f000 f8d0 	bl	8006130 <LST_is_empty>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d0ec      	beq.n	8005f70 <SendFreeBuf+0x8>
  }

  return;
 8005f96:	bf00      	nop
}
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20000258 	.word	0x20000258
 8005fa4:	20030000 	.word	0x20030000

08005fa8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8005fac:	4805      	ldr	r0, [pc, #20]	; (8005fc4 <TL_TRACES_Init+0x1c>)
 8005fae:	f000 f8af 	bl	8006110 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8005fb2:	4b05      	ldr	r3, [pc, #20]	; (8005fc8 <TL_TRACES_Init+0x20>)
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	4a03      	ldr	r2, [pc, #12]	; (8005fc4 <TL_TRACES_Init+0x1c>)
 8005fb8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8005fba:	f000 ff15 	bl	8006de8 <HW_IPCC_TRACES_Init>

  return;
 8005fbe:	bf00      	nop
}
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	200300c0 	.word	0x200300c0
 8005fc8:	20030000 	.word	0x20030000

08005fcc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8005fd2:	e008      	b.n	8005fe6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8005fd4:	1d3b      	adds	r3, r7, #4
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	4808      	ldr	r0, [pc, #32]	; (8005ffc <HW_IPCC_TRACES_EvtNot+0x30>)
 8005fda:	f000 f938 	bl	800624e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 f80d 	bl	8006000 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8005fe6:	4805      	ldr	r0, [pc, #20]	; (8005ffc <HW_IPCC_TRACES_EvtNot+0x30>)
 8005fe8:	f000 f8a2 	bl	8006130 <LST_is_empty>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0f0      	beq.n	8005fd4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8005ff2:	bf00      	nop
}
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	200300c0 	.word	0x200300c0

08006000 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8006008:	bf00      	nop
 800600a:	370c      	adds	r7, #12
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	4603      	mov	r3, r0
 800601c:	6039      	str	r1, [r7, #0]
 800601e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8006020:	79fb      	ldrb	r3, [r7, #7]
 8006022:	2b06      	cmp	r3, #6
 8006024:	d845      	bhi.n	80060b2 <OutputDbgTrace+0x9e>
 8006026:	a201      	add	r2, pc, #4	; (adr r2, 800602c <OutputDbgTrace+0x18>)
 8006028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800602c:	08006049 	.word	0x08006049
 8006030:	0800606d 	.word	0x0800606d
 8006034:	08006073 	.word	0x08006073
 8006038:	08006087 	.word	0x08006087
 800603c:	08006093 	.word	0x08006093
 8006040:	08006099 	.word	0x08006099
 8006044:	080060a7 	.word	0x080060a7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	7a5b      	ldrb	r3, [r3, #9]
 8006050:	2bff      	cmp	r3, #255	; 0xff
 8006052:	d005      	beq.n	8006060 <OutputDbgTrace+0x4c>
 8006054:	2bff      	cmp	r3, #255	; 0xff
 8006056:	dc05      	bgt.n	8006064 <OutputDbgTrace+0x50>
 8006058:	2b0e      	cmp	r3, #14
 800605a:	d005      	beq.n	8006068 <OutputDbgTrace+0x54>
 800605c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800605e:	e001      	b.n	8006064 <OutputDbgTrace+0x50>
          break;
 8006060:	bf00      	nop
 8006062:	e027      	b.n	80060b4 <OutputDbgTrace+0xa0>
          break;
 8006064:	bf00      	nop
 8006066:	e025      	b.n	80060b4 <OutputDbgTrace+0xa0>
          break;
 8006068:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800606a:	e023      	b.n	80060b4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8006070:	e020      	b.n	80060b4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	7a5b      	ldrb	r3, [r3, #9]
 800607a:	2b0e      	cmp	r3, #14
 800607c:	d001      	beq.n	8006082 <OutputDbgTrace+0x6e>
 800607e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8006080:	e000      	b.n	8006084 <OutputDbgTrace+0x70>
          break;
 8006082:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006084:	e016      	b.n	80060b4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	7a5b      	ldrb	r3, [r3, #9]
 800608e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006090:	e010      	b.n	80060b4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8006096:	e00d      	b.n	80060b4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	7a5b      	ldrb	r3, [r3, #9]
 80060a0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80060a2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80060a4:	e006      	b.n	80060b4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	7a5b      	ldrb	r3, [r3, #9]
 80060ae:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80060b0:	e000      	b.n	80060b4 <OutputDbgTrace+0xa0>

    default:
      break;
 80060b2:	bf00      	nop
  }

  return;
 80060b4:	bf00      	nop
}
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	4603      	mov	r3, r0
 80060c8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80060ca:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <OTP_Read+0x48>)
 80060cc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80060ce:	e002      	b.n	80060d6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3b08      	subs	r3, #8
 80060d4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	3307      	adds	r3, #7
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	79fa      	ldrb	r2, [r7, #7]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d003      	beq.n	80060ea <OTP_Read+0x2a>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4a09      	ldr	r2, [pc, #36]	; (800610c <OTP_Read+0x4c>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d1f2      	bne.n	80060d0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3307      	adds	r3, #7
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	79fa      	ldrb	r2, [r7, #7]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d001      	beq.n	80060fa <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80060fa:	68fb      	ldr	r3, [r7, #12]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr
 8006108:	1fff73f8 	.word	0x1fff73f8
 800610c:	1fff7000 	.word	0x1fff7000

08006110 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	605a      	str	r2, [r3, #4]
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006138:	f3ef 8310 	mrs	r3, PRIMASK
 800613c:	60fb      	str	r3, [r7, #12]
  return(result);
 800613e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006140:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006142:	b672      	cpsid	i
}
 8006144:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	429a      	cmp	r2, r3
 800614e:	d102      	bne.n	8006156 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8006150:	2301      	movs	r3, #1
 8006152:	75fb      	strb	r3, [r7, #23]
 8006154:	e001      	b.n	800615a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8006156:	2300      	movs	r3, #0
 8006158:	75fb      	strb	r3, [r7, #23]
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f383 8810 	msr	PRIMASK, r3
}
 8006164:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8006166:	7dfb      	ldrb	r3, [r7, #23]
}
 8006168:	4618      	mov	r0, r3
 800616a:	371c      	adds	r7, #28
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800617e:	f3ef 8310 	mrs	r3, PRIMASK
 8006182:	60fb      	str	r3, [r7, #12]
  return(result);
 8006184:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006186:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006188:	b672      	cpsid	i
}
 800618a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	605a      	str	r2, [r3, #4]
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f383 8810 	msr	PRIMASK, r3
}
 80061b2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80061b4:	bf00      	nop
 80061b6:	371c      	adds	r7, #28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061ca:	f3ef 8310 	mrs	r3, PRIMASK
 80061ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80061d0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80061d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80061d4:	b672      	cpsid	i
}
 80061d6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	f383 8810 	msr	PRIMASK, r3
}
 80061fe:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006200:	bf00      	nop
 8006202:	371c      	adds	r7, #28
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006214:	f3ef 8310 	mrs	r3, PRIMASK
 8006218:	60fb      	str	r3, [r7, #12]
  return(result);
 800621a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800621c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800621e:	b672      	cpsid	i
}
 8006220:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6812      	ldr	r2, [r2, #0]
 800622a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	6852      	ldr	r2, [r2, #4]
 8006234:	605a      	str	r2, [r3, #4]
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f383 8810 	msr	PRIMASK, r3
}
 8006240:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006242:	bf00      	nop
 8006244:	371c      	adds	r7, #28
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b086      	sub	sp, #24
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006258:	f3ef 8310 	mrs	r3, PRIMASK
 800625c:	60fb      	str	r3, [r7, #12]
  return(result);
 800625e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006260:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006262:	b672      	cpsid	i
}
 8006264:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff ffca 	bl	800620c <LST_remove_node>
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f383 8810 	msr	PRIMASK, r3
}
 8006282:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8006284:	bf00      	nop
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <__NVIC_SystemReset>:
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006290:	f3bf 8f4f 	dsb	sy
}
 8006294:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006296:	4b06      	ldr	r3, [pc, #24]	; (80062b0 <__NVIC_SystemReset+0x24>)
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800629e:	4904      	ldr	r1, [pc, #16]	; (80062b0 <__NVIC_SystemReset+0x24>)
 80062a0:	4b04      	ldr	r3, [pc, #16]	; (80062b4 <__NVIC_SystemReset+0x28>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80062a6:	f3bf 8f4f 	dsb	sy
}
 80062aa:	bf00      	nop
    __NOP();
 80062ac:	bf00      	nop
 80062ae:	e7fd      	b.n	80062ac <__NVIC_SystemReset+0x20>
 80062b0:	e000ed00 	.word	0xe000ed00
 80062b4:	05fa0004 	.word	0x05fa0004

080062b8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80062bc:	4b03      	ldr	r3, [pc, #12]	; (80062cc <LL_FLASH_GetUDN+0x14>)
 80062be:	681b      	ldr	r3, [r3, #0]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	1fff7580 	.word	0x1fff7580

080062d0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80062d4:	4b03      	ldr	r3, [pc, #12]	; (80062e4 <LL_FLASH_GetDeviceID+0x14>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	b2db      	uxtb	r3, r3
}
 80062da:	4618      	mov	r0, r3
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	1fff7584 	.word	0x1fff7584

080062e8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80062ec:	4b03      	ldr	r3, [pc, #12]	; (80062fc <LL_FLASH_GetSTCompanyID+0x14>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	0a1b      	lsrs	r3, r3, #8
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	1fff7584 	.word	0x1fff7584

08006300 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8006300:	b5b0      	push	{r4, r5, r7, lr}
 8006302:	b090      	sub	sp, #64	; 0x40
 8006304:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1<<CFG_TASK_INIT_TEMP, UTIL_SEQ_RFU, initTemp);
 8006306:	4a21      	ldr	r2, [pc, #132]	; (800638c <APP_BLE_Init+0x8c>)
 8006308:	2100      	movs	r1, #0
 800630a:	2004      	movs	r0, #4
 800630c:	f000 fef6 	bl	80070fc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_UPDATE_TEMP, UTIL_SEQ_RFU, updateTemp);
 8006310:	4a1f      	ldr	r2, [pc, #124]	; (8006390 <APP_BLE_Init+0x90>)
 8006312:	2100      	movs	r1, #0
 8006314:	2008      	movs	r0, #8
 8006316:	f000 fef1 	bl	80070fc <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1<<CFG_TASK_INIT_TEMP, CFG_SCH_PRIO_0);
 800631a:	2100      	movs	r1, #0
 800631c:	2004      	movs	r0, #4
 800631e:	f000 ff0f 	bl	8007140 <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8006322:	4b1c      	ldr	r3, [pc, #112]	; (8006394 <APP_BLE_Init+0x94>)
 8006324:	1d3c      	adds	r4, r7, #4
 8006326:	461d      	mov	r5, r3
 8006328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800632a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800632c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800632e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006334:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006338:	c403      	stmia	r4!, {r0, r1}
 800633a:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800633c:	f000 f864 	bl	8006408 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8006340:	2101      	movs	r1, #1
 8006342:	2002      	movs	r0, #2
 8006344:	f000 fd78 	bl	8006e38 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8006348:	4a13      	ldr	r2, [pc, #76]	; (8006398 <APP_BLE_Init+0x98>)
 800634a:	2100      	movs	r1, #0
 800634c:	2002      	movs	r0, #2
 800634e:	f000 fed5 	bl	80070fc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8006352:	1d3b      	adds	r3, r7, #4
 8006354:	4618      	mov	r0, r3
 8006356:	f7ff f8a5 	bl	80054a4 <SHCI_C2_BLE_Init>
 800635a:	4603      	mov	r3, r0
 800635c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 8006360:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <APP_BLE_Init+0x6c>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8006368:	f7fb fa92 	bl	8001890 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800636c:	f000 f862 	bl	8006434 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8006370:	f7ff f80c 	bl	800538c <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_BEACON_UPDATE_REQ_ID, UTIL_SEQ_RFU, Beacon_Update);
 8006374:	4a09      	ldr	r2, [pc, #36]	; (800639c <APP_BLE_Init+0x9c>)
 8006376:	2100      	movs	r1, #0
 8006378:	2001      	movs	r0, #1
 800637a:	f000 febf 	bl	80070fc <UTIL_SEQ_RegTask>
    EddystoneTLM_Process();
  }
  else if (CFG_BEACON_TYPE & CFG_IBEACON)
  {
    APP_DBG_MSG("Ibeacon advertise\n\r");
    IBeacon_Process();
 800637e:	f000 fa71 	bl	8006864 <IBeacon_Process>
  }
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8006382:	bf00      	nop
}
 8006384:	3740      	adds	r7, #64	; 0x40
 8006386:	46bd      	mov	sp, r7
 8006388:	bdb0      	pop	{r4, r5, r7, pc}
 800638a:	bf00      	nop
 800638c:	080068b5 	.word	0x080068b5
 8006390:	080068c5 	.word	0x080068c5
 8006394:	08007448 	.word	0x08007448
 8006398:	080056c1 	.word	0x080056c1
 800639c:	08006509 	.word	0x08006509

080063a0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3301      	adds	r3, #1
 80063ac:	617b      	str	r3, [r7, #20]

  switch (p_event_pckt->evt)
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2bff      	cmp	r3, #255	; 0xff
 80063b4:	d00e      	beq.n	80063d4 <SVCCTL_App_Notification+0x34>
 80063b6:	2bff      	cmp	r3, #255	; 0xff
 80063b8:	dc19      	bgt.n	80063ee <SVCCTL_App_Notification+0x4e>
 80063ba:	2b05      	cmp	r3, #5
 80063bc:	d019      	beq.n	80063f2 <SVCCTL_App_Notification+0x52>
 80063be:	2b3e      	cmp	r3, #62	; 0x3e
 80063c0:	d000      	beq.n	80063c4 <SVCCTL_App_Notification+0x24>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80063c2:	e014      	b.n	80063ee <SVCCTL_App_Notification+0x4e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	3302      	adds	r3, #2
 80063c8:	60fb      	str	r3, [r7, #12]
      switch (p_meta_evt->subevent)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	2b01      	cmp	r3, #1
          break;
 80063d0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80063d2:	e011      	b.n	80063f8 <SVCCTL_App_Notification+0x58>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	3302      	adds	r3, #2
 80063d8:	613b      	str	r3, [r7, #16]
      switch (p_blecore_evt->ecode)
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	881b      	ldrh	r3, [r3, #0]
 80063de:	b29b      	uxth	r3, r3
 80063e0:	461a      	mov	r2, r3
 80063e2:	f240 4307 	movw	r3, #1031	; 0x407
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d105      	bne.n	80063f6 <SVCCTL_App_Notification+0x56>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80063ea:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80063ec:	e003      	b.n	80063f6 <SVCCTL_App_Notification+0x56>
      break;
 80063ee:	bf00      	nop
 80063f0:	e002      	b.n	80063f8 <SVCCTL_App_Notification+0x58>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80063f2:	bf00      	nop
 80063f4:	e000      	b.n	80063f8 <SVCCTL_App_Notification+0x58>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80063f6:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80063f8:	2301      	movs	r3, #1
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	371c      	adds	r7, #28
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
	...

08006408 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800640e:	4b06      	ldr	r3, [pc, #24]	; (8006428 <Ble_Tl_Init+0x20>)
 8006410:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8006412:	4b06      	ldr	r3, [pc, #24]	; (800642c <Ble_Tl_Init+0x24>)
 8006414:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8006416:	463b      	mov	r3, r7
 8006418:	4619      	mov	r1, r3
 800641a:	4805      	ldr	r0, [pc, #20]	; (8006430 <Ble_Tl_Init+0x28>)
 800641c:	f7ff f934 	bl	8005688 <hci_init>

  return;
 8006420:	bf00      	nop
}
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	200300d8 	.word	0x200300d8
 800642c:	08006671 	.word	0x08006671
 8006430:	08006639 	.word	0x08006639

08006434 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8006434:	b5b0      	push	{r4, r5, r7, lr}
 8006436:	b088      	sub	sp, #32
 8006438:	af02      	add	r7, sp, #8
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800643a:	2300      	movs	r3, #0
 800643c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800643e:	2392      	movs	r3, #146	; 0x92
 8006440:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8006442:	f7fe fe77 	bl	8005134 <hci_reset>
 8006446:	4603      	mov	r3, r0
 8006448:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800644a:	f000 f88f 	bl	800656c <BleGetBdAddress>
 800644e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	2106      	movs	r1, #6
 8006454:	2000      	movs	r0, #0
 8006456:	f7fe fd81 	bl	8004f5c <aci_hal_write_config_data>
 800645a:	4603      	mov	r3, r0
 800645c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800645e:	4a27      	ldr	r2, [pc, #156]	; (80064fc <Ble_Hci_Gap_Gatt_Init+0xc8>)
 8006460:	2110      	movs	r1, #16
 8006462:	2018      	movs	r0, #24
 8006464:	f7fe fd7a 	bl	8004f5c <aci_hal_write_config_data>
 8006468:	4603      	mov	r3, r0
 800646a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800646c:	4a24      	ldr	r2, [pc, #144]	; (8006500 <Ble_Hci_Gap_Gatt_Init+0xcc>)
 800646e:	2110      	movs	r1, #16
 8006470:	2008      	movs	r0, #8
 8006472:	f7fe fd73 	bl	8004f5c <aci_hal_write_config_data>
 8006476:	4603      	mov	r3, r0
 8006478:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800647a:	2119      	movs	r1, #25
 800647c:	2001      	movs	r0, #1
 800647e:	f7fe fdf2 	bl	8005066 <aci_hal_set_tx_power_level>
 8006482:	4603      	mov	r3, r0
 8006484:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8006486:	f7fe fc9b 	bl	8004dc0 <aci_gatt_init>
 800648a:	4603      	mov	r3, r0
 800648c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800648e:	2300      	movs	r3, #0
 8006490:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8006492:	7bfb      	ldrb	r3, [r7, #15]
 8006494:	f043 0301 	orr.w	r3, r3, #1
 8006498:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800649a:	7bfb      	ldrb	r3, [r7, #15]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01f      	beq.n	80064e0 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = "STM32WB";
 80064a0:	4b18      	ldr	r3, [pc, #96]	; (8006504 <Ble_Hci_Gap_Gatt_Init+0xd0>)
 80064a2:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80064a4:	1dba      	adds	r2, r7, #6
 80064a6:	7bf8      	ldrb	r0, [r7, #15]
 80064a8:	1cbb      	adds	r3, r7, #2
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	1d3b      	adds	r3, r7, #4
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	4613      	mov	r3, r2
 80064b2:	2207      	movs	r2, #7
 80064b4:	2100      	movs	r1, #0
 80064b6:	f7fe fb10 	bl	8004ada <aci_gap_init>
 80064ba:	4603      	mov	r3, r0
 80064bc:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 80064be:	88fc      	ldrh	r4, [r7, #6]
 80064c0:	88bd      	ldrh	r5, [r7, #4]
 80064c2:	68b8      	ldr	r0, [r7, #8]
 80064c4:	f7f9 fe5a 	bl	800017c <strlen>
 80064c8:	4603      	mov	r3, r0
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	4613      	mov	r3, r2
 80064d2:	2200      	movs	r2, #0
 80064d4:	4629      	mov	r1, r5
 80064d6:	4620      	mov	r0, r4
 80064d8:	f7fe fc97 	bl	8004e0a <aci_gatt_update_char_value>
 80064dc:	4603      	mov	r3, r0
 80064de:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80064e0:	88f8      	ldrh	r0, [r7, #6]
 80064e2:	8879      	ldrh	r1, [r7, #2]
 80064e4:	463b      	mov	r3, r7
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	2302      	movs	r3, #2
 80064ea:	2200      	movs	r2, #0
 80064ec:	f7fe fc8d 	bl	8004e0a <aci_gatt_update_char_value>
 80064f0:	4603      	mov	r3, r0
 80064f2:	75fb      	strb	r3, [r7, #23]
  else
  {
    BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Appearance\n");
  }

}
 80064f4:	bf00      	nop
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bdb0      	pop	{r4, r5, r7, pc}
 80064fc:	08007670 	.word	0x08007670
 8006500:	08007680 	.word	0x08007680
 8006504:	08007484 	.word	0x08007484

08006508 <Beacon_Update>:
static void Beacon_Update(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
  FLASH_EraseInitTypeDef erase;
  uint32_t pageError = 0;
 800650e:	2300      	movs	r3, #0
 8006510:	603b      	str	r3, [r7, #0]

  if (sector_type != 0)
 8006512:	4b13      	ldr	r3, [pc, #76]	; (8006560 <Beacon_Update+0x58>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d01b      	beq.n	8006552 <Beacon_Update+0x4a>
  {
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800651a:	2302      	movs	r3, #2
 800651c:	607b      	str	r3, [r7, #4]
    erase.Page      = sector_type;
 800651e:	4b10      	ldr	r3, [pc, #64]	; (8006560 <Beacon_Update+0x58>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	60bb      	str	r3, [r7, #8]
    if (sector_type == APP_SECTORS)
 8006524:	4b0e      	ldr	r3, [pc, #56]	; (8006560 <Beacon_Update+0x58>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b07      	cmp	r3, #7
 800652a:	d102      	bne.n	8006532 <Beacon_Update+0x2a>
    {
      erase.NbPages = 2;  /* 2 sectors for beacon application */
 800652c:	2302      	movs	r3, #2
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	e001      	b.n	8006536 <Beacon_Update+0x2e>
    }
    else
    {
      erase.NbPages = 1; /* 1 sector for beacon user data */
 8006532:	2301      	movs	r3, #1
 8006534:	60fb      	str	r3, [r7, #12]
    }

    HAL_FLASH_Unlock();
 8006536:	f7fb ff71 	bl	800241c <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 800653a:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <Beacon_Update+0x5c>)
 800653c:	f248 0211 	movw	r2, #32785	; 0x8011
 8006540:	611a      	str	r2, [r3, #16]

    HAL_FLASHEx_Erase(&erase, &pageError);
 8006542:	463a      	mov	r2, r7
 8006544:	1d3b      	adds	r3, r7, #4
 8006546:	4611      	mov	r1, r2
 8006548:	4618      	mov	r0, r3
 800654a:	f7fc f813 	bl	8002574 <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 800654e:	f7fb ff87 	bl	8002460 <HAL_FLASH_Lock>
  }

  *(uint32_t*) SRAM1_BASE = BOOT_MODE_AND_SECTOR;
 8006552:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006556:	4a04      	ldr	r2, [pc, #16]	; (8006568 <Beacon_Update+0x60>)
 8006558:	601a      	str	r2, [r3, #0]
  /**
   * Boot Mode:    1 (OTA)
   * Sector Index: 6
   * Nb Sectors  : 1
   */
  NVIC_SystemReset();
 800655a:	f7ff fe97 	bl	800628c <__NVIC_SystemReset>
 800655e:	bf00      	nop
 8006560:	2000027a 	.word	0x2000027a
 8006564:	58004000 	.word	0x58004000
 8006568:	00010601 	.word	0x00010601

0800656c <BleGetBdAddress>:
}

const uint8_t* BleGetBdAddress(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8006572:	f7ff fea1 	bl	80062b8 <LL_FLASH_GetUDN>
 8006576:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657e:	d023      	beq.n	80065c8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8006580:	f7ff feb2 	bl	80062e8 <LL_FLASH_GetSTCompanyID>
 8006584:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8006586:	f7ff fea3 	bl	80062d0 <LL_FLASH_GetDeviceID>
 800658a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	b2da      	uxtb	r2, r3
 8006590:	4b16      	ldr	r3, [pc, #88]	; (80065ec <BleGetBdAddress+0x80>)
 8006592:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	0a1b      	lsrs	r3, r3, #8
 8006598:	b2da      	uxtb	r2, r3
 800659a:	4b14      	ldr	r3, [pc, #80]	; (80065ec <BleGetBdAddress+0x80>)
 800659c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	4b12      	ldr	r3, [pc, #72]	; (80065ec <BleGetBdAddress+0x80>)
 80065a4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	4b10      	ldr	r3, [pc, #64]	; (80065ec <BleGetBdAddress+0x80>)
 80065ac:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	0a1b      	lsrs	r3, r3, #8
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <BleGetBdAddress+0x80>)
 80065b6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	0c1b      	lsrs	r3, r3, #16
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	4b0b      	ldr	r3, [pc, #44]	; (80065ec <BleGetBdAddress+0x80>)
 80065c0:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80065c2:	4b0a      	ldr	r3, [pc, #40]	; (80065ec <BleGetBdAddress+0x80>)
 80065c4:	617b      	str	r3, [r7, #20]
 80065c6:	e00b      	b.n	80065e0 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80065c8:	2000      	movs	r0, #0
 80065ca:	f7ff fd79 	bl	80060c0 <OTP_Read>
 80065ce:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	617b      	str	r3, [r7, #20]
 80065da:	e001      	b.n	80065e0 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80065dc:	4b04      	ldr	r3, [pc, #16]	; (80065f0 <BleGetBdAddress+0x84>)
 80065de:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80065e0:	697b      	ldr	r3, [r7, #20]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	20000274 	.word	0x20000274
 80065f0:	08007668 	.word	0x08007668

080065f4 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80065fc:	2100      	movs	r1, #0
 80065fe:	2002      	movs	r0, #2
 8006600:	f000 fd9e 	bl	8007140 <UTIL_SEQ_SetTask>

  return;
 8006604:	bf00      	nop
}
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8006614:	2001      	movs	r0, #1
 8006616:	f000 fdff 	bl	8007218 <UTIL_SEQ_SetEvt>

  return;
 800661a:	bf00      	nop
}
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b082      	sub	sp, #8
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800662a:	2001      	movs	r0, #1
 800662c:	f000 fe14 	bl	8007258 <UTIL_SEQ_WaitEvt>

  return;
 8006630:	bf00      	nop
}
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	3308      	adds	r3, #8
 800664a:	4618      	mov	r0, r3
 800664c:	f7fe fed6 	bl	80053fc <SVCCTL_UserEvtRx>
 8006650:	4603      	mov	r3, r0
 8006652:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8006654:	7afb      	ldrb	r3, [r7, #11]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2201      	movs	r2, #1
 800665e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8006660:	e003      	b.n	800666a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	701a      	strb	r2, [r3, #0]
  return;
 8006668:	bf00      	nop
}
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	4603      	mov	r3, r0
 8006678:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800667a:	79fb      	ldrb	r3, [r7, #7]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <BLE_StatusNot+0x16>
 8006680:	2b01      	cmp	r3, #1
 8006682:	d006      	beq.n	8006692 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8006684:	e00b      	b.n	800669e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8006686:	230f      	movs	r3, #15
 8006688:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 fd84 	bl	8007198 <UTIL_SEQ_PauseTask>
      break;
 8006690:	e005      	b.n	800669e <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8006692:	230f      	movs	r3, #15
 8006694:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 fd9e 	bl	80071d8 <UTIL_SEQ_ResumeTask>
      break;
 800669c:	bf00      	nop
  }

  return;
 800669e:	bf00      	nop
}
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <IBeacon_Init>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/

static tBleStatus IBeacon_Init(IBeacon_InitTypeDef *IBeacon_Init)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b094      	sub	sp, #80	; 0x50
 80066ac:	af08      	add	r7, sp, #32
 80066ae:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN IBeacon_Init_1 */

/* USER CODE END IBeacon_Init_1 */
  tBleStatus ret = BLE_STATUS_SUCCESS;
 80066b0:	2300      	movs	r3, #0
 80066b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint16_t AdvertisingInterval = (IBeacon_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	4a67      	ldr	r2, [pc, #412]	; (800685c <IBeacon_Init+0x1b4>)
 80066be:	fb82 1203 	smull	r1, r2, r2, r3
 80066c2:	1092      	asrs	r2, r2, #2
 80066c4:	17db      	asrs	r3, r3, #31
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* Disable scan response. */
  hci_le_set_scan_response_data(0, NULL);
 80066ca:	2100      	movs	r1, #0
 80066cc:	2000      	movs	r0, #0
 80066ce:	f7fe fd55 	bl	800517c <hci_le_set_scan_response_data>

  /* Put the device in a non-connectable mode. */
  ret = aci_gap_set_discoverable(ADV_NONCONN_IND,                          /*< Advertise as non-connectable, undirected. */
 80066d2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80066d4:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80066d6:	2300      	movs	r3, #0
 80066d8:	9306      	str	r3, [sp, #24]
 80066da:	2300      	movs	r3, #0
 80066dc:	9305      	str	r3, [sp, #20]
 80066de:	2300      	movs	r3, #0
 80066e0:	9304      	str	r3, [sp, #16]
 80066e2:	2300      	movs	r3, #0
 80066e4:	9303      	str	r3, [sp, #12]
 80066e6:	2300      	movs	r3, #0
 80066e8:	9302      	str	r3, [sp, #8]
 80066ea:	2300      	movs	r3, #0
 80066ec:	9301      	str	r3, [sp, #4]
 80066ee:	2300      	movs	r3, #0
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	2300      	movs	r3, #0
 80066f4:	2003      	movs	r0, #3
 80066f6:	f7fe f8f6 	bl	80048e6 <aci_gap_set_discoverable>
 80066fa:	4603      	mov	r3, r0
 80066fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 GAP_PUBLIC_ADDR, NO_WHITE_LIST_USE,           /*< Use the public address, with no white list. */
                                 0, NULL,                                  /*< Do not use a local name. */
                                 0, NULL,                                  /*< Do not include the service UUID list. */
                                 0, 0);                                    /*< Do not set a slave connection interval. */

  if (ret != BLE_STATUS_SUCCESS)
 8006700:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <IBeacon_Init+0x66>
  {
    return ret;
 8006708:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800670c:	e0a1      	b.n	8006852 <IBeacon_Init+0x1aa>
  }

  /* Remove the TX power level advertisement (this is done to decrease the packet size). */
  ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 800670e:	200a      	movs	r0, #10
 8006710:	f7fe fb02 	bl	8004d18 <aci_gap_delete_ad_type>
 8006714:	4603      	mov	r3, r0
 8006716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 800671a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800671e:	2b00      	cmp	r3, #0
 8006720:	d002      	beq.n	8006728 <IBeacon_Init+0x80>
  {
    return ret;
 8006722:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006726:	e094      	b.n	8006852 <IBeacon_Init+0x1aa>
  }

  uint8_t service_data[] =
 8006728:	231a      	movs	r3, #26
 800672a:	743b      	strb	r3, [r7, #16]
 800672c:	23ff      	movs	r3, #255	; 0xff
 800672e:	747b      	strb	r3, [r7, #17]
 8006730:	234c      	movs	r3, #76	; 0x4c
 8006732:	74bb      	strb	r3, [r7, #18]
 8006734:	2300      	movs	r3, #0
 8006736:	74fb      	strb	r3, [r7, #19]
 8006738:	2302      	movs	r3, #2
 800673a:	753b      	strb	r3, [r7, #20]
 800673c:	2315      	movs	r3, #21
 800673e:	757b      	strb	r3, [r7, #21]
  {
    26,                                                                      /*< Length. */
    AD_TYPE_MANUFACTURER_SPECIFIC_DATA,                                      /*< Manufacturer Specific Data data type value. */
    0x4C, 0x00, 0x02, 0x15,                                                  /*< 32-bit Manufacturer Data. */
    IBeacon_Init->UuID[0],                                                   /*< 16-byte Proximity UUID. */
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 8006746:	75bb      	strb	r3, [r7, #22]
    IBeacon_Init->UuID[1],
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800674c:	785b      	ldrb	r3, [r3, #1]
 800674e:	75fb      	strb	r3, [r7, #23]
    IBeacon_Init->UuID[2],
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8006754:	789b      	ldrb	r3, [r3, #2]
 8006756:	763b      	strb	r3, [r7, #24]
    IBeacon_Init->UuID[3],
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800675c:	78db      	ldrb	r3, [r3, #3]
 800675e:	767b      	strb	r3, [r7, #25]
    IBeacon_Init->UuID[4],
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8006764:	791b      	ldrb	r3, [r3, #4]
 8006766:	76bb      	strb	r3, [r7, #26]
    IBeacon_Init->UuID[5],
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800676c:	795b      	ldrb	r3, [r3, #5]
 800676e:	76fb      	strb	r3, [r7, #27]
    IBeacon_Init->UuID[6],
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8006774:	799b      	ldrb	r3, [r3, #6]
 8006776:	773b      	strb	r3, [r7, #28]
    IBeacon_Init->UuID[7],
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800677c:	79db      	ldrb	r3, [r3, #7]
 800677e:	777b      	strb	r3, [r7, #29]
    IBeacon_Init->UuID[8],
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8006784:	7a1b      	ldrb	r3, [r3, #8]
 8006786:	77bb      	strb	r3, [r7, #30]
    IBeacon_Init->UuID[9],
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800678c:	7a5b      	ldrb	r3, [r3, #9]
 800678e:	77fb      	strb	r3, [r7, #31]
    IBeacon_Init->UuID[10],
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8006794:	7a9b      	ldrb	r3, [r3, #10]
 8006796:	f887 3020 	strb.w	r3, [r7, #32]
    IBeacon_Init->UuID[11],
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800679e:	7adb      	ldrb	r3, [r3, #11]
 80067a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    IBeacon_Init->UuID[12],
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067a8:	7b1b      	ldrb	r3, [r3, #12]
 80067aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    IBeacon_Init->UuID[13],
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067b2:	7b5b      	ldrb	r3, [r3, #13]
 80067b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    IBeacon_Init->UuID[14],
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067bc:	7b9b      	ldrb	r3, [r3, #14]
 80067be:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    IBeacon_Init->UuID[15],
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80067c6:	7bdb      	ldrb	r3, [r3, #15]
 80067c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    IBeacon_Init->MajorID[0],                                                /*< 2-byte Major. */
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 80067d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    IBeacon_Init->MajorID[1],
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 80067da:	785b      	ldrb	r3, [r3, #1]
 80067dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    IBeacon_Init->MinorID[0],                                                /*< 2-byte Minor. */
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 80067e6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    IBeacon_Init->MinorID[1],
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68db      	ldr	r3, [r3, #12]
  uint8_t service_data[] =
 80067ee:	785b      	ldrb	r3, [r3, #1]
 80067f0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    IBeacon_Init->CalibratedTxPower,                                         /*< Ranging data. */
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	7c1b      	ldrb	r3, [r3, #16]
  uint8_t service_data[] =
 80067f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  };

  uint8_t flags[] =
 80067fc:	4a18      	ldr	r2, [pc, #96]	; (8006860 <IBeacon_Init+0x1b8>)
 80067fe:	f107 030c 	add.w	r3, r7, #12
 8006802:	6812      	ldr	r2, [r2, #0]
 8006804:	4611      	mov	r1, r2
 8006806:	8019      	strh	r1, [r3, #0]
 8006808:	3302      	adds	r3, #2
 800680a:	0c12      	lsrs	r2, r2, #16
 800680c:	701a      	strb	r2, [r3, #0]
    AD_TYPE_FLAGS,                                                          /*< Flags data type value. */
    (FLAG_BIT_LE_GENERAL_DISCOVERABLE_MODE | FLAG_BIT_BR_EDR_NOT_SUPPORTED) /*< BLE general discoverable, without BR/EDR support. */
  };

  /* Update the service data. */
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 800680e:	f107 0310 	add.w	r3, r7, #16
 8006812:	4619      	mov	r1, r3
 8006814:	201b      	movs	r0, #27
 8006816:	f7fe fa0d 	bl	8004c34 <aci_gap_update_adv_data>
 800681a:	4603      	mov	r3, r0
 800681c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8006820:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006824:	2b00      	cmp	r3, #0
 8006826:	d002      	beq.n	800682e <IBeacon_Init+0x186>
  {
    return ret;
 8006828:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800682c:	e011      	b.n	8006852 <IBeacon_Init+0x1aa>
  }

  /* Update the adverstising flags. */
  ret = aci_gap_update_adv_data(sizeof(flags), flags);
 800682e:	f107 030c 	add.w	r3, r7, #12
 8006832:	4619      	mov	r1, r3
 8006834:	2003      	movs	r0, #3
 8006836:	f7fe f9fd 	bl	8004c34 <aci_gap_update_adv_data>
 800683a:	4603      	mov	r3, r0
 800683c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8006840:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006844:	2b00      	cmp	r3, #0
 8006846:	d002      	beq.n	800684e <IBeacon_Init+0x1a6>
  {
    return ret;
 8006848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800684c:	e001      	b.n	8006852 <IBeacon_Init+0x1aa>
  }
/* USER CODE BEGIN IBeacon_Init_2 */

/* USER CODE END IBeacon_Init_2 */
  return ret;
 800684e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006852:	4618      	mov	r0, r3
 8006854:	3730      	adds	r7, #48	; 0x30
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	66666667 	.word	0x66666667
 8006860:	0800748c 	.word	0x0800748c

08006864 <IBeacon_Process>:

void IBeacon_Process(void)
{
 8006864:	b590      	push	{r4, r7, lr}
 8006866:	b08d      	sub	sp, #52	; 0x34
 8006868:	af00      	add	r7, sp, #0
/* USER CODE BEGIN IBeacon_Process_1 */

/* USER CODE END IBeacon_Process_1 */
  /* Default ibeacon */
  uint8_t UuID[]    = { UUID };
 800686a:	4b11      	ldr	r3, [pc, #68]	; (80068b0 <IBeacon_Process+0x4c>)
 800686c:	f107 0420 	add.w	r4, r7, #32
 8006870:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006872:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t MajorID[] = { MAJOR_ID };
 8006876:	f44f 7380 	mov.w	r3, #256	; 0x100
 800687a:	83bb      	strh	r3, [r7, #28]
  uint8_t MinorID[] = { MINOR_ID };
 800687c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006880:	833b      	strh	r3, [r7, #24]

  IBeacon_InitTypeDef IBeacon_InitStruct =
 8006882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006886:	80bb      	strh	r3, [r7, #4]
 8006888:	f107 0320 	add.w	r3, r7, #32
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	f107 031c 	add.w	r3, r7, #28
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	f107 0318 	add.w	r3, r7, #24
 8006898:	613b      	str	r3, [r7, #16]
 800689a:	23c1      	movs	r3, #193	; 0xc1
 800689c:	753b      	strb	r3, [r7, #20]
    data_address += 2;
    IBeacon_InitStruct.CalibratedTxPower = *(uint8_t *)(data_address);
  }
#endif

  IBeacon_Init(&IBeacon_InitStruct);
 800689e:	1d3b      	adds	r3, r7, #4
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7ff ff01 	bl	80066a8 <IBeacon_Init>
/* USER CODE BEGIN IBeacon_Process_2 */

/* USER CODE END IBeacon_Process_2 */
}
 80068a6:	bf00      	nop
 80068a8:	3734      	adds	r7, #52	; 0x34
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd90      	pop	{r4, r7, pc}
 80068ae:	bf00      	nop
 80068b0:	08007490 	.word	0x08007490

080068b4 <initTemp>:
/* USER CODE BEGIN FD */
void initTemp(void) {
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0
	  //TMP117_set_Configuration(hi2c1,0x03, 0x24, Device_ID);			// 8s continous

}
 80068b8:	bf00      	nop
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
	...

080068c4 <updateTemp>:

void updateTemp(void) {
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af00      	add	r7, sp, #0

	//HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
	//temperature_val = TMP117_get_Temperature(hi2c1, Device_ID);
	tempMSB = temperature_val >> 8;
 80068ca:	4b2b      	ldr	r3, [pc, #172]	; (8006978 <updateTemp+0xb4>)
 80068cc:	881b      	ldrh	r3, [r3, #0]
 80068ce:	0a1b      	lsrs	r3, r3, #8
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	4b29      	ldr	r3, [pc, #164]	; (800697c <updateTemp+0xb8>)
 80068d6:	701a      	strb	r2, [r3, #0]
	tempLSB = temperature_val & 0xFF;
 80068d8:	4b27      	ldr	r3, [pc, #156]	; (8006978 <updateTemp+0xb4>)
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	4b28      	ldr	r3, [pc, #160]	; (8006980 <updateTemp+0xbc>)
 80068e0:	701a      	strb	r2, [r3, #0]
	//APP_DBG_MSG("Temperature is %f\n\r",(temperature_val*0.0078));
	uint8_t service_data[] =
 80068e2:	231b      	movs	r3, #27
 80068e4:	713b      	strb	r3, [r7, #4]
 80068e6:	23ff      	movs	r3, #255	; 0xff
 80068e8:	717b      	strb	r3, [r7, #5]
 80068ea:	234c      	movs	r3, #76	; 0x4c
 80068ec:	71bb      	strb	r3, [r7, #6]
 80068ee:	2300      	movs	r3, #0
 80068f0:	71fb      	strb	r3, [r7, #7]
 80068f2:	2300      	movs	r3, #0
 80068f4:	723b      	strb	r3, [r7, #8]
 80068f6:	2300      	movs	r3, #0
 80068f8:	727b      	strb	r3, [r7, #9]
 80068fa:	2300      	movs	r3, #0
 80068fc:	72bb      	strb	r3, [r7, #10]
 80068fe:	2300      	movs	r3, #0
 8006900:	72fb      	strb	r3, [r7, #11]
 8006902:	2300      	movs	r3, #0
 8006904:	733b      	strb	r3, [r7, #12]
 8006906:	230e      	movs	r3, #14
 8006908:	737b      	strb	r3, [r7, #13]
 800690a:	238e      	movs	r3, #142	; 0x8e
 800690c:	73bb      	strb	r3, [r7, #14]
 800690e:	2322      	movs	r3, #34	; 0x22
 8006910:	73fb      	strb	r3, [r7, #15]
 8006912:	2345      	movs	r3, #69	; 0x45
 8006914:	743b      	strb	r3, [r7, #16]
 8006916:	2341      	movs	r3, #65	; 0x41
 8006918:	747b      	strb	r3, [r7, #17]
 800691a:	239d      	movs	r3, #157	; 0x9d
 800691c:	74bb      	strb	r3, [r7, #18]
 800691e:	234c      	movs	r3, #76	; 0x4c
 8006920:	74fb      	strb	r3, [r7, #19]
 8006922:	2321      	movs	r3, #33	; 0x21
 8006924:	753b      	strb	r3, [r7, #20]
 8006926:	23ed      	movs	r3, #237	; 0xed
 8006928:	757b      	strb	r3, [r7, #21]
 800692a:	23ae      	movs	r3, #174	; 0xae
 800692c:	75bb      	strb	r3, [r7, #22]
 800692e:	2382      	movs	r3, #130	; 0x82
 8006930:	75fb      	strb	r3, [r7, #23]
 8006932:	23ed      	movs	r3, #237	; 0xed
 8006934:	763b      	strb	r3, [r7, #24]
 8006936:	2319      	movs	r3, #25
 8006938:	767b      	strb	r3, [r7, #25]
 800693a:	2300      	movs	r3, #0
 800693c:	76bb      	strb	r3, [r7, #26]
 800693e:	2300      	movs	r3, #0
 8006940:	76fb      	strb	r3, [r7, #27]
 8006942:	4b0e      	ldr	r3, [pc, #56]	; (800697c <updateTemp+0xb8>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	773b      	strb	r3, [r7, #28]
 8006948:	4b0d      	ldr	r3, [pc, #52]	; (8006980 <updateTemp+0xbc>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	777b      	strb	r3, [r7, #29]
 800694e:	2300      	movs	r3, #0
 8006950:	77bb      	strb	r3, [r7, #30]
 8006952:	2300      	movs	r3, #0
 8006954:	77fb      	strb	r3, [r7, #31]
		  0x00, 0x00,					 	 	 					 /*< 2-byte Major */
		  tempMSB, tempLSB,					 		     			 /*< 2-byte Temperature Data */
		  0x00,	0x00,					     					         /*< 1-byte Power */
		};

    aci_gap_update_adv_data(sizeof(service_data), service_data);
 8006956:	1d3b      	adds	r3, r7, #4
 8006958:	4619      	mov	r1, r3
 800695a:	201c      	movs	r0, #28
 800695c:	f7fe f96a 	bl	8004c34 <aci_gap_update_adv_data>
	//TMP117_set_Configuration(hi2c1,0x0C, 0x24, Device_ID);

	// Enter STOP MODE //
	//HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x4E20, RTC_WAKEUPCLOCK_RTCCLK_DIV16);				// 10s
	HAL_SuspendTick();
 8006960:	f7fb fba2 	bl	80020a8 <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8006964:	2101      	movs	r1, #1
 8006966:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800696a:	f7fc fa33 	bl	8002dd4 <HAL_PWR_EnterSTOPMode>
}
 800696e:	bf00      	nop
 8006970:	3720      	adds	r7, #32
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	200001e0 	.word	0x200001e0
 800697c:	2000027b 	.word	0x2000027b
 8006980:	2000027c 	.word	0x2000027c

08006984 <LL_PWR_EnableBootC2>:
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8006988:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <LL_PWR_EnableBootC2+0x1c>)
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	4a04      	ldr	r2, [pc, #16]	; (80069a0 <LL_PWR_EnableBootC2+0x1c>)
 800698e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006992:	60d3      	str	r3, [r2, #12]
}
 8006994:	bf00      	nop
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	58000400 	.word	0x58000400

080069a4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80069ac:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80069ae:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80069b2:	4905      	ldr	r1, [pc, #20]	; (80069c8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	58000800 	.word	0x58000800

080069cc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80069d4:	4b05      	ldr	r3, [pc, #20]	; (80069ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80069d6:	6a1a      	ldr	r2, [r3, #32]
 80069d8:	4904      	ldr	r1, [pc, #16]	; (80069ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4313      	orrs	r3, r2
 80069de:	620b      	str	r3, [r1, #32]
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr
 80069ec:	58000800 	.word	0x58000800

080069f0 <LL_AHB3_GRP1_EnableClock>:
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80069f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80069fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4013      	ands	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a14:	68fb      	ldr	r3, [r7, #12]
}
 8006a16:	bf00      	nop
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b085      	sub	sp, #20
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8006a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a2e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006a32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8006a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a42:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4013      	ands	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
}
 8006a4e:	bf00      	nop
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr

08006a5a <LL_C1_IPCC_EnableIT_TXF>:
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	601a      	str	r2, [r3, #0]
}
 8006a6e:	bf00      	nop
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <LL_C1_IPCC_EnableIT_RXO>:
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f043 0201 	orr.w	r2, r3, #1
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	601a      	str	r2, [r3, #0]
}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <LL_C1_IPCC_EnableTransmitChannel>:
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685a      	ldr	r2, [r3, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	041b      	lsls	r3, r3, #16
 8006aac:	43db      	mvns	r3, r3
 8006aae:	401a      	ands	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	605a      	str	r2, [r3, #4]
}
 8006ab4:	bf00      	nop
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	041b      	lsls	r3, r3, #16
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	605a      	str	r2, [r3, #4]
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685a      	ldr	r2, [r3, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	43db      	mvns	r3, r3
 8006af6:	401a      	ands	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	605a      	str	r2, [r3, #4]
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	609a      	str	r2, [r3, #8]
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <LL_C1_IPCC_SetFlag_CHx>:
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	041a      	lsls	r2, r3, #16
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	609a      	str	r2, [r3, #8]
}
 8006b36:	bf00      	nop
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68da      	ldr	r2, [r3, #12]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	4013      	ands	r3, r2
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d101      	bne.n	8006b5e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e000      	b.n	8006b60 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	69da      	ldr	r2, [r3, #28]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	4013      	ands	r3, r2
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d101      	bne.n	8006b88 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
	...

08006b98 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8006b9c:	2102      	movs	r1, #2
 8006b9e:	4818      	ldr	r0, [pc, #96]	; (8006c00 <HW_IPCC_Rx_Handler+0x68>)
 8006ba0:	f7ff ffe4 	bl	8006b6c <LL_C2_IPCC_IsActiveFlag_CHx>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d008      	beq.n	8006bbc <HW_IPCC_Rx_Handler+0x24>
 8006baa:	4b15      	ldr	r3, [pc, #84]	; (8006c00 <HW_IPCC_Rx_Handler+0x68>)
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d102      	bne.n	8006bbc <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8006bb6:	f000 f8d5 	bl	8006d64 <HW_IPCC_SYS_EvtHandler>
 8006bba:	e01e      	b.n	8006bfa <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	4810      	ldr	r0, [pc, #64]	; (8006c00 <HW_IPCC_Rx_Handler+0x68>)
 8006bc0:	f7ff ffd4 	bl	8006b6c <LL_C2_IPCC_IsActiveFlag_CHx>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d008      	beq.n	8006bdc <HW_IPCC_Rx_Handler+0x44>
 8006bca:	4b0d      	ldr	r3, [pc, #52]	; (8006c00 <HW_IPCC_Rx_Handler+0x68>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d102      	bne.n	8006bdc <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8006bd6:	f000 f889 	bl	8006cec <HW_IPCC_BLE_EvtHandler>
 8006bda:	e00e      	b.n	8006bfa <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8006bdc:	2108      	movs	r1, #8
 8006bde:	4808      	ldr	r0, [pc, #32]	; (8006c00 <HW_IPCC_Rx_Handler+0x68>)
 8006be0:	f7ff ffc4 	bl	8006b6c <LL_C2_IPCC_IsActiveFlag_CHx>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d008      	beq.n	8006bfc <HW_IPCC_Rx_Handler+0x64>
 8006bea:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <HW_IPCC_Rx_Handler+0x68>)
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f003 0308 	and.w	r3, r3, #8
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d102      	bne.n	8006bfc <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8006bf6:	f000 f901 	bl	8006dfc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8006bfa:	bf00      	nop
 8006bfc:	bf00      	nop
}
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	58000c00 	.word	0x58000c00

08006c04 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8006c08:	2102      	movs	r1, #2
 8006c0a:	4818      	ldr	r0, [pc, #96]	; (8006c6c <HW_IPCC_Tx_Handler+0x68>)
 8006c0c:	f7ff ff99 	bl	8006b42 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d108      	bne.n	8006c28 <HW_IPCC_Tx_Handler+0x24>
 8006c16:	4b15      	ldr	r3, [pc, #84]	; (8006c6c <HW_IPCC_Tx_Handler+0x68>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d102      	bne.n	8006c28 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8006c22:	f000 f893 	bl	8006d4c <HW_IPCC_SYS_CmdEvtHandler>
 8006c26:	e01e      	b.n	8006c66 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8006c28:	2108      	movs	r1, #8
 8006c2a:	4810      	ldr	r0, [pc, #64]	; (8006c6c <HW_IPCC_Tx_Handler+0x68>)
 8006c2c:	f7ff ff89 	bl	8006b42 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d108      	bne.n	8006c48 <HW_IPCC_Tx_Handler+0x44>
 8006c36:	4b0d      	ldr	r3, [pc, #52]	; (8006c6c <HW_IPCC_Tx_Handler+0x68>)
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d102      	bne.n	8006c48 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8006c42:	f000 f8bd 	bl	8006dc0 <HW_IPCC_MM_FreeBufHandler>
 8006c46:	e00e      	b.n	8006c66 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8006c48:	2120      	movs	r1, #32
 8006c4a:	4808      	ldr	r0, [pc, #32]	; (8006c6c <HW_IPCC_Tx_Handler+0x68>)
 8006c4c:	f7ff ff79 	bl	8006b42 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d108      	bne.n	8006c68 <HW_IPCC_Tx_Handler+0x64>
 8006c56:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <HW_IPCC_Tx_Handler+0x68>)
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d102      	bne.n	8006c68 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8006c62:	f000 f84f 	bl	8006d04 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8006c66:	bf00      	nop
 8006c68:	bf00      	nop
}
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	58000c00 	.word	0x58000c00

08006c70 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8006c74:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006c78:	f7ff fed3 	bl	8006a22 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8006c7c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006c80:	f7ff fea4 	bl	80069cc <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8006c84:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006c88:	f7ff fe8c 	bl	80069a4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8006c8c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8006c8e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8006c90:	f7ff fe78 	bl	8006984 <LL_PWR_EnableBootC2>

  return;
 8006c94:	bf00      	nop
}
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8006c9c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006ca0:	f7ff fea6 	bl	80069f0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8006ca4:	4806      	ldr	r0, [pc, #24]	; (8006cc0 <HW_IPCC_Init+0x28>)
 8006ca6:	f7ff fee8 	bl	8006a7a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8006caa:	4805      	ldr	r0, [pc, #20]	; (8006cc0 <HW_IPCC_Init+0x28>)
 8006cac:	f7ff fed5 	bl	8006a5a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006cb0:	202c      	movs	r0, #44	; 0x2c
 8006cb2:	f7fb fb6e 	bl	8002392 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006cb6:	202d      	movs	r0, #45	; 0x2d
 8006cb8:	f7fb fb6b 	bl	8002392 <HAL_NVIC_EnableIRQ>

  return;
 8006cbc:	bf00      	nop
}
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	58000c00 	.word	0x58000c00

08006cc4 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006cc8:	2101      	movs	r1, #1
 8006cca:	4802      	ldr	r0, [pc, #8]	; (8006cd4 <HW_IPCC_BLE_Init+0x10>)
 8006ccc:	f7ff ff0a 	bl	8006ae4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006cd0:	bf00      	nop
}
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	58000c00 	.word	0x58000c00

08006cd8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 8006cdc:	2101      	movs	r1, #1
 8006cde:	4802      	ldr	r0, [pc, #8]	; (8006ce8 <HW_IPCC_BLE_SendCmd+0x10>)
 8006ce0:	f7ff ff20 	bl	8006b24 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006ce4:	bf00      	nop
}
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	58000c00 	.word	0x58000c00

08006cec <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8006cf0:	f7ff f82e 	bl	8005d50 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	4802      	ldr	r0, [pc, #8]	; (8006d00 <HW_IPCC_BLE_EvtHandler+0x14>)
 8006cf8:	f7ff ff06 	bl	8006b08 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006cfc:	bf00      	nop
}
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	58000c00 	.word	0x58000c00

08006d04 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8006d08:	2120      	movs	r1, #32
 8006d0a:	4803      	ldr	r0, [pc, #12]	; (8006d18 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8006d0c:	f7ff fed8 	bl	8006ac0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8006d10:	f7ff f84e 	bl	8005db0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8006d14:	bf00      	nop
}
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	58000c00 	.word	0x58000c00

08006d1c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006d20:	2102      	movs	r1, #2
 8006d22:	4802      	ldr	r0, [pc, #8]	; (8006d2c <HW_IPCC_SYS_Init+0x10>)
 8006d24:	f7ff fede 	bl	8006ae4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006d28:	bf00      	nop
}
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	58000c00 	.word	0x58000c00

08006d30 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006d34:	2102      	movs	r1, #2
 8006d36:	4804      	ldr	r0, [pc, #16]	; (8006d48 <HW_IPCC_SYS_SendCmd+0x18>)
 8006d38:	f7ff fef4 	bl	8006b24 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006d3c:	2102      	movs	r1, #2
 8006d3e:	4802      	ldr	r0, [pc, #8]	; (8006d48 <HW_IPCC_SYS_SendCmd+0x18>)
 8006d40:	f7ff feab 	bl	8006a9a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8006d44:	bf00      	nop
}
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	58000c00 	.word	0x58000c00

08006d4c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006d50:	2102      	movs	r1, #2
 8006d52:	4803      	ldr	r0, [pc, #12]	; (8006d60 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8006d54:	f7ff feb4 	bl	8006ac0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8006d58:	f7ff f87a 	bl	8005e50 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8006d5c:	bf00      	nop
}
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	58000c00 	.word	0x58000c00

08006d64 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8006d68:	f7ff f888 	bl	8005e7c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006d6c:	2102      	movs	r1, #2
 8006d6e:	4802      	ldr	r0, [pc, #8]	; (8006d78 <HW_IPCC_SYS_EvtHandler+0x14>)
 8006d70:	f7ff feca 	bl	8006b08 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006d74:	bf00      	nop
}
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	58000c00 	.word	0x58000c00

08006d7c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8006d84:	2108      	movs	r1, #8
 8006d86:	480c      	ldr	r0, [pc, #48]	; (8006db8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006d88:	f7ff fedb 	bl	8006b42 <LL_C1_IPCC_IsActiveFlag_CHx>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d007      	beq.n	8006da2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8006d92:	4a0a      	ldr	r2, [pc, #40]	; (8006dbc <HW_IPCC_MM_SendFreeBuf+0x40>)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006d98:	2108      	movs	r1, #8
 8006d9a:	4807      	ldr	r0, [pc, #28]	; (8006db8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006d9c:	f7ff fe7d 	bl	8006a9a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8006da0:	e006      	b.n	8006db0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006da6:	2108      	movs	r1, #8
 8006da8:	4803      	ldr	r0, [pc, #12]	; (8006db8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006daa:	f7ff febb 	bl	8006b24 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8006dae:	bf00      	nop
}
 8006db0:	3708      	adds	r7, #8
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	58000c00 	.word	0x58000c00
 8006dbc:	20000280 	.word	0x20000280

08006dc0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006dc4:	2108      	movs	r1, #8
 8006dc6:	4806      	ldr	r0, [pc, #24]	; (8006de0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006dc8:	f7ff fe7a 	bl	8006ac0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006dd2:	2108      	movs	r1, #8
 8006dd4:	4802      	ldr	r0, [pc, #8]	; (8006de0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006dd6:	f7ff fea5 	bl	8006b24 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006dda:	bf00      	nop
}
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	58000c00 	.word	0x58000c00
 8006de4:	20000280 	.word	0x20000280

08006de8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006dec:	2108      	movs	r1, #8
 8006dee:	4802      	ldr	r0, [pc, #8]	; (8006df8 <HW_IPCC_TRACES_Init+0x10>)
 8006df0:	f7ff fe78 	bl	8006ae4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006df4:	bf00      	nop
}
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	58000c00 	.word	0x58000c00

08006dfc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8006e00:	f7ff f8e4 	bl	8005fcc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006e04:	2108      	movs	r1, #8
 8006e06:	4802      	ldr	r0, [pc, #8]	; (8006e10 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8006e08:	f7ff fe7e 	bl	8006b08 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006e0c:	bf00      	nop
}
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	58000c00 	.word	0x58000c00

08006e14 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8006e14:	b480      	push	{r7}
 8006e16:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8006e18:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <UTIL_LPM_Init+0x1c>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8006e1e:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <UTIL_LPM_Init+0x20>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8006e24:	bf00      	nop
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	20000284 	.word	0x20000284
 8006e34:	20000288 	.word	0x20000288

08006e38 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	460b      	mov	r3, r1
 8006e42:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e44:	f3ef 8310 	mrs	r3, PRIMASK
 8006e48:	613b      	str	r3, [r7, #16]
  return(result);
 8006e4a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8006e4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006e4e:	b672      	cpsid	i
}
 8006e50:	bf00      	nop
  
  switch(state)
 8006e52:	78fb      	ldrb	r3, [r7, #3]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d008      	beq.n	8006e6a <UTIL_LPM_SetOffMode+0x32>
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d10e      	bne.n	8006e7a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8006e5c:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <UTIL_LPM_SetOffMode+0x5c>)
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	4a0b      	ldr	r2, [pc, #44]	; (8006e94 <UTIL_LPM_SetOffMode+0x5c>)
 8006e66:	6013      	str	r3, [r2, #0]
      break;
 8006e68:	e008      	b.n	8006e7c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	43da      	mvns	r2, r3
 8006e6e:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <UTIL_LPM_SetOffMode+0x5c>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4013      	ands	r3, r2
 8006e74:	4a07      	ldr	r2, [pc, #28]	; (8006e94 <UTIL_LPM_SetOffMode+0x5c>)
 8006e76:	6013      	str	r3, [r2, #0]
      break;
 8006e78:	e000      	b.n	8006e7c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8006e7a:	bf00      	nop
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f383 8810 	msr	PRIMASK, r3
}
 8006e86:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8006e88:	bf00      	nop
 8006e8a:	371c      	adds	r7, #28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	20000288 	.word	0x20000288

08006e98 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea2:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8006ea6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ea8:	b672      	cpsid	i
}
 8006eaa:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8006eac:	4b12      	ldr	r3, [pc, #72]	; (8006ef8 <UTIL_LPM_EnterLowPower+0x60>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d006      	beq.n	8006ec2 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8006eb4:	4b11      	ldr	r3, [pc, #68]	; (8006efc <UTIL_LPM_EnterLowPower+0x64>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8006eba:	4b10      	ldr	r3, [pc, #64]	; (8006efc <UTIL_LPM_EnterLowPower+0x64>)
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	4798      	blx	r3
 8006ec0:	e010      	b.n	8006ee4 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8006ec2:	4b0f      	ldr	r3, [pc, #60]	; (8006f00 <UTIL_LPM_EnterLowPower+0x68>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d006      	beq.n	8006ed8 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8006eca:	4b0c      	ldr	r3, [pc, #48]	; (8006efc <UTIL_LPM_EnterLowPower+0x64>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8006ed0:	4b0a      	ldr	r3, [pc, #40]	; (8006efc <UTIL_LPM_EnterLowPower+0x64>)
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	4798      	blx	r3
 8006ed6:	e005      	b.n	8006ee4 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8006ed8:	4b08      	ldr	r3, [pc, #32]	; (8006efc <UTIL_LPM_EnterLowPower+0x64>)
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8006ede:	4b07      	ldr	r3, [pc, #28]	; (8006efc <UTIL_LPM_EnterLowPower+0x64>)
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	4798      	blx	r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f383 8810 	msr	PRIMASK, r3
}
 8006eee:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8006ef0:	bf00      	nop
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	20000284 	.word	0x20000284
 8006efc:	080075d0 	.word	0x080075d0
 8006f00:	20000288 	.word	0x20000288

08006f04 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b090      	sub	sp, #64	; 0x40
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8006f0c:	4b73      	ldr	r3, [pc, #460]	; (80070dc <UTIL_SEQ_Run+0x1d8>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8006f12:	4b72      	ldr	r3, [pc, #456]	; (80070dc <UTIL_SEQ_Run+0x1d8>)
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4013      	ands	r3, r2
 8006f1a:	4a70      	ldr	r2, [pc, #448]	; (80070dc <UTIL_SEQ_Run+0x1d8>)
 8006f1c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8006f1e:	4b70      	ldr	r3, [pc, #448]	; (80070e0 <UTIL_SEQ_Run+0x1dc>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8006f24:	4b6f      	ldr	r3, [pc, #444]	; (80070e4 <UTIL_SEQ_Run+0x1e0>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8006f2a:	4b6f      	ldr	r3, [pc, #444]	; (80070e8 <UTIL_SEQ_Run+0x1e4>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8006f30:	4b6e      	ldr	r3, [pc, #440]	; (80070ec <UTIL_SEQ_Run+0x1e8>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8006f36:	e08d      	b.n	8007054 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8006f3c:	e002      	b.n	8006f44 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8006f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f40:	3301      	adds	r3, #1
 8006f42:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8006f44:	4a6a      	ldr	r2, [pc, #424]	; (80070f0 <UTIL_SEQ_Run+0x1ec>)
 8006f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f48:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	401a      	ands	r2, r3
 8006f50:	4b62      	ldr	r3, [pc, #392]	; (80070dc <UTIL_SEQ_Run+0x1d8>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4013      	ands	r3, r2
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d0f1      	beq.n	8006f3e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8006f5a:	4a65      	ldr	r2, [pc, #404]	; (80070f0 <UTIL_SEQ_Run+0x1ec>)
 8006f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f5e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f64:	401a      	ands	r2, r3
 8006f66:	4b5d      	ldr	r3, [pc, #372]	; (80070dc <UTIL_SEQ_Run+0x1d8>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8006f6e:	4a60      	ldr	r2, [pc, #384]	; (80070f0 <UTIL_SEQ_Run+0x1ec>)
 8006f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f72:	00db      	lsls	r3, r3, #3
 8006f74:	4413      	add	r3, r2
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d106      	bne.n	8006f8e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8006f80:	4a5b      	ldr	r2, [pc, #364]	; (80070f0 <UTIL_SEQ_Run+0x1ec>)
 8006f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f84:	00db      	lsls	r3, r3, #3
 8006f86:	4413      	add	r3, r2
 8006f88:	f04f 32ff 	mov.w	r2, #4294967295
 8006f8c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8006f8e:	4a58      	ldr	r2, [pc, #352]	; (80070f0 <UTIL_SEQ_Run+0x1ec>)
 8006f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f92:	00db      	lsls	r3, r3, #3
 8006f94:	4413      	add	r3, r2
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 f9b3 	bl	8007308 <SEQ_BitPosition>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	4b53      	ldr	r3, [pc, #332]	; (80070f4 <UTIL_SEQ_Run+0x1f0>)
 8006fa8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8006faa:	4a51      	ldr	r2, [pc, #324]	; (80070f0 <UTIL_SEQ_Run+0x1ec>)
 8006fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	4413      	add	r3, r2
 8006fb2:	685a      	ldr	r2, [r3, #4]
 8006fb4:	4b4f      	ldr	r3, [pc, #316]	; (80070f4 <UTIL_SEQ_Run+0x1f0>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2101      	movs	r1, #1
 8006fba:	fa01 f303 	lsl.w	r3, r1, r3
 8006fbe:	43db      	mvns	r3, r3
 8006fc0:	401a      	ands	r2, r3
 8006fc2:	494b      	ldr	r1, [pc, #300]	; (80070f0 <UTIL_SEQ_Run+0x1ec>)
 8006fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	440b      	add	r3, r1
 8006fca:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8006fd0:	61bb      	str	r3, [r7, #24]
  return(result);
 8006fd2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8006fd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8006fd6:	b672      	cpsid	i
}
 8006fd8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8006fda:	4b46      	ldr	r3, [pc, #280]	; (80070f4 <UTIL_SEQ_Run+0x1f0>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe4:	43da      	mvns	r2, r3
 8006fe6:	4b3e      	ldr	r3, [pc, #248]	; (80070e0 <UTIL_SEQ_Run+0x1dc>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4013      	ands	r3, r2
 8006fec:	4a3c      	ldr	r2, [pc, #240]	; (80070e0 <UTIL_SEQ_Run+0x1dc>)
 8006fee:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ff4:	e013      	b.n	800701e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8006ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	4a3d      	ldr	r2, [pc, #244]	; (80070f0 <UTIL_SEQ_Run+0x1ec>)
 8006ffc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8007000:	4b3c      	ldr	r3, [pc, #240]	; (80070f4 <UTIL_SEQ_Run+0x1f0>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2201      	movs	r2, #1
 8007006:	fa02 f303 	lsl.w	r3, r2, r3
 800700a:	43da      	mvns	r2, r3
 800700c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800700e:	3b01      	subs	r3, #1
 8007010:	400a      	ands	r2, r1
 8007012:	4937      	ldr	r1, [pc, #220]	; (80070f0 <UTIL_SEQ_Run+0x1ec>)
 8007014:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8007018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800701a:	3b01      	subs	r3, #1
 800701c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800701e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1e8      	bne.n	8006ff6 <UTIL_SEQ_Run+0xf2>
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f383 8810 	msr	PRIMASK, r3
}
 800702e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8007030:	4b30      	ldr	r3, [pc, #192]	; (80070f4 <UTIL_SEQ_Run+0x1f0>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a30      	ldr	r2, [pc, #192]	; (80070f8 <UTIL_SEQ_Run+0x1f4>)
 8007036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800703a:	4798      	blx	r3

    local_taskset = TaskSet;
 800703c:	4b28      	ldr	r3, [pc, #160]	; (80070e0 <UTIL_SEQ_Run+0x1dc>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8007042:	4b28      	ldr	r3, [pc, #160]	; (80070e4 <UTIL_SEQ_Run+0x1e0>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8007048:	4b27      	ldr	r3, [pc, #156]	; (80070e8 <UTIL_SEQ_Run+0x1e4>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800704e:	4b27      	ldr	r3, [pc, #156]	; (80070ec <UTIL_SEQ_Run+0x1e8>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8007054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	401a      	ands	r2, r3
 800705a:	4b20      	ldr	r3, [pc, #128]	; (80070dc <UTIL_SEQ_Run+0x1d8>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4013      	ands	r3, r2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d005      	beq.n	8007070 <UTIL_SEQ_Run+0x16c>
 8007064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007068:	4013      	ands	r3, r2
 800706a:	2b00      	cmp	r3, #0
 800706c:	f43f af64 	beq.w	8006f38 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8007070:	4b20      	ldr	r3, [pc, #128]	; (80070f4 <UTIL_SEQ_Run+0x1f0>)
 8007072:	f04f 32ff 	mov.w	r2, #4294967295
 8007076:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8007078:	f000 f938 	bl	80072ec <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800707c:	f3ef 8310 	mrs	r3, PRIMASK
 8007080:	613b      	str	r3, [r7, #16]
  return(result);
 8007082:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8007084:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8007086:	b672      	cpsid	i
}
 8007088:	bf00      	nop
  local_taskset = TaskSet;
 800708a:	4b15      	ldr	r3, [pc, #84]	; (80070e0 <UTIL_SEQ_Run+0x1dc>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8007090:	4b14      	ldr	r3, [pc, #80]	; (80070e4 <UTIL_SEQ_Run+0x1e0>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8007096:	4b14      	ldr	r3, [pc, #80]	; (80070e8 <UTIL_SEQ_Run+0x1e4>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800709c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800709e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a0:	401a      	ands	r2, r3
 80070a2:	4b0e      	ldr	r3, [pc, #56]	; (80070dc <UTIL_SEQ_Run+0x1d8>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4013      	ands	r3, r2
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d107      	bne.n	80070bc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80070ac:	4b0f      	ldr	r3, [pc, #60]	; (80070ec <UTIL_SEQ_Run+0x1e8>)
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b2:	4013      	ands	r3, r2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d101      	bne.n	80070bc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80070b8:	f7f9 fbf1 	bl	800089e <UTIL_SEQ_Idle>
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f383 8810 	msr	PRIMASK, r3
}
 80070c6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80070c8:	f000 f917 	bl	80072fa <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80070cc:	4a03      	ldr	r2, [pc, #12]	; (80070dc <UTIL_SEQ_Run+0x1d8>)
 80070ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d0:	6013      	str	r3, [r2, #0]

  return;
 80070d2:	bf00      	nop
}
 80070d4:	3740      	adds	r7, #64	; 0x40
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20000020 	.word	0x20000020
 80070e0:	2000028c 	.word	0x2000028c
 80070e4:	20000290 	.word	0x20000290
 80070e8:	2000001c 	.word	0x2000001c
 80070ec:	20000294 	.word	0x20000294
 80070f0:	2000031c 	.word	0x2000031c
 80070f4:	20000298 	.word	0x20000298
 80070f8:	2000029c 	.word	0x2000029c

080070fc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b088      	sub	sp, #32
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007108:	f3ef 8310 	mrs	r3, PRIMASK
 800710c:	617b      	str	r3, [r7, #20]
  return(result);
 800710e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8007110:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8007112:	b672      	cpsid	i
}
 8007114:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 f8f6 	bl	8007308 <SEQ_BitPosition>
 800711c:	4603      	mov	r3, r0
 800711e:	4619      	mov	r1, r3
 8007120:	4a06      	ldr	r2, [pc, #24]	; (800713c <UTIL_SEQ_RegTask+0x40>)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	f383 8810 	msr	PRIMASK, r3
}
 8007132:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8007134:	bf00      	nop
}
 8007136:	3720      	adds	r7, #32
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	2000029c 	.word	0x2000029c

08007140 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8007140:	b480      	push	{r7}
 8007142:	b087      	sub	sp, #28
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800714a:	f3ef 8310 	mrs	r3, PRIMASK
 800714e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007150:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007152:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007154:	b672      	cpsid	i
}
 8007156:	bf00      	nop

  TaskSet |= TaskId_bm;
 8007158:	4b0d      	ldr	r3, [pc, #52]	; (8007190 <UTIL_SEQ_SetTask+0x50>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4313      	orrs	r3, r2
 8007160:	4a0b      	ldr	r2, [pc, #44]	; (8007190 <UTIL_SEQ_SetTask+0x50>)
 8007162:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8007164:	4a0b      	ldr	r2, [pc, #44]	; (8007194 <UTIL_SEQ_SetTask+0x54>)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	431a      	orrs	r2, r3
 8007170:	4908      	ldr	r1, [pc, #32]	; (8007194 <UTIL_SEQ_SetTask+0x54>)
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	f383 8810 	msr	PRIMASK, r3
}
 8007182:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007184:	bf00      	nop
}
 8007186:	371c      	adds	r7, #28
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	2000028c 	.word	0x2000028c
 8007194:	2000031c 	.word	0x2000031c

08007198 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071a0:	f3ef 8310 	mrs	r3, PRIMASK
 80071a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80071a6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80071a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80071aa:	b672      	cpsid	i
}
 80071ac:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	43da      	mvns	r2, r3
 80071b2:	4b08      	ldr	r3, [pc, #32]	; (80071d4 <UTIL_SEQ_PauseTask+0x3c>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4013      	ands	r3, r2
 80071b8:	4a06      	ldr	r2, [pc, #24]	; (80071d4 <UTIL_SEQ_PauseTask+0x3c>)
 80071ba:	6013      	str	r3, [r2, #0]
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f383 8810 	msr	PRIMASK, r3
}
 80071c6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80071c8:	bf00      	nop
}
 80071ca:	371c      	adds	r7, #28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr
 80071d4:	2000001c 	.word	0x2000001c

080071d8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071e0:	f3ef 8310 	mrs	r3, PRIMASK
 80071e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80071e6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80071e8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80071ea:	b672      	cpsid	i
}
 80071ec:	bf00      	nop

  TaskMask |= TaskId_bm;
 80071ee:	4b09      	ldr	r3, [pc, #36]	; (8007214 <UTIL_SEQ_ResumeTask+0x3c>)
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	4a07      	ldr	r2, [pc, #28]	; (8007214 <UTIL_SEQ_ResumeTask+0x3c>)
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f383 8810 	msr	PRIMASK, r3
}
 8007204:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007206:	bf00      	nop
}
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	2000001c 	.word	0x2000001c

08007218 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8007218:	b480      	push	{r7}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007220:	f3ef 8310 	mrs	r3, PRIMASK
 8007224:	60fb      	str	r3, [r7, #12]
  return(result);
 8007226:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007228:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800722a:	b672      	cpsid	i
}
 800722c:	bf00      	nop

  EvtSet |= EvtId_bm;
 800722e:	4b09      	ldr	r3, [pc, #36]	; (8007254 <UTIL_SEQ_SetEvt+0x3c>)
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4313      	orrs	r3, r2
 8007236:	4a07      	ldr	r2, [pc, #28]	; (8007254 <UTIL_SEQ_SetEvt+0x3c>)
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f383 8810 	msr	PRIMASK, r3
}
 8007244:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007246:	bf00      	nop
}
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	20000290 	.word	0x20000290

08007258 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b088      	sub	sp, #32
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8007260:	4b1f      	ldr	r3, [pc, #124]	; (80072e0 <UTIL_SEQ_WaitEvt+0x88>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8007266:	4b1e      	ldr	r3, [pc, #120]	; (80072e0 <UTIL_SEQ_WaitEvt+0x88>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726e:	d102      	bne.n	8007276 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8007270:	2300      	movs	r3, #0
 8007272:	61fb      	str	r3, [r7, #28]
 8007274:	e005      	b.n	8007282 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8007276:	4b1a      	ldr	r3, [pc, #104]	; (80072e0 <UTIL_SEQ_WaitEvt+0x88>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2201      	movs	r2, #1
 800727c:	fa02 f303 	lsl.w	r3, r2, r3
 8007280:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8007282:	4b18      	ldr	r3, [pc, #96]	; (80072e4 <UTIL_SEQ_WaitEvt+0x8c>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8007288:	4a16      	ldr	r2, [pc, #88]	; (80072e4 <UTIL_SEQ_WaitEvt+0x8c>)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800728e:	e003      	b.n	8007298 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	69f8      	ldr	r0, [r7, #28]
 8007294:	f7f9 fb09 	bl	80008aa <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8007298:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <UTIL_SEQ_WaitEvt+0x90>)
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4013      	ands	r3, r2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d0f5      	beq.n	8007290 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80072a4:	4a0e      	ldr	r2, [pc, #56]	; (80072e0 <UTIL_SEQ_WaitEvt+0x88>)
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072aa:	f3ef 8310 	mrs	r3, PRIMASK
 80072ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80072b0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80072b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80072b4:	b672      	cpsid	i
}
 80072b6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	43da      	mvns	r2, r3
 80072bc:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <UTIL_SEQ_WaitEvt+0x90>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4013      	ands	r3, r2
 80072c2:	4a09      	ldr	r2, [pc, #36]	; (80072e8 <UTIL_SEQ_WaitEvt+0x90>)
 80072c4:	6013      	str	r3, [r2, #0]
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f383 8810 	msr	PRIMASK, r3
}
 80072d0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80072d2:	4a04      	ldr	r2, [pc, #16]	; (80072e4 <UTIL_SEQ_WaitEvt+0x8c>)
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	6013      	str	r3, [r2, #0]
  return;
 80072d8:	bf00      	nop
}
 80072da:	3720      	adds	r7, #32
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	20000298 	.word	0x20000298
 80072e4:	20000294 	.word	0x20000294
 80072e8:	20000290 	.word	0x20000290

080072ec <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80072f0:	bf00      	nop
}
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80072fa:	b480      	push	{r7}
 80072fc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80072fe:	bf00      	nop
}
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	0c1b      	lsrs	r3, r3, #16
 800731c:	041b      	lsls	r3, r3, #16
 800731e:	2b00      	cmp	r3, #0
 8007320:	d104      	bne.n	800732c <SEQ_BitPosition+0x24>
 8007322:	2310      	movs	r3, #16
 8007324:	73fb      	strb	r3, [r7, #15]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	041b      	lsls	r3, r3, #16
 800732a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d105      	bne.n	8007342 <SEQ_BitPosition+0x3a>
 8007336:	7bfb      	ldrb	r3, [r7, #15]
 8007338:	3308      	adds	r3, #8
 800733a:	73fb      	strb	r3, [r7, #15]
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	021b      	lsls	r3, r3, #8
 8007340:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d105      	bne.n	8007358 <SEQ_BitPosition+0x50>
 800734c:	7bfb      	ldrb	r3, [r7, #15]
 800734e:	3304      	adds	r3, #4
 8007350:	73fb      	strb	r3, [r7, #15]
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	011b      	lsls	r3, r3, #4
 8007356:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	0f1b      	lsrs	r3, r3, #28
 800735c:	4a07      	ldr	r2, [pc, #28]	; (800737c <SEQ_BitPosition+0x74>)
 800735e:	5cd2      	ldrb	r2, [r2, r3]
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	4413      	add	r3, r2
 8007364:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8007366:	7bfb      	ldrb	r3, [r7, #15]
 8007368:	f1c3 031f 	rsb	r3, r3, #31
 800736c:	b2db      	uxtb	r3, r3
}
 800736e:	4618      	mov	r0, r3
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	08007690 	.word	0x08007690

08007380 <memset>:
 8007380:	4402      	add	r2, r0
 8007382:	4603      	mov	r3, r0
 8007384:	4293      	cmp	r3, r2
 8007386:	d100      	bne.n	800738a <memset+0xa>
 8007388:	4770      	bx	lr
 800738a:	f803 1b01 	strb.w	r1, [r3], #1
 800738e:	e7f9      	b.n	8007384 <memset+0x4>

08007390 <__libc_init_array>:
 8007390:	b570      	push	{r4, r5, r6, lr}
 8007392:	4d0d      	ldr	r5, [pc, #52]	; (80073c8 <__libc_init_array+0x38>)
 8007394:	4c0d      	ldr	r4, [pc, #52]	; (80073cc <__libc_init_array+0x3c>)
 8007396:	1b64      	subs	r4, r4, r5
 8007398:	10a4      	asrs	r4, r4, #2
 800739a:	2600      	movs	r6, #0
 800739c:	42a6      	cmp	r6, r4
 800739e:	d109      	bne.n	80073b4 <__libc_init_array+0x24>
 80073a0:	4d0b      	ldr	r5, [pc, #44]	; (80073d0 <__libc_init_array+0x40>)
 80073a2:	4c0c      	ldr	r4, [pc, #48]	; (80073d4 <__libc_init_array+0x44>)
 80073a4:	f000 f826 	bl	80073f4 <_init>
 80073a8:	1b64      	subs	r4, r4, r5
 80073aa:	10a4      	asrs	r4, r4, #2
 80073ac:	2600      	movs	r6, #0
 80073ae:	42a6      	cmp	r6, r4
 80073b0:	d105      	bne.n	80073be <__libc_init_array+0x2e>
 80073b2:	bd70      	pop	{r4, r5, r6, pc}
 80073b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073b8:	4798      	blx	r3
 80073ba:	3601      	adds	r6, #1
 80073bc:	e7ee      	b.n	800739c <__libc_init_array+0xc>
 80073be:	f855 3b04 	ldr.w	r3, [r5], #4
 80073c2:	4798      	blx	r3
 80073c4:	3601      	adds	r6, #1
 80073c6:	e7f2      	b.n	80073ae <__libc_init_array+0x1e>
 80073c8:	080076a0 	.word	0x080076a0
 80073cc:	080076a0 	.word	0x080076a0
 80073d0:	080076a0 	.word	0x080076a0
 80073d4:	080076a4 	.word	0x080076a4

080073d8 <memcpy>:
 80073d8:	440a      	add	r2, r1
 80073da:	4291      	cmp	r1, r2
 80073dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80073e0:	d100      	bne.n	80073e4 <memcpy+0xc>
 80073e2:	4770      	bx	lr
 80073e4:	b510      	push	{r4, lr}
 80073e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073ee:	4291      	cmp	r1, r2
 80073f0:	d1f9      	bne.n	80073e6 <memcpy+0xe>
 80073f2:	bd10      	pop	{r4, pc}

080073f4 <_init>:
 80073f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f6:	bf00      	nop
 80073f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073fa:	bc08      	pop	{r3}
 80073fc:	469e      	mov	lr, r3
 80073fe:	4770      	bx	lr

08007400 <_fini>:
 8007400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007402:	bf00      	nop
 8007404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007406:	bc08      	pop	{r3}
 8007408:	469e      	mov	lr, r3
 800740a:	4770      	bx	lr
