
beacon_multitemp_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ed0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  0800a00c  0800a00c  0001a00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a2a0  0800a2a0  0001a2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a2a4  0800a2a4  0001a2a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000004  0800a2a8  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 BLE_DRIVER_CONTEXT 00000035  20000024  0800a2c8  00020024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  2000005c  0800a2fd  0002005c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000454  20000070  0800a30e  00020070  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  200004c4  0800a30e  000204c4  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 12 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 13 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 14 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 15 .debug_info   00031c31  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006f0b  00000000  00000000  00051d11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002f78  00000000  00000000  00058c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002468  00000000  00000000  0005bb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002a02b  00000000  00000000  0005e000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00034e45  00000000  00000000  0008802b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000e91da  00000000  00000000  000bce70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000c870  00000000  00000000  001a604c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000076  00000000  00000000  001b28bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000070 	.word	0x20000070
 8000158:	00000000 	.word	0x00000000
 800015c:	08009ff4 	.word	0x08009ff4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000074 	.word	0x20000074
 8000178:	08009ff4 	.word	0x08009ff4

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <TMP117_get_Temperature>:
   @Description   Function gives to us ambient temperature
   @Parameter     I2C_HandleTypeDef ->  HAL_I2C Handle
   @Return value  Float
 */
uint16_t TMP117_get_Temperature             (I2C_HandleTypeDef i2c, uint8_t TMP117_DeviceID)
{
 800018c:	b084      	sub	sp, #16
 800018e:	b580      	push	{r7, lr}
 8000190:	b082      	sub	sp, #8
 8000192:	af02      	add	r7, sp, #8
 8000194:	f107 0c08 	add.w	ip, r7, #8
 8000198:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      buf[0]=TMP117_TemperatureRegister;
 800019c:	4b14      	ldr	r3, [pc, #80]	; (80001f0 <TMP117_get_Temperature+0x64>)
 800019e:	2200      	movs	r2, #0
 80001a0:	701a      	strb	r2, [r3, #0]

      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,1,100);
 80001a2:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80001a6:	b299      	uxth	r1, r3
 80001a8:	2364      	movs	r3, #100	; 0x64
 80001aa:	9300      	str	r3, [sp, #0]
 80001ac:	2301      	movs	r3, #1
 80001ae:	4a10      	ldr	r2, [pc, #64]	; (80001f0 <TMP117_get_Temperature+0x64>)
 80001b0:	f107 0008 	add.w	r0, r7, #8
 80001b4:	f004 faaa 	bl	800470c <HAL_I2C_Master_Transmit>
      HAL_I2C_Master_Receive(&i2c,TMP117_DeviceID,buf,2,100);
 80001b8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80001bc:	b299      	uxth	r1, r3
 80001be:	2364      	movs	r3, #100	; 0x64
 80001c0:	9300      	str	r3, [sp, #0]
 80001c2:	2302      	movs	r3, #2
 80001c4:	4a0a      	ldr	r2, [pc, #40]	; (80001f0 <TMP117_get_Temperature+0x64>)
 80001c6:	f107 0008 	add.w	r0, r7, #8
 80001ca:	f004 fbb7 	bl	800493c <HAL_I2C_Master_Receive>

      return (((buf[0]<<8)|buf[1]));
 80001ce:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <TMP117_get_Temperature+0x64>)
 80001d0:	781b      	ldrb	r3, [r3, #0]
 80001d2:	021b      	lsls	r3, r3, #8
 80001d4:	b21a      	sxth	r2, r3
 80001d6:	4b06      	ldr	r3, [pc, #24]	; (80001f0 <TMP117_get_Temperature+0x64>)
 80001d8:	785b      	ldrb	r3, [r3, #1]
 80001da:	b21b      	sxth	r3, r3
 80001dc:	4313      	orrs	r3, r2
 80001de:	b21b      	sxth	r3, r3
 80001e0:	b29b      	uxth	r3, r3
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	46bd      	mov	sp, r7
 80001e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80001ea:	b004      	add	sp, #16
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	2000008c 	.word	0x2000008c

080001f4 <TMP117_set_Configuration>:
                  uint8_t first     ->  [15:8]
                  uint8_t second    ->  [7:0]
   @Return value  void
 */
void TMP117_set_Configuration            (I2C_HandleTypeDef i2c,uint8_t first,uint8_t second, uint8_t TMP117_DeviceID)
{
 80001f4:	b084      	sub	sp, #16
 80001f6:	b580      	push	{r7, lr}
 80001f8:	b082      	sub	sp, #8
 80001fa:	af02      	add	r7, sp, #8
 80001fc:	f107 0c08 	add.w	ip, r7, #8
 8000200:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      static uint8_t buf[3];
      buf[0]=TMP117_ConfigurationRegister;
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <TMP117_set_Configuration+0x48>)
 8000206:	2201      	movs	r2, #1
 8000208:	701a      	strb	r2, [r3, #0]
      buf[1]=first;
 800020a:	4a0c      	ldr	r2, [pc, #48]	; (800023c <TMP117_set_Configuration+0x48>)
 800020c:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8000210:	7053      	strb	r3, [r2, #1]
      buf[2]=second;
 8000212:	4a0a      	ldr	r2, [pc, #40]	; (800023c <TMP117_set_Configuration+0x48>)
 8000214:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8000218:	7093      	strb	r3, [r2, #2]
      HAL_I2C_Master_Transmit(&i2c,TMP117_DeviceID,buf,3,100);
 800021a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800021e:	b299      	uxth	r1, r3
 8000220:	2364      	movs	r3, #100	; 0x64
 8000222:	9300      	str	r3, [sp, #0]
 8000224:	2303      	movs	r3, #3
 8000226:	4a05      	ldr	r2, [pc, #20]	; (800023c <TMP117_set_Configuration+0x48>)
 8000228:	f107 0008 	add.w	r0, r7, #8
 800022c:	f004 fa6e 	bl	800470c <HAL_I2C_Master_Transmit>
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000238:	b004      	add	sp, #16
 800023a:	4770      	bx	lr
 800023c:	20000090 	.word	0x20000090

08000240 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8000240:	b5b0      	push	{r4, r5, r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000246:	4b15      	ldr	r3, [pc, #84]	; (800029c <APPD_EnableCPU2+0x5c>)
 8000248:	881a      	ldrh	r2, [r3, #0]
 800024a:	4b15      	ldr	r3, [pc, #84]	; (80002a0 <APPD_EnableCPU2+0x60>)
 800024c:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800024e:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <APPD_EnableCPU2+0x64>)
 8000250:	881a      	ldrh	r2, [r3, #0]
 8000252:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <APPD_EnableCPU2+0x60>)
 8000254:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <APPD_EnableCPU2+0x68>)
 8000258:	881a      	ldrh	r2, [r3, #0]
 800025a:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <APPD_EnableCPU2+0x60>)
 800025c:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 800025e:	4b13      	ldr	r3, [pc, #76]	; (80002ac <APPD_EnableCPU2+0x6c>)
 8000260:	881a      	ldrh	r2, [r3, #0]
 8000262:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <APPD_EnableCPU2+0x60>)
 8000264:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 8000266:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <APPD_EnableCPU2+0x70>)
 8000268:	881a      	ldrh	r2, [r3, #0]
 800026a:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <APPD_EnableCPU2+0x60>)
 800026c:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800026e:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <APPD_EnableCPU2+0x74>)
 8000270:	1d3c      	adds	r4, r7, #4
 8000272:	461d      	mov	r5, r3
 8000274:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000276:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000278:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800027c:	c403      	stmia	r4!, {r0, r1}
 800027e:	8022      	strh	r2, [r4, #0]
 8000280:	3402      	adds	r4, #2
 8000282:	0c13      	lsrs	r3, r2, #16
 8000284:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000286:	f008 fbab 	bl	80089e0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f007 fe3c 	bl	8007f0a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000292:	bf00      	nop
}
 8000294:	3720      	adds	r7, #32
 8000296:	46bd      	mov	sp, r7
 8000298:	bdb0      	pop	{r4, r5, r7, pc}
 800029a:	bf00      	nop
 800029c:	20000004 	.word	0x20000004
 80002a0:	200301e8 	.word	0x200301e8
 80002a4:	20000006 	.word	0x20000006
 80002a8:	20000008 	.word	0x20000008
 80002ac:	2000000a 	.word	0x2000000a
 80002b0:	2000000c 	.word	0x2000000c
 80002b4:	0800a00c 	.word	0x0800a00c

080002b8 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <LL_PWR_SMPS_Enable+0x1c>)
 80002be:	69db      	ldr	r3, [r3, #28]
 80002c0:	4a04      	ldr	r2, [pc, #16]	; (80002d4 <LL_PWR_SMPS_Enable+0x1c>)
 80002c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002c6:	61d3      	str	r3, [r2, #28]
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	58000400 	.word	0x58000400

080002d8 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80002e2:	69db      	ldr	r3, [r3, #28]
 80002e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80002e8:	4904      	ldr	r1, [pc, #16]	; (80002fc <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	61cb      	str	r3, [r1, #28]
}
 80002f0:	bf00      	nop
 80002f2:	370c      	adds	r7, #12
 80002f4:	46bd      	mov	sp, r7
 80002f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fa:	4770      	bx	lr
 80002fc:	58000400 	.word	0x58000400

08000300 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8000300:	b480      	push	{r7}
 8000302:	b087      	sub	sp, #28
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	0a1b      	lsrs	r3, r3, #8
 800030e:	f003 030f 	and.w	r3, r3, #15
 8000312:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	2b00      	cmp	r3, #0
 8000318:	d108      	bne.n	800032c <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 800031a:	4b15      	ldr	r3, [pc, #84]	; (8000370 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800031c:	69db      	ldr	r3, [r3, #28]
 800031e:	f023 020f 	bic.w	r2, r3, #15
 8000322:	4913      	ldr	r1, [pc, #76]	; (8000370 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	4313      	orrs	r3, r2
 8000328:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 800032a:	e019      	b.n	8000360 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	3b06      	subs	r3, #6
 8000330:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	693a      	ldr	r2, [r7, #16]
 8000336:	4413      	add	r3, r2
 8000338:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	2b00      	cmp	r3, #0
 800033e:	da02      	bge.n	8000346 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
 8000344:	e004      	b.n	8000350 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8000346:	697b      	ldr	r3, [r7, #20]
 8000348:	2b0f      	cmp	r3, #15
 800034a:	dd01      	ble.n	8000350 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 800034c:	230f      	movs	r3, #15
 800034e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8000350:	4b07      	ldr	r3, [pc, #28]	; (8000370 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000352:	69db      	ldr	r3, [r3, #28]
 8000354:	f023 020f 	bic.w	r2, r3, #15
 8000358:	697b      	ldr	r3, [r7, #20]
 800035a:	4905      	ldr	r1, [pc, #20]	; (8000370 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800035c:	4313      	orrs	r3, r2
 800035e:	61cb      	str	r3, [r1, #28]
}
 8000360:	bf00      	nop
 8000362:	371c      	adds	r7, #28
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	1fff7558 	.word	0x1fff7558
 8000370:	58000400 	.word	0x58000400

08000374 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <LL_C2_PWR_SetPowerMode+0x28>)
 800037e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000382:	f023 0207 	bic.w	r2, r3, #7
 8000386:	4905      	ldr	r1, [pc, #20]	; (800039c <LL_C2_PWR_SetPowerMode+0x28>)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4313      	orrs	r3, r2
 800038c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000390:	bf00      	nop
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	58000400 	.word	0x58000400

080003a0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80003aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80003ae:	4905      	ldr	r1, [pc, #20]	; (80003c4 <LL_EXTI_EnableIT_32_63+0x24>)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4313      	orrs	r3, r2
 80003b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80003b8:	bf00      	nop
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	58000800 	.word	0x58000800

080003c8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80003d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003d4:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80003d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80003da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80003e2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	021b      	lsls	r3, r3, #8
 80003ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80003ee:	4313      	orrs	r3, r2
 80003f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80003f4:	bf00      	nop
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	cafecafe 	.word	0xcafecafe

08000404 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800040c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4313      	orrs	r3, r2
 800041e:	608b      	str	r3, [r1, #8]
}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr

0800042c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000438:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800043c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800044e:	b480      	push	{r7}
 8000450:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800045a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800045e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000462:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800047c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000480:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000484:	d101      	bne.n	800048a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000486:	2301      	movs	r3, #1
 8000488:	e000      	b.n	800048c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800048a:	2300      	movs	r3, #0
}
 800048c:	4618      	mov	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr

08000496 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800049a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800049e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80004a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80004aa:	d101      	bne.n	80004b0 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80004ac:	2301      	movs	r3, #1
 80004ae:	e000      	b.n	80004b2 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80004b0:	2300      	movs	r3, #0
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr

080004bc <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80004c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80004ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4313      	orrs	r3, r2
 80004d2:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80004d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004e0:	68fb      	ldr	r3, [r7, #12]
}
 80004e2:	bf00      	nop
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
	...

080004f0 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <LL_DBGMCU_GetDeviceID+0x18>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	e0042000 	.word	0xe0042000

0800050c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000510:	4b04      	ldr	r3, [pc, #16]	; (8000524 <LL_DBGMCU_GetRevisionID+0x18>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	0c1b      	lsrs	r3, r3, #16
 8000516:	b29b      	uxth	r3, r3
}
 8000518:	4618      	mov	r0, r3
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	e0042000 	.word	0xe0042000

08000528 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	685a      	ldr	r2, [r3, #4]
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	041b      	lsls	r3, r3, #16
 800053a:	431a      	orrs	r2, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	605a      	str	r2, [r3, #4]
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr

0800054c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	685a      	ldr	r2, [r3, #4]
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	431a      	orrs	r2, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	605a      	str	r2, [r3, #4]
}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800056e:	b480      	push	{r7}
 8000570:	b083      	sub	sp, #12
 8000572:	af00      	add	r7, sp, #0
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	695a      	ldr	r2, [r3, #20]
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	041b      	lsls	r3, r3, #16
 8000580:	431a      	orrs	r2, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	615a      	str	r2, [r3, #20]
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	695a      	ldr	r2, [r3, #20]
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	431a      	orrs	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	615a      	str	r2, [r3, #20]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr

080005b4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	609a      	str	r2, [r3, #8]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	683a      	ldr	r2, [r7, #0]
 80005de:	619a      	str	r2, [r3, #24]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	22ff      	movs	r2, #255	; 0xff
 80005f8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000606:	b480      	push	{r7}
 8000608:	b083      	sub	sp, #12
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	22ca      	movs	r2, #202	; 0xca
 8000612:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2253      	movs	r2, #83	; 0x53
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
}
 800061a:	bf00      	nop
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
 800062e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	689b      	ldr	r3, [r3, #8]
 8000634:	f023 0207 	bic.w	r2, r3, #7
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	431a      	orrs	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	609a      	str	r2, [r3, #8]
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <MX_APPE_Config+0x18>)
 8000652:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000656:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000658:	f000 f829 	bl	80006ae <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800065c:	f000 f868 	bl	8000730 <Config_HSE>

  return;
 8000660:	bf00      	nop
}
 8000662:	bd80      	pop	{r7, pc}
 8000664:	58004000 	.word	0x58004000

08000668 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800066c:	f000 f874 	bl	8000758 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000670:	f000 f88c 	bl	800078c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000674:	4903      	ldr	r1, [pc, #12]	; (8000684 <MX_APPE_Init+0x1c>)
 8000676:	2000      	movs	r0, #0
 8000678:	f000 fdb4 	bl	80011e4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800067c:	f000 f896 	bl	80007ac <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000680:	bf00      	nop
}
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000278 	.word	0x20000278

08000688 <Init_Smps>:

void Init_Smps(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 800068c:	2000      	movs	r0, #0
 800068e:	f7ff fe23 	bl	80002d8 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 8000692:	2004      	movs	r0, #4
 8000694:	f7ff fe34 	bl	8000300 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8000698:	f7ff fe0e 	bl	80002b8 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 800069c:	bf00      	nop
}
 800069e:	bd80      	pop	{r7, pc}

080006a0 <Init_Exti>:

void Init_Exti(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80006a4:	2050      	movs	r0, #80	; 0x50
 80006a6:	f7ff fe7b 	bl	80003a0 <LL_EXTI_EnableIT_32_63>

  return;
 80006aa:	bf00      	nop
}
 80006ac:	bd80      	pop	{r7, pc}

080006ae <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80006b2:	f000 f804 	bl	80006be <Reset_BackupDomain>

  Reset_IPCC();
 80006b6:	f000 f819 	bl	80006ec <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80006ba:	bf00      	nop
}
 80006bc:	bd80      	pop	{r7, pc}

080006be <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80006c2:	f7ff fed5 	bl	8000470 <LL_RCC_IsActiveFlag_PINRST>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d00d      	beq.n	80006e8 <Reset_BackupDomain+0x2a>
 80006cc:	f7ff fee3 	bl	8000496 <LL_RCC_IsActiveFlag_SFTRST>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d108      	bne.n	80006e8 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80006d6:	f004 fdd7 	bl	8005288 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80006da:	f004 fdd5 	bl	8005288 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80006de:	f7ff fea5 	bl	800042c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80006e2:	f7ff feb4 	bl	800044e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
}
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80006f0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80006f4:	f7ff fee2 	bl	80004bc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80006f8:	213f      	movs	r1, #63	; 0x3f
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <Reset_IPCC+0x40>)
 80006fc:	f7ff ff5a 	bl	80005b4 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000700:	213f      	movs	r1, #63	; 0x3f
 8000702:	480a      	ldr	r0, [pc, #40]	; (800072c <Reset_IPCC+0x40>)
 8000704:	f7ff ff64 	bl	80005d0 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000708:	213f      	movs	r1, #63	; 0x3f
 800070a:	4808      	ldr	r0, [pc, #32]	; (800072c <Reset_IPCC+0x40>)
 800070c:	f7ff ff0c 	bl	8000528 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000710:	213f      	movs	r1, #63	; 0x3f
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <Reset_IPCC+0x40>)
 8000714:	f7ff ff2b 	bl	800056e <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000718:	213f      	movs	r1, #63	; 0x3f
 800071a:	4804      	ldr	r0, [pc, #16]	; (800072c <Reset_IPCC+0x40>)
 800071c:	f7ff ff16 	bl	800054c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000720:	213f      	movs	r1, #63	; 0x3f
 8000722:	4802      	ldr	r0, [pc, #8]	; (800072c <Reset_IPCC+0x40>)
 8000724:	f7ff ff35 	bl	8000592 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000728:	bf00      	nop
}
 800072a:	bd80      	pop	{r7, pc}
 800072c:	58000c00 	.word	0x58000c00

08000730 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000736:	2000      	movs	r0, #0
 8000738:	f008 f9de 	bl	8008af8 <OTP_Read>
 800073c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d005      	beq.n	8000750 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	799b      	ldrb	r3, [r3, #6]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fe3d 	bl	80003c8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800074e:	bf00      	nop
 8000750:	bf00      	nop
}
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <System_Init>:

static void System_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  Init_Smps();
 800075c:	f7ff ff94 	bl	8000688 <Init_Smps>

  Init_Exti();
 8000760:	f7ff ff9e 	bl	80006a0 <Init_Exti>

  Init_Rtc();
 8000764:	f000 f802 	bl	800076c <Init_Rtc>

  return;
 8000768:	bf00      	nop
}
 800076a:	bd80      	pop	{r7, pc}

0800076c <Init_Rtc>:

static void Init_Rtc(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000770:	4805      	ldr	r0, [pc, #20]	; (8000788 <Init_Rtc+0x1c>)
 8000772:	f7ff ff48 	bl	8000606 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000776:	2100      	movs	r1, #0
 8000778:	4803      	ldr	r0, [pc, #12]	; (8000788 <Init_Rtc+0x1c>)
 800077a:	f7ff ff54 	bl	8000626 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800077e:	4802      	ldr	r0, [pc, #8]	; (8000788 <Init_Rtc+0x1c>)
 8000780:	f7ff ff34 	bl	80005ec <LL_RTC_EnableWriteProtection>

  return;
 8000784:	bf00      	nop
}
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40002800 	.word	0x40002800

0800078c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000790:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000794:	f7ff fe36 	bl	8000404 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000798:	f009 f93c 	bl	8009a14 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800079c:	2004      	movs	r0, #4
 800079e:	f7ff fde9 	bl	8000374 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 80007a2:	f004 fda9 	bl	80052f8 <HAL_PWREx_EnableSRAMRetention>

  return;
 80007a6:	bf00      	nop
}
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80007b2:	f007 ff5f 	bl	8008674 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80007b6:	4a11      	ldr	r2, [pc, #68]	; (80007fc <appe_Tl_Init+0x50>)
 80007b8:	2100      	movs	r1, #0
 80007ba:	2010      	movs	r0, #16
 80007bc:	f009 fa9e 	bl	8009cfc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <appe_Tl_Init+0x54>)
 80007c2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <appe_Tl_Init+0x58>)
 80007c6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	480e      	ldr	r0, [pc, #56]	; (8000808 <appe_Tl_Init+0x5c>)
 80007ce:	f007 fe13 	bl	80083f8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <appe_Tl_Init+0x60>)
 80007d4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <appe_Tl_Init+0x64>)
 80007d8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <appe_Tl_Init+0x68>)
 80007dc:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80007de:	f240 533c 	movw	r3, #1340	; 0x53c
 80007e2:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	4618      	mov	r0, r3
 80007ea:	f008 f885 	bl	80088f8 <TL_MM_Init>

  TL_Enable();
 80007ee:	f007 ff3b 	bl	8008668 <TL_Enable>

  return;
 80007f2:	bf00      	nop
}
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	08008431 	.word	0x08008431
 8000800:	20030734 	.word	0x20030734
 8000804:	08000819 	.word	0x08000819
 8000808:	08000831 	.word	0x08000831
 800080c:	2003094c 	.word	0x2003094c
 8000810:	20030840 	.word	0x20030840
 8000814:	200301f8 	.word	0x200301f8

08000818 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000822:	bf00      	nop
}
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	330b      	adds	r3, #11
 800083e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	b29b      	uxth	r3, r3
 8000846:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800084a:	2b07      	cmp	r3, #7
 800084c:	d81f      	bhi.n	800088e <APPE_SysUserEvtRx+0x5e>
 800084e:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <APPE_SysUserEvtRx+0x24>)
 8000850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000854:	08000875 	.word	0x08000875
 8000858:	08000887 	.word	0x08000887
 800085c:	0800088f 	.word	0x0800088f
 8000860:	0800088f 	.word	0x0800088f
 8000864:	0800088f 	.word	0x0800088f
 8000868:	0800088f 	.word	0x0800088f
 800086c:	0800088f 	.word	0x0800088f
 8000870:	0800088f 	.word	0x0800088f
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4618      	mov	r0, r3
 800087a:	f007 fb73 	bl	8007f64 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f000 f81b 	bl	80008ba <APPE_SysEvtReadyProcessing>
    break;
 8000884:	e004      	b.n	8000890 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f000 f806 	bl	8000898 <APPE_SysEvtError>
    break;
 800088c:	e000      	b.n	8000890 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800088e:	bf00      	nop
  }

  return;
 8000890:	bf00      	nop
}
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	330b      	adds	r3, #11
 80008a6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3302      	adds	r3, #2
 80008ac:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80008ae:	bf00      	nop
}
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b08a      	sub	sp, #40	; 0x28
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	330b      	adds	r3, #11
 80008de:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80008e0:	69fb      	ldr	r3, [r7, #28]
 80008e2:	3302      	adds	r3, #2
 80008e4:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80008e6:	69bb      	ldr	r3, [r7, #24]
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d11d      	bne.n	800092a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80008ee:	f7ff fca7 	bl	8000240 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80008f2:	230f      	movs	r3, #15
 80008f4:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80008f6:	237f      	movs	r3, #127	; 0x7f
 80008f8:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80008fa:	f7ff fe07 	bl	800050c <LL_DBGMCU_GetRevisionID>
 80008fe:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000902:	b29b      	uxth	r3, r3
 8000904:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8000906:	f7ff fdf3 	bl	80004f0 <LL_DBGMCU_GetDeviceID>
 800090a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 800090c:	6a3b      	ldr	r3, [r7, #32]
 800090e:	b29b      	uxth	r3, r3
 8000910:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	4618      	mov	r0, r3
 8000918:	f007 fb0e 	bl	8007f38 <SHCI_C2_Config>

    APP_BLE_Init();
 800091c:	f008 fa0c 	bl	8008d38 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000920:	2100      	movs	r1, #0
 8000922:	2001      	movs	r0, #1
 8000924:	f009 f888 	bl	8009a38 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000928:	e007      	b.n	800093a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d103      	bne.n	800093a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2200      	movs	r2, #0
 8000936:	701a      	strb	r2, [r3, #0]
  return;
 8000938:	bf00      	nop
 800093a:	bf00      	nop
}
 800093c:	3728      	adds	r7, #40	; 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000946:	f04f 30ff 	mov.w	r0, #4294967295
 800094a:	f009 f8db 	bl	8009b04 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}

08000952 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 8000956:	f009 f89f 	bl	8009a98 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800095a:	bf00      	nop
}
 800095c:	bd80      	pop	{r7, pc}

0800095e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000968:	f04f 30ff 	mov.w	r0, #4294967295
 800096c:	f009 f8ca 	bl	8009b04 <UTIL_SEQ_Run>
  return;
 8000970:	bf00      	nop
}
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000980:	2100      	movs	r1, #0
 8000982:	2010      	movs	r0, #16
 8000984:	f009 f9dc 	bl	8009d40 <UTIL_SEQ_SetTask>
  return;
 8000988:	bf00      	nop
}
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000998:	2002      	movs	r0, #2
 800099a:	f009 fa3d 	bl	8009e18 <UTIL_SEQ_SetEvt>
  return;
 800099e:	bf00      	nop
}
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80009ae:	2002      	movs	r0, #2
 80009b0:	f009 fa52 	bl	8009e58 <UTIL_SEQ_WaitEvt>
  return;
 80009b4:	bf00      	nop
}
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <LL_EXTI_EnableIT_0_31>:
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <LL_EXTI_EnableIT_0_31+0x24>)
 80009c6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80009ca:	4905      	ldr	r1, [pc, #20]	; (80009e0 <LL_EXTI_EnableIT_0_31+0x24>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	58000800 	.word	0x58000800

080009e4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4904      	ldr	r1, [pc, #16]	; (8000a04 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	600b      	str	r3, [r1, #0]

}
 80009f8:	bf00      	nop
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	58000800 	.word	0x58000800

08000a08 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	; (8000a44 <ReadRtcSsrValue+0x3c>)
 8000a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <ReadRtcSsrValue+0x3c>)
 8000a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000a1e:	e005      	b.n	8000a2c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a24:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <ReadRtcSsrValue+0x3c>)
 8000a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d1f5      	bne.n	8000a20 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000a34:	683b      	ldr	r3, [r7, #0]
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40002800 	.word	0x40002800

08000a48 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	460a      	mov	r2, r1
 8000a52:	71fb      	strb	r3, [r7, #7]
 8000a54:	4613      	mov	r3, r2
 8000a56:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000a58:	79ba      	ldrb	r2, [r7, #6]
 8000a5a:	491d      	ldr	r1, [pc, #116]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	4413      	add	r3, r2
 8000a62:	00db      	lsls	r3, r3, #3
 8000a64:	440b      	add	r3, r1
 8000a66:	3315      	adds	r3, #21
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d009      	beq.n	8000a86 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000a72:	7bfa      	ldrb	r2, [r7, #15]
 8000a74:	4916      	ldr	r1, [pc, #88]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000a76:	4613      	mov	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4413      	add	r3, r2
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	440b      	add	r3, r1
 8000a80:	3314      	adds	r3, #20
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	4911      	ldr	r1, [pc, #68]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	4413      	add	r3, r2
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	440b      	add	r3, r1
 8000a94:	3315      	adds	r3, #21
 8000a96:	7bfa      	ldrb	r2, [r7, #15]
 8000a98:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000a9a:	79fa      	ldrb	r2, [r7, #7]
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	440b      	add	r3, r1
 8000aa8:	3314      	adds	r3, #20
 8000aaa:	79ba      	ldrb	r2, [r7, #6]
 8000aac:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000aae:	79ba      	ldrb	r2, [r7, #6]
 8000ab0:	4907      	ldr	r1, [pc, #28]	; (8000ad0 <LinkTimerAfter+0x88>)
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	4413      	add	r3, r2
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	440b      	add	r3, r1
 8000abc:	3315      	adds	r3, #21
 8000abe:	79fa      	ldrb	r2, [r7, #7]
 8000ac0:	701a      	strb	r2, [r3, #0]

  return;
 8000ac2:	bf00      	nop
}
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000094 	.word	0x20000094

08000ad4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	460a      	mov	r2, r1
 8000ade:	71fb      	strb	r3, [r7, #7]
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000ae4:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <LinkTimerBefore+0xb8>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	79ba      	ldrb	r2, [r7, #6]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d032      	beq.n	8000b56 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000af0:	79ba      	ldrb	r2, [r7, #6]
 8000af2:	4927      	ldr	r1, [pc, #156]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000af4:	4613      	mov	r3, r2
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	4413      	add	r3, r2
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	440b      	add	r3, r1
 8000afe:	3314      	adds	r3, #20
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000b04:	7bfa      	ldrb	r2, [r7, #15]
 8000b06:	4922      	ldr	r1, [pc, #136]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	00db      	lsls	r3, r3, #3
 8000b10:	440b      	add	r3, r1
 8000b12:	3315      	adds	r3, #21
 8000b14:	79fa      	ldrb	r2, [r7, #7]
 8000b16:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b18:	79fa      	ldrb	r2, [r7, #7]
 8000b1a:	491d      	ldr	r1, [pc, #116]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	440b      	add	r3, r1
 8000b26:	3315      	adds	r3, #21
 8000b28:	79ba      	ldrb	r2, [r7, #6]
 8000b2a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b2c:	79fa      	ldrb	r2, [r7, #7]
 8000b2e:	4918      	ldr	r1, [pc, #96]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b30:	4613      	mov	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4413      	add	r3, r2
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	440b      	add	r3, r1
 8000b3a:	3314      	adds	r3, #20
 8000b3c:	7bfa      	ldrb	r2, [r7, #15]
 8000b3e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b40:	79ba      	ldrb	r2, [r7, #6]
 8000b42:	4913      	ldr	r1, [pc, #76]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b44:	4613      	mov	r3, r2
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	4413      	add	r3, r2
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	440b      	add	r3, r1
 8000b4e:	3314      	adds	r3, #20
 8000b50:	79fa      	ldrb	r2, [r7, #7]
 8000b52:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000b54:	e014      	b.n	8000b80 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b56:	79fa      	ldrb	r2, [r7, #7]
 8000b58:	490d      	ldr	r1, [pc, #52]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4413      	add	r3, r2
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	440b      	add	r3, r1
 8000b64:	3315      	adds	r3, #21
 8000b66:	79ba      	ldrb	r2, [r7, #6]
 8000b68:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b6a:	79ba      	ldrb	r2, [r7, #6]
 8000b6c:	4908      	ldr	r1, [pc, #32]	; (8000b90 <LinkTimerBefore+0xbc>)
 8000b6e:	4613      	mov	r3, r2
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	4413      	add	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	440b      	add	r3, r1
 8000b78:	3314      	adds	r3, #20
 8000b7a:	79fa      	ldrb	r2, [r7, #7]
 8000b7c:	701a      	strb	r2, [r3, #0]
  return;
 8000b7e:	bf00      	nop
}
 8000b80:	3714      	adds	r7, #20
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	20000124 	.word	0x20000124
 8000b90:	20000094 	.word	0x20000094

08000b94 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b9e:	4b4e      	ldr	r3, [pc, #312]	; (8000cd8 <linkTimer+0x144>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b06      	cmp	r3, #6
 8000ba6:	d118      	bne.n	8000bda <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ba8:	4b4b      	ldr	r3, [pc, #300]	; (8000cd8 <linkTimer+0x144>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4b4b      	ldr	r3, [pc, #300]	; (8000cdc <linkTimer+0x148>)
 8000bb0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000bb2:	4a49      	ldr	r2, [pc, #292]	; (8000cd8 <linkTimer+0x144>)
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000bb8:	79fa      	ldrb	r2, [r7, #7]
 8000bba:	4949      	ldr	r1, [pc, #292]	; (8000ce0 <linkTimer+0x14c>)
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	4413      	add	r3, r2
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	440b      	add	r3, r1
 8000bc6:	3315      	adds	r3, #21
 8000bc8:	2206      	movs	r2, #6
 8000bca:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000bcc:	4b45      	ldr	r3, [pc, #276]	; (8000ce4 <linkTimer+0x150>)
 8000bce:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	81fb      	strh	r3, [r7, #14]
 8000bd8:	e078      	b.n	8000ccc <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000bda:	f000 f909 	bl	8000df0 <ReturnTimeElapsed>
 8000bde:	4603      	mov	r3, r0
 8000be0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000be2:	79fa      	ldrb	r2, [r7, #7]
 8000be4:	493e      	ldr	r1, [pc, #248]	; (8000ce0 <linkTimer+0x14c>)
 8000be6:	4613      	mov	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4413      	add	r3, r2
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	440b      	add	r3, r1
 8000bf0:	3308      	adds	r3, #8
 8000bf2:	6819      	ldr	r1, [r3, #0]
 8000bf4:	89fb      	ldrh	r3, [r7, #14]
 8000bf6:	79fa      	ldrb	r2, [r7, #7]
 8000bf8:	4419      	add	r1, r3
 8000bfa:	4839      	ldr	r0, [pc, #228]	; (8000ce0 <linkTimer+0x14c>)
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	4413      	add	r3, r2
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	4403      	add	r3, r0
 8000c06:	3308      	adds	r3, #8
 8000c08:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000c0a:	79fa      	ldrb	r2, [r7, #7]
 8000c0c:	4934      	ldr	r1, [pc, #208]	; (8000ce0 <linkTimer+0x14c>)
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	440b      	add	r3, r1
 8000c18:	3308      	adds	r3, #8
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c1e:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <linkTimer+0x144>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	4619      	mov	r1, r3
 8000c26:	4a2e      	ldr	r2, [pc, #184]	; (8000ce0 <linkTimer+0x14c>)
 8000c28:	460b      	mov	r3, r1
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	440b      	add	r3, r1
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	4413      	add	r3, r2
 8000c32:	3308      	adds	r3, #8
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d337      	bcc.n	8000cac <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <linkTimer+0x144>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000c42:	7b7a      	ldrb	r2, [r7, #13]
 8000c44:	4926      	ldr	r1, [pc, #152]	; (8000ce0 <linkTimer+0x14c>)
 8000c46:	4613      	mov	r3, r2
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	4413      	add	r3, r2
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	440b      	add	r3, r1
 8000c50:	3315      	adds	r3, #21
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c56:	e013      	b.n	8000c80 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000c58:	7b7a      	ldrb	r2, [r7, #13]
 8000c5a:	4921      	ldr	r1, [pc, #132]	; (8000ce0 <linkTimer+0x14c>)
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	4413      	add	r3, r2
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	440b      	add	r3, r1
 8000c66:	3315      	adds	r3, #21
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000c6c:	7b7a      	ldrb	r2, [r7, #13]
 8000c6e:	491c      	ldr	r1, [pc, #112]	; (8000ce0 <linkTimer+0x14c>)
 8000c70:	4613      	mov	r3, r2
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	4413      	add	r3, r2
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	440b      	add	r3, r1
 8000c7a:	3315      	adds	r3, #21
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c80:	7b3b      	ldrb	r3, [r7, #12]
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d00b      	beq.n	8000c9e <linkTimer+0x10a>
 8000c86:	7b3a      	ldrb	r2, [r7, #12]
 8000c88:	4915      	ldr	r1, [pc, #84]	; (8000ce0 <linkTimer+0x14c>)
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	4413      	add	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	440b      	add	r3, r1
 8000c94:	3308      	adds	r3, #8
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d2dc      	bcs.n	8000c58 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000c9e:	7b7a      	ldrb	r2, [r7, #13]
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fecf 	bl	8000a48 <LinkTimerAfter>
 8000caa:	e00f      	b.n	8000ccc <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <linkTimer+0x144>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff ff0c 	bl	8000ad4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <linkTimer+0x144>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <linkTimer+0x148>)
 8000cc4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000cc6:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <linkTimer+0x144>)
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000ccc:	89fb      	ldrh	r3, [r7, #14]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000124 	.word	0x20000124
 8000cdc:	20000125 	.word	0x20000125
 8000ce0:	20000094 	.word	0x20000094
 8000ce4:	20000128 	.word	0x20000128

08000ce8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	460a      	mov	r2, r1
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000cf8:	4b39      	ldr	r3, [pc, #228]	; (8000de0 <UnlinkTimer+0xf8>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	79fa      	ldrb	r2, [r7, #7]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d111      	bne.n	8000d28 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d04:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <UnlinkTimer+0xf8>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4b36      	ldr	r3, [pc, #216]	; (8000de4 <UnlinkTimer+0xfc>)
 8000d0c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000d0e:	79fa      	ldrb	r2, [r7, #7]
 8000d10:	4935      	ldr	r1, [pc, #212]	; (8000de8 <UnlinkTimer+0x100>)
 8000d12:	4613      	mov	r3, r2
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	4413      	add	r3, r2
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	440b      	add	r3, r1
 8000d1c:	3315      	adds	r3, #21
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <UnlinkTimer+0xf8>)
 8000d24:	701a      	strb	r2, [r3, #0]
 8000d26:	e03e      	b.n	8000da6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d28:	79fa      	ldrb	r2, [r7, #7]
 8000d2a:	492f      	ldr	r1, [pc, #188]	; (8000de8 <UnlinkTimer+0x100>)
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	4413      	add	r3, r2
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	440b      	add	r3, r1
 8000d36:	3314      	adds	r3, #20
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000d3c:	79fa      	ldrb	r2, [r7, #7]
 8000d3e:	492a      	ldr	r1, [pc, #168]	; (8000de8 <UnlinkTimer+0x100>)
 8000d40:	4613      	mov	r3, r2
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	4413      	add	r3, r2
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	440b      	add	r3, r1
 8000d4a:	3315      	adds	r3, #21
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000d50:	79f9      	ldrb	r1, [r7, #7]
 8000d52:	7bfa      	ldrb	r2, [r7, #15]
 8000d54:	4824      	ldr	r0, [pc, #144]	; (8000de8 <UnlinkTimer+0x100>)
 8000d56:	460b      	mov	r3, r1
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	440b      	add	r3, r1
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	4403      	add	r3, r0
 8000d60:	3315      	adds	r3, #21
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2d8      	uxtb	r0, r3
 8000d66:	4920      	ldr	r1, [pc, #128]	; (8000de8 <UnlinkTimer+0x100>)
 8000d68:	4613      	mov	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4413      	add	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	440b      	add	r3, r1
 8000d72:	3315      	adds	r3, #21
 8000d74:	4602      	mov	r2, r0
 8000d76:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d78:	7bbb      	ldrb	r3, [r7, #14]
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d013      	beq.n	8000da6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000d7e:	79f9      	ldrb	r1, [r7, #7]
 8000d80:	7bba      	ldrb	r2, [r7, #14]
 8000d82:	4819      	ldr	r0, [pc, #100]	; (8000de8 <UnlinkTimer+0x100>)
 8000d84:	460b      	mov	r3, r1
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	440b      	add	r3, r1
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	4403      	add	r3, r0
 8000d8e:	3314      	adds	r3, #20
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b2d8      	uxtb	r0, r3
 8000d94:	4914      	ldr	r1, [pc, #80]	; (8000de8 <UnlinkTimer+0x100>)
 8000d96:	4613      	mov	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	4413      	add	r3, r2
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	440b      	add	r3, r1
 8000da0:	3314      	adds	r3, #20
 8000da2:	4602      	mov	r2, r0
 8000da4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000da6:	79fa      	ldrb	r2, [r7, #7]
 8000da8:	490f      	ldr	r1, [pc, #60]	; (8000de8 <UnlinkTimer+0x100>)
 8000daa:	4613      	mov	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4413      	add	r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	440b      	add	r3, r1
 8000db4:	330c      	adds	r3, #12
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <UnlinkTimer+0xf8>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b06      	cmp	r3, #6
 8000dc2:	d107      	bne.n	8000dd4 <UnlinkTimer+0xec>
 8000dc4:	79bb      	ldrb	r3, [r7, #6]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d104      	bne.n	8000dd4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <UnlinkTimer+0x104>)
 8000dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  return;
 8000dd2:	bf00      	nop
 8000dd4:	bf00      	nop
}
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	20000124 	.word	0x20000124
 8000de4:	20000125 	.word	0x20000125
 8000de8:	20000094 	.word	0x20000094
 8000dec:	20000128 	.word	0x20000128

08000df0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <ReturnTimeElapsed+0x70>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dfe:	d026      	beq.n	8000e4e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000e00:	f7ff fe02 	bl	8000a08 <ReadRtcSsrValue>
 8000e04:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <ReturnTimeElapsed+0x70>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d805      	bhi.n	8000e1c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <ReturnTimeElapsed+0x70>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	e00a      	b.n	8000e32 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <ReturnTimeElapsed+0x74>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	461a      	mov	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <ReturnTimeElapsed+0x70>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	683a      	ldr	r2, [r7, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <ReturnTimeElapsed+0x78>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	fb02 f303 	mul.w	r3, r2, r3
 8000e3e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <ReturnTimeElapsed+0x7c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	40d3      	lsrs	r3, r2
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	e001      	b.n	8000e52 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	b29b      	uxth	r3, r3
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000128 	.word	0x20000128
 8000e64:	20000130 	.word	0x20000130
 8000e68:	2000012e 	.word	0x2000012e
 8000e6c:	2000012d 	.word	0x2000012d

08000e70 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d108      	bne.n	8000e92 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e80:	f7ff fdc2 	bl	8000a08 <ReadRtcSsrValue>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a21      	ldr	r2, [pc, #132]	; (8000f0c <RestartWakeupCounter+0x9c>)
 8000e88:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000e8a:	2003      	movs	r0, #3
 8000e8c:	f002 fe2b 	bl	8003ae6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000e90:	e039      	b.n	8000f06 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d803      	bhi.n	8000ea0 <RestartWakeupCounter+0x30>
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <RestartWakeupCounter+0xa0>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d002      	beq.n	8000ea6 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	3b01      	subs	r3, #1
 8000ea4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000ea6:	bf00      	nop
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <RestartWakeupCounter+0xa4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f8      	beq.n	8000ea8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <RestartWakeupCounter+0xa4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <RestartWakeupCounter+0xa4>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ec6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <RestartWakeupCounter+0xa8>)
 8000eca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ece:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f002 fe16 	bl	8003b02 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <RestartWakeupCounter+0xac>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	0c1b      	lsrs	r3, r3, #16
 8000edc:	041b      	lsls	r3, r3, #16
 8000ede:	88fa      	ldrh	r2, [r7, #6]
 8000ee0:	490e      	ldr	r1, [pc, #56]	; (8000f1c <RestartWakeupCounter+0xac>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ee6:	f7ff fd8f 	bl	8000a08 <ReadRtcSsrValue>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a07      	ldr	r2, [pc, #28]	; (8000f0c <RestartWakeupCounter+0x9c>)
 8000eee:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <RestartWakeupCounter+0xa4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <RestartWakeupCounter+0xa4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000efe:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000f00:	f3af 8000 	nop.w
  return ;
 8000f04:	bf00      	nop
}
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000128 	.word	0x20000128
 8000f10:	2000012d 	.word	0x2000012d
 8000f14:	20000278 	.word	0x20000278
 8000f18:	58000800 	.word	0x58000800
 8000f1c:	40002800 	.word	0x40002800

08000f20 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f26:	4b45      	ldr	r3, [pc, #276]	; (800103c <RescheduleTimerList+0x11c>)
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f32:	d107      	bne.n	8000f44 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000f34:	bf00      	nop
 8000f36:	4b42      	ldr	r3, [pc, #264]	; (8001040 <RescheduleTimerList+0x120>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1f8      	bne.n	8000f36 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000f44:	4b3e      	ldr	r3, [pc, #248]	; (8001040 <RescheduleTimerList+0x120>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	689a      	ldr	r2, [r3, #8]
 8000f4a:	4b3d      	ldr	r3, [pc, #244]	; (8001040 <RescheduleTimerList+0x120>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f52:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000f54:	4b3b      	ldr	r3, [pc, #236]	; (8001044 <RescheduleTimerList+0x124>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	493a      	ldr	r1, [pc, #232]	; (8001048 <RescheduleTimerList+0x128>)
 8000f5e:	4613      	mov	r3, r2
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	4413      	add	r3, r2
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	440b      	add	r3, r1
 8000f68:	3308      	adds	r3, #8
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000f6e:	f7ff ff3f 	bl	8000df0 <ReturnTimeElapsed>
 8000f72:	4603      	mov	r3, r0
 8000f74:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	68ba      	ldr	r2, [r7, #8]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d205      	bcs.n	8000f8a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f82:	4b32      	ldr	r3, [pc, #200]	; (800104c <RescheduleTimerList+0x12c>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
 8000f88:	e04d      	b.n	8001026 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000f8a:	88fb      	ldrh	r3, [r7, #6]
 8000f8c:	4a30      	ldr	r2, [pc, #192]	; (8001050 <RescheduleTimerList+0x130>)
 8000f8e:	8812      	ldrh	r2, [r2, #0]
 8000f90:	b292      	uxth	r2, r2
 8000f92:	4413      	add	r3, r2
 8000f94:	461a      	mov	r2, r3
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d906      	bls.n	8000faa <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <RescheduleTimerList+0x130>)
 8000f9e:	881b      	ldrh	r3, [r3, #0]
 8000fa0:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	; (800104c <RescheduleTimerList+0x12c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	e03d      	b.n	8001026 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	b29a      	uxth	r2, r3
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fb4:	4b25      	ldr	r3, [pc, #148]	; (800104c <RescheduleTimerList+0x12c>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fba:	e034      	b.n	8001026 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000fbc:	7bfa      	ldrb	r2, [r7, #15]
 8000fbe:	4922      	ldr	r1, [pc, #136]	; (8001048 <RescheduleTimerList+0x128>)
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	440b      	add	r3, r1
 8000fca:	3308      	adds	r3, #8
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d20a      	bcs.n	8000fea <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000fd4:	7bfa      	ldrb	r2, [r7, #15]
 8000fd6:	491c      	ldr	r1, [pc, #112]	; (8001048 <RescheduleTimerList+0x128>)
 8000fd8:	4613      	mov	r3, r2
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	4413      	add	r3, r2
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	440b      	add	r3, r1
 8000fe2:	3308      	adds	r3, #8
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	e013      	b.n	8001012 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000fea:	7bfa      	ldrb	r2, [r7, #15]
 8000fec:	4916      	ldr	r1, [pc, #88]	; (8001048 <RescheduleTimerList+0x128>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	440b      	add	r3, r1
 8000ff8:	3308      	adds	r3, #8
 8000ffa:	6819      	ldr	r1, [r3, #0]
 8000ffc:	88fb      	ldrh	r3, [r7, #6]
 8000ffe:	7bfa      	ldrb	r2, [r7, #15]
 8001000:	1ac9      	subs	r1, r1, r3
 8001002:	4811      	ldr	r0, [pc, #68]	; (8001048 <RescheduleTimerList+0x128>)
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	4403      	add	r3, r0
 800100e:	3308      	adds	r3, #8
 8001010:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001012:	7bfa      	ldrb	r2, [r7, #15]
 8001014:	490c      	ldr	r1, [pc, #48]	; (8001048 <RescheduleTimerList+0x128>)
 8001016:	4613      	mov	r3, r2
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	00db      	lsls	r3, r3, #3
 800101e:	440b      	add	r3, r1
 8001020:	3315      	adds	r3, #21
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	2b06      	cmp	r3, #6
 800102a:	d1c7      	bne.n	8000fbc <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800102c:	89bb      	ldrh	r3, [r7, #12]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ff1e 	bl	8000e70 <RestartWakeupCounter>

  return ;
 8001034:	bf00      	nop
}
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40002800 	.word	0x40002800
 8001040:	20000278 	.word	0x20000278
 8001044:	20000124 	.word	0x20000124
 8001048:	20000094 	.word	0x20000094
 800104c:	2000012c 	.word	0x2000012c
 8001050:	20000132 	.word	0x20000132

08001054 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	; 0x28
 8001058:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800105a:	f3ef 8310 	mrs	r3, PRIMASK
 800105e:	617b      	str	r3, [r7, #20]
  return(result);
 8001060:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001064:	b672      	cpsid	i
}
 8001066:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001068:	4b59      	ldr	r3, [pc, #356]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	22ca      	movs	r2, #202	; 0xca
 800106e:	625a      	str	r2, [r3, #36]	; 0x24
 8001070:	4b57      	ldr	r3, [pc, #348]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2253      	movs	r2, #83	; 0x53
 8001076:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001078:	4b55      	ldr	r3, [pc, #340]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689a      	ldr	r2, [r3, #8]
 800107e:	4b54      	ldr	r3, [pc, #336]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001086:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001088:	4b52      	ldr	r3, [pc, #328]	; (80011d4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001090:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001094:	4950      	ldr	r1, [pc, #320]	; (80011d8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001096:	4613      	mov	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4413      	add	r3, r2
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	440b      	add	r3, r1
 80010a0:	330c      	adds	r3, #12
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d16e      	bne.n	8001188 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80010aa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010ae:	494a      	ldr	r1, [pc, #296]	; (80011d8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	440b      	add	r3, r1
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80010be:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010c2:	4945      	ldr	r1, [pc, #276]	; (80011d8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	440b      	add	r3, r1
 80010ce:	3310      	adds	r3, #16
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80010d4:	4b41      	ldr	r3, [pc, #260]	; (80011dc <HW_TS_RTC_Wakeup_Handler+0x188>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d04c      	beq.n	8001178 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80010de:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010e2:	493d      	ldr	r1, [pc, #244]	; (80011d8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	440b      	add	r3, r1
 80010ee:	330d      	adds	r3, #13
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d124      	bne.n	8001142 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80010f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010fc:	2101      	movs	r1, #1
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fdf2 	bl	8000ce8 <UnlinkTimer>
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	f383 8810 	msr	PRIMASK, r3
}
 800110e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001110:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001114:	4930      	ldr	r1, [pc, #192]	; (80011d8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	440b      	add	r3, r1
 8001120:	3304      	adds	r3, #4
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001128:	4611      	mov	r1, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f9b8 	bl	80014a0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001130:	4b27      	ldr	r3, [pc, #156]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	22ca      	movs	r2, #202	; 0xca
 8001136:	625a      	str	r2, [r3, #36]	; 0x24
 8001138:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2253      	movs	r2, #83	; 0x53
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
 8001140:	e012      	b.n	8001168 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f383 8810 	msr	PRIMASK, r3
}
 800114c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800114e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f920 	bl	8001398 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	22ca      	movs	r2, #202	; 0xca
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2253      	movs	r2, #83	; 0x53
 8001166:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001168:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	4619      	mov	r1, r3
 8001170:	69b8      	ldr	r0, [r7, #24]
 8001172:	f000 fa1b 	bl	80015ac <HW_TS_RTC_Int_AppNot>
 8001176:	e022      	b.n	80011be <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001178:	f7ff fed2 	bl	8000f20 <RescheduleTimerList>
 800117c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	f383 8810 	msr	PRIMASK, r3
}
 8001186:	e01a      	b.n	80011be <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001188:	bf00      	nop
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0f8      	beq.n	800118a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001198:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011a8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f383 8810 	msr	PRIMASK, r3
}
 80011bc:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80011be:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	22ff      	movs	r2, #255	; 0xff
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80011c6:	bf00      	nop
}
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000278 	.word	0x20000278
 80011d4:	20000124 	.word	0x20000124
 80011d8:	20000094 	.word	0x20000094
 80011dc:	2000012c 	.word	0x2000012c
 80011e0:	58000800 	.word	0x58000800

080011e4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80011f0:	4b5e      	ldr	r3, [pc, #376]	; (800136c <HW_TS_Init+0x188>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	22ca      	movs	r2, #202	; 0xca
 80011f6:	625a      	str	r2, [r3, #36]	; 0x24
 80011f8:	4b5c      	ldr	r3, [pc, #368]	; (800136c <HW_TS_Init+0x188>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2253      	movs	r2, #83	; 0x53
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001200:	4b5b      	ldr	r3, [pc, #364]	; (8001370 <HW_TS_Init+0x18c>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	4a5a      	ldr	r2, [pc, #360]	; (8001370 <HW_TS_Init+0x18c>)
 8001206:	f043 0320 	orr.w	r3, r3, #32
 800120a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800120c:	4b58      	ldr	r3, [pc, #352]	; (8001370 <HW_TS_Init+0x18c>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f1c3 0304 	rsb	r3, r3, #4
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b55      	ldr	r3, [pc, #340]	; (8001374 <HW_TS_Init+0x190>)
 8001220:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001222:	4b53      	ldr	r3, [pc, #332]	; (8001370 <HW_TS_Init+0x18c>)
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800122a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800122e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001230:	693a      	ldr	r2, [r7, #16]
 8001232:	fa92 f2a2 	rbit	r2, r2
 8001236:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	2a00      	cmp	r2, #0
 8001240:	d101      	bne.n	8001246 <HW_TS_Init+0x62>
  {
    return 32U;
 8001242:	2220      	movs	r2, #32
 8001244:	e003      	b.n	800124e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	fab2 f282 	clz	r2, r2
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	40d3      	lsrs	r3, r2
 8001250:	b2db      	uxtb	r3, r3
 8001252:	3301      	adds	r3, #1
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b48      	ldr	r3, [pc, #288]	; (8001378 <HW_TS_Init+0x194>)
 8001258:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800125a:	4b45      	ldr	r3, [pc, #276]	; (8001370 <HW_TS_Init+0x18c>)
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	b29b      	uxth	r3, r3
 8001260:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001264:	b29b      	uxth	r3, r3
 8001266:	3301      	adds	r3, #1
 8001268:	b29a      	uxth	r2, r3
 800126a:	4b44      	ldr	r3, [pc, #272]	; (800137c <HW_TS_Init+0x198>)
 800126c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800126e:	4b43      	ldr	r3, [pc, #268]	; (800137c <HW_TS_Init+0x198>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	3b01      	subs	r3, #1
 8001274:	4a40      	ldr	r2, [pc, #256]	; (8001378 <HW_TS_Init+0x194>)
 8001276:	7812      	ldrb	r2, [r2, #0]
 8001278:	fb02 f303 	mul.w	r3, r2, r3
 800127c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001280:	4a3c      	ldr	r2, [pc, #240]	; (8001374 <HW_TS_Init+0x190>)
 8001282:	7812      	ldrb	r2, [r2, #0]
 8001284:	40d3      	lsrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800128e:	4293      	cmp	r3, r2
 8001290:	d904      	bls.n	800129c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001292:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <HW_TS_Init+0x19c>)
 8001294:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001298:	801a      	strh	r2, [r3, #0]
 800129a:	e003      	b.n	80012a4 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	4b37      	ldr	r3, [pc, #220]	; (8001380 <HW_TS_Init+0x19c>)
 80012a2:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012a8:	f7ff fb9c 	bl	80009e4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012ac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012b0:	f7ff fb84 	bl	80009bc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d13d      	bne.n	8001336 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80012ba:	4b32      	ldr	r3, [pc, #200]	; (8001384 <HW_TS_Init+0x1a0>)
 80012bc:	2201      	movs	r2, #1
 80012be:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012c0:	4b31      	ldr	r3, [pc, #196]	; (8001388 <HW_TS_Init+0x1a4>)
 80012c2:	f04f 32ff 	mov.w	r2, #4294967295
 80012c6:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	77fb      	strb	r3, [r7, #31]
 80012cc:	e00c      	b.n	80012e8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80012ce:	7ffa      	ldrb	r2, [r7, #31]
 80012d0:	492e      	ldr	r1, [pc, #184]	; (800138c <HW_TS_Init+0x1a8>)
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	440b      	add	r3, r1
 80012dc:	330c      	adds	r3, #12
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	3301      	adds	r3, #1
 80012e6:	77fb      	strb	r3, [r7, #31]
 80012e8:	7ffb      	ldrb	r3, [r7, #31]
 80012ea:	2b05      	cmp	r3, #5
 80012ec:	d9ef      	bls.n	80012ce <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80012ee:	4b28      	ldr	r3, [pc, #160]	; (8001390 <HW_TS_Init+0x1ac>)
 80012f0:	2206      	movs	r2, #6
 80012f2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <HW_TS_Init+0x188>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <HW_TS_Init+0x188>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001302:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <HW_TS_Init+0x188>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <HW_TS_Init+0x188>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001314:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <HW_TS_Init+0x1b0>)
 8001318:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800131c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800131e:	2003      	movs	r0, #3
 8001320:	f002 fbef 	bl	8003b02 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <HW_TS_Init+0x188>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <HW_TS_Init+0x188>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	e009      	b.n	800134a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001336:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HW_TS_Init+0x188>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001344:	2003      	movs	r0, #3
 8001346:	f002 fbce 	bl	8003ae6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <HW_TS_Init+0x188>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	22ff      	movs	r2, #255	; 0xff
 8001350:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001352:	2200      	movs	r2, #0
 8001354:	2103      	movs	r1, #3
 8001356:	2003      	movs	r0, #3
 8001358:	f002 fb83 	bl	8003a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800135c:	2003      	movs	r0, #3
 800135e:	f002 fb9a 	bl	8003a96 <HAL_NVIC_EnableIRQ>

  return;
 8001362:	bf00      	nop
}
 8001364:	3720      	adds	r7, #32
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000278 	.word	0x20000278
 8001370:	40002800 	.word	0x40002800
 8001374:	2000012d 	.word	0x2000012d
 8001378:	2000012e 	.word	0x2000012e
 800137c:	20000130 	.word	0x20000130
 8001380:	20000132 	.word	0x20000132
 8001384:	2000012c 	.word	0x2000012c
 8001388:	20000128 	.word	0x20000128
 800138c:	20000094 	.word	0x20000094
 8001390:	20000124 	.word	0x20000124
 8001394:	58000800 	.word	0x58000800

08001398 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013a2:	f3ef 8310 	mrs	r3, PRIMASK
 80013a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80013a8:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80013aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80013ac:	b672      	cpsid	i
}
 80013ae:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80013b0:	2003      	movs	r0, #3
 80013b2:	f002 fb7e 	bl	8003ab2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80013b6:	4b34      	ldr	r3, [pc, #208]	; (8001488 <HW_TS_Stop+0xf0>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	22ca      	movs	r2, #202	; 0xca
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
 80013be:	4b32      	ldr	r3, [pc, #200]	; (8001488 <HW_TS_Stop+0xf0>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2253      	movs	r2, #83	; 0x53
 80013c4:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013c6:	79fa      	ldrb	r2, [r7, #7]
 80013c8:	4930      	ldr	r1, [pc, #192]	; (800148c <HW_TS_Stop+0xf4>)
 80013ca:	4613      	mov	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	440b      	add	r3, r1
 80013d4:	330c      	adds	r3, #12
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d142      	bne.n	8001464 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fc80 	bl	8000ce8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80013e8:	4b29      	ldr	r3, [pc, #164]	; (8001490 <HW_TS_Stop+0xf8>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80013ee:	7cfb      	ldrb	r3, [r7, #19]
 80013f0:	2b06      	cmp	r3, #6
 80013f2:	d12f      	bne.n	8001454 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <HW_TS_Stop+0xfc>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001400:	d107      	bne.n	8001412 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001402:	bf00      	nop
 8001404:	4b20      	ldr	r3, [pc, #128]	; (8001488 <HW_TS_Stop+0xf0>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f8      	bne.n	8001404 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001412:	4b1d      	ldr	r3, [pc, #116]	; (8001488 <HW_TS_Stop+0xf0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <HW_TS_Stop+0xf0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001420:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001422:	bf00      	nop
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <HW_TS_Stop+0xf0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f8      	beq.n	8001424 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HW_TS_Stop+0xf0>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4b13      	ldr	r3, [pc, #76]	; (8001488 <HW_TS_Stop+0xf0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001442:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HW_TS_Stop+0x100>)
 8001446:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800144a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800144c:	2003      	movs	r0, #3
 800144e:	f002 fb58 	bl	8003b02 <HAL_NVIC_ClearPendingIRQ>
 8001452:	e007      	b.n	8001464 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <HW_TS_Stop+0x104>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	7cfa      	ldrb	r2, [r7, #19]
 800145c:	429a      	cmp	r2, r3
 800145e:	d001      	beq.n	8001464 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001460:	f7ff fd5e 	bl	8000f20 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HW_TS_Stop+0xf0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	22ff      	movs	r2, #255	; 0xff
 800146a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800146c:	2003      	movs	r0, #3
 800146e:	f002 fb12 	bl	8003a96 <HAL_NVIC_EnableIRQ>
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	f383 8810 	msr	PRIMASK, r3
}
 800147c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800147e:	bf00      	nop
}
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000278 	.word	0x20000278
 800148c:	20000094 	.word	0x20000094
 8001490:	20000124 	.word	0x20000124
 8001494:	40002800 	.word	0x40002800
 8001498:	58000800 	.word	0x58000800
 800149c:	20000125 	.word	0x20000125

080014a0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80014ac:	79fa      	ldrb	r2, [r7, #7]
 80014ae:	493b      	ldr	r1, [pc, #236]	; (800159c <HW_TS_Start+0xfc>)
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	440b      	add	r3, r1
 80014ba:	330c      	adds	r3, #12
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d103      	bne.n	80014cc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff66 	bl	8001398 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014cc:	f3ef 8310 	mrs	r3, PRIMASK
 80014d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80014d2:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80014d6:	b672      	cpsid	i
}
 80014d8:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80014da:	2003      	movs	r0, #3
 80014dc:	f002 fae9 	bl	8003ab2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80014e0:	4b2f      	ldr	r3, [pc, #188]	; (80015a0 <HW_TS_Start+0x100>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	22ca      	movs	r2, #202	; 0xca
 80014e6:	625a      	str	r2, [r3, #36]	; 0x24
 80014e8:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <HW_TS_Start+0x100>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2253      	movs	r2, #83	; 0x53
 80014ee:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80014f0:	79fa      	ldrb	r2, [r7, #7]
 80014f2:	492a      	ldr	r1, [pc, #168]	; (800159c <HW_TS_Start+0xfc>)
 80014f4:	4613      	mov	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4413      	add	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	440b      	add	r3, r1
 80014fe:	330c      	adds	r3, #12
 8001500:	2202      	movs	r2, #2
 8001502:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001504:	79fa      	ldrb	r2, [r7, #7]
 8001506:	4925      	ldr	r1, [pc, #148]	; (800159c <HW_TS_Start+0xfc>)
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	440b      	add	r3, r1
 8001512:	3308      	adds	r3, #8
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001518:	79fa      	ldrb	r2, [r7, #7]
 800151a:	4920      	ldr	r1, [pc, #128]	; (800159c <HW_TS_Start+0xfc>)
 800151c:	4613      	mov	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	4413      	add	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	440b      	add	r3, r1
 8001526:	3304      	adds	r3, #4
 8001528:	683a      	ldr	r2, [r7, #0]
 800152a:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fb30 	bl	8000b94 <linkTimer>
 8001534:	4603      	mov	r3, r0
 8001536:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001538:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <HW_TS_Start+0x104>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <HW_TS_Start+0x108>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	7c7a      	ldrb	r2, [r7, #17]
 8001546:	429a      	cmp	r2, r3
 8001548:	d002      	beq.n	8001550 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800154a:	f7ff fce9 	bl	8000f20 <RescheduleTimerList>
 800154e:	e013      	b.n	8001578 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001550:	79fa      	ldrb	r2, [r7, #7]
 8001552:	4912      	ldr	r1, [pc, #72]	; (800159c <HW_TS_Start+0xfc>)
 8001554:	4613      	mov	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4413      	add	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	440b      	add	r3, r1
 800155e:	3308      	adds	r3, #8
 8001560:	6819      	ldr	r1, [r3, #0]
 8001562:	8a7b      	ldrh	r3, [r7, #18]
 8001564:	79fa      	ldrb	r2, [r7, #7]
 8001566:	1ac9      	subs	r1, r1, r3
 8001568:	480c      	ldr	r0, [pc, #48]	; (800159c <HW_TS_Start+0xfc>)
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	4403      	add	r3, r0
 8001574:	3308      	adds	r3, #8
 8001576:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HW_TS_Start+0x100>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	22ff      	movs	r2, #255	; 0xff
 800157e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001580:	2003      	movs	r0, #3
 8001582:	f002 fa88 	bl	8003a96 <HAL_NVIC_EnableIRQ>
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	f383 8810 	msr	PRIMASK, r3
}
 8001590:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001592:	bf00      	nop
}
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000094 	.word	0x20000094
 80015a0:	20000278 	.word	0x20000278
 80015a4:	20000124 	.word	0x20000124
 80015a8:	20000125 	.word	0x20000125

080015ac <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	460b      	mov	r3, r1
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4798      	blx	r3

  return;
 80015be:	bf00      	nop
}
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <LL_RCC_LSE_SetDriveCapability>:
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80015ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d6:	f023 0218 	bic.w	r2, r3, #24
 80015da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <LL_AHB1_GRP1_EnableClock>:
{
 80015f2:	b480      	push	{r7}
 80015f4:	b085      	sub	sp, #20
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001600:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4313      	orrs	r3, r2
 8001608:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800160a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800160e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4013      	ands	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_AHB2_GRP1_EnableClock>:
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800162c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001630:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001632:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4313      	orrs	r3, r2
 800163a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800163c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4013      	ands	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001648:	68fb      	ldr	r3, [r7, #12]
}
 800164a:	bf00      	nop
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t tmp_index;

	  /* Initialize ADC group regular data buffer values */
	  for (tmp_index = 0; tmp_index < ADC_CONVERTED_DATA_BUFFER_SIZE; tmp_index++)
 800165e:	2300      	movs	r3, #0
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	e008      	b.n	8001676 <main+0x1e>
	  {
	    uhADCxConvertedData[tmp_index] = VAR_CONVERTED_DATA_INIT_VALUE;
 8001664:	4a21      	ldr	r2, [pc, #132]	; (80016ec <main+0x94>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800166c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for (tmp_index = 0; tmp_index < ADC_CONVERTED_DATA_BUFFER_SIZE; tmp_index++)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3301      	adds	r3, #1
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b3f      	cmp	r3, #63	; 0x3f
 800167a:	d9f3      	bls.n	8001664 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167c:	f000 ff22 	bl	80024c4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001680:	f7fe ffe4 	bl	800064c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001684:	f000 f838 	bl	80016f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001688:	f000 f882 	bl	8001790 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800168c:	f000 f940 	bl	8001910 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001690:	f000 fa18 	bl	8001ac4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001694:	f000 fa04 	bl	8001aa0 <MX_DMA_Init>
  MX_RTC_Init();
 8001698:	f000 f956 	bl	8001948 <MX_RTC_Init>
  MX_I2C1_Init();
 800169c:	f000 f8f8 	bl	8001890 <MX_I2C1_Init>
  MX_ADC1_Init();
 80016a0:	f000 f896 	bl	80017d0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80016a4:	f000 f984 	bl	80019b0 <MX_TIM2_Init>
  MX_RF_Init();
 80016a8:	f000 f946 	bl	8001938 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* Perform ADC calibration */
   if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 80016ac:	2100      	movs	r1, #0
 80016ae:	4810      	ldr	r0, [pc, #64]	; (80016f0 <main+0x98>)
 80016b0:	f001 ff90 	bl	80035d4 <HAL_ADCEx_Calibration_Start>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <main+0x66>
   {
     /* Calibration Error */
     Error_Handler();
 80016ba:	f000 fab7 	bl	8001c2c <Error_Handler>
   }

   /* Start ADC group regular conversion */
   if (HAL_ADC_Start_DMA(&hadc1,
 80016be:	2240      	movs	r2, #64	; 0x40
 80016c0:	490a      	ldr	r1, [pc, #40]	; (80016ec <main+0x94>)
 80016c2:	480b      	ldr	r0, [pc, #44]	; (80016f0 <main+0x98>)
 80016c4:	f001 fa8a 	bl	8002bdc <HAL_ADC_Start_DMA>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <main+0x7a>
                         (uint32_t *)uhADCxConvertedData,
                         ADC_CONVERTED_DATA_BUFFER_SIZE
                        ) != HAL_OK)
   {
     /* Error: ADC conversion start could not be performed */
     Error_Handler();
 80016ce:	f000 faad 	bl	8001c2c <Error_Handler>
   }

   /* Start time base */
   if (HAL_TIM_Base_Start(&htim2) != HAL_OK)
 80016d2:	4808      	ldr	r0, [pc, #32]	; (80016f4 <main+0x9c>)
 80016d4:	f005 fbc8 	bl	8006e68 <HAL_TIM_Base_Start>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <main+0x8a>
   {
     /* Starting Error */
     Error_Handler();
 80016de:	f000 faa5 	bl	8001c2c <Error_Handler>
   }

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80016e2:	f7fe ffc1 	bl	8000668 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80016e6:	f7ff f92c 	bl	8000942 <MX_APPE_Process>
 80016ea:	e7fc      	b.n	80016e6 <main+0x8e>
 80016ec:	200002e8 	.word	0x200002e8
 80016f0:	20000134 	.word	0x20000134
 80016f4:	2000029c 	.word	0x2000029c

080016f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b098      	sub	sp, #96	; 0x60
 80016fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fe:	f107 031c 	add.w	r3, r7, #28
 8001702:	2244      	movs	r2, #68	; 0x44
 8001704:	2100      	movs	r1, #0
 8001706:	4618      	mov	r0, r3
 8001708:	f008 fc3a 	bl	8009f80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800170c:	463b      	mov	r3, r7
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]
 800171a:	615a      	str	r2, [r3, #20]
 800171c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800171e:	f003 fdb3 	bl	8005288 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001722:	2000      	movs	r0, #0
 8001724:	f7ff ff4f 	bl	80015c6 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001728:	2307      	movs	r3, #7
 800172a:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800172c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001730:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001732:	2301      	movs	r3, #1
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001736:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800173c:	2340      	movs	r3, #64	; 0x40
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001740:	2300      	movs	r3, #0
 8001742:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	4618      	mov	r0, r3
 800174a:	f004 f95b 	bl	8005a04 <HAL_RCC_OscConfig>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8001754:	f000 fa6a 	bl	8001c2c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001758:	236f      	movs	r3, #111	; 0x6f
 800175a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800175c:	2302      	movs	r3, #2
 800175e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001774:	463b      	mov	r3, r7
 8001776:	2101      	movs	r1, #1
 8001778:	4618      	mov	r0, r3
 800177a:	f004 fc79 	bl	8006070 <HAL_RCC_ClockConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001784:	f000 fa52 	bl	8001c2c <Error_Handler>
  }
}
 8001788:	bf00      	nop
 800178a:	3760      	adds	r7, #96	; 0x60
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08c      	sub	sp, #48	; 0x30
 8001794:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001796:	463b      	mov	r3, r7
 8001798:	2230      	movs	r2, #48	; 0x30
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f008 fbef 	bl	8009f80 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80017a2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80017a6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80017a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80017ae:	2300      	movs	r3, #0
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80017b2:	2310      	movs	r3, #16
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017b6:	463b      	mov	r3, r7
 80017b8:	4618      	mov	r0, r3
 80017ba:	f004 ffef 	bl	800679c <HAL_RCCEx_PeriphCLKConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80017c4:	f000 fa32 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80017c8:	bf00      	nop
 80017ca:	3730      	adds	r7, #48	; 0x30
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80017e0:	4b28      	ldr	r3, [pc, #160]	; (8001884 <MX_ADC1_Init+0xb4>)
 80017e2:	4a29      	ldr	r2, [pc, #164]	; (8001888 <MX_ADC1_Init+0xb8>)
 80017e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017e6:	4b27      	ldr	r3, [pc, #156]	; (8001884 <MX_ADC1_Init+0xb4>)
 80017e8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017ee:	4b25      	ldr	r3, [pc, #148]	; (8001884 <MX_ADC1_Init+0xb4>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017f4:	4b23      	ldr	r3, [pc, #140]	; (8001884 <MX_ADC1_Init+0xb4>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <MX_ADC1_Init+0xb4>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001800:	4b20      	ldr	r3, [pc, #128]	; (8001884 <MX_ADC1_Init+0xb4>)
 8001802:	2204      	movs	r2, #4
 8001804:	615a      	str	r2, [r3, #20]
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8001806:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <MX_ADC1_Init+0xb4>)
 8001808:	2206      	movs	r2, #6
 800180a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800180c:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <MX_ADC1_Init+0xb4>)
 800180e:	2200      	movs	r2, #0
 8001810:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001812:	4b1c      	ldr	r3, [pc, #112]	; (8001884 <MX_ADC1_Init+0xb4>)
 8001814:	2200      	movs	r2, #0
 8001816:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001818:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <MX_ADC1_Init+0xb4>)
 800181a:	2200      	movs	r2, #0
 800181c:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800181e:	4b19      	ldr	r3, [pc, #100]	; (8001884 <MX_ADC1_Init+0xb4>)
 8001820:	2201      	movs	r2, #1
 8001822:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001824:	4b17      	ldr	r3, [pc, #92]	; (8001884 <MX_ADC1_Init+0xb4>)
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800182c:	4b15      	ldr	r3, [pc, #84]	; (8001884 <MX_ADC1_Init+0xb4>)
 800182e:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8001832:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <MX_ADC1_Init+0xb4>)
 8001836:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <MX_ADC1_Init+0xb4>)
 800183e:	2200      	movs	r2, #0
 8001840:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <MX_ADC1_Init+0xb4>)
 8001846:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800184a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800184c:	480d      	ldr	r0, [pc, #52]	; (8001884 <MX_ADC1_Init+0xb4>)
 800184e:	f001 f843 	bl	80028d8 <HAL_ADC_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001858:	f000 f9e8 	bl	8001c2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <MX_ADC1_Init+0xbc>)
 800185e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	4619      	mov	r1, r3
 800186c:	4805      	ldr	r0, [pc, #20]	; (8001884 <MX_ADC1_Init+0xb4>)
 800186e:	f001 fb67 	bl	8002f40 <HAL_ADC_ConfigChannel>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001878:	f000 f9d8 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000134 	.word	0x20000134
 8001888:	40012400 	.word	0x40012400
 800188c:	14000020 	.word	0x14000020

08001890 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <MX_I2C1_Init+0x74>)
 8001896:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <MX_I2C1_Init+0x78>)
 8001898:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <MX_I2C1_Init+0x74>)
 800189c:	4a1b      	ldr	r2, [pc, #108]	; (800190c <MX_I2C1_Init+0x7c>)
 800189e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <MX_I2C1_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <MX_I2C1_Init+0x74>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <MX_I2C1_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <MX_I2C1_Init+0x74>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <MX_I2C1_Init+0x74>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_I2C1_Init+0x74>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <MX_I2C1_Init+0x74>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018ca:	480e      	ldr	r0, [pc, #56]	; (8001904 <MX_I2C1_Init+0x74>)
 80018cc:	f002 fe82 	bl	80045d4 <HAL_I2C_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018d6:	f000 f9a9 	bl	8001c2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018da:	2100      	movs	r1, #0
 80018dc:	4809      	ldr	r0, [pc, #36]	; (8001904 <MX_I2C1_Init+0x74>)
 80018de:	f003 fbb5 	bl	800504c <HAL_I2CEx_ConfigAnalogFilter>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018e8:	f000 f9a0 	bl	8001c2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018ec:	2100      	movs	r1, #0
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <MX_I2C1_Init+0x74>)
 80018f0:	f003 fbf7 	bl	80050e2 <HAL_I2CEx_ConfigDigitalFilter>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018fa:	f000 f997 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200001e8 	.word	0x200001e8
 8001908:	40005400 	.word	0x40005400
 800190c:	00303d5b 	.word	0x00303d5b

08001910 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <MX_IPCC_Init+0x20>)
 8001916:	4a07      	ldr	r2, [pc, #28]	; (8001934 <MX_IPCC_Init+0x24>)
 8001918:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <MX_IPCC_Init+0x20>)
 800191c:	f003 fc2e 	bl	800517c <HAL_IPCC_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001926:	f000 f981 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	2000023c 	.word	0x2000023c
 8001934:	58000c00 	.word	0x58000c00

08001938 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800194c:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <MX_RTC_Init+0x60>)
 800194e:	4a17      	ldr	r2, [pc, #92]	; (80019ac <MX_RTC_Init+0x64>)
 8001950:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <MX_RTC_Init+0x60>)
 8001954:	2200      	movs	r2, #0
 8001956:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <MX_RTC_Init+0x60>)
 800195a:	220f      	movs	r2, #15
 800195c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_RTC_Init+0x60>)
 8001960:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001964:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <MX_RTC_Init+0x60>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_RTC_Init+0x60>)
 800196e:	2200      	movs	r2, #0
 8001970:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <MX_RTC_Init+0x60>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001978:	480b      	ldr	r0, [pc, #44]	; (80019a8 <MX_RTC_Init+0x60>)
 800197a:	f005 f805 	bl	8006988 <HAL_RTC_Init>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8001984:	f000 f952 	bl	8001c2c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001988:	2200      	movs	r2, #0
 800198a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800198e:	4806      	ldr	r0, [pc, #24]	; (80019a8 <MX_RTC_Init+0x60>)
 8001990:	f005 f8fa 	bl	8006b88 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800199a:	f000 f947 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800199e:	4802      	ldr	r0, [pc, #8]	; (80019a8 <MX_RTC_Init+0x60>)
 80019a0:	f005 f9ae 	bl	8006d00 <HAL_RTCEx_DeactivateWakeUpTimer>
  /* USER CODE END RTC_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000278 	.word	0x20000278
 80019ac:	40002800 	.word	0x40002800

080019b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_Init 0 */
	uint32_t tim_prescaler;
	  uint32_t tim_period;
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* Set timer prescaler value (timer frequency) */
    /* Note: Value TIMER_FREQUENCY_RANGE_MAX_HZ with factor 2 to have a minimum
             timer resolution */
    tim_prescaler = __LL_TIM_CALC_PSC(SystemCoreClock, TIMER_FREQUENCY_RANGE_MAX_HZ * 2);
 80019ce:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <MX_TIM2_Init+0xe4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f5b3 4f7a 	cmp.w	r3, #64000	; 0xfa00
 80019d6:	d309      	bcc.n	80019ec <MX_TIM2_Init+0x3c>
 80019d8:	4b2e      	ldr	r3, [pc, #184]	; (8001a94 <MX_TIM2_Init+0xe4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f503 43fa 	add.w	r3, r3, #32000	; 0x7d00
 80019e0:	4a2d      	ldr	r2, [pc, #180]	; (8001a98 <MX_TIM2_Init+0xe8>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	0b1b      	lsrs	r3, r3, #12
 80019e8:	3b01      	subs	r3, #1
 80019ea:	e000      	b.n	80019ee <MX_TIM2_Init+0x3e>
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Set timer period value (time base frequency) */
    tim_period = __LL_TIM_CALC_ARR(SystemCoreClock, tim_prescaler, TIMER_FREQUENCY_HZ);
 80019f0:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <MX_TIM2_Init+0xe4>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	3301      	adds	r3, #1
 80019f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fc:	2b09      	cmp	r3, #9
 80019fe:	d90b      	bls.n	8001a18 <MX_TIM2_Init+0x68>
 8001a00:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <MX_TIM2_Init+0xe4>)
 8001a02:	6819      	ldr	r1, [r3, #0]
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	1c5a      	adds	r2, r3, #1
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a14:	3b01      	subs	r3, #1
 8001a16:	e000      	b.n	8001a1a <MX_TIM2_Init+0x6a>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <MX_TIM2_Init+0xec>)
 8001a1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = tim_prescaler;
 8001a24:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <MX_TIM2_Init+0xec>)
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <MX_TIM2_Init+0xec>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = tim_period;
 8001a30:	4a1a      	ldr	r2, [pc, #104]	; (8001a9c <MX_TIM2_Init+0xec>)
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a36:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <MX_TIM2_Init+0xec>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3c:	4b17      	ldr	r3, [pc, #92]	; (8001a9c <MX_TIM2_Init+0xec>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a42:	4816      	ldr	r0, [pc, #88]	; (8001a9c <MX_TIM2_Init+0xec>)
 8001a44:	f005 f9b9 	bl	8006dba <HAL_TIM_Base_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001a4e:	f000 f8ed 	bl	8001c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480f      	ldr	r0, [pc, #60]	; (8001a9c <MX_TIM2_Init+0xec>)
 8001a60:	f005 fa48 	bl	8006ef4 <HAL_TIM_ConfigClockSource>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8001a6a:	f000 f8df 	bl	8001c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a6e:	2320      	movs	r3, #32
 8001a70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4808      	ldr	r0, [pc, #32]	; (8001a9c <MX_TIM2_Init+0xec>)
 8001a7c:	f005 fbf0 	bl	8007260 <HAL_TIMEx_MasterConfigSynchronization>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a86:	f000 f8d1 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	3728      	adds	r7, #40	; 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000010 	.word	0x20000010
 8001a98:	10624dd3 	.word	0x10624dd3
 8001a9c:	2000029c 	.word	0x2000029c

08001aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001aa4:	2004      	movs	r0, #4
 8001aa6:	f7ff fda4 	bl	80015f2 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f7ff fda1 	bl	80015f2 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	200b      	movs	r0, #11
 8001ab6:	f001 ffd4 	bl	8003a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001aba:	200b      	movs	r0, #11
 8001abc:	f001 ffeb 	bl	8003a96 <HAL_NVIC_EnableIRQ>

}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aca:	1d3b      	adds	r3, r7, #4
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad8:	2004      	movs	r0, #4
 8001ada:	f7ff fda3 	bl	8001624 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ade:	2080      	movs	r0, #128	; 0x80
 8001ae0:	f7ff fda0 	bl	8001624 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	f7ff fd9d 	bl	8001624 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	2001      	movs	r0, #1
 8001aec:	f7ff fd9a 	bl	8001624 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001af0:	2010      	movs	r0, #16
 8001af2:	f7ff fd97 	bl	8001624 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001af6:	2308      	movs	r3, #8
 8001af8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001afa:	2303      	movs	r3, #3
 8001afc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	4823      	ldr	r0, [pc, #140]	; (8001b94 <MX_GPIO_Init+0xd0>)
 8001b08:	f002 fbc0 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 PA8
                           PA9 PA10 PA11 PA12
                           PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001b0c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001b10:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b12:	2303      	movs	r3, #3
 8001b14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b22:	f002 fbb3 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB0 PB1 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8001b26:	230f      	movs	r3, #15
 8001b28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	4619      	mov	r1, r3
 8001b36:	4818      	ldr	r0, [pc, #96]	; (8001b98 <MX_GPIO_Init+0xd4>)
 8001b38:	f002 fba8 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b3c:	2310      	movs	r3, #16
 8001b3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b40:	2303      	movs	r3, #3
 8001b42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4813      	ldr	r0, [pc, #76]	; (8001b9c <MX_GPIO_Init+0xd8>)
 8001b4e:	f002 fb9d 	bl	800428c <HAL_GPIO_Init>

  /*Configure GPIO pins : Data_Ready_1_Pin Data_Ready_2_Pin Data_Ready_3_Pin Data_Ready_4_Pin */
  GPIO_InitStruct.Pin = Data_Ready_1_Pin|Data_Ready_2_Pin|Data_Ready_3_Pin|Data_Ready_4_Pin;
 8001b52:	23f0      	movs	r3, #240	; 0xf0
 8001b54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b56:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	4619      	mov	r1, r3
 8001b64:	480c      	ldr	r0, [pc, #48]	; (8001b98 <MX_GPIO_Init+0xd4>)
 8001b66:	f002 fb91 	bl	800428c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	210f      	movs	r1, #15
 8001b6e:	200a      	movs	r0, #10
 8001b70:	f001 ff77 	bl	8003a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001b74:	200a      	movs	r0, #10
 8001b76:	f001 ff8e 	bl	8003a96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	210f      	movs	r1, #15
 8001b7e:	2017      	movs	r0, #23
 8001b80:	f001 ff6f 	bl	8003a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b84:	2017      	movs	r0, #23
 8001b86:	f001 ff86 	bl	8003a96 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b8a:	bf00      	nop
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	48001c00 	.word	0x48001c00
 8001b98:	48000400 	.word	0x48000400
 8001b9c:	48001000 	.word	0x48001000

08001ba0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Data_Ready_1_Pin) {
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	2b10      	cmp	r3, #16
 8001bae:	d10b      	bne.n	8001bc8 <HAL_GPIO_EXTI_Callback+0x28>
		SystemClock_Config ();
 8001bb0:	f7ff fda2 	bl	80016f8 <SystemClock_Config>
		HAL_ResumeTick();
 8001bb4:	f000 fd1c 	bl	80025f0 <HAL_ResumeTick>
		deviceToBeRead = 1;
 8001bb8:	4b1b      	ldr	r3, [pc, #108]	; (8001c28 <HAL_GPIO_EXTI_Callback+0x88>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_TEMP, CFG_SCH_PRIO_0);
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	2008      	movs	r0, #8
 8001bc2:	f008 f8bd 	bl	8009d40 <UTIL_SEQ_SetTask>
		SystemClock_Config ();
		HAL_ResumeTick();
		deviceToBeRead = 4;
		UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_TEMP, CFG_SCH_PRIO_0);
	}
}
 8001bc6:	e02b      	b.n	8001c20 <HAL_GPIO_EXTI_Callback+0x80>
	else if(GPIO_Pin == Data_Ready_2_Pin) {
 8001bc8:	88fb      	ldrh	r3, [r7, #6]
 8001bca:	2b20      	cmp	r3, #32
 8001bcc:	d10b      	bne.n	8001be6 <HAL_GPIO_EXTI_Callback+0x46>
		SystemClock_Config ();
 8001bce:	f7ff fd93 	bl	80016f8 <SystemClock_Config>
		HAL_ResumeTick();
 8001bd2:	f000 fd0d 	bl	80025f0 <HAL_ResumeTick>
		deviceToBeRead = 2;
 8001bd6:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_GPIO_EXTI_Callback+0x88>)
 8001bd8:	2202      	movs	r2, #2
 8001bda:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_TEMP, CFG_SCH_PRIO_0);
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2008      	movs	r0, #8
 8001be0:	f008 f8ae 	bl	8009d40 <UTIL_SEQ_SetTask>
}
 8001be4:	e01c      	b.n	8001c20 <HAL_GPIO_EXTI_Callback+0x80>
	else if(GPIO_Pin == Data_Ready_3_Pin) {
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	2b40      	cmp	r3, #64	; 0x40
 8001bea:	d10b      	bne.n	8001c04 <HAL_GPIO_EXTI_Callback+0x64>
		SystemClock_Config ();
 8001bec:	f7ff fd84 	bl	80016f8 <SystemClock_Config>
		HAL_ResumeTick();
 8001bf0:	f000 fcfe 	bl	80025f0 <HAL_ResumeTick>
		deviceToBeRead = 3;
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <HAL_GPIO_EXTI_Callback+0x88>)
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_TEMP, CFG_SCH_PRIO_0);
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	2008      	movs	r0, #8
 8001bfe:	f008 f89f 	bl	8009d40 <UTIL_SEQ_SetTask>
}
 8001c02:	e00d      	b.n	8001c20 <HAL_GPIO_EXTI_Callback+0x80>
	else if(GPIO_Pin == Data_Ready_4_Pin) {
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	2b80      	cmp	r3, #128	; 0x80
 8001c08:	d10a      	bne.n	8001c20 <HAL_GPIO_EXTI_Callback+0x80>
		SystemClock_Config ();
 8001c0a:	f7ff fd75 	bl	80016f8 <SystemClock_Config>
		HAL_ResumeTick();
 8001c0e:	f000 fcef 	bl	80025f0 <HAL_ResumeTick>
		deviceToBeRead = 4;
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_GPIO_EXTI_Callback+0x88>)
 8001c14:	2204      	movs	r2, #4
 8001c16:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask(1<<CFG_TASK_UPDATE_TEMP, CFG_SCH_PRIO_0);
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2008      	movs	r0, #8
 8001c1c:	f008 f890 	bl	8009d40 <UTIL_SEQ_SetTask>
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000368 	.word	0x20000368

08001c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c30:	b672      	cpsid	i
}
 8001c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c34:	e7fe      	b.n	8001c34 <Error_Handler+0x8>
	...

08001c38 <LL_PWR_SetPowerMode>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <LL_PWR_SetPowerMode+0x24>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f023 0207 	bic.w	r2, r3, #7
 8001c48:	4904      	ldr	r1, [pc, #16]	; (8001c5c <LL_PWR_SetPowerMode+0x24>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	600b      	str	r3, [r1, #0]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	58000400 	.word	0x58000400

08001c60 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <LL_PWR_ClearFlag_WU+0x14>)
 8001c66:	2209      	movs	r2, #9
 8001c68:	619a      	str	r2, [r3, #24]
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	58000400 	.word	0x58000400

08001c78 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <LL_PWR_IsActiveFlag_C2SB+0x24>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c8a:	d101      	bne.n	8001c90 <LL_PWR_IsActiveFlag_C2SB+0x18>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	58000400 	.word	0x58000400

08001ca0 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001caa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cb2:	d101      	bne.n	8001cb8 <LL_PWR_IsActiveFlag_C2DS+0x18>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <LL_PWR_IsActiveFlag_C2DS+0x1a>
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	58000400 	.word	0x58000400

08001cc8 <LL_RCC_HSI_Enable>:
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_RCC_HSI_IsReady>:
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cf8:	d101      	bne.n	8001cfe <LL_RCC_HSI_IsReady+0x18>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <LL_RCC_HSI_IsReady+0x1a>
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <LL_RCC_SetSysClkSource>:
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f023 0203 	bic.w	r2, r3, #3
 8001d1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <LL_RCC_GetSysClkSource>:
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <LL_RCC_SetSMPSClockSource>:
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b083      	sub	sp, #12
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d58:	f023 0203 	bic.w	r2, r3, #3
 8001d5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <LL_LPM_EnableSleep+0x1c>)
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <LL_LPM_EnableSleep+0x1c>)
 8001d9e:	f023 0304 	bic.w	r3, r3, #4
 8001da2:	6113      	str	r3, [r2, #16]
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <LL_LPM_EnableDeepSleep+0x1c>)
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <LL_LPM_EnableDeepSleep+0x1c>)
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	6113      	str	r3, [r2, #16]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	3220      	adds	r2, #32
 8001de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de8:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <LL_HSEM_1StepLock+0x2c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d001      	beq.n	8001df2 <LL_HSEM_1StepLock+0x1e>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <LL_HSEM_1StepLock+0x20>
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	80000400 	.word	0x80000400

08001e04 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8001e2e:	f000 fbcf 	bl	80025d0 <HAL_SuspendTick>
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001e32:	f7ff ff9e 	bl	8001d72 <LL_RCC_ClearResetFlags>

  EnterLowPower();
 8001e36:	f000 f835 	bl	8001ea4 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8001e3a:	f7ff ff11 	bl	8001c60 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8001e3e:	2003      	movs	r0, #3
 8001e40:	f7ff fefa 	bl	8001c38 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001e44:	f7ff ffb6 	bl	8001db4 <LL_LPM_EnableDeepSleep>
#endif

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8001e48:	bf00      	nop
}
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  }
#endif
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8001e50:	bf00      	nop
}
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 8001e5e:	f000 fbb7 	bl	80025d0 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8001e62:	f000 f81f 	bl	8001ea4 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 8001e66:	2001      	movs	r0, #1
 8001e68:	f7ff fee6 	bl	8001c38 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001e6c:	f7ff ffa2 	bl	8001db4 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001e70:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 8001e72:	bf00      	nop
}
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8001e7a:	f000 f84f 	bl	8001f1c <ExitLowPower>

  HAL_ResumeTick();
 8001e7e:	f000 fbb7 	bl	80025f0 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 8001e82:	bf00      	nop
}
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8001e8a:	f000 fba1 	bl	80025d0 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001e8e:	f7ff ff81 	bl	8001d94 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001e92:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8001e94:	bf00      	nop
}
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8001e9c:	f000 fba8 	bl	80025f0 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8001ea0:	bf00      	nop
}
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001ea8:	bf00      	nop
 8001eaa:	2103      	movs	r1, #3
 8001eac:	4819      	ldr	r0, [pc, #100]	; (8001f14 <EnterLowPower+0x70>)
 8001eae:	f7ff ff91 	bl	8001dd4 <LL_HSEM_1StepLock>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f8      	bne.n	8001eaa <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8001eb8:	2104      	movs	r1, #4
 8001eba:	4816      	ldr	r0, [pc, #88]	; (8001f14 <EnterLowPower+0x70>)
 8001ebc:	f7ff ff8a 	bl	8001dd4 <LL_HSEM_1StepLock>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d117      	bne.n	8001ef6 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8001ec6:	f7ff feeb 	bl	8001ca0 <LL_PWR_IsActiveFlag_C2DS>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d104      	bne.n	8001eda <EnterLowPower+0x36>
 8001ed0:	f7ff fed2 	bl	8001c78 <LL_PWR_IsActiveFlag_C2SB>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d015      	beq.n	8001f06 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2104      	movs	r1, #4
 8001ede:	480d      	ldr	r0, [pc, #52]	; (8001f14 <EnterLowPower+0x70>)
 8001ee0:	f7ff ff90 	bl	8001e04 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8001ee4:	f000 f834 	bl	8001f50 <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <EnterLowPower+0x74>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0a      	ldr	r2, [pc, #40]	; (8001f18 <EnterLowPower+0x74>)
 8001eee:	f023 0307 	bic.w	r3, r3, #7
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	e007      	b.n	8001f06 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8001ef6:	f000 f82b 	bl	8001f50 <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001efa:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <EnterLowPower+0x74>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a06      	ldr	r2, [pc, #24]	; (8001f18 <EnterLowPower+0x74>)
 8001f00:	f023 0307 	bic.w	r3, r3, #7
 8001f04:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2103      	movs	r1, #3
 8001f0a:	4802      	ldr	r0, [pc, #8]	; (8001f14 <EnterLowPower+0x70>)
 8001f0c:	f7ff ff7a 	bl	8001e04 <LL_HSEM_ReleaseLock>

  return;
 8001f10:	bf00      	nop
}
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	58001400 	.word	0x58001400
 8001f18:	58004000 	.word	0x58004000

08001f1c <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2104      	movs	r1, #4
 8001f24:	4809      	ldr	r0, [pc, #36]	; (8001f4c <ExitLowPower+0x30>)
 8001f26:	f7ff ff6d 	bl	8001e04 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001f2a:	bf00      	nop
 8001f2c:	2103      	movs	r1, #3
 8001f2e:	4807      	ldr	r0, [pc, #28]	; (8001f4c <ExitLowPower+0x30>)
 8001f30:	f7ff ff50 	bl	8001dd4 <LL_HSEM_1StepLock>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f8      	bne.n	8001f2c <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001f3a:	f7ff fefa 	bl	8001d32 <LL_RCC_GetSysClkSource>

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
#endif

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2103      	movs	r1, #3
 8001f42:	4802      	ldr	r0, [pc, #8]	; (8001f4c <ExitLowPower+0x30>)
 8001f44:	f7ff ff5e 	bl	8001e04 <LL_HSEM_ReleaseLock>

  return;
 8001f48:	bf00      	nop
}
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	58001400 	.word	0x58001400

08001f50 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8001f54:	f7ff feb8 	bl	8001cc8 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8001f58:	bf00      	nop
 8001f5a:	f7ff fec4 	bl	8001ce6 <LL_RCC_HSI_IsReady>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0fa      	beq.n	8001f5a <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001f64:	2001      	movs	r0, #1
 8001f66:	f7ff fed0 	bl	8001d0a <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f7ff feed 	bl	8001d4a <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8001f70:	bf00      	nop
 8001f72:	f7ff fede 	bl	8001d32 <LL_RCC_GetSysClkSource>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d1fa      	bne.n	8001f72 <Switch_On_HSI+0x22>
  return;
 8001f7c:	bf00      	nop
}
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <LL_RCC_EnableRTC>:
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <LL_AHB2_GRP1_EnableClock>:
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b085      	sub	sp, #20
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_AHB3_GRP1_EnableClock>:
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fe2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002006:	b480      	push	{r7}
 8002008:	b085      	sub	sp, #20
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800200e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002012:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002014:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4313      	orrs	r3, r2
 800201c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800201e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002022:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4013      	ands	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800202a:	68fb      	ldr	r3, [r7, #12]
}
 800202c:	bf00      	nop
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002044:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002046:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4313      	orrs	r3, r2
 800204e:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002054:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4013      	ands	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800205c:	68fb      	ldr	r3, [r7, #12]
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800206e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002072:	f7ff ffaf 	bl	8001fd4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	2100      	movs	r1, #0
 800207a:	202e      	movs	r0, #46	; 0x2e
 800207c:	f001 fcf1 	bl	8003a62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002080:	202e      	movs	r0, #46	; 0x2e
 8002082:	f001 fd08 	bl	8003a96 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b094      	sub	sp, #80	; 0x50
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002094:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]
 800209c:	605a      	str	r2, [r3, #4]
 800209e:	609a      	str	r2, [r3, #8]
 80020a0:	60da      	str	r2, [r3, #12]
 80020a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	2230      	movs	r2, #48	; 0x30
 80020aa:	2100      	movs	r1, #0
 80020ac:	4618      	mov	r0, r3
 80020ae:	f007 ff67 	bl	8009f80 <memset>
  if(hadc->Instance==ADC1)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a2f      	ldr	r2, [pc, #188]	; (8002174 <HAL_ADC_MspInit+0xe8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d156      	bne.n	800216a <HAL_ADC_MspInit+0xde>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80020bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020c0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 80020c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	4618      	mov	r0, r3
 80020ce:	f004 fb65 	bl	800679c <HAL_RCCEx_PeriphCLKConfig>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80020d8:	f7ff fda8 	bl	8001c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80020dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80020e0:	f7ff ffaa 	bl	8002038 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e4:	2001      	movs	r0, #1
 80020e6:	f7ff ff5c 	bl	8001fa2 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020ea:	2301      	movs	r3, #1
 80020ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ee:	2303      	movs	r3, #3
 80020f0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020fa:	4619      	mov	r1, r3
 80020fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002100:	f002 f8c4 	bl	800428c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002104:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <HAL_ADC_MspInit+0xec>)
 8002106:	4a1d      	ldr	r2, [pc, #116]	; (800217c <HAL_ADC_MspInit+0xf0>)
 8002108:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800210a:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <HAL_ADC_MspInit+0xec>)
 800210c:	2205      	movs	r2, #5
 800210e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002110:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_ADC_MspInit+0xec>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002116:	4b18      	ldr	r3, [pc, #96]	; (8002178 <HAL_ADC_MspInit+0xec>)
 8002118:	2200      	movs	r2, #0
 800211a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <HAL_ADC_MspInit+0xec>)
 800211e:	2280      	movs	r2, #128	; 0x80
 8002120:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_ADC_MspInit+0xec>)
 8002124:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002128:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800212a:	4b13      	ldr	r3, [pc, #76]	; (8002178 <HAL_ADC_MspInit+0xec>)
 800212c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002130:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_ADC_MspInit+0xec>)
 8002134:	2220      	movs	r2, #32
 8002136:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002138:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <HAL_ADC_MspInit+0xec>)
 800213a:	2200      	movs	r2, #0
 800213c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800213e:	480e      	ldr	r0, [pc, #56]	; (8002178 <HAL_ADC_MspInit+0xec>)
 8002140:	f001 fcee 	bl	8003b20 <HAL_DMA_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800214a:	f7ff fd6f 	bl	8001c2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a09      	ldr	r2, [pc, #36]	; (8002178 <HAL_ADC_MspInit+0xec>)
 8002152:	641a      	str	r2, [r3, #64]	; 0x40
 8002154:	4a08      	ldr	r2, [pc, #32]	; (8002178 <HAL_ADC_MspInit+0xec>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	2012      	movs	r0, #18
 8002160:	f001 fc7f 	bl	8003a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8002164:	2012      	movs	r0, #18
 8002166:	f001 fc96 	bl	8003a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800216a:	bf00      	nop
 800216c:	3750      	adds	r7, #80	; 0x50
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	40012400 	.word	0x40012400
 8002178:	20000188 	.word	0x20000188
 800217c:	40020008 	.word	0x40020008

08002180 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b094      	sub	sp, #80	; 0x50
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002198:	f107 030c 	add.w	r3, r7, #12
 800219c:	2230      	movs	r2, #48	; 0x30
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f007 feed 	bl	8009f80 <memset>
  if(hi2c->Instance==I2C1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a17      	ldr	r2, [pc, #92]	; (8002208 <HAL_I2C_MspInit+0x88>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d126      	bne.n	80021fe <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021b0:	2304      	movs	r3, #4
 80021b2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021b4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80021b8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ba:	f107 030c 	add.w	r3, r7, #12
 80021be:	4618      	mov	r0, r3
 80021c0:	f004 faec 	bl	800679c <HAL_RCCEx_PeriphCLKConfig>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80021ca:	f7ff fd2f 	bl	8001c2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ce:	2002      	movs	r0, #2
 80021d0:	f7ff fee7 	bl	8001fa2 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021da:	2312      	movs	r3, #18
 80021dc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e2:	2300      	movs	r3, #0
 80021e4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021e6:	2304      	movs	r3, #4
 80021e8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80021ee:	4619      	mov	r1, r3
 80021f0:	4806      	ldr	r0, [pc, #24]	; (800220c <HAL_I2C_MspInit+0x8c>)
 80021f2:	f002 f84b 	bl	800428c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021f6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80021fa:	f7ff ff04 	bl	8002006 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80021fe:	bf00      	nop
 8002200:	3750      	adds	r7, #80	; 0x50
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40005400 	.word	0x40005400
 800220c:	48000400 	.word	0x48000400

08002210 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0d      	ldr	r2, [pc, #52]	; (8002254 <HAL_IPCC_MspInit+0x44>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d113      	bne.n	800224a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002222:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002226:	f7ff fed5 	bl	8001fd4 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	202c      	movs	r0, #44	; 0x2c
 8002230:	f001 fc17 	bl	8003a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002234:	202c      	movs	r0, #44	; 0x2c
 8002236:	f001 fc2e 	bl	8003a96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	202d      	movs	r0, #45	; 0x2d
 8002240:	f001 fc0f 	bl	8003a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002244:	202d      	movs	r0, #45	; 0x2d
 8002246:	f001 fc26 	bl	8003a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	58000c00 	.word	0x58000c00

08002258 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08e      	sub	sp, #56	; 0x38
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002260:	f107 0308 	add.w	r3, r7, #8
 8002264:	2230      	movs	r2, #48	; 0x30
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f007 fe89 	bl	8009f80 <memset>
  if(hrtc->Instance==RTC)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <HAL_RTC_MspInit+0x64>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d11d      	bne.n	80022b4 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002278:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800227c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800227e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002284:	f107 0308 	add.w	r3, r7, #8
 8002288:	4618      	mov	r0, r3
 800228a:	f004 fa87 	bl	800679c <HAL_RCCEx_PeriphCLKConfig>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002294:	f7ff fcca 	bl	8001c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002298:	f7ff fe72 	bl	8001f80 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800229c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80022a0:	f7ff feb1 	bl	8002006 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 15, 0);
 80022a4:	2200      	movs	r2, #0
 80022a6:	210f      	movs	r1, #15
 80022a8:	2003      	movs	r0, #3
 80022aa:	f001 fbda 	bl	8003a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80022ae:	2003      	movs	r0, #3
 80022b0:	f001 fbf1 	bl	8003a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80022b4:	bf00      	nop
 80022b6:	3738      	adds	r7, #56	; 0x38
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40002800 	.word	0x40002800

080022c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d0:	d102      	bne.n	80022d8 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022d2:	2001      	movs	r0, #1
 80022d4:	f7ff fe97 	bl	8002006 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <NMI_Handler+0x4>

080022e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ea:	e7fe      	b.n	80022ea <HardFault_Handler+0x4>

080022ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <MemManage_Handler+0x4>

080022f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f6:	e7fe      	b.n	80022f6 <BusFault_Handler+0x4>

080022f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <UsageFault_Handler+0x4>

080022fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800232c:	f000 f924 	bl	8002578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}

08002334 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002338:	f7fe fe8c 	bl	8001054 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}

08002340 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Data_Ready_1_Pin);
 8002344:	2010      	movs	r0, #16
 8002346:	f002 f909 	bl	800455c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <DMA1_Channel1_IRQHandler+0x10>)
 8002356:	f001 fcea 	bl	8003d2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000188 	.word	0x20000188

08002364 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <ADC1_IRQHandler+0x10>)
 800236a:	f000 fcad 	bl	8002cc8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000134 	.word	0x20000134

08002378 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Data_Ready_2_Pin);
 800237c:	2020      	movs	r0, #32
 800237e:	f002 f8ed 	bl	800455c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Data_Ready_3_Pin);
 8002382:	2040      	movs	r0, #64	; 0x40
 8002384:	f002 f8ea 	bl	800455c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Data_Ready_4_Pin);
 8002388:	2080      	movs	r0, #128	; 0x80
 800238a:	f002 f8e7 	bl	800455c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}

08002392 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002396:	f007 f9ff 	bl	8009798 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}

0800239e <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80023a2:	f007 fa2f 	bl	8009804 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80023ae:	f002 f8ed 	bl	800458c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80023bc:	4b22      	ldr	r3, [pc, #136]	; (8002448 <SystemInit+0x90>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	4a21      	ldr	r2, [pc, #132]	; (8002448 <SystemInit+0x90>)
 80023c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80023dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023e0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80023e4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80023e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023f0:	4b16      	ldr	r3, [pc, #88]	; (800244c <SystemInit+0x94>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80023f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002402:	f023 0305 	bic.w	r3, r3, #5
 8002406:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800240a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002416:	f023 0301 	bic.w	r3, r3, #1
 800241a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800241e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002422:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <SystemInit+0x98>)
 8002424:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002434:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243a:	2200      	movs	r2, #0
 800243c:	619a      	str	r2, [r3, #24]
}
 800243e:	bf00      	nop
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000ed00 	.word	0xe000ed00
 800244c:	faf6fefb 	.word	0xfaf6fefb
 8002450:	22041000 	.word	0x22041000

08002454 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002454:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002456:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002458:	3304      	adds	r3, #4

0800245a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800245a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800245c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800245e:	d3f9      	bcc.n	8002454 <CopyDataInit>
  bx lr
 8002460:	4770      	bx	lr

08002462 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002462:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002464:	3004      	adds	r0, #4

08002466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002466:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002468:	d3fb      	bcc.n	8002462 <FillZerobss>
  bx lr
 800246a:	4770      	bx	lr

0800246c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800246c:	480c      	ldr	r0, [pc, #48]	; (80024a0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800246e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002470:	f7ff ffa2 	bl	80023b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002474:	480b      	ldr	r0, [pc, #44]	; (80024a4 <LoopForever+0x8>)
 8002476:	490c      	ldr	r1, [pc, #48]	; (80024a8 <LoopForever+0xc>)
 8002478:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <LoopForever+0x10>)
 800247a:	2300      	movs	r3, #0
 800247c:	f7ff ffed 	bl	800245a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002480:	480b      	ldr	r0, [pc, #44]	; (80024b0 <LoopForever+0x14>)
 8002482:	490c      	ldr	r1, [pc, #48]	; (80024b4 <LoopForever+0x18>)
 8002484:	2300      	movs	r3, #0
 8002486:	f7ff ffee 	bl	8002466 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800248a:	480b      	ldr	r0, [pc, #44]	; (80024b8 <LoopForever+0x1c>)
 800248c:	490b      	ldr	r1, [pc, #44]	; (80024bc <LoopForever+0x20>)
 800248e:	2300      	movs	r3, #0
 8002490:	f7ff ffe9 	bl	8002466 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002494:	f007 fd7c 	bl	8009f90 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8002498:	f7ff f8de 	bl	8001658 <main>

0800249c <LoopForever>:

LoopForever:
  b LoopForever
 800249c:	e7fe      	b.n	800249c <LoopForever>
 800249e:	0000      	.short	0x0000
  ldr   r0, =_estack
 80024a0:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 80024a4:	20000004 	.word	0x20000004
 80024a8:	20000024 	.word	0x20000024
 80024ac:	0800a2a8 	.word	0x0800a2a8
  INIT_BSS _sbss, _ebss
 80024b0:	20000070 	.word	0x20000070
 80024b4:	200004c4 	.word	0x200004c4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80024b8:	200301e4 	.word	0x200301e4
 80024bc:	20030a67 	.word	0x20030a67

080024c0 <AES2_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024c0:	e7fe      	b.n	80024c0 <AES2_IRQHandler>
	...

080024c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <HAL_Init+0x3c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a0b      	ldr	r2, [pc, #44]	; (8002500 <HAL_Init+0x3c>)
 80024d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024da:	2003      	movs	r0, #3
 80024dc:	f001 fab6 	bl	8003a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024e0:	200f      	movs	r0, #15
 80024e2:	f000 f80f 	bl	8002504 <HAL_InitTick>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	71fb      	strb	r3, [r7, #7]
 80024f0:	e001      	b.n	80024f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024f2:	f7ff fdba 	bl	800206a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024f6:	79fb      	ldrb	r3, [r7, #7]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	58004000 	.word	0x58004000

08002504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002510:	4b17      	ldr	r3, [pc, #92]	; (8002570 <HAL_InitTick+0x6c>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d024      	beq.n	8002562 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002518:	f003 ff56 	bl	80063c8 <HAL_RCC_GetHCLKFreq>
 800251c:	4602      	mov	r2, r0
 800251e:	4b14      	ldr	r3, [pc, #80]	; (8002570 <HAL_InitTick+0x6c>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	4619      	mov	r1, r3
 8002524:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002528:	fbb3 f3f1 	udiv	r3, r3, r1
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	4618      	mov	r0, r3
 8002532:	f001 facc 	bl	8003ace <HAL_SYSTICK_Config>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10f      	bne.n	800255c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b0f      	cmp	r3, #15
 8002540:	d809      	bhi.n	8002556 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002542:	2200      	movs	r2, #0
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	f04f 30ff 	mov.w	r0, #4294967295
 800254a:	f001 fa8a 	bl	8003a62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800254e:	4a09      	ldr	r2, [pc, #36]	; (8002574 <HAL_InitTick+0x70>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	e007      	b.n	8002566 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	e004      	b.n	8002566 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
 8002560:	e001      	b.n	8002566 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	20000018 	.word	0x20000018
 8002574:	20000014 	.word	0x20000014

08002578 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800257c:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_IncTick+0x20>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_IncTick+0x24>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4413      	add	r3, r2
 8002588:	4a04      	ldr	r2, [pc, #16]	; (800259c <HAL_IncTick+0x24>)
 800258a:	6013      	str	r3, [r2, #0]
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20000018 	.word	0x20000018
 800259c:	2000036c 	.word	0x2000036c

080025a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return uwTick;
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_GetTick+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	2000036c 	.word	0x2000036c

080025b8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <HAL_GetTickPrio+0x14>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	20000014 	.word	0x20000014

080025d0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_SuspendTick+0x1c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a04      	ldr	r2, [pc, #16]	; (80025ec <HAL_SuspendTick+0x1c>)
 80025da:	f023 0302 	bic.w	r3, r3, #2
 80025de:	6013      	str	r3, [r2, #0]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000e010 	.word	0xe000e010

080025f0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_ResumeTick+0x1c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a04      	ldr	r2, [pc, #16]	; (800260c <HAL_ResumeTick+0x1c>)
 80025fa:	f043 0302 	orr.w	r3, r3, #2
 80025fe:	6013      	str	r3, [r2, #0]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000e010 	.word	0xe000e010

08002610 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	609a      	str	r2, [r3, #8]
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY, uint32_t SamplingTime)
{
 8002652:	b480      	push	{r7}
 8002654:	b085      	sub	sp, #20
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	695a      	ldr	r2, [r3, #20]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2107      	movs	r1, #7
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	401a      	ands	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	fa01 f303 	lsl.w	r3, r1, r3
 800267e:	431a      	orrs	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80026a8:	2300      	movs	r3, #0
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b085      	sub	sp, #20
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	210f      	movs	r1, #15
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	401a      	ands	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	0e9b      	lsrs	r3, r3, #26
 80026da:	f003 010f 	and.w	r1, r3, #15
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	431a      	orrs	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	629a      	str	r2, [r3, #40]	; 0x28

  MODIFY_REG(*preg,
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80026ee:	bf00      	nop
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <LL_ADC_REG_SetSequencerChAdd>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <LL_ADC_REG_SetSequencerChRem>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002734:	43db      	mvns	r3, r3
 8002736:	401a      	ands	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0303 	and.w	r3, r3, #3
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	43db      	mvns	r3, r3
 800277a:	401a      	ands	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	0219      	lsls	r1, r3, #8
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	400b      	ands	r3, r1
 8002784:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002788:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800278c:	431a      	orrs	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002792:	bf00      	nop
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80027ae:	f023 0317 	bic.w	r3, r3, #23
 80027b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027da:	d101      	bne.n	80027e0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80027fe:	f023 0317 	bic.w	r3, r3, #23
 8002802:	f043 0201 	orr.w	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002826:	f023 0317 	bic.w	r3, r3, #23
 800282a:	f043 0202 	orr.w	r2, r3, #2
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <LL_ADC_IsEnabled+0x18>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <LL_ADC_IsEnabled+0x1a>
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b02      	cmp	r3, #2
 8002876:	d101      	bne.n	800287c <LL_ADC_IsDisableOngoing+0x18>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <LL_ADC_IsDisableOngoing+0x1a>
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800289a:	f023 0317 	bic.w	r3, r3, #23
 800289e:	f043 0204 	orr.w	r2, r3, #4
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d101      	bne.n	80028ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
#if defined(ADC_SUPPORT_2_5_MSPS)
  uint32_t tmpCFGR2 = 0UL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e16b      	b.n	8002bd2 <HAL_ADC_Init+0x2fa>
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon1));
  assert_param(IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon2));
  
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002904:	2b00      	cmp	r3, #0
 8002906:	d109      	bne.n	800291c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff fbbf 	bl	800208c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff50 	bl	80027c6 <LL_ADC_IsInternalRegulatorEnabled>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d115      	bne.n	8002958 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff34 	bl	800279e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002936:	4b9c      	ldr	r3, [pc, #624]	; (8002ba8 <HAL_ADC_Init+0x2d0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	099b      	lsrs	r3, r3, #6
 800293c:	4a9b      	ldr	r2, [pc, #620]	; (8002bac <HAL_ADC_Init+0x2d4>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	099b      	lsrs	r3, r3, #6
 8002944:	3301      	adds	r3, #1
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800294a:	e002      	b.n	8002952 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	3b01      	subs	r3, #1
 8002950:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1f9      	bne.n	800294c <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff32 	bl	80027c6 <LL_ADC_IsInternalRegulatorEnabled>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10d      	bne.n	8002984 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800296c:	f043 0210 	orr.w	r2, r3, #16
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	649a      	str	r2, [r3, #72]	; 0x48

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002978:	f043 0201 	orr.w	r2, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	64da      	str	r2, [r3, #76]	; 0x4c

    tmp_hal_status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff92 	bl	80028b2 <LL_ADC_REG_IsConversionOngoing>
 800298e:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	2b00      	cmp	r3, #0
 800299a:	f040 8111 	bne.w	8002bc0 <HAL_ADC_Init+0x2e8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f040 810d 	bne.w	8002bc0 <HAL_ADC_Init+0x2e8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029aa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029ae:	f043 0202 	orr.w	r2, r3, #2
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	649a      	str	r2, [r3, #72]	; 0x48
    /*  - Clock configuration                                                 */
    /*  - ADC resolution                                                      */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff ff3f 	bl	800283e <LL_ADC_IsEnabled>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d138      	bne.n	8002a38 <HAL_ADC_Init+0x160>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
      
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f023 0118 	bic.w	r1, r3, #24
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	60da      	str	r2, [r3, #12]
      /*  - oversampling enable                                               */
      /*  - oversampling ratio                                                */
      /*  - oversampling shift                                                */
      /*  - oversampling discontinuous mode (triggered mode)                  */
      /*  - trigger frequency mode                                            */
      tmpCFGR2 |= ( (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                    hadc->Init.TriggerFrequencyMode
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR2 |= ( (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029e8:	4313      	orrs	r3, r2
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]
                    );
      
      MODIFY_REG(hadc->Instance->CFGR2,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_LFTRIG     ,
                 tmpCFGR2              );
      
      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002a0c:	d014      	beq.n	8002a38 <HAL_ADC_Init+0x160>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a16:	d00f      	beq.n	8002a38 <HAL_ADC_Init+0x160>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a20:	d00a      	beq.n	8002a38 <HAL_ADC_Init+0x160>
      {
        MODIFY_REG(ADC1_COMMON->CCR                         ,
 8002a22:	4b63      	ldr	r3, [pc, #396]	; (8002bb0 <HAL_ADC_Init+0x2d8>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a32:	495f      	ldr	r1, [pc, #380]	; (8002bb0 <HAL_ADC_Init+0x2d8>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	7e1b      	ldrb	r3, [r3, #24]
 8002a3c:	039a      	lsls	r2, r3, #14
                ADC_CFGR_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	7e5b      	ldrb	r3, [r3, #25]
 8002a42:	03db      	lsls	r3, r3, #15
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a44:	431a      	orrs	r2, r3
                ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	7e9b      	ldrb	r3, [r3, #26]
 8002a4a:	035b      	lsls	r3, r3, #13
                ADC_CFGR_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002a4c:	4313      	orrs	r3, r2
                ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a52:	2a00      	cmp	r2, #0
 8002a54:	d002      	beq.n	8002a5c <HAL_ADC_Init+0x184>
 8002a56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a5a:	e000      	b.n	8002a5e <HAL_ADC_Init+0x186>
 8002a5c:	2200      	movs	r2, #0
                ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002a5e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                            |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
                ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002a64:	431a      	orrs	r2, r3
                ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	da04      	bge.n	8002a78 <HAL_ADC_Init+0x1a0>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a76:	e001      	b.n	8002a7c <HAL_ADC_Init+0x1a4>
 8002a78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                hadc->Init.DataAlign                                            |
 8002a7c:	431a      	orrs	r2, r3
                ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002a84:	005b      	lsls	r3, r3, #1
                ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002a86:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d114      	bne.n	8002ac2 <HAL_ADC_Init+0x1ea>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	7e9b      	ldrb	r3, [r3, #26]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d104      	bne.n	8002aaa <HAL_ADC_Init+0x1d2>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR |= ADC_CFGR1_DISCEN;
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	e00b      	b.n	8002ac2 <HAL_ADC_Init+0x1ea>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aae:	f043 0220 	orr.w	r2, r3, #32
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	649a      	str	r2, [r3, #72]	; 0x48
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aba:	f043 0201 	orr.w	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_ADC_Init+0x206>
    {
      tmpCFGR |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge );
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR |= ( (hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	4b33      	ldr	r3, [pc, #204]	; (8002bb4 <HAL_ADC_Init+0x2dc>)
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	69b9      	ldr	r1, [r7, #24]
 8002aee:	430b      	orrs	r3, r1
 8002af0:	60d3      	str	r3, [r2, #12]
               ADC_CFGR1_SCANDIR   |
               ADC_CFGR1_DMACFG,
               tmpCFGR);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afa:	461a      	mov	r2, r3
 8002afc:	2100      	movs	r1, #0
 8002afe:	f7ff fda8 	bl	8002652 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	492a      	ldr	r1, [pc, #168]	; (8002bb8 <HAL_ADC_Init+0x2e0>)
 8002b0e:	f7ff fda0 	bl	8002652 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if(hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d108      	bne.n	8002b2c <HAL_ADC_Init+0x254>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f062 020f 	orn	r2, r2, #15
 8002b28:	629a      	str	r2, [r3, #40]	; 0x28
 8002b2a:	e017      	b.n	8002b5c <HAL_ADC_Init+0x284>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if(hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b34:	d112      	bne.n	8002b5c <HAL_ADC_Init+0x284>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	f003 031c 	and.w	r3, r3, #28
 8002b48:	f06f 020f 	mvn.w	r2, #15
 8002b4c:	fa02 f103 	lsl.w	r1, r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR').                                  */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <HAL_ADC_Init+0x2e4>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d10b      	bne.n	8002b84 <HAL_ADC_Init+0x2ac>
         == tmpCFGR)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b76:	f023 0303 	bic.w	r3, r3, #3
 8002b7a:	f043 0201 	orr.w	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	649a      	str	r2, [r3, #72]	; 0x48
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002b82:	e025      	b.n	8002bd0 <HAL_ADC_Init+0x2f8>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b88:	f023 0312 	bic.w	r3, r3, #18
 8002b8c:	f043 0210 	orr.w	r2, r3, #16
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	649a      	str	r2, [r3, #72]	; 0x48
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b98:	f043 0201 	orr.w	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	64da      	str	r2, [r3, #76]	; 0x4c

      tmp_hal_status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	77fb      	strb	r3, [r7, #31]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002ba4:	e014      	b.n	8002bd0 <HAL_ADC_Init+0x2f8>
 8002ba6:	bf00      	nop
 8002ba8:	20000010 	.word	0x20000010
 8002bac:	053e2d63 	.word	0x053e2d63
 8002bb0:	40012700 	.word	0x40012700
 8002bb4:	ffde0219 	.word	0xffde0219
 8002bb8:	07ffff04 	.word	0x07ffff04
 8002bbc:	833fffe7 	.word	0x833fffe7
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bc4:	f043 0210 	orr.w	r2, r3, #16
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	649a      	str	r2, [r3, #72]	; 0x48

    tmp_hal_status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3720      	adds	r7, #32
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop

08002bdc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fe60 	bl	80028b2 <LL_ADC_REG_IsConversionOngoing>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d15a      	bne.n	8002cae <HAL_ADC_Start_DMA+0xd2>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_ADC_Start_DMA+0x2a>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e056      	b.n	8002cb4 <HAL_ADC_Start_DMA+0xd8>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fad4 	bl	80031bc <ADC_Enable>
 8002c14:	4603      	mov	r3, r0
 8002c16:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c18:	7dfb      	ldrb	r3, [r7, #23]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d142      	bne.n	8002ca4 <HAL_ADC_Start_DMA+0xc8>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c26:	f023 0301 	bic.w	r3, r3, #1
 8002c2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	649a      	str	r2, [r3, #72]	; 0x48
                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                          HAL_ADC_STATE_REG_BUSY);

#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	64da      	str	r2, [r3, #76]	; 0x4c
          ADC_CLEAR_ERRORCODE(hadc);
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	4a1f      	ldr	r2, [pc, #124]	; (8002cbc <HAL_ADC_Start_DMA+0xe0>)
 8002c3e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	4a1e      	ldr	r2, [pc, #120]	; (8002cc0 <HAL_ADC_Start_DMA+0xe4>)
 8002c46:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <HAL_ADC_Start_DMA+0xe8>)
 8002c4e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	221c      	movs	r2, #28
 8002c56:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0210 	orr.w	r2, r2, #16
 8002c6e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	60da      	str	r2, [r3, #12]
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	3340      	adds	r3, #64	; 0x40
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f000 ffd2 	bl	8003c38 <HAL_DMA_Start_IT>
 8002c94:	4603      	mov	r3, r0
 8002c96:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fdf4 	bl	800288a <LL_ADC_REG_StartConversion>
 8002ca2:	e006      	b.n	8002cb2 <HAL_ADC_Start_DMA+0xd6>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cac:	e001      	b.n	8002cb2 <HAL_ADC_Start_DMA+0xd6>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	08003377 	.word	0x08003377
 8002cc0:	0800343f 	.word	0x0800343f
 8002cc4:	0800345b 	.word	0x0800345b

08002cc8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d017      	beq.n	8002d1e <HAL_ADC_IRQHandler+0x56>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d012      	beq.n	8002d1e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d105      	bne.n	8002d10 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d08:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	649a      	str	r2, [r3, #72]	; 0x48

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fd61 	bl	80037d8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d004      	beq.n	8002d32 <HAL_ADC_IRQHandler+0x6a>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d109      	bne.n	8002d46 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d05d      	beq.n	8002df8 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d058      	beq.n	8002df8 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d105      	bne.n	8002d5e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fc94 	bl	8002690 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d03d      	beq.n	8002dea <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7c:	d035      	beq.n	8002dea <HAL_ADC_IRQHandler+0x122>
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d12e      	bne.n	8002dea <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fd8e 	bl	80028b2 <LL_ADC_REG_IsConversionOngoing>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d11a      	bne.n	8002dd2 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 020c 	bic.w	r2, r2, #12
 8002daa:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	649a      	str	r2, [r3, #72]	; 0x48

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d112      	bne.n	8002dea <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc8:	f043 0201 	orr.w	r2, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	649a      	str	r2, [r3, #72]	; 0x48
 8002dd0:	e00b      	b.n	8002dea <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dd6:	f043 0210 	orr.w	r2, r3, #16
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	649a      	str	r2, [r3, #72]	; 0x48

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de2:	f043 0201 	orr.w	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	64da      	str	r2, [r3, #76]	; 0x4c
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f880 	bl	8002ef0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	220c      	movs	r2, #12
 8002df6:	601a      	str	r2, [r3, #0]
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d011      	beq.n	8002e26 <HAL_ADC_IRQHandler+0x15e>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00c      	beq.n	8002e26 <HAL_ADC_IRQHandler+0x15e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	649a      	str	r2, [r3, #72]	; 0x48

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f87d 	bl	8002f18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2280      	movs	r2, #128	; 0x80
 8002e24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d012      	beq.n	8002e56 <HAL_ADC_IRQHandler+0x18e>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00d      	beq.n	8002e56 <HAL_ADC_IRQHandler+0x18e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	649a      	str	r2, [r3, #72]	; 0x48

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fcb2 	bl	80037b0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e54:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d012      	beq.n	8002e86 <HAL_ADC_IRQHandler+0x1be>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00d      	beq.n	8002e86 <HAL_ADC_IRQHandler+0x1be>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	649a      	str	r2, [r3, #72]	; 0x48

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fca4 	bl	80037c4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d02b      	beq.n	8002ee8 <HAL_ADC_IRQHandler+0x220>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d026      	beq.n	8002ee8 <HAL_ADC_IRQHandler+0x220>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <HAL_ADC_IRQHandler+0x1e0>
    {
      overrun_error = 1UL;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	e009      	b.n	8002ebc <HAL_ADC_IRQHandler+0x1f4>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fc4b 	bl	8002748 <LL_ADC_REG_GetDMATransfer>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_ADC_IRQHandler+0x1f4>
      {
        overrun_error = 1UL;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d10e      	bne.n	8002ee0 <HAL_ADC_IRQHandler+0x218>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	649a      	str	r2, [r3, #72]	; 0x48

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed2:	f043 0202 	orr.w	r2, r3, #2
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	64da      	str	r2, [r3, #76]	; 0x4c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f826 	bl	8002f2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2210      	movs	r2, #16
 8002ee6:	601a      	str	r2, [r3, #0]
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8002ee8:	bf00      	nop
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
#if  defined(ADC_SUPPORT_2_5_MSPS)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(hadc, sConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(sConfig->SamplingTime));
  
  if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    
    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x28>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e114      	b.n	8003192 <HAL_ADC_ConfigChannel+0x252>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fc9c 	bl	80028b2 <LL_ADC_REG_IsConversionOngoing>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f040 80fb 	bne.w	8003178 <HAL_ADC_ConfigChannel+0x238>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if(sConfig->Rank != ADC_RANK_NONE)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	f000 80b3 	beq.w	80030f2 <HAL_ADC_ConfigChannel+0x1b2>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f94:	d004      	beq.n	8002fa0 <HAL_ADC_ConfigChannel+0x60>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002f9a:	4a80      	ldr	r2, [pc, #512]	; (800319c <HAL_ADC_ConfigChannel+0x25c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d108      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4610      	mov	r0, r2
 8002fac:	f7ff fba5 	bl	80026fa <LL_ADC_REG_SetSequencerChAdd>
 8002fb0:	e041      	b.n	8003036 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */
        
        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	210f      	movs	r1, #15
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d105      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0xa0>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	0e9b      	lsrs	r3, r3, #26
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	e011      	b.n	8003004 <HAL_ADC_ConfigChannel+0xc4>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	fa93 f3a3 	rbit	r3, r3
 8002fec:	60fb      	str	r3, [r7, #12]
  return result;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0xbc>
    return 32U;
 8002ff8:	2320      	movs	r3, #32
 8002ffa:	e003      	b.n	8003004 <HAL_ADC_ConfigChannel+0xc4>
  return __builtin_clz(value);
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	6839      	ldr	r1, [r7, #0]
 8003006:	6849      	ldr	r1, [r1, #4]
 8003008:	f001 011f 	and.w	r1, r1, #31
 800300c:	408b      	lsls	r3, r1
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	651a      	str	r2, [r3, #80]	; 0x50
        
        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */        
        if(((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	089b      	lsrs	r3, r3, #2
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	429a      	cmp	r2, r3
 8003022:	d808      	bhi.n	8003036 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	f7ff fb40 	bl	80026b6 <LL_ADC_REG_SetSequencerRanks>
        }
      }
      
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6819      	ldr	r1, [r3, #0]
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	461a      	mov	r2, r3
 8003044:	f7ff fb8e 	bl	8002764 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	4b54      	ldr	r3, [pc, #336]	; (80031a0 <HAL_ADC_ConfigChannel+0x260>)
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	f000 8099 	beq.w	8003188 <HAL_ADC_ConfigChannel+0x248>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003056:	4853      	ldr	r0, [pc, #332]	; (80031a4 <HAL_ADC_ConfigChannel+0x264>)
 8003058:	f7ff faed 	bl	8002636 <LL_ADC_GetCommonPathInternalCh>
 800305c:	61b8      	str	r0, [r7, #24]
        
        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a51      	ldr	r2, [pc, #324]	; (80031a8 <HAL_ADC_ConfigChannel+0x268>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d120      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x16a>
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d11b      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x16a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003078:	4619      	mov	r1, r3
 800307a:	484a      	ldr	r0, [pc, #296]	; (80031a4 <HAL_ADC_ConfigChannel+0x264>)
 800307c:	f7ff fac8 	bl	8002610 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003080:	4b4a      	ldr	r3, [pc, #296]	; (80031ac <HAL_ADC_ConfigChannel+0x26c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	099b      	lsrs	r3, r3, #6
 8003086:	4a4a      	ldr	r2, [pc, #296]	; (80031b0 <HAL_ADC_ConfigChannel+0x270>)
 8003088:	fba2 2303 	umull	r2, r3, r2, r3
 800308c:	099b      	lsrs	r3, r3, #6
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	4613      	mov	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0UL)
 800309a:	e002      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x162>
          {
            wait_loop_index--;
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	3b01      	subs	r3, #1
 80030a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0UL)
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1f9      	bne.n	800309c <HAL_ADC_ConfigChannel+0x15c>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030a8:	e06e      	b.n	8003188 <HAL_ADC_ConfigChannel+0x248>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a41      	ldr	r2, [pc, #260]	; (80031b4 <HAL_ADC_ConfigChannel+0x274>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d10c      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x18e>
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d107      	bne.n	80030ce <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030c4:	4619      	mov	r1, r3
 80030c6:	4837      	ldr	r0, [pc, #220]	; (80031a4 <HAL_ADC_ConfigChannel+0x264>)
 80030c8:	f7ff faa2 	bl	8002610 <LL_ADC_SetCommonPathInternalCh>
 80030cc:	e05c      	b.n	8003188 <HAL_ADC_ConfigChannel+0x248>
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a39      	ldr	r2, [pc, #228]	; (80031b8 <HAL_ADC_ConfigChannel+0x278>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d157      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x248>
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d152      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x248>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030e8:	4619      	mov	r1, r3
 80030ea:	482e      	ldr	r0, [pc, #184]	; (80031a4 <HAL_ADC_ConfigChannel+0x264>)
 80030ec:	f7ff fa90 	bl	8002610 <LL_ADC_SetCommonPathInternalCh>
 80030f0:	e04a      	b.n	8003188 <HAL_ADC_ConfigChannel+0x248>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030fa:	d004      	beq.n	8003106 <HAL_ADC_ConfigChannel+0x1c6>
         (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD)  )
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
      if((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8003100:	4a26      	ldr	r2, [pc, #152]	; (800319c <HAL_ADC_ConfigChannel+0x25c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d107      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x1d6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4619      	mov	r1, r3
 8003110:	4610      	mov	r0, r2
 8003112:	f7ff fb05 	bl	8002720 <LL_ADC_REG_SetSequencerChRem>
      }
      
      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	4b21      	ldr	r3, [pc, #132]	; (80031a0 <HAL_ADC_ConfigChannel+0x260>)
 800311c:	4013      	ands	r3, r2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d032      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x248>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003122:	4820      	ldr	r0, [pc, #128]	; (80031a4 <HAL_ADC_ConfigChannel+0x264>)
 8003124:	f7ff fa87 	bl	8002636 <LL_ADC_GetCommonPathInternalCh>
 8003128:	61b8      	str	r0, [r7, #24]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1e      	ldr	r2, [pc, #120]	; (80031a8 <HAL_ADC_ConfigChannel+0x268>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d107      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x204>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800313a:	4619      	mov	r1, r3
 800313c:	4819      	ldr	r0, [pc, #100]	; (80031a4 <HAL_ADC_ConfigChannel+0x264>)
 800313e:	f7ff fa67 	bl	8002610 <LL_ADC_SetCommonPathInternalCh>
 8003142:	e021      	b.n	8003188 <HAL_ADC_ConfigChannel+0x248>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1a      	ldr	r2, [pc, #104]	; (80031b4 <HAL_ADC_ConfigChannel+0x274>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d107      	bne.n	800315e <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003154:	4619      	mov	r1, r3
 8003156:	4813      	ldr	r0, [pc, #76]	; (80031a4 <HAL_ADC_ConfigChannel+0x264>)
 8003158:	f7ff fa5a 	bl	8002610 <LL_ADC_SetCommonPathInternalCh>
 800315c:	e014      	b.n	8003188 <HAL_ADC_ConfigChannel+0x248>
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a15      	ldr	r2, [pc, #84]	; (80031b8 <HAL_ADC_ConfigChannel+0x278>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d10f      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x248>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800316e:	4619      	mov	r1, r3
 8003170:	480c      	ldr	r0, [pc, #48]	; (80031a4 <HAL_ADC_ConfigChannel+0x264>)
 8003172:	f7ff fa4d 	bl	8002610 <LL_ADC_SetCommonPathInternalCh>
 8003176:	e007      	b.n	8003188 <HAL_ADC_ConfigChannel+0x248>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317c:	f043 0220 	orr.w	r2, r3, #32
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	649a      	str	r2, [r3, #72]	; 0x48
    
    tmp_hal_status = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	77fb      	strb	r3, [r7, #31]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003190:	7ffb      	ldrb	r3, [r7, #31]
}
 8003192:	4618      	mov	r0, r3
 8003194:	3720      	adds	r7, #32
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	80000004 	.word	0x80000004
 80031a0:	80080000 	.word	0x80080000
 80031a4:	40012700 	.word	0x40012700
 80031a8:	b0001000 	.word	0xb0001000
 80031ac:	20000010 	.word	0x20000010
 80031b0:	053e2d63 	.word	0x053e2d63
 80031b4:	b8004000 	.word	0xb8004000
 80031b8:	b4002000 	.word	0xb4002000

080031bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fb36 	bl	800283e <LL_ADC_IsEnabled>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d162      	bne.n	800329e <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	4b32      	ldr	r3, [pc, #200]	; (80032a8 <ADC_Enable+0xec>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00d      	beq.n	8003202 <ADC_Enable+0x46>
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ea:	f043 0210 	orr.w	r2, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	649a      	str	r2, [r3, #72]	; 0x48

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f6:	f043 0201 	orr.w	r2, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	64da      	str	r2, [r3, #76]	; 0x4c

      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e04e      	b.n	80032a0 <ADC_Enable+0xe4>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7ff faf1 	bl	80027ee <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800320c:	4827      	ldr	r0, [pc, #156]	; (80032ac <ADC_Enable+0xf0>)
 800320e:	f7ff fa12 	bl	8002636 <LL_ADC_GetCommonPathInternalCh>
 8003212:	4603      	mov	r3, r0
 8003214:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00f      	beq.n	800323c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800321c:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <ADC_Enable+0xf4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	099b      	lsrs	r3, r3, #6
 8003222:	4a24      	ldr	r2, [pc, #144]	; (80032b4 <ADC_Enable+0xf8>)
 8003224:	fba2 2303 	umull	r2, r3, r2, r3
 8003228:	099b      	lsrs	r3, r3, #6
 800322a:	3301      	adds	r3, #1
 800322c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800322e:	e002      	b.n	8003236 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	3b01      	subs	r3, #1
 8003234:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1f9      	bne.n	8003230 <ADC_Enable+0x74>
    }

#if defined(ADC_SUPPORT_2_5_MSPS)
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	7e5b      	ldrb	r3, [r3, #25]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d02c      	beq.n	800329e <ADC_Enable+0xe2>
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003244:	f7ff f9ac 	bl	80025a0 <HAL_GetTick>
 8003248:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800324a:	e021      	b.n	8003290 <ADC_Enable+0xd4>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff faf4 	bl	800283e <LL_ADC_IsEnabled>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d104      	bne.n	8003266 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fac4 	bl	80027ee <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003266:	f7ff f99b 	bl	80025a0 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b02      	cmp	r3, #2
 8003272:	d90d      	bls.n	8003290 <ADC_Enable+0xd4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003278:	f043 0210 	orr.w	r2, r3, #16
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	649a      	str	r2, [r3, #72]	; 0x48
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003284:	f043 0201 	orr.w	r2, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	64da      	str	r2, [r3, #76]	; 0x4c
          
          return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e007      	b.n	80032a0 <ADC_Enable+0xe4>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b01      	cmp	r3, #1
 800329c:	d1d6      	bne.n	800324c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	80000017 	.word	0x80000017
 80032ac:	40012700 	.word	0x40012700
 80032b0:	20000010 	.word	0x20000010
 80032b4:	053e2d63 	.word	0x053e2d63

080032b8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff facd 	bl	8002864 <LL_ADC_IsDisableOngoing>
 80032ca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fab4 	bl	800283e <LL_ADC_IsEnabled>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d047      	beq.n	800336c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d144      	bne.n	800336c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 0305 	and.w	r3, r3, #5
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d10c      	bne.n	800330a <ADC_Disable+0x52>
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fa8e 	bl	8002816 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2203      	movs	r2, #3
 8003300:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003302:	f7ff f94d 	bl	80025a0 <HAL_GetTick>
 8003306:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003308:	e029      	b.n	800335e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800330e:	f043 0210 	orr.w	r2, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	649a      	str	r2, [r3, #72]	; 0x48
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331a:	f043 0201 	orr.w	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	64da      	str	r2, [r3, #76]	; 0x4c
      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e023      	b.n	800336e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003326:	f7ff f93b 	bl	80025a0 <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d914      	bls.n	800335e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00d      	beq.n	800335e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003346:	f043 0210 	orr.w	r2, r3, #16
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003352:	f043 0201 	orr.w	r2, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	64da      	str	r2, [r3, #76]	; 0x4c

          return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e007      	b.n	800336e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1dc      	bne.n	8003326 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003388:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800338c:	2b00      	cmp	r3, #0
 800338e:	d143      	bne.n	8003418 <ADC_DMAConvCplt+0xa2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003394:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(   (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff f975 	bl	8002690 <LL_ADC_REG_IsTriggerSourceSWStart>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d031      	beq.n	8003410 <ADC_DMAConvCplt+0x9a>
       && (hadc->Init.ContinuousConvMode == DISABLE)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	7e9b      	ldrb	r3, [r3, #26]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d12d      	bne.n	8003410 <ADC_DMAConvCplt+0x9a>
      )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d126      	bne.n	8003410 <ADC_DMAConvCplt+0x9a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff fa73 	bl	80028b2 <LL_ADC_REG_IsConversionOngoing>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d112      	bne.n	80033f8 <ADC_DMAConvCplt+0x82>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 020c 	bic.w	r2, r2, #12
 80033e0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	f043 0201 	orr.w	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	649a      	str	r2, [r3, #72]	; 0x48
 80033f6:	e00b      	b.n	8003410 <ADC_DMAConvCplt+0x9a>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	649a      	str	r2, [r3, #72]	; 0x48
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003408:	f043 0201 	orr.w	r2, r3, #1
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7ff fd6d 	bl	8002ef0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003416:	e00e      	b.n	8003436 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800341c:	f003 0310 	and.w	r3, r3, #16
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <ADC_DMAConvCplt+0xb6>
      HAL_ADC_ErrorCallback(hadc);
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f7ff fd81 	bl	8002f2c <HAL_ADC_ErrorCallback>
}
 800342a:	e004      	b.n	8003436 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	4798      	blx	r3
}
 8003436:	bf00      	nop
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f7ff fd59 	bl	8002f04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003452:	bf00      	nop
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003478:	f043 0204 	orr.w	r2, r3, #4
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff fd53 	bl	8002f2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <LL_ADC_GetCommonClock>:
{
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 800349e:	4618      	mov	r0, r3
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <LL_ADC_GetClock>:
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <LL_ADC_SetCalibrationFactor>:
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034d6:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <LL_ADC_GetCalibrationFactor>:
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <LL_ADC_Enable>:
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800351e:	f023 0317 	bic.w	r3, r3, #23
 8003522:	f043 0201 	orr.w	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	609a      	str	r2, [r3, #8]
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <LL_ADC_Disable>:
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003546:	f023 0317 	bic.w	r3, r3, #23
 800354a:	f043 0202 	orr.w	r2, r3, #2
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	609a      	str	r2, [r3, #8]
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <LL_ADC_IsEnabled>:
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <LL_ADC_IsEnabled+0x18>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <LL_ADC_IsEnabled+0x1a>
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <LL_ADC_StartCalibration>:
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003594:	f023 0317 	bic.w	r3, r3, #23
 8003598:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	609a      	str	r2, [r3, #8]
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <LL_ADC_IsCalibrationOnGoing>:
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035c0:	d101      	bne.n	80035c6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_ADCEx_Calibration_Start>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08a      	sub	sp, #40	; 0x28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  UNUSED(SingleDiff);

  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	623b      	str	r3, [r7, #32]
  uint32_t adc_clk_async_presc;
  __IO uint32_t delay_cpu_cycles;
#endif /* ADC_SUPPORT_2_5_MSPS */

  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_ADCEx_Calibration_Start+0x20>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e0d5      	b.n	80037a0 <HAL_ADCEx_Calibration_Start+0x1cc>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff fe5b 	bl	80032b8 <ADC_Disable>
 8003602:	4603      	mov	r3, r0
 8003604:	77fb      	strb	r3, [r7, #31]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003606:	7ffb      	ldrb	r3, [r7, #31]
 8003608:	2b00      	cmp	r3, #0
 800360a:	f040 80be 	bne.w	800378a <HAL_ADCEx_Calibration_Start+0x1b6>
  {
    /* Set ADC state */
#if defined(ADC_SUPPORT_2_5_MSPS)
    ADC_STATE_CLR_SET(hadc->State,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003612:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003616:	f043 0202 	orr.w	r2, r3, #2
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	f248 0303 	movw	r3, #32771	; 0x8003
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800363a:	f023 0303 	bic.w	r3, r3, #3
 800363e:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003640:	2300      	movs	r3, #0
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
 8003644:	e02e      	b.n	80036a4 <HAL_ADCEx_Calibration_Start+0xd0>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff ff9a 	bl	8003584 <LL_ADC_StartCalibration>
#else
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003650:	e014      	b.n	800367c <HAL_ADCEx_Calibration_Start+0xa8>
    {
      wait_loop_index++;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	3301      	adds	r3, #1
 8003656:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4a53      	ldr	r2, [pc, #332]	; (80037a8 <HAL_ADCEx_Calibration_Start+0x1d4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d90d      	bls.n	800367c <HAL_ADCEx_Calibration_Start+0xa8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003664:	f023 0312 	bic.w	r3, r3, #18
 8003668:	f043 0210 	orr.w	r2, r3, #16
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	649a      	str	r2, [r3, #72]	; 0x48
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e091      	b.n	80037a0 <HAL_ADCEx_Calibration_Start+0x1cc>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f7ff ff93 	bl	80035ac <LL_ADC_IsCalibrationOnGoing>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e2      	bne.n	8003652 <HAL_ADCEx_Calibration_Start+0x7e>
      }
    }
#if defined(ADC_SUPPORT_2_5_MSPS)
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff ff2d 	bl	80034f0 <LL_ADC_GetCalibrationFactor>
 8003696:	4602      	mov	r2, r0
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	4413      	add	r3, r2
 800369c:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	3301      	adds	r3, #1
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	2b07      	cmp	r3, #7
 80036a8:	d9cd      	bls.n	8003646 <HAL_ADCEx_Calibration_Start+0x72>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80036aa:	6a3a      	ldr	r2, [r7, #32]
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	623b      	str	r3, [r7, #32]
    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff28 	bl	800350e <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if(LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fef1 	bl	80034aa <LL_ADC_GetClock>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d118      	bne.n	8003700 <HAL_ADCEx_Calibration_Start+0x12c>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036ce:	4837      	ldr	r0, [pc, #220]	; (80037ac <HAL_ADCEx_Calibration_Start+0x1d8>)
 80036d0:	f7ff fedd 	bl	800348e <LL_ADC_GetCommonClock>
 80036d4:	6178      	str	r0, [r7, #20]

      if(adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80036dc:	d310      	bcc.n	8003700 <HAL_ADCEx_Calibration_Start+0x12c>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1U << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3U));
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	0c9b      	lsrs	r3, r3, #18
 80036e2:	3b03      	subs	r3, #3
 80036e4:	2201      	movs	r2, #1
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	60fb      	str	r3, [r7, #12]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	085b      	lsrs	r3, r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]

        while(delay_cpu_cycles != 0)
 80036f2:	e002      	b.n	80036fa <HAL_ADCEx_Calibration_Start+0x126>
        {
          delay_cpu_cycles--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	3b01      	subs	r3, #1
 80036f8:	60fb      	str	r3, [r7, #12]
        while(delay_cpu_cycles != 0)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1f9      	bne.n	80036f4 <HAL_ADCEx_Calibration_Start+0x120>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6a39      	ldr	r1, [r7, #32]
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff fedd 	bl	80034c6 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff ff10 	bl	8003536 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003716:	f7fe ff43 	bl	80025a0 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800371c:	e01c      	b.n	8003758 <HAL_ADCEx_Calibration_Start+0x184>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800371e:	f7fe ff3f 	bl	80025a0 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d915      	bls.n	8003758 <HAL_ADCEx_Calibration_Start+0x184>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff ff14 	bl	800355e <LL_ADC_IsEnabled>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00d      	beq.n	8003758 <HAL_ADCEx_Calibration_Start+0x184>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003740:	f043 0210 	orr.w	r2, r3, #16
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	649a      	str	r2, [r3, #72]	; 0x48

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374c:	f043 0201 	orr.w	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	64da      	str	r2, [r3, #76]	; 0x4c

          return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e023      	b.n	80037a0 <HAL_ADCEx_Calibration_Start+0x1cc>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff fefe 	bl	800355e <LL_ADC_IsEnabled>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1da      	bne.n	800371e <HAL_ADCEx_Calibration_Start+0x14a>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68d9      	ldr	r1, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	430a      	orrs	r2, r1
 8003776:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800377c:	f023 0303 	bic.w	r3, r3, #3
 8003780:	f043 0201 	orr.w	r2, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	649a      	str	r2, [r3, #72]	; 0x48
 8003788:	e005      	b.n	8003796 <HAL_ADCEx_Calibration_Start+0x1c2>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378e:	f043 0210 	orr.w	r2, r3, #16
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	649a      	str	r2, [r3, #72]	; 0x48
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return tmp_hal_status;
 800379e:	7ffb      	ldrb	r3, [r7, #31]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3728      	adds	r7, #40	; 0x28
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	00026aaa 	.word	0x00026aaa
 80037ac:	40012700 	.word	0x40012700

080037b0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <__NVIC_SetPriorityGrouping+0x44>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003808:	4013      	ands	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800381e:	4a04      	ldr	r2, [pc, #16]	; (8003830 <__NVIC_SetPriorityGrouping+0x44>)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	60d3      	str	r3, [r2, #12]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <__NVIC_GetPriorityGrouping+0x18>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	0a1b      	lsrs	r3, r3, #8
 800383e:	f003 0307 	and.w	r3, r3, #7
}
 8003842:	4618      	mov	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	2b00      	cmp	r3, #0
 8003860:	db0b      	blt.n	800387a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	f003 021f 	and.w	r2, r3, #31
 8003868:	4907      	ldr	r1, [pc, #28]	; (8003888 <__NVIC_EnableIRQ+0x38>)
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	2001      	movs	r0, #1
 8003872:	fa00 f202 	lsl.w	r2, r0, r2
 8003876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	e000e100 	.word	0xe000e100

0800388c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	2b00      	cmp	r3, #0
 800389c:	db12      	blt.n	80038c4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	f003 021f 	and.w	r2, r3, #31
 80038a4:	490a      	ldr	r1, [pc, #40]	; (80038d0 <__NVIC_DisableIRQ+0x44>)
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	095b      	lsrs	r3, r3, #5
 80038ac:	2001      	movs	r0, #1
 80038ae:	fa00 f202 	lsl.w	r2, r0, r2
 80038b2:	3320      	adds	r3, #32
 80038b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80038b8:	f3bf 8f4f 	dsb	sy
}
 80038bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80038be:	f3bf 8f6f 	isb	sy
}
 80038c2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	e000e100 	.word	0xe000e100

080038d4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	4603      	mov	r3, r0
 80038dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	db0c      	blt.n	8003900 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	f003 021f 	and.w	r2, r3, #31
 80038ec:	4907      	ldr	r1, [pc, #28]	; (800390c <__NVIC_SetPendingIRQ+0x38>)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	2001      	movs	r0, #1
 80038f6:	fa00 f202 	lsl.w	r2, r0, r2
 80038fa:	3340      	adds	r3, #64	; 0x40
 80038fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000e100 	.word	0xe000e100

08003910 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	4603      	mov	r3, r0
 8003918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800391a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391e:	2b00      	cmp	r3, #0
 8003920:	db0c      	blt.n	800393c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	f003 021f 	and.w	r2, r3, #31
 8003928:	4907      	ldr	r1, [pc, #28]	; (8003948 <__NVIC_ClearPendingIRQ+0x38>)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	2001      	movs	r0, #1
 8003932:	fa00 f202 	lsl.w	r2, r0, r2
 8003936:	3360      	adds	r3, #96	; 0x60
 8003938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	e000e100 	.word	0xe000e100

0800394c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	6039      	str	r1, [r7, #0]
 8003956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395c:	2b00      	cmp	r3, #0
 800395e:	db0a      	blt.n	8003976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	b2da      	uxtb	r2, r3
 8003964:	490c      	ldr	r1, [pc, #48]	; (8003998 <__NVIC_SetPriority+0x4c>)
 8003966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396a:	0112      	lsls	r2, r2, #4
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	440b      	add	r3, r1
 8003970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003974:	e00a      	b.n	800398c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	b2da      	uxtb	r2, r3
 800397a:	4908      	ldr	r1, [pc, #32]	; (800399c <__NVIC_SetPriority+0x50>)
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	3b04      	subs	r3, #4
 8003984:	0112      	lsls	r2, r2, #4
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	440b      	add	r3, r1
 800398a:	761a      	strb	r2, [r3, #24]
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr
 8003998:	e000e100 	.word	0xe000e100
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b089      	sub	sp, #36	; 0x24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f1c3 0307 	rsb	r3, r3, #7
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	bf28      	it	cs
 80039be:	2304      	movcs	r3, #4
 80039c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3304      	adds	r3, #4
 80039c6:	2b06      	cmp	r3, #6
 80039c8:	d902      	bls.n	80039d0 <NVIC_EncodePriority+0x30>
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	3b03      	subs	r3, #3
 80039ce:	e000      	b.n	80039d2 <NVIC_EncodePriority+0x32>
 80039d0:	2300      	movs	r3, #0
 80039d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d4:	f04f 32ff 	mov.w	r2, #4294967295
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43da      	mvns	r2, r3
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	401a      	ands	r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039e8:	f04f 31ff 	mov.w	r1, #4294967295
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	fa01 f303 	lsl.w	r3, r1, r3
 80039f2:	43d9      	mvns	r1, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f8:	4313      	orrs	r3, r2
         );
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3724      	adds	r7, #36	; 0x24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a18:	d301      	bcc.n	8003a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e00f      	b.n	8003a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <SysTick_Config+0x40>)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a26:	210f      	movs	r1, #15
 8003a28:	f04f 30ff 	mov.w	r0, #4294967295
 8003a2c:	f7ff ff8e 	bl	800394c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a30:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <SysTick_Config+0x40>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a36:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <SysTick_Config+0x40>)
 8003a38:	2207      	movs	r2, #7
 8003a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	e000e010 	.word	0xe000e010

08003a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff fec9 	bl	80037ec <__NVIC_SetPriorityGrouping>
}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b086      	sub	sp, #24
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	4603      	mov	r3, r0
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	607a      	str	r2, [r7, #4]
 8003a6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a70:	f7ff fee0 	bl	8003834 <__NVIC_GetPriorityGrouping>
 8003a74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	6978      	ldr	r0, [r7, #20]
 8003a7c:	f7ff ff90 	bl	80039a0 <NVIC_EncodePriority>
 8003a80:	4602      	mov	r2, r0
 8003a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a86:	4611      	mov	r1, r2
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff ff5f 	bl	800394c <__NVIC_SetPriority>
}
 8003a8e:	bf00      	nop
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fed3 	bl	8003850 <__NVIC_EnableIRQ>
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	4603      	mov	r3, r0
 8003aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff fee3 	bl	800388c <__NVIC_DisableIRQ>
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff ff96 	bl	8003a08 <SysTick_Config>
 8003adc:	4603      	mov	r3, r0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	4603      	mov	r3, r0
 8003aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff feed 	bl	80038d4 <__NVIC_SetPendingIRQ>
}
 8003afa:	bf00      	nop
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	4603      	mov	r3, r0
 8003b0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff fefd 	bl	8003910 <__NVIC_ClearPendingIRQ>
}
 8003b16:	bf00      	nop
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e078      	b.n	8003c24 <HAL_DMA_Init+0x104>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	4b3c      	ldr	r3, [pc, #240]	; (8003c2c <HAL_DMA_Init+0x10c>)
 8003b3a:	4413      	add	r3, r2
 8003b3c:	4a3c      	ldr	r2, [pc, #240]	; (8003c30 <HAL_DMA_Init+0x110>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	091b      	lsrs	r3, r3, #4
 8003b44:	009a      	lsls	r2, r3, #2
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a39      	ldr	r2, [pc, #228]	; (8003c34 <HAL_DMA_Init+0x114>)
 8003b4e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f9b0 	bl	8003f08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bb0:	d102      	bne.n	8003bb8 <HAL_DMA_Init+0x98>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003bc4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bce:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d010      	beq.n	8003bfa <HAL_DMA_Init+0xda>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b04      	cmp	r3, #4
 8003bde:	d80c      	bhi.n	8003bfa <HAL_DMA_Init+0xda>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f9bd 	bl	8003f60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bf6:	605a      	str	r2, [r3, #4]
 8003bf8:	e008      	b.n	8003c0c <HAL_DMA_Init+0xec>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	bffdfff8 	.word	0xbffdfff8
 8003c30:	cccccccd 	.word	0xcccccccd
 8003c34:	40020000 	.word	0x40020000

08003c38 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_DMA_Start_IT+0x20>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e066      	b.n	8003d26 <HAL_DMA_Start_IT+0xee>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d155      	bne.n	8003d18 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2202      	movs	r2, #2
 8003c70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0201 	bic.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	68b9      	ldr	r1, [r7, #8]
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f8fb 	bl	8003e8c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d008      	beq.n	8003cb0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 020e 	orr.w	r2, r2, #14
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	e00f      	b.n	8003cd0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0204 	bic.w	r2, r2, #4
 8003cbe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 020a 	orr.w	r2, r2, #10
 8003cce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d04:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0201 	orr.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	e005      	b.n	8003d24 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d20:	2302      	movs	r3, #2
 8003d22:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4a:	f003 031c 	and.w	r3, r3, #28
 8003d4e:	2204      	movs	r2, #4
 8003d50:	409a      	lsls	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d026      	beq.n	8003da8 <HAL_DMA_IRQHandler+0x7a>
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d021      	beq.n	8003da8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0320 	and.w	r3, r3, #32
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d107      	bne.n	8003d82 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0204 	bic.w	r2, r2, #4
 8003d80:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	f003 021c 	and.w	r2, r3, #28
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	2104      	movs	r1, #4
 8003d90:	fa01 f202 	lsl.w	r2, r1, r2
 8003d94:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d071      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003da6:	e06c      	b.n	8003e82 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dac:	f003 031c 	and.w	r3, r3, #28
 8003db0:	2202      	movs	r2, #2
 8003db2:	409a      	lsls	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d02e      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xec>
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d029      	beq.n	8003e1a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10b      	bne.n	8003dec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 020a 	bic.w	r2, r2, #10
 8003de2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df0:	f003 021c 	and.w	r2, r3, #28
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	2102      	movs	r1, #2
 8003dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d038      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003e18:	e033      	b.n	8003e82 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	f003 031c 	and.w	r3, r3, #28
 8003e22:	2208      	movs	r2, #8
 8003e24:	409a      	lsls	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d02a      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x156>
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d025      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 020e 	bic.w	r2, r2, #14
 8003e46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4c:	f003 021c 	and.w	r2, r3, #28
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	2101      	movs	r1, #1
 8003e56:	fa01 f202 	lsl.w	r2, r1, r2
 8003e5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d004      	beq.n	8003e84 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e82:	bf00      	nop
 8003e84:	bf00      	nop
}
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
 8003e98:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ea2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d004      	beq.n	8003eb6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003eb4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eba:	f003 021c 	and.w	r2, r3, #28
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b10      	cmp	r3, #16
 8003ed8:	d108      	bne.n	8003eec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003eea:	e007      	b.n	8003efc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68ba      	ldr	r2, [r7, #8]
 8003ef2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	60da      	str	r2, [r3, #12]
}
 8003efc:	bf00      	nop
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	089b      	lsrs	r3, r3, #2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f1c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6493      	str	r3, [r2, #72]	; 0x48
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	3b08      	subs	r3, #8
 8003f2c:	4a0a      	ldr	r2, [pc, #40]	; (8003f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f32:	091b      	lsrs	r3, r3, #4
 8003f34:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a08      	ldr	r2, [pc, #32]	; (8003f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003f3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	2201      	movs	r2, #1
 8003f44:	409a      	lsls	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003f4a:	bf00      	nop
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	cccccccd 	.word	0xcccccccd
 8003f5c:	40020880 	.word	0x40020880

08003f60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f70:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a09      	ldr	r2, [pc, #36]	; (8003fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003f84:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2201      	movs	r2, #1
 8003f90:	409a      	lsls	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003f96:	bf00      	nop
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	1000823f 	.word	0x1000823f
 8003fa8:	40020940 	.word	0x40020940

08003fac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_FLASH_Unlock+0x38>)
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	da0b      	bge.n	8003fd6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <HAL_FLASH_Unlock+0x38>)
 8003fc0:	4a09      	ldr	r2, [pc, #36]	; (8003fe8 <HAL_FLASH_Unlock+0x3c>)
 8003fc2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003fc4:	4b07      	ldr	r3, [pc, #28]	; (8003fe4 <HAL_FLASH_Unlock+0x38>)
 8003fc6:	4a09      	ldr	r2, [pc, #36]	; (8003fec <HAL_FLASH_Unlock+0x40>)
 8003fc8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <HAL_FLASH_Unlock+0x38>)
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	da01      	bge.n	8003fd6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	58004000 	.word	0x58004000
 8003fe8:	45670123 	.word	0x45670123
 8003fec:	cdef89ab 	.word	0xcdef89ab

08003ff0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003ffa:	4b09      	ldr	r3, [pc, #36]	; (8004020 <HAL_FLASH_Lock+0x30>)
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	4a08      	ldr	r2, [pc, #32]	; (8004020 <HAL_FLASH_Lock+0x30>)
 8004000:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004004:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004006:	4b06      	ldr	r3, [pc, #24]	; (8004020 <HAL_FLASH_Lock+0x30>)
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	2b00      	cmp	r3, #0
 800400c:	db01      	blt.n	8004012 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004012:	79fb      	ldrb	r3, [r7, #7]
}
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	58004000 	.word	0x58004000

08004024 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800402c:	f7fe fab8 	bl	80025a0 <HAL_GetTick>
 8004030:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004032:	e009      	b.n	8004048 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004034:	f7fe fab4 	bl	80025a0 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	429a      	cmp	r2, r3
 8004042:	d801      	bhi.n	8004048 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e054      	b.n	80040f2 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004048:	4b2c      	ldr	r3, [pc, #176]	; (80040fc <FLASH_WaitForLastOperation+0xd8>)
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004054:	d0ee      	beq.n	8004034 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8004056:	4b29      	ldr	r3, [pc, #164]	; (80040fc <FLASH_WaitForLastOperation+0xd8>)
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d002      	beq.n	800406c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004066:	4b25      	ldr	r3, [pc, #148]	; (80040fc <FLASH_WaitForLastOperation+0xd8>)
 8004068:	2201      	movs	r2, #1
 800406a:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d007      	beq.n	8004086 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8004076:	4b21      	ldr	r3, [pc, #132]	; (80040fc <FLASH_WaitForLastOperation+0xd8>)
 8004078:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800407c:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004084:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800408c:	4013      	ands	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d007      	beq.n	80040aa <FLASH_WaitForLastOperation+0x86>
 800409a:	4b18      	ldr	r3, [pc, #96]	; (80040fc <FLASH_WaitForLastOperation+0xd8>)
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80040a4:	4915      	ldr	r1, [pc, #84]	; (80040fc <FLASH_WaitForLastOperation+0xd8>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	618b      	str	r3, [r1, #24]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d004      	beq.n	80040be <FLASH_WaitForLastOperation+0x9a>
 80040b4:	4a11      	ldr	r2, [pc, #68]	; (80040fc <FLASH_WaitForLastOperation+0xd8>)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80040bc:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00e      	beq.n	80040e2 <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80040c4:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <FLASH_WaitForLastOperation+0xdc>)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e011      	b.n	80040f2 <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80040ce:	f7fe fa67 	bl	80025a0 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d801      	bhi.n	80040e2 <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e007      	b.n	80040f2 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80040e2:	4b06      	ldr	r3, [pc, #24]	; (80040fc <FLASH_WaitForLastOperation+0xd8>)
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040ee:	d0ee      	beq.n	80040ce <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	58004000 	.word	0x58004000
 8004100:	20000370 	.word	0x20000370

08004104 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800410e:	4b24      	ldr	r3, [pc, #144]	; (80041a0 <HAL_FLASHEx_Erase+0x9c>)
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_FLASHEx_Erase+0x16>
 8004116:	2302      	movs	r3, #2
 8004118:	e03d      	b.n	8004196 <HAL_FLASHEx_Erase+0x92>
 800411a:	4b21      	ldr	r3, [pc, #132]	; (80041a0 <HAL_FLASHEx_Erase+0x9c>)
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004120:	4b1f      	ldr	r3, [pc, #124]	; (80041a0 <HAL_FLASHEx_Erase+0x9c>)
 8004122:	2200      	movs	r2, #0
 8004124:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004126:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800412a:	f7ff ff7b 	bl	8004024 <FLASH_WaitForLastOperation>
 800412e:	4603      	mov	r3, r0
 8004130:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004132:	7bfb      	ldrb	r3, [r7, #15]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d12a      	bne.n	800418e <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d124      	bne.n	800418a <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	f04f 32ff 	mov.w	r2, #4294967295
 8004146:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	e012      	b.n	8004176 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004150:	68b8      	ldr	r0, [r7, #8]
 8004152:	f000 f827 	bl	80041a4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004156:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800415a:	f7ff ff63 	bl	8004024 <FLASH_WaitForLastOperation>
 800415e:	4603      	mov	r3, r0
 8004160:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	601a      	str	r2, [r3, #0]
          break;
 800416e:	e00a      	b.n	8004186 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	3301      	adds	r3, #1
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	4413      	add	r3, r2
 8004180:	68ba      	ldr	r2, [r7, #8]
 8004182:	429a      	cmp	r2, r3
 8004184:	d3e4      	bcc.n	8004150 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004186:	f000 f86f 	bl	8004268 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800418a:	f000 f825 	bl	80041d8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800418e:	4b04      	ldr	r3, [pc, #16]	; (80041a0 <HAL_FLASHEx_Erase+0x9c>)
 8004190:	2200      	movs	r2, #0
 8004192:	701a      	strb	r2, [r3, #0]

  return status;
 8004194:	7bfb      	ldrb	r3, [r7, #15]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	20000370 	.word	0x20000370

080041a4 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80041ac:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <FLASH_PageErase+0x30>)
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4313      	orrs	r3, r2
 80041ba:	4a06      	ldr	r2, [pc, #24]	; (80041d4 <FLASH_PageErase+0x30>)
 80041bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c0:	f043 0302 	orr.w	r3, r3, #2
 80041c4:	6153      	str	r3, [r2, #20]
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	58004000 	.word	0x58004000

080041d8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 80041dc:	4b21      	ldr	r3, [pc, #132]	; (8004264 <FLASH_FlushCaches+0x8c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e8:	d117      	bne.n	800421a <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80041ea:	4b1e      	ldr	r3, [pc, #120]	; (8004264 <FLASH_FlushCaches+0x8c>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a1d      	ldr	r2, [pc, #116]	; (8004264 <FLASH_FlushCaches+0x8c>)
 80041f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041f4:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80041f6:	4b1b      	ldr	r3, [pc, #108]	; (8004264 <FLASH_FlushCaches+0x8c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1a      	ldr	r2, [pc, #104]	; (8004264 <FLASH_FlushCaches+0x8c>)
 80041fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	4b18      	ldr	r3, [pc, #96]	; (8004264 <FLASH_FlushCaches+0x8c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a17      	ldr	r2, [pc, #92]	; (8004264 <FLASH_FlushCaches+0x8c>)
 8004208:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800420c:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800420e:	4b15      	ldr	r3, [pc, #84]	; (8004264 <FLASH_FlushCaches+0x8c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a14      	ldr	r2, [pc, #80]	; (8004264 <FLASH_FlushCaches+0x8c>)
 8004214:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004218:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 800421a:	4b12      	ldr	r3, [pc, #72]	; (8004264 <FLASH_FlushCaches+0x8c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004226:	d117      	bne.n	8004258 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004228:	4b0e      	ldr	r3, [pc, #56]	; (8004264 <FLASH_FlushCaches+0x8c>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a0d      	ldr	r2, [pc, #52]	; (8004264 <FLASH_FlushCaches+0x8c>)
 800422e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004232:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004234:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <FLASH_FlushCaches+0x8c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a0a      	ldr	r2, [pc, #40]	; (8004264 <FLASH_FlushCaches+0x8c>)
 800423a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	4b08      	ldr	r3, [pc, #32]	; (8004264 <FLASH_FlushCaches+0x8c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a07      	ldr	r2, [pc, #28]	; (8004264 <FLASH_FlushCaches+0x8c>)
 8004246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800424a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <FLASH_FlushCaches+0x8c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a04      	ldr	r2, [pc, #16]	; (8004264 <FLASH_FlushCaches+0x8c>)
 8004252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004256:	6013      	str	r3, [r2, #0]
  }
}
 8004258:	bf00      	nop
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	58004000 	.word	0x58004000

08004268 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <FLASH_AcknowledgePageErase+0x20>)
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	4a05      	ldr	r2, [pc, #20]	; (8004288 <FLASH_AcknowledgePageErase+0x20>)
 8004272:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004276:	f023 0302 	bic.w	r3, r3, #2
 800427a:	6153      	str	r3, [r2, #20]
}
 800427c:	bf00      	nop
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	58004000 	.word	0x58004000

0800428c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800429a:	e146      	b.n	800452a <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	2101      	movs	r1, #1
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	fa01 f303 	lsl.w	r3, r1, r3
 80042a8:	4013      	ands	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 8138 	beq.w	8004524 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f003 0303 	and.w	r3, r3, #3
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d005      	beq.n	80042cc <HAL_GPIO_Init+0x40>
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 0303 	and.w	r3, r3, #3
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d130      	bne.n	800432e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	2203      	movs	r2, #3
 80042d8:	fa02 f303 	lsl.w	r3, r2, r3
 80042dc:	43db      	mvns	r3, r3
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4013      	ands	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	68da      	ldr	r2, [r3, #12]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004302:	2201      	movs	r2, #1
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	43db      	mvns	r3, r3
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4013      	ands	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	091b      	lsrs	r3, r3, #4
 8004318:	f003 0201 	and.w	r2, r3, #1
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	fa02 f303 	lsl.w	r3, r2, r3
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f003 0303 	and.w	r3, r3, #3
 8004336:	2b03      	cmp	r3, #3
 8004338:	d017      	beq.n	800436a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	2203      	movs	r2, #3
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	43db      	mvns	r3, r3
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4013      	ands	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	693a      	ldr	r2, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d123      	bne.n	80043be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	08da      	lsrs	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3208      	adds	r2, #8
 800437e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	220f      	movs	r2, #15
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	43db      	mvns	r3, r3
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4013      	ands	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f003 0307 	and.w	r3, r3, #7
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	08da      	lsrs	r2, r3, #3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3208      	adds	r2, #8
 80043b8:	6939      	ldr	r1, [r7, #16]
 80043ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	2203      	movs	r2, #3
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43db      	mvns	r3, r3
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4013      	ands	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f003 0203 	and.w	r2, r3, #3
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 8092 	beq.w	8004524 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004400:	4a51      	ldr	r2, [pc, #324]	; (8004548 <HAL_GPIO_Init+0x2bc>)
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	089b      	lsrs	r3, r3, #2
 8004406:	3302      	adds	r3, #2
 8004408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800440c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	220f      	movs	r2, #15
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	43db      	mvns	r3, r3
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4013      	ands	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800442a:	d013      	beq.n	8004454 <HAL_GPIO_Init+0x1c8>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a47      	ldr	r2, [pc, #284]	; (800454c <HAL_GPIO_Init+0x2c0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d00d      	beq.n	8004450 <HAL_GPIO_Init+0x1c4>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a46      	ldr	r2, [pc, #280]	; (8004550 <HAL_GPIO_Init+0x2c4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d007      	beq.n	800444c <HAL_GPIO_Init+0x1c0>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a45      	ldr	r2, [pc, #276]	; (8004554 <HAL_GPIO_Init+0x2c8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d101      	bne.n	8004448 <HAL_GPIO_Init+0x1bc>
 8004444:	2304      	movs	r3, #4
 8004446:	e006      	b.n	8004456 <HAL_GPIO_Init+0x1ca>
 8004448:	2307      	movs	r3, #7
 800444a:	e004      	b.n	8004456 <HAL_GPIO_Init+0x1ca>
 800444c:	2302      	movs	r3, #2
 800444e:	e002      	b.n	8004456 <HAL_GPIO_Init+0x1ca>
 8004450:	2301      	movs	r3, #1
 8004452:	e000      	b.n	8004456 <HAL_GPIO_Init+0x1ca>
 8004454:	2300      	movs	r3, #0
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	f002 0203 	and.w	r2, r2, #3
 800445c:	0092      	lsls	r2, r2, #2
 800445e:	4093      	lsls	r3, r2
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004466:	4938      	ldr	r1, [pc, #224]	; (8004548 <HAL_GPIO_Init+0x2bc>)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	089b      	lsrs	r3, r3, #2
 800446c:	3302      	adds	r3, #2
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004474:	4b38      	ldr	r3, [pc, #224]	; (8004558 <HAL_GPIO_Init+0x2cc>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	43db      	mvns	r3, r3
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4013      	ands	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004498:	4a2f      	ldr	r2, [pc, #188]	; (8004558 <HAL_GPIO_Init+0x2cc>)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800449e:	4b2e      	ldr	r3, [pc, #184]	; (8004558 <HAL_GPIO_Init+0x2cc>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	43db      	mvns	r3, r3
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4013      	ands	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044c2:	4a25      	ldr	r2, [pc, #148]	; (8004558 <HAL_GPIO_Init+0x2cc>)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80044c8:	4b23      	ldr	r3, [pc, #140]	; (8004558 <HAL_GPIO_Init+0x2cc>)
 80044ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4013      	ands	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044ee:	4a1a      	ldr	r2, [pc, #104]	; (8004558 <HAL_GPIO_Init+0x2cc>)
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80044f6:	4b18      	ldr	r3, [pc, #96]	; (8004558 <HAL_GPIO_Init+0x2cc>)
 80044f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	43db      	mvns	r3, r3
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4013      	ands	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800451c:	4a0e      	ldr	r2, [pc, #56]	; (8004558 <HAL_GPIO_Init+0x2cc>)
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	3301      	adds	r3, #1
 8004528:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	fa22 f303 	lsr.w	r3, r2, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	f47f aeb1 	bne.w	800429c <HAL_GPIO_Init+0x10>
  }
}
 800453a:	bf00      	nop
 800453c:	bf00      	nop
 800453e:	371c      	adds	r7, #28
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	40010000 	.word	0x40010000
 800454c:	48000400 	.word	0x48000400
 8004550:	48000800 	.word	0x48000800
 8004554:	48001000 	.word	0x48001000
 8004558:	58000800 	.word	0x58000800

0800455c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004566:	4b08      	ldr	r3, [pc, #32]	; (8004588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	88fb      	ldrh	r3, [r7, #6]
 800456c:	4013      	ands	r3, r2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d006      	beq.n	8004580 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004572:	4a05      	ldr	r2, [pc, #20]	; (8004588 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004574:	88fb      	ldrh	r3, [r7, #6]
 8004576:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004578:	88fb      	ldrh	r3, [r7, #6]
 800457a:	4618      	mov	r0, r3
 800457c:	f7fd fb10 	bl	8001ba0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004580:	bf00      	nop
 8004582:	3708      	adds	r7, #8
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	58000800 	.word	0x58000800

0800458c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004592:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <HAL_HSEM_IRQHandler+0x30>)
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004598:	4b08      	ldr	r3, [pc, #32]	; (80045bc <HAL_HSEM_IRQHandler+0x30>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	43db      	mvns	r3, r3
 80045a0:	4906      	ldr	r1, [pc, #24]	; (80045bc <HAL_HSEM_IRQHandler+0x30>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80045a6:	4a05      	ldr	r2, [pc, #20]	; (80045bc <HAL_HSEM_IRQHandler+0x30>)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f807 	bl	80045c0 <HAL_HSEM_FreeCallback>
}
 80045b2:	bf00      	nop
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	58001500 	.word	0x58001500

080045c0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e08d      	b.n	8004702 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fd fdc0 	bl	8002180 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2224      	movs	r2, #36	; 0x24
 8004604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0201 	bic.w	r2, r2, #1
 8004616:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004624:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004634:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d107      	bne.n	800464e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689a      	ldr	r2, [r3, #8]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800464a:	609a      	str	r2, [r3, #8]
 800464c:	e006      	b.n	800465c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800465a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d108      	bne.n	8004676 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004672:	605a      	str	r2, [r3, #4]
 8004674:	e007      	b.n	8004686 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004684:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6812      	ldr	r2, [r2, #0]
 8004690:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004694:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004698:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69d9      	ldr	r1, [r3, #28]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1a      	ldr	r2, [r3, #32]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
	...

0800470c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af02      	add	r7, sp, #8
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	607a      	str	r2, [r7, #4]
 8004716:	461a      	mov	r2, r3
 8004718:	460b      	mov	r3, r1
 800471a:	817b      	strh	r3, [r7, #10]
 800471c:	4613      	mov	r3, r2
 800471e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b20      	cmp	r3, #32
 800472a:	f040 80fd 	bne.w	8004928 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_I2C_Master_Transmit+0x30>
 8004738:	2302      	movs	r3, #2
 800473a:	e0f6      	b.n	800492a <HAL_I2C_Master_Transmit+0x21e>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004744:	f7fd ff2c 	bl	80025a0 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	2319      	movs	r3, #25
 8004750:	2201      	movs	r2, #1
 8004752:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 fa0a 	bl	8004b70 <I2C_WaitOnFlagUntilTimeout>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e0e1      	b.n	800492a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2221      	movs	r2, #33	; 0x21
 800476a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2210      	movs	r2, #16
 8004772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	893a      	ldrh	r2, [r7, #8]
 8004786:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004792:	b29b      	uxth	r3, r3
 8004794:	2bff      	cmp	r3, #255	; 0xff
 8004796:	d906      	bls.n	80047a6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	22ff      	movs	r2, #255	; 0xff
 800479c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800479e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	e007      	b.n	80047b6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80047b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047b4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d024      	beq.n	8004808 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	781a      	ldrb	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e6:	3b01      	subs	r3, #1
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	3301      	adds	r3, #1
 80047f6:	b2da      	uxtb	r2, r3
 80047f8:	8979      	ldrh	r1, [r7, #10]
 80047fa:	4b4e      	ldr	r3, [pc, #312]	; (8004934 <HAL_I2C_Master_Transmit+0x228>)
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 fbf1 	bl	8004fe8 <I2C_TransferConfig>
 8004806:	e066      	b.n	80048d6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480c:	b2da      	uxtb	r2, r3
 800480e:	8979      	ldrh	r1, [r7, #10]
 8004810:	4b48      	ldr	r3, [pc, #288]	; (8004934 <HAL_I2C_Master_Transmit+0x228>)
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 fbe6 	bl	8004fe8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800481c:	e05b      	b.n	80048d6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	6a39      	ldr	r1, [r7, #32]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f9f3 	bl	8004c0e <I2C_WaitOnTXISFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e07b      	b.n	800492a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	781a      	ldrb	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485a:	3b01      	subs	r3, #1
 800485c:	b29a      	uxth	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d034      	beq.n	80048d6 <HAL_I2C_Master_Transmit+0x1ca>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004870:	2b00      	cmp	r3, #0
 8004872:	d130      	bne.n	80048d6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	2200      	movs	r2, #0
 800487c:	2180      	movs	r1, #128	; 0x80
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 f976 	bl	8004b70 <I2C_WaitOnFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e04d      	b.n	800492a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004892:	b29b      	uxth	r3, r3
 8004894:	2bff      	cmp	r3, #255	; 0xff
 8004896:	d90e      	bls.n	80048b6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	22ff      	movs	r2, #255	; 0xff
 800489c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	8979      	ldrh	r1, [r7, #10]
 80048a6:	2300      	movs	r3, #0
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 fb9a 	bl	8004fe8 <I2C_TransferConfig>
 80048b4:	e00f      	b.n	80048d6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	8979      	ldrh	r1, [r7, #10]
 80048c8:	2300      	movs	r3, #0
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f000 fb89 	bl	8004fe8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048da:	b29b      	uxth	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d19e      	bne.n	800481e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	6a39      	ldr	r1, [r7, #32]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f9d9 	bl	8004c9c <I2C_WaitOnSTOPFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e01a      	b.n	800492a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2220      	movs	r2, #32
 80048fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6859      	ldr	r1, [r3, #4]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <HAL_I2C_Master_Transmit+0x22c>)
 8004908:	400b      	ands	r3, r1
 800490a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004924:	2300      	movs	r3, #0
 8004926:	e000      	b.n	800492a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004928:	2302      	movs	r3, #2
  }
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	80002000 	.word	0x80002000
 8004938:	fe00e800 	.word	0xfe00e800

0800493c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b088      	sub	sp, #32
 8004940:	af02      	add	r7, sp, #8
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	607a      	str	r2, [r7, #4]
 8004946:	461a      	mov	r2, r3
 8004948:	460b      	mov	r3, r1
 800494a:	817b      	strh	r3, [r7, #10]
 800494c:	4613      	mov	r3, r2
 800494e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b20      	cmp	r3, #32
 800495a:	f040 80db 	bne.w	8004b14 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <HAL_I2C_Master_Receive+0x30>
 8004968:	2302      	movs	r3, #2
 800496a:	e0d4      	b.n	8004b16 <HAL_I2C_Master_Receive+0x1da>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004974:	f7fd fe14 	bl	80025a0 <HAL_GetTick>
 8004978:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	2319      	movs	r3, #25
 8004980:	2201      	movs	r2, #1
 8004982:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f8f2 	bl	8004b70 <I2C_WaitOnFlagUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e0bf      	b.n	8004b16 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2222      	movs	r2, #34	; 0x22
 800499a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2210      	movs	r2, #16
 80049a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	893a      	ldrh	r2, [r7, #8]
 80049b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	2bff      	cmp	r3, #255	; 0xff
 80049c6:	d90e      	bls.n	80049e6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	22ff      	movs	r2, #255	; 0xff
 80049cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d2:	b2da      	uxtb	r2, r3
 80049d4:	8979      	ldrh	r1, [r7, #10]
 80049d6:	4b52      	ldr	r3, [pc, #328]	; (8004b20 <HAL_I2C_Master_Receive+0x1e4>)
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 fb02 	bl	8004fe8 <I2C_TransferConfig>
 80049e4:	e06d      	b.n	8004ac2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	8979      	ldrh	r1, [r7, #10]
 80049f8:	4b49      	ldr	r3, [pc, #292]	; (8004b20 <HAL_I2C_Master_Receive+0x1e4>)
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 faf1 	bl	8004fe8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004a06:	e05c      	b.n	8004ac2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	6a39      	ldr	r1, [r7, #32]
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 f989 	bl	8004d24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e07c      	b.n	8004b16 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d034      	beq.n	8004ac2 <HAL_I2C_Master_Receive+0x186>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d130      	bne.n	8004ac2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	2200      	movs	r2, #0
 8004a68:	2180      	movs	r1, #128	; 0x80
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f880 	bl	8004b70 <I2C_WaitOnFlagUntilTimeout>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e04d      	b.n	8004b16 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2bff      	cmp	r3, #255	; 0xff
 8004a82:	d90e      	bls.n	8004aa2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	22ff      	movs	r2, #255	; 0xff
 8004a88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	8979      	ldrh	r1, [r7, #10]
 8004a92:	2300      	movs	r3, #0
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 faa4 	bl	8004fe8 <I2C_TransferConfig>
 8004aa0:	e00f      	b.n	8004ac2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	8979      	ldrh	r1, [r7, #10]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 fa93 	bl	8004fe8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d19d      	bne.n	8004a08 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	6a39      	ldr	r1, [r7, #32]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f8e3 	bl	8004c9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e01a      	b.n	8004b16 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6859      	ldr	r1, [r3, #4]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <HAL_I2C_Master_Receive+0x1e8>)
 8004af4:	400b      	ands	r3, r1
 8004af6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	e000      	b.n	8004b16 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004b14:	2302      	movs	r3, #2
  }
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	80002400 	.word	0x80002400
 8004b24:	fe00e800 	.word	0xfe00e800

08004b28 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d103      	bne.n	8004b46 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2200      	movs	r2, #0
 8004b44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d007      	beq.n	8004b64 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	619a      	str	r2, [r3, #24]
  }
}
 8004b64:	bf00      	nop
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b80:	e031      	b.n	8004be6 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b88:	d02d      	beq.n	8004be6 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b8a:	f7fd fd09 	bl	80025a0 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d302      	bcc.n	8004ba0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d122      	bne.n	8004be6 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699a      	ldr	r2, [r3, #24]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	bf0c      	ite	eq
 8004bb0:	2301      	moveq	r3, #1
 8004bb2:	2300      	movne	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	79fb      	ldrb	r3, [r7, #7]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d113      	bne.n	8004be6 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bc2:	f043 0220 	orr.w	r2, r3, #32
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e00f      	b.n	8004c06 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	699a      	ldr	r2, [r3, #24]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	bf0c      	ite	eq
 8004bf6:	2301      	moveq	r3, #1
 8004bf8:	2300      	movne	r3, #0
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d0be      	beq.n	8004b82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c1a:	e033      	b.n	8004c84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f000 f901 	bl	8004e28 <I2C_IsErrorOccurred>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e031      	b.n	8004c94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c36:	d025      	beq.n	8004c84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c38:	f7fd fcb2 	bl	80025a0 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d302      	bcc.n	8004c4e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d11a      	bne.n	8004c84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d013      	beq.n	8004c84 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c60:	f043 0220 	orr.w	r2, r3, #32
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e007      	b.n	8004c94 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d1c4      	bne.n	8004c1c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ca8:	e02f      	b.n	8004d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	68f8      	ldr	r0, [r7, #12]
 8004cb0:	f000 f8ba 	bl	8004e28 <I2C_IsErrorOccurred>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e02d      	b.n	8004d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cbe:	f7fd fc6f 	bl	80025a0 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d302      	bcc.n	8004cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d11a      	bne.n	8004d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b20      	cmp	r3, #32
 8004ce0:	d013      	beq.n	8004d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce6:	f043 0220 	orr.w	r2, r3, #32
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e007      	b.n	8004d1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b20      	cmp	r3, #32
 8004d16:	d1c8      	bne.n	8004caa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d30:	e06b      	b.n	8004e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 f876 	bl	8004e28 <I2C_IsErrorOccurred>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e069      	b.n	8004e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	d138      	bne.n	8004dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f003 0304 	and.w	r3, r3, #4
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d105      	bne.n	8004d6e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	e055      	b.n	8004e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b10      	cmp	r3, #16
 8004d7a:	d107      	bne.n	8004d8c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2210      	movs	r2, #16
 8004d82:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2204      	movs	r2, #4
 8004d88:	645a      	str	r2, [r3, #68]	; 0x44
 8004d8a:	e002      	b.n	8004d92 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2220      	movs	r2, #32
 8004d98:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6859      	ldr	r1, [r3, #4]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	4b1f      	ldr	r3, [pc, #124]	; (8004e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004da6:	400b      	ands	r3, r1
 8004da8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e029      	b.n	8004e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc6:	f7fd fbeb 	bl	80025a0 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d302      	bcc.n	8004ddc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d116      	bne.n	8004e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	f003 0304 	and.w	r3, r3, #4
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d00f      	beq.n	8004e0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dee:	f043 0220 	orr.w	r2, r3, #32
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e007      	b.n	8004e1a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d18c      	bne.n	8004d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	fe00e800 	.word	0xfe00e800

08004e28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08a      	sub	sp, #40	; 0x28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e34:	2300      	movs	r3, #0
 8004e36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	f003 0310 	and.w	r3, r3, #16
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d068      	beq.n	8004f26 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2210      	movs	r2, #16
 8004e5a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e5c:	e049      	b.n	8004ef2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e64:	d045      	beq.n	8004ef2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e66:	f7fd fb9b 	bl	80025a0 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d302      	bcc.n	8004e7c <I2C_IsErrorOccurred+0x54>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d13a      	bne.n	8004ef2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e8e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e9e:	d121      	bne.n	8004ee4 <I2C_IsErrorOccurred+0xbc>
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ea6:	d01d      	beq.n	8004ee4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004ea8:	7cfb      	ldrb	r3, [r7, #19]
 8004eaa:	2b20      	cmp	r3, #32
 8004eac:	d01a      	beq.n	8004ee4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ebc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ebe:	f7fd fb6f 	bl	80025a0 <HAL_GetTick>
 8004ec2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ec4:	e00e      	b.n	8004ee4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004ec6:	f7fd fb6b 	bl	80025a0 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b19      	cmp	r3, #25
 8004ed2:	d907      	bls.n	8004ee4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	f043 0320 	orr.w	r3, r3, #32
 8004eda:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004ee2:	e006      	b.n	8004ef2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d1e9      	bne.n	8004ec6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	f003 0320 	and.w	r3, r3, #32
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	d003      	beq.n	8004f08 <I2C_IsErrorOccurred+0xe0>
 8004f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0aa      	beq.n	8004e5e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d103      	bne.n	8004f18 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2220      	movs	r2, #32
 8004f16:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	f043 0304 	orr.w	r3, r3, #4
 8004f1e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00b      	beq.n	8004f50 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00b      	beq.n	8004f72 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	f043 0308 	orr.w	r3, r3, #8
 8004f60:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00b      	beq.n	8004f94 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	f043 0302 	orr.w	r3, r3, #2
 8004f82:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d01c      	beq.n	8004fd6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f7ff fdc3 	bl	8004b28 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6859      	ldr	r1, [r3, #4]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <I2C_IsErrorOccurred+0x1bc>)
 8004fae:	400b      	ands	r3, r1
 8004fb0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004fd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3728      	adds	r7, #40	; 0x28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	fe00e800 	.word	0xfe00e800

08004fe8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	817b      	strh	r3, [r7, #10]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ffa:	897b      	ldrh	r3, [r7, #10]
 8004ffc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005000:	7a7b      	ldrb	r3, [r7, #9]
 8005002:	041b      	lsls	r3, r3, #16
 8005004:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005008:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	4313      	orrs	r3, r2
 8005012:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005016:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	0d5b      	lsrs	r3, r3, #21
 8005022:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005026:	4b08      	ldr	r3, [pc, #32]	; (8005048 <I2C_TransferConfig+0x60>)
 8005028:	430b      	orrs	r3, r1
 800502a:	43db      	mvns	r3, r3
 800502c:	ea02 0103 	and.w	r1, r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	03ff63ff 	.word	0x03ff63ff

0800504c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b20      	cmp	r3, #32
 8005060:	d138      	bne.n	80050d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800506c:	2302      	movs	r3, #2
 800506e:	e032      	b.n	80050d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2224      	movs	r2, #36	; 0x24
 800507c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f022 0201 	bic.w	r2, r2, #1
 800508e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800509e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6819      	ldr	r1, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0201 	orr.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050d0:	2300      	movs	r3, #0
 80050d2:	e000      	b.n	80050d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050d4:	2302      	movs	r3, #2
  }
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b085      	sub	sp, #20
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d139      	bne.n	800516c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005102:	2302      	movs	r3, #2
 8005104:	e033      	b.n	800516e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2224      	movs	r2, #36	; 0x24
 8005112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0201 	bic.w	r2, r2, #1
 8005124:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005134:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005168:	2300      	movs	r3, #0
 800516a:	e000      	b.n	800516e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800516c:	2302      	movs	r3, #2
  }
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
	...

0800517c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d01e      	beq.n	80051cc <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800518e:	4b13      	ldr	r3, [pc, #76]	; (80051dc <HAL_IPCC_Init+0x60>)
 8005190:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d102      	bne.n	80051a4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f7fd f836 	bl	8002210 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80051a4:	68b8      	ldr	r0, [r7, #8]
 80051a6:	f000 f85b 	bl	8005260 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f82c 	bl	8005214 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80051ca:	e001      	b.n	80051d0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	58000c00 	.word	0x58000c00

080051e0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	4613      	mov	r3, r2
 80051ec:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80051ee:	bf00      	nop
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	60f8      	str	r0, [r7, #12]
 8005202:	60b9      	str	r1, [r7, #8]
 8005204:	4613      	mov	r3, r2
 8005206:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	e00f      	b.n	8005242 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	4a0b      	ldr	r2, [pc, #44]	; (8005258 <IPCC_SetDefaultCallbacks+0x44>)
 800522c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3306      	adds	r3, #6
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	4a08      	ldr	r2, [pc, #32]	; (800525c <IPCC_SetDefaultCallbacks+0x48>)
 800523a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3301      	adds	r3, #1
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b05      	cmp	r3, #5
 8005246:	d9ec      	bls.n	8005222 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	080051e1 	.word	0x080051e1
 800525c:	080051fb 	.word	0x080051fb

08005260 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8005274:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	223f      	movs	r2, #63	; 0x3f
 800527a:	609a      	str	r2, [r3, #8]
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800528c:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a04      	ldr	r2, [pc, #16]	; (80052a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005296:	6013      	str	r3, [r2, #0]
}
 8005298:	bf00      	nop
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	58000400 	.word	0x58000400

080052a8 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if (Regulator == PWR_LOWPOWERREGULATOR_ON)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052ba:	d104      	bne.n	80052c6 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 80052bc:	78fb      	ldrb	r3, [r7, #3]
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f84a 	bl	8005358 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 80052c4:	e003      	b.n	80052ce <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80052c6:	78fb      	ldrb	r3, [r7, #3]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 f81b 	bl	8005304 <HAL_PWREx_EnterSTOP0Mode>
}
 80052ce:	bf00      	nop
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
	...

080052d8 <LL_PWR_EnableSRAM2Retention>:
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 80052dc:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <LL_PWR_EnableSRAM2Retention+0x1c>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	4a04      	ldr	r2, [pc, #16]	; (80052f4 <LL_PWR_EnableSRAM2Retention+0x1c>)
 80052e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052e6:	6093      	str	r3, [r2, #8]
}
 80052e8:	bf00      	nop
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	58000400 	.word	0x58000400

080052f8 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 80052fc:	f7ff ffec 	bl	80052d8 <LL_PWR_EnableSRAM2Retention>
}
 8005300:	bf00      	nop
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	4603      	mov	r3, r0
 800530c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 800530e:	4b10      	ldr	r3, [pc, #64]	; (8005350 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a0f      	ldr	r2, [pc, #60]	; (8005350 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8005314:	f023 0307 	bic.w	r3, r3, #7
 8005318:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800531a:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	4a0d      	ldr	r2, [pc, #52]	; (8005354 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8005320:	f043 0304 	orr.w	r3, r3, #4
 8005324:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d101      	bne.n	8005330 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800532c:	bf30      	wfi
 800532e:	e002      	b.n	8005336 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005330:	bf40      	sev
    __WFE();
 8005332:	bf20      	wfe
    __WFE();
 8005334:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005336:	4b07      	ldr	r3, [pc, #28]	; (8005354 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	4a06      	ldr	r2, [pc, #24]	; (8005354 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800533c:	f023 0304 	bic.w	r3, r3, #4
 8005340:	6113      	str	r3, [r2, #16]
}
 8005342:	bf00      	nop
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	58000400 	.word	0x58000400
 8005354:	e000ed00 	.word	0xe000ed00

08005358 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	4603      	mov	r3, r0
 8005360:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8005362:	4b11      	ldr	r3, [pc, #68]	; (80053a8 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f023 0307 	bic.w	r3, r3, #7
 800536a:	4a0f      	ldr	r2, [pc, #60]	; (80053a8 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800536c:	f043 0301 	orr.w	r3, r3, #1
 8005370:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005372:	4b0e      	ldr	r3, [pc, #56]	; (80053ac <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	4a0d      	ldr	r2, [pc, #52]	; (80053ac <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8005378:	f043 0304 	orr.w	r3, r3, #4
 800537c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800537e:	79fb      	ldrb	r3, [r7, #7]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005384:	bf30      	wfi
 8005386:	e002      	b.n	800538e <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005388:	bf40      	sev
    __WFE();
 800538a:	bf20      	wfe
    __WFE();
 800538c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800538e:	4b07      	ldr	r3, [pc, #28]	; (80053ac <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	4a06      	ldr	r2, [pc, #24]	; (80053ac <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8005394:	f023 0304 	bic.w	r3, r3, #4
 8005398:	6113      	str	r3, [r2, #16]
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	58000400 	.word	0x58000400
 80053ac:	e000ed00 	.word	0xe000ed00

080053b0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80053b0:	b480      	push	{r7}
 80053b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80053b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053c2:	d101      	bne.n	80053c8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80053c4:	2301      	movs	r3, #1
 80053c6:	e000      	b.n	80053ca <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <LL_RCC_HSE_Enable>:
{
 80053d4:	b480      	push	{r7}
 80053d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80053d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e6:	6013      	str	r3, [r2, #0]
}
 80053e8:	bf00      	nop
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <LL_RCC_HSE_Disable>:
{
 80053f2:	b480      	push	{r7}
 80053f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80053f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005404:	6013      	str	r3, [r2, #0]
}
 8005406:	bf00      	nop
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <LL_RCC_HSE_IsReady>:
{
 8005410:	b480      	push	{r7}
 8005412:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005422:	d101      	bne.n	8005428 <LL_RCC_HSE_IsReady+0x18>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <LL_RCC_HSE_IsReady+0x1a>
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <LL_RCC_HSI_Enable>:
{
 8005434:	b480      	push	{r7}
 8005436:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005446:	6013      	str	r3, [r2, #0]
}
 8005448:	bf00      	nop
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <LL_RCC_HSI_Disable>:
{
 8005452:	b480      	push	{r7}
 8005454:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005464:	6013      	str	r3, [r2, #0]
}
 8005466:	bf00      	nop
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <LL_RCC_HSI_IsReady>:
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800547e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005482:	d101      	bne.n	8005488 <LL_RCC_HSI_IsReady+0x18>
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <LL_RCC_HSI_IsReady+0x1a>
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800549c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	061b      	lsls	r3, r3, #24
 80054aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80054ae:	4313      	orrs	r3, r2
 80054b0:	604b      	str	r3, [r1, #4]
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <LL_RCC_LSE_Enable>:
{
 80054be:	b480      	push	{r7}
 80054c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80054c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ce:	f043 0301 	orr.w	r3, r3, #1
 80054d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80054d6:	bf00      	nop
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <LL_RCC_LSE_Disable>:
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80054e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054f0:	f023 0301 	bic.w	r3, r3, #1
 80054f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80054f8:	bf00      	nop
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <LL_RCC_LSE_EnableBypass>:
{
 8005502:	b480      	push	{r7}
 8005504:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800550a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005512:	f043 0304 	orr.w	r3, r3, #4
 8005516:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800551a:	bf00      	nop
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <LL_RCC_LSE_DisableBypass>:
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800552c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005534:	f023 0304 	bic.w	r3, r3, #4
 8005538:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800553c:	bf00      	nop
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <LL_RCC_LSE_IsReady>:
{
 8005546:	b480      	push	{r7}
 8005548:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800554a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b02      	cmp	r3, #2
 8005558:	d101      	bne.n	800555e <LL_RCC_LSE_IsReady+0x18>
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <LL_RCC_LSE_IsReady+0x1a>
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <LL_RCC_LSI1_Enable>:
{
 800556a:	b480      	push	{r7}
 800556c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800556e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005572:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005576:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800557a:	f043 0301 	orr.w	r3, r3, #1
 800557e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005582:	bf00      	nop
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <LL_RCC_LSI1_Disable>:
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005590:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005598:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800559c:	f023 0301 	bic.w	r3, r3, #1
 80055a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80055a4:	bf00      	nop
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <LL_RCC_LSI1_IsReady>:
{
 80055ae:	b480      	push	{r7}
 80055b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80055b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d101      	bne.n	80055c6 <LL_RCC_LSI1_IsReady+0x18>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <LL_RCC_LSI1_IsReady+0x1a>
 80055c6:	2300      	movs	r3, #0
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <LL_RCC_LSI2_Enable>:
{
 80055d2:	b480      	push	{r7}
 80055d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80055d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055e2:	f043 0304 	orr.w	r3, r3, #4
 80055e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80055ea:	bf00      	nop
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <LL_RCC_LSI2_Disable>:
{
 80055f4:	b480      	push	{r7}
 80055f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80055f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005604:	f023 0304 	bic.w	r3, r3, #4
 8005608:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800560c:	bf00      	nop
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <LL_RCC_LSI2_IsReady>:
{
 8005616:	b480      	push	{r7}
 8005618:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800561a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b08      	cmp	r3, #8
 8005628:	d101      	bne.n	800562e <LL_RCC_LSI2_IsReady+0x18>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <LL_RCC_LSI2_IsReady+0x1a>
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <LL_RCC_LSI2_SetTrimming>:
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800564a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	021b      	lsls	r3, r3, #8
 8005652:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005656:	4313      	orrs	r3, r2
 8005658:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <LL_RCC_MSI_Enable>:
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800566c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	6013      	str	r3, [r2, #0]
}
 800567c:	bf00      	nop
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <LL_RCC_MSI_Disable>:
{
 8005686:	b480      	push	{r7}
 8005688:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800568a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	6013      	str	r3, [r2, #0]
}
 800569a:	bf00      	nop
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <LL_RCC_MSI_IsReady>:
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80056a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d101      	bne.n	80056ba <LL_RCC_MSI_IsReady+0x16>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <LL_RCC_MSI_IsReady+0x18>
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr

080056c6 <LL_RCC_MSI_SetRange>:
{
 80056c6:	b480      	push	{r7}
 80056c8:	b083      	sub	sp, #12
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80056ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4313      	orrs	r3, r2
 80056e0:	600b      	str	r3, [r1, #0]
}
 80056e2:	bf00      	nop
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <LL_RCC_MSI_GetRange>:
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80056f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056fe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2bb0      	cmp	r3, #176	; 0xb0
 8005704:	d901      	bls.n	800570a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005706:	23b0      	movs	r3, #176	; 0xb0
 8005708:	607b      	str	r3, [r7, #4]
  return msiRange;
 800570a:	687b      	ldr	r3, [r7, #4]
}
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	021b      	lsls	r3, r3, #8
 800572e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005732:	4313      	orrs	r3, r2
 8005734:	604b      	str	r3, [r1, #4]
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <LL_RCC_SetSysClkSource>:
{
 8005742:	b480      	push	{r7}
 8005744:	b083      	sub	sp, #12
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800574a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f023 0203 	bic.w	r2, r3, #3
 8005754:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4313      	orrs	r3, r2
 800575c:	608b      	str	r3, [r1, #8]
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <LL_RCC_GetSysClkSource>:
{
 800576a:	b480      	push	{r7}
 800576c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800576e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	f003 030c 	and.w	r3, r3, #12
}
 8005778:	4618      	mov	r0, r3
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <LL_RCC_SetAHBPrescaler>:
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800578a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005794:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4313      	orrs	r3, r2
 800579c:	608b      	str	r3, [r1, #8]
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <LL_C2_RCC_SetAHBPrescaler>:
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80057b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80057ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <LL_RCC_SetAHB4Prescaler>:
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80057de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80057e6:	f023 020f 	bic.w	r2, r3, #15
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	091b      	lsrs	r3, r3, #4
 80057ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <LL_RCC_SetAPB1Prescaler>:
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800580c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005816:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4313      	orrs	r3, r2
 800581e:	608b      	str	r3, [r1, #8]
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <LL_RCC_SetAPB2Prescaler>:
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800583e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4313      	orrs	r3, r2
 8005846:	608b      	str	r3, [r1, #8]
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <LL_RCC_GetAHBPrescaler>:
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005862:	4618      	mov	r0, r3
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <LL_RCC_GetAHB4Prescaler>:
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005874:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800587e:	4618      	mov	r0, r3
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <LL_RCC_PLL_Enable>:
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800588c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800589a:	6013      	str	r3, [r2, #0]
}
 800589c:	bf00      	nop
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <LL_RCC_PLL_Disable>:
{
 80058a6:	b480      	push	{r7}
 80058a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80058aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058b8:	6013      	str	r3, [r2, #0]
}
 80058ba:	bf00      	nop
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <LL_RCC_PLL_IsReady>:
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80058c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058d6:	d101      	bne.n	80058dc <LL_RCC_PLL_IsReady+0x18>
 80058d8:	2301      	movs	r3, #1
 80058da:	e000      	b.n	80058de <LL_RCC_PLL_IsReady+0x1a>
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <LL_RCC_PLL_GetN>:
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80058ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	0a1b      	lsrs	r3, r3, #8
 80058f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <LL_RCC_PLL_GetR>:
{
 8005902:	b480      	push	{r7}
 8005904:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005910:	4618      	mov	r0, r3
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <LL_RCC_PLL_GetDivider>:
{
 800591a:	b480      	push	{r7}
 800591c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800591e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8005928:	4618      	mov	r0, r3
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <LL_RCC_PLL_GetMainSource>:
{
 8005932:	b480      	push	{r7}
 8005934:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f003 0303 	and.w	r3, r3, #3
}
 8005940:	4618      	mov	r0, r3
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <LL_RCC_IsActiveFlag_HPRE>:
{
 800594a:	b480      	push	{r7}
 800594c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800594e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800595c:	d101      	bne.n	8005962 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800595e:	2301      	movs	r3, #1
 8005960:	e000      	b.n	8005964 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr

0800596e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800596e:	b480      	push	{r7}
 8005970:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005976:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800597a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005982:	d101      	bne.n	8005988 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005984:	2301      	movs	r3, #1
 8005986:	e000      	b.n	800598a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800599c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80059a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a8:	d101      	bne.n	80059ae <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80059aa:	2301      	movs	r3, #1
 80059ac:	e000      	b.n	80059b0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <LL_RCC_IsActiveFlag_PPRE1>:
{
 80059ba:	b480      	push	{r7}
 80059bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80059be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059cc:	d101      	bne.n	80059d2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <LL_RCC_IsActiveFlag_PPRE2>:
{
 80059de:	b480      	push	{r7}
 80059e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80059e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059f0:	d101      	bne.n	80059f6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
	...

08005a04 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a04:	b590      	push	{r4, r7, lr}
 8005a06:	b08d      	sub	sp, #52	; 0x34
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e324      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0320 	and.w	r3, r3, #32
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 808d 	beq.w	8005b3e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a24:	f7ff fea1 	bl	800576a <LL_RCC_GetSysClkSource>
 8005a28:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a2a:	f7ff ff82 	bl	8005932 <LL_RCC_PLL_GetMainSource>
 8005a2e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <HAL_RCC_OscConfig+0x3e>
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a38:	2b0c      	cmp	r3, #12
 8005a3a:	d147      	bne.n	8005acc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d144      	bne.n	8005acc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e308      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005a52:	f7ff fe4c 	bl	80056ee <LL_RCC_MSI_GetRange>
 8005a56:	4603      	mov	r3, r0
 8005a58:	429c      	cmp	r4, r3
 8005a5a:	d914      	bls.n	8005a86 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fcc5 	bl	80063f0 <RCC_SetFlashLatencyFromMSIRange>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e2f7      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7ff fe26 	bl	80056c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff fe4a 	bl	8005718 <LL_RCC_MSI_SetCalibTrimming>
 8005a84:	e013      	b.n	8005aae <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7ff fe1b 	bl	80056c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff fe3f 	bl	8005718 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fca6 	bl	80063f0 <RCC_SetFlashLatencyFromMSIRange>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e2d8      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005aae:	f000 fc8b 	bl	80063c8 <HAL_RCC_GetHCLKFreq>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	4aa4      	ldr	r2, [pc, #656]	; (8005d48 <HAL_RCC_OscConfig+0x344>)
 8005ab6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ab8:	4ba4      	ldr	r3, [pc, #656]	; (8005d4c <HAL_RCC_OscConfig+0x348>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fc fd21 	bl	8002504 <HAL_InitTick>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d039      	beq.n	8005b3c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e2c9      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d01e      	beq.n	8005b12 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005ad4:	f7ff fdc8 	bl	8005668 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005ad8:	f7fc fd62 	bl	80025a0 <HAL_GetTick>
 8005adc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005ae0:	f7fc fd5e 	bl	80025a0 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e2b6      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005af2:	f7ff fdd7 	bl	80056a4 <LL_RCC_MSI_IsReady>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0f1      	beq.n	8005ae0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7ff fde0 	bl	80056c6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff fe04 	bl	8005718 <LL_RCC_MSI_SetCalibTrimming>
 8005b10:	e015      	b.n	8005b3e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b12:	f7ff fdb8 	bl	8005686 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b16:	f7fc fd43 	bl	80025a0 <HAL_GetTick>
 8005b1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005b1c:	e008      	b.n	8005b30 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b1e:	f7fc fd3f 	bl	80025a0 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e297      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005b30:	f7ff fdb8 	bl	80056a4 <LL_RCC_MSI_IsReady>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1f1      	bne.n	8005b1e <HAL_RCC_OscConfig+0x11a>
 8005b3a:	e000      	b.n	8005b3e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005b3c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d047      	beq.n	8005bda <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b4a:	f7ff fe0e 	bl	800576a <LL_RCC_GetSysClkSource>
 8005b4e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b50:	f7ff feef 	bl	8005932 <LL_RCC_PLL_GetMainSource>
 8005b54:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d005      	beq.n	8005b68 <HAL_RCC_OscConfig+0x164>
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	2b0c      	cmp	r3, #12
 8005b60:	d108      	bne.n	8005b74 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d105      	bne.n	8005b74 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d134      	bne.n	8005bda <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e275      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b7c:	d102      	bne.n	8005b84 <HAL_RCC_OscConfig+0x180>
 8005b7e:	f7ff fc29 	bl	80053d4 <LL_RCC_HSE_Enable>
 8005b82:	e001      	b.n	8005b88 <HAL_RCC_OscConfig+0x184>
 8005b84:	f7ff fc35 	bl	80053f2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d012      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b90:	f7fc fd06 	bl	80025a0 <HAL_GetTick>
 8005b94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005b96:	e008      	b.n	8005baa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b98:	f7fc fd02 	bl	80025a0 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	2b64      	cmp	r3, #100	; 0x64
 8005ba4:	d901      	bls.n	8005baa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	e25a      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005baa:	f7ff fc31 	bl	8005410 <LL_RCC_HSE_IsReady>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0f1      	beq.n	8005b98 <HAL_RCC_OscConfig+0x194>
 8005bb4:	e011      	b.n	8005bda <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb6:	f7fc fcf3 	bl	80025a0 <HAL_GetTick>
 8005bba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005bbc:	e008      	b.n	8005bd0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bbe:	f7fc fcef 	bl	80025a0 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b64      	cmp	r3, #100	; 0x64
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e247      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005bd0:	f7ff fc1e 	bl	8005410 <LL_RCC_HSE_IsReady>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1f1      	bne.n	8005bbe <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d04c      	beq.n	8005c80 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005be6:	f7ff fdc0 	bl	800576a <LL_RCC_GetSysClkSource>
 8005bea:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bec:	f7ff fea1 	bl	8005932 <LL_RCC_PLL_GetMainSource>
 8005bf0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d005      	beq.n	8005c04 <HAL_RCC_OscConfig+0x200>
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	2b0c      	cmp	r3, #12
 8005bfc:	d10e      	bne.n	8005c1c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d10b      	bne.n	8005c1c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e227      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff fc3d 	bl	8005494 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005c1a:	e031      	b.n	8005c80 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d019      	beq.n	8005c58 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c24:	f7ff fc06 	bl	8005434 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c28:	f7fc fcba 	bl	80025a0 <HAL_GetTick>
 8005c2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c30:	f7fc fcb6 	bl	80025a0 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e20e      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005c42:	f7ff fc15 	bl	8005470 <LL_RCC_HSI_IsReady>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0f1      	beq.n	8005c30 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff fc1f 	bl	8005494 <LL_RCC_HSI_SetCalibTrimming>
 8005c56:	e013      	b.n	8005c80 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c58:	f7ff fbfb 	bl	8005452 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5c:	f7fc fca0 	bl	80025a0 <HAL_GetTick>
 8005c60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c64:	f7fc fc9c 	bl	80025a0 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e1f4      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005c76:	f7ff fbfb 	bl	8005470 <LL_RCC_HSI_IsReady>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1f1      	bne.n	8005c64 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d106      	bne.n	8005c9a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 80a3 	beq.w	8005de0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d076      	beq.n	8005d90 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0310 	and.w	r3, r3, #16
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d046      	beq.n	8005d3c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005cae:	f7ff fc7e 	bl	80055ae <LL_RCC_LSI1_IsReady>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d113      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005cb8:	f7ff fc57 	bl	800556a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005cbc:	f7fc fc70 	bl	80025a0 <HAL_GetTick>
 8005cc0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005cc4:	f7fc fc6c 	bl	80025a0 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e1c4      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005cd6:	f7ff fc6a 	bl	80055ae <LL_RCC_LSI1_IsReady>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0f1      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005ce0:	f7ff fc77 	bl	80055d2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce4:	f7fc fc5c 	bl	80025a0 <HAL_GetTick>
 8005ce8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005cec:	f7fc fc58 	bl	80025a0 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b03      	cmp	r3, #3
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e1b0      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005cfe:	f7ff fc8a 	bl	8005616 <LL_RCC_LSI2_IsReady>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0f1      	beq.n	8005cec <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff fc94 	bl	800563a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005d12:	f7ff fc3b 	bl	800558c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d16:	f7fc fc43 	bl	80025a0 <HAL_GetTick>
 8005d1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005d1c:	e008      	b.n	8005d30 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005d1e:	f7fc fc3f 	bl	80025a0 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e197      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005d30:	f7ff fc3d 	bl	80055ae <LL_RCC_LSI1_IsReady>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d1f1      	bne.n	8005d1e <HAL_RCC_OscConfig+0x31a>
 8005d3a:	e051      	b.n	8005de0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005d3c:	f7ff fc15 	bl	800556a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d40:	f7fc fc2e 	bl	80025a0 <HAL_GetTick>
 8005d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005d46:	e00c      	b.n	8005d62 <HAL_RCC_OscConfig+0x35e>
 8005d48:	20000010 	.word	0x20000010
 8005d4c:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005d50:	f7fc fc26 	bl	80025a0 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e17e      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005d62:	f7ff fc24 	bl	80055ae <LL_RCC_LSI1_IsReady>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0f1      	beq.n	8005d50 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005d6c:	f7ff fc42 	bl	80055f4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005d70:	e008      	b.n	8005d84 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005d72:	f7fc fc15 	bl	80025a0 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e16d      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005d84:	f7ff fc47 	bl	8005616 <LL_RCC_LSI2_IsReady>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f1      	bne.n	8005d72 <HAL_RCC_OscConfig+0x36e>
 8005d8e:	e027      	b.n	8005de0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005d90:	f7ff fc30 	bl	80055f4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d94:	f7fc fc04 	bl	80025a0 <HAL_GetTick>
 8005d98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005d9c:	f7fc fc00 	bl	80025a0 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b03      	cmp	r3, #3
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e158      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005dae:	f7ff fc32 	bl	8005616 <LL_RCC_LSI2_IsReady>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1f1      	bne.n	8005d9c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005db8:	f7ff fbe8 	bl	800558c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dbc:	f7fc fbf0 	bl	80025a0 <HAL_GetTick>
 8005dc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005dc4:	f7fc fbec 	bl	80025a0 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e144      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005dd6:	f7ff fbea 	bl	80055ae <LL_RCC_LSI1_IsReady>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1f1      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0304 	and.w	r3, r3, #4
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d05b      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dec:	4b9e      	ldr	r3, [pc, #632]	; (8006068 <HAL_RCC_OscConfig+0x664>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d114      	bne.n	8005e22 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005df8:	f7ff fa46 	bl	8005288 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dfc:	f7fc fbd0 	bl	80025a0 <HAL_GetTick>
 8005e00:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e04:	f7fc fbcc 	bl	80025a0 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e124      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e16:	4b94      	ldr	r3, [pc, #592]	; (8006068 <HAL_RCC_OscConfig+0x664>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0f0      	beq.n	8005e04 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d102      	bne.n	8005e30 <HAL_RCC_OscConfig+0x42c>
 8005e2a:	f7ff fb48 	bl	80054be <LL_RCC_LSE_Enable>
 8005e2e:	e00c      	b.n	8005e4a <HAL_RCC_OscConfig+0x446>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	2b05      	cmp	r3, #5
 8005e36:	d104      	bne.n	8005e42 <HAL_RCC_OscConfig+0x43e>
 8005e38:	f7ff fb63 	bl	8005502 <LL_RCC_LSE_EnableBypass>
 8005e3c:	f7ff fb3f 	bl	80054be <LL_RCC_LSE_Enable>
 8005e40:	e003      	b.n	8005e4a <HAL_RCC_OscConfig+0x446>
 8005e42:	f7ff fb4d 	bl	80054e0 <LL_RCC_LSE_Disable>
 8005e46:	f7ff fb6d 	bl	8005524 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d014      	beq.n	8005e7c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e52:	f7fc fba5 	bl	80025a0 <HAL_GetTick>
 8005e56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005e58:	e00a      	b.n	8005e70 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e5a:	f7fc fba1 	bl	80025a0 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e0f7      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005e70:	f7ff fb69 	bl	8005546 <LL_RCC_LSE_IsReady>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d0ef      	beq.n	8005e5a <HAL_RCC_OscConfig+0x456>
 8005e7a:	e013      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e7c:	f7fc fb90 	bl	80025a0 <HAL_GetTick>
 8005e80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005e82:	e00a      	b.n	8005e9a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e84:	f7fc fb8c 	bl	80025a0 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e0e2      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005e9a:	f7ff fb54 	bl	8005546 <LL_RCC_LSE_IsReady>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1ef      	bne.n	8005e84 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 80d8 	beq.w	800605e <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eae:	f7ff fc5c 	bl	800576a <LL_RCC_GetSysClkSource>
 8005eb2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	f040 80a6 	bne.w	8006012 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f003 0203 	and.w	r2, r3, #3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d123      	bne.n	8005f1c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d11c      	bne.n	8005f1c <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	0a1b      	lsrs	r3, r3, #8
 8005ee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d114      	bne.n	8005f1c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d10d      	bne.n	8005f1c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d106      	bne.n	8005f1c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d054      	beq.n	8005fc6 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	2b0c      	cmp	r3, #12
 8005f20:	d04f      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005f22:	f7ff fcc0 	bl	80058a6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f26:	f7fc fb3b 	bl	80025a0 <HAL_GetTick>
 8005f2a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f2c:	e008      	b.n	8005f40 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f2e:	f7fc fb37 	bl	80025a0 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e08f      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1ef      	bne.n	8005f2e <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f52:	68da      	ldr	r2, [r3, #12]
 8005f54:	4b45      	ldr	r3, [pc, #276]	; (800606c <HAL_RCC_OscConfig+0x668>)
 8005f56:	4013      	ands	r3, r2
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005f60:	4311      	orrs	r1, r2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f66:	0212      	lsls	r2, r2, #8
 8005f68:	4311      	orrs	r1, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f6e:	4311      	orrs	r1, r2
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005f74:	4311      	orrs	r1, r2
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005f84:	f7ff fc80 	bl	8005888 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005f98:	f7fc fb02 	bl	80025a0 <HAL_GetTick>
 8005f9c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fa0:	f7fc fafe 	bl	80025a0 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e056      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d0ef      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fc0:	e04d      	b.n	800605e <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e04c      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d144      	bne.n	800605e <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005fd4:	f7ff fc58 	bl	8005888 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fe6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005fe8:	f7fc fada 	bl	80025a0 <HAL_GetTick>
 8005fec:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ff0:	f7fc fad6 	bl	80025a0 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e02e      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d0ef      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x5ec>
 8006010:	e025      	b.n	800605e <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	2b0c      	cmp	r3, #12
 8006016:	d020      	beq.n	800605a <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006018:	f7ff fc45 	bl	80058a6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800601c:	f7fc fac0 	bl	80025a0 <HAL_GetTick>
 8006020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006022:	e008      	b.n	8006036 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006024:	f7fc fabc 	bl	80025a0 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e014      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1ef      	bne.n	8006024 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8006044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800604e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006052:	f023 0303 	bic.w	r3, r3, #3
 8006056:	60d3      	str	r3, [r2, #12]
 8006058:	e001      	b.n	800605e <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e000      	b.n	8006060 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3734      	adds	r7, #52	; 0x34
 8006064:	46bd      	mov	sp, r7
 8006066:	bd90      	pop	{r4, r7, pc}
 8006068:	58000400 	.word	0x58000400
 800606c:	11c1808c 	.word	0x11c1808c

08006070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e12d      	b.n	80062e0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006084:	4b98      	ldr	r3, [pc, #608]	; (80062e8 <HAL_RCC_ClockConfig+0x278>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d91b      	bls.n	80060ca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006092:	4b95      	ldr	r3, [pc, #596]	; (80062e8 <HAL_RCC_ClockConfig+0x278>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f023 0207 	bic.w	r2, r3, #7
 800609a:	4993      	ldr	r1, [pc, #588]	; (80062e8 <HAL_RCC_ClockConfig+0x278>)
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	4313      	orrs	r3, r2
 80060a0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060a2:	f7fc fa7d 	bl	80025a0 <HAL_GetTick>
 80060a6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060a8:	e008      	b.n	80060bc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80060aa:	f7fc fa79 	bl	80025a0 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e111      	b.n	80062e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060bc:	4b8a      	ldr	r3, [pc, #552]	; (80062e8 <HAL_RCC_ClockConfig+0x278>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d1ef      	bne.n	80060aa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d016      	beq.n	8006104 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff fb51 	bl	8005782 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80060e0:	f7fc fa5e 	bl	80025a0 <HAL_GetTick>
 80060e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80060e6:	e008      	b.n	80060fa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80060e8:	f7fc fa5a 	bl	80025a0 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d901      	bls.n	80060fa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e0f2      	b.n	80062e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80060fa:	f7ff fc26 	bl	800594a <LL_RCC_IsActiveFlag_HPRE>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0f1      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0320 	and.w	r3, r3, #32
 800610c:	2b00      	cmp	r3, #0
 800610e:	d016      	beq.n	800613e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff fb48 	bl	80057aa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800611a:	f7fc fa41 	bl	80025a0 <HAL_GetTick>
 800611e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006120:	e008      	b.n	8006134 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006122:	f7fc fa3d 	bl	80025a0 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	2b02      	cmp	r3, #2
 800612e:	d901      	bls.n	8006134 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e0d5      	b.n	80062e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006134:	f7ff fc1b 	bl	800596e <LL_RCC_IsActiveFlag_C2HPRE>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d0f1      	beq.n	8006122 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006146:	2b00      	cmp	r3, #0
 8006148:	d016      	beq.n	8006178 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff fb41 	bl	80057d6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006154:	f7fc fa24 	bl	80025a0 <HAL_GetTick>
 8006158:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800615a:	e008      	b.n	800616e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800615c:	f7fc fa20 	bl	80025a0 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d901      	bls.n	800616e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e0b8      	b.n	80062e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800616e:	f7ff fc11 	bl	8005994 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d0f1      	beq.n	800615c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0304 	and.w	r3, r3, #4
 8006180:	2b00      	cmp	r3, #0
 8006182:	d016      	beq.n	80061b2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	4618      	mov	r0, r3
 800618a:	f7ff fb3b 	bl	8005804 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800618e:	f7fc fa07 	bl	80025a0 <HAL_GetTick>
 8006192:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006194:	e008      	b.n	80061a8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006196:	f7fc fa03 	bl	80025a0 <HAL_GetTick>
 800619a:	4602      	mov	r2, r0
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d901      	bls.n	80061a8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e09b      	b.n	80062e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80061a8:	f7ff fc07 	bl	80059ba <LL_RCC_IsActiveFlag_PPRE1>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0f1      	beq.n	8006196 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0308 	and.w	r3, r3, #8
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d017      	beq.n	80061ee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff fb31 	bl	800582c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80061ca:	f7fc f9e9 	bl	80025a0 <HAL_GetTick>
 80061ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80061d0:	e008      	b.n	80061e4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80061d2:	f7fc f9e5 	bl	80025a0 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d901      	bls.n	80061e4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80061e0:	2303      	movs	r3, #3
 80061e2:	e07d      	b.n	80062e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80061e4:	f7ff fbfb 	bl	80059de <LL_RCC_IsActiveFlag_PPRE2>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d0f1      	beq.n	80061d2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d043      	beq.n	8006282 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d106      	bne.n	8006210 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006202:	f7ff f905 	bl	8005410 <LL_RCC_HSE_IsReady>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d11e      	bne.n	800624a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e067      	b.n	80062e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	2b03      	cmp	r3, #3
 8006216:	d106      	bne.n	8006226 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006218:	f7ff fb54 	bl	80058c4 <LL_RCC_PLL_IsReady>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d113      	bne.n	800624a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006222:	2301      	movs	r3, #1
 8006224:	e05c      	b.n	80062e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d106      	bne.n	800623c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800622e:	f7ff fa39 	bl	80056a4 <LL_RCC_MSI_IsReady>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d108      	bne.n	800624a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e051      	b.n	80062e0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800623c:	f7ff f918 	bl	8005470 <LL_RCC_HSI_IsReady>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e04a      	b.n	80062e0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff fa77 	bl	8005742 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006254:	f7fc f9a4 	bl	80025a0 <HAL_GetTick>
 8006258:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800625a:	e00a      	b.n	8006272 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800625c:	f7fc f9a0 	bl	80025a0 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	f241 3288 	movw	r2, #5000	; 0x1388
 800626a:	4293      	cmp	r3, r2
 800626c:	d901      	bls.n	8006272 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800626e:	2303      	movs	r3, #3
 8006270:	e036      	b.n	80062e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006272:	f7ff fa7a 	bl	800576a <LL_RCC_GetSysClkSource>
 8006276:	4602      	mov	r2, r0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	429a      	cmp	r2, r3
 8006280:	d1ec      	bne.n	800625c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006282:	4b19      	ldr	r3, [pc, #100]	; (80062e8 <HAL_RCC_ClockConfig+0x278>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	429a      	cmp	r2, r3
 800628e:	d21b      	bcs.n	80062c8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006290:	4b15      	ldr	r3, [pc, #84]	; (80062e8 <HAL_RCC_ClockConfig+0x278>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f023 0207 	bic.w	r2, r3, #7
 8006298:	4913      	ldr	r1, [pc, #76]	; (80062e8 <HAL_RCC_ClockConfig+0x278>)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	4313      	orrs	r3, r2
 800629e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062a0:	f7fc f97e 	bl	80025a0 <HAL_GetTick>
 80062a4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062a6:	e008      	b.n	80062ba <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80062a8:	f7fc f97a 	bl	80025a0 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e012      	b.n	80062e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ba:	4b0b      	ldr	r3, [pc, #44]	; (80062e8 <HAL_RCC_ClockConfig+0x278>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0307 	and.w	r3, r3, #7
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d1ef      	bne.n	80062a8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80062c8:	f000 f87e 	bl	80063c8 <HAL_RCC_GetHCLKFreq>
 80062cc:	4603      	mov	r3, r0
 80062ce:	4a07      	ldr	r2, [pc, #28]	; (80062ec <HAL_RCC_ClockConfig+0x27c>)
 80062d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80062d2:	f7fc f971 	bl	80025b8 <HAL_GetTickPrio>
 80062d6:	4603      	mov	r3, r0
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fc f913 	bl	8002504 <HAL_InitTick>
 80062de:	4603      	mov	r3, r0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	58004000 	.word	0x58004000
 80062ec:	20000010 	.word	0x20000010

080062f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062f0:	b590      	push	{r4, r7, lr}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062f6:	f7ff fa38 	bl	800576a <LL_RCC_GetSysClkSource>
 80062fa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006302:	f7ff f9f4 	bl	80056ee <LL_RCC_MSI_GetRange>
 8006306:	4603      	mov	r3, r0
 8006308:	091b      	lsrs	r3, r3, #4
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	4a2b      	ldr	r2, [pc, #172]	; (80063bc <HAL_RCC_GetSysClockFreq+0xcc>)
 8006310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	e04b      	b.n	80063b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b04      	cmp	r3, #4
 800631c:	d102      	bne.n	8006324 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800631e:	4b28      	ldr	r3, [pc, #160]	; (80063c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006320:	60fb      	str	r3, [r7, #12]
 8006322:	e045      	b.n	80063b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b08      	cmp	r3, #8
 8006328:	d10a      	bne.n	8006340 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800632a:	f7ff f841 	bl	80053b0 <LL_RCC_HSE_IsEnabledDiv2>
 800632e:	4603      	mov	r3, r0
 8006330:	2b01      	cmp	r3, #1
 8006332:	d102      	bne.n	800633a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006334:	4b22      	ldr	r3, [pc, #136]	; (80063c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	e03a      	b.n	80063b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800633a:	4b22      	ldr	r3, [pc, #136]	; (80063c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	e037      	b.n	80063b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006340:	f7ff faf7 	bl	8005932 <LL_RCC_PLL_GetMainSource>
 8006344:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b02      	cmp	r3, #2
 800634a:	d003      	beq.n	8006354 <HAL_RCC_GetSysClockFreq+0x64>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b03      	cmp	r3, #3
 8006350:	d003      	beq.n	800635a <HAL_RCC_GetSysClockFreq+0x6a>
 8006352:	e00d      	b.n	8006370 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006354:	4b1a      	ldr	r3, [pc, #104]	; (80063c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006356:	60bb      	str	r3, [r7, #8]
        break;
 8006358:	e015      	b.n	8006386 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800635a:	f7ff f829 	bl	80053b0 <LL_RCC_HSE_IsEnabledDiv2>
 800635e:	4603      	mov	r3, r0
 8006360:	2b01      	cmp	r3, #1
 8006362:	d102      	bne.n	800636a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006364:	4b16      	ldr	r3, [pc, #88]	; (80063c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006366:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006368:	e00d      	b.n	8006386 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800636a:	4b16      	ldr	r3, [pc, #88]	; (80063c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800636c:	60bb      	str	r3, [r7, #8]
        break;
 800636e:	e00a      	b.n	8006386 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006370:	f7ff f9bd 	bl	80056ee <LL_RCC_MSI_GetRange>
 8006374:	4603      	mov	r3, r0
 8006376:	091b      	lsrs	r3, r3, #4
 8006378:	f003 030f 	and.w	r3, r3, #15
 800637c:	4a0f      	ldr	r2, [pc, #60]	; (80063bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800637e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006382:	60bb      	str	r3, [r7, #8]
        break;
 8006384:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006386:	f7ff faaf 	bl	80058e8 <LL_RCC_PLL_GetN>
 800638a:	4602      	mov	r2, r0
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	fb03 f402 	mul.w	r4, r3, r2
 8006392:	f7ff fac2 	bl	800591a <LL_RCC_PLL_GetDivider>
 8006396:	4603      	mov	r3, r0
 8006398:	091b      	lsrs	r3, r3, #4
 800639a:	3301      	adds	r3, #1
 800639c:	fbb4 f4f3 	udiv	r4, r4, r3
 80063a0:	f7ff faaf 	bl	8005902 <LL_RCC_PLL_GetR>
 80063a4:	4603      	mov	r3, r0
 80063a6:	0f5b      	lsrs	r3, r3, #29
 80063a8:	3301      	adds	r3, #1
 80063aa:	fbb4 f3f3 	udiv	r3, r4, r3
 80063ae:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80063b0:	68fb      	ldr	r3, [r7, #12]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd90      	pop	{r4, r7, pc}
 80063ba:	bf00      	nop
 80063bc:	0800a228 	.word	0x0800a228
 80063c0:	00f42400 	.word	0x00f42400
 80063c4:	01e84800 	.word	0x01e84800

080063c8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063c8:	b598      	push	{r3, r4, r7, lr}
 80063ca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80063cc:	f7ff ff90 	bl	80062f0 <HAL_RCC_GetSysClockFreq>
 80063d0:	4604      	mov	r4, r0
 80063d2:	f7ff fa3f 	bl	8005854 <LL_RCC_GetAHBPrescaler>
 80063d6:	4603      	mov	r3, r0
 80063d8:	091b      	lsrs	r3, r3, #4
 80063da:	f003 030f 	and.w	r3, r3, #15
 80063de:	4a03      	ldr	r2, [pc, #12]	; (80063ec <HAL_RCC_GetHCLKFreq+0x24>)
 80063e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	bd98      	pop	{r3, r4, r7, pc}
 80063ec:	0800a1e8 	.word	0x0800a1e8

080063f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2bb0      	cmp	r3, #176	; 0xb0
 80063fc:	d903      	bls.n	8006406 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80063fe:	4b14      	ldr	r3, [pc, #80]	; (8006450 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8006400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	e007      	b.n	8006416 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	091b      	lsrs	r3, r3, #4
 800640a:	f003 030f 	and.w	r3, r3, #15
 800640e:	4a10      	ldr	r2, [pc, #64]	; (8006450 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8006410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006414:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006416:	f7ff fa29 	bl	800586c <LL_RCC_GetAHB4Prescaler>
 800641a:	4603      	mov	r3, r0
 800641c:	091b      	lsrs	r3, r3, #4
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	4a0c      	ldr	r2, [pc, #48]	; (8006454 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	fbb2 f3f3 	udiv	r3, r2, r3
 800642e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	4a09      	ldr	r2, [pc, #36]	; (8006458 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006434:	fba2 2303 	umull	r2, r3, r2, r3
 8006438:	0c9b      	lsrs	r3, r3, #18
 800643a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800643e:	4618      	mov	r0, r3
 8006440:	f000 f80c 	bl	800645c <RCC_SetFlashLatency>
 8006444:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	0800a228 	.word	0x0800a228
 8006454:	0800a1e8 	.word	0x0800a1e8
 8006458:	431bde83 	.word	0x431bde83

0800645c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800645c:	b590      	push	{r4, r7, lr}
 800645e:	b08f      	sub	sp, #60	; 0x3c
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006466:	4b24      	ldr	r3, [pc, #144]	; (80064f8 <RCC_SetFlashLatency+0x9c>)
 8006468:	f107 041c 	add.w	r4, r7, #28
 800646c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800646e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006472:	4b22      	ldr	r3, [pc, #136]	; (80064fc <RCC_SetFlashLatency+0xa0>)
 8006474:	f107 040c 	add.w	r4, r7, #12
 8006478:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800647a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800647e:	2300      	movs	r3, #0
 8006480:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006482:	2300      	movs	r3, #0
 8006484:	633b      	str	r3, [r7, #48]	; 0x30
 8006486:	e013      	b.n	80064b0 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	3338      	adds	r3, #56	; 0x38
 800648e:	443b      	add	r3, r7
 8006490:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	429a      	cmp	r2, r3
 8006498:	d807      	bhi.n	80064aa <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	3338      	adds	r3, #56	; 0x38
 80064a0:	443b      	add	r3, r7
 80064a2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80064a6:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80064a8:	e005      	b.n	80064b6 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	3301      	adds	r3, #1
 80064ae:	633b      	str	r3, [r7, #48]	; 0x30
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d9e8      	bls.n	8006488 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80064b6:	4b12      	ldr	r3, [pc, #72]	; (8006500 <RCC_SetFlashLatency+0xa4>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f023 0207 	bic.w	r2, r3, #7
 80064be:	4910      	ldr	r1, [pc, #64]	; (8006500 <RCC_SetFlashLatency+0xa4>)
 80064c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c2:	4313      	orrs	r3, r2
 80064c4:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80064c6:	f7fc f86b 	bl	80025a0 <HAL_GetTick>
 80064ca:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80064cc:	e008      	b.n	80064e0 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80064ce:	f7fc f867 	bl	80025a0 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d901      	bls.n	80064e0 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e007      	b.n	80064f0 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80064e0:	4b07      	ldr	r3, [pc, #28]	; (8006500 <RCC_SetFlashLatency+0xa4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d1ef      	bne.n	80064ce <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	373c      	adds	r7, #60	; 0x3c
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd90      	pop	{r4, r7, pc}
 80064f8:	0800a028 	.word	0x0800a028
 80064fc:	0800a038 	.word	0x0800a038
 8006500:	58004000 	.word	0x58004000

08006504 <LL_RCC_LSE_IsEnabled>:
{
 8006504:	b480      	push	{r7}
 8006506:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006508:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800650c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b01      	cmp	r3, #1
 8006516:	d101      	bne.n	800651c <LL_RCC_LSE_IsEnabled+0x18>
 8006518:	2301      	movs	r3, #1
 800651a:	e000      	b.n	800651e <LL_RCC_LSE_IsEnabled+0x1a>
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <LL_RCC_LSE_IsReady>:
{
 8006528:	b480      	push	{r7}
 800652a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800652c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b02      	cmp	r3, #2
 800653a:	d101      	bne.n	8006540 <LL_RCC_LSE_IsReady+0x18>
 800653c:	2301      	movs	r3, #1
 800653e:	e000      	b.n	8006542 <LL_RCC_LSE_IsReady+0x1a>
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <LL_RCC_SetRFWKPClockSource>:
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800655c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006560:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4313      	orrs	r3, r2
 8006568:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <LL_RCC_SetSMPSClockSource>:
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	f023 0203 	bic.w	r2, r3, #3
 800658a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4313      	orrs	r3, r2
 8006592:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <LL_RCC_SetSMPSPrescaler>:
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80065a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80065b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	624b      	str	r3, [r1, #36]	; 0x24
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <LL_RCC_SetUSARTClockSource>:
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80065d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d8:	f023 0203 	bic.w	r2, r3, #3
 80065dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <LL_RCC_SetLPUARTClockSource>:
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80065fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006604:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006608:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4313      	orrs	r3, r2
 8006610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <LL_RCC_SetI2CClockSource>:
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006628:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800662c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	091b      	lsrs	r3, r3, #4
 8006634:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006638:	43db      	mvns	r3, r3
 800663a:	401a      	ands	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	011b      	lsls	r3, r3, #4
 8006640:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006644:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006648:	4313      	orrs	r3, r2
 800664a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <LL_RCC_SetLPTIMClockSource>:
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006666:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	0c1b      	lsrs	r3, r3, #16
 800666e:	041b      	lsls	r3, r3, #16
 8006670:	43db      	mvns	r3, r3
 8006672:	401a      	ands	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	041b      	lsls	r3, r3, #16
 8006678:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800667c:	4313      	orrs	r3, r2
 800667e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006682:	bf00      	nop
 8006684:	370c      	adds	r7, #12
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <LL_RCC_SetRNGClockSource>:
{
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800669a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800669e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80066a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <LL_RCC_SetCLK48ClockSource>:
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80066c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <LL_RCC_SetADCClockSource>:
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80066ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4313      	orrs	r3, r2
 8006702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <LL_RCC_SetRTCClockSource>:
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800671a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800671e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006722:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006726:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4313      	orrs	r3, r2
 800672e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <LL_RCC_GetRTCClockSource>:
{
 800673e:	b480      	push	{r7}
 8006740:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800674e:	4618      	mov	r0, r3
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <LL_RCC_ForceBackupDomainReset>:
{
 8006758:	b480      	push	{r7}
 800675a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800675c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006764:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800676c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006770:	bf00      	nop
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr

0800677a <LL_RCC_ReleaseBackupDomainReset>:
{
 800677a:	b480      	push	{r7}
 800677c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800677e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006786:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800678a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800678e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006792:	bf00      	nop
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b088      	sub	sp, #32
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80067a4:	2300      	movs	r3, #0
 80067a6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80067a8:	2300      	movs	r3, #0
 80067aa:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d046      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80067b8:	f7ff ffc1 	bl	800673e <LL_RCC_GetRTCClockSource>
 80067bc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d03c      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80067c8:	f7fe fd5e 	bl	8005288 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d105      	bne.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff ff9b 	bl	8006712 <LL_RCC_SetRTCClockSource>
 80067dc:	e02e      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80067de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80067e8:	f7ff ffb6 	bl	8006758 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80067ec:	f7ff ffc5 	bl	800677a <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80067fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006808:	f7ff fe7c 	bl	8006504 <LL_RCC_LSE_IsEnabled>
 800680c:	4603      	mov	r3, r0
 800680e:	2b01      	cmp	r3, #1
 8006810:	d114      	bne.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006812:	f7fb fec5 	bl	80025a0 <HAL_GetTick>
 8006816:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006818:	e00b      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800681a:	f7fb fec1 	bl	80025a0 <HAL_GetTick>
 800681e:	4602      	mov	r2, r0
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	1ad3      	subs	r3, r2, r3
 8006824:	f241 3288 	movw	r2, #5000	; 0x1388
 8006828:	4293      	cmp	r3, r2
 800682a:	d902      	bls.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	77fb      	strb	r3, [r7, #31]
              break;
 8006830:	e004      	b.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006832:	f7ff fe79 	bl	8006528 <LL_RCC_LSE_IsReady>
 8006836:	4603      	mov	r3, r0
 8006838:	2b01      	cmp	r3, #1
 800683a:	d1ee      	bne.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800683c:	7ffb      	ldrb	r3, [r7, #31]
 800683e:	77bb      	strb	r3, [r7, #30]
 8006840:	e001      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006842:	7ffb      	ldrb	r3, [r7, #31]
 8006844:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d004      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff feb6 	bl	80065c8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d004      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	4618      	mov	r0, r3
 800686e:	f7ff fec1 	bl	80065f4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0310 	and.w	r3, r3, #16
 800687a:	2b00      	cmp	r3, #0
 800687c:	d004      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff fee9 	bl	800665a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0320 	and.w	r3, r3, #32
 8006890:	2b00      	cmp	r3, #0
 8006892:	d004      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff fede 	bl	800665a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0304 	and.w	r3, r3, #4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d004      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7ff feb6 	bl	8006620 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d02b      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c8:	d008      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x140>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068d2:	d003      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x140>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d105      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff fed4 	bl	800668e <LL_RCC_SetRNGClockSource>
 80068e6:	e00a      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x162>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	2000      	movs	r0, #0
 80068f4:	f7ff fecb 	bl	800668e <LL_RCC_SetRNGClockSource>
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f7ff fede 	bl	80066ba <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006906:	d107      	bne.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006916:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006920:	2b00      	cmp	r3, #0
 8006922:	d011      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff fedc 	bl	80066e6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006936:	d107      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006946:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d004      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	4618      	mov	r0, r3
 800695a:	f7ff fdf7 	bl	800654c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d009      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff fe16 	bl	80065a0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006978:	4618      	mov	r0, r3
 800697a:	f7ff fdfd 	bl	8006578 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800697e:	7fbb      	ldrb	r3, [r7, #30]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3720      	adds	r7, #32
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e09f      	b.n	8006ada <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d106      	bne.n	80069b4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fb fc52 	bl	8002258 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80069bc:	4b49      	ldr	r3, [pc, #292]	; (8006ae4 <HAL_RTC_Init+0x15c>)
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f003 0310 	and.w	r3, r3, #16
 80069c4:	2b10      	cmp	r3, #16
 80069c6:	d07e      	beq.n	8006ac6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	22ca      	movs	r2, #202	; 0xca
 80069ce:	625a      	str	r2, [r3, #36]	; 0x24
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2253      	movs	r2, #83	; 0x53
 80069d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f8ab 	bl	8006b34 <RTC_EnterInitMode>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00a      	beq.n	80069fa <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	22ff      	movs	r2, #255	; 0xff
 80069ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2204      	movs	r2, #4
 80069f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	73fb      	strb	r3, [r7, #15]
 80069f8:	e067      	b.n	8006aca <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6812      	ldr	r2, [r2, #0]
 8006a04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a0c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6899      	ldr	r1, [r3, #8]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	431a      	orrs	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	68d2      	ldr	r2, [r2, #12]
 8006a34:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6919      	ldr	r1, [r3, #16]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	041a      	lsls	r2, r3, #16
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68da      	ldr	r2, [r3, #12]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a58:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0202 	bic.w	r2, r2, #2
 8006a68:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	69da      	ldr	r2, [r3, #28]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f003 0320 	and.w	r3, r3, #32
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d113      	bne.n	8006ab8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f829 	bl	8006ae8 <HAL_RTC_WaitForSynchro>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00d      	beq.n	8006ab8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	22ff      	movs	r2, #255	; 0xff
 8006aa2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2204      	movs	r2, #4
 8006aa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e010      	b.n	8006ada <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	22ff      	movs	r2, #255	; 0xff
 8006abe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73fb      	strb	r3, [r7, #15]
 8006ac4:	e001      	b.n	8006aca <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d103      	bne.n	8006ad8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	40002800 	.word	0x40002800

08006ae8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68da      	ldr	r2, [r3, #12]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006afe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006b00:	f7fb fd4e 	bl	80025a0 <HAL_GetTick>
 8006b04:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b06:	e009      	b.n	8006b1c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b08:	f7fb fd4a 	bl	80025a0 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b16:	d901      	bls.n	8006b1c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e007      	b.n	8006b2c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f003 0320 	and.w	r3, r3, #32
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0ee      	beq.n	8006b08 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d119      	bne.n	8006b7e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b52:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006b54:	f7fb fd24 	bl	80025a0 <HAL_GetTick>
 8006b58:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006b5a:	e009      	b.n	8006b70 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006b5c:	f7fb fd20 	bl	80025a0 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b6a:	d901      	bls.n	8006b70 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e007      	b.n	8006b80 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0ee      	beq.n	8006b5c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d101      	bne.n	8006ba2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	e0a8      	b.n	8006cf4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2202      	movs	r2, #2
 8006bae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	22ca      	movs	r2, #202	; 0xca
 8006bb8:	625a      	str	r2, [r3, #36]	; 0x24
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2253      	movs	r2, #83	; 0x53
 8006bc0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d020      	beq.n	8006c12 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006bd0:	f7fb fce6 	bl	80025a0 <HAL_GetTick>
 8006bd4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006bd6:	e015      	b.n	8006c04 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006bd8:	f7fb fce2 	bl	80025a0 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006be6:	d90d      	bls.n	8006c04 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	22ff      	movs	r2, #255	; 0xff
 8006bee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2203      	movs	r2, #3
 8006bf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e077      	b.n	8006cf4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f003 0304 	and.w	r3, r3, #4
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e2      	bne.n	8006bd8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c20:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006c32:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006c34:	f7fb fcb4 	bl	80025a0 <HAL_GetTick>
 8006c38:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006c3a:	e015      	b.n	8006c68 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006c3c:	f7fb fcb0 	bl	80025a0 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c4a:	d90d      	bls.n	8006c68 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	22ff      	movs	r2, #255	; 0xff
 8006c52:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2203      	movs	r2, #3
 8006c58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e045      	b.n	8006cf4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	f003 0304 	and.w	r3, r3, #4
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0e2      	beq.n	8006c3c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f022 0207 	bic.w	r2, r2, #7
 8006c8c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	6899      	ldr	r1, [r3, #8]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006c9e:	4b17      	ldr	r3, [pc, #92]	; (8006cfc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ca4:	4a15      	ldr	r2, [pc, #84]	; (8006cfc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006ca6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006caa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006cae:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a12      	ldr	r2, [pc, #72]	; (8006cfc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006cb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cb8:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cc8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689a      	ldr	r2, [r3, #8]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cd8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	22ff      	movs	r2, #255	; 0xff
 8006ce0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	58000800 	.word	0x58000800

08006d00 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d101      	bne.n	8006d16 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8006d12:	2302      	movs	r3, #2
 8006d14:	e04d      	b.n	8006db2 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2202      	movs	r2, #2
 8006d22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	22ca      	movs	r2, #202	; 0xca
 8006d2c:	625a      	str	r2, [r3, #36]	; 0x24
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2253      	movs	r2, #83	; 0x53
 8006d34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	689a      	ldr	r2, [r3, #8]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d44:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d54:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8006d56:	f7fb fc23 	bl	80025a0 <HAL_GetTick>
 8006d5a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006d5c:	e015      	b.n	8006d8a <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006d5e:	f7fb fc1f 	bl	80025a0 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d6c:	d90d      	bls.n	8006d8a <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	22ff      	movs	r2, #255	; 0xff
 8006d74:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2203      	movs	r2, #3
 8006d7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e013      	b.n	8006db2 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f003 0304 	and.w	r3, r3, #4
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d0e2      	beq.n	8006d5e <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	22ff      	movs	r2, #255	; 0xff
 8006d9e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b082      	sub	sp, #8
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d101      	bne.n	8006dcc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e049      	b.n	8006e60 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d106      	bne.n	8006de6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7fb fa6d 	bl	80022c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2202      	movs	r2, #2
 8006dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	3304      	adds	r3, #4
 8006df6:	4619      	mov	r1, r3
 8006df8:	4610      	mov	r0, r2
 8006dfa:	f000 f945 	bl	8007088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d001      	beq.n	8006e80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e02e      	b.n	8006ede <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2202      	movs	r2, #2
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a17      	ldr	r2, [pc, #92]	; (8006eec <HAL_TIM_Base_Start+0x84>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d004      	beq.n	8006e9c <HAL_TIM_Base_Start+0x34>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9a:	d115      	bne.n	8006ec8 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689a      	ldr	r2, [r3, #8]
 8006ea2:	4b13      	ldr	r3, [pc, #76]	; (8006ef0 <HAL_TIM_Base_Start+0x88>)
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2b06      	cmp	r3, #6
 8006eac:	d015      	beq.n	8006eda <HAL_TIM_Base_Start+0x72>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb4:	d011      	beq.n	8006eda <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f042 0201 	orr.w	r2, r2, #1
 8006ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ec6:	e008      	b.n	8006eda <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0201 	orr.w	r2, r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	e000      	b.n	8006edc <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	40012c00 	.word	0x40012c00
 8006ef0:	00010007 	.word	0x00010007

08006ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006efe:	2300      	movs	r3, #0
 8006f00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d101      	bne.n	8006f10 <HAL_TIM_ConfigClockSource+0x1c>
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	e0b6      	b.n	800707e <HAL_TIM_ConfigClockSource+0x18a>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006f2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f4c:	d03e      	beq.n	8006fcc <HAL_TIM_ConfigClockSource+0xd8>
 8006f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f52:	f200 8087 	bhi.w	8007064 <HAL_TIM_ConfigClockSource+0x170>
 8006f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f5a:	f000 8086 	beq.w	800706a <HAL_TIM_ConfigClockSource+0x176>
 8006f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f62:	d87f      	bhi.n	8007064 <HAL_TIM_ConfigClockSource+0x170>
 8006f64:	2b70      	cmp	r3, #112	; 0x70
 8006f66:	d01a      	beq.n	8006f9e <HAL_TIM_ConfigClockSource+0xaa>
 8006f68:	2b70      	cmp	r3, #112	; 0x70
 8006f6a:	d87b      	bhi.n	8007064 <HAL_TIM_ConfigClockSource+0x170>
 8006f6c:	2b60      	cmp	r3, #96	; 0x60
 8006f6e:	d050      	beq.n	8007012 <HAL_TIM_ConfigClockSource+0x11e>
 8006f70:	2b60      	cmp	r3, #96	; 0x60
 8006f72:	d877      	bhi.n	8007064 <HAL_TIM_ConfigClockSource+0x170>
 8006f74:	2b50      	cmp	r3, #80	; 0x50
 8006f76:	d03c      	beq.n	8006ff2 <HAL_TIM_ConfigClockSource+0xfe>
 8006f78:	2b50      	cmp	r3, #80	; 0x50
 8006f7a:	d873      	bhi.n	8007064 <HAL_TIM_ConfigClockSource+0x170>
 8006f7c:	2b40      	cmp	r3, #64	; 0x40
 8006f7e:	d058      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0x13e>
 8006f80:	2b40      	cmp	r3, #64	; 0x40
 8006f82:	d86f      	bhi.n	8007064 <HAL_TIM_ConfigClockSource+0x170>
 8006f84:	2b30      	cmp	r3, #48	; 0x30
 8006f86:	d064      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x15e>
 8006f88:	2b30      	cmp	r3, #48	; 0x30
 8006f8a:	d86b      	bhi.n	8007064 <HAL_TIM_ConfigClockSource+0x170>
 8006f8c:	2b20      	cmp	r3, #32
 8006f8e:	d060      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x15e>
 8006f90:	2b20      	cmp	r3, #32
 8006f92:	d867      	bhi.n	8007064 <HAL_TIM_ConfigClockSource+0x170>
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d05c      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x15e>
 8006f98:	2b10      	cmp	r3, #16
 8006f9a:	d05a      	beq.n	8007052 <HAL_TIM_ConfigClockSource+0x15e>
 8006f9c:	e062      	b.n	8007064 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006fae:	f000 f937 	bl	8007220 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	609a      	str	r2, [r3, #8]
      break;
 8006fca:	e04f      	b.n	800706c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006fdc:	f000 f920 	bl	8007220 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fee:	609a      	str	r2, [r3, #8]
      break;
 8006ff0:	e03c      	b.n	800706c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ffe:	461a      	mov	r2, r3
 8007000:	f000 f892 	bl	8007128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2150      	movs	r1, #80	; 0x50
 800700a:	4618      	mov	r0, r3
 800700c:	f000 f8eb 	bl	80071e6 <TIM_ITRx_SetConfig>
      break;
 8007010:	e02c      	b.n	800706c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800701e:	461a      	mov	r2, r3
 8007020:	f000 f8b1 	bl	8007186 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2160      	movs	r1, #96	; 0x60
 800702a:	4618      	mov	r0, r3
 800702c:	f000 f8db 	bl	80071e6 <TIM_ITRx_SetConfig>
      break;
 8007030:	e01c      	b.n	800706c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800703e:	461a      	mov	r2, r3
 8007040:	f000 f872 	bl	8007128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2140      	movs	r1, #64	; 0x40
 800704a:	4618      	mov	r0, r3
 800704c:	f000 f8cb 	bl	80071e6 <TIM_ITRx_SetConfig>
      break;
 8007050:	e00c      	b.n	800706c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4619      	mov	r1, r3
 800705c:	4610      	mov	r0, r2
 800705e:	f000 f8c2 	bl	80071e6 <TIM_ITRx_SetConfig>
      break;
 8007062:	e003      	b.n	800706c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	73fb      	strb	r3, [r7, #15]
      break;
 8007068:	e000      	b.n	800706c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800706a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800707c:	7bfb      	ldrb	r3, [r7, #15]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
	...

08007088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a22      	ldr	r2, [pc, #136]	; (8007124 <TIM_Base_SetConfig+0x9c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d003      	beq.n	80070a8 <TIM_Base_SetConfig+0x20>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a6:	d108      	bne.n	80070ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a19      	ldr	r2, [pc, #100]	; (8007124 <TIM_Base_SetConfig+0x9c>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d003      	beq.n	80070ca <TIM_Base_SetConfig+0x42>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070c8:	d108      	bne.n	80070dc <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	4313      	orrs	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	689a      	ldr	r2, [r3, #8]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a08      	ldr	r2, [pc, #32]	; (8007124 <TIM_Base_SetConfig+0x9c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d103      	bne.n	8007110 <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	691a      	ldr	r2, [r3, #16]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	615a      	str	r2, [r3, #20]
}
 8007116:	bf00      	nop
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	40012c00 	.word	0x40012c00

08007128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	f023 0201 	bic.w	r2, r3, #1
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	4313      	orrs	r3, r2
 800715c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f023 030a 	bic.w	r3, r3, #10
 8007164:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	4313      	orrs	r3, r2
 800716c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	621a      	str	r2, [r3, #32]
}
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007186:	b480      	push	{r7}
 8007188:	b087      	sub	sp, #28
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	60b9      	str	r1, [r7, #8]
 8007190:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a1b      	ldr	r3, [r3, #32]
 800719c:	f023 0210 	bic.w	r2, r3, #16
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	031b      	lsls	r3, r3, #12
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	011b      	lsls	r3, r3, #4
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	621a      	str	r2, [r3, #32]
}
 80071da:	bf00      	nop
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b085      	sub	sp, #20
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80071fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4313      	orrs	r3, r2
 8007208:	f043 0307 	orr.w	r3, r3, #7
 800720c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	609a      	str	r2, [r3, #8]
}
 8007214:	bf00      	nop
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800723a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	021a      	lsls	r2, r3, #8
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	431a      	orrs	r2, r3
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	4313      	orrs	r3, r2
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	4313      	orrs	r3, r2
 800724c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	609a      	str	r2, [r3, #8]
}
 8007254:	bf00      	nop
 8007256:	371c      	adds	r7, #28
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007270:	2b01      	cmp	r3, #1
 8007272:	d101      	bne.n	8007278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007274:	2302      	movs	r3, #2
 8007276:	e04a      	b.n	800730e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a1f      	ldr	r2, [pc, #124]	; (800731c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d108      	bne.n	80072b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a12      	ldr	r2, [pc, #72]	; (800731c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d004      	beq.n	80072e2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e0:	d10c      	bne.n	80072fc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68ba      	ldr	r2, [r7, #8]
 80072fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	40012c00 	.word	0x40012c00

08007320 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8007320:	b5b0      	push	{r4, r5, r7, lr}
 8007322:	b0ce      	sub	sp, #312	; 0x138
 8007324:	af00      	add	r7, sp, #0
 8007326:	4605      	mov	r5, r0
 8007328:	460c      	mov	r4, r1
 800732a:	4610      	mov	r0, r2
 800732c:	4619      	mov	r1, r3
 800732e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007332:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8007336:	462a      	mov	r2, r5
 8007338:	701a      	strb	r2, [r3, #0]
 800733a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800733e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007342:	4622      	mov	r2, r4
 8007344:	801a      	strh	r2, [r3, #0]
 8007346:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800734a:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800734e:	4602      	mov	r2, r0
 8007350:	801a      	strh	r2, [r3, #0]
 8007352:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007356:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800735a:	460a      	mov	r2, r1
 800735c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800735e:	f107 0310 	add.w	r3, r7, #16
 8007362:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8007366:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800736a:	3308      	adds	r3, #8
 800736c:	f107 0210 	add.w	r2, r7, #16
 8007370:	4413      	add	r3, r2
 8007372:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8007376:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800737a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800737e:	4413      	add	r3, r2
 8007380:	3309      	adds	r3, #9
 8007382:	f107 0210 	add.w	r2, r7, #16
 8007386:	4413      	add	r3, r2
 8007388:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800738c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007390:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007394:	2200      	movs	r2, #0
 8007396:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007398:	2300      	movs	r3, #0
 800739a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800739e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073a2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80073a6:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80073aa:	7812      	ldrb	r2, [r2, #0]
 80073ac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80073ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073b2:	3301      	adds	r3, #1
 80073b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80073b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073bc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80073c0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80073c4:	8812      	ldrh	r2, [r2, #0]
 80073c6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80073ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073ce:	3302      	adds	r3, #2
 80073d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80073d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073d8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80073dc:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80073e0:	8812      	ldrh	r2, [r2, #0]
 80073e2:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80073e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80073ea:	3302      	adds	r3, #2
 80073ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80073f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80073f4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80073f8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80073fc:	7812      	ldrb	r2, [r2, #0]
 80073fe:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007400:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007404:	3301      	adds	r3, #1
 8007406:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800740a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800740e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8007412:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8007414:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007418:	3301      	adds	r3, #1
 800741a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800741e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007422:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8007426:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8007428:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800742c:	3301      	adds	r3, #1
 800742e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8007432:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007436:	3308      	adds	r3, #8
 8007438:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800743c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fc21 	bl	8007c88 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8007446:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800744a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800744e:	4413      	add	r3, r2
 8007450:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8007454:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007458:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800745c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800745e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007462:	3301      	adds	r3, #1
 8007464:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8007468:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800746c:	3301      	adds	r3, #1
 800746e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007472:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fc06 	bl	8007c88 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800747c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007480:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007484:	4413      	add	r3, r2
 8007486:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800748a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800748e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8007492:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007494:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007498:	3302      	adds	r3, #2
 800749a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800749e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 80074a6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80074a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074ac:	3302      	adds	r3, #2
 80074ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80074b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074b6:	2218      	movs	r2, #24
 80074b8:	2100      	movs	r1, #0
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 fbf4 	bl	8007ca8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80074c0:	233f      	movs	r3, #63	; 0x3f
 80074c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 80074c6:	2383      	movs	r3, #131	; 0x83
 80074c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80074cc:	f107 0310 	add.w	r3, r7, #16
 80074d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80074d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80074d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80074dc:	f107 030f 	add.w	r3, r7, #15
 80074e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80074e4:	2301      	movs	r3, #1
 80074e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80074ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80074ee:	2100      	movs	r1, #0
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 fe4f 	bl	8008194 <hci_send_req>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	da01      	bge.n	8007500 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80074fc:	23ff      	movs	r3, #255	; 0xff
 80074fe:	e004      	b.n	800750a <aci_gap_set_discoverable+0x1ea>
  return status;
 8007500:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8007504:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007508:	781b      	ldrb	r3, [r3, #0]
}
 800750a:	4618      	mov	r0, r3
 800750c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007510:	46bd      	mov	sp, r7
 8007512:	bdb0      	pop	{r4, r5, r7, pc}

08007514 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8007514:	b590      	push	{r4, r7, lr}
 8007516:	b0cd      	sub	sp, #308	; 0x134
 8007518:	af00      	add	r7, sp, #0
 800751a:	4604      	mov	r4, r0
 800751c:	4608      	mov	r0, r1
 800751e:	4611      	mov	r1, r2
 8007520:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007524:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8007528:	6013      	str	r3, [r2, #0]
 800752a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007532:	4622      	mov	r2, r4
 8007534:	701a      	strb	r2, [r3, #0]
 8007536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800753e:	4602      	mov	r2, r0
 8007540:	701a      	strb	r2, [r3, #0]
 8007542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007546:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800754a:	460a      	mov	r2, r1
 800754c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800754e:	f107 0310 	add.w	r3, r7, #16
 8007552:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007556:	f107 0308 	add.w	r3, r7, #8
 800755a:	2207      	movs	r2, #7
 800755c:	2100      	movs	r1, #0
 800755e:	4618      	mov	r0, r3
 8007560:	f000 fba2 	bl	8007ca8 <Osal_MemSet>
  int index_input = 0;
 8007564:	2300      	movs	r3, #0
 8007566:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800756a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800756e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007572:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007576:	7812      	ldrb	r2, [r2, #0]
 8007578:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800757a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800757e:	3301      	adds	r3, #1
 8007580:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8007584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007588:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800758c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007590:	7812      	ldrb	r2, [r2, #0]
 8007592:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007594:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007598:	3301      	adds	r3, #1
 800759a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800759e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075a6:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 80075aa:	7812      	ldrb	r2, [r2, #0]
 80075ac:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80075ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075b2:	3301      	adds	r3, #1
 80075b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80075b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075bc:	2218      	movs	r2, #24
 80075be:	2100      	movs	r1, #0
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 fb71 	bl	8007ca8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80075c6:	233f      	movs	r3, #63	; 0x3f
 80075c8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80075cc:	238a      	movs	r3, #138	; 0x8a
 80075ce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80075d2:	f107 0310 	add.w	r3, r7, #16
 80075d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80075da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 80075e2:	f107 0308 	add.w	r3, r7, #8
 80075e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80075ea:	2307      	movs	r3, #7
 80075ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80075f4:	2100      	movs	r1, #0
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 fdcc 	bl	8008194 <hci_send_req>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	da01      	bge.n	8007606 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8007602:	23ff      	movs	r3, #255	; 0xff
 8007604:	e02e      	b.n	8007664 <aci_gap_init+0x150>
  if ( resp.Status )
 8007606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800760a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d005      	beq.n	8007620 <aci_gap_init+0x10c>
    return resp.Status;
 8007614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007618:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	e021      	b.n	8007664 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8007620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007624:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007628:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800762c:	b29a      	uxth	r2, r3
 800762e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007632:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800763a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007642:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007646:	b29a      	uxth	r2, r3
 8007648:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800764c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800764e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007652:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007656:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800765a:	b29a      	uxth	r2, r3
 800765c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007660:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800766a:	46bd      	mov	sp, r7
 800766c:	bd90      	pop	{r4, r7, pc}

0800766e <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b0cc      	sub	sp, #304	; 0x130
 8007672:	af00      	add	r7, sp, #0
 8007674:	4602      	mov	r2, r0
 8007676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800767a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800767e:	6019      	str	r1, [r3, #0]
 8007680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007684:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007688:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800768a:	f107 0310 	add.w	r3, r7, #16
 800768e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007696:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800769a:	2200      	movs	r2, #0
 800769c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800769e:	2300      	movs	r3, #0
 80076a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 80076a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80076ac:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80076b0:	7812      	ldrb	r2, [r2, #0]
 80076b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80076b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076b8:	3301      	adds	r3, #1
 80076ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80076be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076c2:	1c58      	adds	r0, r3, #1
 80076c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80076cc:	781a      	ldrb	r2, [r3, #0]
 80076ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076d6:	6819      	ldr	r1, [r3, #0]
 80076d8:	f000 fad6 	bl	8007c88 <Osal_MemCpy>
  index_input += AdvDataLen;
 80076dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80076ea:	4413      	add	r3, r2
 80076ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80076f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076f4:	2218      	movs	r2, #24
 80076f6:	2100      	movs	r1, #0
 80076f8:	4618      	mov	r0, r3
 80076fa:	f000 fad5 	bl	8007ca8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80076fe:	233f      	movs	r3, #63	; 0x3f
 8007700:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007704:	238e      	movs	r3, #142	; 0x8e
 8007706:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800770a:	f107 0310 	add.w	r3, r7, #16
 800770e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007712:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007716:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800771a:	f107 030f 	add.w	r3, r7, #15
 800771e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007722:	2301      	movs	r3, #1
 8007724:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007728:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800772c:	2100      	movs	r1, #0
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fd30 	bl	8008194 <hci_send_req>
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	da01      	bge.n	800773e <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800773a:	23ff      	movs	r3, #255	; 0xff
 800773c:	e004      	b.n	8007748 <aci_gap_update_adv_data+0xda>
  return status;
 800773e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007742:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007746:	781b      	ldrb	r3, [r3, #0]
}
 8007748:	4618      	mov	r0, r3
 800774a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <aci_gap_delete_ad_type>:

tBleStatus aci_gap_delete_ad_type( uint8_t ADType )
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b0cc      	sub	sp, #304	; 0x130
 8007756:	af00      	add	r7, sp, #0
 8007758:	4602      	mov	r2, r0
 800775a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007762:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_delete_ad_type_cp0 *cp0 = (aci_gap_delete_ad_type_cp0*)(cmd_buffer);
 8007764:	f107 0310 	add.w	r3, r7, #16
 8007768:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800776c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007770:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007774:	2200      	movs	r2, #0
 8007776:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ADType = ADType;
 800777e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007782:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007786:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800778a:	7812      	ldrb	r2, [r2, #0]
 800778c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800778e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007792:	3301      	adds	r3, #1
 8007794:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007798:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800779c:	2218      	movs	r2, #24
 800779e:	2100      	movs	r1, #0
 80077a0:	4618      	mov	r0, r3
 80077a2:	f000 fa81 	bl	8007ca8 <Osal_MemSet>
  rq.ogf = 0x3f;
 80077a6:	233f      	movs	r3, #63	; 0x3f
 80077a8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08f;
 80077ac:	238f      	movs	r3, #143	; 0x8f
 80077ae:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80077b2:	f107 0310 	add.w	r3, r7, #16
 80077b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80077ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077be:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80077c2:	f107 030f 	add.w	r3, r7, #15
 80077c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80077ca:	2301      	movs	r3, #1
 80077cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80077d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077d4:	2100      	movs	r1, #0
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 fcdc 	bl	8008194 <hci_send_req>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	da01      	bge.n	80077e6 <aci_gap_delete_ad_type+0x94>
    return BLE_STATUS_TIMEOUT;
 80077e2:	23ff      	movs	r3, #255	; 0xff
 80077e4:	e004      	b.n	80077f0 <aci_gap_delete_ad_type+0x9e>
  return status;
 80077e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80077ee:	781b      	ldrb	r3, [r3, #0]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b088      	sub	sp, #32
 80077fe:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007800:	2300      	movs	r3, #0
 8007802:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007804:	f107 0308 	add.w	r3, r7, #8
 8007808:	2218      	movs	r2, #24
 800780a:	2100      	movs	r1, #0
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fa4b 	bl	8007ca8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007812:	233f      	movs	r3, #63	; 0x3f
 8007814:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8007816:	f240 1301 	movw	r3, #257	; 0x101
 800781a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800781c:	1dfb      	adds	r3, r7, #7
 800781e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007820:	2301      	movs	r3, #1
 8007822:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007824:	f107 0308 	add.w	r3, r7, #8
 8007828:	2100      	movs	r1, #0
 800782a:	4618      	mov	r0, r3
 800782c:	f000 fcb2 	bl	8008194 <hci_send_req>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	da01      	bge.n	800783a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8007836:	23ff      	movs	r3, #255	; 0xff
 8007838:	e000      	b.n	800783c <aci_gatt_init+0x42>
  return status;
 800783a:	79fb      	ldrb	r3, [r7, #7]
}
 800783c:	4618      	mov	r0, r3
 800783e:	3720      	adds	r7, #32
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007844:	b5b0      	push	{r4, r5, r7, lr}
 8007846:	b0cc      	sub	sp, #304	; 0x130
 8007848:	af00      	add	r7, sp, #0
 800784a:	4605      	mov	r5, r0
 800784c:	460c      	mov	r4, r1
 800784e:	4610      	mov	r0, r2
 8007850:	4619      	mov	r1, r3
 8007852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007856:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800785a:	462a      	mov	r2, r5
 800785c:	801a      	strh	r2, [r3, #0]
 800785e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007862:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007866:	4622      	mov	r2, r4
 8007868:	801a      	strh	r2, [r3, #0]
 800786a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800786e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8007872:	4602      	mov	r2, r0
 8007874:	701a      	strb	r2, [r3, #0]
 8007876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800787a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800787e:	460a      	mov	r2, r1
 8007880:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8007882:	f107 0310 	add.w	r3, r7, #16
 8007886:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800788a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800788e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007892:	2200      	movs	r2, #0
 8007894:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007896:	2300      	movs	r3, #0
 8007898:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800789c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078a4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80078a8:	8812      	ldrh	r2, [r2, #0]
 80078aa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80078ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078b0:	3302      	adds	r3, #2
 80078b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80078b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078be:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80078c2:	8812      	ldrh	r2, [r2, #0]
 80078c4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80078c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078ca:	3302      	adds	r3, #2
 80078cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80078d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078d8:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80078dc:	7812      	ldrb	r2, [r2, #0]
 80078de:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80078e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078e4:	3301      	adds	r3, #1
 80078e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80078ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80078f2:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80078f6:	7812      	ldrb	r2, [r2, #0]
 80078f8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80078fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078fe:	3301      	adds	r3, #1
 8007900:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8007904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007908:	1d98      	adds	r0, r3, #6
 800790a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800790e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	461a      	mov	r2, r3
 8007916:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800791a:	f000 f9b5 	bl	8007c88 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800791e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007922:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800792c:	4413      	add	r3, r2
 800792e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007932:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007936:	2218      	movs	r2, #24
 8007938:	2100      	movs	r1, #0
 800793a:	4618      	mov	r0, r3
 800793c:	f000 f9b4 	bl	8007ca8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007940:	233f      	movs	r3, #63	; 0x3f
 8007942:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8007946:	f44f 7383 	mov.w	r3, #262	; 0x106
 800794a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800794e:	f107 0310 	add.w	r3, r7, #16
 8007952:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007956:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800795a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800795e:	f107 030f 	add.w	r3, r7, #15
 8007962:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007966:	2301      	movs	r3, #1
 8007968:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800796c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007970:	2100      	movs	r1, #0
 8007972:	4618      	mov	r0, r3
 8007974:	f000 fc0e 	bl	8008194 <hci_send_req>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	da01      	bge.n	8007982 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800797e:	23ff      	movs	r3, #255	; 0xff
 8007980:	e004      	b.n	800798c <aci_gatt_update_char_value+0x148>
  return status;
 8007982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007986:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800798a:	781b      	ldrb	r3, [r3, #0]
}
 800798c:	4618      	mov	r0, r3
 800798e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007992:	46bd      	mov	sp, r7
 8007994:	bdb0      	pop	{r4, r5, r7, pc}

08007996 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b0cc      	sub	sp, #304	; 0x130
 800799a:	af00      	add	r7, sp, #0
 800799c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079aa:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80079ae:	4602      	mov	r2, r0
 80079b0:	701a      	strb	r2, [r3, #0]
 80079b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80079ba:	460a      	mov	r2, r1
 80079bc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80079be:	f107 0310 	add.w	r3, r7, #16
 80079c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80079c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ca:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80079ce:	2200      	movs	r2, #0
 80079d0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80079d2:	2300      	movs	r3, #0
 80079d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80079d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80079e0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80079e4:	7812      	ldrb	r2, [r2, #0]
 80079e6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80079e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079ec:	3301      	adds	r3, #1
 80079ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80079f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80079fa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80079fe:	7812      	ldrb	r2, [r2, #0]
 8007a00:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007a02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a06:	3301      	adds	r3, #1
 8007a08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a10:	1c98      	adds	r0, r3, #2
 8007a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a16:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007a1a:	781a      	ldrb	r2, [r3, #0]
 8007a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a24:	6819      	ldr	r1, [r3, #0]
 8007a26:	f000 f92f 	bl	8007c88 <Osal_MemCpy>
  index_input += Length;
 8007a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a2e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007a38:	4413      	add	r3, r2
 8007a3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a42:	2218      	movs	r2, #24
 8007a44:	2100      	movs	r1, #0
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 f92e 	bl	8007ca8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007a4c:	233f      	movs	r3, #63	; 0x3f
 8007a4e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8007a52:	230c      	movs	r3, #12
 8007a54:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007a58:	f107 0310 	add.w	r3, r7, #16
 8007a5c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007a60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007a68:	f107 030f 	add.w	r3, r7, #15
 8007a6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007a70:	2301      	movs	r3, #1
 8007a72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 fb89 	bl	8008194 <hci_send_req>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	da01      	bge.n	8007a8c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8007a88:	23ff      	movs	r3, #255	; 0xff
 8007a8a:	e004      	b.n	8007a96 <aci_hal_write_config_data+0x100>
  return status;
 8007a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a90:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007a94:	781b      	ldrb	r3, [r3, #0]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b0cc      	sub	sp, #304	; 0x130
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aac:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007ab0:	701a      	strb	r2, [r3, #0]
 8007ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ab6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8007aba:	460a      	mov	r2, r1
 8007abc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007abe:	f107 0310 	add.w	r3, r7, #16
 8007ac2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aca:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007ace:	2200      	movs	r2, #0
 8007ad0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8007ad8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007adc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007ae0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007ae4:	7812      	ldrb	r2, [r2, #0]
 8007ae6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007ae8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007aec:	3301      	adds	r3, #1
 8007aee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8007af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007afa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8007afe:	7812      	ldrb	r2, [r2, #0]
 8007b00:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007b02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b06:	3301      	adds	r3, #1
 8007b08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b0c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b10:	2218      	movs	r2, #24
 8007b12:	2100      	movs	r1, #0
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 f8c7 	bl	8007ca8 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b1a:	233f      	movs	r3, #63	; 0x3f
 8007b1c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8007b20:	230f      	movs	r3, #15
 8007b22:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007b26:	f107 0310 	add.w	r3, r7, #16
 8007b2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007b2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007b36:	f107 030f 	add.w	r3, r7, #15
 8007b3a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b44:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b48:	2100      	movs	r1, #0
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 fb22 	bl	8008194 <hci_send_req>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	da01      	bge.n	8007b5a <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8007b56:	23ff      	movs	r3, #255	; 0xff
 8007b58:	e004      	b.n	8007b64 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8007b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b5e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007b62:	781b      	ldrb	r3, [r3, #0]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	b088      	sub	sp, #32
 8007b72:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b78:	f107 0308 	add.w	r3, r7, #8
 8007b7c:	2218      	movs	r2, #24
 8007b7e:	2100      	movs	r1, #0
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 f891 	bl	8007ca8 <Osal_MemSet>
  rq.ogf = 0x03;
 8007b86:	2303      	movs	r3, #3
 8007b88:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007b8e:	1dfb      	adds	r3, r7, #7
 8007b90:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007b92:	2301      	movs	r3, #1
 8007b94:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b96:	f107 0308 	add.w	r3, r7, #8
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 faf9 	bl	8008194 <hci_send_req>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	da01      	bge.n	8007bac <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007ba8:	23ff      	movs	r3, #255	; 0xff
 8007baa:	e000      	b.n	8007bae <hci_reset+0x40>
  return status;
 8007bac:	79fb      	ldrb	r3, [r7, #7]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3720      	adds	r7, #32
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <hci_le_set_scan_response_data>:
  return status;
}

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b0cc      	sub	sp, #304	; 0x130
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bc6:	6019      	str	r1, [r3, #0]
 8007bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bcc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8007bd0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 8007bd2:	f107 0310 	add.w	r3, r7, #16
 8007bd6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007bda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bde:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007be2:	2200      	movs	r2, #0
 8007be4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 8007bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007bf4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8007bf8:	7812      	ldrb	r2, [r2, #0]
 8007bfa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007bfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c00:	3301      	adds	r3, #1
 8007c02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 8007c06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c0a:	1c58      	adds	r0, r3, #1
 8007c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c14:	221f      	movs	r2, #31
 8007c16:	6819      	ldr	r1, [r3, #0]
 8007c18:	f000 f836 	bl	8007c88 <Osal_MemCpy>
  index_input += 31;
 8007c1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c20:	331f      	adds	r3, #31
 8007c22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c26:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c2a:	2218      	movs	r2, #24
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 f83a 	bl	8007ca8 <Osal_MemSet>
  rq.ogf = 0x08;
 8007c34:	2308      	movs	r3, #8
 8007c36:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 8007c3a:	2309      	movs	r3, #9
 8007c3c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007c40:	f107 0310 	add.w	r3, r7, #16
 8007c44:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007c48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007c50:	f107 030f 	add.w	r3, r7, #15
 8007c54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c62:	2100      	movs	r1, #0
 8007c64:	4618      	mov	r0, r3
 8007c66:	f000 fa95 	bl	8008194 <hci_send_req>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	da01      	bge.n	8007c74 <hci_le_set_scan_response_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8007c70:	23ff      	movs	r3, #255	; 0xff
 8007c72:	e004      	b.n	8007c7e <hci_le_set_scan_response_data+0xc8>
  return status;
 8007c74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c78:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8007c7c:	781b      	ldrb	r3, [r3, #0]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	68b9      	ldr	r1, [r7, #8]
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f002 f99d 	bl	8009fd8 <memcpy>
 8007c9e:	4603      	mov	r3, r0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3710      	adds	r7, #16
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	68b9      	ldr	r1, [r7, #8]
 8007cb8:	68f8      	ldr	r0, [r7, #12]
 8007cba:	f002 f961 	bl	8009f80 <memset>
 8007cbe:	4603      	mov	r3, r0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3710      	adds	r7, #16
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8007cc8:	b480      	push	{r7}
 8007cca:	af00      	add	r7, sp, #0
  return;
 8007ccc:	bf00      	nop
}
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	af00      	add	r7, sp, #0
  return;
 8007cda:	bf00      	nop
}
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0
  return;
 8007ce8:	bf00      	nop
}
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8007cf2:	b480      	push	{r7}
 8007cf4:	af00      	add	r7, sp, #0
  return;
 8007cf6:	bf00      	nop
}
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8007d00:	b480      	push	{r7}
 8007d02:	af00      	add	r7, sp, #0
  return;
 8007d04:	bf00      	nop
}
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8007d0e:	b480      	push	{r7}
 8007d10:	af00      	add	r7, sp, #0
  return;
 8007d12:	bf00      	nop
}
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	af00      	add	r7, sp, #0
  return;
 8007d20:	bf00      	nop
}
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	af00      	add	r7, sp, #0
  return;
 8007d2e:	bf00      	nop
}
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8007d38:	b480      	push	{r7}
 8007d3a:	af00      	add	r7, sp, #0
  return;
 8007d3c:	bf00      	nop
}
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8007d46:	b480      	push	{r7}
 8007d48:	af00      	add	r7, sp, #0
  return;
 8007d4a:	bf00      	nop
}
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8007d54:	b480      	push	{r7}
 8007d56:	af00      	add	r7, sp, #0
  return;
 8007d58:	bf00      	nop
}
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8007d62:	b480      	push	{r7}
 8007d64:	af00      	add	r7, sp, #0
  return;
 8007d66:	bf00      	nop
}
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8007d70:	b480      	push	{r7}
 8007d72:	af00      	add	r7, sp, #0
  return;
 8007d74:	bf00      	nop
}
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8007d7e:	b480      	push	{r7}
 8007d80:	af00      	add	r7, sp, #0
  return;
 8007d82:	bf00      	nop
}
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	af00      	add	r7, sp, #0
  return;
 8007d90:	bf00      	nop
}
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	af00      	add	r7, sp, #0
  return;
 8007d9e:	bf00      	nop
}
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8007da8:	b480      	push	{r7}
 8007daa:	af00      	add	r7, sp, #0
  return;
 8007dac:	bf00      	nop
}
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8007db6:	b480      	push	{r7}
 8007db8:	af00      	add	r7, sp, #0
  return;
 8007dba:	bf00      	nop
}
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007dc8:	4b04      	ldr	r3, [pc, #16]	; (8007ddc <SVCCTL_Init+0x18>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007dce:	4b04      	ldr	r3, [pc, #16]	; (8007de0 <SVCCTL_Init+0x1c>)
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007dd4:	f000 f806 	bl	8007de4 <SVCCTL_SvcInit>

  return;
 8007dd8:	bf00      	nop
}
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	20000024 	.word	0x20000024
 8007de0:	20000044 	.word	0x20000044

08007de4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0
  BAS_Init();
 8007de8:	f7ff ff6e 	bl	8007cc8 <BAS_Init>

  BLS_Init();
 8007dec:	f7ff ff73 	bl	8007cd6 <BLS_Init>

  CRS_STM_Init();
 8007df0:	f7ff ff78 	bl	8007ce4 <CRS_STM_Init>

  DIS_Init();
 8007df4:	f7ff ff7d 	bl	8007cf2 <DIS_Init>

  EDS_STM_Init();
 8007df8:	f7ff ff82 	bl	8007d00 <EDS_STM_Init>

  HIDS_Init();
 8007dfc:	f7ff ff87 	bl	8007d0e <HIDS_Init>

  HRS_Init();
 8007e00:	f7ff ff8c 	bl	8007d1c <HRS_Init>

  HTS_Init();
 8007e04:	f7ff ff91 	bl	8007d2a <HTS_Init>

  IAS_Init();
 8007e08:	f7ff ff96 	bl	8007d38 <IAS_Init>

  LLS_Init();
 8007e0c:	f7ff ff9b 	bl	8007d46 <LLS_Init>

  TPS_Init();
 8007e10:	f7ff ffa0 	bl	8007d54 <TPS_Init>

  MOTENV_STM_Init();
 8007e14:	f7ff ffa5 	bl	8007d62 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007e18:	f7ff ffaa 	bl	8007d70 <P2PS_STM_Init>

  ZDD_STM_Init();
 8007e1c:	f7ff ffaf 	bl	8007d7e <ZDD_STM_Init>

  OTAS_STM_Init();
 8007e20:	f7ff ffb4 	bl	8007d8c <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007e24:	f7ff ffc0 	bl	8007da8 <BVOPUS_STM_Init>

  MESH_Init();
 8007e28:	f7ff ffb7 	bl	8007d9a <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007e2c:	f7ff ffc3 	bl	8007db6 <SVCCTL_InitCustomSvc>
  
  return;
 8007e30:	bf00      	nop
}
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b086      	sub	sp, #24
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007e42:	2300      	movs	r3, #0
 8007e44:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	2bff      	cmp	r3, #255	; 0xff
 8007e4c:	d125      	bne.n	8007e9a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	3302      	adds	r3, #2
 8007e52:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	881b      	ldrh	r3, [r3, #0]
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007e5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e62:	d118      	bne.n	8007e96 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007e64:	2300      	movs	r3, #0
 8007e66:	757b      	strb	r3, [r7, #21]
 8007e68:	e00d      	b.n	8007e86 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007e6a:	7d7b      	ldrb	r3, [r7, #21]
 8007e6c:	4a1a      	ldr	r2, [pc, #104]	; (8007ed8 <SVCCTL_UserEvtRx+0xa4>)
 8007e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	4798      	blx	r3
 8007e76:	4603      	mov	r3, r0
 8007e78:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007e7a:	7dfb      	ldrb	r3, [r7, #23]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d108      	bne.n	8007e92 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007e80:	7d7b      	ldrb	r3, [r7, #21]
 8007e82:	3301      	adds	r3, #1
 8007e84:	757b      	strb	r3, [r7, #21]
 8007e86:	4b14      	ldr	r3, [pc, #80]	; (8007ed8 <SVCCTL_UserEvtRx+0xa4>)
 8007e88:	7f1b      	ldrb	r3, [r3, #28]
 8007e8a:	7d7a      	ldrb	r2, [r7, #21]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d3ec      	bcc.n	8007e6a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007e90:	e002      	b.n	8007e98 <SVCCTL_UserEvtRx+0x64>
              break;
 8007e92:	bf00      	nop
          break;
 8007e94:	e000      	b.n	8007e98 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007e96:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007e98:	e000      	b.n	8007e9c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007e9a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d00f      	beq.n	8007ec2 <SVCCTL_UserEvtRx+0x8e>
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	dc10      	bgt.n	8007ec8 <SVCCTL_UserEvtRx+0x94>
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d002      	beq.n	8007eb0 <SVCCTL_UserEvtRx+0x7c>
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d006      	beq.n	8007ebc <SVCCTL_UserEvtRx+0x88>
 8007eae:	e00b      	b.n	8007ec8 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 ff91 	bl	8008dd8 <SVCCTL_App_Notification>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	75bb      	strb	r3, [r7, #22]
      break;
 8007eba:	e008      	b.n	8007ece <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	75bb      	strb	r3, [r7, #22]
      break;
 8007ec0:	e005      	b.n	8007ece <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	75bb      	strb	r3, [r7, #22]
      break;
 8007ec6:	e002      	b.n	8007ece <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	75bb      	strb	r3, [r7, #22]
      break;
 8007ecc:	bf00      	nop
  }

  return (return_status);
 8007ece:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	20000024 	.word	0x20000024

08007edc <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b088      	sub	sp, #32
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007ee4:	f107 030c 	add.w	r3, r7, #12
 8007ee8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	212e      	movs	r1, #46	; 0x2e
 8007ef4:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8007ef8:	f000 fae8 	bl	80084cc <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	330b      	adds	r3, #11
 8007f00:	78db      	ldrb	r3, [r3, #3]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3720      	adds	r7, #32
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b088      	sub	sp, #32
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007f12:	f107 030c 	add.w	r3, r7, #12
 8007f16:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	210f      	movs	r1, #15
 8007f22:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8007f26:	f000 fad1 	bl	80084cc <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	330b      	adds	r3, #11
 8007f2e:	78db      	ldrb	r3, [r3, #3]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3720      	adds	r7, #32
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b088      	sub	sp, #32
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007f40:	f107 030c 	add.w	r3, r7, #12
 8007f44:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	2110      	movs	r1, #16
 8007f4c:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8007f50:	f000 fabc 	bl	80084cc <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	330b      	adds	r3, #11
 8007f58:	78db      	ldrb	r3, [r3, #3]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3720      	adds	r7, #32
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
	...

08007f64 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8007f64:	b480      	push	{r7}
 8007f66:	b08b      	sub	sp, #44	; 0x2c
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8007f70:	2300      	movs	r3, #0
 8007f72:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007f74:	2300      	movs	r3, #0
 8007f76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8007f80:	2300      	movs	r3, #0
 8007f82:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007f84:	2300      	movs	r3, #0
 8007f86:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007f8c:	4b4a      	ldr	r3, [pc, #296]	; (80080b8 <SHCI_GetWirelessFwInfo+0x154>)
 8007f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f90:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007f94:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007f9e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a44      	ldr	r2, [pc, #272]	; (80080bc <SHCI_GetWirelessFwInfo+0x158>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d10f      	bne.n	8007fd0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	695b      	ldr	r3, [r3, #20]
 8007fb4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	617b      	str	r3, [r7, #20]
 8007fce:	e01a      	b.n	8008006 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8007fd8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8007fdc:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	695b      	ldr	r3, [r3, #20]
 8007fec:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	0e1b      	lsrs	r3, r3, #24
 800800a:	b2da      	uxtb	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8008010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008012:	0c1b      	lsrs	r3, r3, #16
 8008014:	b2da      	uxtb	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	0a1b      	lsrs	r3, r3, #8
 800801e:	b2da      	uxtb	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	091b      	lsrs	r3, r3, #4
 8008028:	b2db      	uxtb	r3, r3
 800802a:	f003 030f 	and.w	r3, r3, #15
 800802e:	b2da      	uxtb	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	b2db      	uxtb	r3, r3
 8008038:	f003 030f 	and.w	r3, r3, #15
 800803c:	b2da      	uxtb	r2, r3
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8008042:	6a3b      	ldr	r3, [r7, #32]
 8008044:	0e1b      	lsrs	r3, r3, #24
 8008046:	b2da      	uxtb	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	0c1b      	lsrs	r3, r3, #16
 8008050:	b2da      	uxtb	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	0a1b      	lsrs	r3, r3, #8
 800805a:	b2da      	uxtb	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	b2da      	uxtb	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	b2da      	uxtb	r2, r3
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	0e1b      	lsrs	r3, r3, #24
 8008074:	b2da      	uxtb	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	0c1b      	lsrs	r3, r3, #16
 800807e:	b2da      	uxtb	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	0a1b      	lsrs	r3, r3, #8
 8008088:	b2da      	uxtb	r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	0e1b      	lsrs	r3, r3, #24
 8008092:	b2da      	uxtb	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	0c1b      	lsrs	r3, r3, #16
 800809c:	b2da      	uxtb	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	372c      	adds	r7, #44	; 0x2c
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	58004000 	.word	0x58004000
 80080bc:	a94656b9 	.word	0xa94656b9

080080c0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	4a08      	ldr	r2, [pc, #32]	; (80080f0 <hci_init+0x30>)
 80080d0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80080d2:	4a08      	ldr	r2, [pc, #32]	; (80080f4 <hci_init+0x34>)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80080d8:	4806      	ldr	r0, [pc, #24]	; (80080f4 <hci_init+0x34>)
 80080da:	f000 f979 	bl	80083d0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 f8da 	bl	800829c <TlInit>

  return;
 80080e8:	bf00      	nop
}
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	200003b0 	.word	0x200003b0
 80080f4:	20000388 	.word	0x20000388

080080f8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80080fe:	4822      	ldr	r0, [pc, #136]	; (8008188 <hci_user_evt_proc+0x90>)
 8008100:	f000 fd32 	bl	8008b68 <LST_is_empty>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d12b      	bne.n	8008162 <hci_user_evt_proc+0x6a>
 800810a:	4b20      	ldr	r3, [pc, #128]	; (800818c <hci_user_evt_proc+0x94>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d027      	beq.n	8008162 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008112:	f107 030c 	add.w	r3, r7, #12
 8008116:	4619      	mov	r1, r3
 8008118:	481b      	ldr	r0, [pc, #108]	; (8008188 <hci_user_evt_proc+0x90>)
 800811a:	f000 fdb4 	bl	8008c86 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800811e:	4b1c      	ldr	r3, [pc, #112]	; (8008190 <hci_user_evt_proc+0x98>)
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00c      	beq.n	8008140 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800812a:	2301      	movs	r3, #1
 800812c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800812e:	4b18      	ldr	r3, [pc, #96]	; (8008190 <hci_user_evt_proc+0x98>)
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	1d3a      	adds	r2, r7, #4
 8008134:	4610      	mov	r0, r2
 8008136:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008138:	793a      	ldrb	r2, [r7, #4]
 800813a:	4b14      	ldr	r3, [pc, #80]	; (800818c <hci_user_evt_proc+0x94>)
 800813c:	701a      	strb	r2, [r3, #0]
 800813e:	e002      	b.n	8008146 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008140:	4b12      	ldr	r3, [pc, #72]	; (800818c <hci_user_evt_proc+0x94>)
 8008142:	2201      	movs	r2, #1
 8008144:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008146:	4b11      	ldr	r3, [pc, #68]	; (800818c <hci_user_evt_proc+0x94>)
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d004      	beq.n	8008158 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4618      	mov	r0, r3
 8008152:	f000 fc0d 	bl	8008970 <TL_MM_EvtDone>
 8008156:	e004      	b.n	8008162 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	4619      	mov	r1, r3
 800815c:	480a      	ldr	r0, [pc, #40]	; (8008188 <hci_user_evt_proc+0x90>)
 800815e:	f000 fd25 	bl	8008bac <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008162:	4809      	ldr	r0, [pc, #36]	; (8008188 <hci_user_evt_proc+0x90>)
 8008164:	f000 fd00 	bl	8008b68 <LST_is_empty>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d107      	bne.n	800817e <hci_user_evt_proc+0x86>
 800816e:	4b07      	ldr	r3, [pc, #28]	; (800818c <hci_user_evt_proc+0x94>)
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008176:	4804      	ldr	r0, [pc, #16]	; (8008188 <hci_user_evt_proc+0x90>)
 8008178:	f000 ff58 	bl	800902c <hci_notify_asynch_evt>
  }


  return;
 800817c:	bf00      	nop
 800817e:	bf00      	nop
}
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	2000004c 	.word	0x2000004c
 800818c:	20000058 	.word	0x20000058
 8008190:	20000388 	.word	0x20000388

08008194 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b088      	sub	sp, #32
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	460b      	mov	r3, r1
 800819e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80081a0:	2000      	movs	r0, #0
 80081a2:	f000 f8d1 	bl	8008348 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80081a6:	2300      	movs	r3, #0
 80081a8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	885b      	ldrh	r3, [r3, #2]
 80081ae:	b21b      	sxth	r3, r3
 80081b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081b4:	b21a      	sxth	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	881b      	ldrh	r3, [r3, #0]
 80081ba:	029b      	lsls	r3, r3, #10
 80081bc:	b21b      	sxth	r3, r3
 80081be:	4313      	orrs	r3, r2
 80081c0:	b21b      	sxth	r3, r3
 80081c2:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80081c4:	4b33      	ldr	r3, [pc, #204]	; (8008294 <hci_send_req+0x100>)
 80081c6:	2201      	movs	r2, #1
 80081c8:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	b2d9      	uxtb	r1, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	689a      	ldr	r2, [r3, #8]
 80081d4:	8bbb      	ldrh	r3, [r7, #28]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 f890 	bl	80082fc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80081dc:	e04e      	b.n	800827c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80081de:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80081e2:	f000 ff3a 	bl	800905a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80081e6:	e043      	b.n	8008270 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80081e8:	f107 030c 	add.w	r3, r7, #12
 80081ec:	4619      	mov	r1, r3
 80081ee:	482a      	ldr	r0, [pc, #168]	; (8008298 <hci_send_req+0x104>)
 80081f0:	f000 fd49 	bl	8008c86 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	7a5b      	ldrb	r3, [r3, #9]
 80081f8:	2b0f      	cmp	r3, #15
 80081fa:	d114      	bne.n	8008226 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	330b      	adds	r3, #11
 8008200:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	885b      	ldrh	r3, [r3, #2]
 8008206:	b29b      	uxth	r3, r3
 8008208:	8bba      	ldrh	r2, [r7, #28]
 800820a:	429a      	cmp	r2, r3
 800820c:	d104      	bne.n	8008218 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	7812      	ldrb	r2, [r2, #0]
 8008216:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	785b      	ldrb	r3, [r3, #1]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d027      	beq.n	8008270 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008220:	2301      	movs	r3, #1
 8008222:	77fb      	strb	r3, [r7, #31]
 8008224:	e024      	b.n	8008270 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	330b      	adds	r3, #11
 800822a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008232:	b29b      	uxth	r3, r3
 8008234:	8bba      	ldrh	r2, [r7, #28]
 8008236:	429a      	cmp	r2, r3
 8008238:	d114      	bne.n	8008264 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	7a9b      	ldrb	r3, [r3, #10]
 800823e:	3b03      	subs	r3, #3
 8008240:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	695a      	ldr	r2, [r3, #20]
 8008246:	7dfb      	ldrb	r3, [r7, #23]
 8008248:	429a      	cmp	r2, r3
 800824a:	bfa8      	it	ge
 800824c:	461a      	movge	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6918      	ldr	r0, [r3, #16]
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	1cd9      	adds	r1, r3, #3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	461a      	mov	r2, r3
 8008260:	f001 feba 	bl	8009fd8 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d001      	beq.n	8008270 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800826c:	2301      	movs	r3, #1
 800826e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008270:	4809      	ldr	r0, [pc, #36]	; (8008298 <hci_send_req+0x104>)
 8008272:	f000 fc79 	bl	8008b68 <LST_is_empty>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d0b5      	beq.n	80081e8 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800827c:	7ffb      	ldrb	r3, [r7, #31]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d0ad      	beq.n	80081de <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008282:	2001      	movs	r0, #1
 8008284:	f000 f860 	bl	8008348 <NotifyCmdStatus>

  return 0;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3720      	adds	r7, #32
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	200003b4 	.word	0x200003b4
 8008298:	200003a8 	.word	0x200003a8

0800829c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80082a4:	480f      	ldr	r0, [pc, #60]	; (80082e4 <TlInit+0x48>)
 80082a6:	f000 fc4f 	bl	8008b48 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80082aa:	4a0f      	ldr	r2, [pc, #60]	; (80082e8 <TlInit+0x4c>)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80082b0:	480e      	ldr	r0, [pc, #56]	; (80082ec <TlInit+0x50>)
 80082b2:	f000 fc49 	bl	8008b48 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80082b6:	4b0e      	ldr	r3, [pc, #56]	; (80082f0 <TlInit+0x54>)
 80082b8:	2201      	movs	r2, #1
 80082ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80082bc:	4b0d      	ldr	r3, [pc, #52]	; (80082f4 <TlInit+0x58>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00a      	beq.n	80082da <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80082c8:	4b0b      	ldr	r3, [pc, #44]	; (80082f8 <TlInit+0x5c>)
 80082ca:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80082cc:	4b09      	ldr	r3, [pc, #36]	; (80082f4 <TlInit+0x58>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f107 0208 	add.w	r2, r7, #8
 80082d4:	4610      	mov	r0, r2
 80082d6:	4798      	blx	r3
  }

  return;
 80082d8:	bf00      	nop
 80082da:	bf00      	nop
}
 80082dc:	3718      	adds	r7, #24
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	200003a8 	.word	0x200003a8
 80082e8:	20000054 	.word	0x20000054
 80082ec:	2000004c 	.word	0x2000004c
 80082f0:	20000058 	.word	0x20000058
 80082f4:	20000388 	.word	0x20000388
 80082f8:	08008389 	.word	0x08008389

080082fc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	4603      	mov	r3, r0
 8008304:	603a      	str	r2, [r7, #0]
 8008306:	80fb      	strh	r3, [r7, #6]
 8008308:	460b      	mov	r3, r1
 800830a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800830c:	4b0c      	ldr	r3, [pc, #48]	; (8008340 <SendCmd+0x44>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	88fa      	ldrh	r2, [r7, #6]
 8008312:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8008316:	4b0a      	ldr	r3, [pc, #40]	; (8008340 <SendCmd+0x44>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	797a      	ldrb	r2, [r7, #5]
 800831c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800831e:	4b08      	ldr	r3, [pc, #32]	; (8008340 <SendCmd+0x44>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	330c      	adds	r3, #12
 8008324:	797a      	ldrb	r2, [r7, #5]
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	4618      	mov	r0, r3
 800832a:	f001 fe55 	bl	8009fd8 <memcpy>

  hciContext.io.Send(0,0);
 800832e:	4b05      	ldr	r3, [pc, #20]	; (8008344 <SendCmd+0x48>)
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	2100      	movs	r1, #0
 8008334:	2000      	movs	r0, #0
 8008336:	4798      	blx	r3

  return;
 8008338:	bf00      	nop
}
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	20000054 	.word	0x20000054
 8008344:	20000388 	.word	0x20000388

08008348 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	4603      	mov	r3, r0
 8008350:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008352:	79fb      	ldrb	r3, [r7, #7]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d108      	bne.n	800836a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008358:	4b0a      	ldr	r3, [pc, #40]	; (8008384 <NotifyCmdStatus+0x3c>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00d      	beq.n	800837c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008360:	4b08      	ldr	r3, [pc, #32]	; (8008384 <NotifyCmdStatus+0x3c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2000      	movs	r0, #0
 8008366:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008368:	e008      	b.n	800837c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800836a:	4b06      	ldr	r3, [pc, #24]	; (8008384 <NotifyCmdStatus+0x3c>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d004      	beq.n	800837c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008372:	4b04      	ldr	r3, [pc, #16]	; (8008384 <NotifyCmdStatus+0x3c>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2001      	movs	r0, #1
 8008378:	4798      	blx	r3
  return;
 800837a:	bf00      	nop
 800837c:	bf00      	nop
}
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	200003b0 	.word	0x200003b0

08008388 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	7a5b      	ldrb	r3, [r3, #9]
 8008394:	2b0f      	cmp	r3, #15
 8008396:	d003      	beq.n	80083a0 <TlEvtReceived+0x18>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	7a5b      	ldrb	r3, [r3, #9]
 800839c:	2b0e      	cmp	r3, #14
 800839e:	d107      	bne.n	80083b0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80083a0:	6879      	ldr	r1, [r7, #4]
 80083a2:	4809      	ldr	r0, [pc, #36]	; (80083c8 <TlEvtReceived+0x40>)
 80083a4:	f000 fc28 	bl	8008bf8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80083a8:	2000      	movs	r0, #0
 80083aa:	f000 fe4b 	bl	8009044 <hci_cmd_resp_release>
 80083ae:	e006      	b.n	80083be <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	4806      	ldr	r0, [pc, #24]	; (80083cc <TlEvtReceived+0x44>)
 80083b4:	f000 fc20 	bl	8008bf8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80083b8:	4804      	ldr	r0, [pc, #16]	; (80083cc <TlEvtReceived+0x44>)
 80083ba:	f000 fe37 	bl	800902c <hci_notify_asynch_evt>
  }

  return;
 80083be:	bf00      	nop
}
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	200003a8 	.word	0x200003a8
 80083cc:	2000004c 	.word	0x2000004c

080083d0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a05      	ldr	r2, [pc, #20]	; (80083f0 <hci_register_io_bus+0x20>)
 80083dc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a04      	ldr	r2, [pc, #16]	; (80083f4 <hci_register_io_bus+0x24>)
 80083e2:	611a      	str	r2, [r3, #16]

  return;
 80083e4:	bf00      	nop
}
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	080086e9 	.word	0x080086e9
 80083f4:	08008751 	.word	0x08008751

080083f8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	4a08      	ldr	r2, [pc, #32]	; (8008428 <shci_init+0x30>)
 8008408:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800840a:	4a08      	ldr	r2, [pc, #32]	; (800842c <shci_init+0x34>)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8008410:	4806      	ldr	r0, [pc, #24]	; (800842c <shci_init+0x34>)
 8008412:	f000 f915 	bl	8008640 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4618      	mov	r0, r3
 800841c:	f000 f898 	bl	8008550 <TlInit>

  return;
 8008420:	bf00      	nop
}
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}
 8008428:	200003d8 	.word	0x200003d8
 800842c:	200003b8 	.word	0x200003b8

08008430 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008436:	4822      	ldr	r0, [pc, #136]	; (80084c0 <shci_user_evt_proc+0x90>)
 8008438:	f000 fb96 	bl	8008b68 <LST_is_empty>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d12b      	bne.n	800849a <shci_user_evt_proc+0x6a>
 8008442:	4b20      	ldr	r3, [pc, #128]	; (80084c4 <shci_user_evt_proc+0x94>)
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d027      	beq.n	800849a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800844a:	f107 030c 	add.w	r3, r7, #12
 800844e:	4619      	mov	r1, r3
 8008450:	481b      	ldr	r0, [pc, #108]	; (80084c0 <shci_user_evt_proc+0x90>)
 8008452:	f000 fc18 	bl	8008c86 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8008456:	4b1c      	ldr	r3, [pc, #112]	; (80084c8 <shci_user_evt_proc+0x98>)
 8008458:	69db      	ldr	r3, [r3, #28]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00c      	beq.n	8008478 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8008462:	2301      	movs	r3, #1
 8008464:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008466:	4b18      	ldr	r3, [pc, #96]	; (80084c8 <shci_user_evt_proc+0x98>)
 8008468:	69db      	ldr	r3, [r3, #28]
 800846a:	1d3a      	adds	r2, r7, #4
 800846c:	4610      	mov	r0, r2
 800846e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8008470:	793a      	ldrb	r2, [r7, #4]
 8008472:	4b14      	ldr	r3, [pc, #80]	; (80084c4 <shci_user_evt_proc+0x94>)
 8008474:	701a      	strb	r2, [r3, #0]
 8008476:	e002      	b.n	800847e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008478:	4b12      	ldr	r3, [pc, #72]	; (80084c4 <shci_user_evt_proc+0x94>)
 800847a:	2201      	movs	r2, #1
 800847c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800847e:	4b11      	ldr	r3, [pc, #68]	; (80084c4 <shci_user_evt_proc+0x94>)
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d004      	beq.n	8008490 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	4618      	mov	r0, r3
 800848a:	f000 fa71 	bl	8008970 <TL_MM_EvtDone>
 800848e:	e004      	b.n	800849a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	4619      	mov	r1, r3
 8008494:	480a      	ldr	r0, [pc, #40]	; (80084c0 <shci_user_evt_proc+0x90>)
 8008496:	f000 fb89 	bl	8008bac <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800849a:	4809      	ldr	r0, [pc, #36]	; (80084c0 <shci_user_evt_proc+0x90>)
 800849c:	f000 fb64 	bl	8008b68 <LST_is_empty>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d107      	bne.n	80084b6 <shci_user_evt_proc+0x86>
 80084a6:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <shci_user_evt_proc+0x94>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d003      	beq.n	80084b6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80084ae:	4804      	ldr	r0, [pc, #16]	; (80084c0 <shci_user_evt_proc+0x90>)
 80084b0:	f7f8 fa62 	bl	8000978 <shci_notify_asynch_evt>
  }


  return;
 80084b4:	bf00      	nop
 80084b6:	bf00      	nop
}
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	2000005c 	.word	0x2000005c
 80084c4:	2000006c 	.word	0x2000006c
 80084c8:	200003b8 	.word	0x200003b8

080084cc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60ba      	str	r2, [r7, #8]
 80084d4:	607b      	str	r3, [r7, #4]
 80084d6:	4603      	mov	r3, r0
 80084d8:	81fb      	strh	r3, [r7, #14]
 80084da:	460b      	mov	r3, r1
 80084dc:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80084de:	2000      	movs	r0, #0
 80084e0:	f000 f868 	bl	80085b4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80084e4:	4b17      	ldr	r3, [pc, #92]	; (8008544 <shci_send+0x78>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	89fa      	ldrh	r2, [r7, #14]
 80084ea:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80084ee:	4b15      	ldr	r3, [pc, #84]	; (8008544 <shci_send+0x78>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	7b7a      	ldrb	r2, [r7, #13]
 80084f4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80084f6:	4b13      	ldr	r3, [pc, #76]	; (8008544 <shci_send+0x78>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	330c      	adds	r3, #12
 80084fc:	7b7a      	ldrb	r2, [r7, #13]
 80084fe:	68b9      	ldr	r1, [r7, #8]
 8008500:	4618      	mov	r0, r3
 8008502:	f001 fd69 	bl	8009fd8 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8008506:	4b10      	ldr	r3, [pc, #64]	; (8008548 <shci_send+0x7c>)
 8008508:	2201      	movs	r2, #1
 800850a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800850c:	4b0f      	ldr	r3, [pc, #60]	; (800854c <shci_send+0x80>)
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	2100      	movs	r1, #0
 8008512:	2000      	movs	r0, #0
 8008514:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008516:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800851a:	f7f8 fa44 	bl	80009a6 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f103 0008 	add.w	r0, r3, #8
 8008524:	4b07      	ldr	r3, [pc, #28]	; (8008544 <shci_send+0x78>)
 8008526:	6819      	ldr	r1, [r3, #0]
 8008528:	4b06      	ldr	r3, [pc, #24]	; (8008544 <shci_send+0x78>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	789b      	ldrb	r3, [r3, #2]
 800852e:	3303      	adds	r3, #3
 8008530:	461a      	mov	r2, r3
 8008532:	f001 fd51 	bl	8009fd8 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008536:	2001      	movs	r0, #1
 8008538:	f000 f83c 	bl	80085b4 <Cmd_SetStatus>

  return;
 800853c:	bf00      	nop
}
 800853e:	3710      	adds	r7, #16
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	20000068 	.word	0x20000068
 8008548:	200003dc 	.word	0x200003dc
 800854c:	200003b8 	.word	0x200003b8

08008550 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008558:	4a10      	ldr	r2, [pc, #64]	; (800859c <TlInit+0x4c>)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800855e:	4810      	ldr	r0, [pc, #64]	; (80085a0 <TlInit+0x50>)
 8008560:	f000 faf2 	bl	8008b48 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008564:	2001      	movs	r0, #1
 8008566:	f000 f825 	bl	80085b4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800856a:	4b0e      	ldr	r3, [pc, #56]	; (80085a4 <TlInit+0x54>)
 800856c:	2201      	movs	r2, #1
 800856e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008570:	4b0d      	ldr	r3, [pc, #52]	; (80085a8 <TlInit+0x58>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00c      	beq.n	8008592 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800857c:	4b0b      	ldr	r3, [pc, #44]	; (80085ac <TlInit+0x5c>)
 800857e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008580:	4b0b      	ldr	r3, [pc, #44]	; (80085b0 <TlInit+0x60>)
 8008582:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008584:	4b08      	ldr	r3, [pc, #32]	; (80085a8 <TlInit+0x58>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f107 020c 	add.w	r2, r7, #12
 800858c:	4610      	mov	r0, r2
 800858e:	4798      	blx	r3
  }

  return;
 8008590:	bf00      	nop
 8008592:	bf00      	nop
}
 8008594:	3718      	adds	r7, #24
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20000068 	.word	0x20000068
 80085a0:	2000005c 	.word	0x2000005c
 80085a4:	2000006c 	.word	0x2000006c
 80085a8:	200003b8 	.word	0x200003b8
 80085ac:	08008605 	.word	0x08008605
 80085b0:	0800861d 	.word	0x0800861d

080085b4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	4603      	mov	r3, r0
 80085bc:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80085be:	79fb      	ldrb	r3, [r7, #7]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10b      	bne.n	80085dc <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80085c4:	4b0d      	ldr	r3, [pc, #52]	; (80085fc <Cmd_SetStatus+0x48>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d003      	beq.n	80085d4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80085cc:	4b0b      	ldr	r3, [pc, #44]	; (80085fc <Cmd_SetStatus+0x48>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2000      	movs	r0, #0
 80085d2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80085d4:	4b0a      	ldr	r3, [pc, #40]	; (8008600 <Cmd_SetStatus+0x4c>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80085da:	e00b      	b.n	80085f4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80085dc:	4b08      	ldr	r3, [pc, #32]	; (8008600 <Cmd_SetStatus+0x4c>)
 80085de:	2201      	movs	r2, #1
 80085e0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80085e2:	4b06      	ldr	r3, [pc, #24]	; (80085fc <Cmd_SetStatus+0x48>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d004      	beq.n	80085f4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80085ea:	4b04      	ldr	r3, [pc, #16]	; (80085fc <Cmd_SetStatus+0x48>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2001      	movs	r0, #1
 80085f0:	4798      	blx	r3
  return;
 80085f2:	bf00      	nop
 80085f4:	bf00      	nop
}
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	200003d8 	.word	0x200003d8
 8008600:	20000064 	.word	0x20000064

08008604 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800860c:	2000      	movs	r0, #0
 800860e:	f7f8 f9bf 	bl	8000990 <shci_cmd_resp_release>

  return;
 8008612:	bf00      	nop
}
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8008624:	6879      	ldr	r1, [r7, #4]
 8008626:	4805      	ldr	r0, [pc, #20]	; (800863c <TlUserEvtReceived+0x20>)
 8008628:	f000 fae6 	bl	8008bf8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800862c:	4803      	ldr	r0, [pc, #12]	; (800863c <TlUserEvtReceived+0x20>)
 800862e:	f7f8 f9a3 	bl	8000978 <shci_notify_asynch_evt>

  return;
 8008632:	bf00      	nop
}
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	2000005c 	.word	0x2000005c

08008640 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a05      	ldr	r2, [pc, #20]	; (8008660 <shci_register_io_bus+0x20>)
 800864c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a04      	ldr	r2, [pc, #16]	; (8008664 <shci_register_io_bus+0x24>)
 8008652:	611a      	str	r2, [r3, #16]

  return;
 8008654:	bf00      	nop
}
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	080087fd 	.word	0x080087fd
 8008664:	08008851 	.word	0x08008851

08008668 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800866c:	f001 f900 	bl	8009870 <HW_IPCC_Enable>

  return;
 8008670:	bf00      	nop
}
 8008672:	bd80      	pop	{r7, pc}

08008674 <TL_Init>:


void TL_Init( void )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008678:	4b10      	ldr	r3, [pc, #64]	; (80086bc <TL_Init+0x48>)
 800867a:	4a11      	ldr	r2, [pc, #68]	; (80086c0 <TL_Init+0x4c>)
 800867c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800867e:	4b0f      	ldr	r3, [pc, #60]	; (80086bc <TL_Init+0x48>)
 8008680:	4a10      	ldr	r2, [pc, #64]	; (80086c4 <TL_Init+0x50>)
 8008682:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008684:	4b0d      	ldr	r3, [pc, #52]	; (80086bc <TL_Init+0x48>)
 8008686:	4a10      	ldr	r2, [pc, #64]	; (80086c8 <TL_Init+0x54>)
 8008688:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800868a:	4b0c      	ldr	r3, [pc, #48]	; (80086bc <TL_Init+0x48>)
 800868c:	4a0f      	ldr	r2, [pc, #60]	; (80086cc <TL_Init+0x58>)
 800868e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008690:	4b0a      	ldr	r3, [pc, #40]	; (80086bc <TL_Init+0x48>)
 8008692:	4a0f      	ldr	r2, [pc, #60]	; (80086d0 <TL_Init+0x5c>)
 8008694:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008696:	4b09      	ldr	r3, [pc, #36]	; (80086bc <TL_Init+0x48>)
 8008698:	4a0e      	ldr	r2, [pc, #56]	; (80086d4 <TL_Init+0x60>)
 800869a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800869c:	4b07      	ldr	r3, [pc, #28]	; (80086bc <TL_Init+0x48>)
 800869e:	4a0e      	ldr	r2, [pc, #56]	; (80086d8 <TL_Init+0x64>)
 80086a0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80086a2:	4b06      	ldr	r3, [pc, #24]	; (80086bc <TL_Init+0x48>)
 80086a4:	4a0d      	ldr	r2, [pc, #52]	; (80086dc <TL_Init+0x68>)
 80086a6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80086a8:	4b04      	ldr	r3, [pc, #16]	; (80086bc <TL_Init+0x48>)
 80086aa:	4a0d      	ldr	r2, [pc, #52]	; (80086e0 <TL_Init+0x6c>)
 80086ac:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80086ae:	4b03      	ldr	r3, [pc, #12]	; (80086bc <TL_Init+0x48>)
 80086b0:	4a0c      	ldr	r2, [pc, #48]	; (80086e4 <TL_Init+0x70>)
 80086b2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80086b4:	f001 f8f0 	bl	8009898 <HW_IPCC_Init>

  return;
 80086b8:	bf00      	nop
}
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	20030000 	.word	0x20030000
 80086c0:	20030028 	.word	0x20030028
 80086c4:	20030048 	.word	0x20030048
 80086c8:	20030058 	.word	0x20030058
 80086cc:	20030068 	.word	0x20030068
 80086d0:	20030070 	.word	0x20030070
 80086d4:	20030078 	.word	0x20030078
 80086d8:	20030080 	.word	0x20030080
 80086dc:	2003009c 	.word	0x2003009c
 80086e0:	200300a0 	.word	0x200300a0
 80086e4:	200300ac 	.word	0x200300ac

080086e8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80086f4:	4811      	ldr	r0, [pc, #68]	; (800873c <TL_BLE_Init+0x54>)
 80086f6:	f000 fa27 	bl	8008b48 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80086fa:	4b11      	ldr	r3, [pc, #68]	; (8008740 <TL_BLE_Init+0x58>)
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	689a      	ldr	r2, [r3, #8]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	68da      	ldr	r2, [r3, #12]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	4a0c      	ldr	r2, [pc, #48]	; (8008744 <TL_BLE_Init+0x5c>)
 8008714:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	4a08      	ldr	r2, [pc, #32]	; (800873c <TL_BLE_Init+0x54>)
 800871a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800871c:	f001 f8d2 	bl	80098c4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a08      	ldr	r2, [pc, #32]	; (8008748 <TL_BLE_Init+0x60>)
 8008726:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	4a07      	ldr	r2, [pc, #28]	; (800874c <TL_BLE_Init+0x64>)
 800872e:	6013      	str	r3, [r2, #0]

  return 0;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	200300c8 	.word	0x200300c8
 8008740:	20030000 	.word	0x20030000
 8008744:	20030a58 	.word	0x20030a58
 8008748:	200003e8 	.word	0x200003e8
 800874c:	200003ec 	.word	0x200003ec

08008750 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	460b      	mov	r3, r1
 800875a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800875c:	4b09      	ldr	r3, [pc, #36]	; (8008784 <TL_BLE_SendCmd+0x34>)
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2201      	movs	r2, #1
 8008764:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008766:	4b07      	ldr	r3, [pc, #28]	; (8008784 <TL_BLE_SendCmd+0x34>)
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4619      	mov	r1, r3
 800876e:	2001      	movs	r0, #1
 8008770:	f000 f96c 	bl	8008a4c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008774:	f001 f8b0 	bl	80098d8 <HW_IPCC_BLE_SendCmd>

  return 0;
 8008778:	2300      	movs	r3, #0
}
 800877a:	4618      	mov	r0, r3
 800877c:	3708      	adds	r7, #8
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
 8008782:	bf00      	nop
 8008784:	20030000 	.word	0x20030000

08008788 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800878e:	e01c      	b.n	80087ca <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008790:	1d3b      	adds	r3, r7, #4
 8008792:	4619      	mov	r1, r3
 8008794:	4812      	ldr	r0, [pc, #72]	; (80087e0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008796:	f000 fa76 	bl	8008c86 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	7a5b      	ldrb	r3, [r3, #9]
 800879e:	2b0f      	cmp	r3, #15
 80087a0:	d003      	beq.n	80087aa <HW_IPCC_BLE_RxEvtNot+0x22>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	7a5b      	ldrb	r3, [r3, #9]
 80087a6:	2b0e      	cmp	r3, #14
 80087a8:	d105      	bne.n	80087b6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	4619      	mov	r1, r3
 80087ae:	2002      	movs	r0, #2
 80087b0:	f000 f94c 	bl	8008a4c <OutputDbgTrace>
 80087b4:	e004      	b.n	80087c0 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4619      	mov	r1, r3
 80087ba:	2003      	movs	r0, #3
 80087bc:	f000 f946 	bl	8008a4c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80087c0:	4b08      	ldr	r3, [pc, #32]	; (80087e4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	4610      	mov	r0, r2
 80087c8:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80087ca:	4805      	ldr	r0, [pc, #20]	; (80087e0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80087cc:	f000 f9cc 	bl	8008b68 <LST_is_empty>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d0dc      	beq.n	8008790 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80087d6:	bf00      	nop
}
 80087d8:	3708      	adds	r7, #8
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	200300c8 	.word	0x200300c8
 80087e4:	200003e8 	.word	0x200003e8

080087e8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80087ec:	4b02      	ldr	r3, [pc, #8]	; (80087f8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4798      	blx	r3

  return;
 80087f2:	bf00      	nop
}
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	200003ec 	.word	0x200003ec

080087fc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8008808:	480d      	ldr	r0, [pc, #52]	; (8008840 <TL_SYS_Init+0x44>)
 800880a:	f000 f99d 	bl	8008b48 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800880e:	4b0d      	ldr	r3, [pc, #52]	; (8008844 <TL_SYS_Init+0x48>)
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	689a      	ldr	r2, [r3, #8]
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	4a08      	ldr	r2, [pc, #32]	; (8008840 <TL_SYS_Init+0x44>)
 8008820:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8008822:	f001 f87b 	bl	800991c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a07      	ldr	r2, [pc, #28]	; (8008848 <TL_SYS_Init+0x4c>)
 800882c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	4a06      	ldr	r2, [pc, #24]	; (800884c <TL_SYS_Init+0x50>)
 8008834:	6013      	str	r3, [r2, #0]

  return 0;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	200300d0 	.word	0x200300d0
 8008844:	20030000 	.word	0x20030000
 8008848:	200003f0 	.word	0x200003f0
 800884c:	200003f4 	.word	0x200003f4

08008850 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	460b      	mov	r3, r1
 800885a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800885c:	4b09      	ldr	r3, [pc, #36]	; (8008884 <TL_SYS_SendCmd+0x34>)
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2210      	movs	r2, #16
 8008864:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008866:	4b07      	ldr	r3, [pc, #28]	; (8008884 <TL_SYS_SendCmd+0x34>)
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4619      	mov	r1, r3
 800886e:	2004      	movs	r0, #4
 8008870:	f000 f8ec 	bl	8008a4c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008874:	f001 f85c 	bl	8009930 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3708      	adds	r7, #8
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	20030000 	.word	0x20030000

08008888 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800888c:	4b07      	ldr	r3, [pc, #28]	; (80088ac <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4619      	mov	r1, r3
 8008894:	2005      	movs	r0, #5
 8008896:	f000 f8d9 	bl	8008a4c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800889a:	4b05      	ldr	r3, [pc, #20]	; (80088b0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a03      	ldr	r2, [pc, #12]	; (80088ac <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80088a0:	68d2      	ldr	r2, [r2, #12]
 80088a2:	6812      	ldr	r2, [r2, #0]
 80088a4:	4610      	mov	r0, r2
 80088a6:	4798      	blx	r3

  return;
 80088a8:	bf00      	nop
}
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	20030000 	.word	0x20030000
 80088b0:	200003f0 	.word	0x200003f0

080088b4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80088ba:	e00e      	b.n	80088da <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80088bc:	1d3b      	adds	r3, r7, #4
 80088be:	4619      	mov	r1, r3
 80088c0:	480b      	ldr	r0, [pc, #44]	; (80088f0 <HW_IPCC_SYS_EvtNot+0x3c>)
 80088c2:	f000 f9e0 	bl	8008c86 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4619      	mov	r1, r3
 80088ca:	2006      	movs	r0, #6
 80088cc:	f000 f8be 	bl	8008a4c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80088d0:	4b08      	ldr	r3, [pc, #32]	; (80088f4 <HW_IPCC_SYS_EvtNot+0x40>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	4610      	mov	r0, r2
 80088d8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80088da:	4805      	ldr	r0, [pc, #20]	; (80088f0 <HW_IPCC_SYS_EvtNot+0x3c>)
 80088dc:	f000 f944 	bl	8008b68 <LST_is_empty>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d0ea      	beq.n	80088bc <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80088e6:	bf00      	nop
}
 80088e8:	3708      	adds	r7, #8
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	200300d0 	.word	0x200300d0
 80088f4:	200003f4 	.word	0x200003f4

080088f8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8008900:	4817      	ldr	r0, [pc, #92]	; (8008960 <TL_MM_Init+0x68>)
 8008902:	f000 f921 	bl	8008b48 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8008906:	4817      	ldr	r0, [pc, #92]	; (8008964 <TL_MM_Init+0x6c>)
 8008908:	f000 f91e 	bl	8008b48 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800890c:	4b16      	ldr	r3, [pc, #88]	; (8008968 <TL_MM_Init+0x70>)
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	4a16      	ldr	r2, [pc, #88]	; (800896c <TL_MM_Init+0x74>)
 8008912:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8008914:	4b15      	ldr	r3, [pc, #84]	; (800896c <TL_MM_Init+0x74>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	6892      	ldr	r2, [r2, #8]
 800891c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800891e:	4b13      	ldr	r3, [pc, #76]	; (800896c <TL_MM_Init+0x74>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	68d2      	ldr	r2, [r2, #12]
 8008926:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8008928:	4b10      	ldr	r3, [pc, #64]	; (800896c <TL_MM_Init+0x74>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a0c      	ldr	r2, [pc, #48]	; (8008960 <TL_MM_Init+0x68>)
 800892e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8008930:	4b0e      	ldr	r3, [pc, #56]	; (800896c <TL_MM_Init+0x74>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	6812      	ldr	r2, [r2, #0]
 8008938:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800893a:	4b0c      	ldr	r3, [pc, #48]	; (800896c <TL_MM_Init+0x74>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	6852      	ldr	r2, [r2, #4]
 8008942:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008944:	4b09      	ldr	r3, [pc, #36]	; (800896c <TL_MM_Init+0x74>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	6912      	ldr	r2, [r2, #16]
 800894c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800894e:	4b07      	ldr	r3, [pc, #28]	; (800896c <TL_MM_Init+0x74>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	6952      	ldr	r2, [r2, #20]
 8008956:	619a      	str	r2, [r3, #24]

  return;
 8008958:	bf00      	nop
}
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	200300b8 	.word	0x200300b8
 8008964:	200003e0 	.word	0x200003e0
 8008968:	20030000 	.word	0x20030000
 800896c:	200003f8 	.word	0x200003f8

08008970 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008978:	6879      	ldr	r1, [r7, #4]
 800897a:	4807      	ldr	r0, [pc, #28]	; (8008998 <TL_MM_EvtDone+0x28>)
 800897c:	f000 f93c 	bl	8008bf8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008980:	6879      	ldr	r1, [r7, #4]
 8008982:	2000      	movs	r0, #0
 8008984:	f000 f862 	bl	8008a4c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008988:	4804      	ldr	r0, [pc, #16]	; (800899c <TL_MM_EvtDone+0x2c>)
 800898a:	f000 fff7 	bl	800997c <HW_IPCC_MM_SendFreeBuf>

  return;
 800898e:	bf00      	nop
}
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	200003e0 	.word	0x200003e0
 800899c:	080089a1 	.word	0x080089a1

080089a0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80089a6:	e00c      	b.n	80089c2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80089a8:	1d3b      	adds	r3, r7, #4
 80089aa:	4619      	mov	r1, r3
 80089ac:	480a      	ldr	r0, [pc, #40]	; (80089d8 <SendFreeBuf+0x38>)
 80089ae:	f000 f96a 	bl	8008c86 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80089b2:	4b0a      	ldr	r3, [pc, #40]	; (80089dc <SendFreeBuf+0x3c>)
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	4611      	mov	r1, r2
 80089bc:	4618      	mov	r0, r3
 80089be:	f000 f91b 	bl	8008bf8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80089c2:	4805      	ldr	r0, [pc, #20]	; (80089d8 <SendFreeBuf+0x38>)
 80089c4:	f000 f8d0 	bl	8008b68 <LST_is_empty>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d0ec      	beq.n	80089a8 <SendFreeBuf+0x8>
  }

  return;
 80089ce:	bf00      	nop
}
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	200003e0 	.word	0x200003e0
 80089dc:	20030000 	.word	0x20030000

080089e0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80089e4:	4805      	ldr	r0, [pc, #20]	; (80089fc <TL_TRACES_Init+0x1c>)
 80089e6:	f000 f8af 	bl	8008b48 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80089ea:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <TL_TRACES_Init+0x20>)
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	4a03      	ldr	r2, [pc, #12]	; (80089fc <TL_TRACES_Init+0x1c>)
 80089f0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80089f2:	f000 fff9 	bl	80099e8 <HW_IPCC_TRACES_Init>

  return;
 80089f6:	bf00      	nop
}
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	200300c0 	.word	0x200300c0
 8008a00:	20030000 	.word	0x20030000

08008a04 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008a0a:	e008      	b.n	8008a1e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008a0c:	1d3b      	adds	r3, r7, #4
 8008a0e:	4619      	mov	r1, r3
 8008a10:	4808      	ldr	r0, [pc, #32]	; (8008a34 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008a12:	f000 f938 	bl	8008c86 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 f80d 	bl	8008a38 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008a1e:	4805      	ldr	r0, [pc, #20]	; (8008a34 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008a20:	f000 f8a2 	bl	8008b68 <LST_is_empty>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d0f0      	beq.n	8008a0c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008a2a:	bf00      	nop
}
 8008a2c:	3708      	adds	r7, #8
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop
 8008a34:	200300c0 	.word	0x200300c0

08008a38 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	4603      	mov	r3, r0
 8008a54:	6039      	str	r1, [r7, #0]
 8008a56:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008a58:	79fb      	ldrb	r3, [r7, #7]
 8008a5a:	2b06      	cmp	r3, #6
 8008a5c:	d845      	bhi.n	8008aea <OutputDbgTrace+0x9e>
 8008a5e:	a201      	add	r2, pc, #4	; (adr r2, 8008a64 <OutputDbgTrace+0x18>)
 8008a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a64:	08008a81 	.word	0x08008a81
 8008a68:	08008aa5 	.word	0x08008aa5
 8008a6c:	08008aab 	.word	0x08008aab
 8008a70:	08008abf 	.word	0x08008abf
 8008a74:	08008acb 	.word	0x08008acb
 8008a78:	08008ad1 	.word	0x08008ad1
 8008a7c:	08008adf 	.word	0x08008adf
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	7a5b      	ldrb	r3, [r3, #9]
 8008a88:	2bff      	cmp	r3, #255	; 0xff
 8008a8a:	d005      	beq.n	8008a98 <OutputDbgTrace+0x4c>
 8008a8c:	2bff      	cmp	r3, #255	; 0xff
 8008a8e:	dc05      	bgt.n	8008a9c <OutputDbgTrace+0x50>
 8008a90:	2b0e      	cmp	r3, #14
 8008a92:	d005      	beq.n	8008aa0 <OutputDbgTrace+0x54>
 8008a94:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008a96:	e001      	b.n	8008a9c <OutputDbgTrace+0x50>
          break;
 8008a98:	bf00      	nop
 8008a9a:	e027      	b.n	8008aec <OutputDbgTrace+0xa0>
          break;
 8008a9c:	bf00      	nop
 8008a9e:	e025      	b.n	8008aec <OutputDbgTrace+0xa0>
          break;
 8008aa0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008aa2:	e023      	b.n	8008aec <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008aa8:	e020      	b.n	8008aec <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	7a5b      	ldrb	r3, [r3, #9]
 8008ab2:	2b0e      	cmp	r3, #14
 8008ab4:	d001      	beq.n	8008aba <OutputDbgTrace+0x6e>
 8008ab6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008ab8:	e000      	b.n	8008abc <OutputDbgTrace+0x70>
          break;
 8008aba:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008abc:	e016      	b.n	8008aec <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	7a5b      	ldrb	r3, [r3, #9]
 8008ac6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008ac8:	e010      	b.n	8008aec <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008ace:	e00d      	b.n	8008aec <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	7a5b      	ldrb	r3, [r3, #9]
 8008ad8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008ada:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008adc:	e006      	b.n	8008aec <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	7a5b      	ldrb	r3, [r3, #9]
 8008ae6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008ae8:	e000      	b.n	8008aec <OutputDbgTrace+0xa0>

    default:
      break;
 8008aea:	bf00      	nop
  }

  return;
 8008aec:	bf00      	nop
}
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008b02:	4b0f      	ldr	r3, [pc, #60]	; (8008b40 <OTP_Read+0x48>)
 8008b04:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008b06:	e002      	b.n	8008b0e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	3b08      	subs	r3, #8
 8008b0c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	3307      	adds	r3, #7
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	79fa      	ldrb	r2, [r7, #7]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d003      	beq.n	8008b22 <OTP_Read+0x2a>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	4a09      	ldr	r2, [pc, #36]	; (8008b44 <OTP_Read+0x4c>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d1f2      	bne.n	8008b08 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3307      	adds	r3, #7
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	79fa      	ldrb	r2, [r7, #7]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d001      	beq.n	8008b32 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008b32:	68fb      	ldr	r3, [r7, #12]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3714      	adds	r7, #20
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr
 8008b40:	1fff73f8 	.word	0x1fff73f8
 8008b44:	1fff7000 	.word	0x1fff7000

08008b48 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	605a      	str	r2, [r3, #4]
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b70:	f3ef 8310 	mrs	r3, PRIMASK
 8008b74:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b76:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008b78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b7a:	b672      	cpsid	i
}
 8008b7c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	429a      	cmp	r2, r3
 8008b86:	d102      	bne.n	8008b8e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	75fb      	strb	r3, [r7, #23]
 8008b8c:	e001      	b.n	8008b92 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	75fb      	strb	r3, [r7, #23]
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	f383 8810 	msr	PRIMASK, r3
}
 8008b9c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	371c      	adds	r7, #28
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr

08008bac <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8008bba:	60fb      	str	r3, [r7, #12]
  return(result);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008bbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008bc0:	b672      	cpsid	i
}
 8008bc2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	683a      	ldr	r2, [r7, #0]
 8008bd6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	605a      	str	r2, [r3, #4]
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	f383 8810 	msr	PRIMASK, r3
}
 8008bea:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008bec:	bf00      	nop
 8008bee:	371c      	adds	r7, #28
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b087      	sub	sp, #28
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c02:	f3ef 8310 	mrs	r3, PRIMASK
 8008c06:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c08:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008c0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c0c:	b672      	cpsid	i
}
 8008c0e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	685a      	ldr	r2, [r3, #4]
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	683a      	ldr	r2, [r7, #0]
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	f383 8810 	msr	PRIMASK, r3
}
 8008c36:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008c38:	bf00      	nop
 8008c3a:	371c      	adds	r7, #28
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b087      	sub	sp, #28
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c50:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c52:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008c54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c56:	b672      	cpsid	i
}
 8008c58:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	6812      	ldr	r2, [r2, #0]
 8008c62:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	6852      	ldr	r2, [r2, #4]
 8008c6c:	605a      	str	r2, [r3, #4]
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	f383 8810 	msr	PRIMASK, r3
}
 8008c78:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008c7a:	bf00      	nop
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008c86:	b580      	push	{r7, lr}
 8008c88:	b086      	sub	sp, #24
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c90:	f3ef 8310 	mrs	r3, PRIMASK
 8008c94:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c96:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008c98:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c9a:	b672      	cpsid	i
}
 8008c9c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7ff ffca 	bl	8008c44 <LST_remove_node>
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	f383 8810 	msr	PRIMASK, r3
}
 8008cba:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008cbc:	bf00      	nop
 8008cbe:	3718      	adds	r7, #24
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <__NVIC_SystemReset>:
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008cc8:	f3bf 8f4f 	dsb	sy
}
 8008ccc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008cce:	4b06      	ldr	r3, [pc, #24]	; (8008ce8 <__NVIC_SystemReset+0x24>)
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008cd6:	4904      	ldr	r1, [pc, #16]	; (8008ce8 <__NVIC_SystemReset+0x24>)
 8008cd8:	4b04      	ldr	r3, [pc, #16]	; (8008cec <__NVIC_SystemReset+0x28>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008cde:	f3bf 8f4f 	dsb	sy
}
 8008ce2:	bf00      	nop
    __NOP();
 8008ce4:	bf00      	nop
 8008ce6:	e7fd      	b.n	8008ce4 <__NVIC_SystemReset+0x20>
 8008ce8:	e000ed00 	.word	0xe000ed00
 8008cec:	05fa0004 	.word	0x05fa0004

08008cf0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008cf4:	4b03      	ldr	r3, [pc, #12]	; (8008d04 <LL_FLASH_GetUDN+0x14>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	1fff7580 	.word	0x1fff7580

08008d08 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008d0c:	4b03      	ldr	r3, [pc, #12]	; (8008d1c <LL_FLASH_GetDeviceID+0x14>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	b2db      	uxtb	r3, r3
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	1fff7584 	.word	0x1fff7584

08008d20 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008d20:	b480      	push	{r7}
 8008d22:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008d24:	4b03      	ldr	r3, [pc, #12]	; (8008d34 <LL_FLASH_GetSTCompanyID+0x14>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	0a1b      	lsrs	r3, r3, #8
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr
 8008d34:	1fff7584 	.word	0x1fff7584

08008d38 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8008d38:	b5b0      	push	{r4, r5, r7, lr}
 8008d3a:	b090      	sub	sp, #64	; 0x40
 8008d3c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1<<CFG_TASK_INIT_TEMP, UTIL_SEQ_RFU, initTemp);
 8008d3e:	4a21      	ldr	r2, [pc, #132]	; (8008dc4 <APP_BLE_Init+0x8c>)
 8008d40:	2100      	movs	r1, #0
 8008d42:	2004      	movs	r0, #4
 8008d44:	f000 ffda 	bl	8009cfc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_UPDATE_TEMP, UTIL_SEQ_RFU, updateTemp);
 8008d48:	4a1f      	ldr	r2, [pc, #124]	; (8008dc8 <APP_BLE_Init+0x90>)
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	2008      	movs	r0, #8
 8008d4e:	f000 ffd5 	bl	8009cfc <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1<<CFG_TASK_INIT_TEMP, CFG_SCH_PRIO_0);
 8008d52:	2100      	movs	r1, #0
 8008d54:	2004      	movs	r0, #4
 8008d56:	f000 fff3 	bl	8009d40 <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008d5a:	4b1c      	ldr	r3, [pc, #112]	; (8008dcc <APP_BLE_Init+0x94>)
 8008d5c:	1d3c      	adds	r4, r7, #4
 8008d5e:	461d      	mov	r5, r3
 8008d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008d6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008d70:	c403      	stmia	r4!, {r0, r1}
 8008d72:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8008d74:	f000 f864 	bl	8008e40 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8008d78:	2101      	movs	r1, #1
 8008d7a:	2002      	movs	r0, #2
 8008d7c:	f000 fe5c 	bl	8009a38 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8008d80:	4a13      	ldr	r2, [pc, #76]	; (8008dd0 <APP_BLE_Init+0x98>)
 8008d82:	2100      	movs	r1, #0
 8008d84:	2002      	movs	r0, #2
 8008d86:	f000 ffb9 	bl	8009cfc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8008d8a:	1d3b      	adds	r3, r7, #4
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7ff f8a5 	bl	8007edc <SHCI_C2_BLE_Init>
 8008d92:	4603      	mov	r3, r0
 8008d94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 8008d98:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d001      	beq.n	8008da4 <APP_BLE_Init+0x6c>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8008da0:	f7f8 ff44 	bl	8001c2c <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8008da4:	f000 f862 	bl	8008e6c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8008da8:	f7ff f80c 	bl	8007dc4 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_BEACON_UPDATE_REQ_ID, UTIL_SEQ_RFU, Beacon_Update);
 8008dac:	4a09      	ldr	r2, [pc, #36]	; (8008dd4 <APP_BLE_Init+0x9c>)
 8008dae:	2100      	movs	r1, #0
 8008db0:	2001      	movs	r0, #1
 8008db2:	f000 ffa3 	bl	8009cfc <UTIL_SEQ_RegTask>
    EddystoneTLM_Process();
  }
  else if (CFG_BEACON_TYPE & CFG_IBEACON)
  {
    APP_DBG_MSG("Ibeacon advertise\n\r");
    IBeacon_Process();
 8008db6:	f000 fa71 	bl	800929c <IBeacon_Process>
  }
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8008dba:	bf00      	nop
}
 8008dbc:	3740      	adds	r7, #64	; 0x40
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bdb0      	pop	{r4, r5, r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	080092ed 	.word	0x080092ed
 8008dc8:	08009391 	.word	0x08009391
 8008dcc:	0800a048 	.word	0x0800a048
 8008dd0:	080080f9 	.word	0x080080f9
 8008dd4:	08008f41 	.word	0x08008f41

08008dd8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b087      	sub	sp, #28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	3301      	adds	r3, #1
 8008de4:	617b      	str	r3, [r7, #20]

  switch (p_event_pckt->evt)
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	2bff      	cmp	r3, #255	; 0xff
 8008dec:	d00e      	beq.n	8008e0c <SVCCTL_App_Notification+0x34>
 8008dee:	2bff      	cmp	r3, #255	; 0xff
 8008df0:	dc19      	bgt.n	8008e26 <SVCCTL_App_Notification+0x4e>
 8008df2:	2b05      	cmp	r3, #5
 8008df4:	d019      	beq.n	8008e2a <SVCCTL_App_Notification+0x52>
 8008df6:	2b3e      	cmp	r3, #62	; 0x3e
 8008df8:	d000      	beq.n	8008dfc <SVCCTL_App_Notification+0x24>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8008dfa:	e014      	b.n	8008e26 <SVCCTL_App_Notification+0x4e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	3302      	adds	r3, #2
 8008e00:	60fb      	str	r3, [r7, #12]
      switch (p_meta_evt->subevent)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	781b      	ldrb	r3, [r3, #0]
 8008e06:	2b01      	cmp	r3, #1
          break;
 8008e08:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8008e0a:	e011      	b.n	8008e30 <SVCCTL_App_Notification+0x58>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	3302      	adds	r3, #2
 8008e10:	613b      	str	r3, [r7, #16]
      switch (p_blecore_evt->ecode)
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	881b      	ldrh	r3, [r3, #0]
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	461a      	mov	r2, r3
 8008e1a:	f240 4307 	movw	r3, #1031	; 0x407
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d105      	bne.n	8008e2e <SVCCTL_App_Notification+0x56>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8008e22:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008e24:	e003      	b.n	8008e2e <SVCCTL_App_Notification+0x56>
      break;
 8008e26:	bf00      	nop
 8008e28:	e002      	b.n	8008e30 <SVCCTL_App_Notification+0x58>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008e2a:	bf00      	nop
 8008e2c:	e000      	b.n	8008e30 <SVCCTL_App_Notification+0x58>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008e2e:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8008e30:	2301      	movs	r3, #1
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	371c      	adds	r7, #28
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
	...

08008e40 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8008e46:	4b06      	ldr	r3, [pc, #24]	; (8008e60 <Ble_Tl_Init+0x20>)
 8008e48:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8008e4a:	4b06      	ldr	r3, [pc, #24]	; (8008e64 <Ble_Tl_Init+0x24>)
 8008e4c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8008e4e:	463b      	mov	r3, r7
 8008e50:	4619      	mov	r1, r3
 8008e52:	4805      	ldr	r0, [pc, #20]	; (8008e68 <Ble_Tl_Init+0x28>)
 8008e54:	f7ff f934 	bl	80080c0 <hci_init>

  return;
 8008e58:	bf00      	nop
}
 8008e5a:	3708      	adds	r7, #8
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	200300d8 	.word	0x200300d8
 8008e64:	080090a9 	.word	0x080090a9
 8008e68:	08009071 	.word	0x08009071

08008e6c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8008e6c:	b5b0      	push	{r4, r5, r7, lr}
 8008e6e:	b088      	sub	sp, #32
 8008e70:	af02      	add	r7, sp, #8
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8008e72:	2300      	movs	r3, #0
 8008e74:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008e76:	2392      	movs	r3, #146	; 0x92
 8008e78:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8008e7a:	f7fe fe78 	bl	8007b6e <hci_reset>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8008e82:	f000 f88f 	bl	8008fa4 <BleGetBdAddress>
 8008e86:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8008e88:	693a      	ldr	r2, [r7, #16]
 8008e8a:	2106      	movs	r1, #6
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	f7fe fd82 	bl	8007996 <aci_hal_write_config_data>
 8008e92:	4603      	mov	r3, r0
 8008e94:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8008e96:	4a27      	ldr	r2, [pc, #156]	; (8008f34 <Ble_Hci_Gap_Gatt_Init+0xc8>)
 8008e98:	2110      	movs	r1, #16
 8008e9a:	2018      	movs	r0, #24
 8008e9c:	f7fe fd7b 	bl	8007996 <aci_hal_write_config_data>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8008ea4:	4a24      	ldr	r2, [pc, #144]	; (8008f38 <Ble_Hci_Gap_Gatt_Init+0xcc>)
 8008ea6:	2110      	movs	r1, #16
 8008ea8:	2008      	movs	r0, #8
 8008eaa:	f7fe fd74 	bl	8007996 <aci_hal_write_config_data>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8008eb2:	2119      	movs	r1, #25
 8008eb4:	2001      	movs	r0, #1
 8008eb6:	f7fe fdf3 	bl	8007aa0 <aci_hal_set_tx_power_level>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8008ebe:	f7fe fc9c 	bl	80077fa <aci_gatt_init>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
 8008ecc:	f043 0301 	orr.w	r3, r3, #1
 8008ed0:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8008ed2:	7bfb      	ldrb	r3, [r7, #15]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d01f      	beq.n	8008f18 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = "STM32WB";
 8008ed8:	4b18      	ldr	r3, [pc, #96]	; (8008f3c <Ble_Hci_Gap_Gatt_Init+0xd0>)
 8008eda:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8008edc:	1dba      	adds	r2, r7, #6
 8008ede:	7bf8      	ldrb	r0, [r7, #15]
 8008ee0:	1cbb      	adds	r3, r7, #2
 8008ee2:	9301      	str	r3, [sp, #4]
 8008ee4:	1d3b      	adds	r3, r7, #4
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	2207      	movs	r2, #7
 8008eec:	2100      	movs	r1, #0
 8008eee:	f7fe fb11 	bl	8007514 <aci_gap_init>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8008ef6:	88fc      	ldrh	r4, [r7, #6]
 8008ef8:	88bd      	ldrh	r5, [r7, #4]
 8008efa:	68b8      	ldr	r0, [r7, #8]
 8008efc:	f7f7 f93e 	bl	800017c <strlen>
 8008f00:	4603      	mov	r3, r0
 8008f02:	b2da      	uxtb	r2, r3
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	4620      	mov	r0, r4
 8008f10:	f7fe fc98 	bl	8007844 <aci_gatt_update_char_value>
 8008f14:	4603      	mov	r3, r0
 8008f16:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8008f18:	88f8      	ldrh	r0, [r7, #6]
 8008f1a:	8879      	ldrh	r1, [r7, #2]
 8008f1c:	463b      	mov	r3, r7
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	2302      	movs	r3, #2
 8008f22:	2200      	movs	r2, #0
 8008f24:	f7fe fc8e 	bl	8007844 <aci_gatt_update_char_value>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	75fb      	strb	r3, [r7, #23]
  else
  {
    BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Appearance\n");
  }

}
 8008f2c:	bf00      	nop
 8008f2e:	3718      	adds	r7, #24
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bdb0      	pop	{r4, r5, r7, pc}
 8008f34:	0800a270 	.word	0x0800a270
 8008f38:	0800a280 	.word	0x0800a280
 8008f3c:	0800a084 	.word	0x0800a084

08008f40 <Beacon_Update>:
static void Beacon_Update(void)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
  FLASH_EraseInitTypeDef erase;
  uint32_t pageError = 0;
 8008f46:	2300      	movs	r3, #0
 8008f48:	603b      	str	r3, [r7, #0]

  if (sector_type != 0)
 8008f4a:	4b13      	ldr	r3, [pc, #76]	; (8008f98 <Beacon_Update+0x58>)
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d01b      	beq.n	8008f8a <Beacon_Update+0x4a>
  {
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 8008f52:	2302      	movs	r3, #2
 8008f54:	607b      	str	r3, [r7, #4]
    erase.Page      = sector_type;
 8008f56:	4b10      	ldr	r3, [pc, #64]	; (8008f98 <Beacon_Update+0x58>)
 8008f58:	781b      	ldrb	r3, [r3, #0]
 8008f5a:	60bb      	str	r3, [r7, #8]
    if (sector_type == APP_SECTORS)
 8008f5c:	4b0e      	ldr	r3, [pc, #56]	; (8008f98 <Beacon_Update+0x58>)
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	2b07      	cmp	r3, #7
 8008f62:	d102      	bne.n	8008f6a <Beacon_Update+0x2a>
    {
      erase.NbPages = 2;  /* 2 sectors for beacon application */
 8008f64:	2302      	movs	r3, #2
 8008f66:	60fb      	str	r3, [r7, #12]
 8008f68:	e001      	b.n	8008f6e <Beacon_Update+0x2e>
    }
    else
    {
      erase.NbPages = 1; /* 1 sector for beacon user data */
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	60fb      	str	r3, [r7, #12]
    }

    HAL_FLASH_Unlock();
 8008f6e:	f7fb f81d 	bl	8003fac <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 8008f72:	4b0a      	ldr	r3, [pc, #40]	; (8008f9c <Beacon_Update+0x5c>)
 8008f74:	f248 0211 	movw	r2, #32785	; 0x8011
 8008f78:	611a      	str	r2, [r3, #16]

    HAL_FLASHEx_Erase(&erase, &pageError);
 8008f7a:	463a      	mov	r2, r7
 8008f7c:	1d3b      	adds	r3, r7, #4
 8008f7e:	4611      	mov	r1, r2
 8008f80:	4618      	mov	r0, r3
 8008f82:	f7fb f8bf 	bl	8004104 <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 8008f86:	f7fb f833 	bl	8003ff0 <HAL_FLASH_Lock>
  }

  *(uint32_t*) SRAM1_BASE = BOOT_MODE_AND_SECTOR;
 8008f8a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008f8e:	4a04      	ldr	r2, [pc, #16]	; (8008fa0 <Beacon_Update+0x60>)
 8008f90:	601a      	str	r2, [r3, #0]
  /**
   * Boot Mode:    1 (OTA)
   * Sector Index: 6
   * Nb Sectors  : 1
   */
  NVIC_SystemReset();
 8008f92:	f7ff fe97 	bl	8008cc4 <__NVIC_SystemReset>
 8008f96:	bf00      	nop
 8008f98:	20000402 	.word	0x20000402
 8008f9c:	58004000 	.word	0x58004000
 8008fa0:	00010601 	.word	0x00010601

08008fa4 <BleGetBdAddress>:
}

const uint8_t* BleGetBdAddress(void)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8008faa:	f7ff fea1 	bl	8008cf0 <LL_FLASH_GetUDN>
 8008fae:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb6:	d023      	beq.n	8009000 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008fb8:	f7ff feb2 	bl	8008d20 <LL_FLASH_GetSTCompanyID>
 8008fbc:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8008fbe:	f7ff fea3 	bl	8008d08 <LL_FLASH_GetDeviceID>
 8008fc2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	4b16      	ldr	r3, [pc, #88]	; (8009024 <BleGetBdAddress+0x80>)
 8008fca:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	0a1b      	lsrs	r3, r3, #8
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	4b14      	ldr	r3, [pc, #80]	; (8009024 <BleGetBdAddress+0x80>)
 8008fd4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	b2da      	uxtb	r2, r3
 8008fda:	4b12      	ldr	r3, [pc, #72]	; (8009024 <BleGetBdAddress+0x80>)
 8008fdc:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	4b10      	ldr	r3, [pc, #64]	; (8009024 <BleGetBdAddress+0x80>)
 8008fe4:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	0a1b      	lsrs	r3, r3, #8
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	4b0d      	ldr	r3, [pc, #52]	; (8009024 <BleGetBdAddress+0x80>)
 8008fee:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	0c1b      	lsrs	r3, r3, #16
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	4b0b      	ldr	r3, [pc, #44]	; (8009024 <BleGetBdAddress+0x80>)
 8008ff8:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8008ffa:	4b0a      	ldr	r3, [pc, #40]	; (8009024 <BleGetBdAddress+0x80>)
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	e00b      	b.n	8009018 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8009000:	2000      	movs	r0, #0
 8009002:	f7ff fd79 	bl	8008af8 <OTP_Read>
 8009006:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d002      	beq.n	8009014 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	617b      	str	r3, [r7, #20]
 8009012:	e001      	b.n	8009018 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8009014:	4b04      	ldr	r3, [pc, #16]	; (8009028 <BleGetBdAddress+0x84>)
 8009016:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8009018:	697b      	ldr	r3, [r7, #20]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	200003fc 	.word	0x200003fc
 8009028:	0800a268 	.word	0x0800a268

0800902c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8009034:	2100      	movs	r1, #0
 8009036:	2002      	movs	r0, #2
 8009038:	f000 fe82 	bl	8009d40 <UTIL_SEQ_SetTask>

  return;
 800903c:	bf00      	nop
}
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800904c:	2001      	movs	r0, #1
 800904e:	f000 fee3 	bl	8009e18 <UTIL_SEQ_SetEvt>

  return;
 8009052:	bf00      	nop
}
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b082      	sub	sp, #8
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8009062:	2001      	movs	r0, #1
 8009064:	f000 fef8 	bl	8009e58 <UTIL_SEQ_WaitEvt>

  return;
 8009068:	bf00      	nop
}
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	3308      	adds	r3, #8
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe fed6 	bl	8007e34 <SVCCTL_UserEvtRx>
 8009088:	4603      	mov	r3, r0
 800908a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800908c:	7afb      	ldrb	r3, [r7, #11]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2201      	movs	r2, #1
 8009096:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8009098:	e003      	b.n	80090a2 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2200      	movs	r2, #0
 800909e:	701a      	strb	r2, [r3, #0]
  return;
 80090a0:	bf00      	nop
}
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	4603      	mov	r3, r0
 80090b0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80090b2:	79fb      	ldrb	r3, [r7, #7]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d002      	beq.n	80090be <BLE_StatusNot+0x16>
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d006      	beq.n	80090ca <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80090bc:	e00b      	b.n	80090d6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80090be:	230f      	movs	r3, #15
 80090c0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f000 fe68 	bl	8009d98 <UTIL_SEQ_PauseTask>
      break;
 80090c8:	e005      	b.n	80090d6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80090ca:	230f      	movs	r3, #15
 80090cc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 fe82 	bl	8009dd8 <UTIL_SEQ_ResumeTask>
      break;
 80090d4:	bf00      	nop
  }

  return;
 80090d6:	bf00      	nop
}
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <IBeacon_Init>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/

static tBleStatus IBeacon_Init(IBeacon_InitTypeDef *IBeacon_Init)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b094      	sub	sp, #80	; 0x50
 80090e4:	af08      	add	r7, sp, #32
 80090e6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN IBeacon_Init_1 */

/* USER CODE END IBeacon_Init_1 */
  tBleStatus ret = BLE_STATUS_SUCCESS;
 80090e8:	2300      	movs	r3, #0
 80090ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint16_t AdvertisingInterval = (IBeacon_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	011b      	lsls	r3, r3, #4
 80090f4:	4a67      	ldr	r2, [pc, #412]	; (8009294 <IBeacon_Init+0x1b4>)
 80090f6:	fb82 1203 	smull	r1, r2, r2, r3
 80090fa:	1092      	asrs	r2, r2, #2
 80090fc:	17db      	asrs	r3, r3, #31
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* Disable scan response. */
  hci_le_set_scan_response_data(0, NULL);
 8009102:	2100      	movs	r1, #0
 8009104:	2000      	movs	r0, #0
 8009106:	f7fe fd56 	bl	8007bb6 <hci_le_set_scan_response_data>

  /* Put the device in a non-connectable mode. */
  ret = aci_gap_set_discoverable(ADV_NONCONN_IND,                          /*< Advertise as non-connectable, undirected. */
 800910a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800910c:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 800910e:	2300      	movs	r3, #0
 8009110:	9306      	str	r3, [sp, #24]
 8009112:	2300      	movs	r3, #0
 8009114:	9305      	str	r3, [sp, #20]
 8009116:	2300      	movs	r3, #0
 8009118:	9304      	str	r3, [sp, #16]
 800911a:	2300      	movs	r3, #0
 800911c:	9303      	str	r3, [sp, #12]
 800911e:	2300      	movs	r3, #0
 8009120:	9302      	str	r3, [sp, #8]
 8009122:	2300      	movs	r3, #0
 8009124:	9301      	str	r3, [sp, #4]
 8009126:	2300      	movs	r3, #0
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	2300      	movs	r3, #0
 800912c:	2003      	movs	r0, #3
 800912e:	f7fe f8f7 	bl	8007320 <aci_gap_set_discoverable>
 8009132:	4603      	mov	r3, r0
 8009134:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 GAP_PUBLIC_ADDR, NO_WHITE_LIST_USE,           /*< Use the public address, with no white list. */
                                 0, NULL,                                  /*< Do not use a local name. */
                                 0, NULL,                                  /*< Do not include the service UUID list. */
                                 0, 0);                                    /*< Do not set a slave connection interval. */

  if (ret != BLE_STATUS_SUCCESS)
 8009138:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <IBeacon_Init+0x66>
  {
    return ret;
 8009140:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009144:	e0a1      	b.n	800928a <IBeacon_Init+0x1aa>
  }

  /* Remove the TX power level advertisement (this is done to decrease the packet size). */
  ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 8009146:	200a      	movs	r0, #10
 8009148:	f7fe fb03 	bl	8007752 <aci_gap_delete_ad_type>
 800914c:	4603      	mov	r3, r0
 800914e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8009152:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009156:	2b00      	cmp	r3, #0
 8009158:	d002      	beq.n	8009160 <IBeacon_Init+0x80>
  {
    return ret;
 800915a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800915e:	e094      	b.n	800928a <IBeacon_Init+0x1aa>
  }

  uint8_t service_data[] =
 8009160:	231a      	movs	r3, #26
 8009162:	743b      	strb	r3, [r7, #16]
 8009164:	23ff      	movs	r3, #255	; 0xff
 8009166:	747b      	strb	r3, [r7, #17]
 8009168:	234c      	movs	r3, #76	; 0x4c
 800916a:	74bb      	strb	r3, [r7, #18]
 800916c:	2300      	movs	r3, #0
 800916e:	74fb      	strb	r3, [r7, #19]
 8009170:	2302      	movs	r3, #2
 8009172:	753b      	strb	r3, [r7, #20]
 8009174:	2315      	movs	r3, #21
 8009176:	757b      	strb	r3, [r7, #21]
  {
    26,                                                                      /*< Length. */
    AD_TYPE_MANUFACTURER_SPECIFIC_DATA,                                      /*< Manufacturer Specific Data data type value. */
    0x4C, 0x00, 0x02, 0x15,                                                  /*< 32-bit Manufacturer Data. */
    IBeacon_Init->UuID[0],                                                   /*< 16-byte Proximity UUID. */
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 800917e:	75bb      	strb	r3, [r7, #22]
    IBeacon_Init->UuID[1],
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8009184:	785b      	ldrb	r3, [r3, #1]
 8009186:	75fb      	strb	r3, [r7, #23]
    IBeacon_Init->UuID[2],
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800918c:	789b      	ldrb	r3, [r3, #2]
 800918e:	763b      	strb	r3, [r7, #24]
    IBeacon_Init->UuID[3],
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 8009194:	78db      	ldrb	r3, [r3, #3]
 8009196:	767b      	strb	r3, [r7, #25]
    IBeacon_Init->UuID[4],
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 800919c:	791b      	ldrb	r3, [r3, #4]
 800919e:	76bb      	strb	r3, [r7, #26]
    IBeacon_Init->UuID[5],
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80091a4:	795b      	ldrb	r3, [r3, #5]
 80091a6:	76fb      	strb	r3, [r7, #27]
    IBeacon_Init->UuID[6],
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80091ac:	799b      	ldrb	r3, [r3, #6]
 80091ae:	773b      	strb	r3, [r7, #28]
    IBeacon_Init->UuID[7],
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80091b4:	79db      	ldrb	r3, [r3, #7]
 80091b6:	777b      	strb	r3, [r7, #29]
    IBeacon_Init->UuID[8],
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80091bc:	7a1b      	ldrb	r3, [r3, #8]
 80091be:	77bb      	strb	r3, [r7, #30]
    IBeacon_Init->UuID[9],
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80091c4:	7a5b      	ldrb	r3, [r3, #9]
 80091c6:	77fb      	strb	r3, [r7, #31]
    IBeacon_Init->UuID[10],
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80091cc:	7a9b      	ldrb	r3, [r3, #10]
 80091ce:	f887 3020 	strb.w	r3, [r7, #32]
    IBeacon_Init->UuID[11],
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80091d6:	7adb      	ldrb	r3, [r3, #11]
 80091d8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    IBeacon_Init->UuID[12],
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80091e0:	7b1b      	ldrb	r3, [r3, #12]
 80091e2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    IBeacon_Init->UuID[13],
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80091ea:	7b5b      	ldrb	r3, [r3, #13]
 80091ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    IBeacon_Init->UuID[14],
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80091f4:	7b9b      	ldrb	r3, [r3, #14]
 80091f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    IBeacon_Init->UuID[15],
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	685b      	ldr	r3, [r3, #4]
  uint8_t service_data[] =
 80091fe:	7bdb      	ldrb	r3, [r3, #15]
 8009200:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    IBeacon_Init->MajorID[0],                                                /*< 2-byte Major. */
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 800920a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    IBeacon_Init->MajorID[1],
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	689b      	ldr	r3, [r3, #8]
  uint8_t service_data[] =
 8009212:	785b      	ldrb	r3, [r3, #1]
 8009214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    IBeacon_Init->MinorID[0],                                                /*< 2-byte Minor. */
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	781b      	ldrb	r3, [r3, #0]
  uint8_t service_data[] =
 800921e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    IBeacon_Init->MinorID[1],
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	68db      	ldr	r3, [r3, #12]
  uint8_t service_data[] =
 8009226:	785b      	ldrb	r3, [r3, #1]
 8009228:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    IBeacon_Init->CalibratedTxPower,                                         /*< Ranging data. */
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	7c1b      	ldrb	r3, [r3, #16]
  uint8_t service_data[] =
 8009230:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  };

  uint8_t flags[] =
 8009234:	4a18      	ldr	r2, [pc, #96]	; (8009298 <IBeacon_Init+0x1b8>)
 8009236:	f107 030c 	add.w	r3, r7, #12
 800923a:	6812      	ldr	r2, [r2, #0]
 800923c:	4611      	mov	r1, r2
 800923e:	8019      	strh	r1, [r3, #0]
 8009240:	3302      	adds	r3, #2
 8009242:	0c12      	lsrs	r2, r2, #16
 8009244:	701a      	strb	r2, [r3, #0]
    AD_TYPE_FLAGS,                                                          /*< Flags data type value. */
    (FLAG_BIT_LE_GENERAL_DISCOVERABLE_MODE | FLAG_BIT_BR_EDR_NOT_SUPPORTED) /*< BLE general discoverable, without BR/EDR support. */
  };

  /* Update the service data. */
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 8009246:	f107 0310 	add.w	r3, r7, #16
 800924a:	4619      	mov	r1, r3
 800924c:	201b      	movs	r0, #27
 800924e:	f7fe fa0e 	bl	800766e <aci_gap_update_adv_data>
 8009252:	4603      	mov	r3, r0
 8009254:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8009258:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800925c:	2b00      	cmp	r3, #0
 800925e:	d002      	beq.n	8009266 <IBeacon_Init+0x186>
  {
    return ret;
 8009260:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009264:	e011      	b.n	800928a <IBeacon_Init+0x1aa>
  }

  /* Update the adverstising flags. */
  ret = aci_gap_update_adv_data(sizeof(flags), flags);
 8009266:	f107 030c 	add.w	r3, r7, #12
 800926a:	4619      	mov	r1, r3
 800926c:	2003      	movs	r0, #3
 800926e:	f7fe f9fe 	bl	800766e <aci_gap_update_adv_data>
 8009272:	4603      	mov	r3, r0
 8009274:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 8009278:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800927c:	2b00      	cmp	r3, #0
 800927e:	d002      	beq.n	8009286 <IBeacon_Init+0x1a6>
  {
    return ret;
 8009280:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009284:	e001      	b.n	800928a <IBeacon_Init+0x1aa>
  }
/* USER CODE BEGIN IBeacon_Init_2 */

/* USER CODE END IBeacon_Init_2 */
  return ret;
 8009286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800928a:	4618      	mov	r0, r3
 800928c:	3730      	adds	r7, #48	; 0x30
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	66666667 	.word	0x66666667
 8009298:	0800a08c 	.word	0x0800a08c

0800929c <IBeacon_Process>:

void IBeacon_Process(void)
{
 800929c:	b590      	push	{r4, r7, lr}
 800929e:	b08d      	sub	sp, #52	; 0x34
 80092a0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN IBeacon_Process_1 */

/* USER CODE END IBeacon_Process_1 */
  /* Default ibeacon */
  uint8_t UuID[]    = { UUID };
 80092a2:	4b11      	ldr	r3, [pc, #68]	; (80092e8 <IBeacon_Process+0x4c>)
 80092a4:	f107 0420 	add.w	r4, r7, #32
 80092a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80092aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t MajorID[] = { MAJOR_ID };
 80092ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092b2:	83bb      	strh	r3, [r7, #28]
  uint8_t MinorID[] = { MINOR_ID };
 80092b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092b8:	833b      	strh	r3, [r7, #24]

  IBeacon_InitTypeDef IBeacon_InitStruct =
 80092ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80092be:	80bb      	strh	r3, [r7, #4]
 80092c0:	f107 0320 	add.w	r3, r7, #32
 80092c4:	60bb      	str	r3, [r7, #8]
 80092c6:	f107 031c 	add.w	r3, r7, #28
 80092ca:	60fb      	str	r3, [r7, #12]
 80092cc:	f107 0318 	add.w	r3, r7, #24
 80092d0:	613b      	str	r3, [r7, #16]
 80092d2:	23c1      	movs	r3, #193	; 0xc1
 80092d4:	753b      	strb	r3, [r7, #20]
    data_address += 2;
    IBeacon_InitStruct.CalibratedTxPower = *(uint8_t *)(data_address);
  }
#endif

  IBeacon_Init(&IBeacon_InitStruct);
 80092d6:	1d3b      	adds	r3, r7, #4
 80092d8:	4618      	mov	r0, r3
 80092da:	f7ff ff01 	bl	80090e0 <IBeacon_Init>
/* USER CODE BEGIN IBeacon_Process_2 */

/* USER CODE END IBeacon_Process_2 */
}
 80092de:	bf00      	nop
 80092e0:	3734      	adds	r7, #52	; 0x34
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd90      	pop	{r4, r7, pc}
 80092e6:	bf00      	nop
 80092e8:	0800a090 	.word	0x0800a090

080092ec <initTemp>:
/* USER CODE BEGIN FD */
void initTemp(void) {
 80092ec:	b590      	push	{r4, r7, lr}
 80092ee:	b095      	sub	sp, #84	; 0x54
 80092f0:	af14      	add	r7, sp, #80	; 0x50
	  TMP117_set_Configuration(hi2c1,0x03, 0xA4, Device_ID_2);			// 16s Continous
 80092f2:	4c26      	ldr	r4, [pc, #152]	; (800938c <initTemp+0xa0>)
 80092f4:	2392      	movs	r3, #146	; 0x92
 80092f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80092f8:	23a4      	movs	r3, #164	; 0xa4
 80092fa:	9312      	str	r3, [sp, #72]	; 0x48
 80092fc:	2303      	movs	r3, #3
 80092fe:	9311      	str	r3, [sp, #68]	; 0x44
 8009300:	4668      	mov	r0, sp
 8009302:	f104 0310 	add.w	r3, r4, #16
 8009306:	2244      	movs	r2, #68	; 0x44
 8009308:	4619      	mov	r1, r3
 800930a:	f000 fe65 	bl	8009fd8 <memcpy>
 800930e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8009312:	f7f6 ff6f 	bl	80001f4 <TMP117_set_Configuration>
	  TMP117_set_Configuration(hi2c1,0x03, 0x24, Device_ID_1);			// 8s continous
 8009316:	4c1d      	ldr	r4, [pc, #116]	; (800938c <initTemp+0xa0>)
 8009318:	2390      	movs	r3, #144	; 0x90
 800931a:	9313      	str	r3, [sp, #76]	; 0x4c
 800931c:	2324      	movs	r3, #36	; 0x24
 800931e:	9312      	str	r3, [sp, #72]	; 0x48
 8009320:	2303      	movs	r3, #3
 8009322:	9311      	str	r3, [sp, #68]	; 0x44
 8009324:	4668      	mov	r0, sp
 8009326:	f104 0310 	add.w	r3, r4, #16
 800932a:	2244      	movs	r2, #68	; 0x44
 800932c:	4619      	mov	r1, r3
 800932e:	f000 fe53 	bl	8009fd8 <memcpy>
 8009332:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8009336:	f7f6 ff5d 	bl	80001f4 <TMP117_set_Configuration>
	  TMP117_set_Configuration(hi2c1,0x03, 0x24, Device_ID_3);			// 8s continous
 800933a:	4c14      	ldr	r4, [pc, #80]	; (800938c <initTemp+0xa0>)
 800933c:	2394      	movs	r3, #148	; 0x94
 800933e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009340:	2324      	movs	r3, #36	; 0x24
 8009342:	9312      	str	r3, [sp, #72]	; 0x48
 8009344:	2303      	movs	r3, #3
 8009346:	9311      	str	r3, [sp, #68]	; 0x44
 8009348:	4668      	mov	r0, sp
 800934a:	f104 0310 	add.w	r3, r4, #16
 800934e:	2244      	movs	r2, #68	; 0x44
 8009350:	4619      	mov	r1, r3
 8009352:	f000 fe41 	bl	8009fd8 <memcpy>
 8009356:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800935a:	f7f6 ff4b 	bl	80001f4 <TMP117_set_Configuration>
	  TMP117_set_Configuration(hi2c1,0x03, 0x24, Device_ID_4);			// 8s continous
 800935e:	4c0b      	ldr	r4, [pc, #44]	; (800938c <initTemp+0xa0>)
 8009360:	2396      	movs	r3, #150	; 0x96
 8009362:	9313      	str	r3, [sp, #76]	; 0x4c
 8009364:	2324      	movs	r3, #36	; 0x24
 8009366:	9312      	str	r3, [sp, #72]	; 0x48
 8009368:	2303      	movs	r3, #3
 800936a:	9311      	str	r3, [sp, #68]	; 0x44
 800936c:	4668      	mov	r0, sp
 800936e:	f104 0310 	add.w	r3, r4, #16
 8009372:	2244      	movs	r2, #68	; 0x44
 8009374:	4619      	mov	r1, r3
 8009376:	f000 fe2f 	bl	8009fd8 <memcpy>
 800937a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800937e:	f7f6 ff39 	bl	80001f4 <TMP117_set_Configuration>


}
 8009382:	bf00      	nop
 8009384:	3704      	adds	r7, #4
 8009386:	46bd      	mov	sp, r7
 8009388:	bd90      	pop	{r4, r7, pc}
 800938a:	bf00      	nop
 800938c:	200001e8 	.word	0x200001e8

08009390 <updateTemp>:

void updateTemp(void) {
 8009390:	b590      	push	{r4, r7, lr}
 8009392:	b09b      	sub	sp, #108	; 0x6c
 8009394:	af12      	add	r7, sp, #72	; 0x48

	temperature_val[0] = TMP117_get_Temperature(hi2c1, Device_ID_1);
 8009396:	4c6d      	ldr	r4, [pc, #436]	; (800954c <updateTemp+0x1bc>)
 8009398:	2390      	movs	r3, #144	; 0x90
 800939a:	9311      	str	r3, [sp, #68]	; 0x44
 800939c:	4668      	mov	r0, sp
 800939e:	f104 0310 	add.w	r3, r4, #16
 80093a2:	2244      	movs	r2, #68	; 0x44
 80093a4:	4619      	mov	r1, r3
 80093a6:	f000 fe17 	bl	8009fd8 <memcpy>
 80093aa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80093ae:	f7f6 feed 	bl	800018c <TMP117_get_Temperature>
 80093b2:	4603      	mov	r3, r0
 80093b4:	461a      	mov	r2, r3
 80093b6:	4b66      	ldr	r3, [pc, #408]	; (8009550 <updateTemp+0x1c0>)
 80093b8:	801a      	strh	r2, [r3, #0]
	temperature_val[1] = TMP117_get_Temperature(hi2c1, Device_ID_2);
 80093ba:	4c64      	ldr	r4, [pc, #400]	; (800954c <updateTemp+0x1bc>)
 80093bc:	2392      	movs	r3, #146	; 0x92
 80093be:	9311      	str	r3, [sp, #68]	; 0x44
 80093c0:	4668      	mov	r0, sp
 80093c2:	f104 0310 	add.w	r3, r4, #16
 80093c6:	2244      	movs	r2, #68	; 0x44
 80093c8:	4619      	mov	r1, r3
 80093ca:	f000 fe05 	bl	8009fd8 <memcpy>
 80093ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80093d2:	f7f6 fedb 	bl	800018c <TMP117_get_Temperature>
 80093d6:	4603      	mov	r3, r0
 80093d8:	461a      	mov	r2, r3
 80093da:	4b5d      	ldr	r3, [pc, #372]	; (8009550 <updateTemp+0x1c0>)
 80093dc:	805a      	strh	r2, [r3, #2]
	temperature_val[2] = TMP117_get_Temperature(hi2c1, Device_ID_3);
 80093de:	4c5b      	ldr	r4, [pc, #364]	; (800954c <updateTemp+0x1bc>)
 80093e0:	2394      	movs	r3, #148	; 0x94
 80093e2:	9311      	str	r3, [sp, #68]	; 0x44
 80093e4:	4668      	mov	r0, sp
 80093e6:	f104 0310 	add.w	r3, r4, #16
 80093ea:	2244      	movs	r2, #68	; 0x44
 80093ec:	4619      	mov	r1, r3
 80093ee:	f000 fdf3 	bl	8009fd8 <memcpy>
 80093f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80093f6:	f7f6 fec9 	bl	800018c <TMP117_get_Temperature>
 80093fa:	4603      	mov	r3, r0
 80093fc:	461a      	mov	r2, r3
 80093fe:	4b54      	ldr	r3, [pc, #336]	; (8009550 <updateTemp+0x1c0>)
 8009400:	809a      	strh	r2, [r3, #4]
	temperature_val[3] = TMP117_get_Temperature(hi2c1, Device_ID_4);
 8009402:	4c52      	ldr	r4, [pc, #328]	; (800954c <updateTemp+0x1bc>)
 8009404:	2396      	movs	r3, #150	; 0x96
 8009406:	9311      	str	r3, [sp, #68]	; 0x44
 8009408:	4668      	mov	r0, sp
 800940a:	f104 0310 	add.w	r3, r4, #16
 800940e:	2244      	movs	r2, #68	; 0x44
 8009410:	4619      	mov	r1, r3
 8009412:	f000 fde1 	bl	8009fd8 <memcpy>
 8009416:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800941a:	f7f6 feb7 	bl	800018c <TMP117_get_Temperature>
 800941e:	4603      	mov	r3, r0
 8009420:	461a      	mov	r2, r3
 8009422:	4b4b      	ldr	r3, [pc, #300]	; (8009550 <updateTemp+0x1c0>)
 8009424:	80da      	strh	r2, [r3, #6]
	tempMSB_1 = temperature_val[0] >> 8;
 8009426:	4b4a      	ldr	r3, [pc, #296]	; (8009550 <updateTemp+0x1c0>)
 8009428:	881b      	ldrh	r3, [r3, #0]
 800942a:	0a1b      	lsrs	r3, r3, #8
 800942c:	b29b      	uxth	r3, r3
 800942e:	b2da      	uxtb	r2, r3
 8009430:	4b48      	ldr	r3, [pc, #288]	; (8009554 <updateTemp+0x1c4>)
 8009432:	701a      	strb	r2, [r3, #0]
	tempLSB_1 = temperature_val[0] & 0xFF;
 8009434:	4b46      	ldr	r3, [pc, #280]	; (8009550 <updateTemp+0x1c0>)
 8009436:	881b      	ldrh	r3, [r3, #0]
 8009438:	b2da      	uxtb	r2, r3
 800943a:	4b47      	ldr	r3, [pc, #284]	; (8009558 <updateTemp+0x1c8>)
 800943c:	701a      	strb	r2, [r3, #0]
	tempMSB_2 = temperature_val[1] >> 8;
 800943e:	4b44      	ldr	r3, [pc, #272]	; (8009550 <updateTemp+0x1c0>)
 8009440:	885b      	ldrh	r3, [r3, #2]
 8009442:	0a1b      	lsrs	r3, r3, #8
 8009444:	b29b      	uxth	r3, r3
 8009446:	b2da      	uxtb	r2, r3
 8009448:	4b44      	ldr	r3, [pc, #272]	; (800955c <updateTemp+0x1cc>)
 800944a:	701a      	strb	r2, [r3, #0]
	tempLSB_2 = temperature_val[1] & 0xFF;
 800944c:	4b40      	ldr	r3, [pc, #256]	; (8009550 <updateTemp+0x1c0>)
 800944e:	885b      	ldrh	r3, [r3, #2]
 8009450:	b2da      	uxtb	r2, r3
 8009452:	4b43      	ldr	r3, [pc, #268]	; (8009560 <updateTemp+0x1d0>)
 8009454:	701a      	strb	r2, [r3, #0]
	tempMSB_3 = temperature_val[2] >> 8;
 8009456:	4b3e      	ldr	r3, [pc, #248]	; (8009550 <updateTemp+0x1c0>)
 8009458:	889b      	ldrh	r3, [r3, #4]
 800945a:	0a1b      	lsrs	r3, r3, #8
 800945c:	b29b      	uxth	r3, r3
 800945e:	b2da      	uxtb	r2, r3
 8009460:	4b40      	ldr	r3, [pc, #256]	; (8009564 <updateTemp+0x1d4>)
 8009462:	701a      	strb	r2, [r3, #0]
	tempLSB_3 = temperature_val[2] & 0xFF;
 8009464:	4b3a      	ldr	r3, [pc, #232]	; (8009550 <updateTemp+0x1c0>)
 8009466:	889b      	ldrh	r3, [r3, #4]
 8009468:	b2da      	uxtb	r2, r3
 800946a:	4b3f      	ldr	r3, [pc, #252]	; (8009568 <updateTemp+0x1d8>)
 800946c:	701a      	strb	r2, [r3, #0]
	tempMSB_4 = temperature_val[3] >> 8;
 800946e:	4b38      	ldr	r3, [pc, #224]	; (8009550 <updateTemp+0x1c0>)
 8009470:	88db      	ldrh	r3, [r3, #6]
 8009472:	0a1b      	lsrs	r3, r3, #8
 8009474:	b29b      	uxth	r3, r3
 8009476:	b2da      	uxtb	r2, r3
 8009478:	4b3c      	ldr	r3, [pc, #240]	; (800956c <updateTemp+0x1dc>)
 800947a:	701a      	strb	r2, [r3, #0]
	tempLSB_4 = temperature_val[3] & 0xFF;
 800947c:	4b34      	ldr	r3, [pc, #208]	; (8009550 <updateTemp+0x1c0>)
 800947e:	88db      	ldrh	r3, [r3, #6]
 8009480:	b2da      	uxtb	r2, r3
 8009482:	4b3b      	ldr	r3, [pc, #236]	; (8009570 <updateTemp+0x1e0>)
 8009484:	701a      	strb	r2, [r3, #0]
	ADC_MSB = uhADCxConvertedData[0] >> 8;
 8009486:	4b3b      	ldr	r3, [pc, #236]	; (8009574 <updateTemp+0x1e4>)
 8009488:	881b      	ldrh	r3, [r3, #0]
 800948a:	b29b      	uxth	r3, r3
 800948c:	0a1b      	lsrs	r3, r3, #8
 800948e:	b29b      	uxth	r3, r3
 8009490:	b2da      	uxtb	r2, r3
 8009492:	4b39      	ldr	r3, [pc, #228]	; (8009578 <updateTemp+0x1e8>)
 8009494:	701a      	strb	r2, [r3, #0]
	ADC_LSB = uhADCxConvertedData[0] & 0xFF;
 8009496:	4b37      	ldr	r3, [pc, #220]	; (8009574 <updateTemp+0x1e4>)
 8009498:	881b      	ldrh	r3, [r3, #0]
 800949a:	b29b      	uxth	r3, r3
 800949c:	b2da      	uxtb	r2, r3
 800949e:	4b37      	ldr	r3, [pc, #220]	; (800957c <updateTemp+0x1ec>)
 80094a0:	701a      	strb	r2, [r3, #0]
			break;
		default:
			break;
	}*/

	uint8_t service_data[] =
 80094a2:	231b      	movs	r3, #27
 80094a4:	713b      	strb	r3, [r7, #4]
 80094a6:	23ff      	movs	r3, #255	; 0xff
 80094a8:	717b      	strb	r3, [r7, #5]
 80094aa:	4b33      	ldr	r3, [pc, #204]	; (8009578 <updateTemp+0x1e8>)
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	71bb      	strb	r3, [r7, #6]
 80094b0:	4b32      	ldr	r3, [pc, #200]	; (800957c <updateTemp+0x1ec>)
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	71fb      	strb	r3, [r7, #7]
 80094b6:	4b27      	ldr	r3, [pc, #156]	; (8009554 <updateTemp+0x1c4>)
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	723b      	strb	r3, [r7, #8]
 80094bc:	4b26      	ldr	r3, [pc, #152]	; (8009558 <updateTemp+0x1c8>)
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	727b      	strb	r3, [r7, #9]
 80094c2:	2300      	movs	r3, #0
 80094c4:	72bb      	strb	r3, [r7, #10]
 80094c6:	2300      	movs	r3, #0
 80094c8:	72fb      	strb	r3, [r7, #11]
 80094ca:	2300      	movs	r3, #0
 80094cc:	733b      	strb	r3, [r7, #12]
 80094ce:	230e      	movs	r3, #14
 80094d0:	737b      	strb	r3, [r7, #13]
 80094d2:	238e      	movs	r3, #142	; 0x8e
 80094d4:	73bb      	strb	r3, [r7, #14]
 80094d6:	2322      	movs	r3, #34	; 0x22
 80094d8:	73fb      	strb	r3, [r7, #15]
 80094da:	2345      	movs	r3, #69	; 0x45
 80094dc:	743b      	strb	r3, [r7, #16]
 80094de:	2341      	movs	r3, #65	; 0x41
 80094e0:	747b      	strb	r3, [r7, #17]
 80094e2:	239d      	movs	r3, #157	; 0x9d
 80094e4:	74bb      	strb	r3, [r7, #18]
 80094e6:	234c      	movs	r3, #76	; 0x4c
 80094e8:	74fb      	strb	r3, [r7, #19]
 80094ea:	2321      	movs	r3, #33	; 0x21
 80094ec:	753b      	strb	r3, [r7, #20]
 80094ee:	23ed      	movs	r3, #237	; 0xed
 80094f0:	757b      	strb	r3, [r7, #21]
 80094f2:	23ae      	movs	r3, #174	; 0xae
 80094f4:	75bb      	strb	r3, [r7, #22]
 80094f6:	2382      	movs	r3, #130	; 0x82
 80094f8:	75fb      	strb	r3, [r7, #23]
 80094fa:	23ed      	movs	r3, #237	; 0xed
 80094fc:	763b      	strb	r3, [r7, #24]
 80094fe:	2319      	movs	r3, #25
 8009500:	767b      	strb	r3, [r7, #25]
 8009502:	4b16      	ldr	r3, [pc, #88]	; (800955c <updateTemp+0x1cc>)
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	76bb      	strb	r3, [r7, #26]
 8009508:	4b15      	ldr	r3, [pc, #84]	; (8009560 <updateTemp+0x1d0>)
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	76fb      	strb	r3, [r7, #27]
 800950e:	4b15      	ldr	r3, [pc, #84]	; (8009564 <updateTemp+0x1d4>)
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	773b      	strb	r3, [r7, #28]
 8009514:	4b14      	ldr	r3, [pc, #80]	; (8009568 <updateTemp+0x1d8>)
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	777b      	strb	r3, [r7, #29]
 800951a:	4b14      	ldr	r3, [pc, #80]	; (800956c <updateTemp+0x1dc>)
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	77bb      	strb	r3, [r7, #30]
 8009520:	4b13      	ldr	r3, [pc, #76]	; (8009570 <updateTemp+0x1e0>)
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	77fb      	strb	r3, [r7, #31]
		  tempMSB_3, tempLSB_3,					 		     			 /*< 2-byte Temperature Data */
		  tempMSB_4, tempLSB_4,
		  //ADC_MSB, ADC_LSB,						     					         /*< 1-byte Power */
		};

    aci_gap_update_adv_data(sizeof(service_data), service_data);
 8009526:	1d3b      	adds	r3, r7, #4
 8009528:	4619      	mov	r1, r3
 800952a:	201c      	movs	r0, #28
 800952c:	f7fe f89f 	bl	800766e <aci_gap_update_adv_data>
    deviceToBeRead = 0;
 8009530:	4b13      	ldr	r3, [pc, #76]	; (8009580 <updateTemp+0x1f0>)
 8009532:	2200      	movs	r2, #0
 8009534:	701a      	strb	r2, [r3, #0]

	// Enter STOP MODE //
	HAL_SuspendTick();
 8009536:	f7f9 f84b 	bl	80025d0 <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800953a:	2101      	movs	r1, #1
 800953c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009540:	f7fb feb2 	bl	80052a8 <HAL_PWR_EnterSTOPMode>
}
 8009544:	bf00      	nop
 8009546:	3724      	adds	r7, #36	; 0x24
 8009548:	46bd      	mov	sp, r7
 800954a:	bd90      	pop	{r4, r7, pc}
 800954c:	200001e8 	.word	0x200001e8
 8009550:	20000404 	.word	0x20000404
 8009554:	2000040c 	.word	0x2000040c
 8009558:	2000040d 	.word	0x2000040d
 800955c:	2000040e 	.word	0x2000040e
 8009560:	2000040f 	.word	0x2000040f
 8009564:	20000410 	.word	0x20000410
 8009568:	20000411 	.word	0x20000411
 800956c:	20000412 	.word	0x20000412
 8009570:	20000413 	.word	0x20000413
 8009574:	200002e8 	.word	0x200002e8
 8009578:	20000414 	.word	0x20000414
 800957c:	20000415 	.word	0x20000415
 8009580:	20000368 	.word	0x20000368

08009584 <LL_PWR_EnableBootC2>:
{
 8009584:	b480      	push	{r7}
 8009586:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8009588:	4b05      	ldr	r3, [pc, #20]	; (80095a0 <LL_PWR_EnableBootC2+0x1c>)
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	4a04      	ldr	r2, [pc, #16]	; (80095a0 <LL_PWR_EnableBootC2+0x1c>)
 800958e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009592:	60d3      	str	r3, [r2, #12]
}
 8009594:	bf00      	nop
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	58000400 	.word	0x58000400

080095a4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80095ac:	4b06      	ldr	r3, [pc, #24]	; (80095c8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80095ae:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80095b2:	4905      	ldr	r1, [pc, #20]	; (80095c8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr
 80095c8:	58000800 	.word	0x58000800

080095cc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80095d4:	4b05      	ldr	r3, [pc, #20]	; (80095ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80095d6:	6a1a      	ldr	r2, [r3, #32]
 80095d8:	4904      	ldr	r1, [pc, #16]	; (80095ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4313      	orrs	r3, r2
 80095de:	620b      	str	r3, [r1, #32]
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr
 80095ec:	58000800 	.word	0x58000800

080095f0 <LL_AHB3_GRP1_EnableClock>:
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80095f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4313      	orrs	r3, r2
 8009606:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800960c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4013      	ands	r3, r2
 8009612:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009614:	68fb      	ldr	r3, [r7, #12]
}
 8009616:	bf00      	nop
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009622:	b480      	push	{r7}
 8009624:	b085      	sub	sp, #20
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800962a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800962e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8009632:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4313      	orrs	r3, r2
 800963a:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800963e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009642:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4013      	ands	r3, r2
 800964a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800964c:	68fb      	ldr	r3, [r7, #12]
}
 800964e:	bf00      	nop
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr

0800965a <LL_C1_IPCC_EnableIT_TXF>:
{
 800965a:	b480      	push	{r7}
 800965c:	b083      	sub	sp, #12
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	601a      	str	r2, [r3, #0]
}
 800966e:	bf00      	nop
 8009670:	370c      	adds	r7, #12
 8009672:	46bd      	mov	sp, r7
 8009674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009678:	4770      	bx	lr

0800967a <LL_C1_IPCC_EnableIT_RXO>:
{
 800967a:	b480      	push	{r7}
 800967c:	b083      	sub	sp, #12
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f043 0201 	orr.w	r2, r3, #1
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	601a      	str	r2, [r3, #0]
}
 800968e:	bf00      	nop
 8009690:	370c      	adds	r7, #12
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr

0800969a <LL_C1_IPCC_EnableTransmitChannel>:
{
 800969a:	b480      	push	{r7}
 800969c:	b083      	sub	sp, #12
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685a      	ldr	r2, [r3, #4]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	041b      	lsls	r3, r3, #16
 80096ac:	43db      	mvns	r3, r3
 80096ae:	401a      	ands	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	605a      	str	r2, [r3, #4]
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685a      	ldr	r2, [r3, #4]
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	041b      	lsls	r3, r3, #16
 80096d2:	431a      	orrs	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	605a      	str	r2, [r3, #4]
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685a      	ldr	r2, [r3, #4]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	43db      	mvns	r3, r3
 80096f6:	401a      	ands	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	605a      	str	r2, [r3, #4]
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	683a      	ldr	r2, [r7, #0]
 8009716:	609a      	str	r2, [r3, #8]
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <LL_C1_IPCC_SetFlag_CHx>:
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	041a      	lsls	r2, r3, #16
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	609a      	str	r2, [r3, #8]
}
 8009736:	bf00      	nop
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr

08009742 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8009742:	b480      	push	{r7}
 8009744:	b083      	sub	sp, #12
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	68da      	ldr	r2, [r3, #12]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	4013      	ands	r3, r2
 8009754:	683a      	ldr	r2, [r7, #0]
 8009756:	429a      	cmp	r2, r3
 8009758:	d101      	bne.n	800975e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800975a:	2301      	movs	r3, #1
 800975c:	e000      	b.n	8009760 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800975e:	2300      	movs	r3, #0
}
 8009760:	4618      	mov	r0, r3
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	69da      	ldr	r2, [r3, #28]
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	4013      	ands	r3, r2
 800977e:	683a      	ldr	r2, [r7, #0]
 8009780:	429a      	cmp	r2, r3
 8009782:	d101      	bne.n	8009788 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8009784:	2301      	movs	r3, #1
 8009786:	e000      	b.n	800978a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	370c      	adds	r7, #12
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
	...

08009798 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800979c:	2102      	movs	r1, #2
 800979e:	4818      	ldr	r0, [pc, #96]	; (8009800 <HW_IPCC_Rx_Handler+0x68>)
 80097a0:	f7ff ffe4 	bl	800976c <LL_C2_IPCC_IsActiveFlag_CHx>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d008      	beq.n	80097bc <HW_IPCC_Rx_Handler+0x24>
 80097aa:	4b15      	ldr	r3, [pc, #84]	; (8009800 <HW_IPCC_Rx_Handler+0x68>)
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	f003 0302 	and.w	r3, r3, #2
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d102      	bne.n	80097bc <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80097b6:	f000 f8d5 	bl	8009964 <HW_IPCC_SYS_EvtHandler>
 80097ba:	e01e      	b.n	80097fa <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80097bc:	2101      	movs	r1, #1
 80097be:	4810      	ldr	r0, [pc, #64]	; (8009800 <HW_IPCC_Rx_Handler+0x68>)
 80097c0:	f7ff ffd4 	bl	800976c <LL_C2_IPCC_IsActiveFlag_CHx>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d008      	beq.n	80097dc <HW_IPCC_Rx_Handler+0x44>
 80097ca:	4b0d      	ldr	r3, [pc, #52]	; (8009800 <HW_IPCC_Rx_Handler+0x68>)
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d102      	bne.n	80097dc <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80097d6:	f000 f889 	bl	80098ec <HW_IPCC_BLE_EvtHandler>
 80097da:	e00e      	b.n	80097fa <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80097dc:	2108      	movs	r1, #8
 80097de:	4808      	ldr	r0, [pc, #32]	; (8009800 <HW_IPCC_Rx_Handler+0x68>)
 80097e0:	f7ff ffc4 	bl	800976c <LL_C2_IPCC_IsActiveFlag_CHx>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d008      	beq.n	80097fc <HW_IPCC_Rx_Handler+0x64>
 80097ea:	4b05      	ldr	r3, [pc, #20]	; (8009800 <HW_IPCC_Rx_Handler+0x68>)
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	f003 0308 	and.w	r3, r3, #8
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d102      	bne.n	80097fc <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80097f6:	f000 f901 	bl	80099fc <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80097fa:	bf00      	nop
 80097fc:	bf00      	nop
}
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	58000c00 	.word	0x58000c00

08009804 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009808:	2102      	movs	r1, #2
 800980a:	4818      	ldr	r0, [pc, #96]	; (800986c <HW_IPCC_Tx_Handler+0x68>)
 800980c:	f7ff ff99 	bl	8009742 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d108      	bne.n	8009828 <HW_IPCC_Tx_Handler+0x24>
 8009816:	4b15      	ldr	r3, [pc, #84]	; (800986c <HW_IPCC_Tx_Handler+0x68>)
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800981e:	2b00      	cmp	r3, #0
 8009820:	d102      	bne.n	8009828 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8009822:	f000 f893 	bl	800994c <HW_IPCC_SYS_CmdEvtHandler>
 8009826:	e01e      	b.n	8009866 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009828:	2108      	movs	r1, #8
 800982a:	4810      	ldr	r0, [pc, #64]	; (800986c <HW_IPCC_Tx_Handler+0x68>)
 800982c:	f7ff ff89 	bl	8009742 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d108      	bne.n	8009848 <HW_IPCC_Tx_Handler+0x44>
 8009836:	4b0d      	ldr	r3, [pc, #52]	; (800986c <HW_IPCC_Tx_Handler+0x68>)
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800983e:	2b00      	cmp	r3, #0
 8009840:	d102      	bne.n	8009848 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009842:	f000 f8bd 	bl	80099c0 <HW_IPCC_MM_FreeBufHandler>
 8009846:	e00e      	b.n	8009866 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009848:	2120      	movs	r1, #32
 800984a:	4808      	ldr	r0, [pc, #32]	; (800986c <HW_IPCC_Tx_Handler+0x68>)
 800984c:	f7ff ff79 	bl	8009742 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009850:	4603      	mov	r3, r0
 8009852:	2b00      	cmp	r3, #0
 8009854:	d108      	bne.n	8009868 <HW_IPCC_Tx_Handler+0x64>
 8009856:	4b05      	ldr	r3, [pc, #20]	; (800986c <HW_IPCC_Tx_Handler+0x68>)
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800985e:	2b00      	cmp	r3, #0
 8009860:	d102      	bne.n	8009868 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009862:	f000 f84f 	bl	8009904 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8009866:	bf00      	nop
 8009868:	bf00      	nop
}
 800986a:	bd80      	pop	{r7, pc}
 800986c:	58000c00 	.word	0x58000c00

08009870 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009874:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8009878:	f7ff fed3 	bl	8009622 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800987c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009880:	f7ff fea4 	bl	80095cc <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8009884:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009888:	f7ff fe8c 	bl	80095a4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800988c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800988e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8009890:	f7ff fe78 	bl	8009584 <LL_PWR_EnableBootC2>

  return;
 8009894:	bf00      	nop
}
 8009896:	bd80      	pop	{r7, pc}

08009898 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800989c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80098a0:	f7ff fea6 	bl	80095f0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80098a4:	4806      	ldr	r0, [pc, #24]	; (80098c0 <HW_IPCC_Init+0x28>)
 80098a6:	f7ff fee8 	bl	800967a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80098aa:	4805      	ldr	r0, [pc, #20]	; (80098c0 <HW_IPCC_Init+0x28>)
 80098ac:	f7ff fed5 	bl	800965a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80098b0:	202c      	movs	r0, #44	; 0x2c
 80098b2:	f7fa f8f0 	bl	8003a96 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80098b6:	202d      	movs	r0, #45	; 0x2d
 80098b8:	f7fa f8ed 	bl	8003a96 <HAL_NVIC_EnableIRQ>

  return;
 80098bc:	bf00      	nop
}
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	58000c00 	.word	0x58000c00

080098c4 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80098c8:	2101      	movs	r1, #1
 80098ca:	4802      	ldr	r0, [pc, #8]	; (80098d4 <HW_IPCC_BLE_Init+0x10>)
 80098cc:	f7ff ff0a 	bl	80096e4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80098d0:	bf00      	nop
}
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	58000c00 	.word	0x58000c00

080098d8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 80098dc:	2101      	movs	r1, #1
 80098de:	4802      	ldr	r0, [pc, #8]	; (80098e8 <HW_IPCC_BLE_SendCmd+0x10>)
 80098e0:	f7ff ff20 	bl	8009724 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80098e4:	bf00      	nop
}
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	58000c00 	.word	0x58000c00

080098ec <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80098f0:	f7fe ff4a 	bl	8008788 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80098f4:	2101      	movs	r1, #1
 80098f6:	4802      	ldr	r0, [pc, #8]	; (8009900 <HW_IPCC_BLE_EvtHandler+0x14>)
 80098f8:	f7ff ff06 	bl	8009708 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80098fc:	bf00      	nop
}
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	58000c00 	.word	0x58000c00

08009904 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009904:	b580      	push	{r7, lr}
 8009906:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009908:	2120      	movs	r1, #32
 800990a:	4803      	ldr	r0, [pc, #12]	; (8009918 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800990c:	f7ff fed8 	bl	80096c0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009910:	f7fe ff6a 	bl	80087e8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009914:	bf00      	nop
}
 8009916:	bd80      	pop	{r7, pc}
 8009918:	58000c00 	.word	0x58000c00

0800991c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800991c:	b580      	push	{r7, lr}
 800991e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009920:	2102      	movs	r1, #2
 8009922:	4802      	ldr	r0, [pc, #8]	; (800992c <HW_IPCC_SYS_Init+0x10>)
 8009924:	f7ff fede 	bl	80096e4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009928:	bf00      	nop
}
 800992a:	bd80      	pop	{r7, pc}
 800992c:	58000c00 	.word	0x58000c00

08009930 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009934:	2102      	movs	r1, #2
 8009936:	4804      	ldr	r0, [pc, #16]	; (8009948 <HW_IPCC_SYS_SendCmd+0x18>)
 8009938:	f7ff fef4 	bl	8009724 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800993c:	2102      	movs	r1, #2
 800993e:	4802      	ldr	r0, [pc, #8]	; (8009948 <HW_IPCC_SYS_SendCmd+0x18>)
 8009940:	f7ff feab 	bl	800969a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009944:	bf00      	nop
}
 8009946:	bd80      	pop	{r7, pc}
 8009948:	58000c00 	.word	0x58000c00

0800994c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009950:	2102      	movs	r1, #2
 8009952:	4803      	ldr	r0, [pc, #12]	; (8009960 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009954:	f7ff feb4 	bl	80096c0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8009958:	f7fe ff96 	bl	8008888 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800995c:	bf00      	nop
}
 800995e:	bd80      	pop	{r7, pc}
 8009960:	58000c00 	.word	0x58000c00

08009964 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8009968:	f7fe ffa4 	bl	80088b4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800996c:	2102      	movs	r1, #2
 800996e:	4802      	ldr	r0, [pc, #8]	; (8009978 <HW_IPCC_SYS_EvtHandler+0x14>)
 8009970:	f7ff feca 	bl	8009708 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009974:	bf00      	nop
}
 8009976:	bd80      	pop	{r7, pc}
 8009978:	58000c00 	.word	0x58000c00

0800997c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b082      	sub	sp, #8
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009984:	2108      	movs	r1, #8
 8009986:	480c      	ldr	r0, [pc, #48]	; (80099b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009988:	f7ff fedb 	bl	8009742 <LL_C1_IPCC_IsActiveFlag_CHx>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d007      	beq.n	80099a2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8009992:	4a0a      	ldr	r2, [pc, #40]	; (80099bc <HW_IPCC_MM_SendFreeBuf+0x40>)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009998:	2108      	movs	r1, #8
 800999a:	4807      	ldr	r0, [pc, #28]	; (80099b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800999c:	f7ff fe7d 	bl	800969a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80099a0:	e006      	b.n	80099b0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80099a6:	2108      	movs	r1, #8
 80099a8:	4803      	ldr	r0, [pc, #12]	; (80099b8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80099aa:	f7ff febb 	bl	8009724 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80099ae:	bf00      	nop
}
 80099b0:	3708      	adds	r7, #8
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	58000c00 	.word	0x58000c00
 80099bc:	20000418 	.word	0x20000418

080099c0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80099c4:	2108      	movs	r1, #8
 80099c6:	4806      	ldr	r0, [pc, #24]	; (80099e0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80099c8:	f7ff fe7a 	bl	80096c0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80099cc:	4b05      	ldr	r3, [pc, #20]	; (80099e4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80099d2:	2108      	movs	r1, #8
 80099d4:	4802      	ldr	r0, [pc, #8]	; (80099e0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80099d6:	f7ff fea5 	bl	8009724 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80099da:	bf00      	nop
}
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	58000c00 	.word	0x58000c00
 80099e4:	20000418 	.word	0x20000418

080099e8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80099ec:	2108      	movs	r1, #8
 80099ee:	4802      	ldr	r0, [pc, #8]	; (80099f8 <HW_IPCC_TRACES_Init+0x10>)
 80099f0:	f7ff fe78 	bl	80096e4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80099f4:	bf00      	nop
}
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	58000c00 	.word	0x58000c00

080099fc <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009a00:	f7ff f800 	bl	8008a04 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009a04:	2108      	movs	r1, #8
 8009a06:	4802      	ldr	r0, [pc, #8]	; (8009a10 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009a08:	f7ff fe7e 	bl	8009708 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009a0c:	bf00      	nop
}
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	58000c00 	.word	0x58000c00

08009a14 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009a14:	b480      	push	{r7}
 8009a16:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009a18:	4b05      	ldr	r3, [pc, #20]	; (8009a30 <UTIL_LPM_Init+0x1c>)
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8009a1e:	4b05      	ldr	r3, [pc, #20]	; (8009a34 <UTIL_LPM_Init+0x20>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009a24:	bf00      	nop
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	2000041c 	.word	0x2000041c
 8009a34:	20000420 	.word	0x20000420

08009a38 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b087      	sub	sp, #28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	460b      	mov	r3, r1
 8009a42:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a44:	f3ef 8310 	mrs	r3, PRIMASK
 8009a48:	613b      	str	r3, [r7, #16]
  return(result);
 8009a4a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8009a4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a4e:	b672      	cpsid	i
}
 8009a50:	bf00      	nop
  
  switch(state)
 8009a52:	78fb      	ldrb	r3, [r7, #3]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d008      	beq.n	8009a6a <UTIL_LPM_SetOffMode+0x32>
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d10e      	bne.n	8009a7a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8009a5c:	4b0d      	ldr	r3, [pc, #52]	; (8009a94 <UTIL_LPM_SetOffMode+0x5c>)
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	4a0b      	ldr	r2, [pc, #44]	; (8009a94 <UTIL_LPM_SetOffMode+0x5c>)
 8009a66:	6013      	str	r3, [r2, #0]
      break;
 8009a68:	e008      	b.n	8009a7c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	43da      	mvns	r2, r3
 8009a6e:	4b09      	ldr	r3, [pc, #36]	; (8009a94 <UTIL_LPM_SetOffMode+0x5c>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4013      	ands	r3, r2
 8009a74:	4a07      	ldr	r2, [pc, #28]	; (8009a94 <UTIL_LPM_SetOffMode+0x5c>)
 8009a76:	6013      	str	r3, [r2, #0]
      break;
 8009a78:	e000      	b.n	8009a7c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8009a7a:	bf00      	nop
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f383 8810 	msr	PRIMASK, r3
}
 8009a86:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8009a88:	bf00      	nop
 8009a8a:	371c      	adds	r7, #28
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	20000420 	.word	0x20000420

08009a98 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8009aa2:	60bb      	str	r3, [r7, #8]
  return(result);
 8009aa4:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8009aa6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8009aa8:	b672      	cpsid	i
}
 8009aaa:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8009aac:	4b12      	ldr	r3, [pc, #72]	; (8009af8 <UTIL_LPM_EnterLowPower+0x60>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d006      	beq.n	8009ac2 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8009ab4:	4b11      	ldr	r3, [pc, #68]	; (8009afc <UTIL_LPM_EnterLowPower+0x64>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8009aba:	4b10      	ldr	r3, [pc, #64]	; (8009afc <UTIL_LPM_EnterLowPower+0x64>)
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	4798      	blx	r3
 8009ac0:	e010      	b.n	8009ae4 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8009ac2:	4b0f      	ldr	r3, [pc, #60]	; (8009b00 <UTIL_LPM_EnterLowPower+0x68>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d006      	beq.n	8009ad8 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8009aca:	4b0c      	ldr	r3, [pc, #48]	; (8009afc <UTIL_LPM_EnterLowPower+0x64>)
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8009ad0:	4b0a      	ldr	r3, [pc, #40]	; (8009afc <UTIL_LPM_EnterLowPower+0x64>)
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	4798      	blx	r3
 8009ad6:	e005      	b.n	8009ae4 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8009ad8:	4b08      	ldr	r3, [pc, #32]	; (8009afc <UTIL_LPM_EnterLowPower+0x64>)
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8009ade:	4b07      	ldr	r3, [pc, #28]	; (8009afc <UTIL_LPM_EnterLowPower+0x64>)
 8009ae0:	695b      	ldr	r3, [r3, #20]
 8009ae2:	4798      	blx	r3
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f383 8810 	msr	PRIMASK, r3
}
 8009aee:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8009af0:	bf00      	nop
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	2000041c 	.word	0x2000041c
 8009afc:	0800a1d0 	.word	0x0800a1d0
 8009b00:	20000420 	.word	0x20000420

08009b04 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b090      	sub	sp, #64	; 0x40
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009b0c:	4b73      	ldr	r3, [pc, #460]	; (8009cdc <UTIL_SEQ_Run+0x1d8>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8009b12:	4b72      	ldr	r3, [pc, #456]	; (8009cdc <UTIL_SEQ_Run+0x1d8>)
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4013      	ands	r3, r2
 8009b1a:	4a70      	ldr	r2, [pc, #448]	; (8009cdc <UTIL_SEQ_Run+0x1d8>)
 8009b1c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8009b1e:	4b70      	ldr	r3, [pc, #448]	; (8009ce0 <UTIL_SEQ_Run+0x1dc>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009b24:	4b6f      	ldr	r3, [pc, #444]	; (8009ce4 <UTIL_SEQ_Run+0x1e0>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009b2a:	4b6f      	ldr	r3, [pc, #444]	; (8009ce8 <UTIL_SEQ_Run+0x1e4>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8009b30:	4b6e      	ldr	r3, [pc, #440]	; (8009cec <UTIL_SEQ_Run+0x1e8>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009b36:	e08d      	b.n	8009c54 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009b3c:	e002      	b.n	8009b44 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8009b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b40:	3301      	adds	r3, #1
 8009b42:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009b44:	4a6a      	ldr	r2, [pc, #424]	; (8009cf0 <UTIL_SEQ_Run+0x1ec>)
 8009b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b48:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4e:	401a      	ands	r2, r3
 8009b50:	4b62      	ldr	r3, [pc, #392]	; (8009cdc <UTIL_SEQ_Run+0x1d8>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4013      	ands	r3, r2
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d0f1      	beq.n	8009b3e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8009b5a:	4a65      	ldr	r2, [pc, #404]	; (8009cf0 <UTIL_SEQ_Run+0x1ec>)
 8009b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b5e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b64:	401a      	ands	r2, r3
 8009b66:	4b5d      	ldr	r3, [pc, #372]	; (8009cdc <UTIL_SEQ_Run+0x1d8>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4013      	ands	r3, r2
 8009b6c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009b6e:	4a60      	ldr	r2, [pc, #384]	; (8009cf0 <UTIL_SEQ_Run+0x1ec>)
 8009b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b72:	00db      	lsls	r3, r3, #3
 8009b74:	4413      	add	r3, r2
 8009b76:	685a      	ldr	r2, [r3, #4]
 8009b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d106      	bne.n	8009b8e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009b80:	4a5b      	ldr	r2, [pc, #364]	; (8009cf0 <UTIL_SEQ_Run+0x1ec>)
 8009b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b84:	00db      	lsls	r3, r3, #3
 8009b86:	4413      	add	r3, r2
 8009b88:	f04f 32ff 	mov.w	r2, #4294967295
 8009b8c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009b8e:	4a58      	ldr	r2, [pc, #352]	; (8009cf0 <UTIL_SEQ_Run+0x1ec>)
 8009b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b92:	00db      	lsls	r3, r3, #3
 8009b94:	4413      	add	r3, r2
 8009b96:	685a      	ldr	r2, [r3, #4]
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9a:	4013      	ands	r3, r2
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 f9b3 	bl	8009f08 <SEQ_BitPosition>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	4b53      	ldr	r3, [pc, #332]	; (8009cf4 <UTIL_SEQ_Run+0x1f0>)
 8009ba8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009baa:	4a51      	ldr	r2, [pc, #324]	; (8009cf0 <UTIL_SEQ_Run+0x1ec>)
 8009bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bae:	00db      	lsls	r3, r3, #3
 8009bb0:	4413      	add	r3, r2
 8009bb2:	685a      	ldr	r2, [r3, #4]
 8009bb4:	4b4f      	ldr	r3, [pc, #316]	; (8009cf4 <UTIL_SEQ_Run+0x1f0>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2101      	movs	r1, #1
 8009bba:	fa01 f303 	lsl.w	r3, r1, r3
 8009bbe:	43db      	mvns	r3, r3
 8009bc0:	401a      	ands	r2, r3
 8009bc2:	494b      	ldr	r1, [pc, #300]	; (8009cf0 <UTIL_SEQ_Run+0x1ec>)
 8009bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bc6:	00db      	lsls	r3, r3, #3
 8009bc8:	440b      	add	r3, r1
 8009bca:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8009bd0:	61bb      	str	r3, [r7, #24]
  return(result);
 8009bd2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009bd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bd6:	b672      	cpsid	i
}
 8009bd8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8009bda:	4b46      	ldr	r3, [pc, #280]	; (8009cf4 <UTIL_SEQ_Run+0x1f0>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2201      	movs	r2, #1
 8009be0:	fa02 f303 	lsl.w	r3, r2, r3
 8009be4:	43da      	mvns	r2, r3
 8009be6:	4b3e      	ldr	r3, [pc, #248]	; (8009ce0 <UTIL_SEQ_Run+0x1dc>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4013      	ands	r3, r2
 8009bec:	4a3c      	ldr	r2, [pc, #240]	; (8009ce0 <UTIL_SEQ_Run+0x1dc>)
 8009bee:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bf4:	e013      	b.n	8009c1e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8009bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	4a3d      	ldr	r2, [pc, #244]	; (8009cf0 <UTIL_SEQ_Run+0x1ec>)
 8009bfc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009c00:	4b3c      	ldr	r3, [pc, #240]	; (8009cf4 <UTIL_SEQ_Run+0x1f0>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2201      	movs	r2, #1
 8009c06:	fa02 f303 	lsl.w	r3, r2, r3
 8009c0a:	43da      	mvns	r2, r3
 8009c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	400a      	ands	r2, r1
 8009c12:	4937      	ldr	r1, [pc, #220]	; (8009cf0 <UTIL_SEQ_Run+0x1ec>)
 8009c14:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1e8      	bne.n	8009bf6 <UTIL_SEQ_Run+0xf2>
 8009c24:	6a3b      	ldr	r3, [r7, #32]
 8009c26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f383 8810 	msr	PRIMASK, r3
}
 8009c2e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8009c30:	4b30      	ldr	r3, [pc, #192]	; (8009cf4 <UTIL_SEQ_Run+0x1f0>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a30      	ldr	r2, [pc, #192]	; (8009cf8 <UTIL_SEQ_Run+0x1f4>)
 8009c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c3a:	4798      	blx	r3

    local_taskset = TaskSet;
 8009c3c:	4b28      	ldr	r3, [pc, #160]	; (8009ce0 <UTIL_SEQ_Run+0x1dc>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8009c42:	4b28      	ldr	r3, [pc, #160]	; (8009ce4 <UTIL_SEQ_Run+0x1e0>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8009c48:	4b27      	ldr	r3, [pc, #156]	; (8009ce8 <UTIL_SEQ_Run+0x1e4>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8009c4e:	4b27      	ldr	r3, [pc, #156]	; (8009cec <UTIL_SEQ_Run+0x1e8>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009c54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c58:	401a      	ands	r2, r3
 8009c5a:	4b20      	ldr	r3, [pc, #128]	; (8009cdc <UTIL_SEQ_Run+0x1d8>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4013      	ands	r3, r2
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d005      	beq.n	8009c70 <UTIL_SEQ_Run+0x16c>
 8009c64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c68:	4013      	ands	r3, r2
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f43f af64 	beq.w	8009b38 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009c70:	4b20      	ldr	r3, [pc, #128]	; (8009cf4 <UTIL_SEQ_Run+0x1f0>)
 8009c72:	f04f 32ff 	mov.w	r2, #4294967295
 8009c76:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009c78:	f000 f938 	bl	8009eec <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8009c80:	613b      	str	r3, [r7, #16]
  return(result);
 8009c82:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8009c84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c86:	b672      	cpsid	i
}
 8009c88:	bf00      	nop
  local_taskset = TaskSet;
 8009c8a:	4b15      	ldr	r3, [pc, #84]	; (8009ce0 <UTIL_SEQ_Run+0x1dc>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8009c90:	4b14      	ldr	r3, [pc, #80]	; (8009ce4 <UTIL_SEQ_Run+0x1e0>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8009c96:	4b14      	ldr	r3, [pc, #80]	; (8009ce8 <UTIL_SEQ_Run+0x1e4>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8009c9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca0:	401a      	ands	r2, r3
 8009ca2:	4b0e      	ldr	r3, [pc, #56]	; (8009cdc <UTIL_SEQ_Run+0x1d8>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d107      	bne.n	8009cbc <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8009cac:	4b0f      	ldr	r3, [pc, #60]	; (8009cec <UTIL_SEQ_Run+0x1e8>)
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d101      	bne.n	8009cbc <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8009cb8:	f7f6 fe4b 	bl	8000952 <UTIL_SEQ_Idle>
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f383 8810 	msr	PRIMASK, r3
}
 8009cc6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8009cc8:	f000 f917 	bl	8009efa <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009ccc:	4a03      	ldr	r2, [pc, #12]	; (8009cdc <UTIL_SEQ_Run+0x1d8>)
 8009cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd0:	6013      	str	r3, [r2, #0]

  return;
 8009cd2:	bf00      	nop
}
 8009cd4:	3740      	adds	r7, #64	; 0x40
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	20000020 	.word	0x20000020
 8009ce0:	20000424 	.word	0x20000424
 8009ce4:	20000428 	.word	0x20000428
 8009ce8:	2000001c 	.word	0x2000001c
 8009cec:	2000042c 	.word	0x2000042c
 8009cf0:	200004b4 	.word	0x200004b4
 8009cf4:	20000430 	.word	0x20000430
 8009cf8:	20000434 	.word	0x20000434

08009cfc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b088      	sub	sp, #32
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d08:	f3ef 8310 	mrs	r3, PRIMASK
 8009d0c:	617b      	str	r3, [r7, #20]
  return(result);
 8009d0e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009d10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d12:	b672      	cpsid	i
}
 8009d14:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 f8f6 	bl	8009f08 <SEQ_BitPosition>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	4619      	mov	r1, r3
 8009d20:	4a06      	ldr	r2, [pc, #24]	; (8009d3c <UTIL_SEQ_RegTask+0x40>)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d2c:	69bb      	ldr	r3, [r7, #24]
 8009d2e:	f383 8810 	msr	PRIMASK, r3
}
 8009d32:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009d34:	bf00      	nop
}
 8009d36:	3720      	adds	r7, #32
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}
 8009d3c:	20000434 	.word	0x20000434

08009d40 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8009d40:	b480      	push	{r7}
 8009d42:	b087      	sub	sp, #28
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8009d4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d50:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009d52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d54:	b672      	cpsid	i
}
 8009d56:	bf00      	nop

  TaskSet |= TaskId_bm;
 8009d58:	4b0d      	ldr	r3, [pc, #52]	; (8009d90 <UTIL_SEQ_SetTask+0x50>)
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	4a0b      	ldr	r2, [pc, #44]	; (8009d90 <UTIL_SEQ_SetTask+0x50>)
 8009d62:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8009d64:	4a0b      	ldr	r2, [pc, #44]	; (8009d94 <UTIL_SEQ_SetTask+0x54>)
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	431a      	orrs	r2, r3
 8009d70:	4908      	ldr	r1, [pc, #32]	; (8009d94 <UTIL_SEQ_SetTask+0x54>)
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	f383 8810 	msr	PRIMASK, r3
}
 8009d82:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009d84:	bf00      	nop
}
 8009d86:	371c      	adds	r7, #28
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr
 8009d90:	20000424 	.word	0x20000424
 8009d94:	200004b4 	.word	0x200004b4

08009d98 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b087      	sub	sp, #28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009da0:	f3ef 8310 	mrs	r3, PRIMASK
 8009da4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009da6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009da8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009daa:	b672      	cpsid	i
}
 8009dac:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	43da      	mvns	r2, r3
 8009db2:	4b08      	ldr	r3, [pc, #32]	; (8009dd4 <UTIL_SEQ_PauseTask+0x3c>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4013      	ands	r3, r2
 8009db8:	4a06      	ldr	r2, [pc, #24]	; (8009dd4 <UTIL_SEQ_PauseTask+0x3c>)
 8009dba:	6013      	str	r3, [r2, #0]
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	f383 8810 	msr	PRIMASK, r3
}
 8009dc6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009dc8:	bf00      	nop
}
 8009dca:	371c      	adds	r7, #28
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr
 8009dd4:	2000001c 	.word	0x2000001c

08009dd8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b087      	sub	sp, #28
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009de0:	f3ef 8310 	mrs	r3, PRIMASK
 8009de4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009de6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009de8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009dea:	b672      	cpsid	i
}
 8009dec:	bf00      	nop

  TaskMask |= TaskId_bm;
 8009dee:	4b09      	ldr	r3, [pc, #36]	; (8009e14 <UTIL_SEQ_ResumeTask+0x3c>)
 8009df0:	681a      	ldr	r2, [r3, #0]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	4a07      	ldr	r2, [pc, #28]	; (8009e14 <UTIL_SEQ_ResumeTask+0x3c>)
 8009df8:	6013      	str	r3, [r2, #0]
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	f383 8810 	msr	PRIMASK, r3
}
 8009e04:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009e06:	bf00      	nop
}
 8009e08:	371c      	adds	r7, #28
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	2000001c 	.word	0x2000001c

08009e18 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b087      	sub	sp, #28
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009e20:	f3ef 8310 	mrs	r3, PRIMASK
 8009e24:	60fb      	str	r3, [r7, #12]
  return(result);
 8009e26:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009e28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e2a:	b672      	cpsid	i
}
 8009e2c:	bf00      	nop

  EvtSet |= EvtId_bm;
 8009e2e:	4b09      	ldr	r3, [pc, #36]	; (8009e54 <UTIL_SEQ_SetEvt+0x3c>)
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	4a07      	ldr	r2, [pc, #28]	; (8009e54 <UTIL_SEQ_SetEvt+0x3c>)
 8009e38:	6013      	str	r3, [r2, #0]
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	f383 8810 	msr	PRIMASK, r3
}
 8009e44:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009e46:	bf00      	nop
}
 8009e48:	371c      	adds	r7, #28
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	20000428 	.word	0x20000428

08009e58 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b088      	sub	sp, #32
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8009e60:	4b1f      	ldr	r3, [pc, #124]	; (8009ee0 <UTIL_SEQ_WaitEvt+0x88>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8009e66:	4b1e      	ldr	r3, [pc, #120]	; (8009ee0 <UTIL_SEQ_WaitEvt+0x88>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e6e:	d102      	bne.n	8009e76 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8009e70:	2300      	movs	r3, #0
 8009e72:	61fb      	str	r3, [r7, #28]
 8009e74:	e005      	b.n	8009e82 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8009e76:	4b1a      	ldr	r3, [pc, #104]	; (8009ee0 <UTIL_SEQ_WaitEvt+0x88>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e80:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8009e82:	4b18      	ldr	r3, [pc, #96]	; (8009ee4 <UTIL_SEQ_WaitEvt+0x8c>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8009e88:	4a16      	ldr	r2, [pc, #88]	; (8009ee4 <UTIL_SEQ_WaitEvt+0x8c>)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8009e8e:	e003      	b.n	8009e98 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8009e90:	6879      	ldr	r1, [r7, #4]
 8009e92:	69f8      	ldr	r0, [r7, #28]
 8009e94:	f7f6 fd63 	bl	800095e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8009e98:	4b13      	ldr	r3, [pc, #76]	; (8009ee8 <UTIL_SEQ_WaitEvt+0x90>)
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d0f5      	beq.n	8009e90 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009ea4:	4a0e      	ldr	r2, [pc, #56]	; (8009ee0 <UTIL_SEQ_WaitEvt+0x88>)
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8009eae:	60bb      	str	r3, [r7, #8]
  return(result);
 8009eb0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009eb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009eb4:	b672      	cpsid	i
}
 8009eb6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	43da      	mvns	r2, r3
 8009ebc:	4b0a      	ldr	r3, [pc, #40]	; (8009ee8 <UTIL_SEQ_WaitEvt+0x90>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	4a09      	ldr	r2, [pc, #36]	; (8009ee8 <UTIL_SEQ_WaitEvt+0x90>)
 8009ec4:	6013      	str	r3, [r2, #0]
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f383 8810 	msr	PRIMASK, r3
}
 8009ed0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8009ed2:	4a04      	ldr	r2, [pc, #16]	; (8009ee4 <UTIL_SEQ_WaitEvt+0x8c>)
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	6013      	str	r3, [r2, #0]
  return;
 8009ed8:	bf00      	nop
}
 8009eda:	3720      	adds	r7, #32
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	20000430 	.word	0x20000430
 8009ee4:	2000042c 	.word	0x2000042c
 8009ee8:	20000428 	.word	0x20000428

08009eec <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009eec:	b480      	push	{r7}
 8009eee:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009ef0:	bf00      	nop
}
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009efa:	b480      	push	{r7}
 8009efc:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8009efe:	bf00      	nop
}
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8009f10:	2300      	movs	r3, #0
 8009f12:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	0c1b      	lsrs	r3, r3, #16
 8009f1c:	041b      	lsls	r3, r3, #16
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d104      	bne.n	8009f2c <SEQ_BitPosition+0x24>
 8009f22:	2310      	movs	r3, #16
 8009f24:	73fb      	strb	r3, [r7, #15]
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	041b      	lsls	r3, r3, #16
 8009f2a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d105      	bne.n	8009f42 <SEQ_BitPosition+0x3a>
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
 8009f38:	3308      	adds	r3, #8
 8009f3a:	73fb      	strb	r3, [r7, #15]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	021b      	lsls	r3, r3, #8
 8009f40:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d105      	bne.n	8009f58 <SEQ_BitPosition+0x50>
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
 8009f4e:	3304      	adds	r3, #4
 8009f50:	73fb      	strb	r3, [r7, #15]
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	011b      	lsls	r3, r3, #4
 8009f56:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	0f1b      	lsrs	r3, r3, #28
 8009f5c:	4a07      	ldr	r2, [pc, #28]	; (8009f7c <SEQ_BitPosition+0x74>)
 8009f5e:	5cd2      	ldrb	r2, [r2, r3]
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
 8009f62:	4413      	add	r3, r2
 8009f64:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	f1c3 031f 	rsb	r3, r3, #31
 8009f6c:	b2db      	uxtb	r3, r3
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3714      	adds	r7, #20
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	0800a290 	.word	0x0800a290

08009f80 <memset>:
 8009f80:	4402      	add	r2, r0
 8009f82:	4603      	mov	r3, r0
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d100      	bne.n	8009f8a <memset+0xa>
 8009f88:	4770      	bx	lr
 8009f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f8e:	e7f9      	b.n	8009f84 <memset+0x4>

08009f90 <__libc_init_array>:
 8009f90:	b570      	push	{r4, r5, r6, lr}
 8009f92:	4d0d      	ldr	r5, [pc, #52]	; (8009fc8 <__libc_init_array+0x38>)
 8009f94:	4c0d      	ldr	r4, [pc, #52]	; (8009fcc <__libc_init_array+0x3c>)
 8009f96:	1b64      	subs	r4, r4, r5
 8009f98:	10a4      	asrs	r4, r4, #2
 8009f9a:	2600      	movs	r6, #0
 8009f9c:	42a6      	cmp	r6, r4
 8009f9e:	d109      	bne.n	8009fb4 <__libc_init_array+0x24>
 8009fa0:	4d0b      	ldr	r5, [pc, #44]	; (8009fd0 <__libc_init_array+0x40>)
 8009fa2:	4c0c      	ldr	r4, [pc, #48]	; (8009fd4 <__libc_init_array+0x44>)
 8009fa4:	f000 f826 	bl	8009ff4 <_init>
 8009fa8:	1b64      	subs	r4, r4, r5
 8009faa:	10a4      	asrs	r4, r4, #2
 8009fac:	2600      	movs	r6, #0
 8009fae:	42a6      	cmp	r6, r4
 8009fb0:	d105      	bne.n	8009fbe <__libc_init_array+0x2e>
 8009fb2:	bd70      	pop	{r4, r5, r6, pc}
 8009fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fb8:	4798      	blx	r3
 8009fba:	3601      	adds	r6, #1
 8009fbc:	e7ee      	b.n	8009f9c <__libc_init_array+0xc>
 8009fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fc2:	4798      	blx	r3
 8009fc4:	3601      	adds	r6, #1
 8009fc6:	e7f2      	b.n	8009fae <__libc_init_array+0x1e>
 8009fc8:	0800a2a0 	.word	0x0800a2a0
 8009fcc:	0800a2a0 	.word	0x0800a2a0
 8009fd0:	0800a2a0 	.word	0x0800a2a0
 8009fd4:	0800a2a4 	.word	0x0800a2a4

08009fd8 <memcpy>:
 8009fd8:	440a      	add	r2, r1
 8009fda:	4291      	cmp	r1, r2
 8009fdc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fe0:	d100      	bne.n	8009fe4 <memcpy+0xc>
 8009fe2:	4770      	bx	lr
 8009fe4:	b510      	push	{r4, lr}
 8009fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fee:	4291      	cmp	r1, r2
 8009ff0:	d1f9      	bne.n	8009fe6 <memcpy+0xe>
 8009ff2:	bd10      	pop	{r4, pc}

08009ff4 <_init>:
 8009ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff6:	bf00      	nop
 8009ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ffa:	bc08      	pop	{r3}
 8009ffc:	469e      	mov	lr, r3
 8009ffe:	4770      	bx	lr

0800a000 <_fini>:
 800a000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a002:	bf00      	nop
 800a004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a006:	bc08      	pop	{r3}
 800a008:	469e      	mov	lr, r3
 800a00a:	4770      	bx	lr
