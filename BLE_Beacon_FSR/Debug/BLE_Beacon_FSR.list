
BLE_Beacon_FSR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007364  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  080074a0  080074a0  000174a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007730  08007730  00017730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007734  08007734  00017734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000004  08007738  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000024  08007758  00020024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  200000c0  080077f1  000200c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000f8  08007826  000200f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000010c  08007837  0002010c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08007837  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 MB_MEM2       00000883  200301e4  200301e4  00030000  2**2
                  ALLOC
 15 .debug_info   000270bb  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005ab7  00000000  00000000  000471f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000023e0  00000000  00000000  0004ccb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00002138  00000000  00000000  0004f090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00026932  00000000  00000000  000511c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000257e8  00000000  00000000  00077afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ce1ee  00000000  00000000  0009d2e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000050  00000000  00000000  0016b4d0  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00009354  00000000  00000000  0016b520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000010c 	.word	0x2000010c
 8000158:	00000000 	.word	0x00000000
 800015c:	08007488 	.word	0x08007488

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000110 	.word	0x20000110
 8000178:	08007488 	.word	0x08007488

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000192:	4b15      	ldr	r3, [pc, #84]	; (80001e8 <APPD_EnableCPU2+0x5c>)
 8000194:	881a      	ldrh	r2, [r3, #0]
 8000196:	4b15      	ldr	r3, [pc, #84]	; (80001ec <APPD_EnableCPU2+0x60>)
 8000198:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800019a:	4b15      	ldr	r3, [pc, #84]	; (80001f0 <APPD_EnableCPU2+0x64>)
 800019c:	881a      	ldrh	r2, [r3, #0]
 800019e:	4b13      	ldr	r3, [pc, #76]	; (80001ec <APPD_EnableCPU2+0x60>)
 80001a0:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 80001a2:	4b14      	ldr	r3, [pc, #80]	; (80001f4 <APPD_EnableCPU2+0x68>)
 80001a4:	881a      	ldrh	r2, [r3, #0]
 80001a6:	4b11      	ldr	r3, [pc, #68]	; (80001ec <APPD_EnableCPU2+0x60>)
 80001a8:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 80001aa:	4b13      	ldr	r3, [pc, #76]	; (80001f8 <APPD_EnableCPU2+0x6c>)
 80001ac:	881a      	ldrh	r2, [r3, #0]
 80001ae:	4b0f      	ldr	r3, [pc, #60]	; (80001ec <APPD_EnableCPU2+0x60>)
 80001b0:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 80001b2:	4b12      	ldr	r3, [pc, #72]	; (80001fc <APPD_EnableCPU2+0x70>)
 80001b4:	881a      	ldrh	r2, [r3, #0]
 80001b6:	4b0d      	ldr	r3, [pc, #52]	; (80001ec <APPD_EnableCPU2+0x60>)
 80001b8:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80001ba:	4b11      	ldr	r3, [pc, #68]	; (8000200 <APPD_EnableCPU2+0x74>)
 80001bc:	1d3c      	adds	r4, r7, #4
 80001be:	461d      	mov	r5, r3
 80001c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001c8:	c403      	stmia	r4!, {r0, r1}
 80001ca:	8022      	strh	r2, [r4, #0]
 80001cc:	3402      	adds	r4, #2
 80001ce:	0c13      	lsrs	r3, r2, #16
 80001d0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001d2:	f005 ff55 	bl	8006080 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	4618      	mov	r0, r3
 80001da:	f005 f9f0 	bl	80055be <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001de:	bf00      	nop
}
 80001e0:	3720      	adds	r7, #32
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bdb0      	pop	{r4, r5, r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000004 	.word	0x20000004
 80001ec:	200301e8 	.word	0x200301e8
 80001f0:	20000006 	.word	0x20000006
 80001f4:	20000008 	.word	0x20000008
 80001f8:	2000000a 	.word	0x2000000a
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	080074a0 	.word	0x080074a0

08000204 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800020c:	4b06      	ldr	r3, [pc, #24]	; (8000228 <LL_EXTI_EnableIT_32_63+0x24>)
 800020e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000212:	4905      	ldr	r1, [pc, #20]	; (8000228 <LL_EXTI_EnableIT_32_63+0x24>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	4313      	orrs	r3, r2
 8000218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800021c:	bf00      	nop
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	58000800 	.word	0x58000800

0800022c <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 8000230:	4b05      	ldr	r3, [pc, #20]	; (8000248 <LL_PWR_SMPS_Enable+0x1c>)
 8000232:	69db      	ldr	r3, [r3, #28]
 8000234:	4a04      	ldr	r2, [pc, #16]	; (8000248 <LL_PWR_SMPS_Enable+0x1c>)
 8000236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800023a:	61d3      	str	r3, [r2, #28]
}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	58000400 	.word	0x58000400

0800024c <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8000254:	4b06      	ldr	r3, [pc, #24]	; (8000270 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8000256:	69db      	ldr	r3, [r3, #28]
 8000258:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800025c:	4904      	ldr	r1, [pc, #16]	; (8000270 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4313      	orrs	r3, r2
 8000262:	61cb      	str	r3, [r1, #28]
}
 8000264:	bf00      	nop
 8000266:	370c      	adds	r7, #12
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr
 8000270:	58000400 	.word	0x58000400

08000274 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8000274:	b480      	push	{r7}
 8000276:	b087      	sub	sp, #28
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 800027c:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	0a1b      	lsrs	r3, r3, #8
 8000282:	f003 030f 	and.w	r3, r3, #15
 8000286:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if(OutputVoltageLevel_calibration == 0UL)
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d108      	bne.n	80002a0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */
    
    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 800028e:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000290:	69db      	ldr	r3, [r3, #28]
 8000292:	f023 020f 	bic.w	r2, r3, #15
 8000296:	4913      	ldr	r1, [pc, #76]	; (80002e4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	4313      	orrs	r3, r2
 800029c:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 800029e:	e019      	b.n	80002d4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	3b06      	subs	r3, #6
 80002a4:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	693a      	ldr	r2, [r7, #16]
 80002aa:	4413      	add	r3, r2
 80002ac:	617b      	str	r3, [r7, #20]
    if(OutputVoltageLevelTrimmed < 0)
 80002ae:	697b      	ldr	r3, [r7, #20]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	da02      	bge.n	80002ba <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	617b      	str	r3, [r7, #20]
 80002b8:	e004      	b.n	80002c4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if(OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 80002ba:	697b      	ldr	r3, [r7, #20]
 80002bc:	2b0f      	cmp	r3, #15
 80002be:	dd01      	ble.n	80002c4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 80002c0:	230f      	movs	r3, #15
 80002c2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 80002c4:	4b07      	ldr	r3, [pc, #28]	; (80002e4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80002c6:	69db      	ldr	r3, [r3, #28]
 80002c8:	f023 020f 	bic.w	r2, r3, #15
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	4905      	ldr	r1, [pc, #20]	; (80002e4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80002d0:	4313      	orrs	r3, r2
 80002d2:	61cb      	str	r3, [r1, #28]
}
 80002d4:	bf00      	nop
 80002d6:	371c      	adds	r7, #28
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	1fff7558 	.word	0x1fff7558
 80002e4:	58000400 	.word	0x58000400

080002e8 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <LL_C2_PWR_SetPowerMode+0x28>)
 80002f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80002f6:	f023 0207 	bic.w	r2, r3, #7
 80002fa:	4905      	ldr	r1, [pc, #20]	; (8000310 <LL_C2_PWR_SetPowerMode+0x28>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	4313      	orrs	r3, r2
 8000300:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	58000400 	.word	0x58000400

08000314 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800031c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000320:	4a0a      	ldr	r2, [pc, #40]	; (800034c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000322:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800032a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800032e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	021b      	lsls	r3, r3, #8
 8000336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800033a:	4313      	orrs	r3, r2
 800033c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000340:	bf00      	nop
 8000342:	370c      	adds	r7, #12
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	cafecafe 	.word	0xcafecafe

08000350 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800035c:	689b      	ldr	r3, [r3, #8]
 800035e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4313      	orrs	r3, r2
 800036a:	608b      	str	r3, [r1, #8]
}
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr

08000378 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800037c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000384:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800038c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr

0800039a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800039e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80003a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80003aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80003c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80003c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80003cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80003d0:	d101      	bne.n	80003d6 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80003d2:	2301      	movs	r3, #1
 80003d4:	e000      	b.n	80003d8 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80003d6:	2300      	movs	r3, #0
}
 80003d8:	4618      	mov	r0, r3
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr

080003e2 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80003e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80003ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80003f6:	d101      	bne.n	80003fc <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80003f8:	2301      	movs	r3, #1
 80003fa:	e000      	b.n	80003fe <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80003fc:	2300      	movs	r3, #0
}
 80003fe:	4618      	mov	r0, r3
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000414:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000416:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4313      	orrs	r3, r2
 800041e:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000424:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4013      	ands	r3, r2
 800042a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800042c:	68fb      	ldr	r3, [r7, #12]
}
 800042e:	bf00      	nop
 8000430:	3714      	adds	r7, #20
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
	...

0800043c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <LL_DBGMCU_GetRevisionID+0x18>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	0c1b      	lsrs	r3, r3, #16
 8000446:	b29b      	uxth	r3, r3
}
 8000448:	4618      	mov	r0, r3
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	e0042000 	.word	0xe0042000

08000458 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	685a      	ldr	r2, [r3, #4]
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	041b      	lsls	r3, r3, #16
 800046a:	431a      	orrs	r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	605a      	str	r2, [r3, #4]
}
 8000470:	bf00      	nop
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
 8000484:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	685a      	ldr	r2, [r3, #4]
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	431a      	orrs	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	605a      	str	r2, [r3, #4]
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr

0800049e <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800049e:	b480      	push	{r7}
 80004a0:	b083      	sub	sp, #12
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
 80004a6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	695a      	ldr	r2, [r3, #20]
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	041b      	lsls	r3, r3, #16
 80004b0:	431a      	orrs	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	615a      	str	r2, [r3, #20]
}
 80004b6:	bf00      	nop
 80004b8:	370c      	adds	r7, #12
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr

080004c2 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80004c2:	b480      	push	{r7}
 80004c4:	b083      	sub	sp, #12
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	695a      	ldr	r2, [r3, #20]
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	431a      	orrs	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	615a      	str	r2, [r3, #20]
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	683a      	ldr	r2, [r7, #0]
 80004f2:	609a      	str	r2, [r3, #8]
}
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	683a      	ldr	r2, [r7, #0]
 800050e:	619a      	str	r2, [r3, #24]
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	22ff      	movs	r2, #255	; 0xff
 8000528:	625a      	str	r2, [r3, #36]	; 0x24
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr

08000536 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000536:	b480      	push	{r7}
 8000538:	b083      	sub	sp, #12
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	22ca      	movs	r2, #202	; 0xca
 8000542:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2253      	movs	r2, #83	; 0x53
 8000548:	625a      	str	r2, [r3, #36]	; 0x24
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr

08000556 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000556:	b480      	push	{r7}
 8000558:	b083      	sub	sp, #12
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
 800055e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	f023 0207 	bic.w	r2, r3, #7
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	431a      	orrs	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	609a      	str	r2, [r3, #8]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <MX_APPE_Config+0x18>)
 8000582:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000586:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000588:	f000 f829 	bl	80005de <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800058c:	f000 f868 	bl	8000660 <Config_HSE>

  return;
 8000590:	bf00      	nop
}
 8000592:	bd80      	pop	{r7, pc}
 8000594:	58004000 	.word	0x58004000

08000598 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800059c:	f000 f874 	bl	8000688 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80005a0:	f000 f88c 	bl	80006bc <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80005a4:	4903      	ldr	r1, [pc, #12]	; (80005b4 <MX_APPE_Init+0x1c>)
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 fdc2 	bl	8001130 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80005ac:	f000 f896 	bl	80006dc <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80005b0:	bf00      	nop
}
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000198 	.word	0x20000198

080005b8 <Init_Smps>:

void Init_Smps(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 80005bc:	2000      	movs	r0, #0
 80005be:	f7ff fe45 	bl	800024c <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 80005c2:	2004      	movs	r0, #4
 80005c4:	f7ff fe56 	bl	8000274 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 80005c8:	f7ff fe30 	bl	800022c <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 80005cc:	bf00      	nop
}
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <Init_Exti>:

void Init_Exti(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80005d4:	2050      	movs	r0, #80	; 0x50
 80005d6:	f7ff fe15 	bl	8000204 <LL_EXTI_EnableIT_32_63>

  return;
 80005da:	bf00      	nop
}
 80005dc:	bd80      	pop	{r7, pc}

080005de <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80005e2:	f000 f804 	bl	80005ee <Reset_BackupDomain>

  Reset_IPCC();
 80005e6:	f000 f819 	bl	800061c <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80005ea:	bf00      	nop
}
 80005ec:	bd80      	pop	{r7, pc}

080005ee <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80005f2:	f7ff fee3 	bl	80003bc <LL_RCC_IsActiveFlag_PINRST>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d00d      	beq.n	8000618 <Reset_BackupDomain+0x2a>
 80005fc:	f7ff fef1 	bl	80003e2 <LL_RCC_IsActiveFlag_SFTRST>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d108      	bne.n	8000618 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8000606:	f002 fc5d 	bl	8002ec4 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800060a:	f002 fc5b 	bl	8002ec4 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800060e:	f7ff feb3 	bl	8000378 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8000612:	f7ff fec2 	bl	800039a <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8000616:	bf00      	nop
 8000618:	bf00      	nop
}
 800061a:	bd80      	pop	{r7, pc}

0800061c <Reset_IPCC>:

static void Reset_IPCC(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8000620:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000624:	f7ff fef0 	bl	8000408 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000628:	213f      	movs	r1, #63	; 0x3f
 800062a:	480c      	ldr	r0, [pc, #48]	; (800065c <Reset_IPCC+0x40>)
 800062c:	f7ff ff5a 	bl	80004e4 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8000630:	213f      	movs	r1, #63	; 0x3f
 8000632:	480a      	ldr	r0, [pc, #40]	; (800065c <Reset_IPCC+0x40>)
 8000634:	f7ff ff64 	bl	8000500 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000638:	213f      	movs	r1, #63	; 0x3f
 800063a:	4808      	ldr	r0, [pc, #32]	; (800065c <Reset_IPCC+0x40>)
 800063c:	f7ff ff0c 	bl	8000458 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8000640:	213f      	movs	r1, #63	; 0x3f
 8000642:	4806      	ldr	r0, [pc, #24]	; (800065c <Reset_IPCC+0x40>)
 8000644:	f7ff ff2b 	bl	800049e <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000648:	213f      	movs	r1, #63	; 0x3f
 800064a:	4804      	ldr	r0, [pc, #16]	; (800065c <Reset_IPCC+0x40>)
 800064c:	f7ff ff16 	bl	800047c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8000650:	213f      	movs	r1, #63	; 0x3f
 8000652:	4802      	ldr	r0, [pc, #8]	; (800065c <Reset_IPCC+0x40>)
 8000654:	f7ff ff35 	bl	80004c2 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000658:	bf00      	nop
}
 800065a:	bd80      	pop	{r7, pc}
 800065c:	58000c00 	.word	0x58000c00

08000660 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000666:	2000      	movs	r0, #0
 8000668:	f005 fd96 	bl	8006198 <OTP_Read>
 800066c:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d005      	beq.n	8000680 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	799b      	ldrb	r3, [r3, #6]
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fe4b 	bl	8000314 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800067e:	bf00      	nop
 8000680:	bf00      	nop
}
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <System_Init>:

static void System_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  Init_Smps();
 800068c:	f7ff ff94 	bl	80005b8 <Init_Smps>

  Init_Exti();
 8000690:	f7ff ff9e 	bl	80005d0 <Init_Exti>

  Init_Rtc();
 8000694:	f000 f802 	bl	800069c <Init_Rtc>

  return;
 8000698:	bf00      	nop
}
 800069a:	bd80      	pop	{r7, pc}

0800069c <Init_Rtc>:

static void Init_Rtc(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <Init_Rtc+0x1c>)
 80006a2:	f7ff ff48 	bl	8000536 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80006a6:	2100      	movs	r1, #0
 80006a8:	4803      	ldr	r0, [pc, #12]	; (80006b8 <Init_Rtc+0x1c>)
 80006aa:	f7ff ff54 	bl	8000556 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80006ae:	4802      	ldr	r0, [pc, #8]	; (80006b8 <Init_Rtc+0x1c>)
 80006b0:	f7ff ff34 	bl	800051c <LL_RTC_EnableWriteProtection>

  return;
 80006b4:	bf00      	nop
}
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40002800 	.word	0x40002800

080006bc <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80006c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80006c4:	f7ff fe44 	bl	8000350 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80006c8:	f006 fbee 	bl	8006ea8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80006cc:	2004      	movs	r0, #4
 80006ce:	f7ff fe0b 	bl	80002e8 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 80006d2:	f002 fc2f 	bl	8002f34 <HAL_PWREx_EnableSRAMRetention>

  return;
 80006d6:	bf00      	nop
}
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80006e2:	f005 fb17 	bl	8005d14 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80006e6:	4a11      	ldr	r2, [pc, #68]	; (800072c <appe_Tl_Init+0x50>)
 80006e8:	2100      	movs	r1, #0
 80006ea:	2010      	movs	r0, #16
 80006ec:	f006 fd50 	bl	8007190 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <appe_Tl_Init+0x54>)
 80006f2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <appe_Tl_Init+0x58>)
 80006f6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80006f8:	463b      	mov	r3, r7
 80006fa:	4619      	mov	r1, r3
 80006fc:	480e      	ldr	r0, [pc, #56]	; (8000738 <appe_Tl_Init+0x5c>)
 80006fe:	f005 f9cf 	bl	8005aa0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <appe_Tl_Init+0x60>)
 8000704:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000706:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <appe_Tl_Init+0x64>)
 8000708:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <appe_Tl_Init+0x68>)
 800070c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800070e:	f240 533c 	movw	r3, #1340	; 0x53c
 8000712:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	4618      	mov	r0, r3
 800071a:	f005 fc3d 	bl	8005f98 <TL_MM_Init>

  TL_Enable();
 800071e:	f005 faf3 	bl	8005d08 <TL_Enable>

  return;
 8000722:	bf00      	nop
}
 8000724:	3720      	adds	r7, #32
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	08005ad9 	.word	0x08005ad9
 8000730:	20030734 	.word	0x20030734
 8000734:	08000749 	.word	0x08000749
 8000738:	08000761 	.word	0x08000761
 800073c:	2003094c 	.word	0x2003094c
 8000740:	20030840 	.word	0x20030840
 8000744:	200301f8 	.word	0x200301f8

08000748 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8000752:	bf00      	nop
}
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
	...

08000760 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	330b      	adds	r3, #11
 800076e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	b29b      	uxth	r3, r3
 8000776:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800077a:	2b07      	cmp	r3, #7
 800077c:	d81f      	bhi.n	80007be <APPE_SysUserEvtRx+0x5e>
 800077e:	a201      	add	r2, pc, #4	; (adr r2, 8000784 <APPE_SysUserEvtRx+0x24>)
 8000780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000784:	080007a5 	.word	0x080007a5
 8000788:	080007b7 	.word	0x080007b7
 800078c:	080007bf 	.word	0x080007bf
 8000790:	080007bf 	.word	0x080007bf
 8000794:	080007bf 	.word	0x080007bf
 8000798:	080007bf 	.word	0x080007bf
 800079c:	080007bf 	.word	0x080007bf
 80007a0:	080007bf 	.word	0x080007bf
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	4618      	mov	r0, r3
 80007aa:	f004 ff35 	bl	8005618 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f000 f81b 	bl	80007ea <APPE_SysEvtReadyProcessing>
    break;
 80007b4:	e004      	b.n	80007c0 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80007b6:	6878      	ldr	r0, [r7, #4]
 80007b8:	f000 f806 	bl	80007c8 <APPE_SysEvtError>
    break;
 80007bc:	e000      	b.n	80007c0 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 80007be:	bf00      	nop
  }

  return;
 80007c0:	bf00      	nop
}
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	330b      	adds	r3, #11
 80007d6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	3302      	adds	r3, #2
 80007dc:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80007de:	bf00      	nop
}
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b08a      	sub	sp, #40	; 0x28
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	819a      	strh	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	330b      	adds	r3, #11
 800080a:	623b      	str	r3, [r7, #32]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800080c:	6a3b      	ldr	r3, [r7, #32]
 800080e:	3302      	adds	r3, #2
 8000810:	61fb      	str	r3, [r7, #28]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d117      	bne.n	800084a <APPE_SysEvtReadyProcessing+0x60>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800081a:	f7ff fcb7 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800081e:	230d      	movs	r3, #13
 8000820:	733b      	strb	r3, [r7, #12]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8000822:	237f      	movs	r3, #127	; 0x7f
 8000824:	73bb      	strb	r3, [r7, #14]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000826:	f7ff fe09 	bl	800043c <LL_DBGMCU_GetRevisionID>
 800082a:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = RevisionID;
 800082c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800082e:	b29b      	uxth	r3, r3
 8000830:	833b      	strh	r3, [r7, #24]
    (void)SHCI_C2_Config(&config_param);
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4618      	mov	r0, r3
 8000838:	f004 fed8 	bl	80055ec <SHCI_C2_Config>

    APP_BLE_Init();
 800083c:	f005 fdcc 	bl	80063d8 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000840:	2100      	movs	r1, #0
 8000842:	2001      	movs	r0, #1
 8000844:	f006 fb42 	bl	8006ecc <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000848:	e007      	b.n	800085a <APPE_SysEvtReadyProcessing+0x70>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d103      	bne.n	800085a <APPE_SysEvtReadyProcessing+0x70>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
  return;
 8000858:	bf00      	nop
 800085a:	bf00      	nop
}
 800085c:	3728      	adds	r7, #40	; 0x28
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000866:	f04f 30ff 	mov.w	r0, #4294967295
 800086a:	f006 fb95 	bl	8006f98 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}

08000872 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 8000876:	f006 fb59 	bl	8006f2c <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800087a:	bf00      	nop
}
 800087c:	bd80      	pop	{r7, pc}

0800087e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000888:	f04f 30ff 	mov.w	r0, #4294967295
 800088c:	f006 fb84 	bl	8006f98 <UTIL_SEQ_Run>

  return;
 8000890:	bf00      	nop
}
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80008a0:	2100      	movs	r1, #0
 80008a2:	2010      	movs	r0, #16
 80008a4:	f006 fc96 	bl	80071d4 <UTIL_SEQ_SetTask>
  return;
 80008a8:	bf00      	nop
}
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008b8:	2002      	movs	r0, #2
 80008ba:	f006 fcf7 	bl	80072ac <UTIL_SEQ_SetEvt>
  return;
 80008be:	bf00      	nop
}
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008ce:	2002      	movs	r0, #2
 80008d0:	f006 fd0c 	bl	80072ec <UTIL_SEQ_WaitEvt>
  return;
 80008d4:	bf00      	nop
}
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <LL_EXTI_EnableIT_0_31>:
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <LL_EXTI_EnableIT_0_31+0x24>)
 80008e6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80008ea:	4905      	ldr	r1, [pc, #20]	; (8000900 <LL_EXTI_EnableIT_0_31+0x24>)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80008f4:	bf00      	nop
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	58000800 	.word	0x58000800

08000904 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	4904      	ldr	r1, [pc, #16]	; (8000924 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4313      	orrs	r3, r2
 8000916:	600b      	str	r3, [r1, #0]

}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	58000800 	.word	0x58000800

08000928 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <ReadRtcSsrValue+0x3c>)
 8000930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000932:	b29b      	uxth	r3, r3
 8000934:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <ReadRtcSsrValue+0x3c>)
 8000938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800093a:	b29b      	uxth	r3, r3
 800093c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800093e:	e005      	b.n	800094c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <ReadRtcSsrValue+0x3c>)
 8000946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000948:	b29b      	uxth	r3, r3
 800094a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 800094c:	687a      	ldr	r2, [r7, #4]
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	429a      	cmp	r2, r3
 8000952:	d1f5      	bne.n	8000940 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000954:	683b      	ldr	r3, [r7, #0]
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40002800 	.word	0x40002800

08000968 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	460a      	mov	r2, r1
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000978:	79ba      	ldrb	r2, [r7, #6]
 800097a:	491d      	ldr	r1, [pc, #116]	; (80009f0 <LinkTimerAfter+0x88>)
 800097c:	4613      	mov	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	00db      	lsls	r3, r3, #3
 8000984:	440b      	add	r3, r1
 8000986:	3315      	adds	r3, #21
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800098c:	7bfb      	ldrb	r3, [r7, #15]
 800098e:	2b06      	cmp	r3, #6
 8000990:	d009      	beq.n	80009a6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000992:	7bfa      	ldrb	r2, [r7, #15]
 8000994:	4916      	ldr	r1, [pc, #88]	; (80009f0 <LinkTimerAfter+0x88>)
 8000996:	4613      	mov	r3, r2
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	4413      	add	r3, r2
 800099c:	00db      	lsls	r3, r3, #3
 800099e:	440b      	add	r3, r1
 80009a0:	3314      	adds	r3, #20
 80009a2:	79fa      	ldrb	r2, [r7, #7]
 80009a4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80009a6:	79fa      	ldrb	r2, [r7, #7]
 80009a8:	4911      	ldr	r1, [pc, #68]	; (80009f0 <LinkTimerAfter+0x88>)
 80009aa:	4613      	mov	r3, r2
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	4413      	add	r3, r2
 80009b0:	00db      	lsls	r3, r3, #3
 80009b2:	440b      	add	r3, r1
 80009b4:	3315      	adds	r3, #21
 80009b6:	7bfa      	ldrb	r2, [r7, #15]
 80009b8:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80009ba:	79fa      	ldrb	r2, [r7, #7]
 80009bc:	490c      	ldr	r1, [pc, #48]	; (80009f0 <LinkTimerAfter+0x88>)
 80009be:	4613      	mov	r3, r2
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	4413      	add	r3, r2
 80009c4:	00db      	lsls	r3, r3, #3
 80009c6:	440b      	add	r3, r1
 80009c8:	3314      	adds	r3, #20
 80009ca:	79ba      	ldrb	r2, [r7, #6]
 80009cc:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80009ce:	79ba      	ldrb	r2, [r7, #6]
 80009d0:	4907      	ldr	r1, [pc, #28]	; (80009f0 <LinkTimerAfter+0x88>)
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	440b      	add	r3, r1
 80009dc:	3315      	adds	r3, #21
 80009de:	79fa      	ldrb	r2, [r7, #7]
 80009e0:	701a      	strb	r2, [r3, #0]

  return;
 80009e2:	bf00      	nop
}
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000024 	.word	0x20000024

080009f4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	460a      	mov	r2, r1
 80009fe:	71fb      	strb	r3, [r7, #7]
 8000a00:	4613      	mov	r3, r2
 8000a02:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000a04:	4b29      	ldr	r3, [pc, #164]	; (8000aac <LinkTimerBefore+0xb8>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	79ba      	ldrb	r2, [r7, #6]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d032      	beq.n	8000a76 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000a10:	79ba      	ldrb	r2, [r7, #6]
 8000a12:	4927      	ldr	r1, [pc, #156]	; (8000ab0 <LinkTimerBefore+0xbc>)
 8000a14:	4613      	mov	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	00db      	lsls	r3, r3, #3
 8000a1c:	440b      	add	r3, r1
 8000a1e:	3314      	adds	r3, #20
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000a24:	7bfa      	ldrb	r2, [r7, #15]
 8000a26:	4922      	ldr	r1, [pc, #136]	; (8000ab0 <LinkTimerBefore+0xbc>)
 8000a28:	4613      	mov	r3, r2
 8000a2a:	005b      	lsls	r3, r3, #1
 8000a2c:	4413      	add	r3, r2
 8000a2e:	00db      	lsls	r3, r3, #3
 8000a30:	440b      	add	r3, r1
 8000a32:	3315      	adds	r3, #21
 8000a34:	79fa      	ldrb	r2, [r7, #7]
 8000a36:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a38:	79fa      	ldrb	r2, [r7, #7]
 8000a3a:	491d      	ldr	r1, [pc, #116]	; (8000ab0 <LinkTimerBefore+0xbc>)
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	4413      	add	r3, r2
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	440b      	add	r3, r1
 8000a46:	3315      	adds	r3, #21
 8000a48:	79ba      	ldrb	r2, [r7, #6]
 8000a4a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000a4c:	79fa      	ldrb	r2, [r7, #7]
 8000a4e:	4918      	ldr	r1, [pc, #96]	; (8000ab0 <LinkTimerBefore+0xbc>)
 8000a50:	4613      	mov	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	440b      	add	r3, r1
 8000a5a:	3314      	adds	r3, #20
 8000a5c:	7bfa      	ldrb	r2, [r7, #15]
 8000a5e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a60:	79ba      	ldrb	r2, [r7, #6]
 8000a62:	4913      	ldr	r1, [pc, #76]	; (8000ab0 <LinkTimerBefore+0xbc>)
 8000a64:	4613      	mov	r3, r2
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	4413      	add	r3, r2
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	440b      	add	r3, r1
 8000a6e:	3314      	adds	r3, #20
 8000a70:	79fa      	ldrb	r2, [r7, #7]
 8000a72:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000a74:	e014      	b.n	8000aa0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a76:	79fa      	ldrb	r2, [r7, #7]
 8000a78:	490d      	ldr	r1, [pc, #52]	; (8000ab0 <LinkTimerBefore+0xbc>)
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	4413      	add	r3, r2
 8000a80:	00db      	lsls	r3, r3, #3
 8000a82:	440b      	add	r3, r1
 8000a84:	3315      	adds	r3, #21
 8000a86:	79ba      	ldrb	r2, [r7, #6]
 8000a88:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a8a:	79ba      	ldrb	r2, [r7, #6]
 8000a8c:	4908      	ldr	r1, [pc, #32]	; (8000ab0 <LinkTimerBefore+0xbc>)
 8000a8e:	4613      	mov	r3, r2
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	4413      	add	r3, r2
 8000a94:	00db      	lsls	r3, r3, #3
 8000a96:	440b      	add	r3, r1
 8000a98:	3314      	adds	r3, #20
 8000a9a:	79fa      	ldrb	r2, [r7, #7]
 8000a9c:	701a      	strb	r2, [r3, #0]
  return;
 8000a9e:	bf00      	nop
}
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	200000b4 	.word	0x200000b4
 8000ab0:	20000024 	.word	0x20000024

08000ab4 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000abe:	4b4e      	ldr	r3, [pc, #312]	; (8000bf8 <linkTimer+0x144>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	2b06      	cmp	r3, #6
 8000ac6:	d118      	bne.n	8000afa <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ac8:	4b4b      	ldr	r3, [pc, #300]	; (8000bf8 <linkTimer+0x144>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	4b4b      	ldr	r3, [pc, #300]	; (8000bfc <linkTimer+0x148>)
 8000ad0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000ad2:	4a49      	ldr	r2, [pc, #292]	; (8000bf8 <linkTimer+0x144>)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000ad8:	79fa      	ldrb	r2, [r7, #7]
 8000ada:	4949      	ldr	r1, [pc, #292]	; (8000c00 <linkTimer+0x14c>)
 8000adc:	4613      	mov	r3, r2
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	4413      	add	r3, r2
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	440b      	add	r3, r1
 8000ae6:	3315      	adds	r3, #21
 8000ae8:	2206      	movs	r2, #6
 8000aea:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000aec:	4b45      	ldr	r3, [pc, #276]	; (8000c04 <linkTimer+0x150>)
 8000aee:	f04f 32ff 	mov.w	r2, #4294967295
 8000af2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	81fb      	strh	r3, [r7, #14]
 8000af8:	e078      	b.n	8000bec <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000afa:	f000 f909 	bl	8000d10 <ReturnTimeElapsed>
 8000afe:	4603      	mov	r3, r0
 8000b00:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000b02:	79fa      	ldrb	r2, [r7, #7]
 8000b04:	493e      	ldr	r1, [pc, #248]	; (8000c00 <linkTimer+0x14c>)
 8000b06:	4613      	mov	r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	4413      	add	r3, r2
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	440b      	add	r3, r1
 8000b10:	3308      	adds	r3, #8
 8000b12:	6819      	ldr	r1, [r3, #0]
 8000b14:	89fb      	ldrh	r3, [r7, #14]
 8000b16:	79fa      	ldrb	r2, [r7, #7]
 8000b18:	4419      	add	r1, r3
 8000b1a:	4839      	ldr	r0, [pc, #228]	; (8000c00 <linkTimer+0x14c>)
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	4413      	add	r3, r2
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	4403      	add	r3, r0
 8000b26:	3308      	adds	r3, #8
 8000b28:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000b2a:	79fa      	ldrb	r2, [r7, #7]
 8000b2c:	4934      	ldr	r1, [pc, #208]	; (8000c00 <linkTimer+0x14c>)
 8000b2e:	4613      	mov	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	4413      	add	r3, r2
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	440b      	add	r3, r1
 8000b38:	3308      	adds	r3, #8
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000b3e:	4b2e      	ldr	r3, [pc, #184]	; (8000bf8 <linkTimer+0x144>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	4619      	mov	r1, r3
 8000b46:	4a2e      	ldr	r2, [pc, #184]	; (8000c00 <linkTimer+0x14c>)
 8000b48:	460b      	mov	r3, r1
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	440b      	add	r3, r1
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	4413      	add	r3, r2
 8000b52:	3308      	adds	r3, #8
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d337      	bcc.n	8000bcc <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000b5c:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <linkTimer+0x144>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000b62:	7b7a      	ldrb	r2, [r7, #13]
 8000b64:	4926      	ldr	r1, [pc, #152]	; (8000c00 <linkTimer+0x14c>)
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3315      	adds	r3, #21
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000b76:	e013      	b.n	8000ba0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000b78:	7b7a      	ldrb	r2, [r7, #13]
 8000b7a:	4921      	ldr	r1, [pc, #132]	; (8000c00 <linkTimer+0x14c>)
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	4413      	add	r3, r2
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	440b      	add	r3, r1
 8000b86:	3315      	adds	r3, #21
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000b8c:	7b7a      	ldrb	r2, [r7, #13]
 8000b8e:	491c      	ldr	r1, [pc, #112]	; (8000c00 <linkTimer+0x14c>)
 8000b90:	4613      	mov	r3, r2
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	4413      	add	r3, r2
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	440b      	add	r3, r1
 8000b9a:	3315      	adds	r3, #21
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000ba0:	7b3b      	ldrb	r3, [r7, #12]
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d00b      	beq.n	8000bbe <linkTimer+0x10a>
 8000ba6:	7b3a      	ldrb	r2, [r7, #12]
 8000ba8:	4915      	ldr	r1, [pc, #84]	; (8000c00 <linkTimer+0x14c>)
 8000baa:	4613      	mov	r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	4413      	add	r3, r2
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	440b      	add	r3, r1
 8000bb4:	3308      	adds	r3, #8
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	68ba      	ldr	r2, [r7, #8]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d2dc      	bcs.n	8000b78 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000bbe:	7b7a      	ldrb	r2, [r7, #13]
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	4611      	mov	r1, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fecf 	bl	8000968 <LinkTimerAfter>
 8000bca:	e00f      	b.n	8000bec <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <linkTimer+0x144>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4611      	mov	r1, r2
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff ff0c 	bl	80009f4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <linkTimer+0x144>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	b2da      	uxtb	r2, r3
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <linkTimer+0x148>)
 8000be4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <linkTimer+0x144>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000bec:	89fb      	ldrh	r3, [r7, #14]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200000b4 	.word	0x200000b4
 8000bfc:	200000b5 	.word	0x200000b5
 8000c00:	20000024 	.word	0x20000024
 8000c04:	200000b8 	.word	0x200000b8

08000c08 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	460a      	mov	r2, r1
 8000c12:	71fb      	strb	r3, [r7, #7]
 8000c14:	4613      	mov	r3, r2
 8000c16:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000c18:	4b39      	ldr	r3, [pc, #228]	; (8000d00 <UnlinkTimer+0xf8>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	79fa      	ldrb	r2, [r7, #7]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d111      	bne.n	8000c48 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c24:	4b36      	ldr	r3, [pc, #216]	; (8000d00 <UnlinkTimer+0xf8>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b36      	ldr	r3, [pc, #216]	; (8000d04 <UnlinkTimer+0xfc>)
 8000c2c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000c2e:	79fa      	ldrb	r2, [r7, #7]
 8000c30:	4935      	ldr	r1, [pc, #212]	; (8000d08 <UnlinkTimer+0x100>)
 8000c32:	4613      	mov	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	4413      	add	r3, r2
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	440b      	add	r3, r1
 8000c3c:	3315      	adds	r3, #21
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	4b2f      	ldr	r3, [pc, #188]	; (8000d00 <UnlinkTimer+0xf8>)
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	e03e      	b.n	8000cc6 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000c48:	79fa      	ldrb	r2, [r7, #7]
 8000c4a:	492f      	ldr	r1, [pc, #188]	; (8000d08 <UnlinkTimer+0x100>)
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	440b      	add	r3, r1
 8000c56:	3314      	adds	r3, #20
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000c5c:	79fa      	ldrb	r2, [r7, #7]
 8000c5e:	492a      	ldr	r1, [pc, #168]	; (8000d08 <UnlinkTimer+0x100>)
 8000c60:	4613      	mov	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	4413      	add	r3, r2
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	440b      	add	r3, r1
 8000c6a:	3315      	adds	r3, #21
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000c70:	79f9      	ldrb	r1, [r7, #7]
 8000c72:	7bfa      	ldrb	r2, [r7, #15]
 8000c74:	4824      	ldr	r0, [pc, #144]	; (8000d08 <UnlinkTimer+0x100>)
 8000c76:	460b      	mov	r3, r1
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	440b      	add	r3, r1
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	4403      	add	r3, r0
 8000c80:	3315      	adds	r3, #21
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b2d8      	uxtb	r0, r3
 8000c86:	4920      	ldr	r1, [pc, #128]	; (8000d08 <UnlinkTimer+0x100>)
 8000c88:	4613      	mov	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	440b      	add	r3, r1
 8000c92:	3315      	adds	r3, #21
 8000c94:	4602      	mov	r2, r0
 8000c96:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c98:	7bbb      	ldrb	r3, [r7, #14]
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	d013      	beq.n	8000cc6 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000c9e:	79f9      	ldrb	r1, [r7, #7]
 8000ca0:	7bba      	ldrb	r2, [r7, #14]
 8000ca2:	4819      	ldr	r0, [pc, #100]	; (8000d08 <UnlinkTimer+0x100>)
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	440b      	add	r3, r1
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	4403      	add	r3, r0
 8000cae:	3314      	adds	r3, #20
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b2d8      	uxtb	r0, r3
 8000cb4:	4914      	ldr	r1, [pc, #80]	; (8000d08 <UnlinkTimer+0x100>)
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	4413      	add	r3, r2
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	440b      	add	r3, r1
 8000cc0:	3314      	adds	r3, #20
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000cc6:	79fa      	ldrb	r2, [r7, #7]
 8000cc8:	490f      	ldr	r1, [pc, #60]	; (8000d08 <UnlinkTimer+0x100>)
 8000cca:	4613      	mov	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	4413      	add	r3, r2
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	440b      	add	r3, r1
 8000cd4:	330c      	adds	r3, #12
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <UnlinkTimer+0xf8>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	2b06      	cmp	r3, #6
 8000ce2:	d107      	bne.n	8000cf4 <UnlinkTimer+0xec>
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d104      	bne.n	8000cf4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000cea:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <UnlinkTimer+0x104>)
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf0:	601a      	str	r2, [r3, #0]
  }

  return;
 8000cf2:	bf00      	nop
 8000cf4:	bf00      	nop
}
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	200000b4 	.word	0x200000b4
 8000d04:	200000b5 	.word	0x200000b5
 8000d08:	20000024 	.word	0x20000024
 8000d0c:	200000b8 	.word	0x200000b8

08000d10 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <ReturnTimeElapsed+0x70>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1e:	d026      	beq.n	8000d6e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000d20:	f7ff fe02 	bl	8000928 <ReadRtcSsrValue>
 8000d24:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000d26:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <ReturnTimeElapsed+0x70>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d805      	bhi.n	8000d3c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <ReturnTimeElapsed+0x70>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	e00a      	b.n	8000d52 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	; (8000d84 <ReturnTimeElapsed+0x74>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <ReturnTimeElapsed+0x70>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	683a      	ldr	r2, [r7, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <ReturnTimeElapsed+0x78>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	461a      	mov	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	fb02 f303 	mul.w	r3, r2, r3
 8000d5e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <ReturnTimeElapsed+0x7c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	40d3      	lsrs	r3, r2
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	e001      	b.n	8000d72 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	b29b      	uxth	r3, r3
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200000b8 	.word	0x200000b8
 8000d84:	2000012e 	.word	0x2000012e
 8000d88:	2000012d 	.word	0x2000012d
 8000d8c:	2000012c 	.word	0x2000012c

08000d90 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d108      	bne.n	8000db2 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000da0:	f7ff fdc2 	bl	8000928 <ReadRtcSsrValue>
 8000da4:	4603      	mov	r3, r0
 8000da6:	4a24      	ldr	r2, [pc, #144]	; (8000e38 <RestartWakeupCounter+0xa8>)
 8000da8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000daa:	2003      	movs	r0, #3
 8000dac:	f001 fceb 	bl	8002786 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000db0:	e03e      	b.n	8000e30 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d803      	bhi.n	8000dc0 <RestartWakeupCounter+0x30>
 8000db8:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <RestartWakeupCounter+0xac>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d002      	beq.n	8000dc6 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000dc6:	bf00      	nop
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <RestartWakeupCounter+0xb0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d0f7      	beq.n	8000dc8 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <RestartWakeupCounter+0xb0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <RestartWakeupCounter+0xb0>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000dec:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <RestartWakeupCounter+0xb4>)
 8000df0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000df4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000df6:	2003      	movs	r0, #3
 8000df8:	f001 fcd3 	bl	80027a2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <RestartWakeupCounter+0xb8>)
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	0c1b      	lsrs	r3, r3, #16
 8000e02:	041b      	lsls	r3, r3, #16
 8000e04:	88fa      	ldrh	r2, [r7, #6]
 8000e06:	4910      	ldr	r1, [pc, #64]	; (8000e48 <RestartWakeupCounter+0xb8>)
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e0c:	f7ff fd8c 	bl	8000928 <ReadRtcSsrValue>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4a09      	ldr	r2, [pc, #36]	; (8000e38 <RestartWakeupCounter+0xa8>)
 8000e14:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <RestartWakeupCounter+0xb0>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <RestartWakeupCounter+0xb0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e28:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000e2a:	f3af 8000 	nop.w
  return ;
 8000e2e:	bf00      	nop
}
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200000b8 	.word	0x200000b8
 8000e3c:	2000012c 	.word	0x2000012c
 8000e40:	20000128 	.word	0x20000128
 8000e44:	58000800 	.word	0x58000800
 8000e48:	40002800 	.word	0x40002800

08000e4c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000e52:	4b47      	ldr	r3, [pc, #284]	; (8000f70 <RescheduleTimerList+0x124>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e5e:	d108      	bne.n	8000e72 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000e60:	bf00      	nop
 8000e62:	4b44      	ldr	r3, [pc, #272]	; (8000f74 <RescheduleTimerList+0x128>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f7      	bne.n	8000e62 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000e72:	4b40      	ldr	r3, [pc, #256]	; (8000f74 <RescheduleTimerList+0x128>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	4b3e      	ldr	r3, [pc, #248]	; (8000f74 <RescheduleTimerList+0x128>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e84:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000e86:	4b3c      	ldr	r3, [pc, #240]	; (8000f78 <RescheduleTimerList+0x12c>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000e8c:	7bfa      	ldrb	r2, [r7, #15]
 8000e8e:	493b      	ldr	r1, [pc, #236]	; (8000f7c <RescheduleTimerList+0x130>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	440b      	add	r3, r1
 8000e9a:	3308      	adds	r3, #8
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000ea0:	f7ff ff36 	bl	8000d10 <ReturnTimeElapsed>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000ea8:	88fb      	ldrh	r3, [r7, #6]
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d205      	bcs.n	8000ebc <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000eb4:	4b32      	ldr	r3, [pc, #200]	; (8000f80 <RescheduleTimerList+0x134>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	701a      	strb	r2, [r3, #0]
 8000eba:	e04d      	b.n	8000f58 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	4a31      	ldr	r2, [pc, #196]	; (8000f84 <RescheduleTimerList+0x138>)
 8000ec0:	8812      	ldrh	r2, [r2, #0]
 8000ec2:	b292      	uxth	r2, r2
 8000ec4:	4413      	add	r3, r2
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d906      	bls.n	8000edc <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000ece:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <RescheduleTimerList+0x138>)
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000ed4:	4b2a      	ldr	r3, [pc, #168]	; (8000f80 <RescheduleTimerList+0x134>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	e03d      	b.n	8000f58 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	b29a      	uxth	r2, r3
 8000ee0:	88fb      	ldrh	r3, [r7, #6]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <RescheduleTimerList+0x134>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000eec:	e034      	b.n	8000f58 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000eee:	7bfa      	ldrb	r2, [r7, #15]
 8000ef0:	4922      	ldr	r1, [pc, #136]	; (8000f7c <RescheduleTimerList+0x130>)
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	4413      	add	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	440b      	add	r3, r1
 8000efc:	3308      	adds	r3, #8
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d20a      	bcs.n	8000f1c <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000f06:	7bfa      	ldrb	r2, [r7, #15]
 8000f08:	491c      	ldr	r1, [pc, #112]	; (8000f7c <RescheduleTimerList+0x130>)
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	4413      	add	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	440b      	add	r3, r1
 8000f14:	3308      	adds	r3, #8
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	e013      	b.n	8000f44 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	4917      	ldr	r1, [pc, #92]	; (8000f7c <RescheduleTimerList+0x130>)
 8000f20:	4613      	mov	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	440b      	add	r3, r1
 8000f2a:	3308      	adds	r3, #8
 8000f2c:	6819      	ldr	r1, [r3, #0]
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	7bfa      	ldrb	r2, [r7, #15]
 8000f32:	1ac9      	subs	r1, r1, r3
 8000f34:	4811      	ldr	r0, [pc, #68]	; (8000f7c <RescheduleTimerList+0x130>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	4403      	add	r3, r0
 8000f40:	3308      	adds	r3, #8
 8000f42:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000f44:	7bfa      	ldrb	r2, [r7, #15]
 8000f46:	490d      	ldr	r1, [pc, #52]	; (8000f7c <RescheduleTimerList+0x130>)
 8000f48:	4613      	mov	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	440b      	add	r3, r1
 8000f52:	3315      	adds	r3, #21
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d1c7      	bne.n	8000eee <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000f5e:	89bb      	ldrh	r3, [r7, #12]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff15 	bl	8000d90 <RestartWakeupCounter>

  return ;
 8000f66:	bf00      	nop
}
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40002800 	.word	0x40002800
 8000f74:	20000128 	.word	0x20000128
 8000f78:	200000b4 	.word	0x200000b4
 8000f7c:	20000024 	.word	0x20000024
 8000f80:	200000bc 	.word	0x200000bc
 8000f84:	20000130 	.word	0x20000130

08000f88 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8000f92:	617b      	str	r3, [r7, #20]
  return(result);
 8000f94:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000f98:	b672      	cpsid	i
}
 8000f9a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8000f9c:	4b5f      	ldr	r3, [pc, #380]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	22ca      	movs	r2, #202	; 0xca
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
 8000fa6:	4b5d      	ldr	r3, [pc, #372]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2253      	movs	r2, #83	; 0x53
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8000fb0:	4b5a      	ldr	r3, [pc, #360]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	4b58      	ldr	r3, [pc, #352]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000fc2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000fc4:	4b56      	ldr	r3, [pc, #344]	; (8001120 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000fcc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000fd0:	4954      	ldr	r1, [pc, #336]	; (8001124 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	440b      	add	r3, r1
 8000fdc:	330c      	adds	r3, #12
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d172      	bne.n	80010cc <HW_TS_RTC_Wakeup_Handler+0x144>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000fe6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000fea:	494e      	ldr	r1, [pc, #312]	; (8001124 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8000fec:	4613      	mov	r3, r2
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	440b      	add	r3, r1
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000ffa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000ffe:	4949      	ldr	r1, [pc, #292]	; (8001124 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001000:	4613      	mov	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	440b      	add	r3, r1
 800100a:	3310      	adds	r3, #16
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001010:	4b45      	ldr	r3, [pc, #276]	; (8001128 <HW_TS_RTC_Wakeup_Handler+0x1a0>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d050      	beq.n	80010bc <HW_TS_RTC_Wakeup_Handler+0x134>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800101a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800101e:	4941      	ldr	r1, [pc, #260]	; (8001124 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	330d      	adds	r3, #13
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b01      	cmp	r3, #1
 8001032:	d126      	bne.n	8001082 <HW_TS_RTC_Wakeup_Handler+0xfa>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001034:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001038:	2101      	movs	r1, #1
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fde4 	bl	8000c08 <UnlinkTimer>
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	f383 8810 	msr	PRIMASK, r3
}
 800104a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800104c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001050:	4934      	ldr	r1, [pc, #208]	; (8001124 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	00db      	lsls	r3, r3, #3
 800105a:	440b      	add	r3, r1
 800105c:	3304      	adds	r3, #4
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f9d4 	bl	8001414 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800106c:	4b2b      	ldr	r3, [pc, #172]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	22ca      	movs	r2, #202	; 0xca
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
 8001076:	4b29      	ldr	r3, [pc, #164]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x194>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2253      	movs	r2, #83	; 0x53
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
 8001080:	e014      	b.n	80010ac <HW_TS_RTC_Wakeup_Handler+0x124>
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f383 8810 	msr	PRIMASK, r3
}
 800108c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800108e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f932 	bl	80012fc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	22ca      	movs	r2, #202	; 0xca
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2253      	movs	r2, #83	; 0x53
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80010ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	4619      	mov	r1, r3
 80010b4:	69b8      	ldr	r0, [r7, #24]
 80010b6:	f000 fa35 	bl	8001524 <HW_TS_RTC_Int_AppNot>
 80010ba:	e025      	b.n	8001108 <HW_TS_RTC_Wakeup_Handler+0x180>
    }
    else
    {
      RescheduleTimerList();
 80010bc:	f7ff fec6 	bl	8000e4c <RescheduleTimerList>
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	f383 8810 	msr	PRIMASK, r3
}
 80010ca:	e01d      	b.n	8001108 <HW_TS_RTC_Wakeup_Handler+0x180>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80010cc:	bf00      	nop
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d0f7      	beq.n	80010ce <HW_TS_RTC_Wakeup_Handler+0x146>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80010f2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80010f4:	4b0d      	ldr	r3, [pc, #52]	; (800112c <HW_TS_RTC_Wakeup_Handler+0x1a4>)
 80010f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f383 8810 	msr	PRIMASK, r3
}
 8001106:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <HW_TS_RTC_Wakeup_Handler+0x194>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	22ff      	movs	r2, #255	; 0xff
 8001110:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001112:	bf00      	nop
}
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000128 	.word	0x20000128
 8001120:	200000b4 	.word	0x200000b4
 8001124:	20000024 	.word	0x20000024
 8001128:	200000bc 	.word	0x200000bc
 800112c:	58000800 	.word	0x58000800

08001130 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 800113c:	4a64      	ldr	r2, [pc, #400]	; (80012d0 <HW_TS_Init+0x1a0>)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001142:	4b63      	ldr	r3, [pc, #396]	; (80012d0 <HW_TS_Init+0x1a0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	22ca      	movs	r2, #202	; 0xca
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
 800114c:	4b60      	ldr	r3, [pc, #384]	; (80012d0 <HW_TS_Init+0x1a0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2253      	movs	r2, #83	; 0x53
 8001154:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001156:	4b5f      	ldr	r3, [pc, #380]	; (80012d4 <HW_TS_Init+0x1a4>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	4a5e      	ldr	r2, [pc, #376]	; (80012d4 <HW_TS_Init+0x1a4>)
 800115c:	f043 0320 	orr.w	r3, r3, #32
 8001160:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001162:	4b5c      	ldr	r3, [pc, #368]	; (80012d4 <HW_TS_Init+0x1a4>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	f003 0307 	and.w	r3, r3, #7
 800116c:	b2db      	uxtb	r3, r3
 800116e:	f1c3 0304 	rsb	r3, r3, #4
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b58      	ldr	r3, [pc, #352]	; (80012d8 <HW_TS_Init+0x1a8>)
 8001176:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001178:	4b56      	ldr	r3, [pc, #344]	; (80012d4 <HW_TS_Init+0x1a4>)
 800117a:	691b      	ldr	r3, [r3, #16]
 800117c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001180:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001184:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	fa92 f2a2 	rbit	r2, r2
 800118c:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001192:	697a      	ldr	r2, [r7, #20]
 8001194:	2a00      	cmp	r2, #0
 8001196:	d101      	bne.n	800119c <HW_TS_Init+0x6c>
  {
    return 32U;
 8001198:	2220      	movs	r2, #32
 800119a:	e003      	b.n	80011a4 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	fab2 f282 	clz	r2, r2
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	40d3      	lsrs	r3, r2
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	3301      	adds	r3, #1
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	4b4b      	ldr	r3, [pc, #300]	; (80012dc <HW_TS_Init+0x1ac>)
 80011ae:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80011b0:	4b48      	ldr	r3, [pc, #288]	; (80012d4 <HW_TS_Init+0x1a4>)
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	3301      	adds	r3, #1
 80011be:	b29a      	uxth	r2, r3
 80011c0:	4b47      	ldr	r3, [pc, #284]	; (80012e0 <HW_TS_Init+0x1b0>)
 80011c2:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80011c4:	4b46      	ldr	r3, [pc, #280]	; (80012e0 <HW_TS_Init+0x1b0>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	4a44      	ldr	r2, [pc, #272]	; (80012dc <HW_TS_Init+0x1ac>)
 80011cc:	7812      	ldrb	r2, [r2, #0]
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80011d6:	4a40      	ldr	r2, [pc, #256]	; (80012d8 <HW_TS_Init+0x1a8>)
 80011d8:	7812      	ldrb	r2, [r2, #0]
 80011da:	40d3      	lsrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d904      	bls.n	80011f2 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80011e8:	4b3e      	ldr	r3, [pc, #248]	; (80012e4 <HW_TS_Init+0x1b4>)
 80011ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ee:	801a      	strh	r2, [r3, #0]
 80011f0:	e003      	b.n	80011fa <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	4b3b      	ldr	r3, [pc, #236]	; (80012e4 <HW_TS_Init+0x1b4>)
 80011f8:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011fa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011fe:	f7ff fb81 	bl	8000904 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001202:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001206:	f7ff fb69 	bl	80008dc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d143      	bne.n	8001298 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001210:	4b35      	ldr	r3, [pc, #212]	; (80012e8 <HW_TS_Init+0x1b8>)
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001216:	4b35      	ldr	r3, [pc, #212]	; (80012ec <HW_TS_Init+0x1bc>)
 8001218:	f04f 32ff 	mov.w	r2, #4294967295
 800121c:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800121e:	2300      	movs	r3, #0
 8001220:	77fb      	strb	r3, [r7, #31]
 8001222:	e00c      	b.n	800123e <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001224:	7ffa      	ldrb	r2, [r7, #31]
 8001226:	4932      	ldr	r1, [pc, #200]	; (80012f0 <HW_TS_Init+0x1c0>)
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	440b      	add	r3, r1
 8001232:	330c      	adds	r3, #12
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001238:	7ffb      	ldrb	r3, [r7, #31]
 800123a:	3301      	adds	r3, #1
 800123c:	77fb      	strb	r3, [r7, #31]
 800123e:	7ffb      	ldrb	r3, [r7, #31]
 8001240:	2b05      	cmp	r3, #5
 8001242:	d9ef      	bls.n	8001224 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001244:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <HW_TS_Init+0x1c4>)
 8001246:	2206      	movs	r2, #6
 8001248:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HW_TS_Init+0x1a0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <HW_TS_Init+0x1a0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800125c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HW_TS_Init+0x1a0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HW_TS_Init+0x1a0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001272:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001274:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <HW_TS_Init+0x1c8>)
 8001276:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800127a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800127c:	2003      	movs	r0, #3
 800127e:	f001 fa90 	bl	80027a2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HW_TS_Init+0x1a0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HW_TS_Init+0x1a0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	e00a      	b.n	80012ae <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <HW_TS_Init+0x1a0>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80012a8:	2003      	movs	r0, #3
 80012aa:	f001 fa6c 	bl	8002786 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HW_TS_Init+0x1a0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	22ff      	movs	r2, #255	; 0xff
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80012b8:	2200      	movs	r2, #0
 80012ba:	2103      	movs	r1, #3
 80012bc:	2003      	movs	r0, #3
 80012be:	f001 fa20 	bl	8002702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012c2:	2003      	movs	r0, #3
 80012c4:	f001 fa37 	bl	8002736 <HAL_NVIC_EnableIRQ>

  return;
 80012c8:	bf00      	nop
}
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000128 	.word	0x20000128
 80012d4:	40002800 	.word	0x40002800
 80012d8:	2000012c 	.word	0x2000012c
 80012dc:	2000012d 	.word	0x2000012d
 80012e0:	2000012e 	.word	0x2000012e
 80012e4:	20000130 	.word	0x20000130
 80012e8:	200000bc 	.word	0x200000bc
 80012ec:	200000b8 	.word	0x200000b8
 80012f0:	20000024 	.word	0x20000024
 80012f4:	200000b4 	.word	0x200000b4
 80012f8:	58000800 	.word	0x58000800

080012fc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001306:	f3ef 8310 	mrs	r3, PRIMASK
 800130a:	60fb      	str	r3, [r7, #12]
  return(result);
 800130c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800130e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001310:	b672      	cpsid	i
}
 8001312:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001314:	2003      	movs	r0, #3
 8001316:	f001 fa1c 	bl	8002752 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800131a:	4b38      	ldr	r3, [pc, #224]	; (80013fc <HW_TS_Stop+0x100>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	22ca      	movs	r2, #202	; 0xca
 8001322:	625a      	str	r2, [r3, #36]	; 0x24
 8001324:	4b35      	ldr	r3, [pc, #212]	; (80013fc <HW_TS_Stop+0x100>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2253      	movs	r2, #83	; 0x53
 800132c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800132e:	79fa      	ldrb	r2, [r7, #7]
 8001330:	4933      	ldr	r1, [pc, #204]	; (8001400 <HW_TS_Stop+0x104>)
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	440b      	add	r3, r1
 800133c:	330c      	adds	r3, #12
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d148      	bne.n	80013d8 <HW_TS_Stop+0xdc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fc5c 	bl	8000c08 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001350:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <HW_TS_Stop+0x108>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001356:	7cfb      	ldrb	r3, [r7, #19]
 8001358:	2b06      	cmp	r3, #6
 800135a:	d135      	bne.n	80013c8 <HW_TS_Stop+0xcc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800135c:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <HW_TS_Stop+0x10c>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001364:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001368:	d108      	bne.n	800137c <HW_TS_Stop+0x80>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 800136a:	bf00      	nop
 800136c:	4b23      	ldr	r3, [pc, #140]	; (80013fc <HW_TS_Stop+0x100>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f7      	bne.n	800136c <HW_TS_Stop+0x70>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800137c:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <HW_TS_Stop+0x100>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <HW_TS_Stop+0x100>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800138e:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8001390:	bf00      	nop
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <HW_TS_Stop+0x100>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f7      	beq.n	8001392 <HW_TS_Stop+0x96>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80013a2:	4b16      	ldr	r3, [pc, #88]	; (80013fc <HW_TS_Stop+0x100>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	b2da      	uxtb	r2, r3
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <HW_TS_Stop+0x100>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80013b6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <HW_TS_Stop+0x110>)
 80013ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80013be:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80013c0:	2003      	movs	r0, #3
 80013c2:	f001 f9ee 	bl	80027a2 <HAL_NVIC_ClearPendingIRQ>
 80013c6:	e007      	b.n	80013d8 <HW_TS_Stop+0xdc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HW_TS_Stop+0x114>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	7cfa      	ldrb	r2, [r7, #19]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d001      	beq.n	80013d8 <HW_TS_Stop+0xdc>
    {
      RescheduleTimerList();
 80013d4:	f7ff fd3a 	bl	8000e4c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HW_TS_Stop+0x100>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	22ff      	movs	r2, #255	; 0xff
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80013e2:	2003      	movs	r0, #3
 80013e4:	f001 f9a7 	bl	8002736 <HAL_NVIC_EnableIRQ>
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	f383 8810 	msr	PRIMASK, r3
}
 80013f2:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013f4:	bf00      	nop
}
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000128 	.word	0x20000128
 8001400:	20000024 	.word	0x20000024
 8001404:	200000b4 	.word	0x200000b4
 8001408:	40002800 	.word	0x40002800
 800140c:	58000800 	.word	0x58000800
 8001410:	200000b5 	.word	0x200000b5

08001414 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001420:	79fa      	ldrb	r2, [r7, #7]
 8001422:	493c      	ldr	r1, [pc, #240]	; (8001514 <HW_TS_Start+0x100>)
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	440b      	add	r3, r1
 800142e:	330c      	adds	r3, #12
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d103      	bne.n	8001440 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff ff5e 	bl	80012fc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001440:	f3ef 8310 	mrs	r3, PRIMASK
 8001444:	60fb      	str	r3, [r7, #12]
  return(result);
 8001446:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001448:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800144a:	b672      	cpsid	i
}
 800144c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800144e:	2003      	movs	r0, #3
 8001450:	f001 f97f 	bl	8002752 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001454:	4b30      	ldr	r3, [pc, #192]	; (8001518 <HW_TS_Start+0x104>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	22ca      	movs	r2, #202	; 0xca
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
 800145e:	4b2e      	ldr	r3, [pc, #184]	; (8001518 <HW_TS_Start+0x104>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2253      	movs	r2, #83	; 0x53
 8001466:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001468:	79fa      	ldrb	r2, [r7, #7]
 800146a:	492a      	ldr	r1, [pc, #168]	; (8001514 <HW_TS_Start+0x100>)
 800146c:	4613      	mov	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	440b      	add	r3, r1
 8001476:	330c      	adds	r3, #12
 8001478:	2202      	movs	r2, #2
 800147a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800147c:	79fa      	ldrb	r2, [r7, #7]
 800147e:	4925      	ldr	r1, [pc, #148]	; (8001514 <HW_TS_Start+0x100>)
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	440b      	add	r3, r1
 800148a:	3308      	adds	r3, #8
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001490:	79fa      	ldrb	r2, [r7, #7]
 8001492:	4920      	ldr	r1, [pc, #128]	; (8001514 <HW_TS_Start+0x100>)
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	440b      	add	r3, r1
 800149e:	3304      	adds	r3, #4
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fb04 	bl	8000ab4 <linkTimer>
 80014ac:	4603      	mov	r3, r0
 80014ae:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <HW_TS_Start+0x108>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <HW_TS_Start+0x10c>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	7c7a      	ldrb	r2, [r7, #17]
 80014be:	429a      	cmp	r2, r3
 80014c0:	d002      	beq.n	80014c8 <HW_TS_Start+0xb4>
  {
    RescheduleTimerList();
 80014c2:	f7ff fcc3 	bl	8000e4c <RescheduleTimerList>
 80014c6:	e013      	b.n	80014f0 <HW_TS_Start+0xdc>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80014c8:	79fa      	ldrb	r2, [r7, #7]
 80014ca:	4912      	ldr	r1, [pc, #72]	; (8001514 <HW_TS_Start+0x100>)
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	440b      	add	r3, r1
 80014d6:	3308      	adds	r3, #8
 80014d8:	6819      	ldr	r1, [r3, #0]
 80014da:	8a7b      	ldrh	r3, [r7, #18]
 80014dc:	79fa      	ldrb	r2, [r7, #7]
 80014de:	1ac9      	subs	r1, r1, r3
 80014e0:	480c      	ldr	r0, [pc, #48]	; (8001514 <HW_TS_Start+0x100>)
 80014e2:	4613      	mov	r3, r2
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	4413      	add	r3, r2
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	4403      	add	r3, r0
 80014ec:	3308      	adds	r3, #8
 80014ee:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HW_TS_Start+0x104>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	22ff      	movs	r2, #255	; 0xff
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014fa:	2003      	movs	r0, #3
 80014fc:	f001 f91b 	bl	8002736 <HAL_NVIC_EnableIRQ>
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	f383 8810 	msr	PRIMASK, r3
}
 800150a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800150c:	bf00      	nop
}
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000024 	.word	0x20000024
 8001518:	20000128 	.word	0x20000128
 800151c:	200000b4 	.word	0x200000b4
 8001520:	200000b5 	.word	0x200000b5

08001524 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	460b      	mov	r3, r1
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4798      	blx	r3

  return;
 8001536:	bf00      	nop
}
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <LL_RCC_LSE_SetDriveCapability>:
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800154a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800154e:	f023 0218 	bic.w	r2, r3, #24
 8001552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4313      	orrs	r3, r2
 800155a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <LL_AHB2_GRP1_EnableClock>:
{
 800156a:	b480      	push	{r7}
 800156c:	b085      	sub	sp, #20
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001578:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4313      	orrs	r3, r2
 8001580:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001582:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4013      	ands	r3, r2
 800158c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800158e:	68fb      	ldr	r3, [r7, #12]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a0:	f000 fcd0 	bl	8001f44 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80015a4:	f7fe ffea 	bl	800057c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a8:	f000 f811 	bl	80015ce <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015ac:	f000 f85b 	bl	8001666 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 80015b0:	f000 f8a6 	bl	8001700 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b4:	f000 f8f4 	bl	80017a0 <MX_GPIO_Init>
  MX_COMP1_Init();
 80015b8:	f000 f876 	bl	80016a8 <MX_COMP1_Init>
  MX_RF_Init();
 80015bc:	f000 f8b4 	bl	8001728 <MX_RF_Init>
  MX_RTC_Init();
 80015c0:	f000 f8ba 	bl	8001738 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80015c4:	f7fe ffe8 	bl	8000598 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80015c8:	f7ff f94b 	bl	8000862 <MX_APPE_Process>
 80015cc:	e7fc      	b.n	80015c8 <main+0x2c>

080015ce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b098      	sub	sp, #96	; 0x60
 80015d2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	2244      	movs	r2, #68	; 0x44
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f005 ff4b 	bl	8007478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e2:	463b      	mov	r3, r7
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
 80015f0:	615a      	str	r2, [r3, #20]
 80015f2:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015f4:	f001 fc66 	bl	8002ec4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015f8:	2000      	movs	r0, #0
 80015fa:	f7ff ffa0 	bl	800153e <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80015fe:	2307      	movs	r3, #7
 8001600:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001608:	2301      	movs	r3, #1
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001610:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001612:	2340      	movs	r3, #64	; 0x40
 8001614:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001616:	2300      	movs	r3, #0
 8001618:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	4618      	mov	r0, r3
 8001620:	f002 f80e 	bl	8003640 <HAL_RCC_OscConfig>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <SystemClock_Config+0x60>
  {
    Error_Handler();
 800162a:	f000 f91b 	bl	8001864 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800162e:	236f      	movs	r3, #111	; 0x6f
 8001630:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001632:	2302      	movs	r3, #2
 8001634:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800164a:	463b      	mov	r3, r7
 800164c:	2101      	movs	r1, #1
 800164e:	4618      	mov	r0, r3
 8001650:	f002 fb2c 	bl	8003cac <HAL_RCC_ClockConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SystemClock_Config+0x90>
  {
    Error_Handler();
 800165a:	f000 f903 	bl	8001864 <Error_Handler>
  }
}
 800165e:	bf00      	nop
 8001660:	3760      	adds	r7, #96	; 0x60
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b08c      	sub	sp, #48	; 0x30
 800166a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800166c:	463b      	mov	r3, r7
 800166e:	2230      	movs	r2, #48	; 0x30
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f005 ff00 	bl	8007478 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8001678:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800167c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800167e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001684:	2300      	movs	r3, #0
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001688:	2310      	movs	r3, #16
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	4618      	mov	r0, r3
 8001690:	f002 fea2 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800169a:	f000 f8e3 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800169e:	bf00      	nop
 80016a0:	3730      	adds	r7, #48	; 0x30
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_COMP1_Init+0x4c>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <MX_COMP1_Init+0x50>)
 80016b0:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_2VREFINT;
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <MX_COMP1_Init+0x4c>)
 80016b4:	4a11      	ldr	r2, [pc, #68]	; (80016fc <MX_COMP1_Init+0x54>)
 80016b6:	60da      	str	r2, [r3, #12]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_COMP1_Init+0x4c>)
 80016ba:	2280      	movs	r2, #128	; 0x80
 80016bc:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80016be:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <MX_COMP1_Init+0x4c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	615a      	str	r2, [r3, #20]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <MX_COMP1_Init+0x4c>)
 80016c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016ca:	611a      	str	r2, [r3, #16]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_COMP1_Init+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
  hcomp1.Init.Mode = COMP_POWERMODE_ULTRALOWPOWER;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <MX_COMP1_Init+0x4c>)
 80016d4:	220c      	movs	r2, #12
 80016d6:	605a      	str	r2, [r3, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_COMP1_Init+0x4c>)
 80016da:	2231      	movs	r2, #49	; 0x31
 80016dc:	61da      	str	r2, [r3, #28]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_COMP1_Init+0x4c>)
 80016e0:	f000 fd9c 	bl	800221c <HAL_COMP_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_COMP1_Init+0x46>
  {
    Error_Handler();
 80016ea:	f000 f8bb 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000134 	.word	0x20000134
 80016f8:	40010200 	.word	0x40010200
 80016fc:	00c00010 	.word	0x00c00010

08001700 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_IPCC_Init+0x20>)
 8001706:	4a07      	ldr	r2, [pc, #28]	; (8001724 <MX_IPCC_Init+0x24>)
 8001708:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_IPCC_Init+0x20>)
 800170c:	f001 fb54 	bl	8002db8 <HAL_IPCC_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8001716:	f000 f8a5 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000015c 	.word	0x2000015c
 8001724:	58000c00 	.word	0x58000c00

08001728 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <MX_RTC_Init+0x60>)
 800173e:	4a17      	ldr	r2, [pc, #92]	; (800179c <MX_RTC_Init+0x64>)
 8001740:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <MX_RTC_Init+0x60>)
 8001744:	2200      	movs	r2, #0
 8001746:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <MX_RTC_Init+0x60>)
 800174a:	220f      	movs	r2, #15
 800174c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <MX_RTC_Init+0x60>)
 8001750:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001754:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <MX_RTC_Init+0x60>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <MX_RTC_Init+0x60>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001762:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <MX_RTC_Init+0x60>)
 8001764:	2200      	movs	r2, #0
 8001766:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001768:	480b      	ldr	r0, [pc, #44]	; (8001798 <MX_RTC_Init+0x60>)
 800176a:	f002 ff2b 	bl	80045c4 <HAL_RTC_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 8001774:	f000 f876 	bl	8001864 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xFFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001778:	2200      	movs	r2, #0
 800177a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800177e:	4806      	ldr	r0, [pc, #24]	; (8001798 <MX_RTC_Init+0x60>)
 8001780:	f003 f80e 	bl	80047a0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800178a:	f000 f86b 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 800178e:	4802      	ldr	r0, [pc, #8]	; (8001798 <MX_RTC_Init+0x60>)
 8001790:	f003 f8c2 	bl	8004918 <HAL_RTCEx_DeactivateWakeUpTimer>
  /* USER CODE END RTC_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000198 	.word	0x20000198
 800179c:	40002800 	.word	0x40002800

080017a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b4:	2004      	movs	r0, #4
 80017b6:	f7ff fed8 	bl	800156a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ba:	2080      	movs	r0, #128	; 0x80
 80017bc:	f7ff fed5 	bl	800156a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c0:	2002      	movs	r0, #2
 80017c2:	f7ff fed2 	bl	800156a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	2001      	movs	r0, #1
 80017c8:	f7ff fecf 	bl	800156a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017cc:	2010      	movs	r0, #16
 80017ce:	f7ff fecc 	bl	800156a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017d2:	2308      	movs	r3, #8
 80017d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d6:	2303      	movs	r3, #3
 80017d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	4619      	mov	r1, r3
 80017e2:	4815      	ldr	r0, [pc, #84]	; (8001838 <MX_GPIO_Init+0x98>)
 80017e4:	f001 f95c 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 PB0 PB1
                           PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1
 80017e8:	f240 33fb 	movw	r3, #1019	; 0x3fb
 80017ec:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ee:	2303      	movs	r3, #3
 80017f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4810      	ldr	r0, [pc, #64]	; (800183c <MX_GPIO_Init+0x9c>)
 80017fc:	f001 f950 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001804:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001806:	2303      	movs	r3, #3
 8001808:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	4619      	mov	r1, r3
 8001812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001816:	f001 f943 	bl	8002aa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800181a:	2310      	movs	r3, #16
 800181c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800181e:	2303      	movs	r3, #3
 8001820:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	4619      	mov	r1, r3
 800182a:	4805      	ldr	r0, [pc, #20]	; (8001840 <MX_GPIO_Init+0xa0>)
 800182c:	f001 f938 	bl	8002aa0 <HAL_GPIO_Init>

}
 8001830:	bf00      	nop
 8001832:	3718      	adds	r7, #24
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	48001c00 	.word	0x48001c00
 800183c:	48000400 	.word	0x48000400
 8001840:	48001000 	.word	0x48001000

08001844 <HAL_COMP_TriggerCallback>:

/* USER CODE BEGIN 4 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp1)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	SystemClock_Config();
 800184c:	f7ff febf 	bl	80015ce <SystemClock_Config>
	HAL_ResumeTick();
 8001850:	f000 fc0e 	bl	8002070 <HAL_ResumeTick>
	UTIL_SEQ_SetTask(1<<CFG_TASK_MYFSR, CFG_SCH_PRIO_0);
 8001854:	2100      	movs	r1, #0
 8001856:	2008      	movs	r0, #8
 8001858:	f005 fcbc 	bl	80071d4 <UTIL_SEQ_SetTask>
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001868:	b672      	cpsid	i
}
 800186a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800186c:	e7fe      	b.n	800186c <Error_Handler+0x8>
	...

08001870 <LL_PWR_SetPowerMode>:
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <LL_PWR_SetPowerMode+0x24>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 0207 	bic.w	r2, r3, #7
 8001880:	4904      	ldr	r1, [pc, #16]	; (8001894 <LL_PWR_SetPowerMode+0x24>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4313      	orrs	r3, r2
 8001886:	600b      	str	r3, [r1, #0]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	58000400 	.word	0x58000400

08001898 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <LL_PWR_ClearFlag_WU+0x14>)
 800189e:	2209      	movs	r2, #9
 80018a0:	619a      	str	r2, [r3, #24]
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	58000400 	.word	0x58000400

080018b0 <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 80018b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c2:	d101      	bne.n	80018c8 <LL_PWR_IsActiveFlag_C2SB+0x18>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <LL_PWR_IsActiveFlag_C2SB+0x1a>
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	58000400 	.word	0x58000400

080018d8 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <LL_PWR_IsActiveFlag_C2DS+0x24>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018ea:	d101      	bne.n	80018f0 <LL_PWR_IsActiveFlag_C2DS+0x18>
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <LL_PWR_IsActiveFlag_C2DS+0x1a>
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	58000400 	.word	0x58000400

08001900 <LL_RCC_HSI_Enable>:
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800190e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <LL_RCC_HSI_IsReady>:
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001930:	d101      	bne.n	8001936 <LL_RCC_HSI_IsReady+0x18>
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <LL_RCC_HSI_IsReady+0x1a>
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <LL_RCC_SetSysClkSource>:
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800194a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f023 0203 	bic.w	r2, r3, #3
 8001954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <LL_RCC_GetSysClkSource>:
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800196e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 030c 	and.w	r3, r3, #12
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <LL_RCC_SetSMPSClockSource>:
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800198a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	f023 0203 	bic.w	r2, r3, #3
 8001994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4313      	orrs	r3, r2
 800199c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80019ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80019be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019c2:	bf00      	nop
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <LL_LPM_EnableSleep+0x1c>)
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <LL_LPM_EnableSleep+0x1c>)
 80019d6:	f023 0304 	bic.w	r3, r3, #4
 80019da:	6113      	str	r3, [r2, #16]
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <LL_LPM_EnableDeepSleep+0x1c>)
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <LL_LPM_EnableDeepSleep+0x1c>)
 80019f6:	f043 0304 	orr.w	r3, r3, #4
 80019fa:	6113      	str	r3, [r2, #16]
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	3220      	adds	r2, #32
 8001a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a20:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <LL_HSEM_1StepLock+0x2c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d001      	beq.n	8001a2a <LL_HSEM_1StepLock+0x1e>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <LL_HSEM_1StepLock+0x20>
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	80000400 	.word	0x80000400

08001a3c <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001a56:	bf00      	nop
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8001a66:	f000 faf3 	bl	8002050 <HAL_SuspendTick>
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001a6a:	f7ff ff9e 	bl	80019aa <LL_RCC_ClearResetFlags>

  EnterLowPower();
 8001a6e:	f000 f835 	bl	8001adc <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8001a72:	f7ff ff11 	bl	8001898 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8001a76:	2003      	movs	r0, #3
 8001a78:	f7ff fefa 	bl	8001870 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001a7c:	f7ff ffb6 	bl	80019ec <LL_LPM_EnableDeepSleep>
#endif

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8001a80:	bf00      	nop
}
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  }
#endif
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8001a88:	bf00      	nop
}
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 8001a96:	f000 fadb 	bl	8002050 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8001a9a:	f000 f81f 	bl	8001adc <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f7ff fee6 	bl	8001870 <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001aa4:	f7ff ffa2 	bl	80019ec <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001aa8:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 8001aaa:	bf00      	nop
}
 8001aac:	bd80      	pop	{r7, pc}

08001aae <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8001ab2:	f000 f84f 	bl	8001b54 <ExitLowPower>

  HAL_ResumeTick();
 8001ab6:	f000 fadb 	bl	8002070 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 8001aba:	bf00      	nop
}
 8001abc:	bd80      	pop	{r7, pc}

08001abe <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8001ac2:	f000 fac5 	bl	8002050 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001ac6:	f7ff ff81 	bl	80019cc <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM)
  __force_stores();
#endif

  __WFI();
 8001aca:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8001acc:	bf00      	nop
}
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8001ad4:	f000 facc 	bl	8002070 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8001ad8:	bf00      	nop
}
 8001ada:	bd80      	pop	{r7, pc}

08001adc <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001ae0:	bf00      	nop
 8001ae2:	2103      	movs	r1, #3
 8001ae4:	4819      	ldr	r0, [pc, #100]	; (8001b4c <EnterLowPower+0x70>)
 8001ae6:	f7ff ff91 	bl	8001a0c <LL_HSEM_1StepLock>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f8      	bne.n	8001ae2 <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8001af0:	2104      	movs	r1, #4
 8001af2:	4816      	ldr	r0, [pc, #88]	; (8001b4c <EnterLowPower+0x70>)
 8001af4:	f7ff ff8a 	bl	8001a0c <LL_HSEM_1StepLock>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d117      	bne.n	8001b2e <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8001afe:	f7ff feeb 	bl	80018d8 <LL_PWR_IsActiveFlag_C2DS>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d104      	bne.n	8001b12 <EnterLowPower+0x36>
 8001b08:	f7ff fed2 	bl	80018b0 <LL_PWR_IsActiveFlag_C2SB>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d015      	beq.n	8001b3e <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2104      	movs	r1, #4
 8001b16:	480d      	ldr	r0, [pc, #52]	; (8001b4c <EnterLowPower+0x70>)
 8001b18:	f7ff ff90 	bl	8001a3c <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8001b1c:	f000 f834 	bl	8001b88 <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <EnterLowPower+0x74>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <EnterLowPower+0x74>)
 8001b26:	f023 0307 	bic.w	r3, r3, #7
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	e007      	b.n	8001b3e <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8001b2e:	f000 f82b 	bl	8001b88 <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <EnterLowPower+0x74>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a06      	ldr	r2, [pc, #24]	; (8001b50 <EnterLowPower+0x74>)
 8001b38:	f023 0307 	bic.w	r3, r3, #7
 8001b3c:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2103      	movs	r1, #3
 8001b42:	4802      	ldr	r0, [pc, #8]	; (8001b4c <EnterLowPower+0x70>)
 8001b44:	f7ff ff7a 	bl	8001a3c <LL_HSEM_ReleaseLock>

  return;
 8001b48:	bf00      	nop
}
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	58001400 	.word	0x58001400
 8001b50:	58004000 	.word	0x58004000

08001b54 <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	4809      	ldr	r0, [pc, #36]	; (8001b84 <ExitLowPower+0x30>)
 8001b5e:	f7ff ff6d 	bl	8001a3c <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001b62:	bf00      	nop
 8001b64:	2103      	movs	r1, #3
 8001b66:	4807      	ldr	r0, [pc, #28]	; (8001b84 <ExitLowPower+0x30>)
 8001b68:	f7ff ff50 	bl	8001a0c <LL_HSEM_1StepLock>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f8      	bne.n	8001b64 <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001b72:	f7ff fefa 	bl	800196a <LL_RCC_GetSysClkSource>

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
#endif

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2103      	movs	r1, #3
 8001b7a:	4802      	ldr	r0, [pc, #8]	; (8001b84 <ExitLowPower+0x30>)
 8001b7c:	f7ff ff5e 	bl	8001a3c <LL_HSEM_ReleaseLock>

  return;
 8001b80:	bf00      	nop
}
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	58001400 	.word	0x58001400

08001b88 <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8001b8c:	f7ff feb8 	bl	8001900 <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8001b90:	bf00      	nop
 8001b92:	f7ff fec4 	bl	800191e <LL_RCC_HSI_IsReady>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0fa      	beq.n	8001b92 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f7ff fed0 	bl	8001942 <LL_RCC_SetSysClkSource>
  LL_RCC_SetSMPSClockSource(LL_RCC_SMPS_CLKSOURCE_HSI);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f7ff feed 	bl	8001982 <LL_RCC_SetSMPSClockSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8001ba8:	bf00      	nop
 8001baa:	f7ff fede 	bl	800196a <LL_RCC_GetSysClkSource>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d1fa      	bne.n	8001baa <Switch_On_HSI+0x22>
  return;
 8001bb4:	bf00      	nop
}
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <LL_RCC_EnableRTC>:
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <LL_AHB2_GRP1_EnableClock>:
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b085      	sub	sp, #20
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001be8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	bf00      	nop
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_AHB3_GRP1_EnableClock>:
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c30:	68fb      	ldr	r3, [r7, #12]
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b085      	sub	sp, #20
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c62:	68fb      	ldr	r3, [r7, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001c74:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001c78:	f7ff ffc8 	bl	8001c0c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2100      	movs	r1, #0
 8001c80:	202e      	movs	r0, #46	; 0x2e
 8001c82:	f000 fd3e 	bl	8002702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001c86:	202e      	movs	r0, #46	; 0x2e
 8001c88:	f000 fd55 	bl	8002736 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 030c 	add.w	r3, r7, #12
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0e      	ldr	r2, [pc, #56]	; (8001ce8 <HAL_COMP_MspInit+0x58>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d116      	bne.n	8001ce0 <HAL_COMP_MspInit+0x50>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	f7ff ff91 	bl	8001bda <LL_AHB2_GRP1_EnableClock>
    /**COMP1 GPIO Configuration
    PB2     ------> COMP1_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cb8:	2304      	movs	r3, #4
 8001cba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4808      	ldr	r0, [pc, #32]	; (8001cec <HAL_COMP_MspInit+0x5c>)
 8001ccc:	f000 fee8 	bl	8002aa0 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP_IRQn, 0, 0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	2016      	movs	r0, #22
 8001cd6:	f000 fd14 	bl	8002702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8001cda:	2016      	movs	r0, #22
 8001cdc:	f000 fd2b 	bl	8002736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }

}
 8001ce0:	bf00      	nop
 8001ce2:	3720      	adds	r7, #32
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40010200 	.word	0x40010200
 8001cec:	48000400 	.word	0x48000400

08001cf0 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	; (8001d34 <HAL_IPCC_MspInit+0x44>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d113      	bne.n	8001d2a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001d02:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001d06:	f7ff ff81 	bl	8001c0c <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	202c      	movs	r0, #44	; 0x2c
 8001d10:	f000 fcf7 	bl	8002702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001d14:	202c      	movs	r0, #44	; 0x2c
 8001d16:	f000 fd0e 	bl	8002736 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	202d      	movs	r0, #45	; 0x2d
 8001d20:	f000 fcef 	bl	8002702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001d24:	202d      	movs	r0, #45	; 0x2d
 8001d26:	f000 fd06 	bl	8002736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	58000c00 	.word	0x58000c00

08001d38 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08e      	sub	sp, #56	; 0x38
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	2230      	movs	r2, #48	; 0x30
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f005 fb95 	bl	8007478 <memset>
  if(hrtc->Instance==RTC)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <HAL_RTC_MspInit+0x64>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d11d      	bne.n	8001d94 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d5c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001d5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d62:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d64:	f107 0308 	add.w	r3, r7, #8
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f002 fb35 	bl	80043d8 <HAL_RCCEx_PeriphCLKConfig>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001d74:	f7ff fd76 	bl	8001864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d78:	f7ff ff1e 	bl	8001bb8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001d7c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d80:	f7ff ff5d 	bl	8001c3e <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2100      	movs	r1, #0
 8001d88:	2003      	movs	r0, #3
 8001d8a:	f000 fcba 	bl	8002702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001d8e:	2003      	movs	r0, #3
 8001d90:	f000 fcd1 	bl	8002736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d94:	bf00      	nop
 8001d96:	3738      	adds	r7, #56	; 0x38
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40002800 	.word	0x40002800

08001da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <NMI_Handler+0x4>

08001da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001daa:	e7fe      	b.n	8001daa <HardFault_Handler+0x4>

08001dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <MemManage_Handler+0x4>

08001db2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db2:	b480      	push	{r7}
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db6:	e7fe      	b.n	8001db6 <BusFault_Handler+0x4>

08001db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <UsageFault_Handler+0x4>

08001dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dec:	f000 f904 	bl	8001ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001df0:	bf00      	nop
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001df8:	f7ff f8c6 	bl	8000f88 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 interrupts through EXTI lines 20 and 21.
  */
void COMP_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <COMP_IRQHandler+0x10>)
 8001e06:	f000 fb19 	bl	800243c <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000134 	.word	0x20000134

08001e14 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001e18:	f004 ff02 	bl	8006c20 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001e24:	f004 ff34 	bl	8006c90 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001e30:	f000 ff9e 	bl	8002d70 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001e3c:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <SystemInit+0x90>)
 8001e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e42:	4a21      	ldr	r2, [pc, #132]	; (8001ec8 <SystemInit+0x90>)
 8001e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e60:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001e64:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e70:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <SystemInit+0x94>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e82:	f023 0305 	bic.w	r3, r3, #5
 8001e86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <SystemInit+0x98>)
 8001ea4:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00
 8001ecc:	faf6fefb 	.word	0xfaf6fefb
 8001ed0:	22041000 	.word	0x22041000

08001ed4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001ed4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed8:	3304      	adds	r3, #4

08001eda <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eda:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001edc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001ede:	d3f9      	bcc.n	8001ed4 <CopyDataInit>
  bx lr
 8001ee0:	4770      	bx	lr

08001ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001ee2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001ee4:	3004      	adds	r0, #4

08001ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001ee6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001ee8:	d3fb      	bcc.n	8001ee2 <FillZerobss>
  bx lr
 8001eea:	4770      	bx	lr

08001eec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001eee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ef0:	f7ff ffa2 	bl	8001e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001ef4:	480b      	ldr	r0, [pc, #44]	; (8001f24 <LoopForever+0x8>)
 8001ef6:	490c      	ldr	r1, [pc, #48]	; (8001f28 <LoopForever+0xc>)
 8001ef8:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <LoopForever+0x10>)
 8001efa:	2300      	movs	r3, #0
 8001efc:	f7ff ffed 	bl	8001eda <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001f00:	480b      	ldr	r0, [pc, #44]	; (8001f30 <LoopForever+0x14>)
 8001f02:	490c      	ldr	r1, [pc, #48]	; (8001f34 <LoopForever+0x18>)
 8001f04:	2300      	movs	r3, #0
 8001f06:	f7ff ffee 	bl	8001ee6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001f0a:	480b      	ldr	r0, [pc, #44]	; (8001f38 <LoopForever+0x1c>)
 8001f0c:	490b      	ldr	r1, [pc, #44]	; (8001f3c <LoopForever+0x20>)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f7ff ffe9 	bl	8001ee6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f14:	f005 fa7e 	bl	8007414 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001f18:	f7ff fb40 	bl	800159c <main>

08001f1c <LoopForever>:

LoopForever:
  b LoopForever
 8001f1c:	e7fe      	b.n	8001f1c <LoopForever>
 8001f1e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001f20:	20003000 	.word	0x20003000
  INIT_DATA _sdata, _edata, _sidata
 8001f24:	20000004 	.word	0x20000004
 8001f28:	20000024 	.word	0x20000024
 8001f2c:	08007738 	.word	0x08007738
  INIT_BSS _sbss, _ebss
 8001f30:	2000010c 	.word	0x2000010c
 8001f34:	200002f8 	.word	0x200002f8
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001f38:	200301e4 	.word	0x200301e4
 8001f3c:	20030a67 	.word	0x20030a67

08001f40 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f40:	e7fe      	b.n	8001f40 <ADC1_IRQHandler>
	...

08001f44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f4e:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <HAL_Init+0x3c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <HAL_Init+0x3c>)
 8001f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f58:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f5a:	2003      	movs	r0, #3
 8001f5c:	f000 fbc6 	bl	80026ec <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f60:	200f      	movs	r0, #15
 8001f62:	f000 f80f 	bl	8001f84 <HAL_InitTick>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	71fb      	strb	r3, [r7, #7]
 8001f70:	e001      	b.n	8001f76 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f72:	f7ff fe7d 	bl	8001c70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f76:	79fb      	ldrb	r3, [r7, #7]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	58004000 	.word	0x58004000

08001f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001f90:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <HAL_InitTick+0x6c>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d024      	beq.n	8001fe2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f98:	f002 f834 	bl	8004004 <HAL_RCC_GetHCLKFreq>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <HAL_InitTick+0x6c>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa8:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 fbdc 	bl	800276e <HAL_SYSTICK_Config>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10f      	bne.n	8001fdc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b0f      	cmp	r3, #15
 8001fc0:	d809      	bhi.n	8001fd6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8001fca:	f000 fb9a 	bl	8002702 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fce:	4a09      	ldr	r2, [pc, #36]	; (8001ff4 <HAL_InitTick+0x70>)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	e007      	b.n	8001fe6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	73fb      	strb	r3, [r7, #15]
 8001fda:	e004      	b.n	8001fe6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	e001      	b.n	8001fe6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000018 	.word	0x20000018
 8001ff4:	20000014 	.word	0x20000014

08001ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <HAL_IncTick+0x20>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_IncTick+0x24>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4413      	add	r3, r2
 8002008:	4a04      	ldr	r2, [pc, #16]	; (800201c <HAL_IncTick+0x24>)
 800200a:	6013      	str	r3, [r2, #0]
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000018 	.word	0x20000018
 800201c:	200001bc 	.word	0x200001bc

08002020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return uwTick;
 8002024:	4b03      	ldr	r3, [pc, #12]	; (8002034 <HAL_GetTick+0x14>)
 8002026:	681b      	ldr	r3, [r3, #0]
}
 8002028:	4618      	mov	r0, r3
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	200001bc 	.word	0x200001bc

08002038 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800203c:	4b03      	ldr	r3, [pc, #12]	; (800204c <HAL_GetTickPrio+0x14>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	20000014 	.word	0x20000014

08002050 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_SuspendTick+0x1c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a04      	ldr	r2, [pc, #16]	; (800206c <HAL_SuspendTick+0x1c>)
 800205a:	f023 0302 	bic.w	r3, r3, #2
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000e010 	.word	0xe000e010

08002070 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_ResumeTick+0x1c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a04      	ldr	r2, [pc, #16]	; (800208c <HAL_ResumeTick+0x1c>)
 800207a:	f043 0302 	orr.w	r3, r3, #2
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e010 	.word	0xe000e010

08002090 <LL_EXTI_EnableIT_0_31>:
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <LL_EXTI_EnableIT_0_31+0x24>)
 800209a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800209e:	4905      	ldr	r1, [pc, #20]	; (80020b4 <LL_EXTI_EnableIT_0_31+0x24>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	58000800 	.word	0x58000800

080020b8 <LL_EXTI_DisableIT_0_31>:
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80020c0:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <LL_EXTI_DisableIT_0_31+0x28>)
 80020c2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	4905      	ldr	r1, [pc, #20]	; (80020e0 <LL_EXTI_DisableIT_0_31+0x28>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	58000800 	.word	0x58000800

080020e4 <LL_EXTI_EnableEvent_0_31>:
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <LL_EXTI_EnableEvent_0_31+0x24>)
 80020ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80020f2:	4905      	ldr	r1, [pc, #20]	; (8002108 <LL_EXTI_EnableEvent_0_31+0x24>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	58000800 	.word	0x58000800

0800210c <LL_EXTI_DisableEvent_0_31>:
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002114:	4b07      	ldr	r3, [pc, #28]	; (8002134 <LL_EXTI_DisableEvent_0_31+0x28>)
 8002116:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	43db      	mvns	r3, r3
 800211e:	4905      	ldr	r1, [pc, #20]	; (8002134 <LL_EXTI_DisableEvent_0_31+0x28>)
 8002120:	4013      	ands	r3, r2
 8002122:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	58000800 	.word	0x58000800

08002138 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4904      	ldr	r1, [pc, #16]	; (8002158 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4313      	orrs	r3, r2
 800214a:	600b      	str	r3, [r1, #0]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	58000800 	.word	0x58000800

0800215c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	43db      	mvns	r3, r3
 800216c:	4904      	ldr	r1, [pc, #16]	; (8002180 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800216e:	4013      	ands	r3, r2
 8002170:	600b      	str	r3, [r1, #0]

}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	58000800 	.word	0x58000800

08002184 <LL_EXTI_EnableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	4904      	ldr	r1, [pc, #16]	; (80021a4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	58000800 	.word	0x58000800

080021a8 <LL_EXTI_DisableFallingTrig_0_31>:
  *         (*) value not defined in all devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	4904      	ldr	r1, [pc, #16]	; (80021cc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	604b      	str	r3, [r1, #4]
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	58000800 	.word	0x58000800

080021d0 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80021d8:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4013      	ands	r3, r2
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d101      	bne.n	80021ea <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	58000800 	.word	0x58000800

080021fc <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	60d3      	str	r3, [r2, #12]
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	58000800 	.word	0x58000800

0800221c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002224:	2300      	movs	r3, #0
 8002226:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d102      	bne.n	8002238 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	77fb      	strb	r3, [r7, #31]
 8002236:	e0ab      	b.n	8002390 <HAL_COMP_Init+0x174>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002242:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002246:	d102      	bne.n	800224e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	77fb      	strb	r3, [r7, #31]
 800224c:	e0a0      	b.n	8002390 <HAL_COMP_Init+0x174>
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
#if defined(COMP2)
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
#endif

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	625a      	str	r2, [r3, #36]	; 0x24
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff fd11 	bl	8001c90 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002278:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68da      	ldr	r2, [r3, #12]
               | hcomp->Init.InputPlus
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	431a      	orrs	r2, r3
               | hcomp->Init.Mode
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
    tmp_csr = (  hcomp->Init.InputMinus
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]
               COMP_CSR_WINMODE  | COMP_CSR_POLARITY | COMP_CSR_HYST    |
               COMP_CSR_BLANKING | COMP_CSR_BRGEN    | COMP_CSR_SCALEN  | COMP_CSR_INMESEL,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CSR,
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b3d      	ldr	r3, [pc, #244]	; (800239c <HAL_COMP_Init+0x180>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	6979      	ldr	r1, [r7, #20]
 80022ae:	430b      	orrs	r3, r1
 80022b0:	6013      	str	r3, [r2, #0]
    }
#endif /* COMP2 */

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d016      	beq.n	80022ee <HAL_COMP_Init+0xd2>
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d113      	bne.n	80022ee <HAL_COMP_Init+0xd2>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022c6:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <HAL_COMP_Init+0x184>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	099b      	lsrs	r3, r3, #6
 80022cc:	4a35      	ldr	r2, [pc, #212]	; (80023a4 <HAL_COMP_Init+0x188>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	099b      	lsrs	r3, r3, #6
 80022d4:	1c5a      	adds	r2, r3, #1
 80022d6:	4613      	mov	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80022e0:	e002      	b.n	80022e8 <HAL_COMP_Init+0xcc>
      {
        wait_loop_index--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f9      	bne.n	80022e2 <HAL_COMP_Init+0xc6>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80022ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022f2:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	f003 0303 	and.w	r3, r3, #3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d037      	beq.n	8002370 <HAL_COMP_Init+0x154>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_COMP_Init+0xf8>
      {
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800230c:	6938      	ldr	r0, [r7, #16]
 800230e:	f7ff ff13 	bl	8002138 <LL_EXTI_EnableRisingTrig_0_31>
 8002312:	e002      	b.n	800231a <HAL_COMP_Init+0xfe>
      }
      else
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8002314:	6938      	ldr	r0, [r7, #16]
 8002316:	f7ff ff21 	bl	800215c <LL_EXTI_DisableRisingTrig_0_31>
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_COMP_Init+0x112>
      {
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8002326:	6938      	ldr	r0, [r7, #16]
 8002328:	f7ff ff2c 	bl	8002184 <LL_EXTI_EnableFallingTrig_0_31>
 800232c:	e002      	b.n	8002334 <HAL_COMP_Init+0x118>
      }
      else
      {
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800232e:	6938      	ldr	r0, [r7, #16]
 8002330:	f7ff ff3a 	bl	80021a8 <LL_EXTI_DisableFallingTrig_0_31>
      }

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8002334:	6938      	ldr	r0, [r7, #16]
 8002336:	f7ff ff61 	bl	80021fc <LL_EXTI_ClearFlag_0_31>

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_COMP_Init+0x132>
      {
        LL_EXTI_EnableEvent_0_31(exti_line);
 8002346:	6938      	ldr	r0, [r7, #16]
 8002348:	f7ff fecc 	bl	80020e4 <LL_EXTI_EnableEvent_0_31>
 800234c:	e002      	b.n	8002354 <HAL_COMP_Init+0x138>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800234e:	6938      	ldr	r0, [r7, #16]
 8002350:	f7ff fedc 	bl	800210c <LL_EXTI_DisableEvent_0_31>
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_COMP_Init+0x14c>
      {
        LL_EXTI_EnableIT_0_31(exti_line);
 8002360:	6938      	ldr	r0, [r7, #16]
 8002362:	f7ff fe95 	bl	8002090 <LL_EXTI_EnableIT_0_31>
 8002366:	e009      	b.n	800237c <HAL_COMP_Init+0x160>
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8002368:	6938      	ldr	r0, [r7, #16]
 800236a:	f7ff fea5 	bl	80020b8 <LL_EXTI_DisableIT_0_31>
 800236e:	e005      	b.n	800237c <HAL_COMP_Init+0x160>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      LL_EXTI_DisableEvent_0_31(exti_line);
 8002370:	6938      	ldr	r0, [r7, #16]
 8002372:	f7ff fecb 	bl	800210c <LL_EXTI_DisableEvent_0_31>

      /* Disable EXTI interrupt mode */
      LL_EXTI_DisableIT_0_31(exti_line);
 8002376:	6938      	ldr	r0, [r7, #16]
 8002378:	f7ff fe9e 	bl	80020b8 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d103      	bne.n	8002390 <HAL_COMP_Init+0x174>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8002390:	7ffb      	ldrb	r3, [r7, #31]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3720      	adds	r7, #32
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	f9207e03 	.word	0xf9207e03
 80023a0:	20000010 	.word	0x20000010
 80023a4:	053e2d63 	.word	0x053e2d63

080023a8 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d102      	bne.n	80023c4 <HAL_COMP_Start+0x1c>
  {
    status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
 80023c2:	e030      	b.n	8002426 <HAL_COMP_Start+0x7e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023d2:	d102      	bne.n	80023da <HAL_COMP_Start+0x32>
  {
    status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
 80023d8:	e025      	b.n	8002426 <HAL_COMP_Start+0x7e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d11d      	bne.n	8002422 <HAL_COMP_Start+0x7a>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0201 	orr.w	r2, r2, #1
 80023f4:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023fe:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_COMP_Start+0x8c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	099b      	lsrs	r3, r3, #6
 8002404:	4a0c      	ldr	r2, [pc, #48]	; (8002438 <HAL_COMP_Start+0x90>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	099b      	lsrs	r3, r3, #6
 800240c:	3301      	adds	r3, #1
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8002412:	e002      	b.n	800241a <HAL_COMP_Start+0x72>
      {
        wait_loop_index--;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	3b01      	subs	r3, #1
 8002418:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1f9      	bne.n	8002414 <HAL_COMP_Start+0x6c>
 8002420:	e001      	b.n	8002426 <HAL_COMP_Start+0x7e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002426:	7bfb      	ldrb	r3, [r7, #15]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	20000010 	.word	0x20000010
 8002438:	053e2d63 	.word	0x053e2d63

0800243c <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002444:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002448:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f7ff fec0 	bl	80021d0 <LL_EXTI_IsActiveFlag_0_31>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d005      	beq.n	8002462 <HAL_COMP_IRQHandler+0x26>
    }
    else
#endif /* COMP2 */
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f7ff fed0 	bl	80021fc <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff f9f1 	bl	8001844 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 800246a:	b480      	push	{r7}
 800246c:	b083      	sub	sp, #12
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0f9b      	lsrs	r3, r3, #30
 800247a:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 800247e:	4618      	mov	r0, r3
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a8:	4013      	ands	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024be:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <__NVIC_SetPriorityGrouping+0x44>)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	60d3      	str	r3, [r2, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	e000ed00 	.word	0xe000ed00

080024d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <__NVIC_GetPriorityGrouping+0x18>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	f003 0307 	and.w	r3, r3, #7
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	db0b      	blt.n	800251a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	f003 021f 	and.w	r2, r3, #31
 8002508:	4907      	ldr	r1, [pc, #28]	; (8002528 <__NVIC_EnableIRQ+0x38>)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	095b      	lsrs	r3, r3, #5
 8002510:	2001      	movs	r0, #1
 8002512:	fa00 f202 	lsl.w	r2, r0, r2
 8002516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800251a:	bf00      	nop
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000e100 	.word	0xe000e100

0800252c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	2b00      	cmp	r3, #0
 800253c:	db12      	blt.n	8002564 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	490a      	ldr	r1, [pc, #40]	; (8002570 <__NVIC_DisableIRQ+0x44>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	2001      	movs	r0, #1
 800254e:	fa00 f202 	lsl.w	r2, r0, r2
 8002552:	3320      	adds	r3, #32
 8002554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002558:	f3bf 8f4f 	dsb	sy
}
 800255c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800255e:	f3bf 8f6f 	isb	sy
}
 8002562:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000e100 	.word	0xe000e100

08002574 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	2b00      	cmp	r3, #0
 8002584:	db0c      	blt.n	80025a0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	f003 021f 	and.w	r2, r3, #31
 800258c:	4907      	ldr	r1, [pc, #28]	; (80025ac <__NVIC_SetPendingIRQ+0x38>)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	2001      	movs	r0, #1
 8002596:	fa00 f202 	lsl.w	r2, r0, r2
 800259a:	3340      	adds	r3, #64	; 0x40
 800259c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000e100 	.word	0xe000e100

080025b0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	db0c      	blt.n	80025dc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4907      	ldr	r1, [pc, #28]	; (80025e8 <__NVIC_ClearPendingIRQ+0x38>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2001      	movs	r0, #1
 80025d2:	fa00 f202 	lsl.w	r2, r0, r2
 80025d6:	3360      	adds	r3, #96	; 0x60
 80025d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000e100 	.word	0xe000e100

080025ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	db0a      	blt.n	8002616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	490c      	ldr	r1, [pc, #48]	; (8002638 <__NVIC_SetPriority+0x4c>)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	0112      	lsls	r2, r2, #4
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	440b      	add	r3, r1
 8002610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002614:	e00a      	b.n	800262c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4908      	ldr	r1, [pc, #32]	; (800263c <__NVIC_SetPriority+0x50>)
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	3b04      	subs	r3, #4
 8002624:	0112      	lsls	r2, r2, #4
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	440b      	add	r3, r1
 800262a:	761a      	strb	r2, [r3, #24]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000e100 	.word	0xe000e100
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f1c3 0307 	rsb	r3, r3, #7
 800265a:	2b04      	cmp	r3, #4
 800265c:	bf28      	it	cs
 800265e:	2304      	movcs	r3, #4
 8002660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3304      	adds	r3, #4
 8002666:	2b06      	cmp	r3, #6
 8002668:	d902      	bls.n	8002670 <NVIC_EncodePriority+0x30>
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3b03      	subs	r3, #3
 800266e:	e000      	b.n	8002672 <NVIC_EncodePriority+0x32>
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	f04f 32ff 	mov.w	r2, #4294967295
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43da      	mvns	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	401a      	ands	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002688:	f04f 31ff 	mov.w	r1, #4294967295
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	43d9      	mvns	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	4313      	orrs	r3, r2
         );
}
 800269a:	4618      	mov	r0, r3
 800269c:	3724      	adds	r7, #36	; 0x24
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b8:	d301      	bcc.n	80026be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00f      	b.n	80026de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <SysTick_Config+0x40>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026c6:	210f      	movs	r1, #15
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295
 80026cc:	f7ff ff8e 	bl	80025ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <SysTick_Config+0x40>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <SysTick_Config+0x40>)
 80026d8:	2207      	movs	r2, #7
 80026da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	e000e010 	.word	0xe000e010

080026ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff fec9 	bl	800248c <__NVIC_SetPriorityGrouping>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b086      	sub	sp, #24
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002710:	f7ff fee0 	bl	80024d4 <__NVIC_GetPriorityGrouping>
 8002714:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	6978      	ldr	r0, [r7, #20]
 800271c:	f7ff ff90 	bl	8002640 <NVIC_EncodePriority>
 8002720:	4602      	mov	r2, r0
 8002722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff5f 	bl	80025ec <__NVIC_SetPriority>
}
 800272e:	bf00      	nop
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	4603      	mov	r3, r0
 800273e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fed3 	bl	80024f0 <__NVIC_EnableIRQ>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800275c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fee3 	bl	800252c <__NVIC_DisableIRQ>
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ff96 	bl	80026a8 <SysTick_Config>
 800277c:	4603      	mov	r3, r0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff feed 	bl	8002574 <__NVIC_SetPendingIRQ>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b082      	sub	sp, #8
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80027ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fefd 	bl	80025b0 <__NVIC_ClearPendingIRQ>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80027ca:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_FLASH_Unlock+0x38>)
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	da0b      	bge.n	80027ea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80027d2:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <HAL_FLASH_Unlock+0x38>)
 80027d4:	4a09      	ldr	r2, [pc, #36]	; (80027fc <HAL_FLASH_Unlock+0x3c>)
 80027d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80027d8:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <HAL_FLASH_Unlock+0x38>)
 80027da:	4a09      	ldr	r2, [pc, #36]	; (8002800 <HAL_FLASH_Unlock+0x40>)
 80027dc:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80027de:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_FLASH_Unlock+0x38>)
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	da01      	bge.n	80027ea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80027ea:	79fb      	ldrb	r3, [r7, #7]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	58004000 	.word	0x58004000
 80027fc:	45670123 	.word	0x45670123
 8002800:	cdef89ab 	.word	0xcdef89ab

08002804 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800280a:	2300      	movs	r3, #0
 800280c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800280e:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_FLASH_Lock+0x30>)
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	4a08      	ldr	r2, [pc, #32]	; (8002834 <HAL_FLASH_Lock+0x30>)
 8002814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002818:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800281a:	4b06      	ldr	r3, [pc, #24]	; (8002834 <HAL_FLASH_Lock+0x30>)
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	2b00      	cmp	r3, #0
 8002820:	db01      	blt.n	8002826 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8002826:	79fb      	ldrb	r3, [r7, #7]
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	58004000 	.word	0x58004000

08002838 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8002840:	f7ff fbee 	bl	8002020 <HAL_GetTick>
 8002844:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002846:	e009      	b.n	800285c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8002848:	f7ff fbea 	bl	8002020 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	429a      	cmp	r2, r3
 8002856:	d801      	bhi.n	800285c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e054      	b.n	8002906 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800285c:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <FLASH_WaitForLastOperation+0xd8>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002868:	d0ee      	beq.n	8002848 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 800286a:	4b29      	ldr	r3, [pc, #164]	; (8002910 <FLASH_WaitForLastOperation+0xd8>)
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800287a:	4b25      	ldr	r3, [pc, #148]	; (8002910 <FLASH_WaitForLastOperation+0xd8>)
 800287c:	2201      	movs	r2, #1
 800287e:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d007      	beq.n	800289a <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800288a:	4b21      	ldr	r3, [pc, #132]	; (8002910 <FLASH_WaitForLastOperation+0xd8>)
 800288c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002890:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002898:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80028a0:	4013      	ands	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d007      	beq.n	80028be <FLASH_WaitForLastOperation+0x86>
 80028ae:	4b18      	ldr	r3, [pc, #96]	; (8002910 <FLASH_WaitForLastOperation+0xd8>)
 80028b0:	699a      	ldr	r2, [r3, #24]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80028b8:	4915      	ldr	r1, [pc, #84]	; (8002910 <FLASH_WaitForLastOperation+0xd8>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	618b      	str	r3, [r1, #24]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d004      	beq.n	80028d2 <FLASH_WaitForLastOperation+0x9a>
 80028c8:	4a11      	ldr	r2, [pc, #68]	; (8002910 <FLASH_WaitForLastOperation+0xd8>)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80028d0:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00e      	beq.n	80028f6 <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80028d8:	4a0e      	ldr	r2, [pc, #56]	; (8002914 <FLASH_WaitForLastOperation+0xdc>)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e011      	b.n	8002906 <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80028e2:	f7ff fb9d 	bl	8002020 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d801      	bhi.n	80028f6 <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e007      	b.n	8002906 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <FLASH_WaitForLastOperation+0xd8>)
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028fe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002902:	d0ee      	beq.n	80028e2 <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	58004000 	.word	0x58004000
 8002914:	200001c0 	.word	0x200001c0

08002918 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002922:	4b24      	ldr	r3, [pc, #144]	; (80029b4 <HAL_FLASHEx_Erase+0x9c>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_FLASHEx_Erase+0x16>
 800292a:	2302      	movs	r3, #2
 800292c:	e03d      	b.n	80029aa <HAL_FLASHEx_Erase+0x92>
 800292e:	4b21      	ldr	r3, [pc, #132]	; (80029b4 <HAL_FLASHEx_Erase+0x9c>)
 8002930:	2201      	movs	r2, #1
 8002932:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002934:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <HAL_FLASHEx_Erase+0x9c>)
 8002936:	2200      	movs	r2, #0
 8002938:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800293a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800293e:	f7ff ff7b 	bl	8002838 <FLASH_WaitForLastOperation>
 8002942:	4603      	mov	r3, r0
 8002944:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d12a      	bne.n	80029a2 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d124      	bne.n	800299e <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	f04f 32ff 	mov.w	r2, #4294967295
 800295a:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	e012      	b.n	800298a <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8002964:	68b8      	ldr	r0, [r7, #8]
 8002966:	f000 f827 	bl	80029b8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800296a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800296e:	f7ff ff63 	bl	8002838 <FLASH_WaitForLastOperation>
 8002972:	4603      	mov	r3, r0
 8002974:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	601a      	str	r2, [r3, #0]
          break;
 8002982:	e00a      	b.n	800299a <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	3301      	adds	r3, #1
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	4413      	add	r3, r2
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	429a      	cmp	r2, r3
 8002998:	d3e4      	bcc.n	8002964 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800299a:	f000 f86f 	bl	8002a7c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800299e:	f000 f825 	bl	80029ec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80029a2:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <HAL_FLASHEx_Erase+0x9c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]

  return status;
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	200001c0 	.word	0x200001c0

080029b8 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <FLASH_PageErase+0x30>)
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4313      	orrs	r3, r2
 80029ce:	4a06      	ldr	r2, [pc, #24]	; (80029e8 <FLASH_PageErase+0x30>)
 80029d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d4:	f043 0302 	orr.w	r3, r3, #2
 80029d8:	6153      	str	r3, [r2, #20]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	58004000 	.word	0x58004000

080029ec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 80029f0:	4b21      	ldr	r3, [pc, #132]	; (8002a78 <FLASH_FlushCaches+0x8c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029fc:	d117      	bne.n	8002a2e <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80029fe:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <FLASH_FlushCaches+0x8c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1d      	ldr	r2, [pc, #116]	; (8002a78 <FLASH_FlushCaches+0x8c>)
 8002a04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a08:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002a0a:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <FLASH_FlushCaches+0x8c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1a      	ldr	r2, [pc, #104]	; (8002a78 <FLASH_FlushCaches+0x8c>)
 8002a10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a14:	6013      	str	r3, [r2, #0]
 8002a16:	4b18      	ldr	r3, [pc, #96]	; (8002a78 <FLASH_FlushCaches+0x8c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <FLASH_FlushCaches+0x8c>)
 8002a1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a20:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a22:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <FLASH_FlushCaches+0x8c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a14      	ldr	r2, [pc, #80]	; (8002a78 <FLASH_FlushCaches+0x8c>)
 8002a28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a2c:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8002a2e:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <FLASH_FlushCaches+0x8c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a3a:	d117      	bne.n	8002a6c <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <FLASH_FlushCaches+0x8c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0d      	ldr	r2, [pc, #52]	; (8002a78 <FLASH_FlushCaches+0x8c>)
 8002a42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a46:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <FLASH_FlushCaches+0x8c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <FLASH_FlushCaches+0x8c>)
 8002a4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	4b08      	ldr	r3, [pc, #32]	; (8002a78 <FLASH_FlushCaches+0x8c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a07      	ldr	r2, [pc, #28]	; (8002a78 <FLASH_FlushCaches+0x8c>)
 8002a5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a5e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <FLASH_FlushCaches+0x8c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <FLASH_FlushCaches+0x8c>)
 8002a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a6a:	6013      	str	r3, [r2, #0]
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	58004000 	.word	0x58004000

08002a7c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <FLASH_AcknowledgePageErase+0x20>)
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	4a05      	ldr	r2, [pc, #20]	; (8002a9c <FLASH_AcknowledgePageErase+0x20>)
 8002a86:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a8a:	f023 0302 	bic.w	r3, r3, #2
 8002a8e:	6153      	str	r3, [r2, #20]
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	58004000 	.word	0x58004000

08002aa0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aae:	e146      	b.n	8002d3e <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	4013      	ands	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8138 	beq.w	8002d38 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d005      	beq.n	8002ae0 <HAL_GPIO_Init+0x40>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 0303 	and.w	r3, r3, #3
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d130      	bne.n	8002b42 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	2203      	movs	r2, #3
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	4013      	ands	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b16:	2201      	movs	r2, #1
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f003 0201 	and.w	r2, r3, #1
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	d017      	beq.n	8002b7e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	2203      	movs	r2, #3
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4013      	ands	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d123      	bne.n	8002bd2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	08da      	lsrs	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3208      	adds	r2, #8
 8002b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b96:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	220f      	movs	r2, #15
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4013      	ands	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	691a      	ldr	r2, [r3, #16]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	08da      	lsrs	r2, r3, #3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	3208      	adds	r2, #8
 8002bcc:	6939      	ldr	r1, [r7, #16]
 8002bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 0203 	and.w	r2, r3, #3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8092 	beq.w	8002d38 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002c14:	4a51      	ldr	r2, [pc, #324]	; (8002d5c <HAL_GPIO_Init+0x2bc>)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	3302      	adds	r3, #2
 8002c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	220f      	movs	r2, #15
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4013      	ands	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c3e:	d013      	beq.n	8002c68 <HAL_GPIO_Init+0x1c8>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a47      	ldr	r2, [pc, #284]	; (8002d60 <HAL_GPIO_Init+0x2c0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d00d      	beq.n	8002c64 <HAL_GPIO_Init+0x1c4>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a46      	ldr	r2, [pc, #280]	; (8002d64 <HAL_GPIO_Init+0x2c4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d007      	beq.n	8002c60 <HAL_GPIO_Init+0x1c0>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a45      	ldr	r2, [pc, #276]	; (8002d68 <HAL_GPIO_Init+0x2c8>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d101      	bne.n	8002c5c <HAL_GPIO_Init+0x1bc>
 8002c58:	2304      	movs	r3, #4
 8002c5a:	e006      	b.n	8002c6a <HAL_GPIO_Init+0x1ca>
 8002c5c:	2307      	movs	r3, #7
 8002c5e:	e004      	b.n	8002c6a <HAL_GPIO_Init+0x1ca>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e002      	b.n	8002c6a <HAL_GPIO_Init+0x1ca>
 8002c64:	2301      	movs	r3, #1
 8002c66:	e000      	b.n	8002c6a <HAL_GPIO_Init+0x1ca>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	f002 0203 	and.w	r2, r2, #3
 8002c70:	0092      	lsls	r2, r2, #2
 8002c72:	4093      	lsls	r3, r2
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c7a:	4938      	ldr	r1, [pc, #224]	; (8002d5c <HAL_GPIO_Init+0x2bc>)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	089b      	lsrs	r3, r3, #2
 8002c80:	3302      	adds	r3, #2
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c88:	4b38      	ldr	r3, [pc, #224]	; (8002d6c <HAL_GPIO_Init+0x2cc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4013      	ands	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cac:	4a2f      	ldr	r2, [pc, #188]	; (8002d6c <HAL_GPIO_Init+0x2cc>)
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002cb2:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <HAL_GPIO_Init+0x2cc>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cd6:	4a25      	ldr	r2, [pc, #148]	; (8002d6c <HAL_GPIO_Init+0x2cc>)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002cdc:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <HAL_GPIO_Init+0x2cc>)
 8002cde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	43db      	mvns	r3, r3
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4013      	ands	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d02:	4a1a      	ldr	r2, [pc, #104]	; (8002d6c <HAL_GPIO_Init+0x2cc>)
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002d0a:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <HAL_GPIO_Init+0x2cc>)
 8002d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d30:	4a0e      	ldr	r2, [pc, #56]	; (8002d6c <HAL_GPIO_Init+0x2cc>)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	fa22 f303 	lsr.w	r3, r2, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f47f aeb1 	bne.w	8002ab0 <HAL_GPIO_Init+0x10>
  }
}
 8002d4e:	bf00      	nop
 8002d50:	bf00      	nop
 8002d52:	371c      	adds	r7, #28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	40010000 	.word	0x40010000
 8002d60:	48000400 	.word	0x48000400
 8002d64:	48000800 	.word	0x48000800
 8002d68:	48001000 	.word	0x48001000
 8002d6c:	58000800 	.word	0x58000800

08002d70 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <HAL_HSEM_IRQHandler+0x30>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <HAL_HSEM_IRQHandler+0x30>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	43db      	mvns	r3, r3
 8002d84:	4906      	ldr	r1, [pc, #24]	; (8002da0 <HAL_HSEM_IRQHandler+0x30>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002d8a:	4a05      	ldr	r2, [pc, #20]	; (8002da0 <HAL_HSEM_IRQHandler+0x30>)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f807 	bl	8002da4 <HAL_HSEM_FreeCallback>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	58001500 	.word	0x58001500

08002da4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d01e      	beq.n	8002e08 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002dca:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <HAL_IPCC_Init+0x60>)
 8002dcc:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d102      	bne.n	8002de0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe ff88 	bl	8001cf0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002de0:	68b8      	ldr	r0, [r7, #8]
 8002de2:	f000 f85b 	bl	8002e9c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f82c 	bl	8002e50 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002e06:	e001      	b.n	8002e0c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	58000c00 	.word	0x58000c00

08002e1c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	4613      	mov	r3, r2
 8002e28:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b085      	sub	sp, #20
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	4613      	mov	r3, r2
 8002e42:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	e00f      	b.n	8002e7e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	4a0b      	ldr	r2, [pc, #44]	; (8002e94 <IPCC_SetDefaultCallbacks+0x44>)
 8002e68:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3306      	adds	r3, #6
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	4a08      	ldr	r2, [pc, #32]	; (8002e98 <IPCC_SetDefaultCallbacks+0x48>)
 8002e76:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	60fb      	str	r3, [r7, #12]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b05      	cmp	r3, #5
 8002e82:	d9ec      	bls.n	8002e5e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	08002e1d 	.word	0x08002e1d
 8002e98:	08002e37 	.word	0x08002e37

08002e9c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8002eb0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	223f      	movs	r2, #63	; 0x3f
 8002eb6:	609a      	str	r2, [r3, #8]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed2:	6013      	str	r3, [r2, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	58000400 	.word	0x58000400

08002ee4 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  
  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ef6:	d104      	bne.n	8002f02 <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 f84a 	bl	8002f94 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 8002f00:	e003      	b.n	8002f0a <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 f81b 	bl	8002f40 <HAL_PWREx_EnterSTOP0Mode>
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <LL_PWR_EnableSRAM2Retention>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002f1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f22:	6093      	str	r3, [r2, #8]
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	58000400 	.word	0x58000400

08002f34 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended 
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8002f38:	f7ff ffec 	bl	8002f14 <LL_PWR_EnableSRAM2Retention>
}
 8002f3c:	bf00      	nop
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8002f4a:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a0f      	ldr	r2, [pc, #60]	; (8002f8c <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8002f50:	f023 0307 	bic.w	r3, r3, #7
 8002f54:	6013      	str	r3, [r2, #0]


  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002f56:	4b0e      	ldr	r3, [pc, #56]	; (8002f90 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	4a0d      	ldr	r2, [pc, #52]	; (8002f90 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002f5c:	f043 0304 	orr.w	r3, r3, #4
 8002f60:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002f68:	bf30      	wfi
 8002f6a:	e002      	b.n	8002f72 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002f6c:	bf40      	sev
    __WFE();
 8002f6e:	bf20      	wfe
    __WFE();
 8002f70:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002f72:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	4a06      	ldr	r2, [pc, #24]	; (8002f90 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8002f78:	f023 0304 	bic.w	r3, r3, #4
 8002f7c:	6113      	str	r3, [r2, #16]
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	58000400 	.word	0x58000400
 8002f90:	e000ed00 	.word	0xe000ed00

08002f94 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
    
  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8002f9e:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f023 0307 	bic.w	r3, r3, #7
 8002fa6:	4a0f      	ldr	r2, [pc, #60]	; (8002fe4 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002fae:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	4a0d      	ldr	r2, [pc, #52]	; (8002fe8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002fb4:	f043 0304 	orr.w	r3, r3, #4
 8002fb8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002fc0:	bf30      	wfi
 8002fc2:	e002      	b.n	8002fca <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002fc4:	bf40      	sev
    __WFE();
 8002fc6:	bf20      	wfe
    __WFE();
 8002fc8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002fca:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	4a06      	ldr	r2, [pc, #24]	; (8002fe8 <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8002fd0:	f023 0304 	bic.w	r3, r3, #4
 8002fd4:	6113      	str	r3, [r2, #16]
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	58000400 	.word	0x58000400
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ffe:	d101      	bne.n	8003004 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <LL_RCC_HSE_Enable>:
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800301e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003022:	6013      	str	r3, [r2, #0]
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <LL_RCC_HSE_Disable>:
{
 800302e:	b480      	push	{r7}
 8003030:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800303c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
}
 8003042:	bf00      	nop
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <LL_RCC_HSE_IsReady>:
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800305e:	d101      	bne.n	8003064 <LL_RCC_HSE_IsReady+0x18>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <LL_RCC_HSE_IsReady+0x1a>
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <LL_RCC_HSI_Enable>:
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800307e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003082:	6013      	str	r3, [r2, #0]
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <LL_RCC_HSI_Disable>:
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800309c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030a0:	6013      	str	r3, [r2, #0]
}
 80030a2:	bf00      	nop
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <LL_RCC_HSI_IsReady>:
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80030b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030be:	d101      	bne.n	80030c4 <LL_RCC_HSI_IsReady+0x18>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e000      	b.n	80030c6 <LL_RCC_HSI_IsReady+0x1a>
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <LL_RCC_HSI_SetCalibTrimming>:
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80030d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	061b      	lsls	r3, r3, #24
 80030e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ea:	4313      	orrs	r3, r2
 80030ec:	604b      	str	r3, [r1, #4]
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <LL_RCC_LSE_Enable>:
{
 80030fa:	b480      	push	{r7}
 80030fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80030fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003106:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003112:	bf00      	nop
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <LL_RCC_LSE_Disable>:
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <LL_RCC_LSE_EnableBypass>:
{
 800313e:	b480      	push	{r7}
 8003140:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800314e:	f043 0304 	orr.w	r3, r3, #4
 8003152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003156:	bf00      	nop
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <LL_RCC_LSE_DisableBypass>:
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <LL_RCC_LSE_IsReady>:
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b02      	cmp	r3, #2
 8003194:	d101      	bne.n	800319a <LL_RCC_LSE_IsReady+0x18>
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <LL_RCC_LSE_IsReady+0x1a>
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <LL_RCC_LSI1_Enable>:
{
 80031a6:	b480      	push	{r7}
 80031a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80031aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80031be:	bf00      	nop
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <LL_RCC_LSI1_Disable>:
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80031cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031d8:	f023 0301 	bic.w	r3, r3, #1
 80031dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <LL_RCC_LSI1_IsReady>:
{
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80031ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d101      	bne.n	8003202 <LL_RCC_LSI1_IsReady+0x18>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <LL_RCC_LSI1_IsReady+0x1a>
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <LL_RCC_LSI2_Enable>:
{
 800320e:	b480      	push	{r7}
 8003210:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800321a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800321e:	f043 0304 	orr.w	r3, r3, #4
 8003222:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003226:	bf00      	nop
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <LL_RCC_LSI2_Disable>:
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003238:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800323c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003240:	f023 0304 	bic.w	r3, r3, #4
 8003244:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003248:	bf00      	nop
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <LL_RCC_LSI2_IsReady>:
{
 8003252:	b480      	push	{r7}
 8003254:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b08      	cmp	r3, #8
 8003264:	d101      	bne.n	800326a <LL_RCC_LSI2_IsReady+0x18>
 8003266:	2301      	movs	r3, #1
 8003268:	e000      	b.n	800326c <LL_RCC_LSI2_IsReady+0x1a>
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr

08003276 <LL_RCC_LSI2_SetTrimming>:
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800327e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003286:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <LL_RCC_MSI_Enable>:
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80032a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	6013      	str	r3, [r2, #0]
}
 80032b8:	bf00      	nop
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <LL_RCC_MSI_Disable>:
{
 80032c2:	b480      	push	{r7}
 80032c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80032c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032d0:	f023 0301 	bic.w	r3, r3, #1
 80032d4:	6013      	str	r3, [r2, #0]
}
 80032d6:	bf00      	nop
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <LL_RCC_MSI_IsReady>:
{
 80032e0:	b480      	push	{r7}
 80032e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80032e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d101      	bne.n	80032f6 <LL_RCC_MSI_IsReady+0x16>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <LL_RCC_MSI_IsReady+0x18>
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <LL_RCC_MSI_SetRange>:
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800330a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]
}
 800331e:	bf00      	nop
 8003320:	370c      	adds	r7, #12
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <LL_RCC_MSI_GetRange>:
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800333a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2bb0      	cmp	r3, #176	; 0xb0
 8003340:	d901      	bls.n	8003346 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003342:	23b0      	movs	r3, #176	; 0xb0
 8003344:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003346:	687b      	ldr	r3, [r7, #4]
}
 8003348:	4618      	mov	r0, r3
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800335c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800336e:	4313      	orrs	r3, r2
 8003370:	604b      	str	r3, [r1, #4]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <LL_RCC_SetSysClkSource>:
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f023 0203 	bic.w	r2, r3, #3
 8003390:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <LL_RCC_GetSysClkSource>:
{
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80033aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 030c 	and.w	r3, r3, #12
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <LL_RCC_SetAHBPrescaler>:
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80033c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80033ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80033f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <LL_RCC_SetAHB4Prescaler>:
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800341a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800341e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003422:	f023 020f 	bic.w	r2, r3, #15
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <LL_RCC_SetAPB1Prescaler>:
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003452:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4313      	orrs	r3, r2
 800345a:	608b      	str	r3, [r1, #8]
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_RCC_SetAPB2Prescaler>:
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800347a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4313      	orrs	r3, r2
 8003482:	608b      	str	r3, [r1, #8]
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <LL_RCC_GetAHBPrescaler>:
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <LL_RCC_GetAHB4Prescaler>:
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80034ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <LL_RCC_PLL_Enable>:
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80034c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034d6:	6013      	str	r3, [r2, #0]
}
 80034d8:	bf00      	nop
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <LL_RCC_PLL_Disable>:
{
 80034e2:	b480      	push	{r7}
 80034e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80034e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034f4:	6013      	str	r3, [r2, #0]
}
 80034f6:	bf00      	nop
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <LL_RCC_PLL_IsReady>:
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003512:	d101      	bne.n	8003518 <LL_RCC_PLL_IsReady+0x18>
 8003514:	2301      	movs	r3, #1
 8003516:	e000      	b.n	800351a <LL_RCC_PLL_IsReady+0x1a>
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <LL_RCC_PLL_GetN>:
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	0a1b      	lsrs	r3, r3, #8
 8003530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003534:	4618      	mov	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <LL_RCC_PLL_GetR>:
{
 800353e:	b480      	push	{r7}
 8003540:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800354c:	4618      	mov	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <LL_RCC_PLL_GetDivider>:
{
 8003556:	b480      	push	{r7}
 8003558:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800355a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003564:	4618      	mov	r0, r3
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr

0800356e <LL_RCC_PLL_GetMainSource>:
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0303 	and.w	r3, r3, #3
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <LL_RCC_IsActiveFlag_HPRE>:
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800358a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003598:	d101      	bne.n	800359e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80035aa:	b480      	push	{r7}
 80035ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80035ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80035b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035be:	d101      	bne.n	80035c4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80035d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80035dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035e4:	d101      	bne.n	80035ea <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <LL_RCC_IsActiveFlag_PPRE1>:
{
 80035f6:	b480      	push	{r7}
 80035f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80035fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003608:	d101      	bne.n	800360e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800360a:	2301      	movs	r3, #1
 800360c:	e000      	b.n	8003610 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr

0800361a <LL_RCC_IsActiveFlag_PPRE2>:
{
 800361a:	b480      	push	{r7}
 800361c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800361e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003628:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800362c:	d101      	bne.n	8003632 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003640:	b590      	push	{r4, r7, lr}
 8003642:	b08d      	sub	sp, #52	; 0x34
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e324      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 808d 	beq.w	800377a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003660:	f7ff fea1 	bl	80033a6 <LL_RCC_GetSysClkSource>
 8003664:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003666:	f7ff ff82 	bl	800356e <LL_RCC_PLL_GetMainSource>
 800366a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_RCC_OscConfig+0x3e>
 8003672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003674:	2b0c      	cmp	r3, #12
 8003676:	d147      	bne.n	8003708 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367a:	2b01      	cmp	r3, #1
 800367c:	d144      	bne.n	8003708 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e308      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800368e:	f7ff fe4c 	bl	800332a <LL_RCC_MSI_GetRange>
 8003692:	4603      	mov	r3, r0
 8003694:	429c      	cmp	r4, r3
 8003696:	d914      	bls.n	80036c2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fcc5 	bl	800402c <RCC_SetFlashLatencyFromMSIRange>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e2f7      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fe26 	bl	8003302 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff fe4a 	bl	8003354 <LL_RCC_MSI_SetCalibTrimming>
 80036c0:	e013      	b.n	80036ea <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fe1b 	bl	8003302 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fe3f 	bl	8003354 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fca6 	bl	800402c <RCC_SetFlashLatencyFromMSIRange>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e2d8      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80036ea:	f000 fc8b 	bl	8004004 <HAL_RCC_GetHCLKFreq>
 80036ee:	4603      	mov	r3, r0
 80036f0:	4aa4      	ldr	r2, [pc, #656]	; (8003984 <HAL_RCC_OscConfig+0x344>)
 80036f2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80036f4:	4ba4      	ldr	r3, [pc, #656]	; (8003988 <HAL_RCC_OscConfig+0x348>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fe fc43 	bl	8001f84 <HAL_InitTick>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d039      	beq.n	8003778 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e2c9      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d01e      	beq.n	800374e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003710:	f7ff fdc8 	bl	80032a4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003714:	f7fe fc84 	bl	8002020 <HAL_GetTick>
 8003718:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800371c:	f7fe fc80 	bl	8002020 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e2b6      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 800372e:	f7ff fdd7 	bl	80032e0 <LL_RCC_MSI_IsReady>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f1      	beq.n	800371c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff fde0 	bl	8003302 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff fe04 	bl	8003354 <LL_RCC_MSI_SetCalibTrimming>
 800374c:	e015      	b.n	800377a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800374e:	f7ff fdb8 	bl	80032c2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003752:	f7fe fc65 	bl	8002020 <HAL_GetTick>
 8003756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800375a:	f7fe fc61 	bl	8002020 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e297      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 800376c:	f7ff fdb8 	bl	80032e0 <LL_RCC_MSI_IsReady>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f1      	bne.n	800375a <HAL_RCC_OscConfig+0x11a>
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003778:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d047      	beq.n	8003816 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003786:	f7ff fe0e 	bl	80033a6 <LL_RCC_GetSysClkSource>
 800378a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800378c:	f7ff feef 	bl	800356e <LL_RCC_PLL_GetMainSource>
 8003790:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	2b08      	cmp	r3, #8
 8003796:	d005      	beq.n	80037a4 <HAL_RCC_OscConfig+0x164>
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	2b0c      	cmp	r3, #12
 800379c:	d108      	bne.n	80037b0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	2b03      	cmp	r3, #3
 80037a2:	d105      	bne.n	80037b0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d134      	bne.n	8003816 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e275      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b8:	d102      	bne.n	80037c0 <HAL_RCC_OscConfig+0x180>
 80037ba:	f7ff fc29 	bl	8003010 <LL_RCC_HSE_Enable>
 80037be:	e001      	b.n	80037c4 <HAL_RCC_OscConfig+0x184>
 80037c0:	f7ff fc35 	bl	800302e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d012      	beq.n	80037f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fe fc28 	bl	8002020 <HAL_GetTick>
 80037d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d4:	f7fe fc24 	bl	8002020 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	; 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e25a      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 80037e6:	f7ff fc31 	bl	800304c <LL_RCC_HSE_IsReady>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f1      	beq.n	80037d4 <HAL_RCC_OscConfig+0x194>
 80037f0:	e011      	b.n	8003816 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f2:	f7fe fc15 	bl	8002020 <HAL_GetTick>
 80037f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037fa:	f7fe fc11 	bl	8002020 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b64      	cmp	r3, #100	; 0x64
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e247      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 800380c:	f7ff fc1e 	bl	800304c <LL_RCC_HSE_IsReady>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f1      	bne.n	80037fa <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d04c      	beq.n	80038bc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003822:	f7ff fdc0 	bl	80033a6 <LL_RCC_GetSysClkSource>
 8003826:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003828:	f7ff fea1 	bl	800356e <LL_RCC_PLL_GetMainSource>
 800382c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2b04      	cmp	r3, #4
 8003832:	d005      	beq.n	8003840 <HAL_RCC_OscConfig+0x200>
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	2b0c      	cmp	r3, #12
 8003838:	d10e      	bne.n	8003858 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2b02      	cmp	r3, #2
 800383e:	d10b      	bne.n	8003858 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e227      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fc3d 	bl	80030d0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003856:	e031      	b.n	80038bc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d019      	beq.n	8003894 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003860:	f7ff fc06 	bl	8003070 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fe fbdc 	bl	8002020 <HAL_GetTick>
 8003868:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800386c:	f7fe fbd8 	bl	8002020 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e20e      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 800387e:	f7ff fc15 	bl	80030ac <LL_RCC_HSI_IsReady>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d0f1      	beq.n	800386c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff fc1f 	bl	80030d0 <LL_RCC_HSI_SetCalibTrimming>
 8003892:	e013      	b.n	80038bc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003894:	f7ff fbfb 	bl	800308e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7fe fbc2 	bl	8002020 <HAL_GetTick>
 800389c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038a0:	f7fe fbbe 	bl	8002020 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e1f4      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 80038b2:	f7ff fbfb 	bl	80030ac <LL_RCC_HSI_IsReady>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f1      	bne.n	80038a0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d106      	bne.n	80038d6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80a3 	beq.w	8003a1c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d076      	beq.n	80039cc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d046      	beq.n	8003978 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80038ea:	f7ff fc7e 	bl	80031ea <LL_RCC_LSI1_IsReady>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d113      	bne.n	800391c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80038f4:	f7ff fc57 	bl	80031a6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038f8:	f7fe fb92 	bl	8002020 <HAL_GetTick>
 80038fc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003900:	f7fe fb8e 	bl	8002020 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e1c4      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003912:	f7ff fc6a 	bl	80031ea <LL_RCC_LSI1_IsReady>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f1      	beq.n	8003900 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800391c:	f7ff fc77 	bl	800320e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fe fb7e 	bl	8002020 <HAL_GetTick>
 8003924:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003928:	f7fe fb7a 	bl	8002020 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b03      	cmp	r3, #3
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e1b0      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800393a:	f7ff fc8a 	bl	8003252 <LL_RCC_LSI2_IsReady>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f1      	beq.n	8003928 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fc94 	bl	8003276 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800394e:	f7ff fc3b 	bl	80031c8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003952:	f7fe fb65 	bl	8002020 <HAL_GetTick>
 8003956:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800395a:	f7fe fb61 	bl	8002020 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e197      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800396c:	f7ff fc3d 	bl	80031ea <LL_RCC_LSI1_IsReady>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f1      	bne.n	800395a <HAL_RCC_OscConfig+0x31a>
 8003976:	e051      	b.n	8003a1c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003978:	f7ff fc15 	bl	80031a6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fe fb50 	bl	8002020 <HAL_GetTick>
 8003980:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003982:	e00c      	b.n	800399e <HAL_RCC_OscConfig+0x35e>
 8003984:	20000010 	.word	0x20000010
 8003988:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800398c:	f7fe fb48 	bl	8002020 <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e17e      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800399e:	f7ff fc24 	bl	80031ea <LL_RCC_LSI1_IsReady>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f1      	beq.n	800398c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80039a8:	f7ff fc42 	bl	8003230 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80039ae:	f7fe fb37 	bl	8002020 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e16d      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80039c0:	f7ff fc47 	bl	8003252 <LL_RCC_LSI2_IsReady>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f1      	bne.n	80039ae <HAL_RCC_OscConfig+0x36e>
 80039ca:	e027      	b.n	8003a1c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80039cc:	f7ff fc30 	bl	8003230 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d0:	f7fe fb26 	bl	8002020 <HAL_GetTick>
 80039d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80039d8:	f7fe fb22 	bl	8002020 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b03      	cmp	r3, #3
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e158      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80039ea:	f7ff fc32 	bl	8003252 <LL_RCC_LSI2_IsReady>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f1      	bne.n	80039d8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80039f4:	f7ff fbe8 	bl	80031c8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f8:	f7fe fb12 	bl	8002020 <HAL_GetTick>
 80039fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003a00:	f7fe fb0e 	bl	8002020 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e144      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003a12:	f7ff fbea 	bl	80031ea <LL_RCC_LSI1_IsReady>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f1      	bne.n	8003a00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d05b      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a28:	4b9e      	ldr	r3, [pc, #632]	; (8003ca4 <HAL_RCC_OscConfig+0x664>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d114      	bne.n	8003a5e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003a34:	f7ff fa46 	bl	8002ec4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a38:	f7fe faf2 	bl	8002020 <HAL_GetTick>
 8003a3c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a40:	f7fe faee 	bl	8002020 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e124      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a52:	4b94      	ldr	r3, [pc, #592]	; (8003ca4 <HAL_RCC_OscConfig+0x664>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d102      	bne.n	8003a6c <HAL_RCC_OscConfig+0x42c>
 8003a66:	f7ff fb48 	bl	80030fa <LL_RCC_LSE_Enable>
 8003a6a:	e00c      	b.n	8003a86 <HAL_RCC_OscConfig+0x446>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	2b05      	cmp	r3, #5
 8003a72:	d104      	bne.n	8003a7e <HAL_RCC_OscConfig+0x43e>
 8003a74:	f7ff fb63 	bl	800313e <LL_RCC_LSE_EnableBypass>
 8003a78:	f7ff fb3f 	bl	80030fa <LL_RCC_LSE_Enable>
 8003a7c:	e003      	b.n	8003a86 <HAL_RCC_OscConfig+0x446>
 8003a7e:	f7ff fb4d 	bl	800311c <LL_RCC_LSE_Disable>
 8003a82:	f7ff fb6d 	bl	8003160 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d014      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a8e:	f7fe fac7 	bl	8002020 <HAL_GetTick>
 8003a92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003a94:	e00a      	b.n	8003aac <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a96:	f7fe fac3 	bl	8002020 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e0f7      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003aac:	f7ff fb69 	bl	8003182 <LL_RCC_LSE_IsReady>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0ef      	beq.n	8003a96 <HAL_RCC_OscConfig+0x456>
 8003ab6:	e013      	b.n	8003ae0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab8:	f7fe fab2 	bl	8002020 <HAL_GetTick>
 8003abc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac0:	f7fe faae 	bl	8002020 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e0e2      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003ad6:	f7ff fb54 	bl	8003182 <LL_RCC_LSE_IsReady>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1ef      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 80d8 	beq.w	8003c9a <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aea:	f7ff fc5c 	bl	80033a6 <LL_RCC_GetSysClkSource>
 8003aee:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	f040 80a6 	bne.w	8003c4e <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f003 0203 	and.w	r2, r3, #3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d123      	bne.n	8003b58 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d11c      	bne.n	8003b58 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	0a1b      	lsrs	r3, r3, #8
 8003b22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d114      	bne.n	8003b58 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d10d      	bne.n	8003b58 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d106      	bne.n	8003b58 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d054      	beq.n	8003c02 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	2b0c      	cmp	r3, #12
 8003b5c:	d04f      	beq.n	8003bfe <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b5e:	f7ff fcc0 	bl	80034e2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b62:	f7fe fa5d 	bl	8002020 <HAL_GetTick>
 8003b66:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6a:	f7fe fa59 	bl	8002020 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e08f      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1ef      	bne.n	8003b6a <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	4b45      	ldr	r3, [pc, #276]	; (8003ca8 <HAL_RCC_OscConfig+0x668>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b9c:	4311      	orrs	r1, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ba2:	0212      	lsls	r2, r2, #8
 8003ba4:	4311      	orrs	r1, r2
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003baa:	4311      	orrs	r1, r2
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bb0:	4311      	orrs	r1, r2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003bc0:	f7ff fc80 	bl	80034c4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003bd4:	f7fe fa24 	bl	8002020 <HAL_GetTick>
 8003bd8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bdc:	f7fe fa20 	bl	8002020 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e056      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ef      	beq.n	8003bdc <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bfc:	e04d      	b.n	8003c9a <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e04c      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d144      	bne.n	8003c9a <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c10:	f7ff fc58 	bl	80034c4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c24:	f7fe f9fc 	bl	8002020 <HAL_GetTick>
 8003c28:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2c:	f7fe f9f8 	bl	8002020 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e02e      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0ef      	beq.n	8003c2c <HAL_RCC_OscConfig+0x5ec>
 8003c4c:	e025      	b.n	8003c9a <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2b0c      	cmp	r3, #12
 8003c52:	d020      	beq.n	8003c96 <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c54:	f7ff fc45 	bl	80034e2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c58:	f7fe f9e2 	bl	8002020 <HAL_GetTick>
 8003c5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c5e:	e008      	b.n	8003c72 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c60:	f7fe f9de 	bl	8002020 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e014      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1ef      	bne.n	8003c60 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8003c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	f023 0303 	bic.w	r3, r3, #3
 8003c92:	60d3      	str	r3, [r2, #12]
 8003c94:	e001      	b.n	8003c9a <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3734      	adds	r7, #52	; 0x34
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd90      	pop	{r4, r7, pc}
 8003ca4:	58000400 	.word	0x58000400
 8003ca8:	11c1808c 	.word	0x11c1808c

08003cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e12d      	b.n	8003f1c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cc0:	4b98      	ldr	r3, [pc, #608]	; (8003f24 <HAL_RCC_ClockConfig+0x278>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d91b      	bls.n	8003d06 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cce:	4b95      	ldr	r3, [pc, #596]	; (8003f24 <HAL_RCC_ClockConfig+0x278>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f023 0207 	bic.w	r2, r3, #7
 8003cd6:	4993      	ldr	r1, [pc, #588]	; (8003f24 <HAL_RCC_ClockConfig+0x278>)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cde:	f7fe f99f 	bl	8002020 <HAL_GetTick>
 8003ce2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ce6:	f7fe f99b 	bl	8002020 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e111      	b.n	8003f1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf8:	4b8a      	ldr	r3, [pc, #552]	; (8003f24 <HAL_RCC_ClockConfig+0x278>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d1ef      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d016      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff fb51 	bl	80033be <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d1c:	f7fe f980 	bl	8002020 <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d24:	f7fe f97c 	bl	8002020 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e0f2      	b.n	8003f1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003d36:	f7ff fc26 	bl	8003586 <LL_RCC_IsActiveFlag_HPRE>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f1      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0320 	and.w	r3, r3, #32
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d016      	beq.n	8003d7a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7ff fb48 	bl	80033e6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d56:	f7fe f963 	bl	8002020 <HAL_GetTick>
 8003d5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003d5c:	e008      	b.n	8003d70 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d5e:	f7fe f95f 	bl	8002020 <HAL_GetTick>
 8003d62:	4602      	mov	r2, r0
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e0d5      	b.n	8003f1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003d70:	f7ff fc1b 	bl	80035aa <LL_RCC_IsActiveFlag_C2HPRE>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f1      	beq.n	8003d5e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d016      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fb41 	bl	8003412 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003d90:	f7fe f946 	bl	8002020 <HAL_GetTick>
 8003d94:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003d98:	f7fe f942 	bl	8002020 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e0b8      	b.n	8003f1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003daa:	f7ff fc11 	bl	80035d0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d0f1      	beq.n	8003d98 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d016      	beq.n	8003dee <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fb3b 	bl	8003440 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003dca:	f7fe f929 	bl	8002020 <HAL_GetTick>
 8003dce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003dd2:	f7fe f925 	bl	8002020 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e09b      	b.n	8003f1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003de4:	f7ff fc07 	bl	80035f6 <LL_RCC_IsActiveFlag_PPRE1>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f1      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d017      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fb31 	bl	8003468 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003e06:	f7fe f90b 	bl	8002020 <HAL_GetTick>
 8003e0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003e0e:	f7fe f907 	bl	8002020 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e07d      	b.n	8003f1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003e20:	f7ff fbfb 	bl	800361a <LL_RCC_IsActiveFlag_PPRE2>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f1      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d043      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d106      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003e3e:	f7ff f905 	bl	800304c <LL_RCC_HSE_IsReady>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d11e      	bne.n	8003e86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e067      	b.n	8003f1c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d106      	bne.n	8003e62 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003e54:	f7ff fb54 	bl	8003500 <LL_RCC_PLL_IsReady>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d113      	bne.n	8003e86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e05c      	b.n	8003f1c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003e6a:	f7ff fa39 	bl	80032e0 <LL_RCC_MSI_IsReady>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d108      	bne.n	8003e86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e051      	b.n	8003f1c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003e78:	f7ff f918 	bl	80030ac <LL_RCC_HSI_IsReady>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e04a      	b.n	8003f1c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff fa77 	bl	800337e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e90:	f7fe f8c6 	bl	8002020 <HAL_GetTick>
 8003e94:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e96:	e00a      	b.n	8003eae <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e98:	f7fe f8c2 	bl	8002020 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e036      	b.n	8003f1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eae:	f7ff fa7a 	bl	80033a6 <LL_RCC_GetSysClkSource>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d1ec      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ebe:	4b19      	ldr	r3, [pc, #100]	; (8003f24 <HAL_RCC_ClockConfig+0x278>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d21b      	bcs.n	8003f04 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ecc:	4b15      	ldr	r3, [pc, #84]	; (8003f24 <HAL_RCC_ClockConfig+0x278>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f023 0207 	bic.w	r2, r3, #7
 8003ed4:	4913      	ldr	r1, [pc, #76]	; (8003f24 <HAL_RCC_ClockConfig+0x278>)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003edc:	f7fe f8a0 	bl	8002020 <HAL_GetTick>
 8003ee0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ee4:	f7fe f89c 	bl	8002020 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e012      	b.n	8003f1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <HAL_RCC_ClockConfig+0x278>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d1ef      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003f04:	f000 f87e 	bl	8004004 <HAL_RCC_GetHCLKFreq>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	4a07      	ldr	r2, [pc, #28]	; (8003f28 <HAL_RCC_ClockConfig+0x27c>)
 8003f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003f0e:	f7fe f893 	bl	8002038 <HAL_GetTickPrio>
 8003f12:	4603      	mov	r3, r0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fe f835 	bl	8001f84 <HAL_InitTick>
 8003f1a:	4603      	mov	r3, r0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	58004000 	.word	0x58004000
 8003f28:	20000010 	.word	0x20000010

08003f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f2c:	b590      	push	{r4, r7, lr}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f32:	f7ff fa38 	bl	80033a6 <LL_RCC_GetSysClkSource>
 8003f36:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10a      	bne.n	8003f54 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003f3e:	f7ff f9f4 	bl	800332a <LL_RCC_MSI_GetRange>
 8003f42:	4603      	mov	r3, r0
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	4a2b      	ldr	r2, [pc, #172]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	e04b      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d102      	bne.n	8003f60 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f5a:	4b28      	ldr	r3, [pc, #160]	; (8003ffc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	e045      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d10a      	bne.n	8003f7c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003f66:	f7ff f841 	bl	8002fec <LL_RCC_HSE_IsEnabledDiv2>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d102      	bne.n	8003f76 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003f70:	4b22      	ldr	r3, [pc, #136]	; (8003ffc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	e03a      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003f76:	4b22      	ldr	r3, [pc, #136]	; (8004000 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	e037      	b.n	8003fec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003f7c:	f7ff faf7 	bl	800356e <LL_RCC_PLL_GetMainSource>
 8003f80:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d003      	beq.n	8003f90 <HAL_RCC_GetSysClockFreq+0x64>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d003      	beq.n	8003f96 <HAL_RCC_GetSysClockFreq+0x6a>
 8003f8e:	e00d      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003f90:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003f92:	60bb      	str	r3, [r7, #8]
        break;
 8003f94:	e015      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003f96:	f7ff f829 	bl	8002fec <LL_RCC_HSE_IsEnabledDiv2>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d102      	bne.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003fa0:	4b16      	ldr	r3, [pc, #88]	; (8003ffc <HAL_RCC_GetSysClockFreq+0xd0>)
 8003fa2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003fa4:	e00d      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003fa6:	4b16      	ldr	r3, [pc, #88]	; (8004000 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003fa8:	60bb      	str	r3, [r7, #8]
        break;
 8003faa:	e00a      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003fac:	f7ff f9bd 	bl	800332a <LL_RCC_MSI_GetRange>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	091b      	lsrs	r3, r3, #4
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	4a0f      	ldr	r2, [pc, #60]	; (8003ff8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fbe:	60bb      	str	r3, [r7, #8]
        break;
 8003fc0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003fc2:	f7ff faaf 	bl	8003524 <LL_RCC_PLL_GetN>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	fb03 f402 	mul.w	r4, r3, r2
 8003fce:	f7ff fac2 	bl	8003556 <LL_RCC_PLL_GetDivider>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	fbb4 f4f3 	udiv	r4, r4, r3
 8003fdc:	f7ff faaf 	bl	800353e <LL_RCC_PLL_GetR>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	0f5b      	lsrs	r3, r3, #29
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	fbb4 f3f3 	udiv	r3, r4, r3
 8003fea:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003fec:	68fb      	ldr	r3, [r7, #12]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd90      	pop	{r4, r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	080076b8 	.word	0x080076b8
 8003ffc:	00f42400 	.word	0x00f42400
 8004000:	01e84800 	.word	0x01e84800

08004004 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004004:	b598      	push	{r3, r4, r7, lr}
 8004006:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004008:	f7ff ff90 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 800400c:	4604      	mov	r4, r0
 800400e:	f7ff fa3f 	bl	8003490 <LL_RCC_GetAHBPrescaler>
 8004012:	4603      	mov	r3, r0
 8004014:	091b      	lsrs	r3, r3, #4
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	4a03      	ldr	r2, [pc, #12]	; (8004028 <HAL_RCC_GetHCLKFreq+0x24>)
 800401c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004020:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004024:	4618      	mov	r0, r3
 8004026:	bd98      	pop	{r3, r4, r7, pc}
 8004028:	08007678 	.word	0x08007678

0800402c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2bb0      	cmp	r3, #176	; 0xb0
 8004038:	d903      	bls.n	8004042 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800403a:	4b14      	ldr	r3, [pc, #80]	; (800408c <RCC_SetFlashLatencyFromMSIRange+0x60>)
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	e007      	b.n	8004052 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	091b      	lsrs	r3, r3, #4
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	4a10      	ldr	r2, [pc, #64]	; (800408c <RCC_SetFlashLatencyFromMSIRange+0x60>)
 800404c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004050:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004052:	f7ff fa29 	bl	80034a8 <LL_RCC_GetAHB4Prescaler>
 8004056:	4603      	mov	r3, r0
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	4a0c      	ldr	r2, [pc, #48]	; (8004090 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	fbb2 f3f3 	udiv	r3, r2, r3
 800406a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4a09      	ldr	r2, [pc, #36]	; (8004094 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	0c9b      	lsrs	r3, r3, #18
 8004076:	f44f 7100 	mov.w	r1, #512	; 0x200
 800407a:	4618      	mov	r0, r3
 800407c:	f000 f80c 	bl	8004098 <RCC_SetFlashLatency>
 8004080:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	080076b8 	.word	0x080076b8
 8004090:	08007678 	.word	0x08007678
 8004094:	431bde83 	.word	0x431bde83

08004098 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004098:	b590      	push	{r4, r7, lr}
 800409a:	b08f      	sub	sp, #60	; 0x3c
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80040a2:	4b24      	ldr	r3, [pc, #144]	; (8004134 <RCC_SetFlashLatency+0x9c>)
 80040a4:	f107 041c 	add.w	r4, r7, #28
 80040a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80040ae:	4b22      	ldr	r3, [pc, #136]	; (8004138 <RCC_SetFlashLatency+0xa0>)
 80040b0:	f107 040c 	add.w	r4, r7, #12
 80040b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80040ba:	2300      	movs	r3, #0
 80040bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80040be:	2300      	movs	r3, #0
 80040c0:	633b      	str	r3, [r7, #48]	; 0x30
 80040c2:	e013      	b.n	80040ec <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80040c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	3338      	adds	r3, #56	; 0x38
 80040ca:	443b      	add	r3, r7
 80040cc:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d807      	bhi.n	80040e6 <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 80040d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	3338      	adds	r3, #56	; 0x38
 80040dc:	443b      	add	r3, r7
 80040de:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80040e2:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 80040e4:	e005      	b.n	80040f2 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	3301      	adds	r3, #1
 80040ea:	633b      	str	r3, [r7, #48]	; 0x30
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d9e8      	bls.n	80040c4 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80040f2:	4b12      	ldr	r3, [pc, #72]	; (800413c <RCC_SetFlashLatency+0xa4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 0207 	bic.w	r2, r3, #7
 80040fa:	4910      	ldr	r1, [pc, #64]	; (800413c <RCC_SetFlashLatency+0xa4>)
 80040fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040fe:	4313      	orrs	r3, r2
 8004100:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004102:	f7fd ff8d 	bl	8002020 <HAL_GetTick>
 8004106:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004108:	e008      	b.n	800411c <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800410a:	f7fd ff89 	bl	8002020 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e007      	b.n	800412c <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800411c:	4b07      	ldr	r3, [pc, #28]	; (800413c <RCC_SetFlashLatency+0xa4>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004126:	429a      	cmp	r2, r3
 8004128:	d1ef      	bne.n	800410a <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	373c      	adds	r7, #60	; 0x3c
 8004130:	46bd      	mov	sp, r7
 8004132:	bd90      	pop	{r4, r7, pc}
 8004134:	080074bc 	.word	0x080074bc
 8004138:	080074cc 	.word	0x080074cc
 800413c:	58004000 	.word	0x58004000

08004140 <LL_RCC_LSE_IsEnabled>:
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <LL_RCC_LSE_IsEnabled+0x18>
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <LL_RCC_LSE_IsEnabled+0x1a>
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <LL_RCC_LSE_IsReady>:
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b02      	cmp	r3, #2
 8004176:	d101      	bne.n	800417c <LL_RCC_LSE_IsReady+0x18>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <LL_RCC_LSE_IsReady+0x1a>
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <LL_RCC_SetRFWKPClockSource>:
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004198:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800419c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <LL_RCC_SetSMPSClockSource>:
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80041bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	f023 0203 	bic.w	r2, r3, #3
 80041c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	624b      	str	r3, [r1, #36]	; 0x24
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <LL_RCC_SetSMPSPrescaler>:
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80041e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <LL_RCC_SetUSARTClockSource>:
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800420c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004214:	f023 0203 	bic.w	r2, r3, #3
 8004218:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <LL_RCC_SetLPUARTClockSource>:
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004240:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004244:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4313      	orrs	r3, r2
 800424c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <LL_RCC_SetI2CClockSource>:
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004268:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	091b      	lsrs	r3, r3, #4
 8004270:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004274:	43db      	mvns	r3, r3
 8004276:	401a      	ands	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004280:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <LL_RCC_SetLPTIMClockSource>:
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800429e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	0c1b      	lsrs	r3, r3, #16
 80042aa:	041b      	lsls	r3, r3, #16
 80042ac:	43db      	mvns	r3, r3
 80042ae:	401a      	ands	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	041b      	lsls	r3, r3, #16
 80042b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <LL_RCC_SetRNGClockSource>:
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80042d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042da:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80042de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <LL_RCC_SetCLK48ClockSource>:
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004306:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800430a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4313      	orrs	r3, r2
 8004312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004316:	bf00      	nop
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr

08004322 <LL_RCC_SetADCClockSource>:
{
 8004322:	b480      	push	{r7}
 8004324:	b083      	sub	sp, #12
 8004326:	af00      	add	r7, sp, #0
 8004328:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800432a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800432e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004332:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004336:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <LL_RCC_SetRTCClockSource>:
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <LL_RCC_GetRTCClockSource>:
{
 800437a:	b480      	push	{r7}
 800437c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800437e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004386:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800438a:	4618      	mov	r0, r3
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <LL_RCC_ForceBackupDomainReset>:
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80043ac:	bf00      	nop
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80043b6:	b480      	push	{r7}
 80043b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80043ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80043ce:	bf00      	nop
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80043e0:	2300      	movs	r3, #0
 80043e2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80043e4:	2300      	movs	r3, #0
 80043e6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d046      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80043f4:	f7ff ffc1 	bl	800437a <LL_RCC_GetRTCClockSource>
 80043f8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	429a      	cmp	r2, r3
 8004402:	d03c      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004404:	f7fe fd5e 	bl	8002ec4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d105      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff ff9b 	bl	800434e <LL_RCC_SetRTCClockSource>
 8004418:	e02e      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800441a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004422:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004424:	f7ff ffb6 	bl	8004394 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004428:	f7ff ffc5 	bl	80043b6 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800443a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004444:	f7ff fe7c 	bl	8004140 <LL_RCC_LSE_IsEnabled>
 8004448:	4603      	mov	r3, r0
 800444a:	2b01      	cmp	r3, #1
 800444c:	d114      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800444e:	f7fd fde7 	bl	8002020 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004454:	e00b      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004456:	f7fd fde3 	bl	8002020 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f241 3288 	movw	r2, #5000	; 0x1388
 8004464:	4293      	cmp	r3, r2
 8004466:	d902      	bls.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	77fb      	strb	r3, [r7, #31]
              break;
 800446c:	e004      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 800446e:	f7ff fe79 	bl	8004164 <LL_RCC_LSE_IsReady>
 8004472:	4603      	mov	r3, r0
 8004474:	2b01      	cmp	r3, #1
 8004476:	d1ee      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004478:	7ffb      	ldrb	r3, [r7, #31]
 800447a:	77bb      	strb	r3, [r7, #30]
 800447c:	e001      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447e:	7ffb      	ldrb	r3, [r7, #31]
 8004480:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b00      	cmp	r3, #0
 800448c:	d004      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff feb6 	bl	8004204 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d004      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff fec1 	bl	8004230 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d004      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff fee9 	bl	8004296 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d004      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff fede 	bl	8004296 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0304 	and.w	r3, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d004      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7ff feb6 	bl	800425c <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d02b      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004504:	d008      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800450e:	d003      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d105      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff fed4 	bl	80042ca <LL_RCC_SetRNGClockSource>
 8004522:	e00a      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	2000      	movs	r0, #0
 8004530:	f7ff fecb 	bl	80042ca <LL_RCC_SetRNGClockSource>
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f7ff fede 	bl	80042f6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004542:	d107      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x17c>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800454e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004552:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455c:	2b00      	cmp	r3, #0
 800455e:	d011      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	4618      	mov	r0, r3
 8004566:	f7ff fedc 	bl	8004322 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004572:	d107      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800457e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004582:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d004      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff fdf7 	bl	8004188 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff fe16 	bl	80041dc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fdfd 	bl	80041b4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80045ba:	7fbb      	ldrb	r3, [r7, #30]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3720      	adds	r7, #32
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e090      	b.n	80046f8 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fd fba4 	bl	8001d38 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	22ca      	movs	r2, #202	; 0xca
 80045fe:	625a      	str	r2, [r3, #36]	; 0x24
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2253      	movs	r2, #83	; 0x53
 8004606:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f89f 	bl	800474c <RTC_EnterInitMode>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d009      	beq.n	8004628 <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	22ff      	movs	r2, #255	; 0xff
 800461a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2204      	movs	r2, #4
 8004620:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e067      	b.n	80046f8 <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6812      	ldr	r2, [r2, #0]
 8004632:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800463a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6899      	ldr	r1, [r3, #8]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	68d2      	ldr	r2, [r2, #12]
 8004662:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6919      	ldr	r1, [r3, #16]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	041a      	lsls	r2, r3, #16
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004686:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 0202 	bic.w	r2, r2, #2
 8004696:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69da      	ldr	r2, [r3, #28]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0320 	and.w	r3, r3, #32
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d113      	bne.n	80046e6 <HAL_RTC_Init+0x122>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f81e 	bl	8004700 <HAL_RTC_WaitForSynchro>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00d      	beq.n	80046e6 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	22ff      	movs	r2, #255	; 0xff
 80046d0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2204      	movs	r2, #4
 80046d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e008      	b.n	80046f8 <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	22ff      	movs	r2, #255	; 0xff
 80046ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 80046f6:	2300      	movs	r3, #0
  }
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004716:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004718:	f7fd fc82 	bl	8002020 <HAL_GetTick>
 800471c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800471e:	e009      	b.n	8004734 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004720:	f7fd fc7e 	bl	8002020 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800472e:	d901      	bls.n	8004734 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e007      	b.n	8004744 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0ee      	beq.n	8004720 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475e:	2b00      	cmp	r3, #0
 8004760:	d119      	bne.n	8004796 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f04f 32ff 	mov.w	r2, #4294967295
 800476a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800476c:	f7fd fc58 	bl	8002020 <HAL_GetTick>
 8004770:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004772:	e009      	b.n	8004788 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004774:	f7fd fc54 	bl	8002020 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004782:	d901      	bls.n	8004788 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e007      	b.n	8004798 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0ee      	beq.n	8004774 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e0a8      	b.n	800490c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	22ca      	movs	r2, #202	; 0xca
 80047d0:	625a      	str	r2, [r3, #36]	; 0x24
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2253      	movs	r2, #83	; 0x53
 80047d8:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d020      	beq.n	800482a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80047e8:	f7fd fc1a 	bl	8002020 <HAL_GetTick>
 80047ec:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80047ee:	e015      	b.n	800481c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047f0:	f7fd fc16 	bl	8002020 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047fe:	d90d      	bls.n	800481c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	22ff      	movs	r2, #255	; 0xff
 8004806:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2203      	movs	r2, #3
 800480c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e077      	b.n	800490c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e2      	bne.n	80047f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004838:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	b2da      	uxtb	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800484a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800484c:	f7fd fbe8 	bl	8002020 <HAL_GetTick>
 8004850:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004852:	e015      	b.n	8004880 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004854:	f7fd fbe4 	bl	8002020 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004862:	d90d      	bls.n	8004880 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	22ff      	movs	r2, #255	; 0xff
 800486a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2203      	movs	r2, #3
 8004870:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e045      	b.n	800490c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0e2      	beq.n	8004854 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0207 	bic.w	r2, r2, #7
 80048a4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6899      	ldr	r1, [r3, #8]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80048b6:	4b17      	ldr	r3, [pc, #92]	; (8004914 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80048b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048bc:	4a15      	ldr	r2, [pc, #84]	; (8004914 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80048be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048c2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80048c6:	4b13      	ldr	r3, [pc, #76]	; (8004914 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a12      	ldr	r2, [pc, #72]	; (8004914 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80048cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048d0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048e0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048f0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	22ff      	movs	r2, #255	; 0xff
 80048f8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	58000800 	.word	0x58000800

08004918 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d101      	bne.n	800492e <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800492a:	2302      	movs	r3, #2
 800492c:	e04d      	b.n	80049ca <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2202      	movs	r2, #2
 800493a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	22ca      	movs	r2, #202	; 0xca
 8004944:	625a      	str	r2, [r3, #36]	; 0x24
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2253      	movs	r2, #83	; 0x53
 800494c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800495c:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800496c:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800496e:	f7fd fb57 	bl	8002020 <HAL_GetTick>
 8004972:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004974:	e015      	b.n	80049a2 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004976:	f7fd fb53 	bl	8002020 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004984:	d90d      	bls.n	80049a2 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	22ff      	movs	r2, #255	; 0xff
 800498c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2203      	movs	r2, #3
 8004992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e013      	b.n	80049ca <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0e2      	beq.n	8004976 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	22ff      	movs	r2, #255	; 0xff
 80049b6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80049d2:	b5b0      	push	{r4, r5, r7, lr}
 80049d4:	b0ce      	sub	sp, #312	; 0x138
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	4605      	mov	r5, r0
 80049da:	460c      	mov	r4, r1
 80049dc:	4610      	mov	r0, r2
 80049de:	4619      	mov	r1, r3
 80049e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80049e4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80049e8:	462a      	mov	r2, r5
 80049ea:	701a      	strb	r2, [r3, #0]
 80049ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80049f0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80049f4:	4622      	mov	r2, r4
 80049f6:	801a      	strh	r2, [r3, #0]
 80049f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80049fc:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8004a00:	4602      	mov	r2, r0
 8004a02:	801a      	strh	r2, [r3, #0]
 8004a04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004a08:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8004a0c:	460a      	mov	r2, r1
 8004a0e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8004a10:	f107 0310 	add.w	r3, r7, #16
 8004a14:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8004a18:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004a1c:	3308      	adds	r3, #8
 8004a1e:	f107 0210 	add.w	r2, r7, #16
 8004a22:	4413      	add	r3, r2
 8004a24:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004a28:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004a2c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004a30:	4413      	add	r3, r2
 8004a32:	3309      	adds	r3, #9
 8004a34:	f107 0210 	add.w	r2, r7, #16
 8004a38:	4413      	add	r3, r2
 8004a3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004a3e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004a42:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004a46:	2200      	movs	r2, #0
 8004a48:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8004a50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a54:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004a58:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8004a5c:	7812      	ldrb	r2, [r2, #0]
 8004a5e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004a60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a64:	3301      	adds	r3, #1
 8004a66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8004a6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a6e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004a72:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8004a76:	8812      	ldrh	r2, [r2, #0]
 8004a78:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8004a7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a80:	3302      	adds	r3, #2
 8004a82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8004a86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004a8a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004a8e:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8004a92:	8812      	ldrh	r2, [r2, #0]
 8004a94:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8004a98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a9c:	3302      	adds	r3, #2
 8004a9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8004aa2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004aa6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8004aaa:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8004aae:	7812      	ldrb	r2, [r2, #0]
 8004ab0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004ab2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8004abc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004ac0:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8004ac4:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004ac6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004aca:	3301      	adds	r3, #1
 8004acc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8004ad0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004ad4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004ad8:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8004ada:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004ade:	3301      	adds	r3, #1
 8004ae0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8004ae4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004ae8:	3308      	adds	r3, #8
 8004aea:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004aee:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fc21 	bl	800533a <Osal_MemCpy>
    index_input += Local_Name_Length;
 8004af8:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004afc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004b00:	4413      	add	r3, r2
 8004b02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8004b06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b0a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004b0e:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004b10:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b14:	3301      	adds	r3, #1
 8004b16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8004b1a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004b1e:	3301      	adds	r3, #1
 8004b20:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004b24:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fc06 	bl	800533a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8004b2e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004b32:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004b36:	4413      	add	r3, r2
 8004b38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8004b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b40:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8004b44:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004b46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8004b50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b54:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8004b58:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8004b5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b5e:	3302      	adds	r3, #2
 8004b60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004b64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004b68:	2218      	movs	r2, #24
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 fbf4 	bl	800535a <Osal_MemSet>
  rq.ogf = 0x3f;
 8004b72:	233f      	movs	r3, #63	; 0x3f
 8004b74:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8004b78:	2383      	movs	r3, #131	; 0x83
 8004b7a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004b7e:	f107 0310 	add.w	r3, r7, #16
 8004b82:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004b86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004b8e:	f107 030f 	add.w	r3, r7, #15
 8004b92:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004b9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fe50 	bl	8005848 <hci_send_req>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	da01      	bge.n	8004bb2 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8004bae:	23ff      	movs	r3, #255	; 0xff
 8004bb0:	e004      	b.n	8004bbc <aci_gap_set_discoverable+0x1ea>
  return status;
 8004bb2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004bb6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004bba:	781b      	ldrb	r3, [r3, #0]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bdb0      	pop	{r4, r5, r7, pc}

08004bc6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8004bc6:	b590      	push	{r4, r7, lr}
 8004bc8:	b0cd      	sub	sp, #308	; 0x134
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	4604      	mov	r4, r0
 8004bce:	4608      	mov	r0, r1
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004bd6:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004be4:	4622      	mov	r2, r4
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bec:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	701a      	strb	r2, [r3, #0]
 8004bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf8:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8004bfc:	460a      	mov	r2, r1
 8004bfe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8004c00:	f107 0310 	add.w	r3, r7, #16
 8004c04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8004c08:	f107 0308 	add.w	r3, r7, #8
 8004c0c:	2207      	movs	r2, #7
 8004c0e:	2100      	movs	r1, #0
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 fba2 	bl	800535a <Osal_MemSet>
  int index_input = 0;
 8004c16:	2300      	movs	r3, #0
 8004c18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8004c1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c20:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c24:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004c28:	7812      	ldrb	r2, [r2, #0]
 8004c2a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004c2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c30:	3301      	adds	r3, #1
 8004c32:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8004c36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c3a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c3e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004c42:	7812      	ldrb	r2, [r2, #0]
 8004c44:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004c46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8004c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c54:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c58:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8004c5c:	7812      	ldrb	r2, [r2, #0]
 8004c5e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004c60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c64:	3301      	adds	r3, #1
 8004c66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004c6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004c6e:	2218      	movs	r2, #24
 8004c70:	2100      	movs	r1, #0
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 fb71 	bl	800535a <Osal_MemSet>
  rq.ogf = 0x3f;
 8004c78:	233f      	movs	r3, #63	; 0x3f
 8004c7a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8004c7e:	238a      	movs	r3, #138	; 0x8a
 8004c80:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004c84:	f107 0310 	add.w	r3, r7, #16
 8004c88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004c8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004c90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004c94:	f107 0308 	add.w	r3, r7, #8
 8004c98:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8004c9c:	2307      	movs	r3, #7
 8004c9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004ca2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fdcd 	bl	8005848 <hci_send_req>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	da01      	bge.n	8004cb8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8004cb4:	23ff      	movs	r3, #255	; 0xff
 8004cb6:	e02e      	b.n	8004d16 <aci_gap_init+0x150>
  if ( resp.Status )
 8004cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cbc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d005      	beq.n	8004cd2 <aci_gap_init+0x10c>
    return resp.Status;
 8004cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	e021      	b.n	8004d16 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8004cd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004cda:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8004cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004cf4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8004cfe:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8004d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d04:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004d08:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8004d12:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd90      	pop	{r4, r7, pc}

08004d20 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b0cc      	sub	sp, #304	; 0x130
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4602      	mov	r2, r0
 8004d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d30:	6019      	str	r1, [r3, #0]
 8004d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d36:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004d3a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8004d3c:	f107 0310 	add.w	r3, r7, #16
 8004d40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d48:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8004d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d5e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004d62:	7812      	ldrb	r2, [r2, #0]
 8004d64:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004d66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8004d70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d74:	1c58      	adds	r0, r3, #1
 8004d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004d7e:	781a      	ldrb	r2, [r3, #0]
 8004d80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d88:	6819      	ldr	r1, [r3, #0]
 8004d8a:	f000 fad6 	bl	800533a <Osal_MemCpy>
  index_input += AdvDataLen;
 8004d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d92:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004d9c:	4413      	add	r3, r2
 8004d9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004da2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004da6:	2218      	movs	r2, #24
 8004da8:	2100      	movs	r1, #0
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 fad5 	bl	800535a <Osal_MemSet>
  rq.ogf = 0x3f;
 8004db0:	233f      	movs	r3, #63	; 0x3f
 8004db2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8004db6:	238e      	movs	r3, #142	; 0x8e
 8004db8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004dbc:	f107 0310 	add.w	r3, r7, #16
 8004dc0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004dc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004dc8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004dcc:	f107 030f 	add.w	r3, r7, #15
 8004dd0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004dda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004dde:	2100      	movs	r1, #0
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 fd31 	bl	8005848 <hci_send_req>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	da01      	bge.n	8004df0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8004dec:	23ff      	movs	r3, #255	; 0xff
 8004dee:	e004      	b.n	8004dfa <aci_gap_update_adv_data+0xda>
  return status;
 8004df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004df8:	781b      	ldrb	r3, [r3, #0]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <aci_gap_delete_ad_type>:

tBleStatus aci_gap_delete_ad_type( uint8_t ADType )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b0cc      	sub	sp, #304	; 0x130
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e10:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8004e14:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_delete_ad_type_cp0 *cp0 = (aci_gap_delete_ad_type_cp0*)(cmd_buffer);
 8004e16:	f107 0310 	add.w	r3, r7, #16
 8004e1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004e1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e22:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004e26:	2200      	movs	r2, #0
 8004e28:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ADType = ADType;
 8004e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e34:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e38:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8004e3c:	7812      	ldrb	r2, [r2, #0]
 8004e3e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004e40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e44:	3301      	adds	r3, #1
 8004e46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004e4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e4e:	2218      	movs	r2, #24
 8004e50:	2100      	movs	r1, #0
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fa81 	bl	800535a <Osal_MemSet>
  rq.ogf = 0x3f;
 8004e58:	233f      	movs	r3, #63	; 0x3f
 8004e5a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08f;
 8004e5e:	238f      	movs	r3, #143	; 0x8f
 8004e60:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004e64:	f107 0310 	add.w	r3, r7, #16
 8004e68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004e6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004e70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004e74:	f107 030f 	add.w	r3, r7, #15
 8004e78:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004e82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e86:	2100      	movs	r1, #0
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 fcdd 	bl	8005848 <hci_send_req>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	da01      	bge.n	8004e98 <aci_gap_delete_ad_type+0x94>
    return BLE_STATUS_TIMEOUT;
 8004e94:	23ff      	movs	r3, #255	; 0xff
 8004e96:	e004      	b.n	8004ea2 <aci_gap_delete_ad_type+0x9e>
  return status;
 8004e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e9c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004ea0:	781b      	ldrb	r3, [r3, #0]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004eb6:	f107 0308 	add.w	r3, r7, #8
 8004eba:	2218      	movs	r2, #24
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fa4b 	bl	800535a <Osal_MemSet>
  rq.ogf = 0x3f;
 8004ec4:	233f      	movs	r3, #63	; 0x3f
 8004ec6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8004ec8:	f240 1301 	movw	r3, #257	; 0x101
 8004ecc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004ece:	1dfb      	adds	r3, r7, #7
 8004ed0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004ed6:	f107 0308 	add.w	r3, r7, #8
 8004eda:	2100      	movs	r1, #0
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fcb3 	bl	8005848 <hci_send_req>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	da01      	bge.n	8004eec <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8004ee8:	23ff      	movs	r3, #255	; 0xff
 8004eea:	e000      	b.n	8004eee <aci_gatt_init+0x42>
  return status;
 8004eec:	79fb      	ldrb	r3, [r7, #7]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3720      	adds	r7, #32
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8004ef6:	b5b0      	push	{r4, r5, r7, lr}
 8004ef8:	b0cc      	sub	sp, #304	; 0x130
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	4605      	mov	r5, r0
 8004efe:	460c      	mov	r4, r1
 8004f00:	4610      	mov	r0, r2
 8004f02:	4619      	mov	r1, r3
 8004f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f08:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8004f0c:	462a      	mov	r2, r5
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f18:	4622      	mov	r2, r4
 8004f1a:	801a      	strh	r2, [r3, #0]
 8004f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f20:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8004f24:	4602      	mov	r2, r0
 8004f26:	701a      	strb	r2, [r3, #0]
 8004f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f2c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004f30:	460a      	mov	r2, r1
 8004f32:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8004f34:	f107 0310 	add.w	r3, r7, #16
 8004f38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f40:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8004f44:	2200      	movs	r2, #0
 8004f46:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8004f4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f52:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f56:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8004f5a:	8812      	ldrh	r2, [r2, #0]
 8004f5c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8004f5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f62:	3302      	adds	r3, #2
 8004f64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8004f68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f70:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004f74:	8812      	ldrh	r2, [r2, #0]
 8004f76:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8004f78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f7c:	3302      	adds	r3, #2
 8004f7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8004f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f86:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004f8a:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8004f8e:	7812      	ldrb	r2, [r2, #0]
 8004f90:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8004f92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f96:	3301      	adds	r3, #1
 8004f98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8004f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fa0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fa4:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8004fa8:	7812      	ldrb	r2, [r2, #0]
 8004faa:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004fac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8004fb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fba:	1d98      	adds	r0, r3, #6
 8004fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc0:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004fcc:	f000 f9b5 	bl	800533a <Osal_MemCpy>
  index_input += Char_Value_Length;
 8004fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8004fde:	4413      	add	r3, r2
 8004fe0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004fe4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004fe8:	2218      	movs	r2, #24
 8004fea:	2100      	movs	r1, #0
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 f9b4 	bl	800535a <Osal_MemSet>
  rq.ogf = 0x3f;
 8004ff2:	233f      	movs	r3, #63	; 0x3f
 8004ff4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8004ff8:	f44f 7383 	mov.w	r3, #262	; 0x106
 8004ffc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005000:	f107 0310 	add.w	r3, r7, #16
 8005004:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005008:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800500c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005010:	f107 030f 	add.w	r3, r7, #15
 8005014:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005018:	2301      	movs	r3, #1
 800501a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800501e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005022:	2100      	movs	r1, #0
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fc0f 	bl	8005848 <hci_send_req>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	da01      	bge.n	8005034 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8005030:	23ff      	movs	r3, #255	; 0xff
 8005032:	e004      	b.n	800503e <aci_gatt_update_char_value+0x148>
  return status;
 8005034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005038:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800503c:	781b      	ldrb	r3, [r3, #0]
}
 800503e:	4618      	mov	r0, r3
 8005040:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005044:	46bd      	mov	sp, r7
 8005046:	bdb0      	pop	{r4, r5, r7, pc}

08005048 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b0cc      	sub	sp, #304	; 0x130
 800504c:	af00      	add	r7, sp, #0
 800504e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800505c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005060:	4602      	mov	r2, r0
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005068:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800506c:	460a      	mov	r2, r1
 800506e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8005070:	f107 0310 	add.w	r3, r7, #16
 8005074:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800507c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005080:	2200      	movs	r2, #0
 8005082:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800508a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800508e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005092:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005096:	7812      	ldrb	r2, [r2, #0]
 8005098:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800509a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800509e:	3301      	adds	r3, #1
 80050a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 80050a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050ac:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80050b0:	7812      	ldrb	r2, [r2, #0]
 80050b2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80050b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80050b8:	3301      	adds	r3, #1
 80050ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80050be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050c2:	1c98      	adds	r0, r3, #2
 80050c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80050cc:	781a      	ldrb	r2, [r3, #0]
 80050ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d6:	6819      	ldr	r1, [r3, #0]
 80050d8:	f000 f92f 	bl	800533a <Osal_MemCpy>
  index_input += Length;
 80050dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80050ea:	4413      	add	r3, r2
 80050ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80050f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80050f4:	2218      	movs	r2, #24
 80050f6:	2100      	movs	r1, #0
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 f92e 	bl	800535a <Osal_MemSet>
  rq.ogf = 0x3f;
 80050fe:	233f      	movs	r3, #63	; 0x3f
 8005100:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8005104:	230c      	movs	r3, #12
 8005106:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800510a:	f107 0310 	add.w	r3, r7, #16
 800510e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8005112:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005116:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800511a:	f107 030f 	add.w	r3, r7, #15
 800511e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8005122:	2301      	movs	r3, #1
 8005124:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005128:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800512c:	2100      	movs	r1, #0
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fb8a 	bl	8005848 <hci_send_req>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	da01      	bge.n	800513e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800513a:	23ff      	movs	r3, #255	; 0xff
 800513c:	e004      	b.n	8005148 <aci_hal_write_config_data+0x100>
  return status;
 800513e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005142:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005146:	781b      	ldrb	r3, [r3, #0]
}
 8005148:	4618      	mov	r0, r3
 800514a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b0cc      	sub	sp, #304	; 0x130
 8005156:	af00      	add	r7, sp, #0
 8005158:	4602      	mov	r2, r0
 800515a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800515e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005168:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800516c:	460a      	mov	r2, r1
 800516e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8005170:	f107 0310 	add.w	r3, r7, #16
 8005174:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005178:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005184:	2300      	movs	r3, #0
 8005186:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800518a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800518e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005192:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8005196:	7812      	ldrb	r2, [r2, #0]
 8005198:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800519a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800519e:	3301      	adds	r3, #1
 80051a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 80051a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80051ac:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80051b0:	7812      	ldrb	r2, [r2, #0]
 80051b2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80051b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80051b8:	3301      	adds	r3, #1
 80051ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80051be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051c2:	2218      	movs	r2, #24
 80051c4:	2100      	movs	r1, #0
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 f8c7 	bl	800535a <Osal_MemSet>
  rq.ogf = 0x3f;
 80051cc:	233f      	movs	r3, #63	; 0x3f
 80051ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80051d2:	230f      	movs	r3, #15
 80051d4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80051d8:	f107 0310 	add.w	r3, r7, #16
 80051dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80051e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80051e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80051e8:	f107 030f 	add.w	r3, r7, #15
 80051ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80051f0:	2301      	movs	r3, #1
 80051f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80051f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80051fa:	2100      	movs	r1, #0
 80051fc:	4618      	mov	r0, r3
 80051fe:	f000 fb23 	bl	8005848 <hci_send_req>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	da01      	bge.n	800520c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8005208:	23ff      	movs	r3, #255	; 0xff
 800520a:	e004      	b.n	8005216 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800520c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005210:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005214:	781b      	ldrb	r3, [r3, #0]
}
 8005216:	4618      	mov	r0, r3
 8005218:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005226:	2300      	movs	r3, #0
 8005228:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800522a:	f107 0308 	add.w	r3, r7, #8
 800522e:	2218      	movs	r2, #24
 8005230:	2100      	movs	r1, #0
 8005232:	4618      	mov	r0, r3
 8005234:	f000 f891 	bl	800535a <Osal_MemSet>
  rq.ogf = 0x03;
 8005238:	2303      	movs	r3, #3
 800523a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800523c:	2303      	movs	r3, #3
 800523e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005240:	1dfb      	adds	r3, r7, #7
 8005242:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005244:	2301      	movs	r3, #1
 8005246:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005248:	f107 0308 	add.w	r3, r7, #8
 800524c:	2100      	movs	r1, #0
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fafa 	bl	8005848 <hci_send_req>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	da01      	bge.n	800525e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800525a:	23ff      	movs	r3, #255	; 0xff
 800525c:	e000      	b.n	8005260 <hci_reset+0x40>
  return status;
 800525e:	79fb      	ldrb	r3, [r7, #7]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3720      	adds	r7, #32
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <hci_le_set_scan_response_data>:
  return status;
}

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b0cc      	sub	sp, #304	; 0x130
 800526c:	af00      	add	r7, sp, #0
 800526e:	4602      	mov	r2, r0
 8005270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005274:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005278:	6019      	str	r1, [r3, #0]
 800527a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800527e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8005282:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 8005284:	f107 0310 	add.w	r3, r7, #16
 8005288:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800528c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005290:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8005294:	2200      	movs	r2, #0
 8005296:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005298:	2300      	movs	r3, #0
 800529a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 800529e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80052a6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80052aa:	7812      	ldrb	r2, [r2, #0]
 80052ac:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80052ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052b2:	3301      	adds	r3, #1
 80052b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 80052b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052bc:	1c58      	adds	r0, r3, #1
 80052be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052c6:	221f      	movs	r2, #31
 80052c8:	6819      	ldr	r1, [r3, #0]
 80052ca:	f000 f836 	bl	800533a <Osal_MemCpy>
  index_input += 31;
 80052ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052d2:	331f      	adds	r3, #31
 80052d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80052d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052dc:	2218      	movs	r2, #24
 80052de:	2100      	movs	r1, #0
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 f83a 	bl	800535a <Osal_MemSet>
  rq.ogf = 0x08;
 80052e6:	2308      	movs	r3, #8
 80052e8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 80052ec:	2309      	movs	r3, #9
 80052ee:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80052f2:	f107 0310 	add.w	r3, r7, #16
 80052f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80052fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80052fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005302:	f107 030f 	add.w	r3, r7, #15
 8005306:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800530a:	2301      	movs	r3, #1
 800530c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005310:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005314:	2100      	movs	r1, #0
 8005316:	4618      	mov	r0, r3
 8005318:	f000 fa96 	bl	8005848 <hci_send_req>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	da01      	bge.n	8005326 <hci_le_set_scan_response_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8005322:	23ff      	movs	r3, #255	; 0xff
 8005324:	e004      	b.n	8005330 <hci_le_set_scan_response_data+0xc8>
  return status;
 8005326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800532a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800532e:	781b      	ldrb	r3, [r3, #0]
}
 8005330:	4618      	mov	r0, r3
 8005332:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b084      	sub	sp, #16
 800533e:	af00      	add	r7, sp, #0
 8005340:	60f8      	str	r0, [r7, #12]
 8005342:	60b9      	str	r1, [r7, #8]
 8005344:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f002 f886 	bl	800745c <memcpy>
 8005350:	4603      	mov	r3, r0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	60f8      	str	r0, [r7, #12]
 8005362:	60b9      	str	r1, [r7, #8]
 8005364:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f002 f884 	bl	8007478 <memset>
 8005370:	4603      	mov	r3, r0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800537a:	b480      	push	{r7}
 800537c:	af00      	add	r7, sp, #0
  return;
 800537e:	bf00      	nop
}
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
  return;
 800538c:	bf00      	nop
}
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8005396:	b480      	push	{r7}
 8005398:	af00      	add	r7, sp, #0
  return;
 800539a:	bf00      	nop
}
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  return;
 80053a8:	bf00      	nop
}
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80053b2:	b480      	push	{r7}
 80053b4:	af00      	add	r7, sp, #0
  return;
 80053b6:	bf00      	nop
}
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  return;
 80053c4:	bf00      	nop
}
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80053ce:	b480      	push	{r7}
 80053d0:	af00      	add	r7, sp, #0
  return;
 80053d2:	bf00      	nop
}
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  return;
 80053e0:	bf00      	nop
}
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80053ea:	b480      	push	{r7}
 80053ec:	af00      	add	r7, sp, #0
  return;
 80053ee:	bf00      	nop
}
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return;
 80053fc:	bf00      	nop
}
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8005406:	b480      	push	{r7}
 8005408:	af00      	add	r7, sp, #0
  return;
 800540a:	bf00      	nop
}
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8005414:	b480      	push	{r7}
 8005416:	af00      	add	r7, sp, #0
  return;
 8005418:	bf00      	nop
}
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8005422:	b480      	push	{r7}
 8005424:	af00      	add	r7, sp, #0
  return;
 8005426:	bf00      	nop
}
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  return;
 8005434:	bf00      	nop
}
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800543e:	b480      	push	{r7}
 8005440:	af00      	add	r7, sp, #0
  return;
 8005442:	bf00      	nop
}
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
  return;
 8005450:	bf00      	nop
}
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800545a:	b480      	push	{r7}
 800545c:	af00      	add	r7, sp, #0
  return;
 800545e:	bf00      	nop
}
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  return;
 800546c:	bf00      	nop
}
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
	...

08005478 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800547c:	4b04      	ldr	r3, [pc, #16]	; (8005490 <SVCCTL_Init+0x18>)
 800547e:	2200      	movs	r2, #0
 8005480:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8005482:	4b04      	ldr	r3, [pc, #16]	; (8005494 <SVCCTL_Init+0x1c>)
 8005484:	2200      	movs	r2, #0
 8005486:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8005488:	f000 f806 	bl	8005498 <SVCCTL_SvcInit>

  return;
 800548c:	bf00      	nop
}
 800548e:	bd80      	pop	{r7, pc}
 8005490:	200000c0 	.word	0x200000c0
 8005494:	200000e0 	.word	0x200000e0

08005498 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
  BAS_Init();
 800549c:	f7ff ff6d 	bl	800537a <BAS_Init>

  BLS_Init();
 80054a0:	f7ff ff72 	bl	8005388 <BLS_Init>

  CRS_STM_Init();
 80054a4:	f7ff ff77 	bl	8005396 <CRS_STM_Init>

  DIS_Init();
 80054a8:	f7ff ff7c 	bl	80053a4 <DIS_Init>

  EDS_STM_Init();
 80054ac:	f7ff ff81 	bl	80053b2 <EDS_STM_Init>

  HIDS_Init();
 80054b0:	f7ff ff86 	bl	80053c0 <HIDS_Init>

  HRS_Init();
 80054b4:	f7ff ff8b 	bl	80053ce <HRS_Init>

  HTS_Init();
 80054b8:	f7ff ff90 	bl	80053dc <HTS_Init>

  IAS_Init();
 80054bc:	f7ff ff95 	bl	80053ea <IAS_Init>

  LLS_Init();
 80054c0:	f7ff ff9a 	bl	80053f8 <LLS_Init>

  TPS_Init();
 80054c4:	f7ff ff9f 	bl	8005406 <TPS_Init>

  MOTENV_STM_Init();
 80054c8:	f7ff ffa4 	bl	8005414 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80054cc:	f7ff ffa9 	bl	8005422 <P2PS_STM_Init>

  ZDD_STM_Init();
 80054d0:	f7ff ffae 	bl	8005430 <ZDD_STM_Init>

  OTAS_STM_Init();
 80054d4:	f7ff ffb3 	bl	800543e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80054d8:	f7ff ffbf 	bl	800545a <BVOPUS_STM_Init>

  MESH_Init();
 80054dc:	f7ff ffb6 	bl	800544c <MESH_Init>

  SVCCTL_InitCustomSvc();
 80054e0:	f7ff ffc2 	bl	8005468 <SVCCTL_InitCustomSvc>
  
  return;
 80054e4:	bf00      	nop
}
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	3301      	adds	r3, #1
 80054f4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80054f6:	2300      	movs	r3, #0
 80054f8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2bff      	cmp	r3, #255	; 0xff
 8005500:	d125      	bne.n	800554e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	3302      	adds	r3, #2
 8005506:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	881b      	ldrh	r3, [r3, #0]
 800550c:	b29b      	uxth	r3, r3
 800550e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005512:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005516:	d118      	bne.n	800554a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005518:	2300      	movs	r3, #0
 800551a:	757b      	strb	r3, [r7, #21]
 800551c:	e00d      	b.n	800553a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800551e:	7d7b      	ldrb	r3, [r7, #21]
 8005520:	4a1a      	ldr	r2, [pc, #104]	; (800558c <SVCCTL_UserEvtRx+0xa4>)
 8005522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	4798      	blx	r3
 800552a:	4603      	mov	r3, r0
 800552c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800552e:	7dfb      	ldrb	r3, [r7, #23]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d108      	bne.n	8005546 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8005534:	7d7b      	ldrb	r3, [r7, #21]
 8005536:	3301      	adds	r3, #1
 8005538:	757b      	strb	r3, [r7, #21]
 800553a:	4b14      	ldr	r3, [pc, #80]	; (800558c <SVCCTL_UserEvtRx+0xa4>)
 800553c:	7f1b      	ldrb	r3, [r3, #28]
 800553e:	7d7a      	ldrb	r2, [r7, #21]
 8005540:	429a      	cmp	r2, r3
 8005542:	d3ec      	bcc.n	800551e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8005544:	e002      	b.n	800554c <SVCCTL_UserEvtRx+0x64>
              break;
 8005546:	bf00      	nop
          break;
 8005548:	e000      	b.n	800554c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800554a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800554c:	e000      	b.n	8005550 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800554e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8005550:	7dfb      	ldrb	r3, [r7, #23]
 8005552:	2b02      	cmp	r3, #2
 8005554:	d00f      	beq.n	8005576 <SVCCTL_UserEvtRx+0x8e>
 8005556:	2b02      	cmp	r3, #2
 8005558:	dc10      	bgt.n	800557c <SVCCTL_UserEvtRx+0x94>
 800555a:	2b00      	cmp	r3, #0
 800555c:	d002      	beq.n	8005564 <SVCCTL_UserEvtRx+0x7c>
 800555e:	2b01      	cmp	r3, #1
 8005560:	d006      	beq.n	8005570 <SVCCTL_UserEvtRx+0x88>
 8005562:	e00b      	b.n	800557c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 ff87 	bl	8006478 <SVCCTL_App_Notification>
 800556a:	4603      	mov	r3, r0
 800556c:	75bb      	strb	r3, [r7, #22]
      break;
 800556e:	e008      	b.n	8005582 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8005570:	2301      	movs	r3, #1
 8005572:	75bb      	strb	r3, [r7, #22]
      break;
 8005574:	e005      	b.n	8005582 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8005576:	2300      	movs	r3, #0
 8005578:	75bb      	strb	r3, [r7, #22]
      break;
 800557a:	e002      	b.n	8005582 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800557c:	2301      	movs	r3, #1
 800557e:	75bb      	strb	r3, [r7, #22]
      break;
 8005580:	bf00      	nop
  }

  return (return_status);
 8005582:	7dbb      	ldrb	r3, [r7, #22]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	200000c0 	.word	0x200000c0

08005590 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8005598:	f107 030c 	add.w	r3, r7, #12
 800559c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	212c      	movs	r1, #44	; 0x2c
 80055a8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 80055ac:	f000 fae2 	bl	8005b74 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	330b      	adds	r3, #11
 80055b4:	78db      	ldrb	r3, [r3, #3]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3720      	adds	r7, #32
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b088      	sub	sp, #32
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80055c6:	f107 030c 	add.w	r3, r7, #12
 80055ca:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	210f      	movs	r1, #15
 80055d6:	f64f 4068 	movw	r0, #64616	; 0xfc68
 80055da:	f000 facb 	bl	8005b74 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	330b      	adds	r3, #11
 80055e2:	78db      	ldrb	r3, [r3, #3]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3720      	adds	r7, #32
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80055f4:	f107 030c 	add.w	r3, r7, #12
 80055f8:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	210e      	movs	r1, #14
 8005600:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8005604:	f000 fab6 	bl	8005b74 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	330b      	adds	r3, #11
 800560c:	78db      	ldrb	r3, [r3, #3]
}
 800560e:	4618      	mov	r0, r3
 8005610:	3720      	adds	r7, #32
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8005618:	b480      	push	{r7}
 800561a:	b08b      	sub	sp, #44	; 0x2c
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8005628:	2300      	movs	r3, #0
 800562a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8005630:	2300      	movs	r3, #0
 8005632:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8005634:	2300      	movs	r3, #0
 8005636:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8005638:	2300      	movs	r3, #0
 800563a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800563c:	2300      	movs	r3, #0
 800563e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8005640:	4b4a      	ldr	r3, [pc, #296]	; (800576c <SHCI_GetWirelessFwInfo+0x154>)
 8005642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005644:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005648:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8005652:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a44      	ldr	r2, [pc, #272]	; (8005770 <SHCI_GetWirelessFwInfo+0x158>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d10f      	bne.n	8005684 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	e01a      	b.n	80056ba <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800568c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8005690:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699b      	ldr	r3, [r3, #24]
 80056a8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	0e1b      	lsrs	r3, r3, #24
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	0c1b      	lsrs	r3, r3, #16
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	0a1b      	lsrs	r3, r3, #8
 80056d2:	b2da      	uxtb	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	f003 030f 	and.w	r3, r3, #15
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	0e1b      	lsrs	r3, r3, #24
 80056fa:	b2da      	uxtb	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	0c1b      	lsrs	r3, r3, #16
 8005704:	b2da      	uxtb	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	0a1b      	lsrs	r3, r3, #8
 800570e:	b2da      	uxtb	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	b2da      	uxtb	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	b2da      	uxtb	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	0e1b      	lsrs	r3, r3, #24
 8005728:	b2da      	uxtb	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	0c1b      	lsrs	r3, r3, #16
 8005732:	b2da      	uxtb	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	0a1b      	lsrs	r3, r3, #8
 800573c:	b2da      	uxtb	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	0e1b      	lsrs	r3, r3, #24
 8005746:	b2da      	uxtb	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	0c1b      	lsrs	r3, r3, #16
 8005750:	b2da      	uxtb	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	b2da      	uxtb	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	372c      	adds	r7, #44	; 0x2c
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	58004000 	.word	0x58004000
 8005770:	a94656b9 	.word	0xa94656b9

08005774 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	4a08      	ldr	r2, [pc, #32]	; (80057a4 <hci_init+0x30>)
 8005784:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8005786:	4a08      	ldr	r2, [pc, #32]	; (80057a8 <hci_init+0x34>)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800578c:	4806      	ldr	r0, [pc, #24]	; (80057a8 <hci_init+0x34>)
 800578e:	f000 f973 	bl	8005a78 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 f8d4 	bl	8005944 <TlInit>

  return;
 800579c:	bf00      	nop
}
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20000200 	.word	0x20000200
 80057a8:	200001d8 	.word	0x200001d8

080057ac <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80057b2:	4822      	ldr	r0, [pc, #136]	; (800583c <hci_user_evt_proc+0x90>)
 80057b4:	f000 fd28 	bl	8006208 <LST_is_empty>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d12b      	bne.n	8005816 <hci_user_evt_proc+0x6a>
 80057be:	4b20      	ldr	r3, [pc, #128]	; (8005840 <hci_user_evt_proc+0x94>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d027      	beq.n	8005816 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80057c6:	f107 030c 	add.w	r3, r7, #12
 80057ca:	4619      	mov	r1, r3
 80057cc:	481b      	ldr	r0, [pc, #108]	; (800583c <hci_user_evt_proc+0x90>)
 80057ce:	f000 fdaa 	bl	8006326 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80057d2:	4b1c      	ldr	r3, [pc, #112]	; (8005844 <hci_user_evt_proc+0x98>)
 80057d4:	69db      	ldr	r3, [r3, #28]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00c      	beq.n	80057f4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80057de:	2301      	movs	r3, #1
 80057e0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80057e2:	4b18      	ldr	r3, [pc, #96]	; (8005844 <hci_user_evt_proc+0x98>)
 80057e4:	69db      	ldr	r3, [r3, #28]
 80057e6:	1d3a      	adds	r2, r7, #4
 80057e8:	4610      	mov	r0, r2
 80057ea:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80057ec:	793a      	ldrb	r2, [r7, #4]
 80057ee:	4b14      	ldr	r3, [pc, #80]	; (8005840 <hci_user_evt_proc+0x94>)
 80057f0:	701a      	strb	r2, [r3, #0]
 80057f2:	e002      	b.n	80057fa <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80057f4:	4b12      	ldr	r3, [pc, #72]	; (8005840 <hci_user_evt_proc+0x94>)
 80057f6:	2201      	movs	r2, #1
 80057f8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80057fa:	4b11      	ldr	r3, [pc, #68]	; (8005840 <hci_user_evt_proc+0x94>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d004      	beq.n	800580c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fc03 	bl	8006010 <TL_MM_EvtDone>
 800580a:	e004      	b.n	8005816 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4619      	mov	r1, r3
 8005810:	480a      	ldr	r0, [pc, #40]	; (800583c <hci_user_evt_proc+0x90>)
 8005812:	f000 fd1b 	bl	800624c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8005816:	4809      	ldr	r0, [pc, #36]	; (800583c <hci_user_evt_proc+0x90>)
 8005818:	f000 fcf6 	bl	8006208 <LST_is_empty>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d107      	bne.n	8005832 <hci_user_evt_proc+0x86>
 8005822:	4b07      	ldr	r3, [pc, #28]	; (8005840 <hci_user_evt_proc+0x94>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d003      	beq.n	8005832 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800582a:	4804      	ldr	r0, [pc, #16]	; (800583c <hci_user_evt_proc+0x90>)
 800582c:	f000 ff4e 	bl	80066cc <hci_notify_asynch_evt>
  }


  return;
 8005830:	bf00      	nop
 8005832:	bf00      	nop
}
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	200000e8 	.word	0x200000e8
 8005840:	200000f4 	.word	0x200000f4
 8005844:	200001d8 	.word	0x200001d8

08005848 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8005854:	2000      	movs	r0, #0
 8005856:	f000 f8cb 	bl	80059f0 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800585a:	2300      	movs	r3, #0
 800585c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	885b      	ldrh	r3, [r3, #2]
 8005862:	b21b      	sxth	r3, r3
 8005864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005868:	b21a      	sxth	r2, r3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	881b      	ldrh	r3, [r3, #0]
 800586e:	029b      	lsls	r3, r3, #10
 8005870:	b21b      	sxth	r3, r3
 8005872:	4313      	orrs	r3, r2
 8005874:	b21b      	sxth	r3, r3
 8005876:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	b2d9      	uxtb	r1, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	689a      	ldr	r2, [r3, #8]
 8005882:	8bbb      	ldrh	r3, [r7, #28]
 8005884:	4618      	mov	r0, r3
 8005886:	f000 f88d 	bl	80059a4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800588a:	e04e      	b.n	800592a <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800588c:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005890:	f000 ff33 	bl	80066fa <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8005894:	e043      	b.n	800591e <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8005896:	f107 030c 	add.w	r3, r7, #12
 800589a:	4619      	mov	r1, r3
 800589c:	4828      	ldr	r0, [pc, #160]	; (8005940 <hci_send_req+0xf8>)
 800589e:	f000 fd42 	bl	8006326 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	7a5b      	ldrb	r3, [r3, #9]
 80058a6:	2b0f      	cmp	r3, #15
 80058a8:	d114      	bne.n	80058d4 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	330b      	adds	r3, #11
 80058ae:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	885b      	ldrh	r3, [r3, #2]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	8bba      	ldrh	r2, [r7, #28]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d104      	bne.n	80058c6 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	7812      	ldrb	r2, [r2, #0]
 80058c4:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	785b      	ldrb	r3, [r3, #1]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d027      	beq.n	800591e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80058ce:	2301      	movs	r3, #1
 80058d0:	77fb      	strb	r3, [r7, #31]
 80058d2:	e024      	b.n	800591e <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	330b      	adds	r3, #11
 80058d8:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	8bba      	ldrh	r2, [r7, #28]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d114      	bne.n	8005912 <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	7a9b      	ldrb	r3, [r3, #10]
 80058ec:	3b03      	subs	r3, #3
 80058ee:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	695a      	ldr	r2, [r3, #20]
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	bfa8      	it	ge
 80058fa:	461a      	movge	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6918      	ldr	r0, [r3, #16]
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	1cd9      	adds	r1, r3, #3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	461a      	mov	r2, r3
 800590e:	f001 fda5 	bl	800745c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800591a:	2301      	movs	r3, #1
 800591c:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800591e:	4808      	ldr	r0, [pc, #32]	; (8005940 <hci_send_req+0xf8>)
 8005920:	f000 fc72 	bl	8006208 <LST_is_empty>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0b5      	beq.n	8005896 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800592a:	7ffb      	ldrb	r3, [r7, #31]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0ad      	beq.n	800588c <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8005930:	2001      	movs	r0, #1
 8005932:	f000 f85d 	bl	80059f0 <NotifyCmdStatus>

  return 0;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3720      	adds	r7, #32
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	200001f8 	.word	0x200001f8

08005944 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800594c:	480f      	ldr	r0, [pc, #60]	; (800598c <TlInit+0x48>)
 800594e:	f000 fc4b 	bl	80061e8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8005952:	4a0f      	ldr	r2, [pc, #60]	; (8005990 <TlInit+0x4c>)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8005958:	480e      	ldr	r0, [pc, #56]	; (8005994 <TlInit+0x50>)
 800595a:	f000 fc45 	bl	80061e8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800595e:	4b0e      	ldr	r3, [pc, #56]	; (8005998 <TlInit+0x54>)
 8005960:	2201      	movs	r2, #1
 8005962:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8005964:	4b0d      	ldr	r3, [pc, #52]	; (800599c <TlInit+0x58>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8005970:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <TlInit+0x5c>)
 8005972:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8005974:	4b09      	ldr	r3, [pc, #36]	; (800599c <TlInit+0x58>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f107 0208 	add.w	r2, r7, #8
 800597c:	4610      	mov	r0, r2
 800597e:	4798      	blx	r3
  }

  return;
 8005980:	bf00      	nop
 8005982:	bf00      	nop
}
 8005984:	3718      	adds	r7, #24
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	200001f8 	.word	0x200001f8
 8005990:	200000f0 	.word	0x200000f0
 8005994:	200000e8 	.word	0x200000e8
 8005998:	200000f4 	.word	0x200000f4
 800599c:	200001d8 	.word	0x200001d8
 80059a0:	08005a31 	.word	0x08005a31

080059a4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	4603      	mov	r3, r0
 80059ac:	603a      	str	r2, [r7, #0]
 80059ae:	80fb      	strh	r3, [r7, #6]
 80059b0:	460b      	mov	r3, r1
 80059b2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80059b4:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <SendCmd+0x44>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	88fa      	ldrh	r2, [r7, #6]
 80059ba:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80059be:	4b0a      	ldr	r3, [pc, #40]	; (80059e8 <SendCmd+0x44>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	797a      	ldrb	r2, [r7, #5]
 80059c4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80059c6:	4b08      	ldr	r3, [pc, #32]	; (80059e8 <SendCmd+0x44>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	330c      	adds	r3, #12
 80059cc:	797a      	ldrb	r2, [r7, #5]
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f001 fd43 	bl	800745c <memcpy>

  hciContext.io.Send(0,0);
 80059d6:	4b05      	ldr	r3, [pc, #20]	; (80059ec <SendCmd+0x48>)
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	2100      	movs	r1, #0
 80059dc:	2000      	movs	r0, #0
 80059de:	4798      	blx	r3

  return;
 80059e0:	bf00      	nop
}
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	200000f0 	.word	0x200000f0
 80059ec:	200001d8 	.word	0x200001d8

080059f0 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d108      	bne.n	8005a12 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8005a00:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <NotifyCmdStatus+0x3c>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00d      	beq.n	8005a24 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8005a08:	4b08      	ldr	r3, [pc, #32]	; (8005a2c <NotifyCmdStatus+0x3c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8005a10:	e008      	b.n	8005a24 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8005a12:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <NotifyCmdStatus+0x3c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d004      	beq.n	8005a24 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8005a1a:	4b04      	ldr	r3, [pc, #16]	; (8005a2c <NotifyCmdStatus+0x3c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2001      	movs	r0, #1
 8005a20:	4798      	blx	r3
  return;
 8005a22:	bf00      	nop
 8005a24:	bf00      	nop
}
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	20000200 	.word	0x20000200

08005a30 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	7a5b      	ldrb	r3, [r3, #9]
 8005a3c:	2b0f      	cmp	r3, #15
 8005a3e:	d003      	beq.n	8005a48 <TlEvtReceived+0x18>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	7a5b      	ldrb	r3, [r3, #9]
 8005a44:	2b0e      	cmp	r3, #14
 8005a46:	d107      	bne.n	8005a58 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	4809      	ldr	r0, [pc, #36]	; (8005a70 <TlEvtReceived+0x40>)
 8005a4c:	f000 fc24 	bl	8006298 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8005a50:	2000      	movs	r0, #0
 8005a52:	f000 fe47 	bl	80066e4 <hci_cmd_resp_release>
 8005a56:	e006      	b.n	8005a66 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8005a58:	6879      	ldr	r1, [r7, #4]
 8005a5a:	4806      	ldr	r0, [pc, #24]	; (8005a74 <TlEvtReceived+0x44>)
 8005a5c:	f000 fc1c 	bl	8006298 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005a60:	4804      	ldr	r0, [pc, #16]	; (8005a74 <TlEvtReceived+0x44>)
 8005a62:	f000 fe33 	bl	80066cc <hci_notify_asynch_evt>
  }

  return;
 8005a66:	bf00      	nop
}
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	200001f8 	.word	0x200001f8
 8005a74:	200000e8 	.word	0x200000e8

08005a78 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a05      	ldr	r2, [pc, #20]	; (8005a98 <hci_register_io_bus+0x20>)
 8005a84:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a04      	ldr	r2, [pc, #16]	; (8005a9c <hci_register_io_bus+0x24>)
 8005a8a:	611a      	str	r2, [r3, #16]

  return;
 8005a8c:	bf00      	nop
}
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	08005d89 	.word	0x08005d89
 8005a9c:	08005df1 	.word	0x08005df1

08005aa0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	4a08      	ldr	r2, [pc, #32]	; (8005ad0 <shci_init+0x30>)
 8005ab0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8005ab2:	4a08      	ldr	r2, [pc, #32]	; (8005ad4 <shci_init+0x34>)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8005ab8:	4806      	ldr	r0, [pc, #24]	; (8005ad4 <shci_init+0x34>)
 8005aba:	f000 f911 	bl	8005ce0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 f894 	bl	8005bf0 <TlInit>

  return;
 8005ac8:	bf00      	nop
}
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	20000224 	.word	0x20000224
 8005ad4:	20000204 	.word	0x20000204

08005ad8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005ade:	4822      	ldr	r0, [pc, #136]	; (8005b68 <shci_user_evt_proc+0x90>)
 8005ae0:	f000 fb92 	bl	8006208 <LST_is_empty>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d12b      	bne.n	8005b42 <shci_user_evt_proc+0x6a>
 8005aea:	4b20      	ldr	r3, [pc, #128]	; (8005b6c <shci_user_evt_proc+0x94>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d027      	beq.n	8005b42 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8005af2:	f107 030c 	add.w	r3, r7, #12
 8005af6:	4619      	mov	r1, r3
 8005af8:	481b      	ldr	r0, [pc, #108]	; (8005b68 <shci_user_evt_proc+0x90>)
 8005afa:	f000 fc14 	bl	8006326 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8005afe:	4b1c      	ldr	r3, [pc, #112]	; (8005b70 <shci_user_evt_proc+0x98>)
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00c      	beq.n	8005b20 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8005b0e:	4b18      	ldr	r3, [pc, #96]	; (8005b70 <shci_user_evt_proc+0x98>)
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	1d3a      	adds	r2, r7, #4
 8005b14:	4610      	mov	r0, r2
 8005b16:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8005b18:	793a      	ldrb	r2, [r7, #4]
 8005b1a:	4b14      	ldr	r3, [pc, #80]	; (8005b6c <shci_user_evt_proc+0x94>)
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	e002      	b.n	8005b26 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005b20:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <shci_user_evt_proc+0x94>)
 8005b22:	2201      	movs	r2, #1
 8005b24:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8005b26:	4b11      	ldr	r3, [pc, #68]	; (8005b6c <shci_user_evt_proc+0x94>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d004      	beq.n	8005b38 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 fa6d 	bl	8006010 <TL_MM_EvtDone>
 8005b36:	e004      	b.n	8005b42 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	480a      	ldr	r0, [pc, #40]	; (8005b68 <shci_user_evt_proc+0x90>)
 8005b3e:	f000 fb85 	bl	800624c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8005b42:	4809      	ldr	r0, [pc, #36]	; (8005b68 <shci_user_evt_proc+0x90>)
 8005b44:	f000 fb60 	bl	8006208 <LST_is_empty>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d107      	bne.n	8005b5e <shci_user_evt_proc+0x86>
 8005b4e:	4b07      	ldr	r3, [pc, #28]	; (8005b6c <shci_user_evt_proc+0x94>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8005b56:	4804      	ldr	r0, [pc, #16]	; (8005b68 <shci_user_evt_proc+0x90>)
 8005b58:	f7fa fe9e 	bl	8000898 <shci_notify_asynch_evt>
  }


  return;
 8005b5c:	bf00      	nop
 8005b5e:	bf00      	nop
}
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	200000f8 	.word	0x200000f8
 8005b6c:	20000108 	.word	0x20000108
 8005b70:	20000204 	.word	0x20000204

08005b74 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60ba      	str	r2, [r7, #8]
 8005b7c:	607b      	str	r3, [r7, #4]
 8005b7e:	4603      	mov	r3, r0
 8005b80:	81fb      	strh	r3, [r7, #14]
 8005b82:	460b      	mov	r3, r1
 8005b84:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8005b86:	2000      	movs	r0, #0
 8005b88:	f000 f864 	bl	8005c54 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8005b8c:	4b16      	ldr	r3, [pc, #88]	; (8005be8 <shci_send+0x74>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	89fa      	ldrh	r2, [r7, #14]
 8005b92:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8005b96:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <shci_send+0x74>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	7b7a      	ldrb	r2, [r7, #13]
 8005b9c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8005b9e:	4b12      	ldr	r3, [pc, #72]	; (8005be8 <shci_send+0x74>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	330c      	adds	r3, #12
 8005ba4:	7b7a      	ldrb	r2, [r7, #13]
 8005ba6:	68b9      	ldr	r1, [r7, #8]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f001 fc57 	bl	800745c <memcpy>

  shciContext.io.Send(0,0);
 8005bae:	4b0f      	ldr	r3, [pc, #60]	; (8005bec <shci_send+0x78>)
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8005bb8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8005bbc:	f7fa fe83 	bl	80008c6 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f103 0008 	add.w	r0, r3, #8
 8005bc6:	4b08      	ldr	r3, [pc, #32]	; (8005be8 <shci_send+0x74>)
 8005bc8:	6819      	ldr	r1, [r3, #0]
 8005bca:	4b07      	ldr	r3, [pc, #28]	; (8005be8 <shci_send+0x74>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	789b      	ldrb	r3, [r3, #2]
 8005bd0:	3303      	adds	r3, #3
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f001 fc42 	bl	800745c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005bd8:	2001      	movs	r0, #1
 8005bda:	f000 f83b 	bl	8005c54 <Cmd_SetStatus>

  return;
 8005bde:	bf00      	nop
}
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20000104 	.word	0x20000104
 8005bec:	20000204 	.word	0x20000204

08005bf0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8005bf8:	4a10      	ldr	r2, [pc, #64]	; (8005c3c <TlInit+0x4c>)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8005bfe:	4810      	ldr	r0, [pc, #64]	; (8005c40 <TlInit+0x50>)
 8005c00:	f000 faf2 	bl	80061e8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8005c04:	2001      	movs	r0, #1
 8005c06:	f000 f825 	bl	8005c54 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8005c0a:	4b0e      	ldr	r3, [pc, #56]	; (8005c44 <TlInit+0x54>)
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8005c10:	4b0d      	ldr	r3, [pc, #52]	; (8005c48 <TlInit+0x58>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d00c      	beq.n	8005c32 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <TlInit+0x5c>)
 8005c1e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8005c20:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <TlInit+0x60>)
 8005c22:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8005c24:	4b08      	ldr	r3, [pc, #32]	; (8005c48 <TlInit+0x58>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f107 020c 	add.w	r2, r7, #12
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	4798      	blx	r3
  }

  return;
 8005c30:	bf00      	nop
 8005c32:	bf00      	nop
}
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000104 	.word	0x20000104
 8005c40:	200000f8 	.word	0x200000f8
 8005c44:	20000108 	.word	0x20000108
 8005c48:	20000204 	.word	0x20000204
 8005c4c:	08005ca5 	.word	0x08005ca5
 8005c50:	08005cbd 	.word	0x08005cbd

08005c54 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8005c5e:	79fb      	ldrb	r3, [r7, #7]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10b      	bne.n	8005c7c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8005c64:	4b0d      	ldr	r3, [pc, #52]	; (8005c9c <Cmd_SetStatus+0x48>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8005c6c:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <Cmd_SetStatus+0x48>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2000      	movs	r0, #0
 8005c72:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8005c74:	4b0a      	ldr	r3, [pc, #40]	; (8005ca0 <Cmd_SetStatus+0x4c>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8005c7a:	e00b      	b.n	8005c94 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8005c7c:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <Cmd_SetStatus+0x4c>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8005c82:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <Cmd_SetStatus+0x48>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d004      	beq.n	8005c94 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8005c8a:	4b04      	ldr	r3, [pc, #16]	; (8005c9c <Cmd_SetStatus+0x48>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2001      	movs	r0, #1
 8005c90:	4798      	blx	r3
  return;
 8005c92:	bf00      	nop
 8005c94:	bf00      	nop
}
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	20000224 	.word	0x20000224
 8005ca0:	20000100 	.word	0x20000100

08005ca4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8005cac:	2000      	movs	r0, #0
 8005cae:	f7fa fdff 	bl	80008b0 <shci_cmd_resp_release>

  return;
 8005cb2:	bf00      	nop
}
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
	...

08005cbc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b082      	sub	sp, #8
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8005cc4:	6879      	ldr	r1, [r7, #4]
 8005cc6:	4805      	ldr	r0, [pc, #20]	; (8005cdc <TlUserEvtReceived+0x20>)
 8005cc8:	f000 fae6 	bl	8006298 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8005ccc:	4803      	ldr	r0, [pc, #12]	; (8005cdc <TlUserEvtReceived+0x20>)
 8005cce:	f7fa fde3 	bl	8000898 <shci_notify_asynch_evt>

  return;
 8005cd2:	bf00      	nop
}
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	200000f8 	.word	0x200000f8

08005ce0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a05      	ldr	r2, [pc, #20]	; (8005d00 <shci_register_io_bus+0x20>)
 8005cec:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a04      	ldr	r2, [pc, #16]	; (8005d04 <shci_register_io_bus+0x24>)
 8005cf2:	611a      	str	r2, [r3, #16]

  return;
 8005cf4:	bf00      	nop
}
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	08005e9d 	.word	0x08005e9d
 8005d04:	08005ef1 	.word	0x08005ef1

08005d08 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8005d0c:	f000 fffa 	bl	8006d04 <HW_IPCC_Enable>

  return;
 8005d10:	bf00      	nop
}
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <TL_Init>:


void TL_Init( void )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8005d18:	4b10      	ldr	r3, [pc, #64]	; (8005d5c <TL_Init+0x48>)
 8005d1a:	4a11      	ldr	r2, [pc, #68]	; (8005d60 <TL_Init+0x4c>)
 8005d1c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8005d1e:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <TL_Init+0x48>)
 8005d20:	4a10      	ldr	r2, [pc, #64]	; (8005d64 <TL_Init+0x50>)
 8005d22:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8005d24:	4b0d      	ldr	r3, [pc, #52]	; (8005d5c <TL_Init+0x48>)
 8005d26:	4a10      	ldr	r2, [pc, #64]	; (8005d68 <TL_Init+0x54>)
 8005d28:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8005d2a:	4b0c      	ldr	r3, [pc, #48]	; (8005d5c <TL_Init+0x48>)
 8005d2c:	4a0f      	ldr	r2, [pc, #60]	; (8005d6c <TL_Init+0x58>)
 8005d2e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8005d30:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <TL_Init+0x48>)
 8005d32:	4a0f      	ldr	r2, [pc, #60]	; (8005d70 <TL_Init+0x5c>)
 8005d34:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8005d36:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <TL_Init+0x48>)
 8005d38:	4a0e      	ldr	r2, [pc, #56]	; (8005d74 <TL_Init+0x60>)
 8005d3a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8005d3c:	4b07      	ldr	r3, [pc, #28]	; (8005d5c <TL_Init+0x48>)
 8005d3e:	4a0e      	ldr	r2, [pc, #56]	; (8005d78 <TL_Init+0x64>)
 8005d40:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8005d42:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <TL_Init+0x48>)
 8005d44:	4a0d      	ldr	r2, [pc, #52]	; (8005d7c <TL_Init+0x68>)
 8005d46:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8005d48:	4b04      	ldr	r3, [pc, #16]	; (8005d5c <TL_Init+0x48>)
 8005d4a:	4a0d      	ldr	r2, [pc, #52]	; (8005d80 <TL_Init+0x6c>)
 8005d4c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8005d4e:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <TL_Init+0x48>)
 8005d50:	4a0c      	ldr	r2, [pc, #48]	; (8005d84 <TL_Init+0x70>)
 8005d52:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8005d54:	f000 ffea 	bl	8006d2c <HW_IPCC_Init>

  return;
 8005d58:	bf00      	nop
}
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	20030000 	.word	0x20030000
 8005d60:	20030028 	.word	0x20030028
 8005d64:	20030048 	.word	0x20030048
 8005d68:	20030058 	.word	0x20030058
 8005d6c:	20030068 	.word	0x20030068
 8005d70:	20030070 	.word	0x20030070
 8005d74:	20030078 	.word	0x20030078
 8005d78:	20030080 	.word	0x20030080
 8005d7c:	2003009c 	.word	0x2003009c
 8005d80:	200300a0 	.word	0x200300a0
 8005d84:	200300ac 	.word	0x200300ac

08005d88 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8005d94:	4811      	ldr	r0, [pc, #68]	; (8005ddc <TL_BLE_Init+0x54>)
 8005d96:	f000 fa27 	bl	80061e8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8005d9a:	4b11      	ldr	r3, [pc, #68]	; (8005de0 <TL_BLE_Init+0x58>)
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	4a0c      	ldr	r2, [pc, #48]	; (8005de4 <TL_BLE_Init+0x5c>)
 8005db4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	4a08      	ldr	r2, [pc, #32]	; (8005ddc <TL_BLE_Init+0x54>)
 8005dba:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8005dbc:	f000 ffcc 	bl	8006d58 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a08      	ldr	r2, [pc, #32]	; (8005de8 <TL_BLE_Init+0x60>)
 8005dc6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	4a07      	ldr	r2, [pc, #28]	; (8005dec <TL_BLE_Init+0x64>)
 8005dce:	6013      	str	r3, [r2, #0]

  return 0;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	200300c8 	.word	0x200300c8
 8005de0:	20030000 	.word	0x20030000
 8005de4:	20030a58 	.word	0x20030a58
 8005de8:	20000230 	.word	0x20000230
 8005dec:	20000234 	.word	0x20000234

08005df0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8005dfc:	4b09      	ldr	r3, [pc, #36]	; (8005e24 <TL_BLE_SendCmd+0x34>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2201      	movs	r2, #1
 8005e04:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8005e06:	4b07      	ldr	r3, [pc, #28]	; (8005e24 <TL_BLE_SendCmd+0x34>)
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	2001      	movs	r0, #1
 8005e10:	f000 f96c 	bl	80060ec <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8005e14:	f000 ffaa 	bl	8006d6c <HW_IPCC_BLE_SendCmd>

  return 0;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3708      	adds	r7, #8
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20030000 	.word	0x20030000

08005e28 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8005e2e:	e01c      	b.n	8005e6a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8005e30:	1d3b      	adds	r3, r7, #4
 8005e32:	4619      	mov	r1, r3
 8005e34:	4812      	ldr	r0, [pc, #72]	; (8005e80 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005e36:	f000 fa76 	bl	8006326 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	7a5b      	ldrb	r3, [r3, #9]
 8005e3e:	2b0f      	cmp	r3, #15
 8005e40:	d003      	beq.n	8005e4a <HW_IPCC_BLE_RxEvtNot+0x22>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	7a5b      	ldrb	r3, [r3, #9]
 8005e46:	2b0e      	cmp	r3, #14
 8005e48:	d105      	bne.n	8005e56 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	2002      	movs	r0, #2
 8005e50:	f000 f94c 	bl	80060ec <OutputDbgTrace>
 8005e54:	e004      	b.n	8005e60 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4619      	mov	r1, r3
 8005e5a:	2003      	movs	r0, #3
 8005e5c:	f000 f946 	bl	80060ec <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8005e60:	4b08      	ldr	r3, [pc, #32]	; (8005e84 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	4610      	mov	r0, r2
 8005e68:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8005e6a:	4805      	ldr	r0, [pc, #20]	; (8005e80 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8005e6c:	f000 f9cc 	bl	8006208 <LST_is_empty>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0dc      	beq.n	8005e30 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8005e76:	bf00      	nop
}
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	200300c8 	.word	0x200300c8
 8005e84:	20000230 	.word	0x20000230

08005e88 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8005e8c:	4b02      	ldr	r3, [pc, #8]	; (8005e98 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4798      	blx	r3

  return;
 8005e92:	bf00      	nop
}
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	20000234 	.word	0x20000234

08005e9c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8005ea8:	480d      	ldr	r0, [pc, #52]	; (8005ee0 <TL_SYS_Init+0x44>)
 8005eaa:	f000 f99d 	bl	80061e8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8005eae:	4b0d      	ldr	r3, [pc, #52]	; (8005ee4 <TL_SYS_Init+0x48>)
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689a      	ldr	r2, [r3, #8]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4a08      	ldr	r2, [pc, #32]	; (8005ee0 <TL_SYS_Init+0x44>)
 8005ec0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8005ec2:	f000 ff75 	bl	8006db0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a07      	ldr	r2, [pc, #28]	; (8005ee8 <TL_SYS_Init+0x4c>)
 8005ecc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	4a06      	ldr	r2, [pc, #24]	; (8005eec <TL_SYS_Init+0x50>)
 8005ed4:	6013      	str	r3, [r2, #0]

  return 0;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	200300d0 	.word	0x200300d0
 8005ee4:	20030000 	.word	0x20030000
 8005ee8:	20000238 	.word	0x20000238
 8005eec:	2000023c 	.word	0x2000023c

08005ef0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b082      	sub	sp, #8
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8005efc:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <TL_SYS_SendCmd+0x34>)
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2210      	movs	r2, #16
 8005f04:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8005f06:	4b07      	ldr	r3, [pc, #28]	; (8005f24 <TL_SYS_SendCmd+0x34>)
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	2004      	movs	r0, #4
 8005f10:	f000 f8ec 	bl	80060ec <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8005f14:	f000 ff56 	bl	8006dc4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	20030000 	.word	0x20030000

08005f28 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005f2c:	4b07      	ldr	r3, [pc, #28]	; (8005f4c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4619      	mov	r1, r3
 8005f34:	2005      	movs	r0, #5
 8005f36:	f000 f8d9 	bl	80060ec <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8005f3a:	4b05      	ldr	r3, [pc, #20]	; (8005f50 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a03      	ldr	r2, [pc, #12]	; (8005f4c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8005f40:	68d2      	ldr	r2, [r2, #12]
 8005f42:	6812      	ldr	r2, [r2, #0]
 8005f44:	4610      	mov	r0, r2
 8005f46:	4798      	blx	r3

  return;
 8005f48:	bf00      	nop
}
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	20030000 	.word	0x20030000
 8005f50:	20000238 	.word	0x20000238

08005f54 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005f5a:	e00e      	b.n	8005f7a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8005f5c:	1d3b      	adds	r3, r7, #4
 8005f5e:	4619      	mov	r1, r3
 8005f60:	480b      	ldr	r0, [pc, #44]	; (8005f90 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005f62:	f000 f9e0 	bl	8006326 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4619      	mov	r1, r3
 8005f6a:	2006      	movs	r0, #6
 8005f6c:	f000 f8be 	bl	80060ec <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8005f70:	4b08      	ldr	r3, [pc, #32]	; (8005f94 <HW_IPCC_SYS_EvtNot+0x40>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	4610      	mov	r0, r2
 8005f78:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8005f7a:	4805      	ldr	r0, [pc, #20]	; (8005f90 <HW_IPCC_SYS_EvtNot+0x3c>)
 8005f7c:	f000 f944 	bl	8006208 <LST_is_empty>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0ea      	beq.n	8005f5c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8005f86:	bf00      	nop
}
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	200300d0 	.word	0x200300d0
 8005f94:	2000023c 	.word	0x2000023c

08005f98 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8005fa0:	4817      	ldr	r0, [pc, #92]	; (8006000 <TL_MM_Init+0x68>)
 8005fa2:	f000 f921 	bl	80061e8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8005fa6:	4817      	ldr	r0, [pc, #92]	; (8006004 <TL_MM_Init+0x6c>)
 8005fa8:	f000 f91e 	bl	80061e8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8005fac:	4b16      	ldr	r3, [pc, #88]	; (8006008 <TL_MM_Init+0x70>)
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	4a16      	ldr	r2, [pc, #88]	; (800600c <TL_MM_Init+0x74>)
 8005fb2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8005fb4:	4b15      	ldr	r3, [pc, #84]	; (800600c <TL_MM_Init+0x74>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6892      	ldr	r2, [r2, #8]
 8005fbc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8005fbe:	4b13      	ldr	r3, [pc, #76]	; (800600c <TL_MM_Init+0x74>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	68d2      	ldr	r2, [r2, #12]
 8005fc6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8005fc8:	4b10      	ldr	r3, [pc, #64]	; (800600c <TL_MM_Init+0x74>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a0c      	ldr	r2, [pc, #48]	; (8006000 <TL_MM_Init+0x68>)
 8005fce:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8005fd0:	4b0e      	ldr	r3, [pc, #56]	; (800600c <TL_MM_Init+0x74>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6812      	ldr	r2, [r2, #0]
 8005fd8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8005fda:	4b0c      	ldr	r3, [pc, #48]	; (800600c <TL_MM_Init+0x74>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	6852      	ldr	r2, [r2, #4]
 8005fe2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8005fe4:	4b09      	ldr	r3, [pc, #36]	; (800600c <TL_MM_Init+0x74>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	6912      	ldr	r2, [r2, #16]
 8005fec:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8005fee:	4b07      	ldr	r3, [pc, #28]	; (800600c <TL_MM_Init+0x74>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6952      	ldr	r2, [r2, #20]
 8005ff6:	619a      	str	r2, [r3, #24]

  return;
 8005ff8:	bf00      	nop
}
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	200300b8 	.word	0x200300b8
 8006004:	20000228 	.word	0x20000228
 8006008:	20030000 	.word	0x20030000
 800600c:	20000240 	.word	0x20000240

08006010 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8006018:	6879      	ldr	r1, [r7, #4]
 800601a:	4807      	ldr	r0, [pc, #28]	; (8006038 <TL_MM_EvtDone+0x28>)
 800601c:	f000 f93c 	bl	8006298 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8006020:	6879      	ldr	r1, [r7, #4]
 8006022:	2000      	movs	r0, #0
 8006024:	f000 f862 	bl	80060ec <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8006028:	4804      	ldr	r0, [pc, #16]	; (800603c <TL_MM_EvtDone+0x2c>)
 800602a:	f000 fef1 	bl	8006e10 <HW_IPCC_MM_SendFreeBuf>

  return;
 800602e:	bf00      	nop
}
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20000228 	.word	0x20000228
 800603c:	08006041 	.word	0x08006041

08006040 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006046:	e00c      	b.n	8006062 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8006048:	1d3b      	adds	r3, r7, #4
 800604a:	4619      	mov	r1, r3
 800604c:	480a      	ldr	r0, [pc, #40]	; (8006078 <SendFreeBuf+0x38>)
 800604e:	f000 f96a 	bl	8006326 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8006052:	4b0a      	ldr	r3, [pc, #40]	; (800607c <SendFreeBuf+0x3c>)
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	4611      	mov	r1, r2
 800605c:	4618      	mov	r0, r3
 800605e:	f000 f91b 	bl	8006298 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8006062:	4805      	ldr	r0, [pc, #20]	; (8006078 <SendFreeBuf+0x38>)
 8006064:	f000 f8d0 	bl	8006208 <LST_is_empty>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d0ec      	beq.n	8006048 <SendFreeBuf+0x8>
  }

  return;
 800606e:	bf00      	nop
}
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20000228 	.word	0x20000228
 800607c:	20030000 	.word	0x20030000

08006080 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8006084:	4805      	ldr	r0, [pc, #20]	; (800609c <TL_TRACES_Init+0x1c>)
 8006086:	f000 f8af 	bl	80061e8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800608a:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <TL_TRACES_Init+0x20>)
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	4a03      	ldr	r2, [pc, #12]	; (800609c <TL_TRACES_Init+0x1c>)
 8006090:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8006092:	f000 fef3 	bl	8006e7c <HW_IPCC_TRACES_Init>

  return;
 8006096:	bf00      	nop
}
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	200300c0 	.word	0x200300c0
 80060a0:	20030000 	.word	0x20030000

080060a4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80060aa:	e008      	b.n	80060be <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80060ac:	1d3b      	adds	r3, r7, #4
 80060ae:	4619      	mov	r1, r3
 80060b0:	4808      	ldr	r0, [pc, #32]	; (80060d4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80060b2:	f000 f938 	bl	8006326 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 f80d 	bl	80060d8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80060be:	4805      	ldr	r0, [pc, #20]	; (80060d4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80060c0:	f000 f8a2 	bl	8006208 <LST_is_empty>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0f0      	beq.n	80060ac <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80060ca:	bf00      	nop
}
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	200300c0 	.word	0x200300c0

080060d8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	4603      	mov	r3, r0
 80060f4:	6039      	str	r1, [r7, #0]
 80060f6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80060f8:	79fb      	ldrb	r3, [r7, #7]
 80060fa:	2b06      	cmp	r3, #6
 80060fc:	d845      	bhi.n	800618a <OutputDbgTrace+0x9e>
 80060fe:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <OutputDbgTrace+0x18>)
 8006100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006104:	08006121 	.word	0x08006121
 8006108:	08006145 	.word	0x08006145
 800610c:	0800614b 	.word	0x0800614b
 8006110:	0800615f 	.word	0x0800615f
 8006114:	0800616b 	.word	0x0800616b
 8006118:	08006171 	.word	0x08006171
 800611c:	0800617f 	.word	0x0800617f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	7a5b      	ldrb	r3, [r3, #9]
 8006128:	2bff      	cmp	r3, #255	; 0xff
 800612a:	d005      	beq.n	8006138 <OutputDbgTrace+0x4c>
 800612c:	2bff      	cmp	r3, #255	; 0xff
 800612e:	dc05      	bgt.n	800613c <OutputDbgTrace+0x50>
 8006130:	2b0e      	cmp	r3, #14
 8006132:	d005      	beq.n	8006140 <OutputDbgTrace+0x54>
 8006134:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8006136:	e001      	b.n	800613c <OutputDbgTrace+0x50>
          break;
 8006138:	bf00      	nop
 800613a:	e027      	b.n	800618c <OutputDbgTrace+0xa0>
          break;
 800613c:	bf00      	nop
 800613e:	e025      	b.n	800618c <OutputDbgTrace+0xa0>
          break;
 8006140:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8006142:	e023      	b.n	800618c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8006148:	e020      	b.n	800618c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	7a5b      	ldrb	r3, [r3, #9]
 8006152:	2b0e      	cmp	r3, #14
 8006154:	d001      	beq.n	800615a <OutputDbgTrace+0x6e>
 8006156:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8006158:	e000      	b.n	800615c <OutputDbgTrace+0x70>
          break;
 800615a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800615c:	e016      	b.n	800618c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	7a5b      	ldrb	r3, [r3, #9]
 8006166:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006168:	e010      	b.n	800618c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800616e:	e00d      	b.n	800618c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	7a5b      	ldrb	r3, [r3, #9]
 8006178:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800617a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800617c:	e006      	b.n	800618c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	7a5b      	ldrb	r3, [r3, #9]
 8006186:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8006188:	e000      	b.n	800618c <OutputDbgTrace+0xa0>

    default:
      break;
 800618a:	bf00      	nop
  }

  return;
 800618c:	bf00      	nop
}
 800618e:	3714      	adds	r7, #20
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	4603      	mov	r3, r0
 80061a0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80061a2:	4b0f      	ldr	r3, [pc, #60]	; (80061e0 <OTP_Read+0x48>)
 80061a4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80061a6:	e002      	b.n	80061ae <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	3b08      	subs	r3, #8
 80061ac:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	3307      	adds	r3, #7
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	79fa      	ldrb	r2, [r7, #7]
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d003      	beq.n	80061c2 <OTP_Read+0x2a>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4a09      	ldr	r2, [pc, #36]	; (80061e4 <OTP_Read+0x4c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d1f2      	bne.n	80061a8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3307      	adds	r3, #7
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	79fa      	ldrb	r2, [r7, #7]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d001      	beq.n	80061d2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80061ce:	2300      	movs	r3, #0
 80061d0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80061d2:	68fb      	ldr	r3, [r7, #12]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	1fff73f8 	.word	0x1fff73f8
 80061e4:	1fff7000 	.word	0x1fff7000

080061e8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	605a      	str	r2, [r3, #4]
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006210:	f3ef 8310 	mrs	r3, PRIMASK
 8006214:	60fb      	str	r3, [r7, #12]
  return(result);
 8006216:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006218:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800621a:	b672      	cpsid	i
}
 800621c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	429a      	cmp	r2, r3
 8006226:	d102      	bne.n	800622e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8006228:	2301      	movs	r3, #1
 800622a:	75fb      	strb	r3, [r7, #23]
 800622c:	e001      	b.n	8006232 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800622e:	2300      	movs	r3, #0
 8006230:	75fb      	strb	r3, [r7, #23]
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f383 8810 	msr	PRIMASK, r3
}
 800623c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800623e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006240:	4618      	mov	r0, r3
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006256:	f3ef 8310 	mrs	r3, PRIMASK
 800625a:	60fb      	str	r3, [r7, #12]
  return(result);
 800625c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800625e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006260:	b672      	cpsid	i
}
 8006262:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	605a      	str	r2, [r3, #4]
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f383 8810 	msr	PRIMASK, r3
}
 800628a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800628c:	bf00      	nop
 800628e:	371c      	adds	r7, #28
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8006298:	b480      	push	{r7}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062a2:	f3ef 8310 	mrs	r3, PRIMASK
 80062a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80062a8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80062aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80062ac:	b672      	cpsid	i
}
 80062ae:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f383 8810 	msr	PRIMASK, r3
}
 80062d6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80062d8:	bf00      	nop
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b087      	sub	sp, #28
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ec:	f3ef 8310 	mrs	r3, PRIMASK
 80062f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80062f2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80062f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80062f6:	b672      	cpsid	i
}
 80062f8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	6812      	ldr	r2, [r2, #0]
 8006302:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	6852      	ldr	r2, [r2, #4]
 800630c:	605a      	str	r2, [r3, #4]
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f383 8810 	msr	PRIMASK, r3
}
 8006318:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800631a:	bf00      	nop
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b086      	sub	sp, #24
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006330:	f3ef 8310 	mrs	r3, PRIMASK
 8006334:	60fb      	str	r3, [r7, #12]
  return(result);
 8006336:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8006338:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800633a:	b672      	cpsid	i
}
 800633c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	f7ff ffca 	bl	80062e4 <LST_remove_node>
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f383 8810 	msr	PRIMASK, r3
}
 800635a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800635c:	bf00      	nop
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <__NVIC_SystemReset>:
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006368:	f3bf 8f4f 	dsb	sy
}
 800636c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800636e:	4b06      	ldr	r3, [pc, #24]	; (8006388 <__NVIC_SystemReset+0x24>)
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006376:	4904      	ldr	r1, [pc, #16]	; (8006388 <__NVIC_SystemReset+0x24>)
 8006378:	4b04      	ldr	r3, [pc, #16]	; (800638c <__NVIC_SystemReset+0x28>)
 800637a:	4313      	orrs	r3, r2
 800637c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800637e:	f3bf 8f4f 	dsb	sy
}
 8006382:	bf00      	nop
    __NOP();
 8006384:	bf00      	nop
 8006386:	e7fd      	b.n	8006384 <__NVIC_SystemReset+0x20>
 8006388:	e000ed00 	.word	0xe000ed00
 800638c:	05fa0004 	.word	0x05fa0004

08006390 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8006390:	b480      	push	{r7}
 8006392:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8006394:	4b03      	ldr	r3, [pc, #12]	; (80063a4 <LL_FLASH_GetUDN+0x14>)
 8006396:	681b      	ldr	r3, [r3, #0]
}
 8006398:	4618      	mov	r0, r3
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	1fff7580 	.word	0x1fff7580

080063a8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80063a8:	b480      	push	{r7}
 80063aa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80063ac:	4b03      	ldr	r3, [pc, #12]	; (80063bc <LL_FLASH_GetDeviceID+0x14>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	b2db      	uxtb	r3, r3
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	1fff7584 	.word	0x1fff7584

080063c0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80063c4:	4b03      	ldr	r3, [pc, #12]	; (80063d4 <LL_FLASH_GetSTCompanyID+0x14>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	0a1b      	lsrs	r3, r3, #8
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	1fff7584 	.word	0x1fff7584

080063d8 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80063d8:	b5b0      	push	{r4, r5, r7, lr}
 80063da:	b090      	sub	sp, #64	; 0x40
 80063dc:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  /* USER CODE BEGIN APP_BLE_Init_1 */
  UTIL_SEQ_RegTask(1 << CFG_TASK_STARTCOMP, UTIL_SEQ_RFU, compStart);
 80063de:	4a21      	ldr	r2, [pc, #132]	; (8006464 <APP_BLE_Init+0x8c>)
 80063e0:	2100      	movs	r1, #0
 80063e2:	2004      	movs	r0, #4
 80063e4:	f000 fed4 	bl	8007190 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1 << CFG_TASK_MYFSR, UTIL_SEQ_RFU, myFSR);
 80063e8:	4a1f      	ldr	r2, [pc, #124]	; (8006468 <APP_BLE_Init+0x90>)
 80063ea:	2100      	movs	r1, #0
 80063ec:	2008      	movs	r0, #8
 80063ee:	f000 fecf 	bl	8007190 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1 << CFG_TASK_STARTCOMP, CFG_SCH_PRIO_0);
 80063f2:	2100      	movs	r1, #0
 80063f4:	2004      	movs	r0, #4
 80063f6:	f000 feed 	bl	80071d4 <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80063fa:	4b1c      	ldr	r3, [pc, #112]	; (800646c <APP_BLE_Init+0x94>)
 80063fc:	1d3c      	adds	r4, r7, #4
 80063fe:	461d      	mov	r5, r3
 8006400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800640a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800640c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006410:	e884 0003 	stmia.w	r4, {r0, r1}
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8006414:	f000 f864 	bl	80064e0 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8006418:	2101      	movs	r1, #1
 800641a:	2002      	movs	r0, #2
 800641c:	f000 fd56 	bl	8006ecc <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8006420:	4a13      	ldr	r2, [pc, #76]	; (8006470 <APP_BLE_Init+0x98>)
 8006422:	2100      	movs	r1, #0
 8006424:	2002      	movs	r0, #2
 8006426:	f000 feb3 	bl	8007190 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800642a:	1d3b      	adds	r3, r7, #4
 800642c:	4618      	mov	r0, r3
 800642e:	f7ff f8af 	bl	8005590 <SHCI_C2_BLE_Init>
 8006432:	4603      	mov	r3, r0
 8006434:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (status != SHCI_Success)
 8006438:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <APP_BLE_Init+0x6c>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8006440:	f7fb fa10 	bl	8001864 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8006444:	f000 f862 	bl	800650c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8006448:	f7ff f816 	bl	8005478 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_BEACON_UPDATE_REQ_ID, UTIL_SEQ_RFU, Beacon_Update);
 800644c:	4a09      	ldr	r2, [pc, #36]	; (8006474 <APP_BLE_Init+0x9c>)
 800644e:	2100      	movs	r1, #0
 8006450:	2001      	movs	r0, #1
 8006452:	f000 fe9d 	bl	8007190 <UTIL_SEQ_RegTask>
    EddystoneTLM_Process();
  }
  else if (CFG_BEACON_TYPE & CFG_IBEACON)
  {
    APP_DBG_MSG("Ibeacon advertise\n\r");
    IBeacon_Process();
 8006456:	f000 fa4b 	bl	80068f0 <IBeacon_Process>
  }
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800645a:	bf00      	nop
}
 800645c:	3740      	adds	r7, #64	; 0x40
 800645e:	46bd      	mov	sp, r7
 8006460:	bdb0      	pop	{r4, r5, r7, pc}
 8006462:	bf00      	nop
 8006464:	08006941 	.word	0x08006941
 8006468:	08006961 	.word	0x08006961
 800646c:	080074dc 	.word	0x080074dc
 8006470:	080057ad 	.word	0x080057ad
 8006474:	080065e1 	.word	0x080065e1

08006478 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3301      	adds	r3, #1
 8006484:	617b      	str	r3, [r7, #20]

  switch (p_event_pckt->evt)
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	2bff      	cmp	r3, #255	; 0xff
 800648c:	d00e      	beq.n	80064ac <SVCCTL_App_Notification+0x34>
 800648e:	2bff      	cmp	r3, #255	; 0xff
 8006490:	dc19      	bgt.n	80064c6 <SVCCTL_App_Notification+0x4e>
 8006492:	2b05      	cmp	r3, #5
 8006494:	d019      	beq.n	80064ca <SVCCTL_App_Notification+0x52>
 8006496:	2b3e      	cmp	r3, #62	; 0x3e
 8006498:	d000      	beq.n	800649c <SVCCTL_App_Notification+0x24>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800649a:	e014      	b.n	80064c6 <SVCCTL_App_Notification+0x4e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	3302      	adds	r3, #2
 80064a0:	60fb      	str	r3, [r7, #12]
      switch (p_meta_evt->subevent)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	2b01      	cmp	r3, #1
          break;
 80064a8:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80064aa:	e011      	b.n	80064d0 <SVCCTL_App_Notification+0x58>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	3302      	adds	r3, #2
 80064b0:	613b      	str	r3, [r7, #16]
      switch (p_blecore_evt->ecode)
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	461a      	mov	r2, r3
 80064ba:	f240 4307 	movw	r3, #1031	; 0x407
 80064be:	429a      	cmp	r2, r3
 80064c0:	d105      	bne.n	80064ce <SVCCTL_App_Notification+0x56>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80064c2:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80064c4:	e003      	b.n	80064ce <SVCCTL_App_Notification+0x56>
      break;
 80064c6:	bf00      	nop
 80064c8:	e002      	b.n	80064d0 <SVCCTL_App_Notification+0x58>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80064ca:	bf00      	nop
 80064cc:	e000      	b.n	80064d0 <SVCCTL_App_Notification+0x58>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80064ce:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80064d0:	2301      	movs	r3, #1
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
	...

080064e0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80064e6:	4b06      	ldr	r3, [pc, #24]	; (8006500 <Ble_Tl_Init+0x20>)
 80064e8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80064ea:	4b06      	ldr	r3, [pc, #24]	; (8006504 <Ble_Tl_Init+0x24>)
 80064ec:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80064ee:	463b      	mov	r3, r7
 80064f0:	4619      	mov	r1, r3
 80064f2:	4805      	ldr	r0, [pc, #20]	; (8006508 <Ble_Tl_Init+0x28>)
 80064f4:	f7ff f93e 	bl	8005774 <hci_init>

  return;
 80064f8:	bf00      	nop
}
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	200300d8 	.word	0x200300d8
 8006504:	08006749 	.word	0x08006749
 8006508:	08006711 	.word	0x08006711

0800650c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800650c:	b5b0      	push	{r4, r5, r7, lr}
 800650e:	b088      	sub	sp, #32
 8006510:	af02      	add	r7, sp, #8
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8006512:	2300      	movs	r3, #0
 8006514:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8006516:	2392      	movs	r3, #146	; 0x92
 8006518:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800651a:	f7fe fe81 	bl	8005220 <hci_reset>
 800651e:	4603      	mov	r3, r0
 8006520:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8006522:	f000 f88f 	bl	8006644 <BleGetBdAddress>
 8006526:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	2106      	movs	r1, #6
 800652c:	2000      	movs	r0, #0
 800652e:	f7fe fd8b 	bl	8005048 <aci_hal_write_config_data>
 8006532:	4603      	mov	r3, r0
 8006534:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8006536:	4a27      	ldr	r2, [pc, #156]	; (80065d4 <Ble_Hci_Gap_Gatt_Init+0xc8>)
 8006538:	2110      	movs	r1, #16
 800653a:	2018      	movs	r0, #24
 800653c:	f7fe fd84 	bl	8005048 <aci_hal_write_config_data>
 8006540:	4603      	mov	r3, r0
 8006542:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8006544:	4a24      	ldr	r2, [pc, #144]	; (80065d8 <Ble_Hci_Gap_Gatt_Init+0xcc>)
 8006546:	2110      	movs	r1, #16
 8006548:	2008      	movs	r0, #8
 800654a:	f7fe fd7d 	bl	8005048 <aci_hal_write_config_data>
 800654e:	4603      	mov	r3, r0
 8006550:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8006552:	2119      	movs	r1, #25
 8006554:	2001      	movs	r0, #1
 8006556:	f7fe fdfc 	bl	8005152 <aci_hal_set_tx_power_level>
 800655a:	4603      	mov	r3, r0
 800655c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800655e:	f7fe fca5 	bl	8004eac <aci_gatt_init>
 8006562:	4603      	mov	r3, r0
 8006564:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	f043 0301 	orr.w	r3, r3, #1
 8006570:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif /* BLE_CFG_CENTRAL == 1 */

  if (role > 0)
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d01f      	beq.n	80065b8 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = "STM32WB";
 8006578:	4b18      	ldr	r3, [pc, #96]	; (80065dc <Ble_Hci_Gap_Gatt_Init+0xd0>)
 800657a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800657c:	1dba      	adds	r2, r7, #6
 800657e:	7bf8      	ldrb	r0, [r7, #15]
 8006580:	1cbb      	adds	r3, r7, #2
 8006582:	9301      	str	r3, [sp, #4]
 8006584:	1d3b      	adds	r3, r7, #4
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	4613      	mov	r3, r2
 800658a:	2207      	movs	r2, #7
 800658c:	2100      	movs	r1, #0
 800658e:	f7fe fb1a 	bl	8004bc6 <aci_gap_init>
 8006592:	4603      	mov	r3, r0
 8006594:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8006596:	88fc      	ldrh	r4, [r7, #6]
 8006598:	88bd      	ldrh	r5, [r7, #4]
 800659a:	68b8      	ldr	r0, [r7, #8]
 800659c:	f7f9 fdee 	bl	800017c <strlen>
 80065a0:	4603      	mov	r3, r0
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	4613      	mov	r3, r2
 80065aa:	2200      	movs	r2, #0
 80065ac:	4629      	mov	r1, r5
 80065ae:	4620      	mov	r0, r4
 80065b0:	f7fe fca1 	bl	8004ef6 <aci_gatt_update_char_value>
 80065b4:	4603      	mov	r3, r0
 80065b6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80065b8:	88f8      	ldrh	r0, [r7, #6]
 80065ba:	8879      	ldrh	r1, [r7, #2]
 80065bc:	463b      	mov	r3, r7
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	2302      	movs	r3, #2
 80065c2:	2200      	movs	r2, #0
 80065c4:	f7fe fc97 	bl	8004ef6 <aci_gatt_update_char_value>
 80065c8:	4603      	mov	r3, r0
 80065ca:	75fb      	strb	r3, [r7, #23]
  else
  {
    BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Appearance\n");
  }

}
 80065cc:	bf00      	nop
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bdb0      	pop	{r4, r5, r7, pc}
 80065d4:	08007700 	.word	0x08007700
 80065d8:	08007710 	.word	0x08007710
 80065dc:	08007514 	.word	0x08007514

080065e0 <Beacon_Update>:
static void Beacon_Update(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
  FLASH_EraseInitTypeDef erase;
  uint32_t pageError = 0;
 80065e6:	2300      	movs	r3, #0
 80065e8:	603b      	str	r3, [r7, #0]

  if (sector_type != 0)
 80065ea:	4b13      	ldr	r3, [pc, #76]	; (8006638 <Beacon_Update+0x58>)
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d01b      	beq.n	800662a <Beacon_Update+0x4a>
  {
    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 80065f2:	2302      	movs	r3, #2
 80065f4:	607b      	str	r3, [r7, #4]
    erase.Page      = sector_type;
 80065f6:	4b10      	ldr	r3, [pc, #64]	; (8006638 <Beacon_Update+0x58>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	60bb      	str	r3, [r7, #8]
    if (sector_type == APP_SECTORS)
 80065fc:	4b0e      	ldr	r3, [pc, #56]	; (8006638 <Beacon_Update+0x58>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b07      	cmp	r3, #7
 8006602:	d102      	bne.n	800660a <Beacon_Update+0x2a>
    {
      erase.NbPages = 2;  /* 2 sectors for beacon application */
 8006604:	2302      	movs	r3, #2
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	e001      	b.n	800660e <Beacon_Update+0x2e>
    }
    else
    {
      erase.NbPages = 1; /* 1 sector for beacon user data */
 800660a:	2301      	movs	r3, #1
 800660c:	60fb      	str	r3, [r7, #12]
    }

    HAL_FLASH_Unlock();
 800660e:	f7fc f8d7 	bl	80027c0 <HAL_FLASH_Unlock>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_OPTVERR);
 8006612:	4b0a      	ldr	r3, [pc, #40]	; (800663c <Beacon_Update+0x5c>)
 8006614:	f248 0211 	movw	r2, #32785	; 0x8011
 8006618:	611a      	str	r2, [r3, #16]

    HAL_FLASHEx_Erase(&erase, &pageError);
 800661a:	463a      	mov	r2, r7
 800661c:	1d3b      	adds	r3, r7, #4
 800661e:	4611      	mov	r1, r2
 8006620:	4618      	mov	r0, r3
 8006622:	f7fc f979 	bl	8002918 <HAL_FLASHEx_Erase>

    HAL_FLASH_Lock();
 8006626:	f7fc f8ed 	bl	8002804 <HAL_FLASH_Lock>
  }

  *(uint32_t*) SRAM1_BASE = BOOT_MODE_AND_SECTOR;
 800662a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800662e:	4a04      	ldr	r2, [pc, #16]	; (8006640 <Beacon_Update+0x60>)
 8006630:	601a      	str	r2, [r3, #0]
  /**
   * Boot Mode:    1 (OTA)
   * Sector Index: 6
   * Nb Sectors  : 1
   */
  NVIC_SystemReset();
 8006632:	f7ff fe97 	bl	8006364 <__NVIC_SystemReset>
 8006636:	bf00      	nop
 8006638:	2000024a 	.word	0x2000024a
 800663c:	58004000 	.word	0x58004000
 8006640:	00010601 	.word	0x00010601

08006644 <BleGetBdAddress>:
}

const uint8_t* BleGetBdAddress(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800664a:	f7ff fea1 	bl	8006390 <LL_FLASH_GetUDN>
 800664e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006656:	d023      	beq.n	80066a0 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8006658:	f7ff feb2 	bl	80063c0 <LL_FLASH_GetSTCompanyID>
 800665c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800665e:	f7ff fea3 	bl	80063a8 <LL_FLASH_GetDeviceID>
 8006662:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	b2da      	uxtb	r2, r3
 8006668:	4b16      	ldr	r3, [pc, #88]	; (80066c4 <BleGetBdAddress+0x80>)
 800666a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	0a1b      	lsrs	r3, r3, #8
 8006670:	b2da      	uxtb	r2, r3
 8006672:	4b14      	ldr	r3, [pc, #80]	; (80066c4 <BleGetBdAddress+0x80>)
 8006674:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	b2da      	uxtb	r2, r3
 800667a:	4b12      	ldr	r3, [pc, #72]	; (80066c4 <BleGetBdAddress+0x80>)
 800667c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	b2da      	uxtb	r2, r3
 8006682:	4b10      	ldr	r3, [pc, #64]	; (80066c4 <BleGetBdAddress+0x80>)
 8006684:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	0a1b      	lsrs	r3, r3, #8
 800668a:	b2da      	uxtb	r2, r3
 800668c:	4b0d      	ldr	r3, [pc, #52]	; (80066c4 <BleGetBdAddress+0x80>)
 800668e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	0c1b      	lsrs	r3, r3, #16
 8006694:	b2da      	uxtb	r2, r3
 8006696:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <BleGetBdAddress+0x80>)
 8006698:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800669a:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <BleGetBdAddress+0x80>)
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	e00b      	b.n	80066b8 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80066a0:	2000      	movs	r0, #0
 80066a2:	f7ff fd79 	bl	8006198 <OTP_Read>
 80066a6:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d002      	beq.n	80066b4 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	617b      	str	r3, [r7, #20]
 80066b2:	e001      	b.n	80066b8 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80066b4:	4b04      	ldr	r3, [pc, #16]	; (80066c8 <BleGetBdAddress+0x84>)
 80066b6:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80066b8:	697b      	ldr	r3, [r7, #20]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3718      	adds	r7, #24
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000244 	.word	0x20000244
 80066c8:	080076f8 	.word	0x080076f8

080066cc <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80066d4:	2100      	movs	r1, #0
 80066d6:	2002      	movs	r0, #2
 80066d8:	f000 fd7c 	bl	80071d4 <UTIL_SEQ_SetTask>

  return;
 80066dc:	bf00      	nop
}
 80066de:	3708      	adds	r7, #8
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80066ec:	2001      	movs	r0, #1
 80066ee:	f000 fddd 	bl	80072ac <UTIL_SEQ_SetEvt>

  return;
 80066f2:	bf00      	nop
}
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}

080066fa <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b082      	sub	sp, #8
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8006702:	2001      	movs	r0, #1
 8006704:	f000 fdf2 	bl	80072ec <UTIL_SEQ_WaitEvt>

  return;
 8006708:	bf00      	nop
}
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	3308      	adds	r3, #8
 8006722:	4618      	mov	r0, r3
 8006724:	f7fe fee0 	bl	80054e8 <SVCCTL_UserEvtRx>
 8006728:	4603      	mov	r3, r0
 800672a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800672c:	7afb      	ldrb	r3, [r7, #11]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2201      	movs	r2, #1
 8006736:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8006738:	e003      	b.n	8006742 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	701a      	strb	r2, [r3, #0]
  return;
 8006740:	bf00      	nop
}
 8006742:	3710      	adds	r7, #16
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	4603      	mov	r3, r0
 8006750:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <BLE_StatusNot+0x16>
 8006758:	2b01      	cmp	r3, #1
 800675a:	d006      	beq.n	800676a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800675c:	e00b      	b.n	8006776 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800675e:	230f      	movs	r3, #15
 8006760:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f000 fd62 	bl	800722c <UTIL_SEQ_PauseTask>
      break;
 8006768:	e005      	b.n	8006776 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800676a:	230f      	movs	r3, #15
 800676c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f000 fd7c 	bl	800726c <UTIL_SEQ_ResumeTask>
      break;
 8006774:	bf00      	nop
  }

  return;
 8006776:	bf00      	nop
}
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <IBeacon_Init>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/

static tBleStatus IBeacon_Init(IBeacon_InitTypeDef *IBeacon_Init)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b094      	sub	sp, #80	; 0x50
 8006784:	af08      	add	r7, sp, #32
 8006786:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN IBeacon_Init_1 */

/* USER CODE END IBeacon_Init_1 */
  tBleStatus ret = BLE_STATUS_SUCCESS;
 8006788:	2300      	movs	r3, #0
 800678a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint16_t AdvertisingInterval = (IBeacon_Init->AdvertisingInterval * ADVERTISING_INTERVAL_INCREMENT / 10);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	011b      	lsls	r3, r3, #4
 8006794:	4a53      	ldr	r2, [pc, #332]	; (80068e4 <IBeacon_Init+0x164>)
 8006796:	fb82 1203 	smull	r1, r2, r2, r3
 800679a:	1092      	asrs	r2, r2, #2
 800679c:	17db      	asrs	r3, r3, #31
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* Disable scan response. */
  hci_le_set_scan_response_data(0, NULL);
 80067a2:	2100      	movs	r1, #0
 80067a4:	2000      	movs	r0, #0
 80067a6:	f7fe fd5f 	bl	8005268 <hci_le_set_scan_response_data>

  /* Put the device in a non-connectable mode. */
  ret = aci_gap_set_discoverable(ADV_NONCONN_IND,                          /*< Advertise as non-connectable, undirected. */
 80067aa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80067ac:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80067ae:	2300      	movs	r3, #0
 80067b0:	9306      	str	r3, [sp, #24]
 80067b2:	2300      	movs	r3, #0
 80067b4:	9305      	str	r3, [sp, #20]
 80067b6:	2300      	movs	r3, #0
 80067b8:	9304      	str	r3, [sp, #16]
 80067ba:	2300      	movs	r3, #0
 80067bc:	9303      	str	r3, [sp, #12]
 80067be:	2300      	movs	r3, #0
 80067c0:	9302      	str	r3, [sp, #8]
 80067c2:	2300      	movs	r3, #0
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	2300      	movs	r3, #0
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	2300      	movs	r3, #0
 80067cc:	2003      	movs	r0, #3
 80067ce:	f7fe f900 	bl	80049d2 <aci_gap_set_discoverable>
 80067d2:	4603      	mov	r3, r0
 80067d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                 PUBLIC_ADDR, NO_WHITE_LIST_USE,           /*< Use the public address, with no white list. */
                                 0, NULL,                                  /*< Do not use a local name. */
                                 0, NULL,                                  /*< Do not include the service UUID list. */
                                 0, 0);                                    /*< Do not set a slave connection interval. */

  if (ret != BLE_STATUS_SUCCESS)
 80067d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <IBeacon_Init+0x66>
  {
    return ret;
 80067e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067e4:	e079      	b.n	80068da <IBeacon_Init+0x15a>
  }

  /* Remove the TX power level advertisement (this is done to decrease the packet size). */
  ret = aci_gap_delete_ad_type(AD_TYPE_TX_POWER_LEVEL);
 80067e6:	200a      	movs	r0, #10
 80067e8:	f7fe fb0c 	bl	8004e04 <aci_gap_delete_ad_type>
 80067ec:	4603      	mov	r3, r0
 80067ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 80067f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d002      	beq.n	8006800 <IBeacon_Init+0x80>
  {
    return ret;
 80067fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80067fe:	e06c      	b.n	80068da <IBeacon_Init+0x15a>
  }

  uint8_t service_data[] =
 8006800:	231a      	movs	r3, #26
 8006802:	743b      	strb	r3, [r7, #16]
 8006804:	23ff      	movs	r3, #255	; 0xff
 8006806:	747b      	strb	r3, [r7, #17]
 8006808:	234c      	movs	r3, #76	; 0x4c
 800680a:	74bb      	strb	r3, [r7, #18]
 800680c:	2300      	movs	r3, #0
 800680e:	74fb      	strb	r3, [r7, #19]
 8006810:	2302      	movs	r3, #2
 8006812:	753b      	strb	r3, [r7, #20]
 8006814:	2315      	movs	r3, #21
 8006816:	757b      	strb	r3, [r7, #21]
 8006818:	2300      	movs	r3, #0
 800681a:	75bb      	strb	r3, [r7, #22]
 800681c:	2300      	movs	r3, #0
 800681e:	75fb      	strb	r3, [r7, #23]
 8006820:	2300      	movs	r3, #0
 8006822:	763b      	strb	r3, [r7, #24]
 8006824:	230a      	movs	r3, #10
 8006826:	767b      	strb	r3, [r7, #25]
 8006828:	238e      	movs	r3, #142	; 0x8e
 800682a:	76bb      	strb	r3, [r7, #26]
 800682c:	2322      	movs	r3, #34	; 0x22
 800682e:	76fb      	strb	r3, [r7, #27]
 8006830:	2345      	movs	r3, #69	; 0x45
 8006832:	773b      	strb	r3, [r7, #28]
 8006834:	2341      	movs	r3, #65	; 0x41
 8006836:	777b      	strb	r3, [r7, #29]
 8006838:	239d      	movs	r3, #157	; 0x9d
 800683a:	77bb      	strb	r3, [r7, #30]
 800683c:	234c      	movs	r3, #76	; 0x4c
 800683e:	77fb      	strb	r3, [r7, #31]
 8006840:	2321      	movs	r3, #33	; 0x21
 8006842:	f887 3020 	strb.w	r3, [r7, #32]
 8006846:	23ed      	movs	r3, #237	; 0xed
 8006848:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800684c:	23ae      	movs	r3, #174	; 0xae
 800684e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006852:	2382      	movs	r3, #130	; 0x82
 8006854:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006858:	23ed      	movs	r3, #237	; 0xed
 800685a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800685e:	2319      	movs	r3, #25
 8006860:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006864:	2300      	movs	r3, #0
 8006866:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800686a:	2302      	movs	r3, #2
 800686c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006870:	2300      	movs	r3, #0
 8006872:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8006876:	4b1c      	ldr	r3, [pc, #112]	; (80068e8 <IBeacon_Init+0x168>)
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800687e:	2301      	movs	r3, #1
 8006880:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	   0x00, 0x02,					 	 	 					 /*< 2-byte Major */
	   0x00, FSR_output,					 		 			 /*< 2-byte Hand Position */
	   0x01,						     		 				 /*< 1-byte Power*/
	 };

  uint8_t flags[] =
 8006884:	4a19      	ldr	r2, [pc, #100]	; (80068ec <IBeacon_Init+0x16c>)
 8006886:	f107 030c 	add.w	r3, r7, #12
 800688a:	6812      	ldr	r2, [r2, #0]
 800688c:	4611      	mov	r1, r2
 800688e:	8019      	strh	r1, [r3, #0]
 8006890:	3302      	adds	r3, #2
 8006892:	0c12      	lsrs	r2, r2, #16
 8006894:	701a      	strb	r2, [r3, #0]
    AD_TYPE_FLAGS,                                                          /*< Flags data type value. */
    (FLAG_BIT_LE_GENERAL_DISCOVERABLE_MODE | FLAG_BIT_BR_EDR_NOT_SUPPORTED) /*< BLE general discoverable, without BR/EDR support. */
  };

  /* Update the service data. */
  ret = aci_gap_update_adv_data(sizeof(service_data), service_data);
 8006896:	f107 0310 	add.w	r3, r7, #16
 800689a:	4619      	mov	r1, r3
 800689c:	201b      	movs	r0, #27
 800689e:	f7fe fa3f 	bl	8004d20 <aci_gap_update_adv_data>
 80068a2:	4603      	mov	r3, r0
 80068a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 80068a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d002      	beq.n	80068b6 <IBeacon_Init+0x136>
  {
    return ret;
 80068b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068b4:	e011      	b.n	80068da <IBeacon_Init+0x15a>
  }

  /* Update the adverstising flags. */
  ret = aci_gap_update_adv_data(sizeof(flags), flags);
 80068b6:	f107 030c 	add.w	r3, r7, #12
 80068ba:	4619      	mov	r1, r3
 80068bc:	2003      	movs	r0, #3
 80068be:	f7fe fa2f 	bl	8004d20 <aci_gap_update_adv_data>
 80068c2:	4603      	mov	r3, r0
 80068c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (ret != BLE_STATUS_SUCCESS)
 80068c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <IBeacon_Init+0x156>
  {
    return ret;
 80068d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068d4:	e001      	b.n	80068da <IBeacon_Init+0x15a>
  }
/* USER CODE BEGIN IBeacon_Init_2 */

/* USER CODE END IBeacon_Init_2 */
  return ret;
 80068d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3730      	adds	r7, #48	; 0x30
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	66666667 	.word	0x66666667
 80068e8:	2000024b 	.word	0x2000024b
 80068ec:	0800751c 	.word	0x0800751c

080068f0 <IBeacon_Process>:

void IBeacon_Process(void)
{
 80068f0:	b590      	push	{r4, r7, lr}
 80068f2:	b08d      	sub	sp, #52	; 0x34
 80068f4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN IBeacon_Process_1 */

/* USER CODE END IBeacon_Process_1 */
  /* Default ibeacon */
  uint8_t UuID[]    = { UUID };
 80068f6:	4b11      	ldr	r3, [pc, #68]	; (800693c <IBeacon_Process+0x4c>)
 80068f8:	f107 0420 	add.w	r4, r7, #32
 80068fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t MajorID[] = { MAJOR_ID };
 8006902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006906:	83bb      	strh	r3, [r7, #28]
  uint8_t MinorID[] = { MINOR_ID };
 8006908:	f44f 7380 	mov.w	r3, #256	; 0x100
 800690c:	833b      	strh	r3, [r7, #24]

  IBeacon_InitTypeDef IBeacon_InitStruct =
 800690e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006912:	80bb      	strh	r3, [r7, #4]
 8006914:	f107 0320 	add.w	r3, r7, #32
 8006918:	60bb      	str	r3, [r7, #8]
 800691a:	f107 031c 	add.w	r3, r7, #28
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	f107 0318 	add.w	r3, r7, #24
 8006924:	613b      	str	r3, [r7, #16]
 8006926:	23c1      	movs	r3, #193	; 0xc1
 8006928:	753b      	strb	r3, [r7, #20]
    data_address += 2;
    IBeacon_InitStruct.CalibratedTxPower = *(uint8_t *)(data_address);
  }
#endif

  IBeacon_Init(&IBeacon_InitStruct);
 800692a:	1d3b      	adds	r3, r7, #4
 800692c:	4618      	mov	r0, r3
 800692e:	f7ff ff27 	bl	8006780 <IBeacon_Init>
/* USER CODE BEGIN IBeacon_Process_2 */

/* USER CODE END IBeacon_Process_2 */
}
 8006932:	bf00      	nop
 8006934:	3734      	adds	r7, #52	; 0x34
 8006936:	46bd      	mov	sp, r7
 8006938:	bd90      	pop	{r4, r7, pc}
 800693a:	bf00      	nop
 800693c:	08007520 	.word	0x08007520

08006940 <compStart>:
/* USER CODE BEGIN FD */
void compStart()
{
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0
	HAL_COMP_Start(&hcomp1);
 8006944:	4805      	ldr	r0, [pc, #20]	; (800695c <compStart+0x1c>)
 8006946:	f7fb fd2f 	bl	80023a8 <HAL_COMP_Start>
	HAL_SuspendTick();
 800694a:	f7fb fb81 	bl	8002050 <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800694e:	2101      	movs	r1, #1
 8006950:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006954:	f7fc fac6 	bl	8002ee4 <HAL_PWR_EnterSTOPMode>
}
 8006958:	bf00      	nop
 800695a:	bd80      	pop	{r7, pc}
 800695c:	20000134 	.word	0x20000134

08006960 <myFSR>:

void myFSR(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af00      	add	r7, sp, #0
	FSR_output = HAL_COMP_GetOutputLevel(&hcomp1);
 8006966:	4827      	ldr	r0, [pc, #156]	; (8006a04 <myFSR+0xa4>)
 8006968:	f7fb fd7f 	bl	800246a <HAL_COMP_GetOutputLevel>
 800696c:	4603      	mov	r3, r0
 800696e:	b2da      	uxtb	r2, r3
 8006970:	4b25      	ldr	r3, [pc, #148]	; (8006a08 <myFSR+0xa8>)
 8006972:	701a      	strb	r2, [r3, #0]
	uint8_t service_data[] =
 8006974:	231a      	movs	r3, #26
 8006976:	713b      	strb	r3, [r7, #4]
 8006978:	23ff      	movs	r3, #255	; 0xff
 800697a:	717b      	strb	r3, [r7, #5]
 800697c:	234c      	movs	r3, #76	; 0x4c
 800697e:	71bb      	strb	r3, [r7, #6]
 8006980:	2300      	movs	r3, #0
 8006982:	71fb      	strb	r3, [r7, #7]
 8006984:	2302      	movs	r3, #2
 8006986:	723b      	strb	r3, [r7, #8]
 8006988:	2315      	movs	r3, #21
 800698a:	727b      	strb	r3, [r7, #9]
 800698c:	2300      	movs	r3, #0
 800698e:	72bb      	strb	r3, [r7, #10]
 8006990:	2300      	movs	r3, #0
 8006992:	72fb      	strb	r3, [r7, #11]
 8006994:	2300      	movs	r3, #0
 8006996:	733b      	strb	r3, [r7, #12]
 8006998:	230a      	movs	r3, #10
 800699a:	737b      	strb	r3, [r7, #13]
 800699c:	238e      	movs	r3, #142	; 0x8e
 800699e:	73bb      	strb	r3, [r7, #14]
 80069a0:	2322      	movs	r3, #34	; 0x22
 80069a2:	73fb      	strb	r3, [r7, #15]
 80069a4:	2345      	movs	r3, #69	; 0x45
 80069a6:	743b      	strb	r3, [r7, #16]
 80069a8:	2341      	movs	r3, #65	; 0x41
 80069aa:	747b      	strb	r3, [r7, #17]
 80069ac:	239d      	movs	r3, #157	; 0x9d
 80069ae:	74bb      	strb	r3, [r7, #18]
 80069b0:	234c      	movs	r3, #76	; 0x4c
 80069b2:	74fb      	strb	r3, [r7, #19]
 80069b4:	2321      	movs	r3, #33	; 0x21
 80069b6:	753b      	strb	r3, [r7, #20]
 80069b8:	23ed      	movs	r3, #237	; 0xed
 80069ba:	757b      	strb	r3, [r7, #21]
 80069bc:	23ae      	movs	r3, #174	; 0xae
 80069be:	75bb      	strb	r3, [r7, #22]
 80069c0:	2382      	movs	r3, #130	; 0x82
 80069c2:	75fb      	strb	r3, [r7, #23]
 80069c4:	23ed      	movs	r3, #237	; 0xed
 80069c6:	763b      	strb	r3, [r7, #24]
 80069c8:	2319      	movs	r3, #25
 80069ca:	767b      	strb	r3, [r7, #25]
 80069cc:	2300      	movs	r3, #0
 80069ce:	76bb      	strb	r3, [r7, #26]
 80069d0:	2302      	movs	r3, #2
 80069d2:	76fb      	strb	r3, [r7, #27]
 80069d4:	2300      	movs	r3, #0
 80069d6:	773b      	strb	r3, [r7, #28]
 80069d8:	4b0b      	ldr	r3, [pc, #44]	; (8006a08 <myFSR+0xa8>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	777b      	strb	r3, [r7, #29]
 80069de:	2301      	movs	r3, #1
 80069e0:	77bb      	strb	r3, [r7, #30]
	   0x9d, 0x4c, 0x21, 0xed, 0xae, 0x82, 0xed, 0x19,			 /*< 16-byte Proximity UUID. */
	   0x00, 0x02,					 	 	 					 /*< 2-byte Major */
	   0x00, FSR_output,					 		 			 /*< 2-byte Hand Position */
	   0x01,						     		 				 /*< 1-byte Power*/
	 };
   aci_gap_update_adv_data(sizeof(service_data), service_data);
 80069e2:	1d3b      	adds	r3, r7, #4
 80069e4:	4619      	mov	r1, r3
 80069e6:	201b      	movs	r0, #27
 80069e8:	f7fe f99a 	bl	8004d20 <aci_gap_update_adv_data>

   HAL_SuspendTick();
 80069ec:	f7fb fb30 	bl	8002050 <HAL_SuspendTick>
   HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80069f0:	2101      	movs	r1, #1
 80069f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80069f6:	f7fc fa75 	bl	8002ee4 <HAL_PWR_EnterSTOPMode>
}
 80069fa:	bf00      	nop
 80069fc:	3720      	adds	r7, #32
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000134 	.word	0x20000134
 8006a08:	2000024b 	.word	0x2000024b

08006a0c <LL_C2_EXTI_EnableEvent_32_63>:
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8006a14:	4b06      	ldr	r3, [pc, #24]	; (8006a30 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006a16:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006a1a:	4905      	ldr	r1, [pc, #20]	; (8006a30 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	58000800 	.word	0x58000800

08006a34 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006a3c:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006a3e:	6a1a      	ldr	r2, [r3, #32]
 8006a40:	4904      	ldr	r1, [pc, #16]	; (8006a54 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	620b      	str	r3, [r1, #32]
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	58000800 	.word	0x58000800

08006a58 <LL_PWR_EnableBootC2>:
{
 8006a58:	b480      	push	{r7}
 8006a5a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8006a5c:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <LL_PWR_EnableBootC2+0x1c>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	4a04      	ldr	r2, [pc, #16]	; (8006a74 <LL_PWR_EnableBootC2+0x1c>)
 8006a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a66:	60d3      	str	r3, [r2, #12]
}
 8006a68:	bf00      	nop
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr
 8006a72:	bf00      	nop
 8006a74:	58000400 	.word	0x58000400

08006a78 <LL_AHB3_GRP1_EnableClock>:
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006a94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4013      	ands	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
}
 8006a9e:	bf00      	nop
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b085      	sub	sp, #20
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8006ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ab6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8006ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006aca:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
}
 8006ad6:	bf00      	nop
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <LL_C1_IPCC_EnableIT_TXF>:
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b083      	sub	sp, #12
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	601a      	str	r2, [r3, #0]
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <LL_C1_IPCC_EnableIT_RXO>:
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f043 0201 	orr.w	r2, r3, #1
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	601a      	str	r2, [r3, #0]
}
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
 8006b2a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	041b      	lsls	r3, r3, #16
 8006b34:	43db      	mvns	r3, r3
 8006b36:	401a      	ands	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	605a      	str	r2, [r3, #4]
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	041b      	lsls	r3, r3, #16
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	605a      	str	r2, [r3, #4]
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <LL_C1_IPCC_EnableReceiveChannel>:
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	43db      	mvns	r3, r3
 8006b7e:	401a      	ands	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	605a      	str	r2, [r3, #4]
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	609a      	str	r2, [r3, #8]
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <LL_C1_IPCC_SetFlag_CHx>:
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	041a      	lsls	r2, r3, #16
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	609a      	str	r2, [r3, #8]
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
 8006bd2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	4013      	ands	r3, r2
 8006bdc:	683a      	ldr	r2, [r7, #0]
 8006bde:	429a      	cmp	r2, r3
 8006be0:	d101      	bne.n	8006be6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e000      	b.n	8006be8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	69da      	ldr	r2, [r3, #28]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	4013      	ands	r3, r2
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d101      	bne.n	8006c10 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e000      	b.n	8006c12 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	370c      	adds	r7, #12
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
	...

08006c20 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8006c24:	2102      	movs	r1, #2
 8006c26:	4819      	ldr	r0, [pc, #100]	; (8006c8c <HW_IPCC_Rx_Handler+0x6c>)
 8006c28:	f7ff ffe4 	bl	8006bf4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d009      	beq.n	8006c46 <HW_IPCC_Rx_Handler+0x26>
 8006c32:	4b16      	ldr	r3, [pc, #88]	; (8006c8c <HW_IPCC_Rx_Handler+0x6c>)
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	43db      	mvns	r3, r3
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8006c40:	f000 f8da 	bl	8006df8 <HW_IPCC_SYS_EvtHandler>
 8006c44:	e01f      	b.n	8006c86 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8006c46:	2101      	movs	r1, #1
 8006c48:	4810      	ldr	r0, [pc, #64]	; (8006c8c <HW_IPCC_Rx_Handler+0x6c>)
 8006c4a:	f7ff ffd3 	bl	8006bf4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d008      	beq.n	8006c66 <HW_IPCC_Rx_Handler+0x46>
 8006c54:	4b0d      	ldr	r3, [pc, #52]	; (8006c8c <HW_IPCC_Rx_Handler+0x6c>)
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d102      	bne.n	8006c66 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8006c60:	f000 f88e 	bl	8006d80 <HW_IPCC_BLE_EvtHandler>
 8006c64:	e00f      	b.n	8006c86 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8006c66:	2108      	movs	r1, #8
 8006c68:	4808      	ldr	r0, [pc, #32]	; (8006c8c <HW_IPCC_Rx_Handler+0x6c>)
 8006c6a:	f7ff ffc3 	bl	8006bf4 <LL_C2_IPCC_IsActiveFlag_CHx>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d009      	beq.n	8006c88 <HW_IPCC_Rx_Handler+0x68>
 8006c74:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <HW_IPCC_Rx_Handler+0x6c>)
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	f003 0308 	and.w	r3, r3, #8
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8006c82:	f000 f905 	bl	8006e90 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8006c86:	bf00      	nop
 8006c88:	bf00      	nop
}
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	58000c00 	.word	0x58000c00

08006c90 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8006c94:	2102      	movs	r1, #2
 8006c96:	481a      	ldr	r0, [pc, #104]	; (8006d00 <HW_IPCC_Tx_Handler+0x70>)
 8006c98:	f7ff ff97 	bl	8006bca <LL_C1_IPCC_IsActiveFlag_CHx>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d109      	bne.n	8006cb6 <HW_IPCC_Tx_Handler+0x26>
 8006ca2:	4b17      	ldr	r3, [pc, #92]	; (8006d00 <HW_IPCC_Tx_Handler+0x70>)
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	43db      	mvns	r3, r3
 8006ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8006cb0:	f000 f896 	bl	8006de0 <HW_IPCC_SYS_CmdEvtHandler>
 8006cb4:	e020      	b.n	8006cf8 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8006cb6:	2108      	movs	r1, #8
 8006cb8:	4811      	ldr	r0, [pc, #68]	; (8006d00 <HW_IPCC_Tx_Handler+0x70>)
 8006cba:	f7ff ff86 	bl	8006bca <LL_C1_IPCC_IsActiveFlag_CHx>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d109      	bne.n	8006cd8 <HW_IPCC_Tx_Handler+0x48>
 8006cc4:	4b0e      	ldr	r3, [pc, #56]	; (8006d00 <HW_IPCC_Tx_Handler+0x70>)
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	43db      	mvns	r3, r3
 8006cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d002      	beq.n	8006cd8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8006cd2:	f000 f8bf 	bl	8006e54 <HW_IPCC_MM_FreeBufHandler>
 8006cd6:	e00f      	b.n	8006cf8 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8006cd8:	2120      	movs	r1, #32
 8006cda:	4809      	ldr	r0, [pc, #36]	; (8006d00 <HW_IPCC_Tx_Handler+0x70>)
 8006cdc:	f7ff ff75 	bl	8006bca <LL_C1_IPCC_IsActiveFlag_CHx>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d109      	bne.n	8006cfa <HW_IPCC_Tx_Handler+0x6a>
 8006ce6:	4b06      	ldr	r3, [pc, #24]	; (8006d00 <HW_IPCC_Tx_Handler+0x70>)
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	43db      	mvns	r3, r3
 8006cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8006cf4:	f000 f850 	bl	8006d98 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8006cf8:	bf00      	nop
 8006cfa:	bf00      	nop
}
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	58000c00 	.word	0x58000c00

08006d04 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8006d08:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006d0c:	f7ff fecd 	bl	8006aaa <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8006d10:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006d14:	f7ff fe8e 	bl	8006a34 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8006d18:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006d1c:	f7ff fe76 	bl	8006a0c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8006d20:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8006d22:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8006d24:	f7ff fe98 	bl	8006a58 <LL_PWR_EnableBootC2>

  return;
 8006d28:	bf00      	nop
}
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8006d30:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006d34:	f7ff fea0 	bl	8006a78 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8006d38:	4806      	ldr	r0, [pc, #24]	; (8006d54 <HW_IPCC_Init+0x28>)
 8006d3a:	f7ff fee2 	bl	8006b02 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8006d3e:	4805      	ldr	r0, [pc, #20]	; (8006d54 <HW_IPCC_Init+0x28>)
 8006d40:	f7ff fecf 	bl	8006ae2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006d44:	202c      	movs	r0, #44	; 0x2c
 8006d46:	f7fb fcf6 	bl	8002736 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006d4a:	202d      	movs	r0, #45	; 0x2d
 8006d4c:	f7fb fcf3 	bl	8002736 <HAL_NVIC_EnableIRQ>

  return;
 8006d50:	bf00      	nop
}
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	58000c00 	.word	0x58000c00

08006d58 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	4802      	ldr	r0, [pc, #8]	; (8006d68 <HW_IPCC_BLE_Init+0x10>)
 8006d60:	f7ff ff04 	bl	8006b6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006d64:	bf00      	nop
}
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	58000c00 	.word	0x58000c00

08006d6c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 8006d70:	2101      	movs	r1, #1
 8006d72:	4802      	ldr	r0, [pc, #8]	; (8006d7c <HW_IPCC_BLE_SendCmd+0x10>)
 8006d74:	f7ff ff1a 	bl	8006bac <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006d78:	bf00      	nop
}
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	58000c00 	.word	0x58000c00

08006d80 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8006d84:	f7ff f850 	bl	8005e28 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8006d88:	2101      	movs	r1, #1
 8006d8a:	4802      	ldr	r0, [pc, #8]	; (8006d94 <HW_IPCC_BLE_EvtHandler+0x14>)
 8006d8c:	f7ff ff00 	bl	8006b90 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006d90:	bf00      	nop
}
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	58000c00 	.word	0x58000c00

08006d98 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8006d9c:	2120      	movs	r1, #32
 8006d9e:	4803      	ldr	r0, [pc, #12]	; (8006dac <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8006da0:	f7ff fed2 	bl	8006b48 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8006da4:	f7ff f870 	bl	8005e88 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8006da8:	bf00      	nop
}
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	58000c00 	.word	0x58000c00

08006db0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006db4:	2102      	movs	r1, #2
 8006db6:	4802      	ldr	r0, [pc, #8]	; (8006dc0 <HW_IPCC_SYS_Init+0x10>)
 8006db8:	f7ff fed8 	bl	8006b6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006dbc:	bf00      	nop
}
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	58000c00 	.word	0x58000c00

08006dc4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006dc8:	2102      	movs	r1, #2
 8006dca:	4804      	ldr	r0, [pc, #16]	; (8006ddc <HW_IPCC_SYS_SendCmd+0x18>)
 8006dcc:	f7ff feee 	bl	8006bac <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006dd0:	2102      	movs	r1, #2
 8006dd2:	4802      	ldr	r0, [pc, #8]	; (8006ddc <HW_IPCC_SYS_SendCmd+0x18>)
 8006dd4:	f7ff fea5 	bl	8006b22 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8006dd8:	bf00      	nop
}
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	58000c00 	.word	0x58000c00

08006de0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8006de4:	2102      	movs	r1, #2
 8006de6:	4803      	ldr	r0, [pc, #12]	; (8006df4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8006de8:	f7ff feae 	bl	8006b48 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8006dec:	f7ff f89c 	bl	8005f28 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8006df0:	bf00      	nop
}
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	58000c00 	.word	0x58000c00

08006df8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8006dfc:	f7ff f8aa 	bl	8005f54 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8006e00:	2102      	movs	r1, #2
 8006e02:	4802      	ldr	r0, [pc, #8]	; (8006e0c <HW_IPCC_SYS_EvtHandler+0x14>)
 8006e04:	f7ff fec4 	bl	8006b90 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006e08:	bf00      	nop
}
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	58000c00 	.word	0x58000c00

08006e10 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8006e18:	2108      	movs	r1, #8
 8006e1a:	480c      	ldr	r0, [pc, #48]	; (8006e4c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006e1c:	f7ff fed5 	bl	8006bca <LL_C1_IPCC_IsActiveFlag_CHx>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d007      	beq.n	8006e36 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8006e26:	4a0a      	ldr	r2, [pc, #40]	; (8006e50 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006e2c:	2108      	movs	r1, #8
 8006e2e:	4807      	ldr	r0, [pc, #28]	; (8006e4c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006e30:	f7ff fe77 	bl	8006b22 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8006e34:	e006      	b.n	8006e44 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006e3a:	2108      	movs	r1, #8
 8006e3c:	4803      	ldr	r0, [pc, #12]	; (8006e4c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8006e3e:	f7ff feb5 	bl	8006bac <LL_C1_IPCC_SetFlag_CHx>
  return;
 8006e42:	bf00      	nop
}
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	58000c00 	.word	0x58000c00
 8006e50:	2000024c 	.word	0x2000024c

08006e54 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006e58:	2108      	movs	r1, #8
 8006e5a:	4806      	ldr	r0, [pc, #24]	; (8006e74 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006e5c:	f7ff fe74 	bl	8006b48 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8006e60:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8006e66:	2108      	movs	r1, #8
 8006e68:	4802      	ldr	r0, [pc, #8]	; (8006e74 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8006e6a:	f7ff fe9f 	bl	8006bac <LL_C1_IPCC_SetFlag_CHx>

  return;
 8006e6e:	bf00      	nop
}
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	58000c00 	.word	0x58000c00
 8006e78:	2000024c 	.word	0x2000024c

08006e7c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006e80:	2108      	movs	r1, #8
 8006e82:	4802      	ldr	r0, [pc, #8]	; (8006e8c <HW_IPCC_TRACES_Init+0x10>)
 8006e84:	f7ff fe72 	bl	8006b6c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8006e88:	bf00      	nop
}
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	58000c00 	.word	0x58000c00

08006e90 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8006e94:	f7ff f906 	bl	80060a4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8006e98:	2108      	movs	r1, #8
 8006e9a:	4802      	ldr	r0, [pc, #8]	; (8006ea4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8006e9c:	f7ff fe78 	bl	8006b90 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8006ea0:	bf00      	nop
}
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	58000c00 	.word	0x58000c00

08006ea8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8006eac:	4b05      	ldr	r3, [pc, #20]	; (8006ec4 <UTIL_LPM_Init+0x1c>)
 8006eae:	2200      	movs	r2, #0
 8006eb0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8006eb2:	4b05      	ldr	r3, [pc, #20]	; (8006ec8 <UTIL_LPM_Init+0x20>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8006eb8:	bf00      	nop
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	20000250 	.word	0x20000250
 8006ec8:	20000254 	.word	0x20000254

08006ecc <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b087      	sub	sp, #28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8006edc:	613b      	str	r3, [r7, #16]
  return(result);
 8006ede:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8006ee0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8006ee2:	b672      	cpsid	i
}
 8006ee4:	bf00      	nop
  
  switch(state)
 8006ee6:	78fb      	ldrb	r3, [r7, #3]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d008      	beq.n	8006efe <UTIL_LPM_SetOffMode+0x32>
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d10e      	bne.n	8006f0e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8006ef0:	4b0d      	ldr	r3, [pc, #52]	; (8006f28 <UTIL_LPM_SetOffMode+0x5c>)
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	4a0b      	ldr	r2, [pc, #44]	; (8006f28 <UTIL_LPM_SetOffMode+0x5c>)
 8006efa:	6013      	str	r3, [r2, #0]
      break;
 8006efc:	e008      	b.n	8006f10 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	43da      	mvns	r2, r3
 8006f02:	4b09      	ldr	r3, [pc, #36]	; (8006f28 <UTIL_LPM_SetOffMode+0x5c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4013      	ands	r3, r2
 8006f08:	4a07      	ldr	r2, [pc, #28]	; (8006f28 <UTIL_LPM_SetOffMode+0x5c>)
 8006f0a:	6013      	str	r3, [r2, #0]
      break;
 8006f0c:	e000      	b.n	8006f10 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8006f0e:	bf00      	nop
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f383 8810 	msr	PRIMASK, r3
}
 8006f1a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8006f1c:	bf00      	nop
 8006f1e:	371c      	adds	r7, #28
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	20000254 	.word	0x20000254

08006f2c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f32:	f3ef 8310 	mrs	r3, PRIMASK
 8006f36:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f38:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8006f3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8006f3c:	b672      	cpsid	i
}
 8006f3e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8006f40:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <UTIL_LPM_EnterLowPower+0x60>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d006      	beq.n	8006f56 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8006f48:	4b11      	ldr	r3, [pc, #68]	; (8006f90 <UTIL_LPM_EnterLowPower+0x64>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8006f4e:	4b10      	ldr	r3, [pc, #64]	; (8006f90 <UTIL_LPM_EnterLowPower+0x64>)
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	4798      	blx	r3
 8006f54:	e010      	b.n	8006f78 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8006f56:	4b0f      	ldr	r3, [pc, #60]	; (8006f94 <UTIL_LPM_EnterLowPower+0x68>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d006      	beq.n	8006f6c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8006f5e:	4b0c      	ldr	r3, [pc, #48]	; (8006f90 <UTIL_LPM_EnterLowPower+0x64>)
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8006f64:	4b0a      	ldr	r3, [pc, #40]	; (8006f90 <UTIL_LPM_EnterLowPower+0x64>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	4798      	blx	r3
 8006f6a:	e005      	b.n	8006f78 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8006f6c:	4b08      	ldr	r3, [pc, #32]	; (8006f90 <UTIL_LPM_EnterLowPower+0x64>)
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8006f72:	4b07      	ldr	r3, [pc, #28]	; (8006f90 <UTIL_LPM_EnterLowPower+0x64>)
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	4798      	blx	r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f383 8810 	msr	PRIMASK, r3
}
 8006f82:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	20000250 	.word	0x20000250
 8006f90:	08007660 	.word	0x08007660
 8006f94:	20000254 	.word	0x20000254

08006f98 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b090      	sub	sp, #64	; 0x40
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8006fa0:	4b73      	ldr	r3, [pc, #460]	; (8007170 <UTIL_SEQ_Run+0x1d8>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8006fa6:	4b72      	ldr	r3, [pc, #456]	; (8007170 <UTIL_SEQ_Run+0x1d8>)
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4013      	ands	r3, r2
 8006fae:	4a70      	ldr	r2, [pc, #448]	; (8007170 <UTIL_SEQ_Run+0x1d8>)
 8006fb0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8006fb2:	4b70      	ldr	r3, [pc, #448]	; (8007174 <UTIL_SEQ_Run+0x1dc>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8006fb8:	4b6f      	ldr	r3, [pc, #444]	; (8007178 <UTIL_SEQ_Run+0x1e0>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8006fbe:	4b6f      	ldr	r3, [pc, #444]	; (800717c <UTIL_SEQ_Run+0x1e4>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8006fc4:	4b6e      	ldr	r3, [pc, #440]	; (8007180 <UTIL_SEQ_Run+0x1e8>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8006fca:	e08d      	b.n	80070e8 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8006fd0:	e002      	b.n	8006fd8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8006fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8006fd8:	4a6a      	ldr	r2, [pc, #424]	; (8007184 <UTIL_SEQ_Run+0x1ec>)
 8006fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fdc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe2:	401a      	ands	r2, r3
 8006fe4:	4b62      	ldr	r3, [pc, #392]	; (8007170 <UTIL_SEQ_Run+0x1d8>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4013      	ands	r3, r2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0f1      	beq.n	8006fd2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8006fee:	4a65      	ldr	r2, [pc, #404]	; (8007184 <UTIL_SEQ_Run+0x1ec>)
 8006ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ff2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff8:	401a      	ands	r2, r3
 8006ffa:	4b5d      	ldr	r3, [pc, #372]	; (8007170 <UTIL_SEQ_Run+0x1d8>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4013      	ands	r3, r2
 8007000:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8007002:	4a60      	ldr	r2, [pc, #384]	; (8007184 <UTIL_SEQ_Run+0x1ec>)
 8007004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007006:	00db      	lsls	r3, r3, #3
 8007008:	4413      	add	r3, r2
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	4013      	ands	r3, r2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d106      	bne.n	8007022 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8007014:	4a5b      	ldr	r2, [pc, #364]	; (8007184 <UTIL_SEQ_Run+0x1ec>)
 8007016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	4413      	add	r3, r2
 800701c:	f04f 32ff 	mov.w	r2, #4294967295
 8007020:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8007022:	4a58      	ldr	r2, [pc, #352]	; (8007184 <UTIL_SEQ_Run+0x1ec>)
 8007024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	4413      	add	r3, r2
 800702a:	685a      	ldr	r2, [r3, #4]
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	4013      	ands	r3, r2
 8007030:	4618      	mov	r0, r3
 8007032:	f000 f9b3 	bl	800739c <SEQ_BitPosition>
 8007036:	4603      	mov	r3, r0
 8007038:	461a      	mov	r2, r3
 800703a:	4b53      	ldr	r3, [pc, #332]	; (8007188 <UTIL_SEQ_Run+0x1f0>)
 800703c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800703e:	4a51      	ldr	r2, [pc, #324]	; (8007184 <UTIL_SEQ_Run+0x1ec>)
 8007040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007042:	00db      	lsls	r3, r3, #3
 8007044:	4413      	add	r3, r2
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	4b4f      	ldr	r3, [pc, #316]	; (8007188 <UTIL_SEQ_Run+0x1f0>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2101      	movs	r1, #1
 800704e:	fa01 f303 	lsl.w	r3, r1, r3
 8007052:	43db      	mvns	r3, r3
 8007054:	401a      	ands	r2, r3
 8007056:	494b      	ldr	r1, [pc, #300]	; (8007184 <UTIL_SEQ_Run+0x1ec>)
 8007058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	440b      	add	r3, r1
 800705e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007060:	f3ef 8310 	mrs	r3, PRIMASK
 8007064:	61bb      	str	r3, [r7, #24]
  return(result);
 8007066:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007068:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800706a:	b672      	cpsid	i
}
 800706c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800706e:	4b46      	ldr	r3, [pc, #280]	; (8007188 <UTIL_SEQ_Run+0x1f0>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2201      	movs	r2, #1
 8007074:	fa02 f303 	lsl.w	r3, r2, r3
 8007078:	43da      	mvns	r2, r3
 800707a:	4b3e      	ldr	r3, [pc, #248]	; (8007174 <UTIL_SEQ_Run+0x1dc>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4013      	ands	r3, r2
 8007080:	4a3c      	ldr	r2, [pc, #240]	; (8007174 <UTIL_SEQ_Run+0x1dc>)
 8007082:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8007084:	2302      	movs	r3, #2
 8007086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007088:	e013      	b.n	80070b2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800708a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708c:	3b01      	subs	r3, #1
 800708e:	4a3d      	ldr	r2, [pc, #244]	; (8007184 <UTIL_SEQ_Run+0x1ec>)
 8007090:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8007094:	4b3c      	ldr	r3, [pc, #240]	; (8007188 <UTIL_SEQ_Run+0x1f0>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2201      	movs	r2, #1
 800709a:	fa02 f303 	lsl.w	r3, r2, r3
 800709e:	43da      	mvns	r2, r3
 80070a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a2:	3b01      	subs	r3, #1
 80070a4:	400a      	ands	r2, r1
 80070a6:	4937      	ldr	r1, [pc, #220]	; (8007184 <UTIL_SEQ_Run+0x1ec>)
 80070a8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80070ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070ae:	3b01      	subs	r3, #1
 80070b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e8      	bne.n	800708a <UTIL_SEQ_Run+0xf2>
 80070b8:	6a3b      	ldr	r3, [r7, #32]
 80070ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f383 8810 	msr	PRIMASK, r3
}
 80070c2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80070c4:	4b30      	ldr	r3, [pc, #192]	; (8007188 <UTIL_SEQ_Run+0x1f0>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a30      	ldr	r2, [pc, #192]	; (800718c <UTIL_SEQ_Run+0x1f4>)
 80070ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070ce:	4798      	blx	r3

    local_taskset = TaskSet;
 80070d0:	4b28      	ldr	r3, [pc, #160]	; (8007174 <UTIL_SEQ_Run+0x1dc>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 80070d6:	4b28      	ldr	r3, [pc, #160]	; (8007178 <UTIL_SEQ_Run+0x1e0>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 80070dc:	4b27      	ldr	r3, [pc, #156]	; (800717c <UTIL_SEQ_Run+0x1e4>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 80070e2:	4b27      	ldr	r3, [pc, #156]	; (8007180 <UTIL_SEQ_Run+0x1e8>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80070e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	401a      	ands	r2, r3
 80070ee:	4b20      	ldr	r3, [pc, #128]	; (8007170 <UTIL_SEQ_Run+0x1d8>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4013      	ands	r3, r2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d005      	beq.n	8007104 <UTIL_SEQ_Run+0x16c>
 80070f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fc:	4013      	ands	r3, r2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f43f af64 	beq.w	8006fcc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8007104:	4b20      	ldr	r3, [pc, #128]	; (8007188 <UTIL_SEQ_Run+0x1f0>)
 8007106:	f04f 32ff 	mov.w	r2, #4294967295
 800710a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800710c:	f000 f938 	bl	8007380 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007110:	f3ef 8310 	mrs	r3, PRIMASK
 8007114:	613b      	str	r3, [r7, #16]
  return(result);
 8007116:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8007118:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800711a:	b672      	cpsid	i
}
 800711c:	bf00      	nop
  local_taskset = TaskSet;
 800711e:	4b15      	ldr	r3, [pc, #84]	; (8007174 <UTIL_SEQ_Run+0x1dc>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8007124:	4b14      	ldr	r3, [pc, #80]	; (8007178 <UTIL_SEQ_Run+0x1e0>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800712a:	4b14      	ldr	r3, [pc, #80]	; (800717c <UTIL_SEQ_Run+0x1e4>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8007130:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	401a      	ands	r2, r3
 8007136:	4b0e      	ldr	r3, [pc, #56]	; (8007170 <UTIL_SEQ_Run+0x1d8>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4013      	ands	r3, r2
 800713c:	2b00      	cmp	r3, #0
 800713e:	d107      	bne.n	8007150 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8007140:	4b0f      	ldr	r3, [pc, #60]	; (8007180 <UTIL_SEQ_Run+0x1e8>)
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007146:	4013      	ands	r3, r2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d101      	bne.n	8007150 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800714c:	f7f9 fb91 	bl	8000872 <UTIL_SEQ_Idle>
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f383 8810 	msr	PRIMASK, r3
}
 800715a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800715c:	f000 f917 	bl	800738e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8007160:	4a03      	ldr	r2, [pc, #12]	; (8007170 <UTIL_SEQ_Run+0x1d8>)
 8007162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007164:	6013      	str	r3, [r2, #0]

  return;
 8007166:	bf00      	nop
}
 8007168:	3740      	adds	r7, #64	; 0x40
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20000020 	.word	0x20000020
 8007174:	20000258 	.word	0x20000258
 8007178:	2000025c 	.word	0x2000025c
 800717c:	2000001c 	.word	0x2000001c
 8007180:	20000260 	.word	0x20000260
 8007184:	200002e8 	.word	0x200002e8
 8007188:	20000264 	.word	0x20000264
 800718c:	20000268 	.word	0x20000268

08007190 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b088      	sub	sp, #32
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800719c:	f3ef 8310 	mrs	r3, PRIMASK
 80071a0:	617b      	str	r3, [r7, #20]
  return(result);
 80071a2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80071a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80071a6:	b672      	cpsid	i
}
 80071a8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 f8f6 	bl	800739c <SEQ_BitPosition>
 80071b0:	4603      	mov	r3, r0
 80071b2:	4619      	mov	r1, r3
 80071b4:	4a06      	ldr	r2, [pc, #24]	; (80071d0 <UTIL_SEQ_RegTask+0x40>)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	f383 8810 	msr	PRIMASK, r3
}
 80071c6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80071c8:	bf00      	nop
}
 80071ca:	3720      	adds	r7, #32
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	20000268 	.word	0x20000268

080071d4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80071d4:	b480      	push	{r7}
 80071d6:	b087      	sub	sp, #28
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071de:	f3ef 8310 	mrs	r3, PRIMASK
 80071e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80071e4:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80071e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80071e8:	b672      	cpsid	i
}
 80071ea:	bf00      	nop

  TaskSet |= TaskId_bm;
 80071ec:	4b0d      	ldr	r3, [pc, #52]	; (8007224 <UTIL_SEQ_SetTask+0x50>)
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	4a0b      	ldr	r2, [pc, #44]	; (8007224 <UTIL_SEQ_SetTask+0x50>)
 80071f6:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80071f8:	4a0b      	ldr	r2, [pc, #44]	; (8007228 <UTIL_SEQ_SetTask+0x54>)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	431a      	orrs	r2, r3
 8007204:	4908      	ldr	r1, [pc, #32]	; (8007228 <UTIL_SEQ_SetTask+0x54>)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f383 8810 	msr	PRIMASK, r3
}
 8007216:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8007218:	bf00      	nop
}
 800721a:	371c      	adds	r7, #28
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	20000258 	.word	0x20000258
 8007228:	200002e8 	.word	0x200002e8

0800722c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007234:	f3ef 8310 	mrs	r3, PRIMASK
 8007238:	60fb      	str	r3, [r7, #12]
  return(result);
 800723a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800723c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800723e:	b672      	cpsid	i
}
 8007240:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	43da      	mvns	r2, r3
 8007246:	4b08      	ldr	r3, [pc, #32]	; (8007268 <UTIL_SEQ_PauseTask+0x3c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4013      	ands	r3, r2
 800724c:	4a06      	ldr	r2, [pc, #24]	; (8007268 <UTIL_SEQ_PauseTask+0x3c>)
 800724e:	6013      	str	r3, [r2, #0]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	f383 8810 	msr	PRIMASK, r3
}
 800725a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800725c:	bf00      	nop
}
 800725e:	371c      	adds	r7, #28
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	2000001c 	.word	0x2000001c

0800726c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800726c:	b480      	push	{r7}
 800726e:	b087      	sub	sp, #28
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007274:	f3ef 8310 	mrs	r3, PRIMASK
 8007278:	60fb      	str	r3, [r7, #12]
  return(result);
 800727a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800727c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800727e:	b672      	cpsid	i
}
 8007280:	bf00      	nop

  TaskMask |= TaskId_bm;
 8007282:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <UTIL_SEQ_ResumeTask+0x3c>)
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4313      	orrs	r3, r2
 800728a:	4a07      	ldr	r2, [pc, #28]	; (80072a8 <UTIL_SEQ_ResumeTask+0x3c>)
 800728c:	6013      	str	r3, [r2, #0]
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f383 8810 	msr	PRIMASK, r3
}
 8007298:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800729a:	bf00      	nop
}
 800729c:	371c      	adds	r7, #28
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	2000001c 	.word	0x2000001c

080072ac <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072b4:	f3ef 8310 	mrs	r3, PRIMASK
 80072b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80072ba:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80072bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80072be:	b672      	cpsid	i
}
 80072c0:	bf00      	nop

  EvtSet |= EvtId_bm;
 80072c2:	4b09      	ldr	r3, [pc, #36]	; (80072e8 <UTIL_SEQ_SetEvt+0x3c>)
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	4a07      	ldr	r2, [pc, #28]	; (80072e8 <UTIL_SEQ_SetEvt+0x3c>)
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	f383 8810 	msr	PRIMASK, r3
}
 80072d8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80072da:	bf00      	nop
}
 80072dc:	371c      	adds	r7, #28
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	2000025c 	.word	0x2000025c

080072ec <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b088      	sub	sp, #32
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80072f4:	4b1f      	ldr	r3, [pc, #124]	; (8007374 <UTIL_SEQ_WaitEvt+0x88>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80072fa:	4b1e      	ldr	r3, [pc, #120]	; (8007374 <UTIL_SEQ_WaitEvt+0x88>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007302:	d102      	bne.n	800730a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8007304:	2300      	movs	r3, #0
 8007306:	61fb      	str	r3, [r7, #28]
 8007308:	e005      	b.n	8007316 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800730a:	4b1a      	ldr	r3, [pc, #104]	; (8007374 <UTIL_SEQ_WaitEvt+0x88>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2201      	movs	r2, #1
 8007310:	fa02 f303 	lsl.w	r3, r2, r3
 8007314:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8007316:	4b18      	ldr	r3, [pc, #96]	; (8007378 <UTIL_SEQ_WaitEvt+0x8c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800731c:	4a16      	ldr	r2, [pc, #88]	; (8007378 <UTIL_SEQ_WaitEvt+0x8c>)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8007322:	e003      	b.n	800732c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	69f8      	ldr	r0, [r7, #28]
 8007328:	f7f9 faa9 	bl	800087e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800732c:	4b13      	ldr	r3, [pc, #76]	; (800737c <UTIL_SEQ_WaitEvt+0x90>)
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4013      	ands	r3, r2
 8007334:	2b00      	cmp	r3, #0
 8007336:	d0f5      	beq.n	8007324 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8007338:	4a0e      	ldr	r2, [pc, #56]	; (8007374 <UTIL_SEQ_WaitEvt+0x88>)
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800733e:	f3ef 8310 	mrs	r3, PRIMASK
 8007342:	60bb      	str	r3, [r7, #8]
  return(result);
 8007344:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8007346:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007348:	b672      	cpsid	i
}
 800734a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	43da      	mvns	r2, r3
 8007350:	4b0a      	ldr	r3, [pc, #40]	; (800737c <UTIL_SEQ_WaitEvt+0x90>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4013      	ands	r3, r2
 8007356:	4a09      	ldr	r2, [pc, #36]	; (800737c <UTIL_SEQ_WaitEvt+0x90>)
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f383 8810 	msr	PRIMASK, r3
}
 8007364:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8007366:	4a04      	ldr	r2, [pc, #16]	; (8007378 <UTIL_SEQ_WaitEvt+0x8c>)
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	6013      	str	r3, [r2, #0]
  return;
 800736c:	bf00      	nop
}
 800736e:	3720      	adds	r7, #32
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	20000264 	.word	0x20000264
 8007378:	20000260 	.word	0x20000260
 800737c:	2000025c 	.word	0x2000025c

08007380 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8007380:	b480      	push	{r7}
 8007382:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007384:	bf00      	nop
}
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800738e:	b480      	push	{r7}
 8007390:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8007392:	bf00      	nop
}
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	0c1b      	lsrs	r3, r3, #16
 80073b0:	041b      	lsls	r3, r3, #16
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d104      	bne.n	80073c0 <SEQ_BitPosition+0x24>
 80073b6:	2310      	movs	r3, #16
 80073b8:	73fb      	strb	r3, [r7, #15]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	041b      	lsls	r3, r3, #16
 80073be:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d105      	bne.n	80073d6 <SEQ_BitPosition+0x3a>
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	3308      	adds	r3, #8
 80073ce:	73fb      	strb	r3, [r7, #15]
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	021b      	lsls	r3, r3, #8
 80073d4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d105      	bne.n	80073ec <SEQ_BitPosition+0x50>
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	3304      	adds	r3, #4
 80073e4:	73fb      	strb	r3, [r7, #15]
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	011b      	lsls	r3, r3, #4
 80073ea:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	0f1b      	lsrs	r3, r3, #28
 80073f0:	4a07      	ldr	r2, [pc, #28]	; (8007410 <SEQ_BitPosition+0x74>)
 80073f2:	5cd2      	ldrb	r2, [r2, r3]
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	4413      	add	r3, r2
 80073f8:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	f1c3 031f 	rsb	r3, r3, #31
 8007400:	b2db      	uxtb	r3, r3
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	08007720 	.word	0x08007720

08007414 <__libc_init_array>:
 8007414:	b570      	push	{r4, r5, r6, lr}
 8007416:	4d0d      	ldr	r5, [pc, #52]	; (800744c <__libc_init_array+0x38>)
 8007418:	4c0d      	ldr	r4, [pc, #52]	; (8007450 <__libc_init_array+0x3c>)
 800741a:	1b64      	subs	r4, r4, r5
 800741c:	10a4      	asrs	r4, r4, #2
 800741e:	2600      	movs	r6, #0
 8007420:	42a6      	cmp	r6, r4
 8007422:	d109      	bne.n	8007438 <__libc_init_array+0x24>
 8007424:	4d0b      	ldr	r5, [pc, #44]	; (8007454 <__libc_init_array+0x40>)
 8007426:	4c0c      	ldr	r4, [pc, #48]	; (8007458 <__libc_init_array+0x44>)
 8007428:	f000 f82e 	bl	8007488 <_init>
 800742c:	1b64      	subs	r4, r4, r5
 800742e:	10a4      	asrs	r4, r4, #2
 8007430:	2600      	movs	r6, #0
 8007432:	42a6      	cmp	r6, r4
 8007434:	d105      	bne.n	8007442 <__libc_init_array+0x2e>
 8007436:	bd70      	pop	{r4, r5, r6, pc}
 8007438:	f855 3b04 	ldr.w	r3, [r5], #4
 800743c:	4798      	blx	r3
 800743e:	3601      	adds	r6, #1
 8007440:	e7ee      	b.n	8007420 <__libc_init_array+0xc>
 8007442:	f855 3b04 	ldr.w	r3, [r5], #4
 8007446:	4798      	blx	r3
 8007448:	3601      	adds	r6, #1
 800744a:	e7f2      	b.n	8007432 <__libc_init_array+0x1e>
 800744c:	08007730 	.word	0x08007730
 8007450:	08007730 	.word	0x08007730
 8007454:	08007730 	.word	0x08007730
 8007458:	08007734 	.word	0x08007734

0800745c <memcpy>:
 800745c:	440a      	add	r2, r1
 800745e:	4291      	cmp	r1, r2
 8007460:	f100 33ff 	add.w	r3, r0, #4294967295
 8007464:	d100      	bne.n	8007468 <memcpy+0xc>
 8007466:	4770      	bx	lr
 8007468:	b510      	push	{r4, lr}
 800746a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800746e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007472:	4291      	cmp	r1, r2
 8007474:	d1f9      	bne.n	800746a <memcpy+0xe>
 8007476:	bd10      	pop	{r4, pc}

08007478 <memset>:
 8007478:	4402      	add	r2, r0
 800747a:	4603      	mov	r3, r0
 800747c:	4293      	cmp	r3, r2
 800747e:	d100      	bne.n	8007482 <memset+0xa>
 8007480:	4770      	bx	lr
 8007482:	f803 1b01 	strb.w	r1, [r3], #1
 8007486:	e7f9      	b.n	800747c <memset+0x4>

08007488 <_init>:
 8007488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800748a:	bf00      	nop
 800748c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800748e:	bc08      	pop	{r3}
 8007490:	469e      	mov	lr, r3
 8007492:	4770      	bx	lr

08007494 <_fini>:
 8007494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007496:	bf00      	nop
 8007498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749a:	bc08      	pop	{r3}
 800749c:	469e      	mov	lr, r3
 800749e:	4770      	bx	lr
